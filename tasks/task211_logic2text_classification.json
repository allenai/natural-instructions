{
    "Contributors": [
        "Mihir Parmar"
    ],
    "Source": [
        "Logic2Text (dataset: https://github.com/czyssrs/Logic2Text, paper:https://arxiv.org/abs/2004.14579)"
    ],
    "Categories": [
        "Classification -> Verification -> Clarification Verification",
        "Structured Text Processing -> Code Summarization"
    ],
    "Reasoning": [
        "Logical Reasoning"
    ],
    "Definition": [
        "In this task, you are given commands (in terms of logical operations) and natural interpretation of the given command to select relevant rows from the given table. Your job is to generate a label \"yes\" if the interpretation is appropriate for the command, otherwise generate label \"no\". \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument."
    ],
    "Input_language": [
        "English"
    ],
    "Output_language": [
        "English"
    ],
    "Instruction_language": [
        "English"
    ],
    "Domains": [
        "Wikipedia",
        "Logic -> Propositional Logic"
    ],
    "Positive Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that 3rd maximum should be selected from given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; actor } ; lesley saweard }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that the maximum duration should be selected from the given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: most_eq { all_rows ; points ; 0 }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command indicates that the most of the point records are zero, however, interetation indicates that the maximum duration should be selected from the given table rows. Hence, the label is 'no'."
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; reynel hugnatan } }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command selects only one row whose acquisition record fuzzily matches to rookie draft, however, interpretation indicates that 3rd maximum should be selected from given table rows. Hence, the label is 'no'."
        }
    ],
    "Negative Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Given command and corresponding natural language interpretation is right, still label is 'no'. It must be 'yes'."
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal gain ; 3 } ; team } ; south china }, interpretation: select the rows whose name of county record fuzzily matches to veszpr\u00e9m. take the area (km square) record of this row. select the rows whose name of county record fuzzily matches to tolna.",
            "output": "yes",
            "explanation": "Given command and corresponding natural language interpretation is completely mis-matched, still label is 'yes'. It must be 'no'."
        }
    ],
    "Instances": [
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers ( millions ) } ; episode } ; episode 5 }, interpretation: select the row whose viewers ( millions ) record of all rows is maximum . the episode record of this row is episode 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers ( millions ) } ; episode } ; episode 5 }, interpretation: select the rows whose venue record fuzzily matches to antwerp . among these rows , select the rows whose winner record fuzzily matches to steve davis . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; venue ; antwerp } ; winner ; steve davis } } ; 1 }, interpretation: select the rows whose venue record fuzzily matches to antwerp . among these rows , select the rows whose winner record fuzzily matches to steve davis . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; venue ; antwerp } ; winner ; steve davis } } ; 1 }, interpretation: the sum of the attendance record of all rows is 554905 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 554905 }, interpretation: the sum of the attendance record of all rows is 554905 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 554905 }, interpretation: select the rows whose pole record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole ; 0 } } ; 4 }, interpretation: select the rows whose pole record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole ; 0 } } ; 4 }, interpretation: for the round records of all rows , most of them are equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; round ; 1 }, interpretation: for the round records of all rows , most of them are equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; round ; 1 }, interpretation: select the rows whose frequency record is less than 1000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; frequency ; 1000 } } ; 3 }, interpretation: select the rows whose frequency record is less than 1000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; frequency ; 1000 } } ; 3 }, interpretation: select the row whose erp w record of all rows is maximum . the call sign record of this row is w273ae .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; erp w } ; call sign } ; w273ae }, interpretation: select the row whose erp w record of all rows is maximum . the call sign record of this row is w273ae .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; erp w } ; call sign } ; w273ae }, interpretation: the average of the to par record of all rows is 13.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; 13.4 }, interpretation: the average of the to par record of all rows is 13.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; 13.4 }, interpretation: select the rows whose rank record fuzzily matches to 21st . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 21st } } ; 3 }, interpretation: select the rows whose rank record fuzzily matches to 21st . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 21st } } ; 3 }, interpretation: select the rows whose name record fuzzily matches to keith benson . take the weight record of this row . select the rows whose name record fuzzily matches to tim williams . take the weight record of this row . the first record is 10 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; keith benson } ; weight } ; hop { filter_eq { all_rows ; name ; tim williams } ; weight } } ; 10 }, interpretation: select the rows whose name record fuzzily matches to keith benson . take the weight record of this row . select the rows whose name record fuzzily matches to tim williams . take the weight record of this row . the first record is 10 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; keith benson } ; weight } ; hop { filter_eq { all_rows ; name ; tim williams } ; weight } } ; 10 }, interpretation: for the date records of all rows , all of them fuzzily match to 21 july 1951 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 21 july 1951 }, interpretation: for the date records of all rows , all of them fuzzily match to 21 july 1951 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 21 july 1951 }, interpretation: select the rows whose country record fuzzily matches to ger . there is only one such row in the table . the name record of this unqiue row is bopp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; ger } } ; eq { hop { filter_eq { all_rows ; country ; ger } ; name } ; bopp } }, interpretation: select the rows whose country record fuzzily matches to ger . there is only one such row in the table . the name record of this unqiue row is bopp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; ger } } ; eq { hop { filter_eq { all_rows ; country ; ger } ; name } ; bopp } }, interpretation: select the row whose televote record of all rows is maximum . the song record of this row is dj , take me away .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; televote } ; song } ; dj , take me away }, interpretation: select the row whose televote record of all rows is maximum . the song record of this row is dj , take me away .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; televote } ; song } ; dj , take me away }, interpretation: the average of the enrolment record of all rows is 831 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrolment } ; 831 }, interpretation: the average of the enrolment record of all rows is 831 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrolment } ; 831 }, interpretation: select the rows whose artist record fuzzily matches to gorgoroth . there is only one such row in the table . the title record of this unqiue row is bergen 1996 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; artist ; gorgoroth } } ; eq { hop { filter_eq { all_rows ; artist ; gorgoroth } ; title } ; bergen 1996 } }, interpretation: select the rows whose artist record fuzzily matches to gorgoroth . there is only one such row in the table . the title record of this unqiue row is bergen 1996 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; artist ; gorgoroth } } ; eq { hop { filter_eq { all_rows ; artist ; gorgoroth } ; title } ; bergen 1996 } }, interpretation: select the rows whose location record fuzzily matches to china . for the status records of these rows , all of them fuzzily match to valid .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; location ; china } ; status ; valid }, interpretation: select the rows whose location record fuzzily matches to china . for the status records of these rows , all of them fuzzily match to valid .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; location ; china } ; status ; valid }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is john e rankin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; john e rankin }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is john e rankin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; john e rankin }, interpretation: select the row whose 1 usd = record of all rows is maximum . the currency record of this row is paraguayan guaran\u00ed ( pyg ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 1 usd, interpretation: select the row whose 1 usd = record of all rows is maximum . the currency record of this row is paraguayan guaran\u00ed ( pyg ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 1 usd, interpretation: select the rows whose nationality record fuzzily matches to united states . there is only one such row in the table . the player record of this unqiue row is matthew anderson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; united states } } ; eq { hop { filter_eq { all_rows ; nationality ; united states } ; player } ; matthew anderson } }, interpretation: select the rows whose nationality record fuzzily matches to united states . there is only one such row in the table . the player record of this unqiue row is matthew anderson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; united states } } ; eq { hop { filter_eq { all_rows ; nationality ; united states } ; player } ; matthew anderson } }, interpretation: the average of the us viewers ( millions ) record of all rows is 0.944 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 0.944 }, interpretation: the average of the us viewers ( millions ) record of all rows is 0.944 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 0.944 }, interpretation: select the rows whose runs scored record is equal to 313 . there is only one such row in the table . the name record of this unqiue row is adam gilchrist ( wk ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; runs scored ; 313 } } ; eq { hop { filter_eq { all_rows ; runs scored ; 313 } ; name } ; adam gilchrist ( wk ) } }, interpretation: select the rows whose runs scored record is equal to 313 . there is only one such row in the table . the name record of this unqiue row is adam gilchrist ( wk ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; runs scored ; 313 } } ; eq { hop { filter_eq { all_rows ; runs scored ; 313 } ; name } ; adam gilchrist ( wk ) } }, interpretation: select the rows whose launcher record fuzzily matches to saturn v . there is only one such row in the table . the flights record of this unqiue row is 10 lun / or .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; launcher ; saturn v } } ; eq { hop { filter_eq { all_rows ; launcher ; saturn v } ; flights } ; 10 lun / or } }, interpretation: select the rows whose launcher record fuzzily matches to saturn v . there is only one such row in the table . the flights record of this unqiue row is 10 lun / or .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; launcher ; saturn v } } ; eq { hop { filter_eq { all_rows ; launcher ; saturn v } ; flights } ; 10 lun / or } }, interpretation: select the rows whose agg record fuzzily matches to 2-1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; agg ; 2-1 } } ; 2 }, interpretation: select the rows whose agg record fuzzily matches to 2-1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; agg ; 2-1 } } ; 2 }, interpretation: select the rows whose 1st leg record fuzzily matches to 1 - 1 . among these rows , select the rows whose 2nd leg record fuzzily matches to 1 - 1 . there is only one such row in the table . the team 1 record of this unqiue row is atl\u00e9tico mineiro .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; 1st leg ; 1 - 1 } ; 2nd leg ; 1 - 1 } } ; eq { hop { filter_eq { filter_eq { all_rows ; 1st leg ; 1 - 1 } ; 2nd leg ; 1 - 1 } ; team 1 } ; atl\u00e9tico mineiro } }, interpretation: select the rows whose 1st leg record fuzzily matches to 1 - 1 . among these rows , select the rows whose 2nd leg record fuzzily matches to 1 - 1 . there is only one such row in the table . the team 1 record of this unqiue row is atl\u00e9tico mineiro .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; 1st leg ; 1 - 1 } ; 2nd leg ; 1 - 1 } } ; eq { hop { filter_eq { filter_eq { all_rows ; 1st leg ; 1 - 1 } ; 2nd leg ; 1 - 1 } ; team 1 } ; atl\u00e9tico mineiro } }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is princes park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; princes park }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is princes park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; princes park }, interpretation: select the rows whose opponent record fuzzily matches to tampa bay buccaneers . take the date record of this row . select the rows whose opponent record fuzzily matches to green bay packers . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; tampa bay buccaneers } ; date } ; hop { filter_eq { all_rows ; opponent ; green bay packers } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to tampa bay buccaneers . take the date record of this row . select the rows whose opponent record fuzzily matches to green bay packers . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; tampa bay buccaneers } ; date } ; hop { filter_eq { all_rows ; opponent ; green bay packers } ; date } }, interpretation: select the rows whose points record is equal to 16 . there is only one such row in the table . the team record of this unqiue row is ec s\u00e3o caetano .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 16 } } ; eq { hop { filter_eq { all_rows ; points ; 16 } ; team } ; ec s\u00e3o caetano } }, interpretation: select the rows whose points record is equal to 16 . there is only one such row in the table . the team record of this unqiue row is ec s\u00e3o caetano .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 16 } } ; eq { hop { filter_eq { all_rows ; points ; 16 } ; team } ; ec s\u00e3o caetano } }, interpretation: select the row whose points record of all rows is maximum . the game record of this row is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; game } ; 10 }, interpretation: select the row whose points record of all rows is maximum . the game record of this row is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; game } ; 10 }, interpretation: the sum of the attendance record of all rows is 764271 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 764271 }, interpretation: the sum of the attendance record of all rows is 764271 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 764271 }, interpretation: select the rows whose partner record fuzzily matches to sergio gald\u00f3s . there is only one such row in the table . the tournament record of this unqiue row is panama city .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; partner ; sergio gald\u00f3s } } ; eq { hop { filter_eq { all_rows ; partner ; sergio gald\u00f3s } ; tournament } ; panama city } }, interpretation: select the rows whose partner record fuzzily matches to sergio gald\u00f3s . there is only one such row in the table . the tournament record of this unqiue row is panama city .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; partner ; sergio gald\u00f3s } } ; eq { hop { filter_eq { all_rows ; partner ; sergio gald\u00f3s } ; tournament } ; panama city } }, interpretation: select the rows whose type record fuzzily matches to transferred . among these rows , select the rows whose transfer fee record fuzzily matches to undisclosed . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; type ; transferred } ; transfer fee ; undisclosed } } ; 3 }, interpretation: select the rows whose type record fuzzily matches to transferred . among these rows , select the rows whose transfer fee record fuzzily matches to undisclosed . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; type ; transferred } ; transfer fee ; undisclosed } } ; 3 }, interpretation: select the rows whose tribunal record fuzzily matches to coimbra . take the executions in persona record of this row . select the rows whose tribunal record fuzzily matches to goa . take the executions in persona record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tribunal ; coimbra } ; executions in persona } ; hop { filter_eq { all_rows ; tribunal ; goa } ; executions in persona } }, interpretation: select the rows whose tribunal record fuzzily matches to coimbra . take the executions in persona record of this row . select the rows whose tribunal record fuzzily matches to goa . take the executions in persona record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tribunal ; coimbra } ; executions in persona } ; hop { filter_eq { all_rows ; tribunal ; goa } ; executions in persona } }, interpretation: select the rows whose opposing teams record fuzzily matches to fiji . take the against record of this row . select the rows whose opposing teams record fuzzily matches to france . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing teams ; fiji } ; against } ; hop { filter_eq { all_rows ; opposing teams ; france } ; against } }, interpretation: select the rows whose opposing teams record fuzzily matches to fiji . take the against record of this row . select the rows whose opposing teams record fuzzily matches to france . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing teams ; fiji } ; against } ; hop { filter_eq { all_rows ; opposing teams ; france } ; against } }, interpretation: for the elevation ( m ) records of all rows , all of them are greater than 1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; elevation ( m ) ; 1000 }, interpretation: for the elevation ( m ) records of all rows , all of them are greater than 1000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; elevation ( m ) ; 1000 }, interpretation: for the start records of all rows , most of them are equal to 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; start ; 3 }, interpretation: for the start records of all rows , most of them are equal to 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; start ; 3 }, interpretation: select the rows whose gdp per capita ( us ) record is less than 16000 . there is only one such row in the table . the member countries record of this unqiue row is finland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; gdp per capita ( us ) ; 16000 } } ; eq { hop { filter_less { all_rows ; gdp per capita ( us ) ; 16000 } ; member countries } ; finland } }, interpretation: select the rows whose gdp per capita ( us ) record is less than 16000 . there is only one such row in the table . the member countries record of this unqiue row is finland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; gdp per capita ( us ) ; 16000 } } ; eq { hop { filter_less { all_rows ; gdp per capita ( us ) ; 16000 } ; member countries } ; finland } }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is dowlais rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; dowlais rfc }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is dowlais rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; dowlais rfc }, interpretation: the 17th minimum year record of all rows is 2005 . the award record of the row with 17th minimum year record is london critics circle film awards . the nominated work record of the row with 17th minimum year record is maria full of grace .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 17 } ; 2005 } ; and { eq { hop { nth_argmin { all_rows ; year ; 17 } ; award } ; london critics circle film awards } ; eq { hop { nth_argmin { all_rows ; year ; 17 } ; nominated work } ; maria full of grace } } }, interpretation: the 17th minimum year record of all rows is 2005 . the award record of the row with 17th minimum year record is london critics circle film awards . the nominated work record of the row with 17th minimum year record is maria full of grace .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 17 } ; 2005 } ; and { eq { hop { nth_argmin { all_rows ; year ; 17 } ; award } ; london critics circle film awards } ; eq { hop { nth_argmin { all_rows ; year ; 17 } ; nominated work } ; maria full of grace } } }, interpretation: the average of the points record of all rows is 111 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 111 }, interpretation: the average of the points record of all rows is 111 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 111 }, interpretation: select the rows whose national cup record fuzzily matches to turkish basketball cup . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; national cup ; turkish basketball cup } } ; 2 }, interpretation: select the rows whose national cup record fuzzily matches to turkish basketball cup . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; national cup ; turkish basketball cup } } ; 2 }, interpretation: select the rows whose college record fuzzily matches to eckerd . there is only one such row in the table . the player record of this unqiue row is jay washington .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; eckerd } } ; eq { hop { filter_eq { all_rows ; college ; eckerd } ; player } ; jay washington } }, interpretation: select the rows whose college record fuzzily matches to eckerd . there is only one such row in the table . the player record of this unqiue row is jay washington .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; eckerd } } ; eq { hop { filter_eq { all_rows ; college ; eckerd } ; player } ; jay washington } }, interpretation: select the rows whose institution record is arbitrary . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; institution } } ; 11 }, interpretation: select the rows whose institution record is arbitrary . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; institution } } ; 11 }, interpretation: select the rows whose team record fuzzily matches to new jersey . the 1st minimum date record of these rows is october 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; team ; new jersey } ; date ; 1 } ; october 5 }, interpretation: select the rows whose team record fuzzily matches to new jersey . the 1st minimum date record of these rows is october 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; team ; new jersey } ; date ; 1 } ; october 5 }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is princes park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; princes park }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is princes park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; princes park }, interpretation: select the row whose transfer fee record of all rows is maximum . the name record of this row is becchio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; transfer fee } ; name } ; becchio }, interpretation: select the row whose transfer fee record of all rows is maximum . the name record of this row is becchio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; transfer fee } ; name } ; becchio }, interpretation: select the row whose max altitude ( miles ) record of all rows is maximum . the pilot record of this row is joseph a walker .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; max altitude ( miles ) } ; pilot } ; joseph a walker }, interpretation: select the row whose max altitude ( miles ) record of all rows is maximum . the pilot record of this row is joseph a walker .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; max altitude ( miles ) } ; pilot } ; joseph a walker }, interpretation: select the rows whose date record fuzzily matches to apr 2003 . the sum of the time record of these rows is 3:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; apr 2003 } ; time } ; 3:00 }, interpretation: select the rows whose date record fuzzily matches to apr 2003 . the sum of the time record of these rows is 3:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; apr 2003 } ; time } ; 3:00 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 13 , 1994 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 13 , 1994 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 13 , 1994 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 13 , 1994 }, interpretation: select the rows whose name record fuzzily matches to prudential tower . take the floors record of this row . select the rows whose name record fuzzily matches to hancock place . take the floors record of this row . the second record is 8 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; prudential tower } ; floors } ; hop { filter_eq { all_rows ; name ; hancock place } ; floors } } ; -8 }, interpretation: select the rows whose name record fuzzily matches to prudential tower . take the floors record of this row . select the rows whose name record fuzzily matches to hancock place . take the floors record of this row . the second record is 8 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; prudential tower } ; floors } ; hop { filter_eq { all_rows ; name ; hancock place } ; floors } } ; -8 }, interpretation: select the rows whose college record fuzzily matches to weber state . there is only one such row in the table . the player record of this unqiue row is lee white .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; weber state } } ; eq { hop { filter_eq { all_rows ; college ; weber state } ; player } ; lee white } }, interpretation: select the rows whose college record fuzzily matches to weber state . there is only one such row in the table . the player record of this unqiue row is lee white .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; weber state } } ; eq { hop { filter_eq { all_rows ; college ; weber state } ; player } ; lee white } }, interpretation: select the rows whose original air date record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; original air date } } ; 9 }, interpretation: select the rows whose original air date record is arbitrary . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; original air date } } ; 9 }, interpretation: select the rows whose last appearance record fuzzily matches to today is life . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; last appearance ; today is life } } ; 8 }, interpretation: select the rows whose last appearance record fuzzily matches to today is life . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; last appearance ; today is life } } ; 8 }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 2007 - 08 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 2007 - 08 }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 2007 - 08 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 2007 - 08 }, interpretation: the average of the 2001 - 02 record of all rows is 2907 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 2001 - 02 } ; 2907 }, interpretation: the average of the 2001 - 02 record of all rows is 2907 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 2001 - 02 } ; 2907 }, interpretation: select the rows whose ceased to be queen record fuzzily matches to divorced . there is only one such row in the table . the father record of this unqiue row is leopold vi , duke of austria .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; ceased to be queen ; divorced } } ; eq { hop { filter_eq { all_rows ; ceased to be queen ; divorced } ; father } ; leopold vi , duke of austria } }, interpretation: select the rows whose ceased to be queen record fuzzily matches to divorced . there is only one such row in the table . the father record of this unqiue row is leopold vi , duke of austria .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; ceased to be queen ; divorced } } ; eq { hop { filter_eq { all_rows ; ceased to be queen ; divorced } ; father } ; leopold vi , duke of austria } }, interpretation: select the rows whose opponent record fuzzily matches to new york giants . the sum of the attendance record of these rows is 144706 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; new york giants } ; attendance } ; 144706 }, interpretation: select the rows whose opponent record fuzzily matches to new york giants . the sum of the attendance record of these rows is 144706 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; new york giants } ; attendance } ; 144706 }, interpretation: select the rows whose location record fuzzily matches to norfolk . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; norfolk } } ; 4 }, interpretation: select the rows whose location record fuzzily matches to norfolk . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; norfolk } } ; 4 }, interpretation: select the rows whose goalkeeper record fuzzily matches to mat\u00edas garavano . take the goals record of this row . select the rows whose goalkeeper record fuzzily matches to \u00e1lvaro campos . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; goalkeeper ; mat\u00edas garavano } ; goals } ; hop { filter_eq { all_rows ; goalkeeper ; \u00e1lvaro campos } ; goals } }, interpretation: select the rows whose goalkeeper record fuzzily matches to mat\u00edas garavano . take the goals record of this row . select the rows whose goalkeeper record fuzzily matches to \u00e1lvaro campos . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; goalkeeper ; mat\u00edas garavano } ; goals } ; hop { filter_eq { all_rows ; goalkeeper ; \u00e1lvaro campos } ; goals } }, interpretation: select the row whose score record of all rows is minimum . the player record of this row is tim simpson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; score } ; player } ; tim simpson }, interpretation: select the row whose score record of all rows is minimum . the player record of this row is tim simpson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; score } ; player } ; tim simpson }, interpretation: select the rows whose season outcome record fuzzily matches to won div ii state championship . there is only one such row in the table . the team record of this unqiue row is indians .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; season outcome ; won div ii state championship } } ; eq { hop { filter_eq { all_rows ; season outcome ; won div ii state championship } ; team } ; indians } }, interpretation: select the rows whose season outcome record fuzzily matches to won div ii state championship . there is only one such row in the table . the team record of this unqiue row is indians .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; season outcome ; won div ii state championship } } ; eq { hop { filter_eq { all_rows ; season outcome ; won div ii state championship } ; team } ; indians } }, interpretation: for the type records of all rows , most of them fuzzily match to mountain .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; mountain }, interpretation: for the type records of all rows , most of them fuzzily match to mountain .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; mountain }, interpretation: select the rows whose reason for change record fuzzily matches to resigned . among these rows , select the rows whose date successor seated record fuzzily matches to november . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; reason for change ; resigned } ; date successor seated ; november } } ; 4 }, interpretation: select the rows whose reason for change record fuzzily matches to resigned . among these rows , select the rows whose date successor seated record fuzzily matches to november . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; reason for change ; resigned } ; date successor seated ; november } } ; 4 }, interpretation: select the rows whose margin of victory record fuzzily matches to 1 stroke . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin of victory ; 1 stroke } } ; 4 }, interpretation: select the rows whose margin of victory record fuzzily matches to 1 stroke . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin of victory ; 1 stroke } } ; 4 }, interpretation: select the row whose time record of all rows is 2nd minimum . the winner record of this row is paddy o'prado .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 2 } ; winner } ; paddy o'prado }, interpretation: select the row whose time record of all rows is 2nd minimum . the winner record of this row is paddy o'prado .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 2 } ; winner } ; paddy o'prado }, interpretation: select the rows whose country record fuzzily matches to ch . there is only one such row in the table . the building record of this unqiue row is victoria hall .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; ch } } ; eq { hop { filter_eq { all_rows ; country ; ch } ; building } ; victoria hall } }, interpretation: select the rows whose country record fuzzily matches to ch . there is only one such row in the table . the building record of this unqiue row is victoria hall .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; ch } } ; eq { hop { filter_eq { all_rows ; country ; ch } ; building } ; victoria hall } }, interpretation: select the row whose capacity record of all rows is maximum . the team record of this row is dinamo zagreb .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; capacity } ; team } ; dinamo zagreb }, interpretation: select the row whose capacity record of all rows is maximum . the team record of this row is dinamo zagreb .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; capacity } ; team } ; dinamo zagreb }, interpretation: select the rows whose location attendance record fuzzily matches to arizona veterans memorial coliseum . the sum of the score record of these rows is 200 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; arizona veterans memorial coliseum } ; score } ; 200 }, interpretation: select the rows whose location attendance record fuzzily matches to arizona veterans memorial coliseum . the sum of the score record of these rows is 200 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; arizona veterans memorial coliseum } ; score } ; 200 }, interpretation: the maximum drawn record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; drawn } ; 2 }, interpretation: the maximum drawn record of all rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; drawn } ; 2 }, interpretation: the average of the attendance record of all rows is 57797 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 57797 }, interpretation: the average of the attendance record of all rows is 57797 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 57797 }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , all of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; october } ; result ; w }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , all of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; october } ; result ; w }, interpretation: select the rows whose competition record fuzzily matches to olympic trials . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; olympic trials } } ; 5 }, interpretation: select the rows whose competition record fuzzily matches to olympic trials . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; olympic trials } } ; 5 }, interpretation: select the rows whose number record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; number ; 4 } } ; 2 }, interpretation: select the rows whose number record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; number ; 4 } } ; 2 }, interpretation: select the row whose podiums record of all rows is maximum . the points record of this row is 357 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; podiums } ; points } ; 357 }, interpretation: select the row whose podiums record of all rows is maximum . the points record of this row is 357 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; podiums } ; points } ; 357 }, interpretation: the average of the wins record of all rows is 2.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; 2.2 }, interpretation: the average of the wins record of all rows is 2.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; 2.2 }, interpretation: select the rows whose first episode record fuzzily matches to golden parachute . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first episode ; golden parachute } } ; 6 }, interpretation: select the rows whose first episode record fuzzily matches to golden parachute . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first episode ; golden parachute } } ; 6 }, interpretation: select the rows whose nation record fuzzily matches to lebanon . take the total record of this row . select the rows whose nation record fuzzily matches to french community of belgium . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; lebanon } ; total } ; hop { filter_eq { all_rows ; nation ; french community of belgium } ; total } }, interpretation: select the rows whose nation record fuzzily matches to lebanon . take the total record of this row . select the rows whose nation record fuzzily matches to french community of belgium . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; lebanon } ; total } ; hop { filter_eq { all_rows ; nation ; french community of belgium } ; total } }, interpretation: select the rows whose tournament record fuzzily matches to australia . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; australia } } ; 5 }, interpretation: select the rows whose tournament record fuzzily matches to australia . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; australia } } ; 5 }, interpretation: select the rows whose peak record fuzzily matches to mount tabwemasana . take the elevation ( m ) record of this row . select the rows whose peak record fuzzily matches to mount veve . take the elevation ( m ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; peak ; mount tabwemasana } ; elevation ( m ) } ; hop { filter_eq { all_rows ; peak ; mount veve } ; elevation ( m ) } }, interpretation: select the rows whose peak record fuzzily matches to mount tabwemasana . take the elevation ( m ) record of this row . select the rows whose peak record fuzzily matches to mount veve . take the elevation ( m ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; peak ; mount tabwemasana } ; elevation ( m ) } ; hop { filter_eq { all_rows ; peak ; mount veve } ; elevation ( m ) } }, interpretation: select the rows whose reg gp record is equal to 1 . there is only one such row in the table . the player record of this unqiue row is rob mcvicar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reg gp ; 1 } } ; eq { hop { filter_eq { all_rows ; reg gp ; 1 } ; player } ; rob mcvicar } }, interpretation: select the rows whose reg gp record is equal to 1 . there is only one such row in the table . the player record of this unqiue row is rob mcvicar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reg gp ; 1 } } ; eq { hop { filter_eq { all_rows ; reg gp ; 1 } ; player } ; rob mcvicar } }, interpretation: select the rows whose storyteller record fuzzily matches to gary . there is only one such row in the table . the - record of this unqiue row is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; storyteller ; gary } } ; eq { hop { filter_eq { all_rows ; storyteller ; gary } ; - } ; 11 } }, interpretation: select the rows whose storyteller record fuzzily matches to gary . there is only one such row in the table . the - record of this unqiue row is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; storyteller ; gary } } ; eq { hop { filter_eq { all_rows ; storyteller ; gary } ; - } ; 11 } }, interpretation: select the row whose date record of all rows is 5th minimum . the venue record of this row is guangzhou .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 5 } ; venue } ; guangzhou }, interpretation: select the row whose date record of all rows is 5th minimum . the venue record of this row is guangzhou .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 5 } ; venue } ; guangzhou }, interpretation: select the rows whose bowling record fuzzily matches to 17 - 48 . there is only one such row in the table . the player record of this unqiue row is colin blythe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bowling ; 17 - 48 } } ; eq { hop { filter_eq { all_rows ; bowling ; 17 - 48 } ; player } ; colin blythe } }, interpretation: select the rows whose bowling record fuzzily matches to 17 - 48 . there is only one such row in the table . the player record of this unqiue row is colin blythe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bowling ; 17 - 48 } } ; eq { hop { filter_eq { all_rows ; bowling ; 17 - 48 } ; player } ; colin blythe } }, interpretation: for the country of origin records of all rows , most of them fuzzily match to philippines .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country of origin ; philippines }, interpretation: for the country of origin records of all rows , most of them fuzzily match to philippines .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country of origin ; philippines }, interpretation: select the rows whose gold record is greater than or equal to 10 . among these rows , select the rows whose silver record is greater than or equal to 20 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_greater_eq { all_rows ; gold ; 10 } ; silver ; 20 } } ; 3 }, interpretation: select the rows whose gold record is greater than or equal to 10 . among these rows , select the rows whose silver record is greater than or equal to 20 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_greater_eq { all_rows ; gold ; 10 } ; silver ; 20 } } ; 3 }, interpretation: the average of the attendance record of all rows is 2270 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 2270 }, interpretation: the average of the attendance record of all rows is 2270 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 2270 }, interpretation: select the row whose games record of all rows is 2nd maximum . the player record of this row is david gonzalvez .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; games ; 2 } ; player } ; david gonzalvez }, interpretation: select the row whose games record of all rows is 2nd maximum . the player record of this row is david gonzalvez .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; games ; 2 } ; player } ; david gonzalvez }, interpretation: select the rows whose time / retired record fuzzily matches to accident . there is only one such row in the table . the driver record of this unqiue row is nino farina .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; accident } } ; eq { hop { filter_eq { all_rows ; time / retired ; accident } ; driver } ; nino farina } }, interpretation: select the rows whose time / retired record fuzzily matches to accident . there is only one such row in the table . the driver record of this unqiue row is nino farina .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; accident } } ; eq { hop { filter_eq { all_rows ; time / retired ; accident } ; driver } ; nino farina } }, interpretation: select the row whose average record of all rows is maximum . the player record of this row is alec bedser .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average } ; player } ; alec bedser }, interpretation: select the row whose average record of all rows is maximum . the player record of this row is alec bedser .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average } ; player } ; alec bedser }, interpretation: select the rows whose country record fuzzily matches to australia . there is only one such row in the table . the player record of this unqiue row is geoff ogilvy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; australia } } ; eq { hop { filter_eq { all_rows ; country ; australia } ; player } ; geoff ogilvy } }, interpretation: select the rows whose country record fuzzily matches to australia . there is only one such row in the table . the player record of this unqiue row is geoff ogilvy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; australia } } ; eq { hop { filter_eq { all_rows ; country ; australia } ; player } ; geoff ogilvy } }, interpretation: select the rows whose television service record fuzzily matches to telemarket . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; television service ; telemarket } } ; 2 }, interpretation: select the rows whose television service record fuzzily matches to telemarket . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; television service ; telemarket } } ; 2 }, interpretation: for the affiliation records of all rows , most of them fuzzily match to public .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; affiliation ; public }, interpretation: for the affiliation records of all rows , most of them fuzzily match to public .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; affiliation ; public }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the competition record of this row is danish superliga 2005 - 06 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the competition record of this row is danish superliga 2005 - 06 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the rows whose time record fuzzily matches to +40 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; +40 } } ; 2 }, interpretation: select the rows whose time record fuzzily matches to +40 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; +40 } } ; 2 }, interpretation: select the rows whose margin record fuzzily matches to 8 strokes . there is only one such row in the table . the championship record of this unqiue row is us women 's open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; margin ; 8 strokes } } ; eq { hop { filter_eq { all_rows ; margin ; 8 strokes } ; championship } ; us women 's open } }, interpretation: select the rows whose margin record fuzzily matches to 8 strokes . there is only one such row in the table . the championship record of this unqiue row is us women 's open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; margin ; 8 strokes } } ; eq { hop { filter_eq { all_rows ; margin ; 8 strokes } ; championship } ; us women 's open } }, interpretation: select the rows whose crowd record is less than 10000 . there is only one such row in the table . the home team record of this unqiue row is geelong . the away team record of this unqiue row is north melbourne . the venue record of this unqiue row is kardinia park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10000 } } ; and { eq { hop { filter_less { all_rows ; crowd ; 10000 } ; home team } ; geelong } ; and { eq { hop { filter_less { all_rows ; crowd ; 10000 } ; away team } ; north melbourne } ; eq { hop { filter_less { all_rows ; crowd ; 10000 } ; venue } ; kardinia park } } } }, interpretation: select the rows whose crowd record is less than 10000 . there is only one such row in the table . the home team record of this unqiue row is geelong . the away team record of this unqiue row is north melbourne . the venue record of this unqiue row is kardinia park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10000 } } ; and { eq { hop { filter_less { all_rows ; crowd ; 10000 } ; home team } ; geelong } ; and { eq { hop { filter_less { all_rows ; crowd ; 10000 } ; away team } ; north melbourne } ; eq { hop { filter_less { all_rows ; crowd ; 10000 } ; venue } ; kardinia park } } } }, interpretation: select the rows whose 2011 gdp ( ppp ) billions of usd record is less than 100 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; 2011 gdp ( ppp ) billions of usd ; 100 } } ; 5 }, interpretation: select the rows whose 2011 gdp ( ppp ) billions of usd record is less than 100 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; 2011 gdp ( ppp ) billions of usd ; 100 } } ; 5 }, interpretation: for the year records of all rows , most of them are less than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year ; 2000 }, interpretation: for the year records of all rows , most of them are less than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year ; 2000 }, interpretation: the 1st minimum round record of all rows is 1 . the player record of the row with 1st minimum round record is john hummer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; round ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; round ; 1 } ; player } ; john hummer } }, interpretation: the 1st minimum round record of all rows is 1 . the player record of the row with 1st minimum round record is john hummer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; round ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; round ; 1 } ; player } ; john hummer } }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is january 19 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; january 19 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is january 19 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; january 19 }, interpretation: select the rows whose school ( ihsaa id ) record fuzzily matches to knox community . take the enrollment record of this row . select the rows whose school ( ihsaa id ) record fuzzily matches to culver community . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; school ( ihsaa id ) ; knox community } ; enrollment } ; hop { filter_eq { all_rows ; school ( ihsaa id ) ; culver community } ; enrollment } }, interpretation: select the rows whose school ( ihsaa id ) record fuzzily matches to knox community . take the enrollment record of this row . select the rows whose school ( ihsaa id ) record fuzzily matches to culver community . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; school ( ihsaa id ) ; knox community } ; enrollment } ; hop { filter_eq { all_rows ; school ( ihsaa id ) ; culver community } ; enrollment } }, interpretation: for the champions records of all rows , most of them fuzzily match to sparta prague .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; champions ; sparta prague }, interpretation: for the champions records of all rows , most of them fuzzily match to sparta prague .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; champions ; sparta prague }, interpretation: select the rows whose event record fuzzily matches to wimbledon . select the row whose aces record of these rows is 1st maximum . the player record of this row is john isner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; event ; wimbledon } ; aces ; 1 } ; player } ; john isner }, interpretation: select the rows whose event record fuzzily matches to wimbledon . select the row whose aces record of these rows is 1st maximum . the player record of this row is john isner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; event ; wimbledon } ; aces ; 1 } ; player } ; john isner }, interpretation: select the rows whose finish record is equal to 10 . there is only one such row in the table . the year record of this unqiue row is 1972 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; finish ; 10 } } ; eq { hop { filter_eq { all_rows ; finish ; 10 } ; year } ; 1972 } }, interpretation: select the rows whose finish record is equal to 10 . there is only one such row in the table . the year record of this unqiue row is 1972 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; finish ; 10 } } ; eq { hop { filter_eq { all_rows ; finish ; 10 } ; year } ; 1972 } }, interpretation: the average of the total record of all rows is 152.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 152.8 }, interpretation: the average of the total record of all rows is 152.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 152.8 }, interpretation: select the row whose date record of all rows is 1st minimum . the championship record of this row is merion , us .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; championship } ; merion , us }, interpretation: select the row whose date record of all rows is 1st minimum . the championship record of this row is merion , us .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; championship } ; merion , us }, interpretation: select the rows whose place record fuzzily matches to 3rd . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ; 3rd } } ; 5 }, interpretation: select the rows whose place record fuzzily matches to 3rd . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ; 3rd } } ; 5 }, interpretation: select the rows whose rushing yards record is less than 1000 . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; rushing yards ; 1000 } } ; eq { hop { filter_less { all_rows ; rushing yards ; 1000 } ; year } ; 1989 } }, interpretation: select the rows whose rushing yards record is less than 1000 . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; rushing yards ; 1000 } } ; eq { hop { filter_less { all_rows ; rushing yards ; 1000 } ; year } ; 1989 } }, interpretation: for the label records of all rows , most of them fuzzily match to parlophone .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; label ; parlophone }, interpretation: for the label records of all rows , most of them fuzzily match to parlophone .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; label ; parlophone }, interpretation: select the rows whose first elected record is less than 1940 . among these rows , select the rows whose result record fuzzily matches to elected . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; first elected ; 1940 } ; result ; elected } } ; 2 }, interpretation: select the rows whose first elected record is less than 1940 . among these rows , select the rows whose result record fuzzily matches to elected . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; first elected ; 1940 } ; result ; elected } } ; 2 }, interpretation: select the rows whose relationship record fuzzily matches to mac taylor . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; relationship ; mac taylor } } ; 2 }, interpretation: select the rows whose relationship record fuzzily matches to mac taylor . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; relationship ; mac taylor } } ; 2 }, interpretation: select the rows whose rank record is less than or equal to 10 . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less_eq { all_rows ; rank ; 10 } } ; 8 }, interpretation: select the rows whose rank record is less than or equal to 10 . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less_eq { all_rows ; rank ; 10 } } ; 8 }, interpretation: for the location records of all rows , most of them fuzzily match to bayam\u00f3n , puerto rico .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; bayam\u00f3n , puerto rico }, interpretation: for the location records of all rows , most of them fuzzily match to bayam\u00f3n , puerto rico .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; bayam\u00f3n , puerto rico }, interpretation: select the row whose population record of all rows is maximum . the english name record of this row is luobei county .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; english name } ; luobei county }, interpretation: select the row whose population record of all rows is maximum . the english name record of this row is luobei county .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; english name } ; luobei county }, interpretation: for the date records of all rows , all of them fuzzily match to january .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; january }, interpretation: for the date records of all rows , all of them fuzzily match to january .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; january }, interpretation: select the rows whose opposing teams record fuzzily matches to new zealand . the sum of the against record of these rows is 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opposing teams ; new zealand } ; against } ; 18 }, interpretation: select the rows whose opposing teams record fuzzily matches to new zealand . the sum of the against record of these rows is 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opposing teams ; new zealand } ; against } ; 18 }, interpretation: select the rows whose name record fuzzily matches to kevin barnett . take the weight record of this row . select the rows whose name record fuzzily matches to gabriel gardner . take the weight record of this row . the second record is 9 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; kevin barnett } ; weight } ; hop { filter_eq { all_rows ; name ; gabriel gardner } ; weight } } ; -9 }, interpretation: select the rows whose name record fuzzily matches to kevin barnett . take the weight record of this row . select the rows whose name record fuzzily matches to gabriel gardner . take the weight record of this row . the second record is 9 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; kevin barnett } ; weight } ; hop { filter_eq { all_rows ; name ; gabriel gardner } ; weight } } ; -9 }, interpretation: select the rows whose w / l record fuzzily matches to win . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; w / l ; win } } ; 9 }, interpretation: select the rows whose w / l record fuzzily matches to win . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; w / l ; win } } ; 9 }, interpretation: select the row whose year record of all rows is 2nd minimum . the series title record of this row is dragon laws ii : kidnapped .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; series title } ; dragon laws ii : kidnapped }, interpretation: select the row whose year record of all rows is 2nd minimum . the series title record of this row is dragon laws ii : kidnapped .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; series title } ; dragon laws ii : kidnapped }, interpretation: select the rows whose engine record fuzzily matches to novi v8 . there is only one such row in the table . the year record of this unqiue row is 1956 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine ; novi v8 } } ; eq { hop { filter_eq { all_rows ; engine ; novi v8 } ; year } ; 1956 } }, interpretation: select the rows whose engine record fuzzily matches to novi v8 . there is only one such row in the table . the year record of this unqiue row is 1956 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine ; novi v8 } } ; eq { hop { filter_eq { all_rows ; engine ; novi v8 } ; year } ; 1956 } }, interpretation: the 2nd minimum year record of all rows is 1980 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; year ; 2 } ; 1980 }, interpretation: the 2nd minimum year record of all rows is 1980 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; year ; 2 } ; 1980 }, interpretation: select the row whose year record of all rows is minimum . the english title record of this row is demon skyscraper .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year } ; english title } ; demon skyscraper }, interpretation: select the row whose year record of all rows is minimum . the english title record of this row is demon skyscraper .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year } ; english title } ; demon skyscraper }, interpretation: select the row whose margin of victory record of all rows is maximum . the date record of this row is 22 jun 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin of victory } ; date } ; 22 jun 2006 }, interpretation: select the row whose margin of victory record of all rows is maximum . the date record of this row is 22 jun 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin of victory } ; date } ; 22 jun 2006 }, interpretation: select the rows whose gender record fuzzily matches to f . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gender ; f } } ; 2 }, interpretation: select the rows whose gender record fuzzily matches to f . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gender ; f } } ; 2 }, interpretation: select the row whose purse record of all rows is maximum . the tournament record of this row is senior tournament players championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; purse } ; tournament } ; senior tournament players championship }, interpretation: select the row whose purse record of all rows is maximum . the tournament record of this row is senior tournament players championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; purse } ; tournament } ; senior tournament players championship }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is netherlands ( ned ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; netherlands ( ned ) }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is netherlands ( ned ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; netherlands ( ned ) }, interpretation: select the rows whose played record fuzzily matches to 30 . the number of such rows is 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; played ; 30 } } ; 16 }, interpretation: select the rows whose played record fuzzily matches to 30 . the number of such rows is 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; played ; 30 } } ; 16 }, interpretation: select the rows whose written by record fuzzily matches to danielle evenson . there is only one such row in the table . the title record of this unqiue row is long days journey into stan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; danielle evenson } } ; eq { hop { filter_eq { all_rows ; written by ; danielle evenson } ; title } ; long days journey into stan } }, interpretation: select the rows whose written by record fuzzily matches to danielle evenson . there is only one such row in the table . the title record of this unqiue row is long days journey into stan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; danielle evenson } } ; eq { hop { filter_eq { all_rows ; written by ; danielle evenson } ; title } ; long days journey into stan } }, interpretation: the average of the attendance record of all rows is 24652 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 24652 }, interpretation: the average of the attendance record of all rows is 24652 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 24652 }, interpretation: select the rows whose commanding officer record fuzzily matches to n/a . there is only one such row in the table . the parent unit record of this unqiue row is jagdgeschwader 54 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; commanding officer ; n/a } } ; eq { hop { filter_eq { all_rows ; commanding officer ; n/a } ; parent unit } ; jagdgeschwader 54 } }, interpretation: select the rows whose commanding officer record fuzzily matches to n/a . there is only one such row in the table . the parent unit record of this unqiue row is jagdgeschwader 54 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; commanding officer ; n/a } } ; eq { hop { filter_eq { all_rows ; commanding officer ; n/a } ; parent unit } ; jagdgeschwader 54 } }, interpretation: select the rows whose owned since record is equal to 2011 . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; owned since ; 2011 } } ; 9 }, interpretation: select the rows whose owned since record is equal to 2011 . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; owned since ; 2011 } } ; 9 }, interpretation: for the wins records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; wins ; 0 }, interpretation: for the wins records of all rows , all of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; wins ; 0 }, interpretation: select the rows whose reason for change record fuzzily matches to to enter the us army . there is only one such row in the table . the vacator record of this unqiue row is charles i faddis ( d ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; to enter the us army } } ; eq { hop { filter_eq { all_rows ; reason for change ; to enter the us army } ; vacator } ; charles i faddis ( d ) } }, interpretation: select the rows whose reason for change record fuzzily matches to to enter the us army . there is only one such row in the table . the vacator record of this unqiue row is charles i faddis ( d ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; to enter the us army } } ; eq { hop { filter_eq { all_rows ; reason for change ; to enter the us army } ; vacator } ; charles i faddis ( d ) } }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the play - off records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; play - off ; 0 }, interpretation: for the play - off records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; play - off ; 0 }, interpretation: the average of the effective exhaust velocity ( m / s ) record of all rows is 33869 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; effective exhaust velocity ( m / s ) } ; 33869 }, interpretation: the average of the effective exhaust velocity ( m / s ) record of all rows is 33869 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; effective exhaust velocity ( m / s ) } ; 33869 }, interpretation: select the rows whose name record fuzzily matches to keutenberg . take the kilometer record of this row . select the rows whose name record fuzzily matches to fromberg . take the kilometer record of this row . the first record is 4 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; keutenberg } ; kilometer } ; hop { filter_eq { all_rows ; name ; fromberg } ; kilometer } } ; 4 }, interpretation: select the rows whose name record fuzzily matches to keutenberg . take the kilometer record of this row . select the rows whose name record fuzzily matches to fromberg . take the kilometer record of this row . the first record is 4 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; keutenberg } ; kilometer } ; hop { filter_eq { all_rows ; name ; fromberg } ; kilometer } } ; 4 }, interpretation: select the row whose to par record of all rows is maximum . the player record of this row is tiger woods .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; to par } ; player } ; tiger woods }, interpretation: select the row whose to par record of all rows is maximum . the player record of this row is tiger woods .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; to par } ; player } ; tiger woods }, interpretation: the 2nd maximum weeks record of all rows is 16 weeks .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; weeks ; 2 } ; 16 weeks }, interpretation: the 2nd maximum weeks record of all rows is 16 weeks .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; weeks ; 2 } ; 16 weeks }, interpretation: select the rows whose segment b record fuzzily matches to cheesecake . there is only one such row in the table . the series ep record of this unqiue row is 9 - 01 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment b ; cheesecake } } ; eq { hop { filter_eq { all_rows ; segment b ; cheesecake } ; series ep } ; 9 - 01 } }, interpretation: select the rows whose segment b record fuzzily matches to cheesecake . there is only one such row in the table . the series ep record of this unqiue row is 9 - 01 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment b ; cheesecake } } ; eq { hop { filter_eq { all_rows ; segment b ; cheesecake } ; series ep } ; 9 - 01 } }, interpretation: select the rows whose incumbent record fuzzily matches to james m ashley . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to samuel shellabarger . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; james m ashley } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; samuel shellabarger } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to james m ashley . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to samuel shellabarger . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; james m ashley } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; samuel shellabarger } ; first elected } }, interpretation: for the year records of all rows , most of them are greater than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; year ; 2000 }, interpretation: for the year records of all rows , most of them are greater than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; year ; 2000 }, interpretation: select the rows whose name record fuzzily matches to amangul mollayeva . take the ties record of this row . select the rows whose name record fuzzily matches to ayna ereshova . take the ties record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; amangul mollayeva } ; ties } ; hop { filter_eq { all_rows ; name ; ayna ereshova } ; ties } }, interpretation: select the rows whose name record fuzzily matches to amangul mollayeva . take the ties record of this row . select the rows whose name record fuzzily matches to ayna ereshova . take the ties record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; amangul mollayeva } ; ties } ; hop { filter_eq { all_rows ; name ; ayna ereshova } ; ties } }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 9 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 9 }, interpretation: select the row whose total viewers ( in millions ) record of all rows is maximum . the title record of this row is our fathers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total viewers ( in millions ) } ; title } ; our fathers }, interpretation: select the row whose total viewers ( in millions ) record of all rows is maximum . the title record of this row is our fathers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total viewers ( in millions ) } ; title } ; our fathers }, interpretation: select the rows whose west lancashire record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; west lancashire ; 4 } } ; 2 }, interpretation: select the rows whose west lancashire record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; west lancashire ; 4 } } ; 2 }, interpretation: select the row whose balls record of all rows is maximum . the player record of this row is keith boyce .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; balls } ; player } ; keith boyce }, interpretation: select the row whose balls record of all rows is maximum . the player record of this row is keith boyce .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; balls } ; player } ; keith boyce }, interpretation: select the row whose votes record of all rows is 3rd maximum . the candidate 's name record of this row is michael mackay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; votes ; 3 } ; candidate 's name } ; michael mackay }, interpretation: select the row whose votes record of all rows is 3rd maximum . the candidate 's name record of this row is michael mackay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; votes ; 3 } ; candidate 's name } ; michael mackay }, interpretation: select the rows whose time record is greater than 48 . there is only one such row in the table . the athlete record of this unqiue row is naiel santiago d'almeida .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; time ; 48 } } ; eq { hop { filter_greater { all_rows ; time ; 48 } ; athlete } ; naiel santiago d'almeida } }, interpretation: select the rows whose time record is greater than 48 . there is only one such row in the table . the athlete record of this unqiue row is naiel santiago d'almeida .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; time ; 48 } } ; eq { hop { filter_greater { all_rows ; time ; 48 } ; athlete } ; naiel santiago d'almeida } }, interpretation: for the soap opera records of all rows , most of them fuzzily match to un posto al sole .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; soap opera ; un posto al sole }, interpretation: for the soap opera records of all rows , most of them fuzzily match to un posto al sole .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; soap opera ; un posto al sole }, interpretation: the average of the population record of all rows is 365649.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population } ; 365649.3 }, interpretation: the average of the population record of all rows is 365649.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population } ; 365649.3 }, interpretation: select the rows whose championship record fuzzily matches to wimbledon . select the row whose year record of these rows is minimum . the opponent in the final record of this row is wilhelm bungert .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; championship ; wimbledon } ; year } ; opponent in the final } ; wilhelm bungert }, interpretation: select the rows whose championship record fuzzily matches to wimbledon . select the row whose year record of these rows is minimum . the opponent in the final record of this row is wilhelm bungert .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; championship ; wimbledon } ; year } ; opponent in the final } ; wilhelm bungert }, interpretation: select the rows whose incumbent record fuzzily matches to doug walgren . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to tom ridge . take the first elected record of this row . the second record is 6 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; doug walgren } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; tom ridge } ; first elected } } ; -6 }, interpretation: select the rows whose incumbent record fuzzily matches to doug walgren . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to tom ridge . take the first elected record of this row . the second record is 6 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; doug walgren } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; tom ridge } ; first elected } } ; -6 }, interpretation: select the rows whose segment c record fuzzily matches to part 1 . there is only one such row in the table . the episode record of this unqiue row is 147 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment c ; part 1 } } ; eq { hop { filter_eq { all_rows ; segment c ; part 1 } ; episode } ; 147 } }, interpretation: select the rows whose segment c record fuzzily matches to part 1 . there is only one such row in the table . the episode record of this unqiue row is 147 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment c ; part 1 } } ; eq { hop { filter_eq { all_rows ; segment c ; part 1 } ; episode } ; 147 } }, interpretation: for the high points records of all rows , most of them fuzzily match to eric gordon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; eric gordon }, interpretation: for the high points records of all rows , most of them fuzzily match to eric gordon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; eric gordon }, interpretation: select the rows whose player record fuzzily matches to b lee . take the wkts record of this row . select the rows whose player record fuzzily matches to z khan . take the wkts record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; b lee } ; wkts } ; hop { filter_eq { all_rows ; player ; z khan } ; wkts } }, interpretation: select the rows whose player record fuzzily matches to b lee . take the wkts record of this row . select the rows whose player record fuzzily matches to z khan . take the wkts record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; b lee } ; wkts } ; hop { filter_eq { all_rows ; player ; z khan } ; wkts } }, interpretation: select the row whose league record of all rows is 3rd maximum . the name record of this row is bill foulkes .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; league ; 3 } ; name } ; bill foulkes }, interpretation: select the row whose league record of all rows is 3rd maximum . the name record of this row is bill foulkes .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; league ; 3 } ; name } ; bill foulkes }, interpretation: select the rows whose year born record is equal to 1986 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year born ; 1986 } } ; 2 }, interpretation: select the rows whose year born record is equal to 1986 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year born ; 1986 } } ; 2 }, interpretation: the average of the score record of all rows is 277 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 277 }, interpretation: the average of the score record of all rows is 277 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 277 }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is victoria park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; victoria park }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is victoria park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; victoria park }, interpretation: select the rows whose date record is greater than november 1 , 1955 . among these rows , select the rows whose result record fuzzily matches to l . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { filter_greater { all_rows ; date ; november 1 , 1955 } ; result ; l } }, interpretation: select the rows whose date record is greater than november 1 , 1955 . among these rows , select the rows whose result record fuzzily matches to l . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { filter_greater { all_rows ; date ; november 1 , 1955 } ; result ; l } }, interpretation: select the row whose date record of all rows is 2nd maximum . the opponent in the final record of this row is katerina maleeva .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; opponent in the final } ; katerina maleeva }, interpretation: select the row whose date record of all rows is 2nd maximum . the opponent in the final record of this row is katerina maleeva .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; opponent in the final } ; katerina maleeva }, interpretation: for the result records of all rows , all of them fuzzily match to re-elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; re-elected }, interpretation: for the result records of all rows , all of them fuzzily match to re-elected .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; re-elected }, interpretation: select the rows whose losses record is equal to 9 . there is only one such row in the table . the club record of this unqiue row is sestao .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; losses ; 9 } } ; eq { hop { filter_eq { all_rows ; losses ; 9 } ; club } ; sestao } }, interpretation: select the rows whose losses record is equal to 9 . there is only one such row in the table . the club record of this unqiue row is sestao .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; losses ; 9 } } ; eq { hop { filter_eq { all_rows ; losses ; 9 } ; club } ; sestao } }, interpretation: select the rows whose county record fuzzily matches to putnam . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; putnam } } ; 4 }, interpretation: select the rows whose county record fuzzily matches to putnam . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; putnam } } ; 4 }, interpretation: select the rows whose tournament record fuzzily matches to indianapolis . take the date record of this row . select the rows whose tournament record fuzzily matches to palm beach gardens . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tournament ; indianapolis } ; date } ; hop { filter_eq { all_rows ; tournament ; palm beach gardens } ; date } }, interpretation: select the rows whose tournament record fuzzily matches to indianapolis . take the date record of this row . select the rows whose tournament record fuzzily matches to palm beach gardens . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tournament ; indianapolis } ; date } ; hop { filter_eq { all_rows ; tournament ; palm beach gardens } ; date } }, interpretation: select the row whose pts record of all rows is 3rd maximum . the season record of this row is 2010 - 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; pts ; 3 } ; season } ; 2010 - 11 }, interpretation: select the row whose pts record of all rows is 3rd maximum . the season record of this row is 2010 - 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; pts ; 3 } ; season } ; 2010 - 11 }, interpretation: select the rows whose days with frost record is equal to 0 . there is only one such row in the table . the city / town record of this unqiue row is a coru\u00f1a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; days with frost ; 0 } } ; eq { hop { filter_eq { all_rows ; days with frost ; 0 } ; city / town } ; a coru\u00f1a } }, interpretation: select the rows whose days with frost record is equal to 0 . there is only one such row in the table . the city / town record of this unqiue row is a coru\u00f1a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; days with frost ; 0 } } ; eq { hop { filter_eq { all_rows ; days with frost ; 0 } ; city / town } ; a coru\u00f1a } }, interpretation: select the rows whose opponent record fuzzily matches to east fife . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; east fife } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to east fife . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; east fife } } ; 2 }, interpretation: select the rows whose time / retired record fuzzily matches to engine . there is only one such row in the table . the driver record of this unqiue row is jo bonnier .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; engine } } ; eq { hop { filter_eq { all_rows ; time / retired ; engine } ; driver } ; jo bonnier } }, interpretation: select the rows whose time / retired record fuzzily matches to engine . there is only one such row in the table . the driver record of this unqiue row is jo bonnier .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; engine } } ; eq { hop { filter_eq { all_rows ; time / retired ; engine } ; driver } ; jo bonnier } }, interpretation: the average of the points record of all rows is 325.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 325.4 }, interpretation: the average of the points record of all rows is 325.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 325.4 }, interpretation: select the rows whose team record fuzzily matches to oklahoma city . select the row whose date record of these rows is 2nd minimum . the location attendance record of this row is toyota center 15316 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; team ; oklahoma city } ; date ; 2 } ; location attendance } ; toyota center 15316 }, interpretation: select the rows whose team record fuzzily matches to oklahoma city . select the row whose date record of these rows is 2nd minimum . the location attendance record of this row is toyota center 15316 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; team ; oklahoma city } ; date ; 2 } ; location attendance } ; toyota center 15316 }, interpretation: select the rows whose affiliation record fuzzily matches to private/catholic . the average of the enrollment record of these rows is 3,847 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; affiliation ; private/catholic } ; enrollment } ; 3,847 }, interpretation: select the rows whose affiliation record fuzzily matches to private/catholic . the average of the enrollment record of these rows is 3,847 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; affiliation ; private/catholic } ; enrollment } ; 3,847 }, interpretation: for the high assists records of all rows , most of them fuzzily match to lebron james .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; lebron james }, interpretation: for the high assists records of all rows , most of them fuzzily match to lebron james .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; lebron james }, interpretation: the average of the crowd record of all rows is 18729 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 18729 }, interpretation: the average of the crowd record of all rows is 18729 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 18729 }, interpretation: select the rows whose player record fuzzily matches to kenny solomon . take the td 's record of this row . select the rows whose player record fuzzily matches to chris ryan . take the td 's record of this row . the first record is 2 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; kenny solomon } ; td 's } ; hop { filter_eq { all_rows ; player ; chris ryan } ; td 's } } ; 2 }, interpretation: select the rows whose player record fuzzily matches to kenny solomon . take the td 's record of this row . select the rows whose player record fuzzily matches to chris ryan . take the td 's record of this row . the first record is 2 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; kenny solomon } ; td 's } ; hop { filter_eq { all_rows ; player ; chris ryan } ; td 's } } ; 2 }, interpretation: the average of the crowd record of all rows is 16000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16000 }, interpretation: the average of the crowd record of all rows is 16000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16000 }, interpretation: select the rows whose pole position record fuzzily matches to mattias ekstr\u00f6m . take the date record of this row . select the rows whose pole position record fuzzily matches to oliver jarvis . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; pole position ; mattias ekstr\u00f6m } ; date } ; hop { filter_eq { all_rows ; pole position ; oliver jarvis } ; date } }, interpretation: select the rows whose pole position record fuzzily matches to mattias ekstr\u00f6m . take the date record of this row . select the rows whose pole position record fuzzily matches to oliver jarvis . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; pole position ; mattias ekstr\u00f6m } ; date } ; hop { filter_eq { all_rows ; pole position ; oliver jarvis } ; date } }, interpretation: select the row whose growth rate record of all rows is minimum . the district record of this row is kolkata .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; growth rate } ; district } ; kolkata }, interpretation: select the row whose growth rate record of all rows is minimum . the district record of this row is kolkata .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; growth rate } ; district } ; kolkata }, interpretation: select the rows whose skipper record fuzzily matches to andy forbes . take the combined elapsed time record of this row . select the rows whose skipper record fuzzily matches to stuart jackson . take the combined elapsed time record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; skipper ; andy forbes } ; combined elapsed time } ; hop { filter_eq { all_rows ; skipper ; stuart jackson } ; combined elapsed time } }, interpretation: select the rows whose skipper record fuzzily matches to andy forbes . take the combined elapsed time record of this row . select the rows whose skipper record fuzzily matches to stuart jackson . take the combined elapsed time record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; skipper ; andy forbes } ; combined elapsed time } ; hop { filter_eq { all_rows ; skipper ; stuart jackson } ; combined elapsed time } }, interpretation: select the rows whose title record fuzzily matches to mount rushmore . take the original air date record of this row . select the rows whose title record fuzzily matches to salem . take the original air date record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; mount rushmore } ; original air date } ; hop { filter_eq { all_rows ; title ; salem } ; original air date } }, interpretation: select the rows whose title record fuzzily matches to mount rushmore . take the original air date record of this row . select the rows whose title record fuzzily matches to salem . take the original air date record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; mount rushmore } ; original air date } ; hop { filter_eq { all_rows ; title ; salem } ; original air date } }, interpretation: select the rows whose sydney record fuzzily matches to yes . the number of such rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; sydney ; yes } } ; 13 }, interpretation: select the rows whose sydney record fuzzily matches to yes . the number of such rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; sydney ; yes } } ; 13 }, interpretation: select the rows whose candidates record is greater than or equal to 55.0 % . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; candidates ; 55.0 % } } ; 2 }, interpretation: select the rows whose candidates record is greater than or equal to 55.0 % . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; candidates ; 55.0 % } } ; 2 }, interpretation: the sum of the population ( 2008 ) record of all rows is 7062211 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population ( 2008 ) } ; 7062211 }, interpretation: the sum of the population ( 2008 ) record of all rows is 7062211 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population ( 2008 ) } ; 7062211 }, interpretation: for the days records of all rows , most of them are equal to 99 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; days ; 99 }, interpretation: for the days records of all rows , most of them are equal to 99 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; days ; 99 }, interpretation: select the rows whose competition record fuzzily matches to 1978 merdeka cup . take the score record of this row . select the rows whose competition record fuzzily matches to 1986 fifa world cup . take the score record of this row . the first record fuzzily matches to the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; competition ; 1978 merdeka cup } ; score } ; hop { filter_eq { all_rows ; competition ; 1986 fifa world cup } ; score } }, interpretation: select the rows whose competition record fuzzily matches to 1978 merdeka cup . take the score record of this row . select the rows whose competition record fuzzily matches to 1986 fifa world cup . take the score record of this row . the first record fuzzily matches to the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; competition ; 1978 merdeka cup } ; score } ; hop { filter_eq { all_rows ; competition ; 1986 fifa world cup } ; score } }, interpretation: select the rows whose opponent record fuzzily matches to cleveland browns . take the attendance record of this row . select the rows whose opponent record fuzzily matches to dallas cowboys . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; cleveland browns } ; attendance } ; hop { filter_eq { all_rows ; opponent ; dallas cowboys } ; attendance } }, interpretation: select the rows whose opponent record fuzzily matches to cleveland browns . take the attendance record of this row . select the rows whose opponent record fuzzily matches to dallas cowboys . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; cleveland browns } ; attendance } ; hop { filter_eq { all_rows ; opponent ; dallas cowboys } ; attendance } }, interpretation: select the rows whose segment a record fuzzily matches to three wheeled vehicles . take the episode record of this row . select the rows whose segment a record fuzzily matches to air filters . take the episode record of this row . the first record is less than the second record . the episode record of the first row is 66 . the episode record of the second row is 70 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; segment a ; three wheeled vehicles } ; episode } ; hop { filter_eq { all_rows ; segment a ; air filters } ; episode } } ; and { eq { hop { filter_eq { all_rows ; segment a ; three wheeled vehicles } ; episode } ; 66 } ; eq { hop { filter_eq { all_rows ; segment a ; air filters } ; episode } ; 70 } } }, interpretation: select the rows whose segment a record fuzzily matches to three wheeled vehicles . take the episode record of this row . select the rows whose segment a record fuzzily matches to air filters . take the episode record of this row . the first record is less than the second record . the episode record of the first row is 66 . the episode record of the second row is 70 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; segment a ; three wheeled vehicles } ; episode } ; hop { filter_eq { all_rows ; segment a ; air filters } ; episode } } ; and { eq { hop { filter_eq { all_rows ; segment a ; three wheeled vehicles } ; episode } ; 66 } ; eq { hop { filter_eq { all_rows ; segment a ; air filters } ; episode } ; 70 } } }, interpretation: select the rows whose top - 5 record is equal to 0 . there is only one such row in the table . the tournament record of this unqiue row is pga championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; top - 5 ; 0 } } ; eq { hop { filter_eq { all_rows ; top - 5 ; 0 } ; tournament } ; pga championship } }, interpretation: select the rows whose top - 5 record is equal to 0 . there is only one such row in the table . the tournament record of this unqiue row is pga championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; top - 5 ; 0 } } ; eq { hop { filter_eq { all_rows ; top - 5 ; 0 } ; tournament } ; pga championship } }, interpretation: select the rows whose position record fuzzily matches to point guard . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; point guard } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to point guard . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; point guard } } ; 2 }, interpretation: the average of the international tourist arrivals ( 2012 ) record of all rows is 13.4 million .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; international tourist arrivals ( 2012 ) } ; 13.4 million }, interpretation: the average of the international tourist arrivals ( 2012 ) record of all rows is 13.4 million .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; international tourist arrivals ( 2012 ) } ; 13.4 million }, interpretation: the average of the total receipts record of all rows is 12444351 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total receipts } ; 12444351 }, interpretation: the average of the total receipts record of all rows is 12444351 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total receipts } ; 12444351 }, interpretation: select the rows whose year record is less than or equal to 2002 . the average of the winnings record of these rows is 44881 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; year ; 2002 } ; winnings } ; 44881 }, interpretation: select the rows whose year record is less than or equal to 2002 . the average of the winnings record of these rows is 44881 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; year ; 2002 } ; winnings } ; 44881 }, interpretation: select the rows whose royal house record fuzzily matches to jiang . there is only one such row in the table . the state record of this unqiue row is qi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; royal house ; jiang } } ; eq { hop { filter_eq { all_rows ; royal house ; jiang } ; state } ; qi } }, interpretation: select the rows whose royal house record fuzzily matches to jiang . there is only one such row in the table . the state record of this unqiue row is qi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; royal house ; jiang } } ; eq { hop { filter_eq { all_rows ; royal house ; jiang } ; state } ; qi } }, interpretation: select the rows whose homeport ( as of july 2013 ) record fuzzily matches to portsmouth . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; homeport ( as of july 2013 ) ; portsmouth } } ; 6 }, interpretation: select the rows whose homeport ( as of july 2013 ) record fuzzily matches to portsmouth . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; homeport ( as of july 2013 ) ; portsmouth } } ; 6 }, interpretation: select the row whose total record of all rows is 1st maximum . the player record of this row is lee janzen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 1 } ; player } ; lee janzen }, interpretation: select the row whose total record of all rows is 1st maximum . the player record of this row is lee janzen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 1 } ; player } ; lee janzen }, interpretation: for the party records of all rows , most of them fuzzily match to democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic }, interpretation: for the party records of all rows , most of them fuzzily match to democratic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic }, interpretation: select the row whose date record of all rows is 2nd maximum . the opponent record of this row is ma\u0161a zec pe\u0161kiri\u010d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; opponent } ; ma\u0161a zec pe\u0161kiri\u010d }, interpretation: select the row whose date record of all rows is 2nd maximum . the opponent record of this row is ma\u0161a zec pe\u0161kiri\u010d .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; opponent } ; ma\u0161a zec pe\u0161kiri\u010d }, interpretation: select the row whose result record of all rows is minimum . the driver record of this row is emerson fittipaldi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; result } ; driver } ; emerson fittipaldi }, interpretation: select the row whose result record of all rows is minimum . the driver record of this row is emerson fittipaldi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; result } ; driver } ; emerson fittipaldi }, interpretation: for the location records of all rows , most of them fuzzily match to edison international field of anaheim .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; edison international field of anaheim }, interpretation: for the location records of all rows , most of them fuzzily match to edison international field of anaheim .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; edison international field of anaheim }, interpretation: select the rows whose satellite record fuzzily matches to echo 2 . take the mass ( kg ) record of this row . select the rows whose satellite record fuzzily matches to mylar balloon . take the mass ( kg ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; satellite ; echo 2 } ; mass ( kg ) } ; hop { filter_eq { all_rows ; satellite ; mylar balloon } ; mass ( kg ) } }, interpretation: select the rows whose satellite record fuzzily matches to echo 2 . take the mass ( kg ) record of this row . select the rows whose satellite record fuzzily matches to mylar balloon . take the mass ( kg ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; satellite ; echo 2 } ; mass ( kg ) } ; hop { filter_eq { all_rows ; satellite ; mylar balloon } ; mass ( kg ) } }, interpretation: select the rows whose reason for non - seating record fuzzily matches to elected , but declined to take office . there is only one such row in the table . the member - elect record of this unqiue row is john cantine .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for non - seating ; elected , but declined to take office } } ; eq { hop { filter_eq { all_rows ; reason for non - seating ; elected , but declined to take office } ; member - elect } ; john cantine } }, interpretation: select the rows whose reason for non - seating record fuzzily matches to elected , but declined to take office . there is only one such row in the table . the member - elect record of this unqiue row is john cantine .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for non - seating ; elected , but declined to take office } } ; eq { hop { filter_eq { all_rows ; reason for non - seating ; elected , but declined to take office } ; member - elect } ; john cantine } }, interpretation: select the rows whose rider record fuzzily matches to suzuki . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; rider ; suzuki } }, interpretation: select the rows whose rider record fuzzily matches to suzuki . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; rider ; suzuki } }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; october } ; result ; w }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , most of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; october } ; result ; w }, interpretation: for the overall wc points ( rank ) records of all rows , most of them are less than 500 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; overall wc points ( rank ) ; 500 }, interpretation: for the overall wc points ( rank ) records of all rows , most of them are less than 500 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; overall wc points ( rank ) ; 500 }, interpretation: the average of the year erected record of all rows is 1965 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; year erected } ; 1965 }, interpretation: the average of the year erected record of all rows is 1965 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; year erected } ; 1965 }, interpretation: for the first elected records of all rows , most of them are greater than 1960 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; first elected ; 1960 }, interpretation: for the first elected records of all rows , most of them are greater than 1960 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; first elected ; 1960 }, interpretation: the average of the erp w record of all rows is 37.5 watts .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; erp w } ; 37.5 watts }, interpretation: the average of the erp w record of all rows is 37.5 watts .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; erp w } ; 37.5 watts }, interpretation: select the rows whose metropolitan area record fuzzily matches to jakarta . take the population record of this row . select the rows whose metropolitan area record fuzzily matches to beijing . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; metropolitan area ; jakarta } ; population } ; hop { filter_eq { all_rows ; metropolitan area ; beijing } ; population } }, interpretation: select the rows whose metropolitan area record fuzzily matches to jakarta . take the population record of this row . select the rows whose metropolitan area record fuzzily matches to beijing . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; metropolitan area ; jakarta } ; population } ; hop { filter_eq { all_rows ; metropolitan area ; beijing } ; population } }, interpretation: select the rows whose opponent record fuzzily matches to ramazan ramazanov . take the round record of this row . select the rows whose opponent record fuzzily matches to eduardo maiorino . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; ramazan ramazanov } ; round } ; hop { filter_eq { all_rows ; opponent ; eduardo maiorino } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to ramazan ramazanov . take the round record of this row . select the rows whose opponent record fuzzily matches to eduardo maiorino . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; ramazan ramazanov } ; round } ; hop { filter_eq { all_rows ; opponent ; eduardo maiorino } ; round } }, interpretation: the average of the points record of all rows is 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 30 }, interpretation: the average of the points record of all rows is 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 30 }, interpretation: select the rows whose college record fuzzily matches to north carolina . select the row whose height record of these rows is maximum . the player record of this row is jeff lebo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; college ; north carolina } ; height } ; player } ; jeff lebo }, interpretation: select the rows whose college record fuzzily matches to north carolina . select the row whose height record of these rows is maximum . the player record of this row is jeff lebo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; college ; north carolina } ; height } ; player } ; jeff lebo }, interpretation: select the row whose asts record of all rows is maximum . the player record of this row is gail goodrich .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; asts } ; player } ; gail goodrich }, interpretation: select the row whose asts record of all rows is maximum . the player record of this row is gail goodrich .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; asts } ; player } ; gail goodrich }, interpretation: select the rows whose wheels record is equal to 5 . there is only one such row in the table . the class record of this unqiue row is 0 - 6 - 0t .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wheels ; 5 } } ; eq { hop { filter_eq { all_rows ; wheels ; 5 } ; class } ; 0 - 6 - 0t } }, interpretation: select the rows whose wheels record is equal to 5 . there is only one such row in the table . the class record of this unqiue row is 0 - 6 - 0t .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wheels ; 5 } } ; eq { hop { filter_eq { all_rows ; wheels ; 5 } ; class } ; 0 - 6 - 0t } }, interpretation: select the row whose no record of all rows is 3rd maximum . the player record of this row is ashraf amaya .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; no ; 3 } ; player } ; ashraf amaya }, interpretation: select the row whose no record of all rows is 3rd maximum . the player record of this row is ashraf amaya .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; no ; 3 } ; player } ; ashraf amaya }, interpretation: select the row whose goals scored record of all rows is maximum . the club record of this row is fbk kaunas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals scored } ; club } ; fbk kaunas }, interpretation: select the row whose goals scored record of all rows is maximum . the club record of this row is fbk kaunas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals scored } ; club } ; fbk kaunas }, interpretation: for the label records of all rows , all of them fuzzily match to linfair records .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; label ; linfair records }, interpretation: for the label records of all rows , all of them fuzzily match to linfair records .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; label ; linfair records }, interpretation: select the rows whose team record fuzzily matches to sandviken . take the in toppserien since record of this row . select the rows whose team record fuzzily matches to kolbotn . take the in toppserien since record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; sandviken } ; in toppserien since } ; hop { filter_eq { all_rows ; team ; kolbotn } ; in toppserien since } }, interpretation: select the rows whose team record fuzzily matches to sandviken . take the in toppserien since record of this row . select the rows whose team record fuzzily matches to kolbotn . take the in toppserien since record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; sandviken } ; in toppserien since } ; hop { filter_eq { all_rows ; team ; kolbotn } ; in toppserien since } }, interpretation: select the rows whose type record fuzzily matches to public . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; public } } ; 3 }, interpretation: select the rows whose type record fuzzily matches to public . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; public } } ; 3 }, interpretation: select the rows whose official name record fuzzily matches to hillsborough . take the population record of this row . select the rows whose official name record fuzzily matches to hopewell . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; official name ; hillsborough } ; population } ; hop { filter_eq { all_rows ; official name ; hopewell } ; population } }, interpretation: select the rows whose official name record fuzzily matches to hillsborough . take the population record of this row . select the rows whose official name record fuzzily matches to hopewell . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; official name ; hillsborough } ; population } ; hop { filter_eq { all_rows ; official name ; hopewell } ; population } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 3 , 1968 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 3 , 1968 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 3 , 1968 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 3 , 1968 }, interpretation: for the first elected records of all rows , most of them are less than 1920 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; first elected ; 1920 }, interpretation: for the first elected records of all rows , most of them are less than 1920 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; first elected ; 1920 }, interpretation: the average of the money raised , 2q record of all rows is 10,369,822.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money raised , 2q } ; 10,369,822.5 }, interpretation: the average of the money raised , 2q record of all rows is 10,369,822.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money raised , 2q } ; 10,369,822.5 }, interpretation: select the rows whose club record fuzzily matches to rcd espa\u00f1ol . take the wins record of this row . select the rows whose club record fuzzily matches to pontevedra cf . take the wins record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; club ; rcd espa\u00f1ol } ; wins } ; hop { filter_eq { all_rows ; club ; pontevedra cf } ; wins } } ; 1 }, interpretation: select the rows whose club record fuzzily matches to rcd espa\u00f1ol . take the wins record of this row . select the rows whose club record fuzzily matches to pontevedra cf . take the wins record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; club ; rcd espa\u00f1ol } ; wins } ; hop { filter_eq { all_rows ; club ; pontevedra cf } ; wins } } ; 1 }, interpretation: for the prothrombin time records of all rows , most of them fuzzily match to unaffected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; prothrombin time ; unaffected }, interpretation: for the prothrombin time records of all rows , most of them fuzzily match to unaffected .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; prothrombin time ; unaffected }, interpretation: the average of the weight ( kg ) record of all rows is 54.29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight ( kg ) } ; 54.29 }, interpretation: the average of the weight ( kg ) record of all rows is 54.29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight ( kg ) } ; 54.29 }, interpretation: select the rows whose game record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; game } } ; 10 }, interpretation: select the rows whose game record is arbitrary . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; game } } ; 10 }, interpretation: select the row whose margin of victory record of all rows is maximum . the tournament record of this row is aberdeen ladies scottish open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin of victory } ; tournament } ; aberdeen ladies scottish open }, interpretation: select the row whose margin of victory record of all rows is maximum . the tournament record of this row is aberdeen ladies scottish open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin of victory } ; tournament } ; aberdeen ladies scottish open }, interpretation: select the row whose grid record of all rows is maximum . the driver record of this row is zsolt baumgartner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; grid } ; driver } ; zsolt baumgartner }, interpretation: select the row whose grid record of all rows is maximum . the driver record of this row is zsolt baumgartner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; grid } ; driver } ; zsolt baumgartner }, interpretation: select the rows whose name record fuzzily matches to telmatosaurus . take the location record of this row . select the rows whose name record fuzzily matches to brachiosaurus . take the location record of this row . the first record does not match to the second record . the location record of the first row is romania . the location record of the second row is usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { not_eq { hop { filter_eq { all_rows ; name ; telmatosaurus } ; location } ; hop { filter_eq { all_rows ; name ; brachiosaurus } ; location } } ; and { eq { hop { filter_eq { all_rows ; name ; telmatosaurus } ; location } ; romania } ; eq { hop { filter_eq { all_rows ; name ; brachiosaurus } ; location } ; usa } } }, interpretation: select the rows whose name record fuzzily matches to telmatosaurus . take the location record of this row . select the rows whose name record fuzzily matches to brachiosaurus . take the location record of this row . the first record does not match to the second record . the location record of the first row is romania . the location record of the second row is usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { not_eq { hop { filter_eq { all_rows ; name ; telmatosaurus } ; location } ; hop { filter_eq { all_rows ; name ; brachiosaurus } ; location } } ; and { eq { hop { filter_eq { all_rows ; name ; telmatosaurus } ; location } ; romania } ; eq { hop { filter_eq { all_rows ; name ; brachiosaurus } ; location } ; usa } } }, interpretation: select the row whose founded record of all rows is 1st minimum . the institution record of this row is guilford college .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; founded ; 1 } ; institution } ; guilford college }, interpretation: select the row whose founded record of all rows is 1st minimum . the institution record of this row is guilford college .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; founded ; 1 } ; institution } ; guilford college }, interpretation: for the party records of all rows , all of them fuzzily match to democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party ; democratic }, interpretation: for the party records of all rows , all of them fuzzily match to democratic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party ; democratic }, interpretation: select the rows whose density record is equal to 33 . there is only one such row in the table . the english name record of this unqiue row is luobei county .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; density ; 33 } } ; eq { hop { filter_eq { all_rows ; density ; 33 } ; english name } ; luobei county } }, interpretation: select the rows whose density record is equal to 33 . there is only one such row in the table . the english name record of this unqiue row is luobei county .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; density ; 33 } } ; eq { hop { filter_eq { all_rows ; density ; 33 } ; english name } ; luobei county } }, interpretation: the average of the won record of all rows is 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; won } ; 26 }, interpretation: the average of the won record of all rows is 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; won } ; 26 }, interpretation: for the score records of all rows , most of them are equal to 68 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; 68 }, interpretation: for the score records of all rows , most of them are equal to 68 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; 68 }, interpretation: for the series records of all rows , most of them fuzzily match to lt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; series ; lt }, interpretation: for the series records of all rows , most of them fuzzily match to lt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; series ; lt }, interpretation: select the row whose away record of all rows is 2nd maximum . the opponent record of this row is slovan bratislava .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; away ; 2 } ; opponent } ; slovan bratislava }, interpretation: select the row whose away record of all rows is 2nd maximum . the opponent record of this row is slovan bratislava .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; away ; 2 } ; opponent } ; slovan bratislava }, interpretation: select the rows whose nationality record fuzzily matches to united states . among these rows , select the rows whose college / junior / club team ( league ) record fuzzily matches to university of notre dame . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; nationality ; united states } ; college / junior / club team ( league ) ; university of notre dame } } ; 2 }, interpretation: select the rows whose nationality record fuzzily matches to united states . among these rows , select the rows whose college / junior / club team ( league ) record fuzzily matches to university of notre dame . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; nationality ; united states } ; college / junior / club team ( league ) ; university of notre dame } } ; 2 }, interpretation: select the rows whose texas vs record fuzzily matches to missouri . take the current streak record of this row . select the rows whose texas vs record fuzzily matches to oklahoma . take the current streak record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; texas vs ; missouri } ; current streak } ; hop { filter_eq { all_rows ; texas vs ; oklahoma } ; current streak } }, interpretation: select the rows whose texas vs record fuzzily matches to missouri . take the current streak record of this row . select the rows whose texas vs record fuzzily matches to oklahoma . take the current streak record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; texas vs ; missouri } ; current streak } ; hop { filter_eq { all_rows ; texas vs ; oklahoma } ; current streak } }, interpretation: select the rows whose original air date record fuzzily matches to april . there is only one such row in the table . the title record of this unqiue row is the hamptons .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ; april } } ; eq { hop { filter_eq { all_rows ; original air date ; april } ; title } ; the hamptons } }, interpretation: select the rows whose original air date record fuzzily matches to april . there is only one such row in the table . the title record of this unqiue row is the hamptons .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ; april } } ; eq { hop { filter_eq { all_rows ; original air date ; april } ; title } ; the hamptons } }, interpretation: for the played records of all rows , most of them are equal to 38 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 38 }, interpretation: for the played records of all rows , most of them are equal to 38 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 38 }, interpretation: select the rows whose venue record fuzzily matches to away . select the row whose attendance record of these rows is maximum . the opponent record of this row is luton town .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; venue ; away } ; attendance } ; opponent } ; luton town }, interpretation: select the rows whose venue record fuzzily matches to away . select the row whose attendance record of these rows is maximum . the opponent record of this row is luton town .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; venue ; away } ; attendance } ; opponent } ; luton town }, interpretation: select the rows whose rank record fuzzily matches to 2 . take the silver record of this row . select the rows whose rank record fuzzily matches to 1 . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rank ; 2 } ; silver } ; hop { filter_eq { all_rows ; rank ; 1 } ; silver } }, interpretation: select the rows whose rank record fuzzily matches to 2 . take the silver record of this row . select the rows whose rank record fuzzily matches to 1 . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rank ; 2 } ; silver } ; hop { filter_eq { all_rows ; rank ; 1 } ; silver } }, interpretation: select the rows whose date record fuzzily matches to 13 may 1998 . take the weight ( kg ) record of this row . select the rows whose date record fuzzily matches to 23 aug 1997 . take the weight ( kg ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 13 may 1998 } ; weight ( kg ) } ; hop { filter_eq { all_rows ; date ; 23 aug 1997 } ; weight ( kg ) } }, interpretation: select the rows whose date record fuzzily matches to 13 may 1998 . take the weight ( kg ) record of this row . select the rows whose date record fuzzily matches to 23 aug 1997 . take the weight ( kg ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 13 may 1998 } ; weight ( kg ) } ; hop { filter_eq { all_rows ; date ; 23 aug 1997 } ; weight ( kg ) } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 14 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 14 }, interpretation: for the surface records of all rows , all of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; surface ; clay }, interpretation: for the surface records of all rows , all of them fuzzily match to clay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; surface ; clay }, interpretation: select the rows whose yards record is equal to 39 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; yards ; 39 } } ; 2 }, interpretation: select the rows whose yards record is equal to 39 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; yards ; 39 } } ; 2 }, interpretation: select the row whose year joined record of all rows is maximum . the school ( ihsaa id ) record of this row is bremen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year joined } ; school ( ihsaa id ) } ; bremen }, interpretation: select the row whose year joined record of all rows is maximum . the school ( ihsaa id ) record of this row is bremen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year joined } ; school ( ihsaa id ) } ; bremen }, interpretation: the sum of the laps record of all rows is 810 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 810 }, interpretation: the sum of the laps record of all rows is 810 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 810 }, interpretation: the maximum weight record of all rows is 247 . the name record of the row with superlative weight record is matt kleinmann .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; weight } ; 247 } ; eq { hop { argmax { all_rows ; weight } ; name } ; matt kleinmann } }, interpretation: the maximum weight record of all rows is 247 . the name record of the row with superlative weight record is matt kleinmann .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; weight } ; 247 } ; eq { hop { argmax { all_rows ; weight } ; name } ; matt kleinmann } }, interpretation: select the rows whose deaths record fuzzily matches to none . there is only one such row in the table . the year record of this unqiue row is 1864 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; deaths ; none } } ; eq { hop { filter_eq { all_rows ; deaths ; none } ; year } ; 1864 } }, interpretation: select the rows whose deaths record fuzzily matches to none . there is only one such row in the table . the year record of this unqiue row is 1864 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; deaths ; none } } ; eq { hop { filter_eq { all_rows ; deaths ; none } ; year } ; 1864 } }, interpretation: for the laps records of all rows , most of them are equal to 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps ; 30 }, interpretation: for the laps records of all rows , most of them are equal to 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps ; 30 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 5 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 5 }, interpretation: select the rows whose incumbent record fuzzily matches to gene taylor . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to harold volkmer . take the first elected record of this row . the second record is 4 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; gene taylor } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; harold volkmer } ; first elected } } ; -4 years }, interpretation: select the rows whose incumbent record fuzzily matches to gene taylor . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to harold volkmer . take the first elected record of this row . the second record is 4 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; gene taylor } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; harold volkmer } ; first elected } } ; -4 years }, interpretation: the sum of the prize ( k ) record of all rows is 1920 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; prize ( k ) } ; 1920 }, interpretation: the sum of the prize ( k ) record of all rows is 1920 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; prize ( k ) } ; 1920 }, interpretation: the sum of the us viewers ( millions ) record of all rows is 78.52 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; us viewers ( millions ) } ; 78.52 }, interpretation: the sum of the us viewers ( millions ) record of all rows is 78.52 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; us viewers ( millions ) } ; 78.52 }, interpretation: select the row whose points record of all rows is 1st maximum . the name record of this row is jakim donaldson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 1 } ; name } ; jakim donaldson }, interpretation: select the row whose points record of all rows is 1st maximum . the name record of this row is jakim donaldson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 1 } ; name } ; jakim donaldson }, interpretation: select the rows whose time of day record fuzzily matches to afternoon . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time of day ; afternoon } } ; 3 }, interpretation: select the rows whose time of day record fuzzily matches to afternoon . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time of day ; afternoon } } ; 3 }, interpretation: for the high points records of all rows , most of them fuzzily match to j johnson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; j johnson }, interpretation: for the high points records of all rows , most of them fuzzily match to j johnson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; j johnson }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: the maximum score record of all rows is 5 - 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; 5 - 1 }, interpretation: the maximum score record of all rows is 5 - 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; 5 - 1 }, interpretation: select the rows whose current streak record fuzzily matches to l . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; current streak ; l } } ; 2 }, interpretation: select the rows whose current streak record fuzzily matches to l . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; current streak ; l } } ; 2 }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; soviet union }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; soviet union }, interpretation: select the rows whose tournament record fuzzily matches to singapore international . there is only one such row in the table . the year record of this unqiue row is 1999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; singapore international } } ; eq { hop { filter_eq { all_rows ; tournament ; singapore international } ; year } ; 1999 } }, interpretation: select the rows whose tournament record fuzzily matches to singapore international . there is only one such row in the table . the year record of this unqiue row is 1999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; singapore international } } ; eq { hop { filter_eq { all_rows ; tournament ; singapore international } ; year } ; 1999 } }, interpretation: select the row whose no record of all rows is 2nd minimum . the player record of this row is derrick favors .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; no ; 2 } ; player } ; derrick favors }, interpretation: select the row whose no record of all rows is 2nd minimum . the player record of this row is derrick favors .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; no ; 2 } ; player } ; derrick favors }, interpretation: select the row whose age record of all rows is 7th minimum . the name record of this row is konstantopoulos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; age ; 7 } ; name } ; konstantopoulos }, interpretation: select the row whose age record of all rows is 7th minimum . the name record of this row is konstantopoulos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; age ; 7 } ; name } ; konstantopoulos }, interpretation: for the method records of all rows , most of them fuzzily match to tko .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; method ; tko }, interpretation: for the method records of all rows , most of them fuzzily match to tko .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; method ; tko }, interpretation: select the rows whose winner record fuzzily matches to bobby clarke . among these rows , select the rows whose goals record is equal to 51 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winner ; bobby clarke } ; goals ; 51 } } ; 2 }, interpretation: select the rows whose winner record fuzzily matches to bobby clarke . among these rows , select the rows whose goals record is equal to 51 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winner ; bobby clarke } ; goals ; 51 } } ; 2 }, interpretation: select the rows whose name of ground record fuzzily matches to chester road north ground . take the worcs la matches record of this row . select the rows whose name of ground record fuzzily matches to racecourse ground . take the worcs la matches record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name of ground ; chester road north ground } ; worcs la matches } ; hop { filter_eq { all_rows ; name of ground ; racecourse ground } ; worcs la matches } }, interpretation: select the rows whose name of ground record fuzzily matches to chester road north ground . take the worcs la matches record of this row . select the rows whose name of ground record fuzzily matches to racecourse ground . take the worcs la matches record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name of ground ; chester road north ground } ; worcs la matches } ; hop { filter_eq { all_rows ; name of ground ; racecourse ground } ; worcs la matches } }, interpretation: for the power rpm records of all rows , most of them are greater than or equal to 6000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; power rpm ; 6000 }, interpretation: for the power rpm records of all rows , most of them are greater than or equal to 6000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; power rpm ; 6000 }, interpretation: select the row whose international tourism expenditure ( 2012 ) record of all rows is 1st maximum . the country record of this row is china .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; international tourism expenditure ( 2012 ) ; 1 } ; country } ; china }, interpretation: select the row whose international tourism expenditure ( 2012 ) record of all rows is 1st maximum . the country record of this row is china .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; international tourism expenditure ( 2012 ) ; 1 } ; country } ; china }, interpretation: select the rows whose playoffs record fuzzily matches to league finals . there is only one such row in the table . the year record of this unqiue row is 1978 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; playoffs ; league finals } } ; eq { hop { filter_eq { all_rows ; playoffs ; league finals } ; year } ; 1978 } }, interpretation: select the rows whose playoffs record fuzzily matches to league finals . there is only one such row in the table . the year record of this unqiue row is 1978 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; playoffs ; league finals } } ; eq { hop { filter_eq { all_rows ; playoffs ; league finals } ; year } ; 1978 } }, interpretation: for the winning team records of all rows , most of them fuzzily match to mobilecast impul .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winning team ; mobilecast impul }, interpretation: for the winning team records of all rows , most of them fuzzily match to mobilecast impul .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winning team ; mobilecast impul }, interpretation: select the rows whose game record is arbitrary . the number of such rows is 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; game } } ; 15 }, interpretation: select the rows whose game record is arbitrary . the number of such rows is 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; game } } ; 15 }, interpretation: select the rows whose directedby record fuzzily matches to guy ferland . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directedby ; guy ferland } } ; 2 }, interpretation: select the rows whose directedby record fuzzily matches to guy ferland . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directedby ; guy ferland } } ; 2 }, interpretation: select the rows whose constructor record fuzzily matches to honda . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constructor ; honda } } ; 2 }, interpretation: select the rows whose constructor record fuzzily matches to honda . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constructor ; honda } } ; 2 }, interpretation: select the row whose place record of all rows is minimum . the artist record of this row is liam reilly . the song record of this row is somewhere in europe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmin { all_rows ; place } ; artist } ; liam reilly } ; eq { hop { argmin { all_rows ; place } ; song } ; somewhere in europe } }, interpretation: select the row whose place record of all rows is minimum . the artist record of this row is liam reilly . the song record of this row is somewhere in europe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmin { all_rows ; place } ; artist } ; liam reilly } ; eq { hop { argmin { all_rows ; place } ; song } ; somewhere in europe } }, interpretation: select the rows whose pole position record fuzzily matches to chris goodwin andrew kirkaldy . there is only one such row in the table . the round record of this unqiue row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pole position ; chris goodwin andrew kirkaldy } } ; eq { hop { filter_eq { all_rows ; pole position ; chris goodwin andrew kirkaldy } ; round } ; 5 } }, interpretation: select the rows whose pole position record fuzzily matches to chris goodwin andrew kirkaldy . there is only one such row in the table . the round record of this unqiue row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pole position ; chris goodwin andrew kirkaldy } } ; eq { hop { filter_eq { all_rows ; pole position ; chris goodwin andrew kirkaldy } ; round } ; 5 } }, interpretation: select the rows whose ties record is equal to 1 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; ties ; 1 } } ; 3 }, interpretation: select the rows whose ties record is equal to 1 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; ties ; 1 } } ; 3 }, interpretation: select the rows whose escorts record is equal to - . there is only one such row in the table . the nato member record of this unqiue row is belgium .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; escorts ; - } } ; eq { hop { filter_eq { all_rows ; escorts ; - } ; nato member } ; belgium } }, interpretation: select the rows whose escorts record is equal to - . there is only one such row in the table . the nato member record of this unqiue row is belgium .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; escorts ; - } } ; eq { hop { filter_eq { all_rows ; escorts ; - } ; nato member } ; belgium } }, interpretation: select the rows whose proposed record fuzzily matches to 1989 . among these rows , select the rows whose proposed record fuzzily matches to 1989 . there is only one such row in the table . the county record of this unqiue row is new london .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; proposed ; 1989 } ; proposed ; 1989 } } ; eq { hop { filter_eq { filter_eq { all_rows ; proposed ; 1989 } ; proposed ; 1989 } ; county } ; new london } }, interpretation: select the rows whose proposed record fuzzily matches to 1989 . among these rows , select the rows whose proposed record fuzzily matches to 1989 . there is only one such row in the table . the county record of this unqiue row is new london .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; proposed ; 1989 } ; proposed ; 1989 } } ; eq { hop { filter_eq { filter_eq { all_rows ; proposed ; 1989 } ; proposed ; 1989 } ; county } ; new london } }, interpretation: select the rows whose year ( ceremony ) record fuzzily matches to 2006 ( 79th ) . take the year ( ceremony ) record of this row . select the rows whose year ( ceremony ) record fuzzily matches to 2007 ( 80th ) . take the year ( ceremony ) record of this row . the first record is less than the second record . the year ( ceremony ) record of the first row is 2006 ( 79th ) . the year ( ceremony ) record of the second row is 2007 ( 80th ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; year ( ceremony ) ; 2006 ( 79th ) } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; year ( ceremony ) ; 2007 ( 80th ) } ; year ( ceremony ) } } ; and { eq { hop { filter_eq { all_rows ; year ( ceremony ) ; 2006 ( 79th ) } ; year ( ceremony ) } ; 2006 ( 79th ) } ; eq { hop { filter_eq { all_rows ; year ( ceremony ) ; 2007 ( 80th ) } ; year ( ceremony ) } ; 2007 ( 80th ) } } }, interpretation: select the rows whose year ( ceremony ) record fuzzily matches to 2006 ( 79th ) . take the year ( ceremony ) record of this row . select the rows whose year ( ceremony ) record fuzzily matches to 2007 ( 80th ) . take the year ( ceremony ) record of this row . the first record is less than the second record . the year ( ceremony ) record of the first row is 2006 ( 79th ) . the year ( ceremony ) record of the second row is 2007 ( 80th ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; year ( ceremony ) ; 2006 ( 79th ) } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; year ( ceremony ) ; 2007 ( 80th ) } ; year ( ceremony ) } } ; and { eq { hop { filter_eq { all_rows ; year ( ceremony ) ; 2006 ( 79th ) } ; year ( ceremony ) } ; 2006 ( 79th ) } ; eq { hop { filter_eq { all_rows ; year ( ceremony ) ; 2007 ( 80th ) } ; year ( ceremony ) } ; 2007 ( 80th ) } } }, interpretation: select the rows whose position record fuzzily matches to punter . there is only one such row in the table . the name record of this unqiue row is adam podlesh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; punter } } ; eq { hop { filter_eq { all_rows ; position ; punter } ; name } ; adam podlesh } }, interpretation: select the rows whose position record fuzzily matches to punter . there is only one such row in the table . the name record of this unqiue row is adam podlesh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; punter } } ; eq { hop { filter_eq { all_rows ; position ; punter } ; name } ; adam podlesh } }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: for the drivetrain records of all rows , most of them fuzzily match to rwd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; drivetrain ; rwd }, interpretation: for the drivetrain records of all rows , most of them fuzzily match to rwd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; drivetrain ; rwd }, interpretation: the average of the group 's equity shareholding record of all rows is 85 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; group 's equity shareholding } ; 85 % }, interpretation: the average of the group 's equity shareholding record of all rows is 85 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; group 's equity shareholding } ; 85 % }, interpretation: for the entrant records of all rows , most of them fuzzily match to osella squadra corse .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; entrant ; osella squadra corse }, interpretation: for the entrant records of all rows , most of them fuzzily match to osella squadra corse .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; entrant ; osella squadra corse }, interpretation: for the country records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; united states }, interpretation: for the country records of all rows , all of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; united states }, interpretation: select the rows whose club record fuzzily matches to terang . take the wins record of this row . select the rows whose club record fuzzily matches to terang mortlake . take the wins record of this row . the first record is 501 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; club ; terang } ; wins } ; hop { filter_eq { all_rows ; club ; terang mortlake } ; wins } } ; 501 }, interpretation: select the rows whose club record fuzzily matches to terang . take the wins record of this row . select the rows whose club record fuzzily matches to terang mortlake . take the wins record of this row . the first record is 501 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; club ; terang } ; wins } ; hop { filter_eq { all_rows ; club ; terang mortlake } ; wins } } ; 501 }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: for the unit records of all rows , most of them fuzzily match to colorado .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; unit ; colorado }, interpretation: for the unit records of all rows , most of them fuzzily match to colorado .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; unit ; colorado }, interpretation: select the rows whose date record fuzzily matches to 1982 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 1982 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 1982 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 1982 } } ; 2 }, interpretation: select the rows whose original air date ( uk ) record fuzzily matches to july . there is only one such row in the table . the episode title record of this unqiue row is night games .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ( uk ) ; july } } ; eq { hop { filter_eq { all_rows ; original air date ( uk ) ; july } ; episode title } ; night games } }, interpretation: select the rows whose original air date ( uk ) record fuzzily matches to july . there is only one such row in the table . the episode title record of this unqiue row is night games .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ( uk ) ; july } } ; eq { hop { filter_eq { all_rows ; original air date ( uk ) ; july } ; episode title } ; night games } }, interpretation: select the rows whose date record fuzzily matches to november 25 . take the rank record of this row . select the rows whose date record fuzzily matches to november 18 . take the rank record of this row . the second record is 1 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; november 25 } ; rank } ; hop { filter_eq { all_rows ; date ; november 18 } ; rank } } ; -1 }, interpretation: select the rows whose date record fuzzily matches to november 25 . take the rank record of this row . select the rows whose date record fuzzily matches to november 18 . take the rank record of this row . the second record is 1 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; november 25 } ; rank } ; hop { filter_eq { all_rows ; date ; november 18 } ; rank } } ; -1 }, interpretation: the maximum result record of all rows is kuwait won by 72 runs scorecard . the details record of the row with superlative result record is 2011 division seven .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; result } ; kuwait won by 72 runs scorecard } ; eq { hop { argmax { all_rows ; result } ; details } ; 2011 division seven } }, interpretation: the maximum result record of all rows is kuwait won by 72 runs scorecard . the details record of the row with superlative result record is 2011 division seven .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; result } ; kuwait won by 72 runs scorecard } ; eq { hop { argmax { all_rows ; result } ; details } ; 2011 division seven } }, interpretation: for the series ep records of all rows , all of them fuzzily match to 13 - .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; series ep ; 13 - }, interpretation: for the series ep records of all rows , all of them fuzzily match to 13 - .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; series ep ; 13 - }, interpretation: for the results records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; results ; re - elected }, interpretation: for the results records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; results ; re - elected }, interpretation: select the row whose points record of all rows is maximum . the song record of this row is all kinds of everything .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; song } ; all kinds of everything }, interpretation: select the row whose points record of all rows is maximum . the song record of this row is all kinds of everything .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; song } ; all kinds of everything }, interpretation: select the rows whose opened record is equal to 2004 . there is only one such row in the table . the stadium record of this unqiue row is indiana invaders soccer complex .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opened ; 2004 } } ; eq { hop { filter_eq { all_rows ; opened ; 2004 } ; stadium } ; indiana invaders soccer complex } }, interpretation: select the rows whose opened record is equal to 2004 . there is only one such row in the table . the stadium record of this unqiue row is indiana invaders soccer complex .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opened ; 2004 } } ; eq { hop { filter_eq { all_rows ; opened ; 2004 } ; stadium } ; indiana invaders soccer complex } }, interpretation: select the rows whose team record fuzzily matches to hespanha . take the points record of this row . select the rows whose team record fuzzily matches to ca paulista . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; hespanha } ; points } ; hop { filter_eq { all_rows ; team ; ca paulista } ; points } }, interpretation: select the rows whose team record fuzzily matches to hespanha . take the points record of this row . select the rows whose team record fuzzily matches to ca paulista . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; hespanha } ; points } ; hop { filter_eq { all_rows ; team ; ca paulista } ; points } }, interpretation: select the rows whose featuring record fuzzily matches to tractators . the minimum released record of these rows is february 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; featuring ; tractators } ; released } ; february 2010 }, interpretation: select the rows whose featuring record fuzzily matches to tractators . the minimum released record of these rows is february 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; featuring ; tractators } ; released } ; february 2010 }, interpretation: the sum of the crowd record of all rows is 86100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 86100 }, interpretation: the sum of the crowd record of all rows is 86100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 86100 }, interpretation: select the rows whose notes record fuzzily matches to 1500 m . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; notes ; 1500 m } } ; 4 }, interpretation: select the rows whose notes record fuzzily matches to 1500 m . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; notes ; 1500 m } } ; 4 }, interpretation: select the row whose entered service record of all rows is 3rd minimum . the locomotive record of this row is bl28 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; entered service ; 3 } ; locomotive } ; bl28 }, interpretation: select the row whose entered service record of all rows is 3rd minimum . the locomotive record of this row is bl28 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; entered service ; 3 } ; locomotive } ; bl28 }, interpretation: for the date made records of all rows , most of them are less than 1900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; date made ; 1900 }, interpretation: for the date made records of all rows , most of them are less than 1900 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; date made ; 1900 }, interpretation: select the rows whose laps record is equal to 64 . for the points records of these rows , most of them are greater than or equal to 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { filter_eq { all_rows ; laps ; 64 } ; points ; 15 }, interpretation: select the rows whose laps record is equal to 64 . for the points records of these rows , most of them are greater than or equal to 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { filter_eq { all_rows ; laps ; 64 } ; points ; 15 }, interpretation: the average of the pick record of all rows is 4.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 4.5 }, interpretation: the average of the pick record of all rows is 4.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 4.5 }, interpretation: the sum of the crowd record of all rows is 149299 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 149299 }, interpretation: the sum of the crowd record of all rows is 149299 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 149299 }, interpretation: select the rows whose winner record fuzzily matches to new york jets . among these rows , select the rows whose location record fuzzily matches to shea stadium . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winner ; new york jets } ; location ; shea stadium } } ; 7 }, interpretation: select the rows whose winner record fuzzily matches to new york jets . among these rows , select the rows whose location record fuzzily matches to shea stadium . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winner ; new york jets } ; location ; shea stadium } } ; 7 }, interpretation: select the rows whose model / engine record fuzzily matches to 1.8 duratec he . take the capacity record of this row . select the rows whose model / engine record fuzzily matches to 2.0 duratec he . take the capacity record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; model / engine ; 1.8 duratec he } ; capacity } ; hop { filter_eq { all_rows ; model / engine ; 2.0 duratec he } ; capacity } }, interpretation: select the rows whose model / engine record fuzzily matches to 1.8 duratec he . take the capacity record of this row . select the rows whose model / engine record fuzzily matches to 2.0 duratec he . take the capacity record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; model / engine ; 1.8 duratec he } ; capacity } ; hop { filter_eq { all_rows ; model / engine ; 2.0 duratec he } ; capacity } }, interpretation: the average of the weight ( lbs ) record of all rows is 238.05 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight ( lbs ) } ; 238.05 }, interpretation: the average of the weight ( lbs ) record of all rows is 238.05 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight ( lbs ) } ; 238.05 }, interpretation: for the played records of all rows , all of them are equal to 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 14 }, interpretation: for the played records of all rows , all of them are equal to 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 14 }, interpretation: select the rows whose audition city record fuzzily matches to s\u00e3o paulo . there is only one such row in the table . the guest fourth judge record of this unqiue row is peninha .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; audition city ; s\u00e3o paulo } } ; eq { hop { filter_eq { all_rows ; audition city ; s\u00e3o paulo } ; guest fourth judge } ; peninha } }, interpretation: select the rows whose audition city record fuzzily matches to s\u00e3o paulo . there is only one such row in the table . the guest fourth judge record of this unqiue row is peninha .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; audition city ; s\u00e3o paulo } } ; eq { hop { filter_eq { all_rows ; audition city ; s\u00e3o paulo } ; guest fourth judge } ; peninha } }, interpretation: select the rows whose party record fuzzily matches to republican . among these rows , select the rows whose result record fuzzily matches to retired . there is only one such row in the table . the incumbent record of this unqiue row is jack fields .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; retired } } ; eq { hop { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; retired } ; incumbent } ; jack fields } }, interpretation: select the rows whose party record fuzzily matches to republican . among these rows , select the rows whose result record fuzzily matches to retired . there is only one such row in the table . the incumbent record of this unqiue row is jack fields .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; retired } } ; eq { hop { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; retired } ; incumbent } ; jack fields } }, interpretation: select the rows whose top division titles record is equal to 1 . there is only one such row in the table . the team record of this unqiue row is deportivo coopsol .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; top division titles ; 1 } } ; eq { hop { filter_eq { all_rows ; top division titles ; 1 } ; team } ; deportivo coopsol } }, interpretation: select the rows whose top division titles record is equal to 1 . there is only one such row in the table . the team record of this unqiue row is deportivo coopsol .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; top division titles ; 1 } } ; eq { hop { filter_eq { all_rows ; top division titles ; 1 } ; team } ; deportivo coopsol } }, interpretation: the average of the enrollment record of all rows is 538 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 538 }, interpretation: the average of the enrollment record of all rows is 538 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 538 }, interpretation: select the rows whose team ( s ) record fuzzily matches to stegell motorsports . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ( s ) ; stegell motorsports } } ; 4 }, interpretation: select the rows whose team ( s ) record fuzzily matches to stegell motorsports . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ( s ) ; stegell motorsports } } ; 4 }, interpretation: select the row whose commenced operations record of all rows is 2nd minimum . the airline record of this row is nouvelair .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; commenced operations ; 2 } ; airline } ; nouvelair }, interpretation: select the row whose commenced operations record of all rows is 2nd minimum . the airline record of this row is nouvelair .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; commenced operations ; 2 } ; airline } ; nouvelair }, interpretation: select the rows whose 2nd position record fuzzily matches to lija . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2nd position ; lija } } ; 2 }, interpretation: select the rows whose 2nd position record fuzzily matches to lija . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2nd position ; lija } } ; 2 }, interpretation: select the rows whose year record fuzzily matches to freshman . the average of the weight record of these rows is 215 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; year ; freshman } ; weight } ; 215 }, interpretation: select the rows whose year record fuzzily matches to freshman . the average of the weight record of these rows is 215 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; year ; freshman } ; weight } ; 215 }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is alianza fc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; alianza fc }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is alianza fc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; alianza fc }, interpretation: the sum of the points record of all rows is 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 0 }, interpretation: the sum of the points record of all rows is 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 0 }, interpretation: for the score records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; l }, interpretation: for the score records of all rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; l }, interpretation: select the rows whose crowd record is greater than 20000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose crowd record is greater than 20000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; crowd ; 20000 } } ; 2 }, interpretation: select the row whose rank record of all rows is minimum . the nation record of this row is united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; rank } ; nation } ; united states }, interpretation: select the row whose rank record of all rows is minimum . the nation record of this row is united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; rank } ; nation } ; united states }, interpretation: select the rows whose series record fuzzily matches to formula renault 2.0 italy . take the points record of this row . select the rows whose series record fuzzily matches to italian formula three . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; series ; formula renault 2.0 italy } ; points } ; hop { filter_eq { all_rows ; series ; italian formula three } ; points } }, interpretation: select the rows whose series record fuzzily matches to formula renault 2.0 italy . take the points record of this row . select the rows whose series record fuzzily matches to italian formula three . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; series ; formula renault 2.0 italy } ; points } ; hop { filter_eq { all_rows ; series ; italian formula three } ; points } }, interpretation: select the rows whose lost record fuzzily matches to 15 . take the lost record of this row . select the rows whose lost record fuzzily matches to 15 . take the lost record of this row . the first record is equal to the second record . the lost record of the first row is 15 . the lost record of the second row is 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; lost ; 15 } ; lost } ; hop { filter_eq { all_rows ; lost ; 15 } ; lost } } ; and { eq { hop { filter_eq { all_rows ; lost ; 15 } ; lost } ; 15 } ; eq { hop { filter_eq { all_rows ; lost ; 15 } ; lost } ; 15 } } }, interpretation: select the rows whose lost record fuzzily matches to 15 . take the lost record of this row . select the rows whose lost record fuzzily matches to 15 . take the lost record of this row . the first record is equal to the second record . the lost record of the first row is 15 . the lost record of the second row is 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; lost ; 15 } ; lost } ; hop { filter_eq { all_rows ; lost ; 15 } ; lost } } ; and { eq { hop { filter_eq { all_rows ; lost ; 15 } ; lost } ; 15 } ; eq { hop { filter_eq { all_rows ; lost ; 15 } ; lost } ; 15 } } }, interpretation: select the rows whose player record fuzzily matches to fred couples . take the weeks record of this row . select the rows whose player record fuzzily matches to david duval . take the weeks record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; fred couples } ; weeks } ; hop { filter_eq { all_rows ; player ; david duval } ; weeks } }, interpretation: select the rows whose player record fuzzily matches to fred couples . take the weeks record of this row . select the rows whose player record fuzzily matches to david duval . take the weeks record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; fred couples } ; weeks } ; hop { filter_eq { all_rows ; player ; david duval } ; weeks } }, interpretation: the average of the attendance record of all rows is 56346 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 56346 }, interpretation: the average of the attendance record of all rows is 56346 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 56346 }, interpretation: select the rows whose acquisition via record fuzzily matches to rookie draft . there is only one such row in the table . the name record of this unqiue row is ronjay buenafe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; ronjay buenafe } }, interpretation: select the rows whose acquisition via record fuzzily matches to rookie draft . there is only one such row in the table . the name record of this unqiue row is ronjay buenafe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; ronjay buenafe } }, interpretation: select the row whose innings record of all rows is maximum . the player record of this row is ricky ponting .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; innings } ; player } ; ricky ponting }, interpretation: select the row whose innings record of all rows is maximum . the player record of this row is ricky ponting .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; innings } ; player } ; ricky ponting }, interpretation: for the date records of all rows , all of them fuzzily match to january .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; january }, interpretation: the average of the score record of all rows is 279 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 279 }, interpretation: the average of the score record of all rows is 279 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 279 }, interpretation: for the result records of all rows , most of them fuzzily match to not nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; not nominated }, interpretation: for the result records of all rows , most of them fuzzily match to not nominated .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; not nominated }, interpretation: select the rows whose round record fuzzily matches to group h . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; group h } } ; 3 }, interpretation: select the rows whose round record fuzzily matches to group h . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; group h } } ; 3 }, interpretation: select the rows whose make record fuzzily matches to toyota . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; make ; toyota } } ; 4 }, interpretation: select the rows whose make record fuzzily matches to toyota . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; make ; toyota } } ; 4 }, interpretation: the average of the height record of all rows is 2.01 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height } ; 2.01 }, interpretation: the average of the height record of all rows is 2.01 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height } ; 2.01 }, interpretation: the average of the attendance record of all rows is 15720 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 15720 }, interpretation: the average of the attendance record of all rows is 15720 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 15720 }, interpretation: for the constructor records of all rows , most of them fuzzily match to ford .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; constructor ; ford }, interpretation: for the constructor records of all rows , most of them fuzzily match to ford .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; constructor ; ford }, interpretation: select the rows whose venue record fuzzily matches to charlotte speedway . take the closed record of this row . select the rows whose venue record fuzzily matches to belk gymnasium . take the closed record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; charlotte speedway } ; closed } ; hop { filter_eq { all_rows ; venue ; belk gymnasium } ; closed } }, interpretation: select the rows whose venue record fuzzily matches to charlotte speedway . take the closed record of this row . select the rows whose venue record fuzzily matches to belk gymnasium . take the closed record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; charlotte speedway } ; closed } ; hop { filter_eq { all_rows ; venue ; belk gymnasium } ; closed } }, interpretation: select the rows whose position record fuzzily matches to guard . the maximum height in ft record of these rows is 6 - 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; position ; guard } ; height in ft } ; 6 - 8 }, interpretation: select the rows whose position record fuzzily matches to guard . the maximum height in ft record of these rows is 6 - 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; position ; guard } ; height in ft } ; 6 - 8 }, interpretation: the average of the attendance record of all rows is 2900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 2900 }, interpretation: the average of the attendance record of all rows is 2900 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 2900 }, interpretation: select the rows whose institution record fuzzily matches to anglo irish bank . take the tier 1 capital , million record of this row . select the rows whose institution record fuzzily matches to irish life and permanent . take the tier 1 capital , million record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; institution ; anglo irish bank } ; tier 1 capital , million } ; hop { filter_eq { all_rows ; institution ; irish life and permanent } ; tier 1 capital , million } }, interpretation: select the rows whose institution record fuzzily matches to anglo irish bank . take the tier 1 capital , million record of this row . select the rows whose institution record fuzzily matches to irish life and permanent . take the tier 1 capital , million record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; institution ; anglo irish bank } ; tier 1 capital , million } ; hop { filter_eq { all_rows ; institution ; irish life and permanent } ; tier 1 capital , million } }, interpretation: select the rows whose language record fuzzily matches to english . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; language ; english } } ; 2 }, interpretation: select the rows whose language record fuzzily matches to english . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; language ; english } } ; 2 }, interpretation: select the rows whose locale record fuzzily matches to prince edward island . there is only one such row in the table . the skip record of this unqiue row is rod macdonald .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; locale ; prince edward island } } ; eq { hop { filter_eq { all_rows ; locale ; prince edward island } ; skip } ; rod macdonald } }, interpretation: select the rows whose locale record fuzzily matches to prince edward island . there is only one such row in the table . the skip record of this unqiue row is rod macdonald .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; locale ; prince edward island } } ; eq { hop { filter_eq { all_rows ; locale ; prince edward island } ; skip } ; rod macdonald } }, interpretation: select the rows whose name record fuzzily matches to chopra . take the started record of this row . select the rows whose name record fuzzily matches to routledge . take the started record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; chopra } ; started } ; hop { filter_eq { all_rows ; name ; routledge } ; started } }, interpretation: select the rows whose name record fuzzily matches to chopra . take the started record of this row . select the rows whose name record fuzzily matches to routledge . take the started record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; chopra } ; started } ; hop { filter_eq { all_rows ; name ; routledge } ; started } }, interpretation: select the row whose first broadcast record of all rows is maximum . the episode record of this row is 3x08 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; first broadcast } ; episode } ; 3x08 }, interpretation: select the row whose first broadcast record of all rows is maximum . the episode record of this row is 3x08 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; first broadcast } ; episode } ; 3x08 }, interpretation: for the day / boarding records of all rows , most of them fuzzily match to day & boarding .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; day / boarding ; day & boarding }, interpretation: for the day / boarding records of all rows , most of them fuzzily match to day & boarding .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; day / boarding ; day & boarding }, interpretation: select the rows whose opponent record fuzzily matches to oakland raiders . the sum of the attendance record of these rows is 123032 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; oakland raiders } ; attendance } ; 123032 }, interpretation: select the rows whose opponent record fuzzily matches to oakland raiders . the sum of the attendance record of these rows is 123032 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; oakland raiders } ; attendance } ; 123032 }, interpretation: select the rows whose 2011 record fuzzily matches to 2r . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2011 ; 2r } } ; 2 }, interpretation: select the rows whose 2011 record fuzzily matches to 2r . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2011 ; 2r } } ; 2 }, interpretation: select the row whose goal difference record of all rows is 3rd maximum . the club record of this row is real oviedo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal difference ; 3 } ; club } ; real oviedo }, interpretation: select the row whose goal difference record of all rows is 3rd maximum . the club record of this row is real oviedo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal difference ; 3 } ; club } ; real oviedo }, interpretation: select the row whose population served record of all rows is maximum . the location record of this row is marcala , hon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population served } ; location } ; marcala , hon }, interpretation: select the row whose population served record of all rows is maximum . the location record of this row is marcala , hon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population served } ; location } ; marcala , hon }, interpretation: select the row whose points record of all rows is maximum . the driver record of this row is bruno junqueira .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; driver } ; bruno junqueira }, interpretation: select the row whose points record of all rows is maximum . the driver record of this row is bruno junqueira .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; driver } ; bruno junqueira }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is manzini wanderers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; manzini wanderers }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is manzini wanderers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; manzini wanderers }, interpretation: select the rows whose class record fuzzily matches to 250 cc . take the race record of this row . select the rows whose class record fuzzily matches to moto2 . take the race record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; class ; 250 cc } ; race } ; hop { filter_eq { all_rows ; class ; moto2 } ; race } }, interpretation: select the rows whose class record fuzzily matches to 250 cc . take the race record of this row . select the rows whose class record fuzzily matches to moto2 . take the race record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; class ; 250 cc } ; race } ; hop { filter_eq { all_rows ; class ; moto2 } ; race } }, interpretation: select the rows whose year record is equal to 2006 . the average of the margin record of these rows is 3.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; year ; 2006 } ; margin } ; 3.5 }, interpretation: select the rows whose year record is equal to 2006 . the average of the margin record of these rows is 3.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; year ; 2006 } ; margin } ; 3.5 }, interpretation: the 1st minimum year completed record of all rows is 1955 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; year completed ; 1 } ; 1955 }, interpretation: the 1st minimum year completed record of all rows is 1955 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; year completed ; 1 } ; 1955 }, interpretation: select the rows whose round record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; 2 } } ; 2 }, interpretation: select the rows whose round record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; 2 } } ; 2 }, interpretation: select the rows whose ngc number record fuzzily matches to 2736 . take the object type record of this row . select the rows whose ngc number record fuzzily matches to 2770 . take the object type record of this row . the first record does not match to the second record . the object type record of the first row is diffuse nebula . the object type record of the second row is spiral galaxy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { not_eq { hop { filter_eq { all_rows ; ngc number ; 2736 } ; object type } ; hop { filter_eq { all_rows ; ngc number ; 2770 } ; object type } } ; and { eq { hop { filter_eq { all_rows ; ngc number ; 2736 } ; object type } ; diffuse nebula } ; eq { hop { filter_eq { all_rows ; ngc number ; 2770 } ; object type } ; spiral galaxy } } }, interpretation: select the rows whose ngc number record fuzzily matches to 2736 . take the object type record of this row . select the rows whose ngc number record fuzzily matches to 2770 . take the object type record of this row . the first record does not match to the second record . the object type record of the first row is diffuse nebula . the object type record of the second row is spiral galaxy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { not_eq { hop { filter_eq { all_rows ; ngc number ; 2736 } ; object type } ; hop { filter_eq { all_rows ; ngc number ; 2770 } ; object type } } ; and { eq { hop { filter_eq { all_rows ; ngc number ; 2736 } ; object type } ; diffuse nebula } ; eq { hop { filter_eq { all_rows ; ngc number ; 2770 } ; object type } ; spiral galaxy } } }, interpretation: the average of the 1 - year peak record of all rows is 2869 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 1 - year peak } ; 2869 }, interpretation: the average of the 1 - year peak record of all rows is 2869 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 1 - year peak } ; 2869 }, interpretation: the sum of the quantity made record of all rows is 151 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; quantity made } ; 151 }, interpretation: the sum of the quantity made record of all rows is 151 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; quantity made } ; 151 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is march 19 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; march 19 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is march 19 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; march 19 }, interpretation: select the rows whose school / club team record fuzzily matches to brigham young university . there is only one such row in the table . the player record of this unqiue row is tevita ofahengaue .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; brigham young university } } ; eq { hop { filter_eq { all_rows ; school / club team ; brigham young university } ; player } ; tevita ofahengaue } }, interpretation: select the rows whose school / club team record fuzzily matches to brigham young university . there is only one such row in the table . the player record of this unqiue row is tevita ofahengaue .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; brigham young university } } ; eq { hop { filter_eq { all_rows ; school / club team ; brigham young university } ; player } ; tevita ofahengaue } }, interpretation: select the row whose year of intro record of all rows is 2nd minimum . the name / designation record of this row is onorati smg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year of intro ; 2 } ; name / designation } ; onorati smg }, interpretation: select the row whose year of intro record of all rows is 2nd minimum . the name / designation record of this row is onorati smg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year of intro ; 2 } ; name / designation } ; onorati smg }, interpretation: select the rows whose directed by record fuzzily matches to jon cassar . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; jon cassar } } ; 5 }, interpretation: select the rows whose directed by record fuzzily matches to jon cassar . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; jon cassar } } ; 5 }, interpretation: select the rows whose division record fuzzily matches to on hiatus . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; division ; on hiatus } } ; 2 }, interpretation: select the rows whose division record fuzzily matches to on hiatus . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; division ; on hiatus } } ; 2 }, interpretation: select the row whose launched record of all rows is 2nd minimum . the ship record of this row is faulknor ( flotilla leader ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; launched ; 2 } ; ship } ; faulknor ( flotilla leader ) }, interpretation: select the row whose launched record of all rows is 2nd minimum . the ship record of this row is faulknor ( flotilla leader ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; launched ; 2 } ; ship } ; faulknor ( flotilla leader ) }, interpretation: select the rows whose call sign record fuzzily matches to k297al . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to k239ax . take the frequency mhz record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; call sign ; k297al } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; k239ax } ; frequency mhz } }, interpretation: select the rows whose call sign record fuzzily matches to k297al . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to k239ax . take the frequency mhz record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; call sign ; k297al } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; k239ax } ; frequency mhz } }, interpretation: for the height records of all rows , most of them are less than 190 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; height ; 190 }, interpretation: for the height records of all rows , most of them are less than 190 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; height ; 190 }, interpretation: select the rows whose high points record fuzzily matches to damon stoudamire . among these rows , select the rows whose team record fuzzily matches to miami . there is only one such row in the table . the date record of this unqiue row is april 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; high points ; damon stoudamire } ; team ; miami } } ; eq { hop { filter_eq { filter_eq { all_rows ; high points ; damon stoudamire } ; team ; miami } ; date } ; april 5 } }, interpretation: select the rows whose high points record fuzzily matches to damon stoudamire . among these rows , select the rows whose team record fuzzily matches to miami . there is only one such row in the table . the date record of this unqiue row is april 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; high points ; damon stoudamire } ; team ; miami } } ; eq { hop { filter_eq { filter_eq { all_rows ; high points ; damon stoudamire } ; team ; miami } ; date } ; april 5 } }, interpretation: select the row whose semifinalists record of all rows is 2nd maximum . the country / territory record of this row is south africa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; semifinalists ; 2 } ; country / territory } ; south africa }, interpretation: select the row whose semifinalists record of all rows is 2nd maximum . the country / territory record of this row is south africa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; semifinalists ; 2 } ; country / territory } ; south africa }, interpretation: select the row whose year built record of all rows is minimum . the church name record of this row is urnes stavkyrkje .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year built } ; church name } ; urnes stavkyrkje }, interpretation: select the row whose year built record of all rows is minimum . the church name record of this row is urnes stavkyrkje .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year built } ; church name } ; urnes stavkyrkje }, interpretation: the sum of the silver record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; silver } ; 2 }, interpretation: the sum of the silver record of all rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; silver } ; 2 }, interpretation: select the rows whose frequency mhz record is less than 100 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; frequency mhz ; 100 } } ; 3 }, interpretation: select the rows whose frequency mhz record is less than 100 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; frequency mhz ; 100 } } ; 3 }, interpretation: select the rows whose year record is less than or equal to 2009 . the sum of the tournaments played record of these rows is 52 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less_eq { all_rows ; year ; 2009 } ; tournaments played } ; 52 }, interpretation: select the rows whose year record is less than or equal to 2009 . the sum of the tournaments played record of these rows is 52 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less_eq { all_rows ; year ; 2009 } ; tournaments played } ; 52 }, interpretation: select the row whose obama % record of all rows is 2nd maximum . the county record of this row is new haven .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; obama % ; 2 } ; county } ; new haven }, interpretation: select the row whose obama % record of all rows is 2nd maximum . the county record of this row is new haven .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; obama % ; 2 } ; county } ; new haven }, interpretation: for the category records of all rows , most of them fuzzily match to utilities .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; category ; utilities }, interpretation: for the category records of all rows , most of them fuzzily match to utilities .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; category ; utilities }, interpretation: select the row whose frequency record of all rows is 2nd minimum . the station record of this row is wgtz - fm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; frequency ; 2 } ; station } ; wgtz - fm }, interpretation: select the row whose frequency record of all rows is 2nd minimum . the station record of this row is wgtz - fm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; frequency ; 2 } ; station } ; wgtz - fm }, interpretation: select the rows whose reason for change record fuzzily matches to died . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; reason for change ; died } } ; 3 }, interpretation: select the rows whose reason for change record fuzzily matches to died . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; reason for change ; died } } ; 3 }, interpretation: select the rows whose visitor record fuzzily matches to winnipeg . take the date record of this row . select the rows whose visitor record fuzzily matches to chicago . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; winnipeg } ; date } ; hop { filter_eq { all_rows ; visitor ; chicago } ; date } }, interpretation: select the rows whose visitor record fuzzily matches to winnipeg . take the date record of this row . select the rows whose visitor record fuzzily matches to chicago . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; winnipeg } ; date } ; hop { filter_eq { all_rows ; visitor ; chicago } ; date } }, interpretation: select the row whose points record of all rows is maximum . the player record of this row is dave allerdice .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; player } ; dave allerdice }, interpretation: select the row whose points record of all rows is maximum . the player record of this row is dave allerdice .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; player } ; dave allerdice }, interpretation: select the row whose length record of all rows is 3rd maximum . the year record of this row is 1996 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; length ; 3 } ; year } ; 1996 }, interpretation: select the row whose length record of all rows is 3rd maximum . the year record of this row is 1996 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; length ; 3 } ; year } ; 1996 }, interpretation: for the start source records of all rows , most of them fuzzily match to bbc sport .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; start source ; bbc sport }, interpretation: for the start source records of all rows , most of them fuzzily match to bbc sport .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; start source ; bbc sport }, interpretation: select the rows whose score record fuzzily matches to 1-1 . there is only one such row in the table . the date record of this unqiue row is march 21 , 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 1-1 } } ; eq { hop { filter_eq { all_rows ; score ; 1-1 } ; date } ; march 21 , 2007 } }, interpretation: select the rows whose score record fuzzily matches to 1-1 . there is only one such row in the table . the date record of this unqiue row is march 21 , 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 1-1 } } ; eq { hop { filter_eq { all_rows ; score ; 1-1 } ; date } ; march 21 , 2007 } }, interpretation: select the rows whose date record is equal to - . there is only one such row in the table . the week record of this unqiue row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; - } } ; eq { hop { filter_eq { all_rows ; date ; - } ; week } ; 6 } }, interpretation: select the rows whose date record is equal to - . there is only one such row in the table . the week record of this unqiue row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; - } } ; eq { hop { filter_eq { all_rows ; date ; - } ; week } ; 6 } }, interpretation: the 1st minimum 2004 - 2005 season record of all rows is 1st in the liga . the club record of the row with 1st minimum 2004 - 2005 season record is benfica .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; 2004 - 2005 season ; 1 } ; 1st in the liga } ; eq { hop { nth_argmin { all_rows ; 2004 - 2005 season ; 1 } ; club } ; benfica } }, interpretation: the 1st minimum 2004 - 2005 season record of all rows is 1st in the liga . the club record of the row with 1st minimum 2004 - 2005 season record is benfica .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; 2004 - 2005 season ; 1 } ; 1st in the liga } ; eq { hop { nth_argmin { all_rows ; 2004 - 2005 season ; 1 } ; club } ; benfica } }, interpretation: the average of the overall record record of all rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; overall record } ; 5 }, interpretation: the average of the overall record record of all rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; overall record } ; 5 }, interpretation: select the rows whose money record is greater than 100000 . there is only one such row in the table . the player record of this unqiue row is ben crenshaw .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; money ; 100000 } } ; eq { hop { filter_greater { all_rows ; money ; 100000 } ; player } ; ben crenshaw } }, interpretation: select the rows whose money record is greater than 100000 . there is only one such row in the table . the player record of this unqiue row is ben crenshaw .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; money ; 100000 } } ; eq { hop { filter_greater { all_rows ; money ; 100000 } ; player } ; ben crenshaw } }, interpretation: the average of the attendance record of all rows is 20240 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 20240 }, interpretation: the average of the attendance record of all rows is 20240 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 20240 }, interpretation: select the rows whose player record fuzzily matches to mitchell duke . take the goals record of this row . select the rows whose player record fuzzily matches to john hutchinson . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; mitchell duke } ; goals } ; hop { filter_eq { all_rows ; player ; john hutchinson } ; goals } }, interpretation: select the rows whose player record fuzzily matches to mitchell duke . take the goals record of this row . select the rows whose player record fuzzily matches to john hutchinson . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; mitchell duke } ; goals } ; hop { filter_eq { all_rows ; player ; john hutchinson } ; goals } }, interpretation: select the rows whose fixtures record is equal to 1 . there is only one such row in the table . the round record of this unqiue row is final .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; fixtures ; 1 } } ; eq { hop { filter_eq { all_rows ; fixtures ; 1 } ; round } ; final } }, interpretation: select the rows whose fixtures record is equal to 1 . there is only one such row in the table . the round record of this unqiue row is final .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; fixtures ; 1 } } ; eq { hop { filter_eq { all_rows ; fixtures ; 1 } ; round } ; final } }, interpretation: select the rows whose won record is less than or equal to 5 . the sum of the points record of these rows is 75 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less_eq { all_rows ; won ; 5 } ; points } ; 75 }, interpretation: select the rows whose won record is less than or equal to 5 . the sum of the points record of these rows is 75 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less_eq { all_rows ; won ; 5 } ; points } ; 75 }, interpretation: for the disease area records of all rows , most of them fuzzily match to cancer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; disease area ; cancer }, interpretation: for the disease area records of all rows , most of them fuzzily match to cancer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; disease area ; cancer }, interpretation: select the rows whose venue record fuzzily matches to western oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to windy hill . take the crowd record of this row . the first record is 3755 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; venue ; western oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; windy hill } ; crowd } } ; 3755 }, interpretation: select the rows whose venue record fuzzily matches to western oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to windy hill . take the crowd record of this row . the first record is 3755 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; venue ; western oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; windy hill } ; crowd } } ; 3755 }, interpretation: the sum of the crowd record of all rows is 124845 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 124845 }, interpretation: the sum of the crowd record of all rows is 124845 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 124845 }, interpretation: select the rows whose transfer fee record is greater than 0 . there is only one such row in the table . the player record of this unqiue row is matthew mills .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; transfer fee ; 0 } } ; eq { hop { filter_greater { all_rows ; transfer fee ; 0 } ; player } ; matthew mills } }, interpretation: select the rows whose transfer fee record is greater than 0 . there is only one such row in the table . the player record of this unqiue row is matthew mills .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; transfer fee ; 0 } } ; eq { hop { filter_greater { all_rows ; transfer fee ; 0 } ; player } ; matthew mills } }, interpretation: the maximum distance record of all rows is 2500 m .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; distance } ; 2500 m }, interpretation: the maximum distance record of all rows is 2500 m .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; distance } ; 2500 m }, interpretation: select the rows whose surface record fuzzily matches to carpet ( i ) . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; carpet ( i ) } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to carpet ( i ) . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; carpet ( i ) } } ; 2 }, interpretation: select the row whose race 2 ( pts ) record of all rows is maximum . the country record of this row is france .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; race 2 ( pts ) } ; country } ; france }, interpretation: select the row whose race 2 ( pts ) record of all rows is maximum . the country record of this row is france .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; race 2 ( pts ) } ; country } ; france }, interpretation: for the outcome records of all rows , most of them fuzzily match to winner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; winner }, interpretation: for the outcome records of all rows , most of them fuzzily match to winner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; winner }, interpretation: select the rows whose new adherents per year record is greater than 1000000 . among these rows , select the rows whose growth rate record is greater than 1.70 % . there is only one such row in the table . the religion record of this unqiue row is islam .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_greater { all_rows ; new adherents per year ; 1000000 } ; growth rate ; 1.70 % } } ; eq { hop { filter_greater { filter_greater { all_rows ; new adherents per year ; 1000000 } ; growth rate ; 1.70 % } ; religion } ; islam } }, interpretation: select the rows whose new adherents per year record is greater than 1000000 . among these rows , select the rows whose growth rate record is greater than 1.70 % . there is only one such row in the table . the religion record of this unqiue row is islam .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_greater { all_rows ; new adherents per year ; 1000000 } ; growth rate ; 1.70 % } } ; eq { hop { filter_greater { filter_greater { all_rows ; new adherents per year ; 1000000 } ; growth rate ; 1.70 % } ; religion } ; islam } }, interpretation: select the rows whose province record fuzzily matches to santiago de cuba . take the density record of this row . select the rows whose province record fuzzily matches to pinar del r\u00edo . take the density record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; province ; santiago de cuba } ; density } ; hop { filter_eq { all_rows ; province ; pinar del r\u00edo } ; density } }, interpretation: select the rows whose province record fuzzily matches to santiago de cuba . take the density record of this row . select the rows whose province record fuzzily matches to pinar del r\u00edo . take the density record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; province ; santiago de cuba } ; density } ; hop { filter_eq { all_rows ; province ; pinar del r\u00edo } ; density } }, interpretation: for the under - 11 records of all rows , most of them fuzzily match to not played .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; under - 11 ; not played }, interpretation: for the under - 11 records of all rows , most of them fuzzily match to not played .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; under - 11 ; not played }, interpretation: select the rows whose away team score record is greater than 10.0 . for the away team score records of these rows , most of them are greater than 10.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_greater { all_rows ; away team score ; 10.0 } ; away team score ; 10.0 }, interpretation: select the rows whose away team score record is greater than 10.0 . for the away team score records of these rows , most of them are greater than 10.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_greater { all_rows ; away team score ; 10.0 } ; away team score ; 10.0 }, interpretation: select the rows whose platform ( s ) record fuzzily matches to wii . there is only one such row in the table . the game record of this unqiue row is super mario galaxy 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; platform ( s ) ; wii } } ; eq { hop { filter_eq { all_rows ; platform ( s ) ; wii } ; game } ; super mario galaxy 2 } }, interpretation: select the rows whose platform ( s ) record fuzzily matches to wii . there is only one such row in the table . the game record of this unqiue row is super mario galaxy 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; platform ( s ) ; wii } } ; eq { hop { filter_eq { all_rows ; platform ( s ) ; wii } ; game } ; super mario galaxy 2 } }, interpretation: select the row whose density record of all rows is maximum . the english name record of this row is xinluo district .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; density } ; english name } ; xinluo district }, interpretation: select the row whose density record of all rows is maximum . the english name record of this row is xinluo district .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; density } ; english name } ; xinluo district }, interpretation: select the rows whose city of license record fuzzily matches to ellijay , georgia . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to morrow , georgia . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; city of license ; ellijay , georgia } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; morrow , georgia } ; frequency mhz } }, interpretation: select the rows whose city of license record fuzzily matches to ellijay , georgia . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to morrow , georgia . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; city of license ; ellijay , georgia } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; morrow , georgia } ; frequency mhz } }, interpretation: the 3rd maximum crowd record of all rows is 13805 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; crowd ; 3 } ; 13805 }, interpretation: the 3rd maximum crowd record of all rows is 13805 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; crowd ; 3 } ; 13805 }, interpretation: the average of the events record of all rows is 17.75 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; events } ; 17.75 }, interpretation: the average of the events record of all rows is 17.75 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; events } ; 17.75 }, interpretation: select the rows whose population ( in 2008 ) record is less than 1000 . there is only one such row in the table . the suburb record of this unqiue row is o'malley .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; population ( in 2008 ) ; 1000 } } ; eq { hop { filter_less { all_rows ; population ( in 2008 ) ; 1000 } ; suburb } ; o'malley } }, interpretation: select the rows whose population ( in 2008 ) record is less than 1000 . there is only one such row in the table . the suburb record of this unqiue row is o'malley .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; population ( in 2008 ) ; 1000 } } ; eq { hop { filter_less { all_rows ; population ( in 2008 ) ; 1000 } ; suburb } ; o'malley } }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the rows whose player record fuzzily matches to eddie keher . take the rank record of this row . select the rows whose player record fuzzily matches to philly grimes . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; eddie keher } ; rank } ; hop { filter_eq { all_rows ; player ; philly grimes } ; rank } }, interpretation: select the rows whose player record fuzzily matches to eddie keher . take the rank record of this row . select the rows whose player record fuzzily matches to philly grimes . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; eddie keher } ; rank } ; hop { filter_eq { all_rows ; player ; philly grimes } ; rank } }, interpretation: the average of the international tourism expenditure 2011 record of all rows is 45-48 billion .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; international tourism expenditure 2011 } ; 45-48 billion }, interpretation: the average of the international tourism expenditure 2011 record of all rows is 45-48 billion .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; international tourism expenditure 2011 } ; 45-48 billion }, interpretation: select the rows whose away team score record is less than 10 . select the row whose crowd record of these rows is 2nd maximum . the venue record of this row is victoria park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_less { all_rows ; away team score ; 10 } ; crowd ; 2 } ; venue } ; victoria park }, interpretation: select the rows whose away team score record is less than 10 . select the row whose crowd record of these rows is 2nd maximum . the venue record of this row is victoria park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_less { all_rows ; away team score ; 10 } ; crowd ; 2 } ; venue } ; victoria park }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the date record of this row is january 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; date } ; january 12 }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the date record of this row is january 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; date } ; january 12 }, interpretation: select the rows whose visitor record does not match to toronto . among these rows , select the rows whose points record is equal to 28 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_not_eq { all_rows ; visitor ; toronto } ; points ; 28 } } ; 2 }, interpretation: select the rows whose visitor record does not match to toronto . among these rows , select the rows whose points record is equal to 28 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_not_eq { all_rows ; visitor ; toronto } ; points ; 28 } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 4 }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 4 }, interpretation: select the row whose commenced operations record of all rows is 2nd minimum . the airlines record of this row is silkair .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; commenced operations ; 2 } ; airlines } ; silkair }, interpretation: select the row whose commenced operations record of all rows is 2nd minimum . the airlines record of this row is silkair .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; commenced operations ; 2 } ; airlines } ; silkair }, interpretation: select the rows whose date record fuzzily matches to january 29 . take the high points record of this row . select the rows whose date record fuzzily matches to january 1 . take the high points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; january 29 } ; high points } ; hop { filter_eq { all_rows ; date ; january 1 } ; high points } }, interpretation: select the rows whose date record fuzzily matches to january 29 . take the high points record of this row . select the rows whose date record fuzzily matches to january 1 . take the high points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; january 29 } ; high points } ; hop { filter_eq { all_rows ; date ; january 1 } ; high points } }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 17 }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 17 }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: the average of the best score record of all rows is 37 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; best score } ; 37 }, interpretation: the average of the best score record of all rows is 37 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; best score } ; 37 }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; october } ; result ; l }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; october } ; result ; l }, interpretation: for the played records of all rows , all of them are equal to 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 30 }, interpretation: for the played records of all rows , all of them are equal to 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 30 }, interpretation: select the rows whose car make record fuzzily matches to pontiac . there is only one such row in the table . the driver record of this unqiue row is tony stewart .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; car make ; pontiac } } ; eq { hop { filter_eq { all_rows ; car make ; pontiac } ; driver } ; tony stewart } }, interpretation: select the rows whose car make record fuzzily matches to pontiac . there is only one such row in the table . the driver record of this unqiue row is tony stewart .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; car make ; pontiac } } ; eq { hop { filter_eq { all_rows ; car make ; pontiac } ; driver } ; tony stewart } }, interpretation: the average of the total flights record of all rows is 16.63 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total flights } ; 16.63 }, interpretation: the average of the total flights record of all rows is 16.63 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total flights } ; 16.63 }, interpretation: select the rows whose result record fuzzily matches to new seat democratic - republican gain . there is only one such row in the table . the district record of this unqiue row is north carolina 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; new seat democratic - republican gain } } ; eq { hop { filter_eq { all_rows ; result ; new seat democratic - republican gain } ; district } ; north carolina 9 } }, interpretation: select the rows whose result record fuzzily matches to new seat democratic - republican gain . there is only one such row in the table . the district record of this unqiue row is north carolina 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; new seat democratic - republican gain } } ; eq { hop { filter_eq { all_rows ; result ; new seat democratic - republican gain } ; district } ; north carolina 9 } }, interpretation: for the film or series records of all rows , most of them fuzzily match to eastenders .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; film or series ; eastenders }, interpretation: for the film or series records of all rows , most of them fuzzily match to eastenders .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; film or series ; eastenders }, interpretation: select the rows whose country record fuzzily matches to scotland . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; scotland } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to scotland . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; scotland } } ; 2 }, interpretation: select the rows whose year record fuzzily matches to 1959 . take the rank record of this row . select the rows whose year record fuzzily matches to 1958 . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 1959 } ; rank } ; hop { filter_eq { all_rows ; year ; 1958 } ; rank } }, interpretation: select the rows whose year record fuzzily matches to 1959 . take the rank record of this row . select the rows whose year record fuzzily matches to 1958 . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 1959 } ; rank } ; hop { filter_eq { all_rows ; year ; 1958 } ; rank } }, interpretation: the maximum date record of all rows is july 30 , 2008 . the region record of the row with superlative date record is japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; date } ; july 30 , 2008 } ; eq { hop { argmax { all_rows ; date } ; region } ; japan } }, interpretation: the maximum date record of all rows is july 30 , 2008 . the region record of the row with superlative date record is japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; date } ; july 30 , 2008 } ; eq { hop { argmax { all_rows ; date } ; region } ; japan } }, interpretation: select the rows whose player record fuzzily matches to billy casper . take the year ( s ) won record of this row . select the rows whose player record fuzzily matches to arnold palmer . take the year ( s ) won record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; billy casper } ; year ( s ) won } ; hop { filter_eq { all_rows ; player ; arnold palmer } ; year ( s ) won } }, interpretation: select the rows whose player record fuzzily matches to billy casper . take the year ( s ) won record of this row . select the rows whose player record fuzzily matches to arnold palmer . take the year ( s ) won record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; billy casper } ; year ( s ) won } ; hop { filter_eq { all_rows ; player ; arnold palmer } ; year ( s ) won } }, interpretation: select the rows whose date successor seated record fuzzily matches to november . among these rows , select the rows whose successor record fuzzily matches to ( r ) . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date successor seated ; november } ; successor ; ( r ) } } ; 2 }, interpretation: select the rows whose date successor seated record fuzzily matches to november . among these rows , select the rows whose successor record fuzzily matches to ( r ) . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date successor seated ; november } ; successor ; ( r ) } } ; 2 }, interpretation: select the row whose difference record of all rows is 2nd maximum . the team record of this row is americano - sp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; difference ; 2 } ; team } ; americano - sp }, interpretation: select the row whose difference record of all rows is 2nd maximum . the team record of this row is americano - sp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; difference ; 2 } ; team } ; americano - sp }, interpretation: for the gender records of all rows , all of them fuzzily match to coed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; gender ; coed }, interpretation: for the gender records of all rows , all of them fuzzily match to coed .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; gender ; coed }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose tournament record fuzzily matches to world cross country championships . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; world cross country championships } } ; 3 }, interpretation: select the rows whose tournament record fuzzily matches to world cross country championships . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; world cross country championships } } ; 3 }, interpretation: select the rows whose song record fuzzily matches to endless love . take the weeks on top record of this row . select the rows whose song record fuzzily matches to morning train . take the weeks on top record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; song ; endless love } ; weeks on top } ; hop { filter_eq { all_rows ; song ; morning train } ; weeks on top } }, interpretation: select the rows whose song record fuzzily matches to endless love . take the weeks on top record of this row . select the rows whose song record fuzzily matches to morning train . take the weeks on top record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; song ; endless love } ; weeks on top } ; hop { filter_eq { all_rows ; song ; morning train } ; weeks on top } }, interpretation: the average of the total prize money record of all rows is 135000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total prize money } ; 135000 }, interpretation: the average of the total prize money record of all rows is 135000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total prize money } ; 135000 }, interpretation: select the rows whose tournament record fuzzily matches to world championships . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; world championships } } ; 2 }, interpretation: select the rows whose tournament record fuzzily matches to world championships . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; world championships } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 2006 . select the row whose date record of these rows is minimum . the opponent record of this row is josipa bek .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; date ; 2006 } ; date } ; opponent } ; josipa bek }, interpretation: select the rows whose date record fuzzily matches to 2006 . select the row whose date record of these rows is minimum . the opponent record of this row is josipa bek .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; date ; 2006 } ; date } ; opponent } ; josipa bek }, interpretation: select the rows whose home team record fuzzily matches to carlton . take the home team score record of this row . select the rows whose home team record fuzzily matches to footscray . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; carlton } ; home team score } ; hop { filter_eq { all_rows ; home team ; footscray } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to carlton . take the home team score record of this row . select the rows whose home team record fuzzily matches to footscray . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; carlton } ; home team score } ; hop { filter_eq { all_rows ; home team ; footscray } ; home team score } }, interpretation: select the rows whose venue record fuzzily matches to sydney cricket ground . take the date record of this row . select the rows whose venue record fuzzily matches to waca ground . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; sydney cricket ground } ; date } ; hop { filter_eq { all_rows ; venue ; waca ground } ; date } }, interpretation: select the rows whose venue record fuzzily matches to sydney cricket ground . take the date record of this row . select the rows whose venue record fuzzily matches to waca ground . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; sydney cricket ground } ; date } ; hop { filter_eq { all_rows ; venue ; waca ground } ; date } }, interpretation: select the row whose goals record of all rows is maximum . the player record of this row is oleg veretennikov .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals } ; player } ; oleg veretennikov }, interpretation: select the row whose goals record of all rows is maximum . the player record of this row is oleg veretennikov .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals } ; player } ; oleg veretennikov }, interpretation: select the rows whose leading lady record fuzzily matches to alberta vaughn . there is only one such row in the table . the title record of this unqiue row is randy rides alone .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; leading lady ; alberta vaughn } } ; eq { hop { filter_eq { all_rows ; leading lady ; alberta vaughn } ; title } ; randy rides alone } }, interpretation: select the rows whose leading lady record fuzzily matches to alberta vaughn . there is only one such row in the table . the title record of this unqiue row is randy rides alone .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; leading lady ; alberta vaughn } } ; eq { hop { filter_eq { all_rows ; leading lady ; alberta vaughn } ; title } ; randy rides alone } }, interpretation: the average of the sales record of all rows is 1236000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; sales } ; 1236000 }, interpretation: the average of the sales record of all rows is 1236000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; sales } ; 1236000 }, interpretation: select the rows whose class record fuzzily matches to a . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; class ; a } }, interpretation: select the rows whose class record fuzzily matches to a . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; class ; a } }, interpretation: select the row whose caps record of all rows is 3rd maximum . the player record of this row is kyle beckerman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; caps ; 3 } ; player } ; kyle beckerman }, interpretation: select the row whose caps record of all rows is 3rd maximum . the player record of this row is kyle beckerman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; caps ; 3 } ; player } ; kyle beckerman }, interpretation: select the rows whose player record fuzzily matches to ian smart . take the rating record of this row . select the rows whose player record fuzzily matches to dave dickenson . take the rating record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ian smart } ; rating } ; hop { filter_eq { all_rows ; player ; dave dickenson } ; rating } }, interpretation: select the rows whose player record fuzzily matches to ian smart . take the rating record of this row . select the rows whose player record fuzzily matches to dave dickenson . take the rating record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ian smart } ; rating } ; hop { filter_eq { all_rows ; player ; dave dickenson } ; rating } }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: select the rows whose chassis record fuzzily matches to ferrari 156 aero . there is only one such row in the table . the year record of this unqiue row is 1964 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; ferrari 156 aero } } ; eq { hop { filter_eq { all_rows ; chassis ; ferrari 156 aero } ; year } ; 1964 } }, interpretation: select the rows whose chassis record fuzzily matches to ferrari 156 aero . there is only one such row in the table . the year record of this unqiue row is 1964 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; ferrari 156 aero } } ; eq { hop { filter_eq { all_rows ; chassis ; ferrari 156 aero } ; year } ; 1964 } }, interpretation: select the row whose against record of all rows is minimum . the opposing teams record of this row is ireland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; against } ; opposing teams } ; ireland }, interpretation: select the row whose against record of all rows is minimum . the opposing teams record of this row is ireland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; against } ; opposing teams } ; ireland }, interpretation: for the type records of all rows , all of them fuzzily match to private .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; type ; private }, interpretation: for the type records of all rows , all of them fuzzily match to private .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; type ; private }, interpretation: select the rows whose location attendance record fuzzily matches to united center . the sum of the location attendance record of these rows is 226050 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; united center } ; location attendance } ; 226050 }, interpretation: select the rows whose location attendance record fuzzily matches to united center . the sum of the location attendance record of these rows is 226050 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; united center } ; location attendance } ; 226050 }, interpretation: select the row whose lost record of all rows is maximum . the team record of this row is lp\u017c zielona g\u00f3ra .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; lost } ; team } ; lp\u017c zielona g\u00f3ra }, interpretation: select the row whose lost record of all rows is maximum . the team record of this row is lp\u017c zielona g\u00f3ra .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; lost } ; team } ; lp\u017c zielona g\u00f3ra }, interpretation: for the date records of all rows , all of them fuzzily match to 11 april 1981 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 11 april 1981 }, interpretation: for the date records of all rows , all of them fuzzily match to 11 april 1981 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 11 april 1981 }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is essendon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; essendon }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is essendon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; essendon }, interpretation: for the subregion records of all rows , most of them fuzzily match to baixo vouga .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; subregion ; baixo vouga }, interpretation: for the subregion records of all rows , most of them fuzzily match to baixo vouga .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; subregion ; baixo vouga }, interpretation: select the rows whose challenge winner record fuzzily matches to food . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; challenge winner ; food } } ; 4 }, interpretation: select the rows whose challenge winner record fuzzily matches to food . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; challenge winner ; food } } ; 4 }, interpretation: select the row whose enrollment record of all rows is 1st maximum . the school record of this row is carson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ; 1 } ; school } ; carson }, interpretation: select the row whose enrollment record of all rows is 1st maximum . the school record of this row is carson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ; 1 } ; school } ; carson }, interpretation: select the rows whose district record fuzzily matches to fregenal de la sierra . the maximum election date record of these rows is 1853 - 2 - 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; district ; fregenal de la sierra } ; election date } ; 1853 - 2 - 4 }, interpretation: select the rows whose district record fuzzily matches to fregenal de la sierra . the maximum election date record of these rows is 1853 - 2 - 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; district ; fregenal de la sierra } ; election date } ; 1853 - 2 - 4 }, interpretation: for the class records of all rows , all of them fuzzily match to d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; class ; d }, interpretation: for the class records of all rows , all of them fuzzily match to d .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; class ; d }, interpretation: the average of the episode record of all rows is 240 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; episode } ; 240 }, interpretation: the average of the episode record of all rows is 240 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; episode } ; 240 }, interpretation: select the row whose game record of all rows is 3rd minimum . the team record of this row is miami .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; game ; 3 } ; team } ; miami }, interpretation: select the row whose game record of all rows is 3rd minimum . the team record of this row is miami .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; game ; 3 } ; team } ; miami }, interpretation: select the rows whose school / club team record fuzzily matches to maynard evans hs . there is only one such row in the table . the player record of this unqiue row is darryl dawkins .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; maynard evans hs } } ; eq { hop { filter_eq { all_rows ; school / club team ; maynard evans hs } ; player } ; darryl dawkins } }, interpretation: select the rows whose school / club team record fuzzily matches to maynard evans hs . there is only one such row in the table . the player record of this unqiue row is darryl dawkins .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; maynard evans hs } } ; eq { hop { filter_eq { all_rows ; school / club team ; maynard evans hs } ; player } ; darryl dawkins } }, interpretation: select the rows whose result record fuzzily matches to loss . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; loss } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to loss . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; loss } } ; 2 }, interpretation: select the rows whose dutch cup record fuzzily matches to finalist . for the postseason records of these rows , most of them fuzzily match to champion .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; dutch cup ; finalist } ; postseason ; champion }, interpretation: select the rows whose dutch cup record fuzzily matches to finalist . for the postseason records of these rows , most of them fuzzily match to champion .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; dutch cup ; finalist } ; postseason ; champion }, interpretation: select the rows whose name record fuzzily matches to frank borman . take the born record of this row . select the rows whose name record fuzzily matches to jim lovell . take the born record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; frank borman } ; born } ; hop { filter_eq { all_rows ; name ; jim lovell } ; born } }, interpretation: select the rows whose name record fuzzily matches to frank borman . take the born record of this row . select the rows whose name record fuzzily matches to jim lovell . take the born record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; frank borman } ; born } ; hop { filter_eq { all_rows ; name ; jim lovell } ; born } }, interpretation: select the rows whose jyutping record fuzzily matches to loeng2 . take the imperial value record of this row . select the rows whose jyutping record fuzzily matches to daam3 . take the imperial value record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; jyutping ; loeng2 } ; imperial value } ; hop { filter_eq { all_rows ; jyutping ; daam3 } ; imperial value } }, interpretation: select the rows whose jyutping record fuzzily matches to loeng2 . take the imperial value record of this row . select the rows whose jyutping record fuzzily matches to daam3 . take the imperial value record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; jyutping ; loeng2 } ; imperial value } ; hop { filter_eq { all_rows ; jyutping ; daam3 } ; imperial value } }, interpretation: for the seats records of all rows , all of them are equal to 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; seats ; 2 }, interpretation: for the seats records of all rows , all of them are equal to 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; seats ; 2 }, interpretation: select the row whose age on mission record of all rows is 1st maximum . the name record of this row is jim lovell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; age on mission ; 1 } ; name } ; jim lovell }, interpretation: select the row whose age on mission record of all rows is 1st maximum . the name record of this row is jim lovell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; age on mission ; 1 } ; name } ; jim lovell }, interpretation: for the color commentator ( s ) records of all rows , all of them fuzzily match to stu lantz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; color commentator ( s ) ; stu lantz }, interpretation: for the color commentator ( s ) records of all rows , all of them fuzzily match to stu lantz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; color commentator ( s ) ; stu lantz }, interpretation: select the rows whose date record fuzzily matches to 27 november 1997 . take the attendance record of this row . select the rows whose date record fuzzily matches to 10 december 1997 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 27 november 1997 } ; attendance } ; hop { filter_eq { all_rows ; date ; 10 december 1997 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to 27 november 1997 . take the attendance record of this row . select the rows whose date record fuzzily matches to 10 december 1997 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 27 november 1997 } ; attendance } ; hop { filter_eq { all_rows ; date ; 10 december 1997 } ; attendance } }, interpretation: select the rows whose season record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; season } } ; 5 }, interpretation: select the rows whose season record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; season } } ; 5 }, interpretation: select the row whose size record of all rows is 2nd maximum . the school record of this row is southwestern hanover .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; size ; 2 } ; school } ; southwestern hanover }, interpretation: select the row whose size record of all rows is 2nd maximum . the school record of this row is southwestern hanover .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; size ; 2 } ; school } ; southwestern hanover }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose score record is less than 208 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_less { filter_eq { all_rows ; country ; united states } ; score ; 208 } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose score record is less than 208 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_less { filter_eq { all_rows ; country ; united states } ; score ; 208 } }, interpretation: select the rows whose rank record is less than or equal to 5 . for the goals records of these rows , all of them are greater than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_less_eq { all_rows ; rank ; 5 } ; goals ; 100 }, interpretation: select the rows whose rank record is less than or equal to 5 . for the goals records of these rows , all of them are greater than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_less_eq { all_rows ; rank ; 5 } ; goals ; 100 }, interpretation: for the mean score records of all rows , most of them are greater than 621 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; mean score ; 621 }, interpretation: for the mean score records of all rows , most of them are greater than 621 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; mean score ; 621 }, interpretation: select the rows whose years record fuzzily matches to 192 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; years ; 192 } } ; 2 }, interpretation: select the rows whose years record fuzzily matches to 192 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; years ; 192 } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to rhp . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; rhp } } ; 6 }, interpretation: select the rows whose position record fuzzily matches to rhp . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; rhp } } ; 6 }, interpretation: select the row whose us viewers ( millions ) record of all rows is maximum . the no in series record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( millions ) } ; no in series } ; 1 }, interpretation: select the row whose us viewers ( millions ) record of all rows is maximum . the no in series record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( millions ) } ; no in series } ; 1 }, interpretation: select the rows whose opponent in the final record fuzzily matches to graeme dott . there is only one such row in the table . the championship record of this unqiue row is world series - berlin event .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; graeme dott } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; graeme dott } ; championship } ; world series - berlin event } }, interpretation: select the rows whose opponent in the final record fuzzily matches to graeme dott . there is only one such row in the table . the championship record of this unqiue row is world series - berlin event .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; graeme dott } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; graeme dott } ; championship } ; world series - berlin event } }, interpretation: select the row whose bronze record of all rows is 2nd maximum . the nation record of this row is colombia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; bronze ; 2 } ; nation } ; colombia }, interpretation: select the row whose bronze record of all rows is 2nd maximum . the nation record of this row is colombia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; bronze ; 2 } ; nation } ; colombia }, interpretation: the average of the crowd record of all rows is 24303 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24303 }, interpretation: the average of the crowd record of all rows is 24303 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24303 }, interpretation: select the rows whose high assists record fuzzily matches to rafer alston . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high assists ; rafer alston } } ; 4 }, interpretation: select the rows whose high assists record fuzzily matches to rafer alston . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high assists ; rafer alston } } ; 4 }, interpretation: select the rows whose lost record is equal to 0 . there is only one such row in the table . the team record of this unqiue row is s\u00e3o paulo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lost ; 0 } } ; eq { hop { filter_eq { all_rows ; lost ; 0 } ; team } ; s\u00e3o paulo } }, interpretation: select the rows whose lost record is equal to 0 . there is only one such row in the table . the team record of this unqiue row is s\u00e3o paulo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lost ; 0 } } ; eq { hop { filter_eq { all_rows ; lost ; 0 } ; team } ; s\u00e3o paulo } }, interpretation: for the date records of all rows , all of them fuzzily match to march .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; march }, interpretation: for the date records of all rows , all of them fuzzily match to march .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; march }, interpretation: select the rows whose directed by record fuzzily matches to steve mann . among these rows , select the rows whose written by record fuzzily matches to john ridley . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; steve mann } ; written by ; john ridley } } ; 3 }, interpretation: select the rows whose directed by record fuzzily matches to steve mann . among these rows , select the rows whose written by record fuzzily matches to john ridley . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; steve mann } ; written by ; john ridley } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to 16 august 2000 . take the competition record of this row . select the rows whose date record fuzzily matches to 22 august 2007 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is friendly . the competition record of the second row is friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; date ; 16 august 2000 } ; competition } ; hop { filter_eq { all_rows ; date ; 22 august 2007 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; date ; 16 august 2000 } ; competition } ; friendly } ; eq { hop { filter_eq { all_rows ; date ; 22 august 2007 } ; competition } ; friendly } } }, interpretation: select the rows whose date record fuzzily matches to 16 august 2000 . take the competition record of this row . select the rows whose date record fuzzily matches to 22 august 2007 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is friendly . the competition record of the second row is friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; date ; 16 august 2000 } ; competition } ; hop { filter_eq { all_rows ; date ; 22 august 2007 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; date ; 16 august 2000 } ; competition } ; friendly } ; eq { hop { filter_eq { all_rows ; date ; 22 august 2007 } ; competition } ; friendly } } }, interpretation: select the rows whose total ( kg ) record is greater than or equal to 330 . among these rows , select the rows whose snatch record is less than 150 . there is only one such row in the table . the name record of this unqiue row is juan quiterio ( dom ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_greater_eq { all_rows ; total ( kg ) ; 330 } ; snatch ; 150 } } ; eq { hop { filter_less { filter_greater_eq { all_rows ; total ( kg ) ; 330 } ; snatch ; 150 } ; name } ; juan quiterio ( dom ) } }, interpretation: select the rows whose total ( kg ) record is greater than or equal to 330 . among these rows , select the rows whose snatch record is less than 150 . there is only one such row in the table . the name record of this unqiue row is juan quiterio ( dom ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_greater_eq { all_rows ; total ( kg ) ; 330 } ; snatch ; 150 } } ; eq { hop { filter_less { filter_greater_eq { all_rows ; total ( kg ) ; 330 } ; snatch ; 150 } ; name } ; juan quiterio ( dom ) } }, interpretation: select the rows whose result record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is c\u0103t\u0103lin zm\u0103r\u0103ndescu .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; draw } } ; eq { hop { filter_eq { all_rows ; result ; draw } ; opponent } ; c\u0103t\u0103lin zm\u0103r\u0103ndescu } }, interpretation: select the rows whose result record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is c\u0103t\u0103lin zm\u0103r\u0103ndescu .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; draw } } ; eq { hop { filter_eq { all_rows ; result ; draw } ; opponent } ; c\u0103t\u0103lin zm\u0103r\u0103ndescu } }, interpretation: select the rows whose race record fuzzily matches to german grand prix . take the date record of this row . select the rows whose race record fuzzily matches to british grand prix . take the date record of this row . the first record is 15 days larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; race ; german grand prix } ; date } ; hop { filter_eq { all_rows ; race ; british grand prix } ; date } } ; 15 days }, interpretation: select the rows whose race record fuzzily matches to german grand prix . take the date record of this row . select the rows whose race record fuzzily matches to british grand prix . take the date record of this row . the first record is 15 days larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; race ; german grand prix } ; date } ; hop { filter_eq { all_rows ; race ; british grand prix } ; date } } ; 15 days }, interpretation: select the rows whose name record fuzzily matches to kseniya moskvina . take the time record of this row . select the rows whose name record fuzzily matches to sophie edington . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; kseniya moskvina } ; time } ; hop { filter_eq { all_rows ; name ; sophie edington } ; time } }, interpretation: select the rows whose name record fuzzily matches to kseniya moskvina . take the time record of this row . select the rows whose name record fuzzily matches to sophie edington . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; kseniya moskvina } ; time } ; hop { filter_eq { all_rows ; name ; sophie edington } ; time } }, interpretation: select the rows whose date of reclassification record fuzzily matches to merge into shizuoka . there is only one such row in the table . the name record of this unqiue row is shimizu .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date of reclassification ; merge into shizuoka } } ; eq { hop { filter_eq { all_rows ; date of reclassification ; merge into shizuoka } ; name } ; shimizu } }, interpretation: select the rows whose date of reclassification record fuzzily matches to merge into shizuoka . there is only one such row in the table . the name record of this unqiue row is shimizu .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date of reclassification ; merge into shizuoka } } ; eq { hop { filter_eq { all_rows ; date of reclassification ; merge into shizuoka } ; name } ; shimizu } }, interpretation: for the region records of all rows , most of them fuzzily match to usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; region ; usa }, interpretation: for the region records of all rows , most of them fuzzily match to usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; region ; usa }, interpretation: select the rows whose opponent record fuzzily matches to richard white . take the round record of this row . select the rows whose opponent record fuzzily matches to jeremy beck . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; richard white } ; round } ; hop { filter_eq { all_rows ; opponent ; jeremy beck } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to richard white . take the round record of this row . select the rows whose opponent record fuzzily matches to jeremy beck . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; richard white } ; round } ; hop { filter_eq { all_rows ; opponent ; jeremy beck } ; round } }, interpretation: the average of the attendance record of all rows is 21273 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 21273 }, interpretation: the average of the attendance record of all rows is 21273 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 21273 }, interpretation: select the rows whose result record fuzzily matches to retired jacksonian hold . there is only one such row in the table . the incumbent record of this unqiue row is john floyd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired jacksonian hold } } ; eq { hop { filter_eq { all_rows ; result ; retired jacksonian hold } ; incumbent } ; john floyd } }, interpretation: select the rows whose result record fuzzily matches to retired jacksonian hold . there is only one such row in the table . the incumbent record of this unqiue row is john floyd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired jacksonian hold } } ; eq { hop { filter_eq { all_rows ; result ; retired jacksonian hold } ; incumbent } ; john floyd } }, interpretation: select the rows whose nationality record fuzzily matches to bosnia and herzegovina . there is only one such row in the table . the previous team record of this unqiue row is golden state warriors .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; bosnia and herzegovina } } ; eq { hop { filter_eq { all_rows ; nationality ; bosnia and herzegovina } ; previous team } ; golden state warriors } }, interpretation: select the rows whose nationality record fuzzily matches to bosnia and herzegovina . there is only one such row in the table . the previous team record of this unqiue row is golden state warriors .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; bosnia and herzegovina } } ; eq { hop { filter_eq { all_rows ; nationality ; bosnia and herzegovina } ; previous team } ; golden state warriors } }, interpretation: select the row whose place record of all rows is minimum . the player record of this row is davis love iii .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; place } ; player } ; davis love iii }, interpretation: select the row whose place record of all rows is minimum . the player record of this row is davis love iii .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; place } ; player } ; davis love iii }, interpretation: for the % ( 2000 ) records of all rows , most of them are less than 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; % ( 2000 ) ; 6 }, interpretation: for the % ( 2000 ) records of all rows , most of them are less than 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; % ( 2000 ) ; 6 }, interpretation: select the rows whose platform ( s ) record fuzzily matches to gamecube . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; platform ( s ) ; gamecube } } ; 5 }, interpretation: select the rows whose platform ( s ) record fuzzily matches to gamecube . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; platform ( s ) ; gamecube } } ; 5 }, interpretation: the sum of the production in 2011 ( 1000 ton ) record of all rows is 290,133 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; production in 2011 ( 1000 ton ) } ; 290,133 }, interpretation: the sum of the production in 2011 ( 1000 ton ) record of all rows is 290,133 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; production in 2011 ( 1000 ton ) } ; 290,133 }, interpretation: select the rows whose division record record fuzzily matches to 4-2 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; division record ; 4-2 } } ; 2 }, interpretation: select the rows whose division record record fuzzily matches to 4-2 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; division record ; 4-2 } } ; 2 }, interpretation: the average of the viewers ( in millions ) record of all rows is 7.76 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers ( in millions ) } ; 7.76 }, interpretation: the average of the viewers ( in millions ) record of all rows is 7.76 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers ( in millions ) } ; 7.76 }, interpretation: the average of the area ( km square ) record of all rows is 47 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) } ; 47 }, interpretation: the average of the area ( km square ) record of all rows is 47 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) } ; 47 }, interpretation: select the rows whose written by record fuzzily matches to robert king & michelle king . the average of the us viewers ( million ) record of these rows is 12.47 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; written by ; robert king & michelle king } ; us viewers ( million ) } ; 12.47 }, interpretation: select the rows whose written by record fuzzily matches to robert king & michelle king . the average of the us viewers ( million ) record of these rows is 12.47 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; written by ; robert king & michelle king } ; us viewers ( million ) } ; 12.47 }, interpretation: the average of the age record of all rows is 25.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; age } ; 25.6 }, interpretation: the average of the age record of all rows is 25.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; age } ; 25.6 }, interpretation: select the row whose length record of all rows is maximum . the name record of this row is northern eagle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; name } ; northern eagle }, interpretation: select the row whose length record of all rows is maximum . the name record of this row is northern eagle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; name } ; northern eagle }, interpretation: select the rows whose state / territory record fuzzily matches to queensland . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; state / territory ; queensland } } ; 6 }, interpretation: select the rows whose state / territory record fuzzily matches to queensland . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; state / territory ; queensland } } ; 6 }, interpretation: for the played records of all rows , all of them are equal to 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 30 }, interpretation: select the rows whose first elected record is equal to 1793 . there is only one such row in the table . the incumbent record of this unqiue row is john nicholas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 1793 } } ; eq { hop { filter_eq { all_rows ; first elected ; 1793 } ; incumbent } ; john nicholas } }, interpretation: select the rows whose first elected record is equal to 1793 . there is only one such row in the table . the incumbent record of this unqiue row is john nicholas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 1793 } } ; eq { hop { filter_eq { all_rows ; first elected ; 1793 } ; incumbent } ; john nicholas } }, interpretation: the average of the points record of all rows is 48.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 48.8 }, interpretation: the average of the points record of all rows is 48.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 48.8 }, interpretation: select the row whose quantity record of all rows is maximum . the make record of this row is gm new look .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; quantity } ; make } ; gm new look }, interpretation: select the row whose quantity record of all rows is maximum . the make record of this row is gm new look .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; quantity } ; make } ; gm new look }, interpretation: for the competition records of all rows , most of them fuzzily match to 1908 olympics .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; 1908 olympics }, interpretation: for the competition records of all rows , most of them fuzzily match to 1908 olympics .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; 1908 olympics }, interpretation: select the rows whose home record fuzzily matches to minnesota . among these rows , select the rows whose attendance record is greater than or equal to 19360 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_eq { all_rows ; home ; minnesota } ; attendance ; 19360 } } ; 2 }, interpretation: select the rows whose home record fuzzily matches to minnesota . among these rows , select the rows whose attendance record is greater than or equal to 19360 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_eq { all_rows ; home ; minnesota } ; attendance ; 19360 } } ; 2 }, interpretation: select the row whose points per game record of all rows is minimum . the tournament record of this row is 2011 eurobasket .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; points per game } ; tournament } ; 2011 eurobasket }, interpretation: select the row whose points per game record of all rows is minimum . the tournament record of this row is 2011 eurobasket .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; points per game } ; tournament } ; 2011 eurobasket }, interpretation: for the original air date records of all rows , most of them fuzzily match to 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; original air date ; 2008 }, interpretation: for the original air date records of all rows , most of them fuzzily match to 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; original air date ; 2008 }, interpretation: select the row whose jump 1 record of all rows is 2nd maximum . the athlete name record of this row is dmitriy bondarenko ( urs ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; jump 1 ; 2 } ; athlete name } ; dmitriy bondarenko ( urs ) }, interpretation: select the row whose jump 1 record of all rows is 2nd maximum . the athlete name record of this row is dmitriy bondarenko ( urs ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; jump 1 ; 2 } ; athlete name } ; dmitriy bondarenko ( urs ) }, interpretation: select the rows whose manager record fuzzily matches to bob didier . there is only one such row in the table . the year record of this unqiue row is 1977 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manager ; bob didier } } ; eq { hop { filter_eq { all_rows ; manager ; bob didier } ; year } ; 1977 } }, interpretation: select the rows whose manager record fuzzily matches to bob didier . there is only one such row in the table . the year record of this unqiue row is 1977 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manager ; bob didier } } ; eq { hop { filter_eq { all_rows ; manager ; bob didier } ; year } ; 1977 } }, interpretation: select the rows whose oberbayern record fuzzily matches to fc ingolstadt 04 . the minimum season record of these rows is 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; oberbayern ; fc ingolstadt 04 } ; season } ; 2005 }, interpretation: select the rows whose oberbayern record fuzzily matches to fc ingolstadt 04 . the minimum season record of these rows is 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; oberbayern ; fc ingolstadt 04 } ; season } ; 2005 }, interpretation: select the rows whose aggregate score record fuzzily matches to 0 . there is only one such row in the table . the opposition record of this unqiue row is fc k\u00f6ln .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; aggregate score ; 0 } } ; eq { hop { filter_eq { all_rows ; aggregate score ; 0 } ; opposition } ; fc k\u00f6ln } }, interpretation: select the rows whose aggregate score record fuzzily matches to 0 . there is only one such row in the table . the opposition record of this unqiue row is fc k\u00f6ln .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; aggregate score ; 0 } } ; eq { hop { filter_eq { all_rows ; aggregate score ; 0 } ; opposition } ; fc k\u00f6ln } }, interpretation: select the rows whose location attendance record fuzzily matches to rose garden . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; rose garden } } ; 3 }, interpretation: select the rows whose location attendance record fuzzily matches to rose garden . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; rose garden } } ; 3 }, interpretation: select the rows whose away team score record is less than 10 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; away team score ; 10 } } ; 1 }, interpretation: select the rows whose away team score record is less than 10 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; away team score ; 10 } } ; 1 }, interpretation: select the row whose date record of all rows is 3rd minimum . the venue record of this row is victoria park . the crowd record of this row is 23000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmin { all_rows ; date ; 3 } ; venue } ; victoria park } ; eq { hop { nth_argmin { all_rows ; date ; 3 } ; crowd } ; 23000 } }, interpretation: select the row whose date record of all rows is 3rd minimum . the venue record of this row is victoria park . the crowd record of this row is 23000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmin { all_rows ; date ; 3 } ; venue } ; victoria park } ; eq { hop { nth_argmin { all_rows ; date ; 3 } ; crowd } ; 23000 } }, interpretation: select the rows whose round winner record fuzzily matches to larry perkins . take the date record of this row . select the rows whose round winner record fuzzily matches to mark skaife . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; round winner ; larry perkins } ; date } ; hop { filter_eq { all_rows ; round winner ; mark skaife } ; date } }, interpretation: select the rows whose round winner record fuzzily matches to larry perkins . take the date record of this row . select the rows whose round winner record fuzzily matches to mark skaife . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; round winner ; larry perkins } ; date } ; hop { filter_eq { all_rows ; round winner ; mark skaife } ; date } }, interpretation: select the rows whose seasons at this level record fuzzily matches to 27 seasons . for the settlements records of these rows , most of them fuzzily match to lisbon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; seasons at this level ; 27 seasons } ; settlements ; lisbon }, interpretation: select the rows whose seasons at this level record fuzzily matches to 27 seasons . for the settlements records of these rows , most of them fuzzily match to lisbon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; seasons at this level ; 27 seasons } ; settlements ; lisbon }, interpretation: for the party records of all rows , all of them fuzzily match to democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party ; democratic }, interpretation: select the row whose elevation ( m ) record of all rows is 2nd maximum . the peak record of this row is moldoveanu peak .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; elevation ( m ) ; 2 } ; peak } ; moldoveanu peak }, interpretation: select the row whose elevation ( m ) record of all rows is 2nd maximum . the peak record of this row is moldoveanu peak .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; elevation ( m ) ; 2 } ; peak } ; moldoveanu peak }, interpretation: select the rows whose venue record fuzzily matches to punt road oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to junction oval . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; punt road oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; junction oval } ; crowd } }, interpretation: select the rows whose venue record fuzzily matches to punt road oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to junction oval . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; punt road oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; junction oval } ; crowd } }, interpretation: select the rows whose successor record fuzzily matches to thomas tillinghast ( f ) . take the date successor seated record of this row . select the rows whose successor record fuzzily matches to robert waln ( f ) . take the date successor seated record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; successor ; thomas tillinghast ( f ) } ; date successor seated } ; hop { filter_eq { all_rows ; successor ; robert waln ( f ) } ; date successor seated } }, interpretation: select the rows whose successor record fuzzily matches to thomas tillinghast ( f ) . take the date successor seated record of this row . select the rows whose successor record fuzzily matches to robert waln ( f ) . take the date successor seated record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; successor ; thomas tillinghast ( f ) } ; date successor seated } ; hop { filter_eq { all_rows ; successor ; robert waln ( f ) } ; date successor seated } }, interpretation: select the rows whose opponent record fuzzily matches to indianapolis colts . the sum of the attendance record of these rows is 100807 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; indianapolis colts } ; attendance } ; 100807 }, interpretation: select the rows whose opponent record fuzzily matches to indianapolis colts . the sum of the attendance record of these rows is 100807 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; indianapolis colts } ; attendance } ; 100807 }, interpretation: select the rows whose game site record fuzzily matches to olympic stadium . there is only one such row in the table . the date record of this unqiue row is sunday , april 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; game site ; olympic stadium } } ; eq { hop { filter_eq { all_rows ; game site ; olympic stadium } ; date } ; sunday , april 4 } }, interpretation: select the rows whose game site record fuzzily matches to olympic stadium . there is only one such row in the table . the date record of this unqiue row is sunday , april 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; game site ; olympic stadium } } ; eq { hop { filter_eq { all_rows ; game site ; olympic stadium } ; date } ; sunday , april 4 } }, interpretation: select the rows whose school / club team record fuzzily matches to duke . there is only one such row in the table . the player record of this unqiue row is antonio lang .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; duke } } ; eq { hop { filter_eq { all_rows ; school / club team ; duke } ; player } ; antonio lang } }, interpretation: select the rows whose school / club team record fuzzily matches to duke . there is only one such row in the table . the player record of this unqiue row is antonio lang .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; duke } } ; eq { hop { filter_eq { all_rows ; school / club team ; duke } ; player } ; antonio lang } }, interpretation: select the rows whose position record fuzzily matches to 8th . there is only one such row in the table . the season record of this unqiue row is 1946 - 47 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; 8th } } ; eq { hop { filter_eq { all_rows ; position ; 8th } ; season } ; 1946 - 47 } }, interpretation: select the rows whose position record fuzzily matches to 8th . there is only one such row in the table . the season record of this unqiue row is 1946 - 47 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; 8th } } ; eq { hop { filter_eq { all_rows ; position ; 8th } ; season } ; 1946 - 47 } }, interpretation: the average of the attendance record of all rows is 48121 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 48121 }, interpretation: the average of the attendance record of all rows is 48121 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 48121 }, interpretation: select the rows whose date record fuzzily matches to may . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; date ; may } }, interpretation: select the rows whose date record fuzzily matches to may . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; date ; may } }, interpretation: select the rows whose city record fuzzily matches to barisal . take the country record of this row . select the rows whose city record fuzzily matches to chittagong . take the country record of this row . the first record fuzzily matches to the second record . the country record of the first row is bangladesh . the country record of the second row is bangladesh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; city ; barisal } ; country } ; hop { filter_eq { all_rows ; city ; chittagong } ; country } } ; and { eq { hop { filter_eq { all_rows ; city ; barisal } ; country } ; bangladesh } ; eq { hop { filter_eq { all_rows ; city ; chittagong } ; country } ; bangladesh } } }, interpretation: select the rows whose city record fuzzily matches to barisal . take the country record of this row . select the rows whose city record fuzzily matches to chittagong . take the country record of this row . the first record fuzzily matches to the second record . the country record of the first row is bangladesh . the country record of the second row is bangladesh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; city ; barisal } ; country } ; hop { filter_eq { all_rows ; city ; chittagong } ; country } } ; and { eq { hop { filter_eq { all_rows ; city ; barisal } ; country } ; bangladesh } ; eq { hop { filter_eq { all_rows ; city ; chittagong } ; country } ; bangladesh } } }, interpretation: select the row whose born - died record of all rows is 2nd minimum . the name record of this row is sali berisha .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; born - died ; 2 } ; name } ; sali berisha }, interpretation: select the row whose born - died record of all rows is 2nd minimum . the name record of this row is sali berisha .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; born - died ; 2 } ; name } ; sali berisha }, interpretation: select the rows whose episode count record is greater than 80 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; episode count ; 80 } } ; 3 }, interpretation: select the rows whose episode count record is greater than 80 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; episode count ; 80 } } ; 3 }, interpretation: select the rows whose directed by record fuzzily matches to jeremy podeswa . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; jeremy podeswa } } ; 2 }, interpretation: select the rows whose directed by record fuzzily matches to jeremy podeswa . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; jeremy podeswa } } ; 2 }, interpretation: for the date records of all rows , most of them fuzzily match to may .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; may }, interpretation: for the date records of all rows , most of them fuzzily match to may .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; may }, interpretation: select the rows whose kiplinger 's top 100 values record fuzzily matches to n / a . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; kiplinger 's top 100 values ; n / a } } ; 6 }, interpretation: select the rows whose kiplinger 's top 100 values record fuzzily matches to n / a . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; kiplinger 's top 100 values ; n / a } } ; 6 }, interpretation: select the row whose yards record of all rows is 2nd maximum . the season record of this row is 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; yards ; 2 } ; season } ; 2009 }, interpretation: select the row whose yards record of all rows is 2nd maximum . the season record of this row is 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; yards ; 2 } ; season } ; 2009 }, interpretation: select the rows whose incumbent record fuzzily matches to noah m mason . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to sid simpson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; noah m mason } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; sid simpson } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to noah m mason . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to sid simpson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; noah m mason } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; sid simpson } ; first elected } }, interpretation: select the rows whose team record fuzzily matches to usa . the sum of the final record of these rows is 15:49.38 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; usa } ; final } ; 15:49.38 }, interpretation: select the rows whose team record fuzzily matches to usa . the sum of the final record of these rows is 15:49.38 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; usa } ; final } ; 15:49.38 }, interpretation: select the rows whose tournament record fuzzily matches to us open . take the cuts made record of this row . select the rows whose tournament record fuzzily matches to pga championship . take the cuts made record of this row . the first record is equal to the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; tournament ; us open } ; cuts made } ; hop { filter_eq { all_rows ; tournament ; pga championship } ; cuts made } }, interpretation: select the rows whose tournament record fuzzily matches to us open . take the cuts made record of this row . select the rows whose tournament record fuzzily matches to pga championship . take the cuts made record of this row . the first record is equal to the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; tournament ; us open } ; cuts made } ; hop { filter_eq { all_rows ; tournament ; pga championship } ; cuts made } }, interpretation: for the width records of all rows , all of them are equal to 96 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; width ; 96 }, interpretation: for the width records of all rows , all of them are equal to 96 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; width ; 96 }, interpretation: select the row whose votes record of all rows is maximum . the election record of this row is 1990 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; votes } ; election } ; 1990 }, interpretation: select the row whose votes record of all rows is maximum . the election record of this row is 1990 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; votes } ; election } ; 1990 }, interpretation: select the rows whose result record fuzzily matches to win . for the orangemen points records of these rows , most of them are greater than 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; result ; win } ; orangemen points ; 20 }, interpretation: select the rows whose result record fuzzily matches to win . for the orangemen points records of these rows , most of them are greater than 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; result ; win } ; orangemen points ; 20 }, interpretation: select the rows whose points defending record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; points defending ; 0 } } ; 3 }, interpretation: select the rows whose points defending record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; points defending ; 0 } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to lee hasdell . take the round record of this row . select the rows whose opponent record fuzzily matches to zabir elbiev . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; lee hasdell } ; round } ; hop { filter_eq { all_rows ; opponent ; zabir elbiev } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to lee hasdell . take the round record of this row . select the rows whose opponent record fuzzily matches to zabir elbiev . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; lee hasdell } ; round } ; hop { filter_eq { all_rows ; opponent ; zabir elbiev } ; round } }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is punt road oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; punt road oval }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is punt road oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; punt road oval }, interpretation: select the rows whose surface record fuzzily matches to grass . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; grass } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to grass . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; grass } } ; 2 }, interpretation: select the row whose gdp per capita ( us ) record of all rows is maximum . the member countries record of this row is austria .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gdp per capita ( us ) } ; member countries } ; austria }, interpretation: select the row whose gdp per capita ( us ) record of all rows is maximum . the member countries record of this row is austria .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gdp per capita ( us ) } ; member countries } ; austria }, interpretation: the average of the gold record of all rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 1 }, interpretation: the average of the gold record of all rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 1 }, interpretation: select the row whose win % record of all rows is 1st maximum . the opposition record of this row is pune warriors india .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win % ; 1 } ; opposition } ; pune warriors india }, interpretation: select the row whose win % record of all rows is 1st maximum . the opposition record of this row is pune warriors india .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win % ; 1 } ; opposition } ; pune warriors india }, interpretation: for the format records of all rows , most of them fuzzily match to cd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; cd }, interpretation: for the format records of all rows , most of them fuzzily match to cd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; cd }, interpretation: the average of the location attendance record of all rows is 14040 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; location attendance } ; 14040 }, interpretation: the average of the location attendance record of all rows is 14040 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; location attendance } ; 14040 }, interpretation: the average of the win % record of all rows is 505 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; win % } ; 505 }, interpretation: the average of the win % record of all rows is 505 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; win % } ; 505 }, interpretation: select the rows whose episodes record is less than 40 . there is only one such row in the table . the season no record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; episodes ; 40 } } ; eq { hop { filter_less { all_rows ; episodes ; 40 } ; season no } ; 1 } }, interpretation: select the rows whose episodes record is less than 40 . there is only one such row in the table . the season no record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; episodes ; 40 } } ; eq { hop { filter_less { all_rows ; episodes ; 40 } ; season no } ; 1 } }, interpretation: select the rows whose country of origin record fuzzily matches to united kingdom . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country of origin ; united kingdom } } ; 4 }, interpretation: select the rows whose country of origin record fuzzily matches to united kingdom . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country of origin ; united kingdom } } ; 4 }, interpretation: select the rows whose opponent record fuzzily matches to lens . select the row whose date record of these rows is 2nd minimum . the venue record of this row is h .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; lens } ; date ; 2 } ; venue } ; h }, interpretation: select the rows whose opponent record fuzzily matches to lens . select the row whose date record of these rows is 2nd minimum . the venue record of this row is h .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; lens } ; date ; 2 } ; venue } ; h }, interpretation: select the rows whose film title used in nomination record fuzzily matches to ten canoes . take the year ( ceremony ) record of this row . select the rows whose film title used in nomination record fuzzily matches to the home song stories . take the year ( ceremony ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; film title used in nomination ; ten canoes } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; film title used in nomination ; the home song stories } ; year ( ceremony ) } }, interpretation: select the rows whose film title used in nomination record fuzzily matches to ten canoes . take the year ( ceremony ) record of this row . select the rows whose film title used in nomination record fuzzily matches to the home song stories . take the year ( ceremony ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; film title used in nomination ; ten canoes } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; film title used in nomination ; the home song stories } ; year ( ceremony ) } }, interpretation: for the high points records of all rows , most of them fuzzily match to lebron james .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; lebron james }, interpretation: for the high points records of all rows , most of them fuzzily match to lebron james .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; lebron james }, interpretation: select the rows whose bubbles record does not match to yes . there is only one such row in the table . the type record of this unqiue row is domnoderemovedfromdocument .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; bubbles ; yes } } ; eq { hop { filter_not_eq { all_rows ; bubbles ; yes } ; type } ; domnoderemovedfromdocument } }, interpretation: select the rows whose bubbles record does not match to yes . there is only one such row in the table . the type record of this unqiue row is domnoderemovedfromdocument .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; bubbles ; yes } } ; eq { hop { filter_not_eq { all_rows ; bubbles ; yes } ; type } ; domnoderemovedfromdocument } }, interpretation: select the rows whose country record fuzzily matches to norway . among these rows , select the rows whose state record fuzzily matches to finnmark . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; norway } ; state ; finnmark } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to norway . among these rows , select the rows whose state record fuzzily matches to finnmark . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; norway } ; state ; finnmark } } ; 3 }, interpretation: select the rows whose to par record fuzzily matches to +5 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; +5 } } ; 4 }, interpretation: select the rows whose to par record fuzzily matches to +5 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; +5 } } ; 4 }, interpretation: select the rows whose points record is equal to 0 . there is only one such row in the table . the opponent record of this unqiue row is new jersey devils .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 0 } } ; eq { hop { filter_eq { all_rows ; points ; 0 } ; opponent } ; new jersey devils } }, interpretation: select the rows whose points record is equal to 0 . there is only one such row in the table . the opponent record of this unqiue row is new jersey devils .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 0 } } ; eq { hop { filter_eq { all_rows ; points ; 0 } ; opponent } ; new jersey devils } }, interpretation: select the row whose to par record of all rows is minimum . the player record of this row is bill rogers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; to par } ; player } ; bill rogers }, interpretation: select the row whose to par record of all rows is minimum . the player record of this row is bill rogers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; to par } ; player } ; bill rogers }, interpretation: select the row whose goals record of all rows is minimum . the player record of this row is mehmet y\u0131lmaz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; goals } ; player } ; mehmet y\u0131lmaz }, interpretation: select the row whose goals record of all rows is minimum . the player record of this row is mehmet y\u0131lmaz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; goals } ; player } ; mehmet y\u0131lmaz }, interpretation: select the rows whose competition record fuzzily matches to 2004 copa am\u00e9rica . there is only one such row in the table . the date record of this unqiue row is 14 july 2004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; 2004 copa am\u00e9rica } } ; eq { hop { filter_eq { all_rows ; competition ; 2004 copa am\u00e9rica } ; date } ; 14 july 2004 } }, interpretation: select the rows whose competition record fuzzily matches to 2004 copa am\u00e9rica . there is only one such row in the table . the date record of this unqiue row is 14 july 2004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; 2004 copa am\u00e9rica } } ; eq { hop { filter_eq { all_rows ; competition ; 2004 copa am\u00e9rica } ; date } ; 14 july 2004 } }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is moorabbin oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; moorabbin oval }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is moorabbin oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; moorabbin oval }, interpretation: for the affiliation records of all rows , most of them fuzzily match to private .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; affiliation ; private }, interpretation: for the affiliation records of all rows , most of them fuzzily match to private .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; affiliation ; private }, interpretation: select the rows whose result record is less than 20.3 . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; result ; 20.3 } } ; 7 }, interpretation: select the rows whose result record is less than 20.3 . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; result ; 20.3 } } ; 7 }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . there is only one such row in the table . the game record of this unqiue row is 36 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; chicago blackhawks } } ; eq { hop { filter_eq { all_rows ; opponent ; chicago blackhawks } ; game } ; 36 } }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . there is only one such row in the table . the game record of this unqiue row is 36 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; chicago blackhawks } } ; eq { hop { filter_eq { all_rows ; opponent ; chicago blackhawks } ; game } ; 36 } }, interpretation: for the country records of all rows , most of them fuzzily match to united kingdom .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united kingdom }, interpretation: for the country records of all rows , most of them fuzzily match to united kingdom .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united kingdom }, interpretation: the average of the bronze record of all rows is 1.7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; bronze } ; 1.7 }, interpretation: the average of the bronze record of all rows is 1.7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; bronze } ; 1.7 }, interpretation: select the row whose population ( 2013 ) record of all rows is 2nd maximum . the province record of this row is kwazulu - natal .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 2013 ) ; 2 } ; province } ; kwazulu - natal }, interpretation: select the row whose population ( 2013 ) record of all rows is 2nd maximum . the province record of this row is kwazulu - natal .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 2013 ) ; 2 } ; province } ; kwazulu - natal }, interpretation: for the laps records of all rows , most of them are equal to 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps ; 48 }, interpretation: for the laps records of all rows , most of them are equal to 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps ; 48 }, interpretation: select the row whose march record of all rows is 12th minimum . the score record of this row is 8 - 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; march ; 12 } ; score } ; 8 - 7 }, interpretation: select the row whose march record of all rows is 12th minimum . the score record of this row is 8 - 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; march ; 12 } ; score } ; 8 - 7 }, interpretation: select the rows whose director record fuzzily matches to hassard short . there is only one such row in the table . the date record of this unqiue row is june 3 , 1931 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; hassard short } } ; eq { hop { filter_eq { all_rows ; director ; hassard short } ; date } ; june 3 , 1931 } }, interpretation: select the rows whose director record fuzzily matches to hassard short . there is only one such row in the table . the date record of this unqiue row is june 3 , 1931 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; hassard short } } ; eq { hop { filter_eq { all_rows ; director ; hassard short } ; date } ; june 3 , 1931 } }, interpretation: select the rows whose shirt sponsor record fuzzily matches to mardan . there is only one such row in the table . the team record of this unqiue row is antalyaspor .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; shirt sponsor ; mardan } } ; eq { hop { filter_eq { all_rows ; shirt sponsor ; mardan } ; team } ; antalyaspor } }, interpretation: select the rows whose shirt sponsor record fuzzily matches to mardan . there is only one such row in the table . the team record of this unqiue row is antalyaspor .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; shirt sponsor ; mardan } } ; eq { hop { filter_eq { all_rows ; shirt sponsor ; mardan } ; team } ; antalyaspor } }, interpretation: the average of the assists record of all rows is 12.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; assists } ; 12.8 }, interpretation: the average of the assists record of all rows is 12.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; assists } ; 12.8 }, interpretation: select the rows whose date of vacancy record fuzzily matches to 21 december 2010 . there is only one such row in the table . the outgoing head coach record of this unqiue row is jorge costa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date of vacancy ; 21 december 2010 } } ; eq { hop { filter_eq { all_rows ; date of vacancy ; 21 december 2010 } ; outgoing head coach } ; jorge costa } }, interpretation: select the rows whose date of vacancy record fuzzily matches to 21 december 2010 . there is only one such row in the table . the outgoing head coach record of this unqiue row is jorge costa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date of vacancy ; 21 december 2010 } } ; eq { hop { filter_eq { all_rows ; date of vacancy ; 21 december 2010 } ; outgoing head coach } ; jorge costa } }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is may 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; may 22 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is may 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; may 22 }, interpretation: the average of the home team score record of all rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 10 }, interpretation: the average of the home team score record of all rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 10 }, interpretation: select the row whose us viewers ( million ) record of all rows is maximum . the title record of this row is exile on main st .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( million ) } ; title } ; exile on main st }, interpretation: select the row whose us viewers ( million ) record of all rows is maximum . the title record of this row is exile on main st .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( million ) } ; title } ; exile on main st }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: select the rows whose tournament record fuzzily matches to tunis , tunisia . take the date record of this row . select the rows whose tournament record fuzzily matches to rabat , morocco . take the date record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; tournament ; tunis , tunisia } ; date } ; hop { filter_eq { all_rows ; tournament ; rabat , morocco } ; date } } ; -7 days }, interpretation: select the rows whose tournament record fuzzily matches to tunis , tunisia . take the date record of this row . select the rows whose tournament record fuzzily matches to rabat , morocco . take the date record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; tournament ; tunis , tunisia } ; date } ; hop { filter_eq { all_rows ; tournament ; rabat , morocco } ; date } } ; -7 days }, interpretation: select the rows whose high assists record fuzzily matches to damon stoudamire . the sum of the high assists record of these rows is 95 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; high assists ; damon stoudamire } ; high assists } ; 95 }, interpretation: select the rows whose high assists record fuzzily matches to damon stoudamire . the sum of the high assists record of these rows is 95 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; high assists ; damon stoudamire } ; high assists } ; 95 }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: for the pixel aspect ratio records of all rows , most of them fuzzily match to 1:1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; pixel aspect ratio ; 1:1 }, interpretation: for the pixel aspect ratio records of all rows , most of them fuzzily match to 1:1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; pixel aspect ratio ; 1:1 }, interpretation: for the win % records of all rows , most of them are greater than 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; win % ; 0 }, interpretation: for the win % records of all rows , most of them are greater than 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; win % ; 0 }, interpretation: the average of the quantity made record of all rows is 3.83 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; quantity made } ; 3.83 }, interpretation: the average of the quantity made record of all rows is 3.83 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; quantity made } ; 3.83 }, interpretation: select the rows whose country record fuzzily matches to brazil . there is only one such row in the table . the player record of this unqiue row is angela park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; brazil } } ; eq { hop { filter_eq { all_rows ; country ; brazil } ; player } ; angela park } }, interpretation: select the rows whose country record fuzzily matches to brazil . there is only one such row in the table . the player record of this unqiue row is angela park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; brazil } } ; eq { hop { filter_eq { all_rows ; country ; brazil } ; player } ; angela park } }, interpretation: the 2nd minimum year record of all rows is 1979 . the issued title record of the row with 2nd minimum year record is 1958 miles .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 2 } ; 1979 } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; issued title } ; 1958 miles } }, interpretation: the 2nd minimum year record of all rows is 1979 . the issued title record of the row with 2nd minimum year record is 1958 miles .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 2 } ; 1979 } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; issued title } ; 1958 miles } }, interpretation: select the row whose total dismissals record of all rows is maximum . the no record of this row is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total dismissals } ; no } ; 13 }, interpretation: select the row whose total dismissals record of all rows is maximum . the no record of this row is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total dismissals } ; no } ; 13 }, interpretation: the average of the attendance record of all rows is 58746 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 58746 }, interpretation: the average of the attendance record of all rows is 58746 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 58746 }, interpretation: select the rows whose notes record fuzzily matches to not published in book form . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; notes ; not published in book form } } ; 9 }, interpretation: select the rows whose notes record fuzzily matches to not published in book form . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; notes ; not published in book form } } ; 9 }, interpretation: select the rows whose champions record fuzzily matches to laura montalvo . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champions ; laura montalvo } } ; 3 }, interpretation: select the rows whose champions record fuzzily matches to laura montalvo . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champions ; laura montalvo } } ; 3 }, interpretation: for the obama % records of all rows , most of them are greater than 50.0 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; obama % ; 50.0 % }, interpretation: for the obama % records of all rows , most of them are greater than 50.0 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; obama % ; 50.0 % }, interpretation: select the rows whose winning team record fuzzily matches to houston . there is only one such row in the table . the date record of this unqiue row is june 24 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winning team ; houston } } ; eq { hop { filter_eq { all_rows ; winning team ; houston } ; date } ; june 24 } }, interpretation: select the rows whose winning team record fuzzily matches to houston . there is only one such row in the table . the date record of this unqiue row is june 24 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winning team ; houston } } ; eq { hop { filter_eq { all_rows ; winning team ; houston } ; date } ; june 24 } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose total record is greater than or equal to 300 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_eq { all_rows ; country ; united states } ; total ; 300 } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose total record is greater than or equal to 300 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_eq { all_rows ; country ; united states } ; total ; 300 } } ; 3 }, interpretation: select the rows whose manufacturer record fuzzily matches to alco - schenectady . the minimum year made record of these rows is 1904 - 1907 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; manufacturer ; alco - schenectady } ; year made } ; 1904 - 1907 }, interpretation: select the rows whose manufacturer record fuzzily matches to alco - schenectady . the minimum year made record of these rows is 1904 - 1907 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; manufacturer ; alco - schenectady } ; year made } ; 1904 - 1907 }, interpretation: select the rows whose publisher record fuzzily matches to bethesda softworks . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; publisher ; bethesda softworks } } ; 2 }, interpretation: select the rows whose publisher record fuzzily matches to bethesda softworks . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; publisher ; bethesda softworks } } ; 2 }, interpretation: select the row whose points record of all rows is 2nd maximum . the player record of this row is andy kaufmann .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; player } ; andy kaufmann }, interpretation: select the row whose points record of all rows is 2nd maximum . the player record of this row is andy kaufmann .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; player } ; andy kaufmann }, interpretation: select the row whose sites record of all rows is 2nd maximum . the circuit record of this row is amc entertainment inc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; sites ; 2 } ; circuit } ; amc entertainment inc }, interpretation: select the row whose sites record of all rows is 2nd maximum . the circuit record of this row is amc entertainment inc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; sites ; 2 } ; circuit } ; amc entertainment inc }, interpretation: select the row whose year record of all rows is 2nd maximum . the year record of this row is 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; year } ; 2012 }, interpretation: select the row whose year record of all rows is 2nd maximum . the year record of this row is 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; year } ; 2012 }, interpretation: select the rows whose object type record fuzzily matches to irregular galaxy . there is only one such row in the table . the ngc number record of this unqiue row is 6240 . the constellation record of this unqiue row is ophiuchus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; object type ; irregular galaxy } } ; and { eq { hop { filter_eq { all_rows ; object type ; irregular galaxy } ; ngc number } ; 6240 } ; eq { hop { filter_eq { all_rows ; object type ; irregular galaxy } ; constellation } ; ophiuchus } } }, interpretation: select the rows whose object type record fuzzily matches to irregular galaxy . there is only one such row in the table . the ngc number record of this unqiue row is 6240 . the constellation record of this unqiue row is ophiuchus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; object type ; irregular galaxy } } ; and { eq { hop { filter_eq { all_rows ; object type ; irregular galaxy } ; ngc number } ; 6240 } ; eq { hop { filter_eq { all_rows ; object type ; irregular galaxy } ; constellation } ; ophiuchus } } }, interpretation: select the rows whose state record fuzzily matches to oregon . select the row whose year record of these rows is 2nd minimum . the result record of this row is resigned .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; state ; oregon } ; year ; 2 } ; result } ; resigned }, interpretation: select the rows whose state record fuzzily matches to oregon . select the row whose year record of these rows is 2nd minimum . the result record of this row is resigned .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; state ; oregon } ; year ; 2 } ; result } ; resigned }, interpretation: select the rows whose club record fuzzily matches to sussex . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; club ; sussex } } ; 3 }, interpretation: select the rows whose club record fuzzily matches to sussex . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; club ; sussex } } ; 3 }, interpretation: select the rows whose score record fuzzily matches to 3 - 0 . take the competition record of this row . select the rows whose score record fuzzily matches to 3 - 2 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is friendly . the competition record of the second row is friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; score ; 3 - 0 } ; competition } ; hop { filter_eq { all_rows ; score ; 3 - 2 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; score ; 3 - 0 } ; competition } ; friendly } ; eq { hop { filter_eq { all_rows ; score ; 3 - 2 } ; competition } ; friendly } } }, interpretation: select the rows whose score record fuzzily matches to 3 - 0 . take the competition record of this row . select the rows whose score record fuzzily matches to 3 - 2 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is friendly . the competition record of the second row is friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; score ; 3 - 0 } ; competition } ; hop { filter_eq { all_rows ; score ; 3 - 2 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; score ; 3 - 0 } ; competition } ; friendly } ; eq { hop { filter_eq { all_rows ; score ; 3 - 2 } ; competition } ; friendly } } }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: select the rows whose year record is equal to 1984 . the sum of the points record of these rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1984 } ; points } ; 2 }, interpretation: select the rows whose year record is equal to 1984 . the sum of the points record of these rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1984 } ; points } ; 2 }, interpretation: select the row whose episode record of all rows is 2nd maximum . the segment b record of this row is compact track loaders .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; episode ; 2 } ; segment b } ; compact track loaders }, interpretation: select the row whose episode record of all rows is 2nd maximum . the segment b record of this row is compact track loaders .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; episode ; 2 } ; segment b } ; compact track loaders }, interpretation: select the rows whose competition record fuzzily matches to world championships . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; world championships } } ; 3 }, interpretation: select the rows whose competition record fuzzily matches to world championships . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; world championships } } ; 3 }, interpretation: select the row whose new membership total record of all rows is maximum . the conference record of this row is hockey east ( men ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; new membership total } ; conference } ; hockey east ( men ) }, interpretation: select the row whose new membership total record of all rows is maximum . the conference record of this row is hockey east ( men ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; new membership total } ; conference } ; hockey east ( men ) }, interpretation: select the rows whose bronze record is equal to 8 . there is only one such row in the table . the rank record of this unqiue row is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bronze ; 8 } } ; eq { hop { filter_eq { all_rows ; bronze ; 8 } ; rank } ; 3 } }, interpretation: select the rows whose bronze record is equal to 8 . there is only one such row in the table . the rank record of this unqiue row is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bronze ; 8 } } ; eq { hop { filter_eq { all_rows ; bronze ; 8 } ; rank } ; 3 } }, interpretation: for the transfer fee ( millions ) records of all rows , most of them are greater than 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; transfer fee ( millions ) ; 26 }, interpretation: for the transfer fee ( millions ) records of all rows , most of them are greater than 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; transfer fee ( millions ) ; 26 }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: select the row whose county team record of all rows is 2nd minimum . the player record of this row is mick mackey .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; county team ; 2 } ; player } ; mick mackey }, interpretation: select the row whose county team record of all rows is 2nd minimum . the player record of this row is mick mackey .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; county team ; 2 } ; player } ; mick mackey }, interpretation: select the rows whose theatre record fuzzily matches to royale theatre . there is only one such row in the table . the role record of this unqiue row is geoffrey fitton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; theatre ; royale theatre } } ; eq { hop { filter_eq { all_rows ; theatre ; royale theatre } ; role } ; geoffrey fitton } }, interpretation: select the rows whose theatre record fuzzily matches to royale theatre . there is only one such row in the table . the role record of this unqiue row is geoffrey fitton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; theatre ; royale theatre } } ; eq { hop { filter_eq { all_rows ; theatre ; royale theatre } ; role } ; geoffrey fitton } }, interpretation: select the rows whose event record fuzzily matches to ept barcelona open . take the date record of this row . select the rows whose event record fuzzily matches to 2008 european poker championships . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; event ; ept barcelona open } ; date } ; hop { filter_eq { all_rows ; event ; 2008 european poker championships } ; date } }, interpretation: select the rows whose event record fuzzily matches to ept barcelona open . take the date record of this row . select the rows whose event record fuzzily matches to 2008 european poker championships . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; event ; ept barcelona open } ; date } ; hop { filter_eq { all_rows ; event ; 2008 european poker championships } ; date } }, interpretation: the sum of the 1st prize record of all rows is 241700 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; 1st prize } ; 241700 }, interpretation: the sum of the 1st prize record of all rows is 241700 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; 1st prize } ; 241700 }, interpretation: select the rows whose date successor seated record fuzzily matches to may . select the row whose date successor seated record of these rows is 1st minimum . the district record of this row is california 10th .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; date successor seated ; may } ; date successor seated ; 1 } ; district } ; california 10th }, interpretation: select the rows whose date successor seated record fuzzily matches to may . select the row whose date successor seated record of these rows is 1st minimum . the district record of this row is california 10th .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; date successor seated ; may } ; date successor seated ; 1 } ; district } ; california 10th }, interpretation: select the rows whose score record fuzzily matches to w . among these rows , select the rows whose high assists record fuzzily matches to g payton . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; w } ; high assists ; g payton } } ; 3 }, interpretation: select the rows whose score record fuzzily matches to w . among these rows , select the rows whose high assists record fuzzily matches to g payton . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; w } ; high assists ; g payton } } ; 3 }, interpretation: select the rows whose station record fuzzily matches to great notch . take the closed record of this row . select the rows whose station record fuzzily matches to finderne . take the closed record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; station ; great notch } ; closed } ; hop { filter_eq { all_rows ; station ; finderne } ; closed } }, interpretation: select the rows whose station record fuzzily matches to great notch . take the closed record of this row . select the rows whose station record fuzzily matches to finderne . take the closed record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; station ; great notch } ; closed } ; hop { filter_eq { all_rows ; station ; finderne } ; closed } }, interpretation: select the row whose losses record of all rows is 2nd maximum . the club record of this row is castilla cf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; losses ; 2 } ; club } ; castilla cf }, interpretation: select the row whose losses record of all rows is 2nd maximum . the club record of this row is castilla cf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; losses ; 2 } ; club } ; castilla cf }, interpretation: select the rows whose time / retired record fuzzily matches to off course . there is only one such row in the table . the driver record of this unqiue row is gast\u00f3n mazzacane .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; off course } } ; eq { hop { filter_eq { all_rows ; time / retired ; off course } ; driver } ; gast\u00f3n mazzacane } }, interpretation: select the rows whose time / retired record fuzzily matches to off course . there is only one such row in the table . the driver record of this unqiue row is gast\u00f3n mazzacane .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; off course } } ; eq { hop { filter_eq { all_rows ; time / retired ; off course } ; driver } ; gast\u00f3n mazzacane } }, interpretation: select the rows whose rider record fuzzily matches to stan woods . take the time record of this row . select the rows whose rider record fuzzily matches to tom loughridge . take the time record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; rider ; stan woods } ; time } ; hop { filter_eq { all_rows ; rider ; tom loughridge } ; time } }, interpretation: select the rows whose rider record fuzzily matches to stan woods . take the time record of this row . select the rows whose rider record fuzzily matches to tom loughridge . take the time record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; rider ; stan woods } ; time } ; hop { filter_eq { all_rows ; rider ; tom loughridge } ; time } }, interpretation: select the rows whose record record fuzzily matches to postponed ( rain ) . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; record ; postponed ( rain ) } } ; 2 }, interpretation: select the rows whose record record fuzzily matches to postponed ( rain ) . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; record ; postponed ( rain ) } } ; 2 }, interpretation: select the rows whose technology record fuzzily matches to rmi . the maximum date record of these rows is september 16 , 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; technology ; rmi } ; date } ; september 16 , 2009 }, interpretation: select the rows whose technology record fuzzily matches to rmi . the maximum date record of these rows is september 16 , 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; technology ; rmi } ; date } ; september 16 , 2009 }, interpretation: select the rows whose apps record is equal to 12 . there is only one such row in the table . the season record of this unqiue row is 2004 - 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; apps ; 12 } } ; eq { hop { filter_eq { all_rows ; apps ; 12 } ; season } ; 2004 - 2005 } }, interpretation: select the rows whose apps record is equal to 12 . there is only one such row in the table . the season record of this unqiue row is 2004 - 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; apps ; 12 } } ; eq { hop { filter_eq { all_rows ; apps ; 12 } ; season } ; 2004 - 2005 } }, interpretation: select the rows whose player record fuzzily matches to ( can ) . the sum of the goals record of these rows is 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; player ; ( can ) } ; goals } ; 26 }, interpretation: select the rows whose player record fuzzily matches to ( can ) . the sum of the goals record of these rows is 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; player ; ( can ) } ; goals } ; 26 }, interpretation: select the row whose matches record of all rows is 2nd maximum . the name record of this row is glenn mcgrath .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; matches ; 2 } ; name } ; glenn mcgrath }, interpretation: select the row whose matches record of all rows is 2nd maximum . the name record of this row is glenn mcgrath .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; matches ; 2 } ; name } ; glenn mcgrath }, interpretation: select the rows whose name of county record fuzzily matches to veszpr\u00e9m . take the area ( km square ) record of this row . select the rows whose name of county record fuzzily matches to tolna . take the area ( km square ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name of county ; veszpr\u00e9m } ; area ( km square ) } ; hop { filter_eq { all_rows ; name of county ; tolna } ; area ( km square ) } }, interpretation: select the rows whose name of county record fuzzily matches to veszpr\u00e9m . take the area ( km square ) record of this row . select the rows whose name of county record fuzzily matches to tolna . take the area ( km square ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name of county ; veszpr\u00e9m } ; area ( km square ) } ; hop { filter_eq { all_rows ; name of county ; tolna } ; area ( km square ) } }, interpretation: select the rows whose venue record fuzzily matches to windy hill . take the crowd record of this row . select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; windy hill } ; crowd } ; hop { filter_eq { all_rows ; venue ; princes park } ; crowd } }, interpretation: select the rows whose venue record fuzzily matches to windy hill . take the crowd record of this row . select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; windy hill } ; crowd } ; hop { filter_eq { all_rows ; venue ; princes park } ; crowd } }, interpretation: select the row whose result record of all rows is maximum . the opponent record of this row is st louis rams .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; opponent } ; st louis rams }, interpretation: select the row whose result record of all rows is maximum . the opponent record of this row is st louis rams .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; opponent } ; st louis rams }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is victoria park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; victoria park }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is victoria park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; victoria park }, interpretation: select the rows whose builder record fuzzily matches to north british . take the date record of this row . select the rows whose builder record fuzzily matches to g & swr kilmarnock . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; builder ; north british } ; date } ; hop { filter_eq { all_rows ; builder ; g & swr kilmarnock } ; date } }, interpretation: select the rows whose builder record fuzzily matches to north british . take the date record of this row . select the rows whose builder record fuzzily matches to g & swr kilmarnock . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; builder ; north british } ; date } ; hop { filter_eq { all_rows ; builder ; g & swr kilmarnock } ; date } }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: select the rows whose movie record fuzzily matches to agneepath . take the lifetime india distributor share record of this row . select the rows whose movie record fuzzily matches to dabangg 2 . take the lifetime india distributor share record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; movie ; agneepath } ; lifetime india distributor share } ; hop { filter_eq { all_rows ; movie ; dabangg 2 } ; lifetime india distributor share } }, interpretation: select the rows whose movie record fuzzily matches to agneepath . take the lifetime india distributor share record of this row . select the rows whose movie record fuzzily matches to dabangg 2 . take the lifetime india distributor share record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; movie ; agneepath } ; lifetime india distributor share } ; hop { filter_eq { all_rows ; movie ; dabangg 2 } ; lifetime india distributor share } }, interpretation: select the rows whose score record is equal to 69 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 69 } } ; 6 }, interpretation: select the rows whose score record is equal to 69 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 69 } } ; 6 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 10 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 10 }, interpretation: select the row whose time record of all rows is 2nd minimum . the athletes record of this row is mathieu goubel .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 2 } ; athletes } ; mathieu goubel }, interpretation: select the row whose time record of all rows is 2nd minimum . the athletes record of this row is mathieu goubel .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 2 } ; athletes } ; mathieu goubel }, interpretation: select the rows whose opponent record fuzzily matches to yukiya naito . take the round record of this row . select the rows whose opponent record fuzzily matches to maxim tarasov . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; yukiya naito } ; round } ; hop { filter_eq { all_rows ; opponent ; maxim tarasov } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to yukiya naito . take the round record of this row . select the rows whose opponent record fuzzily matches to maxim tarasov . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; yukiya naito } ; round } ; hop { filter_eq { all_rows ; opponent ; maxim tarasov } ; round } }, interpretation: select the rows whose date record fuzzily matches to 7 march 2008 . take the attendance record of this row . select the rows whose date record fuzzily matches to 8 march 2008 . take the attendance record of this row . the first record is less than the second record . the attendance record of the first row is 17225 . the attendance record of the second row is 18279 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; date ; 7 march 2008 } ; attendance } ; hop { filter_eq { all_rows ; date ; 8 march 2008 } ; attendance } } ; and { eq { hop { filter_eq { all_rows ; date ; 7 march 2008 } ; attendance } ; 17225 } ; eq { hop { filter_eq { all_rows ; date ; 8 march 2008 } ; attendance } ; 18279 } } }, interpretation: select the rows whose date record fuzzily matches to 7 march 2008 . take the attendance record of this row . select the rows whose date record fuzzily matches to 8 march 2008 . take the attendance record of this row . the first record is less than the second record . the attendance record of the first row is 17225 . the attendance record of the second row is 18279 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; date ; 7 march 2008 } ; attendance } ; hop { filter_eq { all_rows ; date ; 8 march 2008 } ; attendance } } ; and { eq { hop { filter_eq { all_rows ; date ; 7 march 2008 } ; attendance } ; 17225 } ; eq { hop { filter_eq { all_rows ; date ; 8 march 2008 } ; attendance } ; 18279 } } }, interpretation: select the rows whose date record fuzzily matches to december . among these rows , select the rows whose result record fuzzily matches to l . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; december } ; result ; l } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to december . among these rows , select the rows whose result record fuzzily matches to l . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; december } ; result ; l } } ; 2 }, interpretation: select the rows whose original channel record fuzzily matches to bbc one . there is only one such row in the table . the programme record of this unqiue row is superstars .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original channel ; bbc one } } ; eq { hop { filter_eq { all_rows ; original channel ; bbc one } ; programme } ; superstars } }, interpretation: select the rows whose original channel record fuzzily matches to bbc one . there is only one such row in the table . the programme record of this unqiue row is superstars .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original channel ; bbc one } } ; eq { hop { filter_eq { all_rows ; original channel ; bbc one } ; programme } ; superstars } }, interpretation: select the row whose original air date record of all rows is 2nd maximum . the production code record of this row is 407 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 2 } ; production code } ; 407 }, interpretation: select the row whose original air date record of all rows is 2nd maximum . the production code record of this row is 407 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 2 } ; production code } ; 407 }, interpretation: the average of the time record of all rows is 3:29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 3:29 }, interpretation: the average of the time record of all rows is 3:29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 3:29 }, interpretation: select the row whose round record of all rows is 3rd minimum . the player record of this row is glen irwin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; round ; 3 } ; player } ; glen irwin }, interpretation: select the row whose round record of all rows is 3rd minimum . the player record of this row is glen irwin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; round ; 3 } ; player } ; glen irwin }, interpretation: the average of the tournaments played record of all rows is 16.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; tournaments played } ; 16.1 }, interpretation: the average of the tournaments played record of all rows is 16.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; tournaments played } ; 16.1 }, interpretation: for the sport records of all rows , all of them fuzzily match to football .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; sport ; football }, interpretation: for the sport records of all rows , all of them fuzzily match to football .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; sport ; football }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the platform ( s ) records of all rows , most of them fuzzily match to windows .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ( s ) ; windows }, interpretation: for the platform ( s ) records of all rows , most of them fuzzily match to windows .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ( s ) ; windows }, interpretation: select the rows whose gold record fuzzily matches to wu yanan . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; wu yanan } } ; 2 }, interpretation: select the rows whose gold record fuzzily matches to wu yanan . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; wu yanan } } ; 2 }, interpretation: select the rows whose classification record fuzzily matches to absurdism . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; classification ; absurdism } } ; 2 }, interpretation: select the rows whose classification record fuzzily matches to absurdism . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; classification ; absurdism } } ; 2 }, interpretation: select the row whose population record of all rows is maximum . the official name record of this row is quispamsis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; official name } ; quispamsis }, interpretation: select the row whose population record of all rows is maximum . the official name record of this row is quispamsis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; official name } ; quispamsis }, interpretation: for the capacity records of all rows , most of them are less than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; capacity ; 10000 }, interpretation: for the capacity records of all rows , most of them are less than 10000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; capacity ; 10000 }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose party record fuzzily matches to republican . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; party ; republican } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose party record fuzzily matches to republican . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; party ; republican } } ; 2 }, interpretation: for the date records of all rows , all of them fuzzily match to 23 july .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 23 july }, interpretation: for the date records of all rows , all of them fuzzily match to 23 july .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 23 july }, interpretation: the sum of the won record of all rows is 128 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; won } ; 128 }, interpretation: the sum of the won record of all rows is 128 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; won } ; 128 }, interpretation: select the row whose 1st ship delivery date record of all rows is 2nd maximum . the yard name record of this row is pendleton shipyards corp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; 1st ship delivery date ; 2 } ; yard name } ; pendleton shipyards corp }, interpretation: select the row whose 1st ship delivery date record of all rows is 2nd maximum . the yard name record of this row is pendleton shipyards corp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; 1st ship delivery date ; 2 } ; yard name } ; pendleton shipyards corp }, interpretation: select the rows whose lost record is greater than or equal to 10 . select the row whose goals against record of these rows is maximum . the team record of this row is rossendale united . the won record of this row is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { filter_greater_eq { all_rows ; lost ; 10 } ; goals against } ; team } ; rossendale united } ; eq { hop { argmax { filter_greater_eq { all_rows ; lost ; 10 } ; goals against } ; won } ; 10 } }, interpretation: select the rows whose lost record is greater than or equal to 10 . select the row whose goals against record of these rows is maximum . the team record of this row is rossendale united . the won record of this row is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { filter_greater_eq { all_rows ; lost ; 10 } ; goals against } ; team } ; rossendale united } ; eq { hop { argmax { filter_greater_eq { all_rows ; lost ; 10 } ; goals against } ; won } ; 10 } }, interpretation: select the row whose 2005 record of all rows is maximum . the tournament record of this row is year end ranking .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2005 } ; tournament } ; year end ranking }, interpretation: select the row whose 2005 record of all rows is maximum . the tournament record of this row is year end ranking .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2005 } ; tournament } ; year end ranking }, interpretation: select the rows whose largest ethnic group ( 2002 ) record fuzzily matches to slovaks . there is only one such row in the table . the settlement record of this unqiue row is pivnice .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; largest ethnic group ( 2002 ) ; slovaks } } ; eq { hop { filter_eq { all_rows ; largest ethnic group ( 2002 ) ; slovaks } ; settlement } ; pivnice } }, interpretation: select the rows whose largest ethnic group ( 2002 ) record fuzzily matches to slovaks . there is only one such row in the table . the settlement record of this unqiue row is pivnice .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; largest ethnic group ( 2002 ) ; slovaks } } ; eq { hop { filter_eq { all_rows ; largest ethnic group ( 2002 ) ; slovaks } ; settlement } ; pivnice } }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is england .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; england }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is england .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; england }, interpretation: select the rows whose home team record fuzzily matches to geelong . take the home team score record of this row . select the rows whose home team record fuzzily matches to richmond . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; geelong } ; home team score } ; hop { filter_eq { all_rows ; home team ; richmond } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to geelong . take the home team score record of this row . select the rows whose home team record fuzzily matches to richmond . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; geelong } ; home team score } ; hop { filter_eq { all_rows ; home team ; richmond } ; home team score } }, interpretation: select the rows whose date record fuzzily matches to 6 june 2010 ( round 13 ) . take the total record of this row . select the rows whose date record fuzzily matches to 5 april 2008 ( round 4 ) . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 6 june 2010 ( round 13 ) } ; total } ; hop { filter_eq { all_rows ; date ; 5 april 2008 ( round 4 ) } ; total } }, interpretation: select the rows whose date record fuzzily matches to 6 june 2010 ( round 13 ) . take the total record of this row . select the rows whose date record fuzzily matches to 5 april 2008 ( round 4 ) . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 6 june 2010 ( round 13 ) } ; total } ; hop { filter_eq { all_rows ; date ; 5 april 2008 ( round 4 ) } ; total } }, interpretation: select the rows whose nationality record fuzzily matches to aut . there is only one such row in the table . the name record of this unqiue row is gregor schlierenzauer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; aut } } ; eq { hop { filter_eq { all_rows ; nationality ; aut } ; name } ; gregor schlierenzauer } }, interpretation: select the rows whose nationality record fuzzily matches to aut . there is only one such row in the table . the name record of this unqiue row is gregor schlierenzauer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; aut } } ; eq { hop { filter_eq { all_rows ; nationality ; aut } ; name } ; gregor schlierenzauer } }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is libertad .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; libertad }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is libertad .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; libertad }, interpretation: select the row whose us viewers ( in millions ) record of all rows is maximum . the title record of this row is rebel without a pause .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; title } ; rebel without a pause }, interpretation: select the row whose us viewers ( in millions ) record of all rows is maximum . the title record of this row is rebel without a pause .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; title } ; rebel without a pause }, interpretation: select the rows whose actor required record fuzzily matches to female , older . there is only one such row in the table . the actor in original production record of this unqiue row is beth tuckley .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; actor required ; female , older } } ; eq { hop { filter_eq { all_rows ; actor required ; female , older } ; actor in original production } ; beth tuckley } }, interpretation: select the rows whose actor required record fuzzily matches to female , older . there is only one such row in the table . the actor in original production record of this unqiue row is beth tuckley .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; actor required ; female , older } } ; eq { hop { filter_eq { all_rows ; actor required ; female , older } ; actor in original production } ; beth tuckley } }, interpretation: for the length records of all rows , most of them are less than 5:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; length ; 5:00 }, interpretation: for the length records of all rows , most of them are less than 5:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; length ; 5:00 }, interpretation: select the rows whose episode record fuzzily matches to episode 4 . take the viewers ( millions ) record of this row . select the rows whose episode record fuzzily matches to episode 2 . take the viewers ( millions ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; episode ; episode 4 } ; viewers ( millions ) } ; hop { filter_eq { all_rows ; episode ; episode 2 } ; viewers ( millions ) } }, interpretation: select the rows whose episode record fuzzily matches to episode 4 . take the viewers ( millions ) record of this row . select the rows whose episode record fuzzily matches to episode 2 . take the viewers ( millions ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; episode ; episode 4 } ; viewers ( millions ) } ; hop { filter_eq { all_rows ; episode ; episode 2 } ; viewers ( millions ) } }, interpretation: the average of the attendance record of all rows is 50000-53000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 50000-53000 }, interpretation: the average of the attendance record of all rows is 50000-53000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 50000-53000 }, interpretation: select the rows whose week record fuzzily matches to top 24 ( 12 women ) . take the order record of this row . select the rows whose week record fuzzily matches to top 20 ( 10 women ) . take the order record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; week ; top 24 ( 12 women ) } ; order } ; hop { filter_eq { all_rows ; week ; top 20 ( 10 women ) } ; order } }, interpretation: select the rows whose week record fuzzily matches to top 24 ( 12 women ) . take the order record of this row . select the rows whose week record fuzzily matches to top 20 ( 10 women ) . take the order record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; week ; top 24 ( 12 women ) } ; order } ; hop { filter_eq { all_rows ; week ; top 20 ( 10 women ) } ; order } }, interpretation: select the rows whose series record is arbitrary . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; series } } ; 7 }, interpretation: select the rows whose series record is arbitrary . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; series } } ; 7 }, interpretation: the sum of the total number of students record of all rows is 123950 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total number of students } ; 123950 }, interpretation: the sum of the total number of students record of all rows is 123950 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total number of students } ; 123950 }, interpretation: select the rows whose year completed record is less than 2000 . among these rows , select the rows whose floors ( stories ) record is equal to 12 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; year completed ; 2000 } ; floors ( stories ) ; 12 } } ; 2 }, interpretation: select the rows whose year completed record is less than 2000 . among these rows , select the rows whose floors ( stories ) record is equal to 12 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; year completed ; 2000 } ; floors ( stories ) ; 12 } } ; 2 }, interpretation: select the rows whose label record fuzzily matches to epic . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; label ; epic } } ; 6 }, interpretation: select the rows whose label record fuzzily matches to epic . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; label ; epic } } ; 6 }, interpretation: for the crowd records of all rows , most of them are greater than 15000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 15000 }, interpretation: for the crowd records of all rows , most of them are greater than 15000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 15000 }, interpretation: select the rows whose country record fuzzily matches to madagascar . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; madagascar } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to madagascar . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; madagascar } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to 2004 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 2004 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 2004 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 2004 } } ; 2 }, interpretation: select the rows whose call letters record fuzzily matches to kfro . take the frequency ( khz ) record of this row . select the rows whose call letters record fuzzily matches to keel . take the frequency ( khz ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; call letters ; kfro } ; frequency ( khz ) } ; hop { filter_eq { all_rows ; call letters ; keel } ; frequency ( khz ) } }, interpretation: select the rows whose call letters record fuzzily matches to kfro . take the frequency ( khz ) record of this row . select the rows whose call letters record fuzzily matches to keel . take the frequency ( khz ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; call letters ; kfro } ; frequency ( khz ) } ; hop { filter_eq { all_rows ; call letters ; keel } ; frequency ( khz ) } }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is mcg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; mcg }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is mcg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; mcg }, interpretation: select the rows whose region 2 record fuzzily matches to 2004 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; region 2 ; 2004 } } ; 3 }, interpretation: select the rows whose region 2 record fuzzily matches to 2004 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; region 2 ; 2004 } } ; 3 }, interpretation: for the preliminary average records of all rows , most of them are less than 9.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; preliminary average ; 9.0 }, interpretation: for the preliminary average records of all rows , most of them are less than 9.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; preliminary average ; 9.0 }, interpretation: the average of the time record of all rows is 5.603 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 5.603 }, interpretation: the average of the time record of all rows is 5.603 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 5.603 }, interpretation: select the rows whose high rebounds record fuzzily matches to udonis haslem . among these rows , select the rows whose high assists record fuzzily matches to dwyane wade . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; high rebounds ; udonis haslem } ; high assists ; dwyane wade } } ; 3 }, interpretation: select the rows whose high rebounds record fuzzily matches to udonis haslem . among these rows , select the rows whose high assists record fuzzily matches to dwyane wade . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; high rebounds ; udonis haslem } ; high assists ; dwyane wade } } ; 3 }, interpretation: for the date records of all rows , all of them fuzzily match to 25 august 1979 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 25 august 1979 }, interpretation: for the date records of all rows , all of them fuzzily match to 25 august 1979 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 25 august 1979 }, interpretation: select the rows whose points record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; points ; 0 } } ; 3 }, interpretation: select the rows whose points record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; points ; 0 } } ; 3 }, interpretation: select the rows whose team 2 record fuzzily matches to barcelona . take the agg record of this row . select the rows whose team 2 record fuzzily matches to manchester united . take the agg record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 2 ; barcelona } ; agg } ; hop { filter_eq { all_rows ; team 2 ; manchester united } ; agg } }, interpretation: select the rows whose team 2 record fuzzily matches to barcelona . take the agg record of this row . select the rows whose team 2 record fuzzily matches to manchester united . take the agg record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 2 ; barcelona } ; agg } ; hop { filter_eq { all_rows ; team 2 ; manchester united } ; agg } }, interpretation: select the rows whose points record is greater than 10 . among these rows , select the rows whose drawn record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; points ; 10 } ; drawn ; 2 } } ; 2 }, interpretation: select the rows whose points record is greater than 10 . among these rows , select the rows whose drawn record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; points ; 10 } ; drawn ; 2 } } ; 2 }, interpretation: select the row whose away record of all rows is maximum . the season record of this row is 2001 - 02 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; away } ; season } ; 2001 - 02 }, interpretation: select the row whose away record of all rows is maximum . the season record of this row is 2001 - 02 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; away } ; season } ; 2001 - 02 }, interpretation: select the rows whose laps record is less than 7 . there is only one such row in the table . the year record of this unqiue row is 1980 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; laps ; 7 } } ; eq { hop { filter_less { all_rows ; laps ; 7 } ; year } ; 1980 } }, interpretation: select the rows whose laps record is less than 7 . there is only one such row in the table . the year record of this unqiue row is 1980 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; laps ; 7 } } ; eq { hop { filter_less { all_rows ; laps ; 7 } ; year } ; 1980 } }, interpretation: for the lyrics records of all rows , most of them fuzzily match to english .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; lyrics ; english }, interpretation: for the lyrics records of all rows , most of them fuzzily match to english .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; lyrics ; english }, interpretation: select the rows whose english title record fuzzily matches to the saviour of the soul . take the hk viewers record of this row . select the rows whose english title record fuzzily matches to men in pain . take the hk viewers record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; the saviour of the soul } ; hk viewers } ; hop { filter_eq { all_rows ; english title ; men in pain } ; hk viewers } }, interpretation: select the rows whose english title record fuzzily matches to the saviour of the soul . take the hk viewers record of this row . select the rows whose english title record fuzzily matches to men in pain . take the hk viewers record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; the saviour of the soul } ; hk viewers } ; hop { filter_eq { all_rows ; english title ; men in pain } ; hk viewers } }, interpretation: select the rows whose attendance record fuzzily matches to gund arena . the sum of the attendance record of these rows is 123371 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; attendance ; gund arena } ; attendance } ; 123371 }, interpretation: select the rows whose attendance record fuzzily matches to gund arena . the sum of the attendance record of these rows is 123371 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; attendance ; gund arena } ; attendance } ; 123371 }, interpretation: the average of the points record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 2 }, interpretation: the average of the points record of all rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 2 }, interpretation: the average of the blank ends record of all rows is 7.64 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blank ends } ; 7.64 }, interpretation: the average of the blank ends record of all rows is 7.64 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blank ends } ; 7.64 }, interpretation: select the rows whose weapon record fuzzily matches to pistol . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; weapon ; pistol } } ; 2 }, interpretation: select the rows whose weapon record fuzzily matches to pistol . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; weapon ; pistol } } ; 2 }, interpretation: select the rows whose of seats won record is less than 10 . there is only one such row in the table . the election record of this unqiue row is 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; of seats won ; 10 } } ; eq { hop { filter_less { all_rows ; of seats won ; 10 } ; election } ; 1993 } }, interpretation: select the rows whose of seats won record is less than 10 . there is only one such row in the table . the election record of this unqiue row is 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; of seats won ; 10 } } ; eq { hop { filter_less { all_rows ; of seats won ; 10 } ; election } ; 1993 } }, interpretation: select the rows whose total record is greater than 13 . the average of the fighting spirit record of these rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_greater { all_rows ; total ; 13 } ; fighting spirit } ; 5 }, interpretation: select the rows whose total record is greater than 13 . the average of the fighting spirit record of these rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_greater { all_rows ; total ; 13 } ; fighting spirit } ; 5 }, interpretation: select the row whose year record of all rows is 2nd minimum . the formula record of this row is grand prix .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; formula } ; grand prix }, interpretation: select the row whose year record of all rows is 2nd minimum . the formula record of this row is grand prix .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; formula } ; grand prix }, interpretation: select the rows whose venue record fuzzily matches to candlestick park . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; candlestick park } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to candlestick park . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; candlestick park } } ; 3 }, interpretation: select the rows whose player record fuzzily matches to tom laidlaw . take the round record of this row . select the rows whose player record fuzzily matches to chris mclaughlin . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; tom laidlaw } ; round } ; hop { filter_eq { all_rows ; player ; chris mclaughlin } ; round } }, interpretation: select the rows whose player record fuzzily matches to tom laidlaw . take the round record of this row . select the rows whose player record fuzzily matches to chris mclaughlin . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; tom laidlaw } ; round } ; hop { filter_eq { all_rows ; player ; chris mclaughlin } ; round } }, interpretation: the sum of the losses record of all rows is 212 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; losses } ; 212 }, interpretation: the sum of the losses record of all rows is 212 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; losses } ; 212 }, interpretation: select the rows whose country record fuzzily matches to scotland . there is only one such row in the table . the player record of this unqiue row is sandy lyle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; scotland } } ; eq { hop { filter_eq { all_rows ; country ; scotland } ; player } ; sandy lyle } }, interpretation: select the rows whose country record fuzzily matches to scotland . there is only one such row in the table . the player record of this unqiue row is sandy lyle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; scotland } } ; eq { hop { filter_eq { all_rows ; country ; scotland } ; player } ; sandy lyle } }, interpretation: select the rows whose player record fuzzily matches to patrick collins . take the pick record of this row . select the rows whose player record fuzzily matches to sterling sharpe . take the pick record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; patrick collins } ; pick } ; hop { filter_eq { all_rows ; player ; sterling sharpe } ; pick } }, interpretation: select the rows whose player record fuzzily matches to patrick collins . take the pick record of this row . select the rows whose player record fuzzily matches to sterling sharpe . take the pick record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; patrick collins } ; pick } ; hop { filter_eq { all_rows ; player ; sterling sharpe } ; pick } }, interpretation: select the rows whose defensive record fuzzily matches to matt disher . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; defensive ; matt disher } } ; 3 }, interpretation: select the rows whose defensive record fuzzily matches to matt disher . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; defensive ; matt disher } } ; 3 }, interpretation: select the rows whose club record fuzzily matches to travnik . take the number of seasons in premier league a record of this row . select the rows whose club record fuzzily matches to zvijezda . take the number of seasons in premier league a record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; travnik } ; number of seasons in premier league a } ; hop { filter_eq { all_rows ; club ; zvijezda } ; number of seasons in premier league a } }, interpretation: select the rows whose club record fuzzily matches to travnik . take the number of seasons in premier league a record of this row . select the rows whose club record fuzzily matches to zvijezda . take the number of seasons in premier league a record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; travnik } ; number of seasons in premier league a } ; hop { filter_eq { all_rows ; club ; zvijezda } ; number of seasons in premier league a } }, interpretation: select the rows whose fog ( days / year ) record is greater than 30 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; fog ( days / year ) ; 30 } } ; 4 }, interpretation: select the rows whose fog ( days / year ) record is greater than 30 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; fog ( days / year ) ; 30 } } ; 4 }, interpretation: select the row whose candidates record of all rows is maximum . the incumbent record of this row is charles r jonas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; candidates } ; incumbent } ; charles r jonas }, interpretation: select the row whose candidates record of all rows is maximum . the incumbent record of this row is charles r jonas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; candidates } ; incumbent } ; charles r jonas }, interpretation: select the rows whose office record fuzzily matches to state assemblyman . there is only one such row in the table . the elected record of this unqiue row is 1974 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; office ; state assemblyman } } ; eq { hop { filter_eq { all_rows ; office ; state assemblyman } ; elected } ; 1974 } }, interpretation: select the rows whose office record fuzzily matches to state assemblyman . there is only one such row in the table . the elected record of this unqiue row is 1974 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; office ; state assemblyman } } ; eq { hop { filter_eq { all_rows ; office ; state assemblyman } ; elected } ; 1974 } }, interpretation: for the date records of all rows , most of them fuzzily match to 02 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 02 }, interpretation: for the date records of all rows , most of them fuzzily match to 02 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 02 }, interpretation: select the row whose high points record of all rows is maximum . the date record of this row is june 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; high points } ; date } ; june 20 }, interpretation: select the row whose high points record of all rows is maximum . the date record of this row is june 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; high points } ; date } ; june 20 }, interpretation: select the row whose density ( pop per km2 ) record of all rows is 2nd maximum . the regional county municipality ( rcm ) record of this row is la haute - yamaska .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; density ( pop per km2 ) ; 2 } ; regional county municipality ( rcm ) } ; la haute - yamaska }, interpretation: select the row whose density ( pop per km2 ) record of all rows is 2nd maximum . the regional county municipality ( rcm ) record of this row is la haute - yamaska .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; density ( pop per km2 ) ; 2 } ; regional county municipality ( rcm ) } ; la haute - yamaska }, interpretation: select the row whose orbital period record of all rows is minimum . the planet record of this row is alpha centauri bb .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; orbital period } ; planet } ; alpha centauri bb }, interpretation: select the row whose orbital period record of all rows is minimum . the planet record of this row is alpha centauri bb .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; orbital period } ; planet } ; alpha centauri bb }, interpretation: select the rows whose title record fuzzily matches to chicken run . take the year record of this row . select the rows whose title record fuzzily matches to creature comforts . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; chicken run } ; year } ; hop { filter_eq { all_rows ; title ; creature comforts } ; year } }, interpretation: select the rows whose title record fuzzily matches to chicken run . take the year record of this row . select the rows whose title record fuzzily matches to creature comforts . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; chicken run } ; year } ; hop { filter_eq { all_rows ; title ; creature comforts } ; year } }, interpretation: select the row whose entries record of all rows is maximum . the driver record of this row is rubens barrichello .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; entries } ; driver } ; rubens barrichello }, interpretation: select the row whose entries record of all rows is maximum . the driver record of this row is rubens barrichello .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; entries } ; driver } ; rubens barrichello }, interpretation: select the rows whose nationality record fuzzily matches to canada . for the position records of these rows , most of them fuzzily match to defence .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; nationality ; canada } ; position ; defence }, interpretation: select the rows whose nationality record fuzzily matches to canada . for the position records of these rows , most of them fuzzily match to defence .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; nationality ; canada } ; position ; defence }, interpretation: select the rows whose successor record fuzzily matches to vacant . there is only one such row in the table . the vacator record of this unqiue row is ross bass ( d ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; successor ; vacant } } ; eq { hop { filter_eq { all_rows ; successor ; vacant } ; vacator } ; ross bass ( d ) } }, interpretation: select the rows whose successor record fuzzily matches to vacant . there is only one such row in the table . the vacator record of this unqiue row is ross bass ( d ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; successor ; vacant } } ; eq { hop { filter_eq { all_rows ; successor ; vacant } ; vacator } ; ross bass ( d ) } }, interpretation: select the rows whose composer record fuzzily matches to alexander lunyov . there is only one such row in the table . the song record of this unqiue row is never let you go 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; composer ; alexander lunyov } } ; eq { hop { filter_eq { all_rows ; composer ; alexander lunyov } ; song } ; never let you go 2 } }, interpretation: select the rows whose composer record fuzzily matches to alexander lunyov . there is only one such row in the table . the song record of this unqiue row is never let you go 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; composer ; alexander lunyov } } ; eq { hop { filter_eq { all_rows ; composer ; alexander lunyov } ; song } ; never let you go 2 } }, interpretation: select the rows whose country record fuzzily matches to australia . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; australia } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to australia . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; australia } } ; 3 }, interpretation: for the director records of all rows , all of them fuzzily match to robert alvarez .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; director ; robert alvarez }, interpretation: for the director records of all rows , all of them fuzzily match to robert alvarez .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; director ; robert alvarez }, interpretation: select the row whose total tackles record of all rows is maximum . the team record of this row is baltimore .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total tackles } ; team } ; baltimore }, interpretation: select the row whose total tackles record of all rows is maximum . the team record of this row is baltimore .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total tackles } ; team } ; baltimore }, interpretation: select the row whose episodes record of all rows is minimum . the character record of this row is aiden burn csi detective .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; episodes } ; character } ; aiden burn csi detective }, interpretation: select the row whose episodes record of all rows is minimum . the character record of this row is aiden burn csi detective .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; episodes } ; character } ; aiden burn csi detective }, interpretation: select the row whose frequency record of all rows is 1st maximum . the model number record of this row is athlon x2 5050e .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency ; 1 } ; model number } ; athlon x2 5050e }, interpretation: select the row whose frequency record of all rows is 1st maximum . the model number record of this row is athlon x2 5050e .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency ; 1 } ; model number } ; athlon x2 5050e }, interpretation: select the rows whose home team record fuzzily matches to south melbourne . take the home team score record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; south melbourne } ; home team score } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to south melbourne . take the home team score record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; south melbourne } ; home team score } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is may 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; may 22 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is may 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; may 22 }, interpretation: select the rows whose points record is less than 100 . there is only one such row in the table . the artist record of this unqiue row is giorgos gavriel .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; points ; 100 } } ; eq { hop { filter_less { all_rows ; points ; 100 } ; artist } ; giorgos gavriel } }, interpretation: select the rows whose points record is less than 100 . there is only one such row in the table . the artist record of this unqiue row is giorgos gavriel .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; points ; 100 } } ; eq { hop { filter_less { all_rows ; points ; 100 } ; artist } ; giorgos gavriel } }, interpretation: select the row whose time record of all rows is 2nd maximum . the country record of this row is china .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; time ; 2 } ; country } ; china }, interpretation: select the row whose time record of all rows is 2nd maximum . the country record of this row is china .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; time ; 2 } ; country } ; china }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the row whose took office record of all rows is maximum . the delegate record of this row is nina r harper .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; took office } ; delegate } ; nina r harper }, interpretation: select the row whose took office record of all rows is maximum . the delegate record of this row is nina r harper .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; took office } ; delegate } ; nina r harper }, interpretation: for the attendance records of all rows , most of them are greater than 1500 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 1500 }, interpretation: for the attendance records of all rows , most of them are greater than 1500 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 1500 }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is carlton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; carlton }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is carlton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; carlton }, interpretation: select the rows whose high assists record fuzzily matches to blake griffin . the average of the high assists record of these rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; high assists ; blake griffin } ; high assists } ; 9 }, interpretation: select the rows whose high assists record fuzzily matches to blake griffin . the average of the high assists record of these rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; high assists ; blake griffin } ; high assists } ; 9 }, interpretation: for the screen size ( inch ) records of all rows , most of them are greater than or equal to 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; screen size ( inch ) ; 7 }, interpretation: for the screen size ( inch ) records of all rows , most of them are greater than or equal to 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; screen size ( inch ) ; 7 }, interpretation: select the rows whose position record fuzzily matches to guard . there is only one such row in the table . the name record of this unqiue row is justin anderson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; guard } } ; eq { hop { filter_eq { all_rows ; position ; guard } ; name } ; justin anderson } }, interpretation: select the rows whose position record fuzzily matches to guard . there is only one such row in the table . the name record of this unqiue row is justin anderson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; guard } } ; eq { hop { filter_eq { all_rows ; position ; guard } ; name } ; justin anderson } }, interpretation: for the venue records of all rows , most of them fuzzily match to vienna , austria .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; vienna , austria }, interpretation: for the venue records of all rows , most of them fuzzily match to vienna , austria .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; vienna , austria }, interpretation: select the rows whose competition record fuzzily matches to friendly . among these rows , select the rows whose venue record fuzzily matches to stadion villach lind , villach , austria . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; competition ; friendly } ; venue ; stadion villach lind , villach , austria } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to friendly . among these rows , select the rows whose venue record fuzzily matches to stadion villach lind , villach , austria . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; competition ; friendly } ; venue ; stadion villach lind , villach , austria } } ; 2 }, interpretation: select the rows whose region record fuzzily matches to arica and parinacota . take the tertiary ( 18 - 24 years ) record of this row . select the rows whose region record fuzzily matches to maule . take the tertiary ( 18 - 24 years ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; region ; arica and parinacota } ; tertiary ( 18 - 24 years ) } ; hop { filter_eq { all_rows ; region ; maule } ; tertiary ( 18 - 24 years ) } }, interpretation: select the rows whose region record fuzzily matches to arica and parinacota . take the tertiary ( 18 - 24 years ) record of this row . select the rows whose region record fuzzily matches to maule . take the tertiary ( 18 - 24 years ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; region ; arica and parinacota } ; tertiary ( 18 - 24 years ) } ; hop { filter_eq { all_rows ; region ; maule } ; tertiary ( 18 - 24 years ) } }, interpretation: the average of the total record of all rows is 284.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 284.5 }, interpretation: the average of the total record of all rows is 284.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 284.5 }, interpretation: select the rows whose song title record fuzzily matches to big boss man . take the time record of this row . select the rows whose song title record fuzzily matches to us male . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; song title ; big boss man } ; time } ; hop { filter_eq { all_rows ; song title ; us male } ; time } }, interpretation: select the rows whose song title record fuzzily matches to big boss man . take the time record of this row . select the rows whose song title record fuzzily matches to us male . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; song title ; big boss man } ; time } ; hop { filter_eq { all_rows ; song title ; us male } ; time } }, interpretation: select the rows whose premiere record fuzzily matches to 14 august . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; premiere ; 14 august } } ; 4 }, interpretation: select the rows whose premiere record fuzzily matches to 14 august . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; premiere ; 14 august } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to final . the sum of the jury votes record of these rows is 29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; final } ; jury votes } ; 29 }, interpretation: select the rows whose result record fuzzily matches to final . the sum of the jury votes record of these rows is 29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; final } ; jury votes } ; 29 }, interpretation: the minimum original airdate record of all rows is november 02 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { all_rows ; original airdate } ; november 02 }, interpretation: the minimum original airdate record of all rows is november 02 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { all_rows ; original airdate } ; november 02 }, interpretation: select the row whose the championship record of all rows is maximum . the player record of this row is becchio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; the championship } ; player } ; becchio }, interpretation: select the row whose the championship record of all rows is maximum . the player record of this row is becchio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; the championship } ; player } ; becchio }, interpretation: select the row whose money record of all rows is maximum . the place record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; money } ; place } ; 1 }, interpretation: select the row whose money record of all rows is maximum . the place record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; money } ; place } ; 1 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is los angeles raiders .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; los angeles raiders }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is los angeles raiders .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; los angeles raiders }, interpretation: select the row whose became queen record of all rows is 2nd minimum . the name record of this row is maria teresa of the two sicilies .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; became queen ; 2 } ; name } ; maria teresa of the two sicilies }, interpretation: select the row whose became queen record of all rows is 2nd minimum . the name record of this row is maria teresa of the two sicilies .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; became queen ; 2 } ; name } ; maria teresa of the two sicilies }, interpretation: the sum of the laps record of all rows is 535 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 535 }, interpretation: the sum of the laps record of all rows is 535 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 535 }, interpretation: for the gold records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; gold ; 0 }, interpretation: for the gold records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; gold ; 0 }, interpretation: for the nation records of all rows , all of them fuzzily match to usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nation ; usa }, interpretation: for the nation records of all rows , all of them fuzzily match to usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nation ; usa }, interpretation: select the rows whose directed by record fuzzily matches to john t kretchmer . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; john t kretchmer } } ; 2 }, interpretation: select the rows whose directed by record fuzzily matches to john t kretchmer . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; john t kretchmer } } ; 2 }, interpretation: select the rows whose goalkeeper record fuzzily matches to juan calatayud . take the goals record of this row . select the rows whose goalkeeper record fuzzily matches to eduardo navarro . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; goalkeeper ; juan calatayud } ; goals } ; hop { filter_eq { all_rows ; goalkeeper ; eduardo navarro } ; goals } }, interpretation: select the rows whose goalkeeper record fuzzily matches to juan calatayud . take the goals record of this row . select the rows whose goalkeeper record fuzzily matches to eduardo navarro . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; goalkeeper ; juan calatayud } ; goals } ; hop { filter_eq { all_rows ; goalkeeper ; eduardo navarro } ; goals } }, interpretation: for the team records of all rows , all of them fuzzily match to honda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; team ; honda }, interpretation: for the team records of all rows , all of them fuzzily match to honda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; team ; honda }, interpretation: select the rows whose written by record fuzzily matches to shonda rhimes . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; shonda rhimes } } ; 4 }, interpretation: select the rows whose written by record fuzzily matches to shonda rhimes . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; shonda rhimes } } ; 4 }, interpretation: select the rows whose races record is equal to 16 . there is only one such row in the table . the year record of this unqiue row is 2012 . the riders record of this unqiue row is alex de angelis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; races ; 16 } } ; and { eq { hop { filter_eq { all_rows ; races ; 16 } ; year } ; 2012 } ; eq { hop { filter_eq { all_rows ; races ; 16 } ; riders } ; alex de angelis } } }, interpretation: select the rows whose races record is equal to 16 . there is only one such row in the table . the year record of this unqiue row is 2012 . the riders record of this unqiue row is alex de angelis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; races ; 16 } } ; and { eq { hop { filter_eq { all_rows ; races ; 16 } ; year } ; 2012 } ; eq { hop { filter_eq { all_rows ; races ; 16 } ; riders } ; alex de angelis } } }, interpretation: select the rows whose year record fuzzily matches to 1967 . take the laps completed record of this row . select the rows whose year record fuzzily matches to 1964 . take the laps completed record of this row . the second record is 12 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 1967 } ; laps completed } ; hop { filter_eq { all_rows ; year ; 1964 } ; laps completed } } ; -12 }, interpretation: select the rows whose year record fuzzily matches to 1967 . take the laps completed record of this row . select the rows whose year record fuzzily matches to 1964 . take the laps completed record of this row . the second record is 12 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 1967 } ; laps completed } ; hop { filter_eq { all_rows ; year ; 1964 } ; laps completed } } ; -12 }, interpretation: select the rows whose status record fuzzily matches to alive after exiting the cube . there is only one such row in the table . the name record of this unqiue row is kazan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; alive after exiting the cube } } ; eq { hop { filter_eq { all_rows ; status ; alive after exiting the cube } ; name } ; kazan } }, interpretation: select the rows whose status record fuzzily matches to alive after exiting the cube . there is only one such row in the table . the name record of this unqiue row is kazan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; alive after exiting the cube } } ; eq { hop { filter_eq { all_rows ; status ; alive after exiting the cube } ; name } ; kazan } }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is canada ( can ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; canada ( can ) }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is canada ( can ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; canada ( can ) }, interpretation: select the rows whose date record is equal to 1873 . the sum of the no built record of these rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 1873 } ; no built } ; 14 }, interpretation: select the rows whose date record is equal to 1873 . the sum of the no built record of these rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 1873 } ; no built } ; 14 }, interpretation: select the rows whose college record fuzzily matches to ohio state . there is only one such row in the table . the player record of this unqiue row is kirk barton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; ohio state } } ; eq { hop { filter_eq { all_rows ; college ; ohio state } ; player } ; kirk barton } }, interpretation: select the rows whose college record fuzzily matches to ohio state . there is only one such row in the table . the player record of this unqiue row is kirk barton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; ohio state } } ; eq { hop { filter_eq { all_rows ; college ; ohio state } ; player } ; kirk barton } }, interpretation: select the rows whose cover model record fuzzily matches to no model pictured . there is only one such row in the table . the date record of this unqiue row is 1 - 84 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; cover model ; no model pictured } } ; eq { hop { filter_eq { all_rows ; cover model ; no model pictured } ; date } ; 1 - 84 } }, interpretation: select the rows whose cover model record fuzzily matches to no model pictured . there is only one such row in the table . the date record of this unqiue row is 1 - 84 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; cover model ; no model pictured } } ; eq { hop { filter_eq { all_rows ; cover model ; no model pictured } ; date } ; 1 - 84 } }, interpretation: the average of the goals against record of all rows is 24 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals against } ; 24 }, interpretation: the average of the goals against record of all rows is 24 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals against } ; 24 }, interpretation: select the rows whose habitat type record fuzzily matches to forest steppe . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; habitat type ; forest steppe } } ; 8 }, interpretation: select the rows whose habitat type record fuzzily matches to forest steppe . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; habitat type ; forest steppe } } ; 8 }, interpretation: the average of the score record of all rows is 1.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 1.67 }, interpretation: the average of the score record of all rows is 1.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 1.67 }, interpretation: select the rows whose location record fuzzily matches to seoul , south korea . there is only one such row in the table . the event record of this unqiue row is hero 's 2005 in seoul .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; seoul , south korea } } ; eq { hop { filter_eq { all_rows ; location ; seoul , south korea } ; event } ; hero 's 2005 in seoul } }, interpretation: select the rows whose location record fuzzily matches to seoul , south korea . there is only one such row in the table . the event record of this unqiue row is hero 's 2005 in seoul .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; seoul , south korea } } ; eq { hop { filter_eq { all_rows ; location ; seoul , south korea } ; event } ; hero 's 2005 in seoul } }, interpretation: the average of the central rate record of all rows is 3.393 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; central rate } ; 3.393 }, interpretation: the average of the central rate record of all rows is 3.393 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; central rate } ; 3.393 }, interpretation: select the rows whose party record fuzzily matches to democratic . among these rows , select the rows whose result record fuzzily matches to re-elected . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; party ; democratic } ; result ; re-elected } } ; 2 }, interpretation: select the rows whose party record fuzzily matches to democratic . among these rows , select the rows whose result record fuzzily matches to re-elected . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; party ; democratic } ; result ; re-elected } } ; 2 }, interpretation: select the rows whose status record fuzzily matches to bottom 3 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; bottom 3 } } ; 2 }, interpretation: select the rows whose status record fuzzily matches to bottom 3 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; bottom 3 } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to clay . among these rows , select the rows whose partner record fuzzily matches to anna linkova . there is only one such row in the table . the date record of this unqiue row is august 7 , 1995 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; surface ; clay } ; partner ; anna linkova } } ; eq { hop { filter_eq { filter_eq { all_rows ; surface ; clay } ; partner ; anna linkova } ; date } ; august 7 , 1995 } }, interpretation: select the rows whose surface record fuzzily matches to clay . among these rows , select the rows whose partner record fuzzily matches to anna linkova . there is only one such row in the table . the date record of this unqiue row is august 7 , 1995 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; surface ; clay } ; partner ; anna linkova } } ; eq { hop { filter_eq { filter_eq { all_rows ; surface ; clay } ; partner ; anna linkova } ; date } ; august 7 , 1995 } }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is nathaniel macon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; nathaniel macon }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is nathaniel macon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; nathaniel macon }, interpretation: for the earnings records of all rows , most of them are greater than 10000000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; earnings ; 10000000 }, interpretation: for the earnings records of all rows , most of them are greater than 10000000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; earnings ; 10000000 }, interpretation: the average of the assists record of all rows is 64.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; assists } ; 64.2 }, interpretation: the average of the assists record of all rows is 64.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; assists } ; 64.2 }, interpretation: select the rows whose name record fuzzily matches to aran . take the tournaments record of this row . select the rows whose name record fuzzily matches to itai . take the tournaments record of this row . the second record is 1 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; aran } ; tournaments } ; hop { filter_eq { all_rows ; name ; itai } ; tournaments } } ; -1 }, interpretation: select the rows whose name record fuzzily matches to aran . take the tournaments record of this row . select the rows whose name record fuzzily matches to itai . take the tournaments record of this row . the second record is 1 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; aran } ; tournaments } ; hop { filter_eq { all_rows ; name ; itai } ; tournaments } } ; -1 }, interpretation: select the rows whose date record fuzzily matches to october 31 . take the score record of this row . select the rows whose date record fuzzily matches to october 29 . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; october 31 } ; score } ; hop { filter_eq { all_rows ; date ; october 29 } ; score } }, interpretation: select the rows whose date record fuzzily matches to october 31 . take the score record of this row . select the rows whose date record fuzzily matches to october 29 . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; october 31 } ; score } ; hop { filter_eq { all_rows ; date ; october 29 } ; score } }, interpretation: select the rows whose name record fuzzily matches to shareese woods . take the react record of this row . select the rows whose name record fuzzily matches to natalya nazarova . take the react record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; shareese woods } ; react } ; hop { filter_eq { all_rows ; name ; natalya nazarova } ; react } }, interpretation: select the rows whose name record fuzzily matches to shareese woods . take the react record of this row . select the rows whose name record fuzzily matches to natalya nazarova . take the react record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; shareese woods } ; react } ; hop { filter_eq { all_rows ; name ; natalya nazarova } ; react } }, interpretation: select the rows whose player record fuzzily matches to brandon bass . take the years in orlando record of this row . select the rows whose player record fuzzily matches to andre barrett . take the years in orlando record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; brandon bass } ; years in orlando } ; hop { filter_eq { all_rows ; player ; andre barrett } ; years in orlando } }, interpretation: select the rows whose player record fuzzily matches to brandon bass . take the years in orlando record of this row . select the rows whose player record fuzzily matches to andre barrett . take the years in orlando record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; brandon bass } ; years in orlando } ; hop { filter_eq { all_rows ; player ; andre barrett } ; years in orlando } }, interpretation: select the rows whose pitcher record fuzzily matches to toad ramsey . take the strikeouts record of this row . select the rows whose pitcher record fuzzily matches to old hoss radbourn . take the strikeouts record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; pitcher ; toad ramsey } ; strikeouts } ; hop { filter_eq { all_rows ; pitcher ; old hoss radbourn } ; strikeouts } }, interpretation: select the rows whose pitcher record fuzzily matches to toad ramsey . take the strikeouts record of this row . select the rows whose pitcher record fuzzily matches to old hoss radbourn . take the strikeouts record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; pitcher ; toad ramsey } ; strikeouts } ; hop { filter_eq { all_rows ; pitcher ; old hoss radbourn } ; strikeouts } }, interpretation: select the rows whose team record fuzzily matches to honda . the sum of the wins record of these rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; honda } ; wins } ; 6 }, interpretation: select the rows whose team record fuzzily matches to honda . the sum of the wins record of these rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; honda } ; wins } ; 6 }, interpretation: select the rows whose air date record fuzzily matches to 2008 . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; air date ; 2008 } } ; 11 }, interpretation: select the rows whose air date record fuzzily matches to 2008 . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; air date ; 2008 } } ; 11 }, interpretation: select the row whose semifinalists record of all rows is 4th maximum . the country / territory record of this row is australia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; semifinalists ; 4 } ; country / territory } ; australia }, interpretation: select the row whose semifinalists record of all rows is 4th maximum . the country / territory record of this row is australia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; semifinalists ; 4 } ; country / territory } ; australia }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is buffalo bills .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; buffalo bills }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is buffalo bills .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; buffalo bills }, interpretation: select the row whose year record of all rows is 1st minimum . the arcade record of this row is space invaders . the standalone record of this row is space invaders . the console record of this row is space invaders . the computer record of this row is space invaders .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; arcade } ; space invaders } ; and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; standalone } ; space invaders } ; and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; console } ; space invaders } ; eq { hop { nth_argmin { all_rows ; year ; 1 } ; computer } ; space invaders } } } }, interpretation: select the row whose year record of all rows is 1st minimum . the arcade record of this row is space invaders . the standalone record of this row is space invaders . the console record of this row is space invaders . the computer record of this row is space invaders .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; arcade } ; space invaders } ; and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; standalone } ; space invaders } ; and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; console } ; space invaders } ; eq { hop { nth_argmin { all_rows ; year ; 1 } ; computer } ; space invaders } } } }, interpretation: select the row whose round record of all rows is 2nd maximum . the player record of this row is jeffrey hunter .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; round ; 2 } ; player } ; jeffrey hunter }, interpretation: select the row whose round record of all rows is 2nd maximum . the player record of this row is jeffrey hunter .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; round ; 2 } ; player } ; jeffrey hunter }, interpretation: select the rows whose date record fuzzily matches to october 3 . take the attendance record of this row . select the rows whose date record fuzzily matches to september 26 . take the attendance record of this row . the first record is 8306 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; october 3 } ; attendance } ; hop { filter_eq { all_rows ; date ; september 26 } ; attendance } } ; 8306 }, interpretation: select the rows whose date record fuzzily matches to october 3 . take the attendance record of this row . select the rows whose date record fuzzily matches to september 26 . take the attendance record of this row . the first record is 8306 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; october 3 } ; attendance } ; hop { filter_eq { all_rows ; date ; september 26 } ; attendance } } ; 8306 }, interpretation: select the rows whose player record fuzzily matches to tim jones . take the pick record of this row . select the rows whose player record fuzzily matches to lew kamanu . take the pick record of this row . the first record is greater than the second record . the position record of the first row is quarterback . the position record of the second row is defensive end .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; player ; tim jones } ; pick } ; hop { filter_eq { all_rows ; player ; lew kamanu } ; pick } } ; and { eq { hop { filter_eq { all_rows ; player ; tim jones } ; position } ; quarterback } ; eq { hop { filter_eq { all_rows ; player ; lew kamanu } ; position } ; defensive end } } }, interpretation: select the rows whose player record fuzzily matches to tim jones . take the pick record of this row . select the rows whose player record fuzzily matches to lew kamanu . take the pick record of this row . the first record is greater than the second record . the position record of the first row is quarterback . the position record of the second row is defensive end .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; player ; tim jones } ; pick } ; hop { filter_eq { all_rows ; player ; lew kamanu } ; pick } } ; and { eq { hop { filter_eq { all_rows ; player ; tim jones } ; position } ; quarterback } ; eq { hop { filter_eq { all_rows ; player ; lew kamanu } ; position } ; defensive end } } }, interpretation: the average of the enrollment record of all rows is 1,285 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 1,285 }, interpretation: the average of the enrollment record of all rows is 1,285 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 1,285 }, interpretation: select the rows whose career win - loss record fuzzily matches to 2 - . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; career win - loss ; 2 - } } ; eq { hop { filter_eq { all_rows ; career win - loss ; 2 - } ; tournament } ; us open } }, interpretation: select the rows whose career win - loss record fuzzily matches to 2 - . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; career win - loss ; 2 - } } ; eq { hop { filter_eq { all_rows ; career win - loss ; 2 - } ; tournament } ; us open } }, interpretation: select the rows whose incumbent record fuzzily matches to none ( district created ) . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; incumbent ; none ( district created ) } } ; 2 }, interpretation: select the rows whose incumbent record fuzzily matches to none ( district created ) . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; incumbent ; none ( district created ) } } ; 2 }, interpretation: select the rows whose constructor record fuzzily matches to brm . select the row whose time / retired record of these rows is 3rd minimum . the driver record of this row is lucien bianchi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; constructor ; brm } ; time / retired ; 3 } ; driver } ; lucien bianchi }, interpretation: select the rows whose constructor record fuzzily matches to brm . select the row whose time / retired record of these rows is 3rd minimum . the driver record of this row is lucien bianchi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; constructor ; brm } ; time / retired ; 3 } ; driver } ; lucien bianchi }, interpretation: select the rows whose type record fuzzily matches to loan return . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; loan return } } ; 2 }, interpretation: select the rows whose type record fuzzily matches to loan return . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; loan return } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to san francisco 49ers . the maximum attendance record of these rows is 65551 . the date record of the row with superlative attendance record is november 11 , 1979 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; opponent ; san francisco 49ers } ; attendance } ; 65551 } ; eq { hop { argmax { filter_eq { all_rows ; opponent ; san francisco 49ers } ; attendance } ; date } ; november 11 , 1979 } }, interpretation: select the rows whose opponent record fuzzily matches to san francisco 49ers . the maximum attendance record of these rows is 65551 . the date record of the row with superlative attendance record is november 11 , 1979 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; opponent ; san francisco 49ers } ; attendance } ; 65551 } ; eq { hop { argmax { filter_eq { all_rows ; opponent ; san francisco 49ers } ; attendance } ; date } ; november 11 , 1979 } }, interpretation: select the row whose thurs 4 june record of all rows is minimum . the rider record of this row is cameron donald 1000cc suzuki .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; thurs 4 june } ; rider } ; cameron donald 1000cc suzuki }, interpretation: select the row whose thurs 4 june record of all rows is minimum . the rider record of this row is cameron donald 1000cc suzuki .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; thurs 4 june } ; rider } ; cameron donald 1000cc suzuki }, interpretation: for the current status records of all rows , most of them fuzzily match to active .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current status ; active }, interpretation: for the current status records of all rows , most of them fuzzily match to active .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current status ; active }, interpretation: select the rows whose gpu frequency record fuzzily matches to 320 mhz . for the release price ( usd ) records of these rows , all of them are greater than 60 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_eq { all_rows ; gpu frequency ; 320 mhz } ; release price ( usd ) ; 60 }, interpretation: select the rows whose gpu frequency record fuzzily matches to 320 mhz . for the release price ( usd ) records of these rows , all of them are greater than 60 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_eq { all_rows ; gpu frequency ; 320 mhz } ; release price ( usd ) ; 60 }, interpretation: select the rows whose nba draft record fuzzily matches to pick . there is only one such row in the table . the player record of this unqiue row is marquis teague .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nba draft ; pick } } ; eq { hop { filter_eq { all_rows ; nba draft ; pick } ; player } ; marquis teague } }, interpretation: select the rows whose nba draft record fuzzily matches to pick . there is only one such row in the table . the player record of this unqiue row is marquis teague .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nba draft ; pick } } ; eq { hop { filter_eq { all_rows ; nba draft ; pick } ; player } ; marquis teague } }, interpretation: for the district records of all rows , all of them fuzzily match to pennsylvania .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; district ; pennsylvania }, interpretation: for the district records of all rows , all of them fuzzily match to pennsylvania .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; district ; pennsylvania }, interpretation: select the rows whose venue record fuzzily matches to oval . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; oval } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to oval . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; oval } } ; 3 }, interpretation: the average of the viewers ( in millions ) record of all rows is 12.56 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers ( in millions ) } ; 12.56 }, interpretation: the average of the viewers ( in millions ) record of all rows is 12.56 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers ( in millions ) } ; 12.56 }, interpretation: select the rows whose attendance record is less than 40000 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; attendance ; 40000 } } ; 1 }, interpretation: select the rows whose attendance record is less than 40000 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; attendance ; 40000 } } ; 1 }, interpretation: select the rows whose location attendance record fuzzily matches to bryce jordan center , state college , pa ( 9833 ) . there is only one such row in the table . the date record of this unqiue row is december 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location attendance ; bryce jordan center , state college , pa ( 9833 ) } } ; eq { hop { filter_eq { all_rows ; location attendance ; bryce jordan center , state college , pa ( 9833 ) } ; date } ; december 6 } }, interpretation: select the rows whose location attendance record fuzzily matches to bryce jordan center , state college , pa ( 9833 ) . there is only one such row in the table . the date record of this unqiue row is december 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location attendance ; bryce jordan center , state college , pa ( 9833 ) } } ; eq { hop { filter_eq { all_rows ; location attendance ; bryce jordan center , state college , pa ( 9833 ) } ; date } ; december 6 } }, interpretation: select the row whose position record of all rows is minimum . the year record of this row is 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; position } ; year } ; 2009 }, interpretation: select the row whose position record of all rows is minimum . the year record of this row is 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; position } ; year } ; 2009 }, interpretation: select the rows whose round record is equal to 7 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; 7 } } ; 2 }, interpretation: select the rows whose round record is equal to 7 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; 7 } } ; 2 }, interpretation: the 1st minimum date record of all rows is 18 may 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 1 } ; 18 may 1993 }, interpretation: the 1st minimum date record of all rows is 18 may 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 1 } ; 18 may 1993 }, interpretation: select the rows whose annual ridership ( 2012 ) record fuzzily matches to 280904200 . take the stations record of this row . select the rows whose annual ridership ( 2012 ) record fuzzily matches to 231154300 . take the stations record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; annual ridership ( 2012 ) ; 280904200 } ; stations } ; hop { filter_eq { all_rows ; annual ridership ( 2012 ) ; 231154300 } ; stations } }, interpretation: select the rows whose annual ridership ( 2012 ) record fuzzily matches to 280904200 . take the stations record of this row . select the rows whose annual ridership ( 2012 ) record fuzzily matches to 231154300 . take the stations record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; annual ridership ( 2012 ) ; 280904200 } ; stations } ; hop { filter_eq { all_rows ; annual ridership ( 2012 ) ; 231154300 } ; stations } }, interpretation: select the rows whose year record is greater than or equal to 2011 . the sum of the tournaments played record of these rows is 33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; year ; 2011 } ; tournaments played } ; 33 }, interpretation: select the rows whose year record is greater than or equal to 2011 . the sum of the tournaments played record of these rows is 33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; year ; 2011 } ; tournaments played } ; 33 }, interpretation: select the rows whose turbines record is equal to 1 . there is only one such row in the table . the wind farm record of this unqiue row is glenough extension .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; turbines ; 1 } } ; eq { hop { filter_eq { all_rows ; turbines ; 1 } ; wind farm } ; glenough extension } }, interpretation: select the rows whose turbines record is equal to 1 . there is only one such row in the table . the wind farm record of this unqiue row is glenough extension .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; turbines ; 1 } } ; eq { hop { filter_eq { all_rows ; turbines ; 1 } ; wind farm } ; glenough extension } }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is april 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; april 2 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is april 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; april 2 }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose engine record fuzzily matches to 4.7 l powertech v8 . among these rows , select the rows whose years record fuzzily matches to 2005-2007 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; engine ; 4.7 l powertech v8 } ; years ; 2005-2007 } } ; 1 }, interpretation: select the rows whose engine record fuzzily matches to 4.7 l powertech v8 . among these rows , select the rows whose years record fuzzily matches to 2005-2007 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; engine ; 4.7 l powertech v8 } ; years ; 2005-2007 } } ; 1 }, interpretation: select the row whose us air date record of all rows is minimum . the storyteller record of this row is kristen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; us air date } ; storyteller } ; kristen }, interpretation: select the row whose us air date record of all rows is minimum . the storyteller record of this row is kristen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; us air date } ; storyteller } ; kristen }, interpretation: select the rows whose brand record fuzzily matches to gmc . take the year founded record of this row . select the rows whose brand record fuzzily matches to chevrolet . take the year founded record of this row . the second record is 10 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; brand ; gmc } ; year founded } ; hop { filter_eq { all_rows ; brand ; chevrolet } ; year founded } } ; -10 }, interpretation: select the rows whose brand record fuzzily matches to gmc . take the year founded record of this row . select the rows whose brand record fuzzily matches to chevrolet . take the year founded record of this row . the second record is 10 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; brand ; gmc } ; year founded } ; hop { filter_eq { all_rows ; brand ; chevrolet } ; year founded } } ; -10 }, interpretation: select the rows whose player record fuzzily matches to gary springer . take the pick record of this row . select the rows whose player record fuzzily matches to rich congo . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; gary springer } ; pick } ; hop { filter_eq { all_rows ; player ; rich congo } ; pick } }, interpretation: select the rows whose player record fuzzily matches to gary springer . take the pick record of this row . select the rows whose player record fuzzily matches to rich congo . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; gary springer } ; pick } ; hop { filter_eq { all_rows ; player ; rich congo } ; pick } }, interpretation: select the rows whose spectators record is equal to 50000 . among these rows , select the rows whose res record fuzzily matches to 3 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; spectators ; 50000 } ; res ; 3 } } ; 2 }, interpretation: select the rows whose spectators record is equal to 50000 . among these rows , select the rows whose res record fuzzily matches to 3 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; spectators ; 50000 } ; res ; 3 } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to france . take the date record of this row . select the rows whose country record fuzzily matches to belgium . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; france } ; date } ; hop { filter_eq { all_rows ; country ; belgium } ; date } }, interpretation: select the rows whose country record fuzzily matches to france . take the date record of this row . select the rows whose country record fuzzily matches to belgium . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; france } ; date } ; hop { filter_eq { all_rows ; country ; belgium } ; date } }, interpretation: select the rows whose party record fuzzily matches to democratic . there is only one such row in the table . the incumbent record of this unqiue row is clarence f lea .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; democratic } } ; eq { hop { filter_eq { all_rows ; party ; democratic } ; incumbent } ; clarence f lea } }, interpretation: select the rows whose party record fuzzily matches to democratic . there is only one such row in the table . the incumbent record of this unqiue row is clarence f lea .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; democratic } } ; eq { hop { filter_eq { all_rows ; party ; democratic } ; incumbent } ; clarence f lea } }, interpretation: select the rows whose location attendance record fuzzily matches to wachovia center . the sum of the location attendance record of these rows is 89767 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; wachovia center } ; location attendance } ; 89767 }, interpretation: select the rows whose location attendance record fuzzily matches to wachovia center . the sum of the location attendance record of these rows is 89767 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; wachovia center } ; location attendance } ; 89767 }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: select the rows whose nationality record fuzzily matches to ireland . among these rows , select the rows whose goals record is greater than 60 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; nationality ; ireland } ; goals ; 60 } } ; 5 }, interpretation: select the rows whose nationality record fuzzily matches to ireland . among these rows , select the rows whose goals record is greater than 60 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; nationality ; ireland } ; goals ; 60 } } ; 5 }, interpretation: select the rows whose country record fuzzily matches to finland . there is only one such row in the table . the company record of this unqiue row is stonesoft .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; finland } } ; eq { hop { filter_eq { all_rows ; country ; finland } ; company } ; stonesoft } }, interpretation: select the rows whose country record fuzzily matches to finland . there is only one such row in the table . the company record of this unqiue row is stonesoft .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; finland } } ; eq { hop { filter_eq { all_rows ; country ; finland } ; company } ; stonesoft } }, interpretation: select the rows whose frequency record fuzzily matches to am . there is only one such row in the table . the branding record of this unqiue row is am 1150 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; frequency ; am } } ; eq { hop { filter_eq { all_rows ; frequency ; am } ; branding } ; am 1150 } }, interpretation: select the rows whose frequency record fuzzily matches to am . there is only one such row in the table . the branding record of this unqiue row is am 1150 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; frequency ; am } } ; eq { hop { filter_eq { all_rows ; frequency ; am } ; branding } ; am 1150 } }, interpretation: for the s host records of all rows , all of them fuzzily match to bob costas and tom hammond .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; s host ; bob costas and tom hammond }, interpretation: for the s host records of all rows , all of them fuzzily match to bob costas and tom hammond .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; s host ; bob costas and tom hammond }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: select the row whose place record of all rows is minimum . the artist record of this row is krassimir avramov .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; place } ; artist } ; krassimir avramov }, interpretation: select the row whose place record of all rows is minimum . the artist record of this row is krassimir avramov .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; place } ; artist } ; krassimir avramov }, interpretation: select the row whose % of votes khuzestan record of all rows is 2nd maximum . the candidates record of this row is akbar hashemi rafsanjani .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; % of votes khuzestan ; 2 } ; candidates } ; akbar hashemi rafsanjani }, interpretation: select the row whose % of votes khuzestan record of all rows is 2nd maximum . the candidates record of this row is akbar hashemi rafsanjani .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; % of votes khuzestan ; 2 } ; candidates } ; akbar hashemi rafsanjani }, interpretation: select the rows whose score record fuzzily matches to 0 - 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 0 - 1 } } ; 2 }, interpretation: select the rows whose score record fuzzily matches to 0 - 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 0 - 1 } } ; 2 }, interpretation: the 2nd minimum rank record of all rows is 2nd . the population record of the row with 2nd minimum rank record is 36039 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 2 } ; 2nd } ; eq { hop { nth_argmin { all_rows ; rank ; 2 } ; population } ; 36039 } }, interpretation: the 2nd minimum rank record of all rows is 2nd . the population record of the row with 2nd minimum rank record is 36039 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 2 } ; 2nd } ; eq { hop { nth_argmin { all_rows ; rank ; 2 } ; population } ; 36039 } }, interpretation: select the rows whose surface record fuzzily matches to carpet . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; carpet } } ; 5 }, interpretation: select the rows whose surface record fuzzily matches to carpet . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; carpet } } ; 5 }, interpretation: select the rows whose rome , italy record fuzzily matches to germany . there is only one such row in the table . the world record record of this unqiue row is world leading .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; rome , italy ; germany } } ; eq { hop { filter_eq { all_rows ; rome , italy ; germany } ; world record } ; world leading } }, interpretation: select the rows whose rome , italy record fuzzily matches to germany . there is only one such row in the table . the world record record of this unqiue row is world leading .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; rome , italy ; germany } } ; eq { hop { filter_eq { all_rows ; rome , italy ; germany } ; world record } ; world leading } }, interpretation: select the rows whose developer record fuzzily matches to cloud imperium games corporation . there is only one such row in the table . the title record of this unqiue row is star citizen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; developer ; cloud imperium games corporation } } ; eq { hop { filter_eq { all_rows ; developer ; cloud imperium games corporation } ; title } ; star citizen } }, interpretation: select the rows whose developer record fuzzily matches to cloud imperium games corporation . there is only one such row in the table . the title record of this unqiue row is star citizen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; developer ; cloud imperium games corporation } } ; eq { hop { filter_eq { all_rows ; developer ; cloud imperium games corporation } ; title } ; star citizen } }, interpretation: select the rows whose position record fuzzily matches to defensive end . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; defensive end } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to defensive end . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; defensive end } } ; 2 }, interpretation: for the gained university status records of all rows , most of them are greater than 1920 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; gained university status ; 1920 }, interpretation: for the gained university status records of all rows , most of them are greater than 1920 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; gained university status ; 1920 }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is new york giants .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; new york giants }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is new york giants .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; new york giants }, interpretation: for the party records of all rows , most of them fuzzily match to democratic - republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic - republican }, interpretation: for the party records of all rows , most of them fuzzily match to democratic - republican .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic - republican }, interpretation: select the row whose location / attendance record of all rows is 1st maximum . the opponent record of this row is new york .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location / attendance ; 1 } ; opponent } ; new york }, interpretation: select the row whose location / attendance record of all rows is 1st maximum . the opponent record of this row is new york .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location / attendance ; 1 } ; opponent } ; new york }, interpretation: for the venue records of all rows , most of them fuzzily match to hampden park , glasgow .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; hampden park , glasgow }, interpretation: for the venue records of all rows , most of them fuzzily match to hampden park , glasgow .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; hampden park , glasgow }, interpretation: select the rows whose college record fuzzily matches to oklahoma . there is only one such row in the table . the name record of this unqiue row is dominique franks .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; oklahoma } } ; eq { hop { filter_eq { all_rows ; college ; oklahoma } ; name } ; dominique franks } }, interpretation: select the rows whose college record fuzzily matches to oklahoma . there is only one such row in the table . the name record of this unqiue row is dominique franks .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; oklahoma } } ; eq { hop { filter_eq { all_rows ; college ; oklahoma } ; name } ; dominique franks } }, interpretation: select the rows whose host city record fuzzily matches to buffalo , new york . take the year record of this row . select the rows whose host city record fuzzily matches to orlando , florida . take the year record of this row . the second record is 1 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; host city ; buffalo , new york } ; year } ; hop { filter_eq { all_rows ; host city ; orlando , florida } ; year } } ; -1 }, interpretation: select the rows whose host city record fuzzily matches to buffalo , new york . take the year record of this row . select the rows whose host city record fuzzily matches to orlando , florida . take the year record of this row . the second record is 1 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; host city ; buffalo , new york } ; year } ; hop { filter_eq { all_rows ; host city ; orlando , florida } ; year } } ; -1 }, interpretation: select the row whose games record of all rows is maximum . the player record of this row is kevin anderson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; games } ; player } ; kevin anderson }, interpretation: select the row whose games record of all rows is maximum . the player record of this row is kevin anderson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; games } ; player } ; kevin anderson }, interpretation: select the row whose time record of all rows is 1st minimum . the name record of this row is leisel jones .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; name } ; leisel jones }, interpretation: select the row whose time record of all rows is 1st minimum . the name record of this row is leisel jones .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; name } ; leisel jones }, interpretation: the average of the matches record of all rows is 4.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; matches } ; 4.1 }, interpretation: the average of the matches record of all rows is 4.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; matches } ; 4.1 }, interpretation: select the rows whose issue price record is equal to 79.95 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; issue price ; 79.95 } } ; 2 }, interpretation: select the rows whose issue price record is equal to 79.95 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; issue price ; 79.95 } } ; 2 }, interpretation: select the rows whose bronze record is equal to 1 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; 1 } } ; 4 }, interpretation: select the rows whose bronze record is equal to 1 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; 1 } } ; 4 }, interpretation: select the row whose qual 2 record of all rows is 2nd minimum . the name record of this row is paul tracy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; qual 2 ; 2 } ; name } ; paul tracy }, interpretation: select the row whose qual 2 record of all rows is 2nd minimum . the name record of this row is paul tracy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; qual 2 ; 2 } ; name } ; paul tracy }, interpretation: select the row whose points record of all rows is maximum . the name record of this row is natalia linichuk / gennadi karponosov .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; name } ; natalia linichuk / gennadi karponosov }, interpretation: select the row whose points record of all rows is maximum . the name record of this row is natalia linichuk / gennadi karponosov .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; name } ; natalia linichuk / gennadi karponosov }, interpretation: select the row whose first elected record of all rows is 2nd maximum . the incumbent record of this row is louis capozzoli .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first elected ; 2 } ; incumbent } ; louis capozzoli }, interpretation: select the row whose first elected record of all rows is 2nd maximum . the incumbent record of this row is louis capozzoli .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first elected ; 2 } ; incumbent } ; louis capozzoli }, interpretation: for the league / division records of all rows , most of them fuzzily match to first division .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; league / division ; first division }, interpretation: for the league / division records of all rows , most of them fuzzily match to first division .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; league / division ; first division }, interpretation: select the rows whose rank record fuzzily matches to 1 . take the silver record of this row . select the rows whose rank record fuzzily matches to 2 . take the silver record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; rank ; 1 } ; silver } ; hop { filter_eq { all_rows ; rank ; 2 } ; silver } } ; 1 }, interpretation: select the rows whose rank record fuzzily matches to 1 . take the silver record of this row . select the rows whose rank record fuzzily matches to 2 . take the silver record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; rank ; 1 } ; silver } ; hop { filter_eq { all_rows ; rank ; 2 } ; silver } } ; 1 }, interpretation: select the row whose total poll ( % ) record of all rows is maximum . the constituency record of this row is oslo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total poll ( % ) } ; constituency } ; oslo }, interpretation: select the row whose total poll ( % ) record of all rows is maximum . the constituency record of this row is oslo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total poll ( % ) } ; constituency } ; oslo }, interpretation: select the rows whose high points record fuzzily matches to richard hamilton . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high points ; richard hamilton } } ; 4 }, interpretation: select the rows whose high points record fuzzily matches to richard hamilton . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high points ; richard hamilton } } ; 4 }, interpretation: the sum of the uk viewers ( million ) record of all rows is 96.41 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; uk viewers ( million ) } ; 96.41 }, interpretation: the sum of the uk viewers ( million ) record of all rows is 96.41 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; uk viewers ( million ) } ; 96.41 }, interpretation: for the high assists records of all rows , most of them fuzzily match to g payton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; g payton }, interpretation: for the high assists records of all rows , most of them fuzzily match to g payton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; g payton }, interpretation: select the rows whose score record fuzzily matches to 4:1 . there is only one such row in the table . the team 1 record of this unqiue row is muangthong united . the team 2 record of this unqiue row is persiwa wamena .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 4:1 } } ; and { eq { hop { filter_eq { all_rows ; score ; 4:1 } ; team 1 } ; muangthong united } ; eq { hop { filter_eq { all_rows ; score ; 4:1 } ; team 2 } ; persiwa wamena } } }, interpretation: select the rows whose score record fuzzily matches to 4:1 . there is only one such row in the table . the team 1 record of this unqiue row is muangthong united . the team 2 record of this unqiue row is persiwa wamena .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 4:1 } } ; and { eq { hop { filter_eq { all_rows ; score ; 4:1 } ; team 1 } ; muangthong united } ; eq { hop { filter_eq { all_rows ; score ; 4:1 } ; team 2 } ; persiwa wamena } } }, interpretation: select the rows whose agent record fuzzily matches to arsine . take the effectiveness as blood agent record of this row . select the rows whose agent record fuzzily matches to vinyl arsine . take the effectiveness as blood agent record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; agent ; arsine } ; effectiveness as blood agent } ; hop { filter_eq { all_rows ; agent ; vinyl arsine } ; effectiveness as blood agent } }, interpretation: select the rows whose agent record fuzzily matches to arsine . take the effectiveness as blood agent record of this row . select the rows whose agent record fuzzily matches to vinyl arsine . take the effectiveness as blood agent record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; agent ; arsine } ; effectiveness as blood agent } ; hop { filter_eq { all_rows ; agent ; vinyl arsine } ; effectiveness as blood agent } }, interpretation: select the row whose score record of all rows is 2nd maximum . the player record of this row is mark boucher .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; score ; 2 } ; player } ; mark boucher }, interpretation: select the row whose score record of all rows is 2nd maximum . the player record of this row is mark boucher .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; score ; 2 } ; player } ; mark boucher }, interpretation: for the country of origin records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country of origin ; united states }, interpretation: for the country of origin records of all rows , most of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country of origin ; united states }, interpretation: select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . select the rows whose venue record fuzzily matches to brunswick street oval . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; princes park } ; crowd } ; hop { filter_eq { all_rows ; venue ; brunswick street oval } ; crowd } }, interpretation: select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . select the rows whose venue record fuzzily matches to brunswick street oval . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; princes park } ; crowd } ; hop { filter_eq { all_rows ; venue ; brunswick street oval } ; crowd } }, interpretation: select the rows whose game site record fuzzily matches to qualcomm stadium . among these rows , select the rows whose time record fuzzily matches to 5:15 pm . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; game site ; qualcomm stadium } ; time ; 5:15 pm } } ; 3 }, interpretation: select the rows whose game site record fuzzily matches to qualcomm stadium . among these rows , select the rows whose time record fuzzily matches to 5:15 pm . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; game site ; qualcomm stadium } ; time ; 5:15 pm } } ; 3 }, interpretation: select the rows whose score record fuzzily matches to 5 . there is only one such row in the table . the home team record of this unqiue row is sheffield wednesday . the away team record of this unqiue row is oldham athletic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 5 } } ; and { eq { hop { filter_eq { all_rows ; score ; 5 } ; home team } ; sheffield wednesday } ; eq { hop { filter_eq { all_rows ; score ; 5 } ; away team } ; oldham athletic } } }, interpretation: select the rows whose score record fuzzily matches to 5 . there is only one such row in the table . the home team record of this unqiue row is sheffield wednesday . the away team record of this unqiue row is oldham athletic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 5 } } ; and { eq { hop { filter_eq { all_rows ; score ; 5 } ; home team } ; sheffield wednesday } ; eq { hop { filter_eq { all_rows ; score ; 5 } ; away team } ; oldham athletic } } }, interpretation: select the rows whose original air date record fuzzily matches to november . there is only one such row in the table . the title record of this unqiue row is class action satisfaction .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ; november } } ; eq { hop { filter_eq { all_rows ; original air date ; november } ; title } ; class action satisfaction } }, interpretation: select the rows whose original air date record fuzzily matches to november . there is only one such row in the table . the title record of this unqiue row is class action satisfaction .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ; november } } ; eq { hop { filter_eq { all_rows ; original air date ; november } ; title } ; class action satisfaction } }, interpretation: select the row whose prominence record of all rows is 15th maximum . the mountain peak record of this row is mount fernow .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; prominence ; 15 } ; mountain peak } ; mount fernow }, interpretation: select the row whose prominence record of all rows is 15th maximum . the mountain peak record of this row is mount fernow .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; prominence ; 15 } ; mountain peak } ; mount fernow }, interpretation: select the rows whose vocalist record fuzzily matches to grin . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; vocalist ; grin } } ; 3 }, interpretation: select the rows whose vocalist record fuzzily matches to grin . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; vocalist ; grin } } ; 3 }, interpretation: select the row whose winning score record of all rows is 2nd maximum . the tournament record of this row is corning classic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winning score ; 2 } ; tournament } ; corning classic }, interpretation: select the row whose winning score record of all rows is 2nd maximum . the tournament record of this row is corning classic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winning score ; 2 } ; tournament } ; corning classic }, interpretation: select the rows whose actual version record fuzzily matches to n / a . there is only one such row in the table . the name record of this unqiue row is estyjs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; actual version ; n / a } } ; eq { hop { filter_eq { all_rows ; actual version ; n / a } ; name } ; estyjs } }, interpretation: select the rows whose actual version record fuzzily matches to n / a . there is only one such row in the table . the name record of this unqiue row is estyjs .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; actual version ; n / a } } ; eq { hop { filter_eq { all_rows ; actual version ; n / a } ; name } ; estyjs } }, interpretation: the average of the result record of all rows is 10.15 th .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; result } ; 10.15 th }, interpretation: the average of the result record of all rows is 10.15 th .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; result } ; 10.15 th }, interpretation: the sum of the against record of all rows is 53 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 53 }, interpretation: the sum of the against record of all rows is 53 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 53 }, interpretation: select the rows whose set 1 record fuzzily matches to 10:21 . there is only one such row in the table . the score record of this unqiue row is 0 - 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; set 1 ; 10:21 } } ; eq { hop { filter_eq { all_rows ; set 1 ; 10:21 } ; score } ; 0 - 2 } }, interpretation: select the rows whose set 1 record fuzzily matches to 10:21 . there is only one such row in the table . the score record of this unqiue row is 0 - 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; set 1 ; 10:21 } } ; eq { hop { filter_eq { all_rows ; set 1 ; 10:21 } ; score } ; 0 - 2 } }, interpretation: select the row whose original air date record of all rows is 1st maximum . the family / families record of this row is the haynes family and the potter family .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; family / families } ; the haynes family and the potter family }, interpretation: select the row whose original air date record of all rows is 1st maximum . the family / families record of this row is the haynes family and the potter family .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; family / families } ; the haynes family and the potter family }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: for the date records of all rows , all of them are greater than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; date ; 2000 }, interpretation: for the date records of all rows , all of them are greater than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; date ; 2000 }, interpretation: select the rows whose status record fuzzily matches to test match . there is only one such row in the table . the opposing teams record of this unqiue row is south africa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; test match } } ; eq { hop { filter_eq { all_rows ; status ; test match } ; opposing teams } ; south africa } }, interpretation: select the rows whose status record fuzzily matches to test match . there is only one such row in the table . the opposing teams record of this unqiue row is south africa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; test match } } ; eq { hop { filter_eq { all_rows ; status ; test match } ; opposing teams } ; south africa } }, interpretation: for the political party records of all rows , most of them fuzzily match to non - party .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; political party ; non - party }, interpretation: for the political party records of all rows , most of them fuzzily match to non - party .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; political party ; non - party }, interpretation: the 5th minimum track record of all rows is 5 . the song title record of the row with 5th minimum track record is crazy arms .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; track ; 5 } ; 5 } ; eq { hop { nth_argmin { all_rows ; track ; 5 } ; song title } ; crazy arms } }, interpretation: the 5th minimum track record of all rows is 5 . the song title record of the row with 5th minimum track record is crazy arms .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; track ; 5 } ; 5 } ; eq { hop { nth_argmin { all_rows ; track ; 5 } ; song title } ; crazy arms } }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: the 1st minimum date record of all rows is march 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 1 } ; march 22 }, interpretation: the 1st minimum date record of all rows is march 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 1 } ; march 22 }, interpretation: select the rows whose opponent record fuzzily matches to new york giants . there is only one such row in the table . the week record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; new york giants } } ; eq { hop { filter_eq { all_rows ; opponent ; new york giants } ; week } ; 1 } }, interpretation: select the rows whose opponent record fuzzily matches to new york giants . there is only one such row in the table . the week record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; new york giants } } ; eq { hop { filter_eq { all_rows ; opponent ; new york giants } ; week } ; 1 } }, interpretation: select the rows whose surface record fuzzily matches to hard . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; hard } } ; 7 }, interpretation: select the rows whose surface record fuzzily matches to hard . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; hard } } ; 7 }, interpretation: the average of the first elected record of all rows is 1953.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; first elected } ; 1953.5 }, interpretation: the average of the first elected record of all rows is 1953.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; first elected } ; 1953.5 }, interpretation: select the rows whose won record is greater than or equal to 10 . select the row whose lost record of these rows is 3rd maximum . the club record of this row is pontyclun rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater_eq { all_rows ; won ; 10 } ; lost ; 3 } ; club } ; pontyclun rfc }, interpretation: select the rows whose won record is greater than or equal to 10 . select the row whose lost record of these rows is 3rd maximum . the club record of this row is pontyclun rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater_eq { all_rows ; won ; 10 } ; lost ; 3 } ; club } ; pontyclun rfc }, interpretation: select the rows whose directed by record fuzzily matches to michael zinberg . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; michael zinberg } } ; 3 }, interpretation: select the rows whose directed by record fuzzily matches to michael zinberg . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; michael zinberg } } ; 3 }, interpretation: select the row whose omim record of all rows is maximum . the enzyme record of this row is uroporphyrinogen iii synthase .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; omim } ; enzyme } ; uroporphyrinogen iii synthase }, interpretation: select the row whose omim record of all rows is maximum . the enzyme record of this row is uroporphyrinogen iii synthase .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; omim } ; enzyme } ; uroporphyrinogen iii synthase }, interpretation: for the license records of all rows , most of them fuzzily match to proprietary .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; license ; proprietary }, interpretation: for the license records of all rows , most of them fuzzily match to proprietary .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; license ; proprietary }, interpretation: select the row whose year record of all rows is maximum . the chassis record of this row is ags jh25b ags jh27 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year } ; chassis } ; ags jh25b ags jh27 }, interpretation: select the row whose year record of all rows is maximum . the chassis record of this row is ags jh25b ags jh27 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year } ; chassis } ; ags jh25b ags jh27 }, interpretation: select the rows whose date record fuzzily matches to 2004 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 2004 } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to 2004 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 2004 } } ; 3 }, interpretation: select the rows whose music record fuzzily matches to george gershwin . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; music ; george gershwin } } ; 4 }, interpretation: select the rows whose music record fuzzily matches to george gershwin . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; music ; george gershwin } } ; 4 }, interpretation: select the rows whose player record fuzzily matches to mike weir . take the place record of this row . select the rows whose player record fuzzily matches to scott verplank . take the place record of this row . the first record is 2 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; mike weir } ; place } ; hop { filter_eq { all_rows ; player ; scott verplank } ; place } } ; 2 }, interpretation: select the rows whose player record fuzzily matches to mike weir . take the place record of this row . select the rows whose player record fuzzily matches to scott verplank . take the place record of this row . the first record is 2 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; mike weir } ; place } ; hop { filter_eq { all_rows ; player ; scott verplank } ; place } } ; 2 }, interpretation: select the rows whose seasons record is equal to 4 . there is only one such row in the table . the country record of this unqiue row is south korea .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; seasons ; 4 } } ; eq { hop { filter_eq { all_rows ; seasons ; 4 } ; country } ; south korea } }, interpretation: select the rows whose seasons record is equal to 4 . there is only one such row in the table . the country record of this unqiue row is south korea .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; seasons ; 4 } } ; eq { hop { filter_eq { all_rows ; seasons ; 4 } ; country } ; south korea } }, interpretation: select the rows whose visual arts record fuzzily matches to sharon hayes . there is only one such row in the table . the year record of this unqiue row is 2013 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; visual arts ; sharon hayes } } ; eq { hop { filter_eq { all_rows ; visual arts ; sharon hayes } ; year } ; 2013 } }, interpretation: select the rows whose visual arts record fuzzily matches to sharon hayes . there is only one such row in the table . the year record of this unqiue row is 2013 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; visual arts ; sharon hayes } } ; eq { hop { filter_eq { all_rows ; visual arts ; sharon hayes } ; year } ; 2013 } }, interpretation: for the played records of all rows , most of them are equal to 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 14 }, interpretation: for the played records of all rows , most of them are equal to 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 14 }, interpretation: for the high points records of all rows , most of them fuzzily match to r pierce .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; r pierce }, interpretation: for the high points records of all rows , most of them fuzzily match to r pierce .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; r pierce }, interpretation: select the rows whose title record fuzzily matches to face / off . take the year record of this row . select the rows whose title record fuzzily matches to antz . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; face / off } ; year } ; hop { filter_eq { all_rows ; title ; antz } ; year } }, interpretation: select the rows whose title record fuzzily matches to face / off . take the year record of this row . select the rows whose title record fuzzily matches to antz . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; face / off } ; year } ; hop { filter_eq { all_rows ; title ; antz } ; year } }, interpretation: the average of the starts record of all rows is 7.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; starts } ; 7.67 }, interpretation: the average of the starts record of all rows is 7.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; starts } ; 7.67 }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is h\u00e9rcules cf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; h\u00e9rcules cf }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is h\u00e9rcules cf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; h\u00e9rcules cf }, interpretation: select the row whose after record of all rows is minimum . the player record of this row is matt kuchar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; after } ; player } ; matt kuchar }, interpretation: select the row whose after record of all rows is minimum . the player record of this row is matt kuchar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; after } ; player } ; matt kuchar }, interpretation: the 3rd minimum time record of all rows is 6:41.39 . the rank record of the row with 3rd minimum time record is 3 . the country record of the row with 3rd minimum time record is australia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; time ; 3 } ; 6:41.39 } ; and { eq { hop { nth_argmin { all_rows ; time ; 3 } ; rank } ; 3 } ; eq { hop { nth_argmin { all_rows ; time ; 3 } ; country } ; australia } } }, interpretation: the 3rd minimum time record of all rows is 6:41.39 . the rank record of the row with 3rd minimum time record is 3 . the country record of the row with 3rd minimum time record is australia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; time ; 3 } ; 6:41.39 } ; and { eq { hop { nth_argmin { all_rows ; time ; 3 } ; rank } ; 3 } ; eq { hop { nth_argmin { all_rows ; time ; 3 } ; country } ; australia } } }, interpretation: select the row whose pick record of all rows is 6th minimum . the player record of this row is mike wacker .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 6 } ; player } ; mike wacker }, interpretation: select the row whose pick record of all rows is 6th minimum . the player record of this row is mike wacker .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 6 } ; player } ; mike wacker }, interpretation: select the rows whose goal difference record is less than 0 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; goal difference ; 0 } } ; 5 }, interpretation: select the rows whose goal difference record is less than 0 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; goal difference ; 0 } } ; 5 }, interpretation: select the rows whose country record fuzzily matches to nigeria . take the penalty record of this row . select the rows whose country record fuzzily matches to uzbekistan . take the penalty record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; country ; nigeria } ; penalty } ; hop { filter_eq { all_rows ; country ; uzbekistan } ; penalty } }, interpretation: select the rows whose country record fuzzily matches to nigeria . take the penalty record of this row . select the rows whose country record fuzzily matches to uzbekistan . take the penalty record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; country ; nigeria } ; penalty } ; hop { filter_eq { all_rows ; country ; uzbekistan } ; penalty } }, interpretation: select the rows whose date of polls record fuzzily matches to december . there is only one such row in the table . the state record of this unqiue row is mizoram .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date of polls ; december } } ; eq { hop { filter_eq { all_rows ; date of polls ; december } ; state } ; mizoram } }, interpretation: select the rows whose date of polls record fuzzily matches to december . there is only one such row in the table . the state record of this unqiue row is mizoram .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date of polls ; december } } ; eq { hop { filter_eq { all_rows ; date of polls ; december } ; state } ; mizoram } }, interpretation: select the rows whose season record is greater than 2005 . among these rows , select the rows whose teams record is equal to 16 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; season ; 2005 } ; teams ; 16 } } ; 4 }, interpretation: select the rows whose season record is greater than 2005 . among these rows , select the rows whose teams record is equal to 16 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; season ; 2005 } ; teams ; 16 } } ; 4 }, interpretation: select the rows whose remittances 2011 record is greater than 10 . among these rows , select the rows whose remittances 2010 record is greater than 50 . there is only one such row in the table . the country record of this unqiue row is india .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_greater { all_rows ; remittances 2011 ; 10 } ; remittances 2010 ; 50 } } ; eq { hop { filter_greater { filter_greater { all_rows ; remittances 2011 ; 10 } ; remittances 2010 ; 50 } ; country } ; india } }, interpretation: select the rows whose remittances 2011 record is greater than 10 . among these rows , select the rows whose remittances 2010 record is greater than 50 . there is only one such row in the table . the country record of this unqiue row is india .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_greater { all_rows ; remittances 2011 ; 10 } ; remittances 2010 ; 50 } } ; eq { hop { filter_greater { filter_greater { all_rows ; remittances 2011 ; 10 } ; remittances 2010 ; 50 } ; country } ; india } }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: the average of the against record of all rows is 14.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; against } ; 14.6 }, interpretation: the average of the against record of all rows is 14.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; against } ; 14.6 }, interpretation: select the rows whose tv time record fuzzily matches to fox . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv time ; fox } } ; 2 }, interpretation: select the rows whose tv time record fuzzily matches to fox . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv time ; fox } } ; 2 }, interpretation: select the row whose torque ( nm ) / rpm record of all rows is maximum . the model / engine record of this row is 2.0 duratec he .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; torque ( nm ) / rpm } ; model / engine } ; 2.0 duratec he }, interpretation: select the row whose torque ( nm ) / rpm record of all rows is maximum . the model / engine record of this row is 2.0 duratec he .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; torque ( nm ) / rpm } ; model / engine } ; 2.0 duratec he }, interpretation: select the rows whose opponent record fuzzily matches to murilo bustamante . take the round record of this row . select the rows whose opponent record fuzzily matches to david abbott . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; murilo bustamante } ; round } ; hop { filter_eq { all_rows ; opponent ; david abbott } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to murilo bustamante . take the round record of this row . select the rows whose opponent record fuzzily matches to david abbott . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; murilo bustamante } ; round } ; hop { filter_eq { all_rows ; opponent ; david abbott } ; round } }, interpretation: the 1st maximum crowd record of all rows is 26000 . the venue record of the row with 1st maximum crowd record is punt road oval . the date record of the row with 1st maximum crowd record is 9 august 1941 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; crowd ; 1 } ; 26000 } ; and { eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; punt road oval } ; eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; date } ; 9 august 1941 } } }, interpretation: the 1st maximum crowd record of all rows is 26000 . the venue record of the row with 1st maximum crowd record is punt road oval . the date record of the row with 1st maximum crowd record is 9 august 1941 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; crowd ; 1 } ; 26000 } ; and { eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; punt road oval } ; eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; date } ; 9 august 1941 } } }, interpretation: for the first elected records of all rows , most of them are equal to 1982 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first elected ; 1982 }, interpretation: for the first elected records of all rows , most of them are equal to 1982 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first elected ; 1982 }, interpretation: select the rows whose player record fuzzily matches to tom bladon . take the round record of this row . select the rows whose player record fuzzily matches to jim watson . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; tom bladon } ; round } ; hop { filter_eq { all_rows ; player ; jim watson } ; round } }, interpretation: select the rows whose player record fuzzily matches to tom bladon . take the round record of this row . select the rows whose player record fuzzily matches to jim watson . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; tom bladon } ; round } ; hop { filter_eq { all_rows ; player ; jim watson } ; round } }, interpretation: select the rows whose player record fuzzily matches to nick price . take the wins record of this row . select the rows whose player record fuzzily matches to fred couples . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; nick price } ; wins } ; hop { filter_eq { all_rows ; player ; fred couples } ; wins } }, interpretation: select the rows whose player record fuzzily matches to nick price . take the wins record of this row . select the rows whose player record fuzzily matches to fred couples . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; nick price } ; wins } ; hop { filter_eq { all_rows ; player ; fred couples } ; wins } }, interpretation: select the row whose 2010 record of all rows is maximum . the channel record of this row is rai 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2010 } ; channel } ; rai 1 }, interpretation: select the row whose 2010 record of all rows is maximum . the channel record of this row is rai 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2010 } ; channel } ; rai 1 }, interpretation: select the rows whose country record fuzzily matches to fiji . there is only one such row in the table . the player record of this unqiue row is vijay singh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; fiji } } ; eq { hop { filter_eq { all_rows ; country ; fiji } ; player } ; vijay singh } }, interpretation: select the rows whose country record fuzzily matches to fiji . there is only one such row in the table . the player record of this unqiue row is vijay singh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; fiji } } ; eq { hop { filter_eq { all_rows ; country ; fiji } ; player } ; vijay singh } }, interpretation: select the rows whose total matches record is equal to 5 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; total matches ; 5 } } ; 6 }, interpretation: select the rows whose total matches record is equal to 5 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; total matches ; 5 } } ; 6 }, interpretation: select the rows whose tv station record fuzzily matches to fuji tv . select the row whose average ratings record of these rows is minimum . the romaji title record of this row is rikon bengoshi ii ~ handsome woman ~ .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; tv station ; fuji tv } ; average ratings } ; romaji title } ; rikon bengoshi ii ~ handsome woman ~ }, interpretation: select the rows whose tv station record fuzzily matches to fuji tv . select the row whose average ratings record of these rows is minimum . the romaji title record of this row is rikon bengoshi ii ~ handsome woman ~ .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; tv station ; fuji tv } ; average ratings } ; romaji title } ; rikon bengoshi ii ~ handsome woman ~ }, interpretation: select the row whose package version record of all rows is 2nd maximum . the carrier record of this row is vodafone au .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; package version ; 2 } ; carrier } ; vodafone au }, interpretation: select the row whose package version record of all rows is 2nd maximum . the carrier record of this row is vodafone au .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; package version ; 2 } ; carrier } ; vodafone au }, interpretation: select the row whose winners share record of all rows is maximum . the year record of this row is 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winners share } ; year } ; 2010 }, interpretation: select the row whose winners share record of all rows is maximum . the year record of this row is 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winners share } ; year } ; 2010 }, interpretation: select the row whose date record of all rows is 3rd maximum . the tournament record of this row is westende .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 3 } ; tournament } ; westende }, interpretation: select the row whose date record of all rows is 3rd maximum . the tournament record of this row is westende .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 3 } ; tournament } ; westende }, interpretation: for the viewing figure records of all rows , most of them are greater than 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; viewing figure ; 7 }, interpretation: for the viewing figure records of all rows , most of them are greater than 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; viewing figure ; 7 }, interpretation: select the row whose time record of all rows is 3rd minimum . the rider record of this row is ross johnson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; rider } ; ross johnson }, interpretation: select the row whose time record of all rows is 3rd minimum . the rider record of this row is ross johnson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; rider } ; ross johnson }, interpretation: select the rows whose notes record fuzzily matches to enid . take the built record of this row . select the rows whose notes record fuzzily matches to snowdon . take the built record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; notes ; enid } ; built } ; hop { filter_eq { all_rows ; notes ; snowdon } ; built } }, interpretation: select the rows whose notes record fuzzily matches to enid . take the built record of this row . select the rows whose notes record fuzzily matches to snowdon . take the built record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; notes ; enid } ; built } ; hop { filter_eq { all_rows ; notes ; snowdon } ; built } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is september 30 , 1990 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; september 30 , 1990 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is september 30 , 1990 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; september 30 , 1990 }, interpretation: select the row whose entered service record of all rows is 3rd minimum . the locomotive record of this row is c503 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; entered service ; 3 } ; locomotive } ; c503 }, interpretation: select the row whose entered service record of all rows is 3rd minimum . the locomotive record of this row is c503 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; entered service ; 3 } ; locomotive } ; c503 }, interpretation: for the gender records of all rows , all of them fuzzily match to coed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; gender ; coed }, interpretation: for the home records of all rows , most of them fuzzily match to philadelphia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; home ; philadelphia }, interpretation: for the home records of all rows , most of them fuzzily match to philadelphia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; home ; philadelphia }, interpretation: the average of the to par record of all rows is -5.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -5.6 }, interpretation: the average of the to par record of all rows is -5.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -5.6 }, interpretation: select the rows whose original album record fuzzily matches to previously unreleased . among these rows , select the rows whose time record is greater than 4:00 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; original album ; previously unreleased } ; time ; 4:00 } } ; 2 }, interpretation: select the rows whose original album record fuzzily matches to previously unreleased . among these rows , select the rows whose time record is greater than 4:00 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; original album ; previously unreleased } ; time ; 4:00 } } ; 2 }, interpretation: select the rows whose score record fuzzily matches to w . among these rows , select the rows whose high points record fuzzily matches to kevin martin . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; w } ; high points ; kevin martin } } ; 3 }, interpretation: select the rows whose score record fuzzily matches to w . among these rows , select the rows whose high points record fuzzily matches to kevin martin . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; w } ; high points ; kevin martin } } ; 3 }, interpretation: select the rows whose year record is equal to 1987 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 1987 } } ; 5 }, interpretation: select the rows whose year record is equal to 1987 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 1987 } } ; 5 }, interpretation: select the rows whose crowd record is less than 10000 . there is only one such row in the table . the home team record of this unqiue row is st kilda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10000 } } ; eq { hop { filter_less { all_rows ; crowd ; 10000 } ; home team } ; st kilda } }, interpretation: select the rows whose crowd record is less than 10000 . there is only one such row in the table . the home team record of this unqiue row is st kilda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10000 } } ; eq { hop { filter_less { all_rows ; crowd ; 10000 } ; home team } ; st kilda } }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is june 24 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; june 24 }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is june 24 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; june 24 }, interpretation: for the date records of all rows , all of them fuzzily match to december .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; december }, interpretation: for the date records of all rows , all of them fuzzily match to december .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; december }, interpretation: select the row whose 2011 ( imf ) record of all rows is 3rd maximum . the nation record of this row is uruguay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; 2011 ( imf ) ; 3 } ; nation } ; uruguay }, interpretation: select the row whose 2011 ( imf ) record of all rows is 3rd maximum . the nation record of this row is uruguay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; 2011 ( imf ) ; 3 } ; nation } ; uruguay }, interpretation: select the rows whose 2003 - 04 pts record is equal to - . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2003 - 04 pts ; - } } ; 4 }, interpretation: select the rows whose 2003 - 04 pts record is equal to - . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2003 - 04 pts ; - } } ; 4 }, interpretation: select the rows whose country record fuzzily matches to russia . the sum of the uci points record of these rows is 90 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; country ; russia } ; uci points } ; 90 }, interpretation: select the rows whose country record fuzzily matches to russia . the sum of the uci points record of these rows is 90 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; country ; russia } ; uci points } ; 90 }, interpretation: select the rows whose home team record fuzzily matches to melbourne . among these rows , select the rows whose crowd record is greater than 10000 . there is only one such row in the table . the venue record of this unqiue row is mcg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; home team ; melbourne } ; crowd ; 10000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; home team ; melbourne } ; crowd ; 10000 } ; venue } ; mcg } }, interpretation: select the rows whose home team record fuzzily matches to melbourne . among these rows , select the rows whose crowd record is greater than 10000 . there is only one such row in the table . the venue record of this unqiue row is mcg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; home team ; melbourne } ; crowd ; 10000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; home team ; melbourne } ; crowd ; 10000 } ; venue } ; mcg } }, interpretation: select the rows whose height record fuzzily matches to 6 ' 4 . among these rows , select the rows whose round record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; height ; 6 ' 4 } ; round ; 2 } } ; 2 }, interpretation: select the rows whose height record fuzzily matches to 6 ' 4 . among these rows , select the rows whose round record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; height ; 6 ' 4 } ; round ; 2 } } ; 2 }, interpretation: the 3rd maximum years for jazz record of all rows is 1982 - 85 . the player record of the row with 3rd maximum years for jazz record is john drew .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; years for jazz ; 3 } ; 1982 - 85 } ; eq { hop { nth_argmax { all_rows ; years for jazz ; 3 } ; player } ; john drew } }, interpretation: the 3rd maximum years for jazz record of all rows is 1982 - 85 . the player record of the row with 3rd maximum years for jazz record is john drew .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; years for jazz ; 3 } ; 1982 - 85 } ; eq { hop { nth_argmax { all_rows ; years for jazz ; 3 } ; player } ; john drew } }, interpretation: select the row whose goals scored ( gf ) record of all rows is maximum . the team ( equipo ) record of this row is arabe unido .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals scored ( gf ) } ; team ( equipo ) } ; arabe unido }, interpretation: select the row whose goals scored ( gf ) record of all rows is maximum . the team ( equipo ) record of this row is arabe unido .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals scored ( gf ) } ; team ( equipo ) } ; arabe unido }, interpretation: select the rows whose type of game record fuzzily matches to friendly . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type of game ; friendly } } ; 5 }, interpretation: select the rows whose type of game record fuzzily matches to friendly . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type of game ; friendly } } ; 5 }, interpretation: select the rows whose tournament record fuzzily matches to brazil . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; brazil } } ; 3 }, interpretation: select the rows whose tournament record fuzzily matches to brazil . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; brazil } } ; 3 }, interpretation: select the row whose date record of all rows is 1st minimum . the title record of this row is the love letter .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; title } ; the love letter }, interpretation: select the row whose date record of all rows is 1st minimum . the title record of this row is the love letter .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; title } ; the love letter }, interpretation: select the rows whose district record fuzzily matches to sagar . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; district ; sagar } } ; 3 }, interpretation: select the rows whose district record fuzzily matches to sagar . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; district ; sagar } } ; 3 }, interpretation: select the rows whose gold record is greater than 100 . there is only one such row in the table . the province record of this unqiue row is bangkok .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; gold ; 100 } } ; eq { hop { filter_greater { all_rows ; gold ; 100 } ; province } ; bangkok } }, interpretation: select the rows whose gold record is greater than 100 . there is only one such row in the table . the province record of this unqiue row is bangkok .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; gold ; 100 } } ; eq { hop { filter_greater { all_rows ; gold ; 100 } ; province } ; bangkok } }, interpretation: select the row whose vessels record of all rows is 2nd maximum . the ship name record of this row is theofilos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; vessels ; 2 } ; ship name } ; theofilos }, interpretation: select the row whose vessels record of all rows is 2nd maximum . the ship name record of this row is theofilos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; vessels ; 2 } ; ship name } ; theofilos }, interpretation: select the rows whose artist record fuzzily matches to hind . take the points record of this row . select the rows whose artist record fuzzily matches to gisela . take the points record of this row . the first record is 5 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; artist ; hind } ; points } ; hop { filter_eq { all_rows ; artist ; gisela } ; points } } ; 5 }, interpretation: select the rows whose artist record fuzzily matches to hind . take the points record of this row . select the rows whose artist record fuzzily matches to gisela . take the points record of this row . the first record is 5 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; artist ; hind } ; points } ; hop { filter_eq { all_rows ; artist ; gisela } ; points } } ; 5 }, interpretation: select the rows whose year record fuzzily matches to 2005 . take the points record of this row . select the rows whose year record fuzzily matches to 2007 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2005 } ; points } ; hop { filter_eq { all_rows ; year ; 2007 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 2005 . take the points record of this row . select the rows whose year record fuzzily matches to 2007 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2005 } ; points } ; hop { filter_eq { all_rows ; year ; 2007 } ; points } }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the opponent record of this row is rhein fire .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; opponent } ; rhein fire }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the opponent record of this row is rhein fire .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; opponent } ; rhein fire }, interpretation: select the rows whose coach record fuzzily matches to bj coleman . there is only one such row in the table . the episode summary record of this unqiue row is chris is made into a celebrity assistant .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; coach ; bj coleman } } ; eq { hop { filter_eq { all_rows ; coach ; bj coleman } ; episode summary } ; chris is made into a celebrity assistant } }, interpretation: select the rows whose coach record fuzzily matches to bj coleman . there is only one such row in the table . the episode summary record of this unqiue row is chris is made into a celebrity assistant .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; coach ; bj coleman } } ; eq { hop { filter_eq { all_rows ; coach ; bj coleman } ; episode summary } ; chris is made into a celebrity assistant } }, interpretation: select the rows whose project record fuzzily matches to \u00f6zhan canayd\u0131n project . take the capacity record of this row . select the rows whose project record fuzzily matches to faruk s\u00fcren project . take the capacity record of this row . the first record is greater than the second record . the capacity record of the first row is 52652 . the capacity record of the second row is 40482 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; project ; \u00f6zhan canayd\u0131n project } ; capacity } ; hop { filter_eq { all_rows ; project ; faruk s\u00fcren project } ; capacity } } ; and { eq { hop { filter_eq { all_rows ; project ; \u00f6zhan canayd\u0131n project } ; capacity } ; 52652 } ; eq { hop { filter_eq { all_rows ; project ; faruk s\u00fcren project } ; capacity } ; 40482 } } }, interpretation: select the rows whose project record fuzzily matches to \u00f6zhan canayd\u0131n project . take the capacity record of this row . select the rows whose project record fuzzily matches to faruk s\u00fcren project . take the capacity record of this row . the first record is greater than the second record . the capacity record of the first row is 52652 . the capacity record of the second row is 40482 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; project ; \u00f6zhan canayd\u0131n project } ; capacity } ; hop { filter_eq { all_rows ; project ; faruk s\u00fcren project } ; capacity } } ; and { eq { hop { filter_eq { all_rows ; project ; \u00f6zhan canayd\u0131n project } ; capacity } ; 52652 } ; eq { hop { filter_eq { all_rows ; project ; faruk s\u00fcren project } ; capacity } ; 40482 } } }, interpretation: for the killed records of all rows , most of them are greater than 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; killed ; 13 }, interpretation: for the killed records of all rows , most of them are greater than 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; killed ; 13 }, interpretation: select the rows whose receiving tds record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; receiving tds ; 0 } } ; 2 }, interpretation: select the rows whose receiving tds record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; receiving tds ; 0 } } ; 2 }, interpretation: the average of the gold record of all rows is 0.4375 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 0.4375 }, interpretation: the average of the gold record of all rows is 0.4375 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 0.4375 }, interpretation: select the rows whose surface record fuzzily matches to carpet . there is only one such row in the table . the date record of this unqiue row is 28 october 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; carpet } } ; eq { hop { filter_eq { all_rows ; surface ; carpet } ; date } ; 28 october 2007 } }, interpretation: select the rows whose surface record fuzzily matches to carpet . there is only one such row in the table . the date record of this unqiue row is 28 october 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; carpet } } ; eq { hop { filter_eq { all_rows ; surface ; carpet } ; date } ; 28 october 2007 } }, interpretation: select the row whose date successor seated record of all rows is maximum . the district record of this row is ohio 6th .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date successor seated } ; district } ; ohio 6th }, interpretation: select the row whose date successor seated record of all rows is maximum . the district record of this row is ohio 6th .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date successor seated } ; district } ; ohio 6th }, interpretation: for the result records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; re - elected }, interpretation: for the result records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; re - elected }, interpretation: select the rows whose shooter record fuzzily matches to usa . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; shooter ; usa } } ; 2 }, interpretation: select the rows whose shooter record fuzzily matches to usa . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; shooter ; usa } } ; 2 }, interpretation: select the rows whose city or town record fuzzily matches to istanbul . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; city or town ; istanbul } } ; 4 }, interpretation: select the rows whose city or town record fuzzily matches to istanbul . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; city or town ; istanbul } } ; 4 }, interpretation: select the rows whose opponent record fuzzily matches to pittsburgh penguins . among these rows , select the rows whose location / attendance record fuzzily matches to consol energy center . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; opponent ; pittsburgh penguins } ; location / attendance ; consol energy center } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to pittsburgh penguins . among these rows , select the rows whose location / attendance record fuzzily matches to consol energy center . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; opponent ; pittsburgh penguins } ; location / attendance ; consol energy center } } ; 2 }, interpretation: select the rows whose children together record fuzzily matches to 1 son . there is only one such row in the table . the name record of this unqiue row is norris church mailer . the deceased spouse record of this unqiue row is norman mailer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; children together ; 1 son } } ; and { eq { hop { filter_eq { all_rows ; children together ; 1 son } ; name } ; norris church mailer } ; eq { hop { filter_eq { all_rows ; children together ; 1 son } ; deceased spouse } ; norman mailer } } }, interpretation: select the rows whose children together record fuzzily matches to 1 son . there is only one such row in the table . the name record of this unqiue row is norris church mailer . the deceased spouse record of this unqiue row is norman mailer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; children together ; 1 son } } ; and { eq { hop { filter_eq { all_rows ; children together ; 1 son } ; name } ; norris church mailer } ; eq { hop { filter_eq { all_rows ; children together ; 1 son } ; deceased spouse } ; norman mailer } } }, interpretation: select the rows whose partner record fuzzily matches to stephanie vogt . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; stephanie vogt } } ; 2 }, interpretation: select the rows whose partner record fuzzily matches to stephanie vogt . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; stephanie vogt } } ; 2 }, interpretation: for the result records of all rows , most of them fuzzily match to safe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; safe }, interpretation: for the result records of all rows , most of them fuzzily match to safe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; safe }, interpretation: select the rows whose director record fuzzily matches to pamela fryman . among these rows , select the rows whose original air date record fuzzily matches to april . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; director ; pamela fryman } ; original air date ; april } } ; 3 }, interpretation: select the rows whose director record fuzzily matches to pamela fryman . among these rows , select the rows whose original air date record fuzzily matches to april . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; director ; pamela fryman } ; original air date ; april } } ; 3 }, interpretation: for the result records of all rows , most of them fuzzily match to aus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; aus }, interpretation: for the result records of all rows , most of them fuzzily match to aus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; aus }, interpretation: for the duration records of all rows , most of them are greater than 4:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; duration ; 4:00 }, interpretation: for the duration records of all rows , most of them are greater than 4:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; duration ; 4:00 }, interpretation: for the date records of all rows , all of them fuzzily match to 26 august 1972 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 26 august 1972 }, interpretation: for the date records of all rows , all of them fuzzily match to 26 august 1972 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 26 august 1972 }, interpretation: select the rows whose name record fuzzily matches to vilson ahmeti . take the term start record of this row . select the rows whose name record fuzzily matches to ilir meta . take the term start record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; vilson ahmeti } ; term start } ; hop { filter_eq { all_rows ; name ; ilir meta } ; term start } }, interpretation: select the rows whose name record fuzzily matches to vilson ahmeti . take the term start record of this row . select the rows whose name record fuzzily matches to ilir meta . take the term start record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; vilson ahmeti } ; term start } ; hop { filter_eq { all_rows ; name ; ilir meta } ; term start } }, interpretation: select the row whose 1st run record of all rows is 2nd minimum . the name record of this row is donny robinson ( usa ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; 1st run ; 2 } ; name } ; donny robinson ( usa ) }, interpretation: select the row whose 1st run record of all rows is 2nd minimum . the name record of this row is donny robinson ( usa ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; 1st run ; 2 } ; name } ; donny robinson ( usa ) }, interpretation: select the row whose juries record of all rows is maximum . the artist record of this row is danny saucedo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; juries } ; artist } ; danny saucedo }, interpretation: select the row whose juries record of all rows is maximum . the artist record of this row is danny saucedo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; juries } ; artist } ; danny saucedo }, interpretation: select the rows whose name record fuzzily matches to tyler hansbrough . take the height record of this row . select the rows whose name record fuzzily matches to wes miller . take the height record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; tyler hansbrough } ; height } ; hop { filter_eq { all_rows ; name ; wes miller } ; height } }, interpretation: select the rows whose name record fuzzily matches to tyler hansbrough . take the height record of this row . select the rows whose name record fuzzily matches to wes miller . take the height record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; tyler hansbrough } ; height } ; hop { filter_eq { all_rows ; name ; wes miller } ; height } }, interpretation: select the rows whose opponent record fuzzily matches to alexey ignashov . take the round record of this row . select the rows whose opponent record fuzzily matches to lee hasdell . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; alexey ignashov } ; round } ; hop { filter_eq { all_rows ; opponent ; lee hasdell } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to alexey ignashov . take the round record of this row . select the rows whose opponent record fuzzily matches to lee hasdell . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; alexey ignashov } ; round } ; hop { filter_eq { all_rows ; opponent ; lee hasdell } ; round } }, interpretation: select the row whose date of vacancy record of all rows is 1st minimum . the outgoing manager record of this row is thomas von heesen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date of vacancy ; 1 } ; outgoing manager } ; thomas von heesen }, interpretation: select the row whose date of vacancy record of all rows is 1st minimum . the outgoing manager record of this row is thomas von heesen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date of vacancy ; 1 } ; outgoing manager } ; thomas von heesen }, interpretation: the average of the attendance record of all rows is 22526 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 22526 }, interpretation: the average of the attendance record of all rows is 22526 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 22526 }, interpretation: select the rows whose games record is greater than 48 . among these rows , select the rows whose goals record is equal to 27 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; games ; 48 } ; goals ; 27 } } ; 2 }, interpretation: select the rows whose games record is greater than 48 . among these rows , select the rows whose goals record is equal to 27 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; games ; 48 } ; goals ; 27 } } ; 2 }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the home team score record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; home team score } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the home team score record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; home team score } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } }, interpretation: for the city of license records of all rows , all of them fuzzily match to texas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; city of license ; texas }, interpretation: for the city of license records of all rows , all of them fuzzily match to texas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; city of license ; texas }, interpretation: the average of the time record of all rows is 1:09.00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 1:09.00 }, interpretation: the average of the time record of all rows is 1:09.00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 1:09.00 }, interpretation: select the rows whose city record fuzzily matches to mansuriyah . there is only one such row in the table . the club record of this unqiue row is arabi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; city ; mansuriyah } } ; eq { hop { filter_eq { all_rows ; city ; mansuriyah } ; club } ; arabi } }, interpretation: select the rows whose city record fuzzily matches to mansuriyah . there is only one such row in the table . the club record of this unqiue row is arabi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; city ; mansuriyah } } ; eq { hop { filter_eq { all_rows ; city ; mansuriyah } ; club } ; arabi } }, interpretation: select the rows whose class / type record fuzzily matches to passenger ship . there is only one such row in the table . the builder record of this unqiue row is john roach and son .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; class / type ; passenger ship } } ; eq { hop { filter_eq { all_rows ; class / type ; passenger ship } ; builder } ; john roach and son } }, interpretation: select the rows whose class / type record fuzzily matches to passenger ship . there is only one such row in the table . the builder record of this unqiue row is john roach and son .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; class / type ; passenger ship } } ; eq { hop { filter_eq { all_rows ; class / type ; passenger ship } ; builder } ; john roach and son } }, interpretation: select the row whose pts record of all rows is maximum . the team record of this row is castres olympique .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; pts } ; team } ; castres olympique }, interpretation: select the row whose pts record of all rows is maximum . the team record of this row is castres olympique .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; pts } ; team } ; castres olympique }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 3 }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 3 }, interpretation: for the type records of all rows , all of them fuzzily match to private .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; type ; private }, interpretation: select the row whose date record of all rows is minimum . the location attendance record of this row is verizon center 20173 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; location attendance } ; verizon center 20173 }, interpretation: select the row whose date record of all rows is minimum . the location attendance record of this row is verizon center 20173 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; location attendance } ; verizon center 20173 }, interpretation: select the row whose total units sold record of all rows is 2nd maximum . the title record of this row is wii fit .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total units sold ; 2 } ; title } ; wii fit }, interpretation: select the row whose total units sold record of all rows is 2nd maximum . the title record of this row is wii fit .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total units sold ; 2 } ; title } ; wii fit }, interpretation: select the row whose time record of all rows is minimum . the athlete record of this row is veronica campbell - brown .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; athlete } ; veronica campbell - brown }, interpretation: select the row whose time record of all rows is minimum . the athlete record of this row is veronica campbell - brown .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; athlete } ; veronica campbell - brown }, interpretation: select the rows whose directed by record fuzzily matches to levie isaacks . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; levie isaacks } } ; 5 }, interpretation: select the rows whose directed by record fuzzily matches to levie isaacks . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; levie isaacks } } ; 5 }, interpretation: select the rows whose laps record is equal to 39 . there is only one such row in the table . the year record of this unqiue row is 1949 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; laps ; 39 } } ; eq { hop { filter_eq { all_rows ; laps ; 39 } ; year } ; 1949 } }, interpretation: select the rows whose laps record is equal to 39 . there is only one such row in the table . the year record of this unqiue row is 1949 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; laps ; 39 } } ; eq { hop { filter_eq { all_rows ; laps ; 39 } ; year } ; 1949 } }, interpretation: select the rows whose ratings record is greater than 2.00 million . there is only one such row in the table . the episode record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; ratings ; 2.00 million } } ; eq { hop { filter_greater { all_rows ; ratings ; 2.00 million } ; episode } ; 1 } }, interpretation: select the rows whose ratings record is greater than 2.00 million . there is only one such row in the table . the episode record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; ratings ; 2.00 million } } ; eq { hop { filter_greater { all_rows ; ratings ; 2.00 million } ; episode } ; 1 } }, interpretation: for the court surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; court surface ; hard }, interpretation: for the court surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; court surface ; hard }, interpretation: select the rows whose written by record fuzzily matches to amy engelberg & wendy engelberg . there is only one such row in the table . the title record of this unqiue row is dead model walking .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; amy engelberg & wendy engelberg } } ; eq { hop { filter_eq { all_rows ; written by ; amy engelberg & wendy engelberg } ; title } ; dead model walking } }, interpretation: select the rows whose written by record fuzzily matches to amy engelberg & wendy engelberg . there is only one such row in the table . the title record of this unqiue row is dead model walking .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; amy engelberg & wendy engelberg } } ; eq { hop { filter_eq { all_rows ; written by ; amy engelberg & wendy engelberg } ; title } ; dead model walking } }, interpretation: select the rows whose championship record fuzzily matches to world snooker championship . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; championship ; world snooker championship } } ; 2 }, interpretation: select the rows whose championship record fuzzily matches to world snooker championship . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; championship ; world snooker championship } } ; 2 }, interpretation: select the rows whose result record is equal to 0 . there is only one such row in the table . the week record of this unqiue row is 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 0 } } ; eq { hop { filter_eq { all_rows ; result ; 0 } ; week } ; 15 } }, interpretation: select the rows whose result record is equal to 0 . there is only one such row in the table . the week record of this unqiue row is 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 0 } } ; eq { hop { filter_eq { all_rows ; result ; 0 } ; week } ; 15 } }, interpretation: select the rows whose batting partners record fuzzily matches to tim curtis and tom moody . take the runs record of this row . select the rows whose batting partners record fuzzily matches to chris read and andrew harris . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; batting partners ; tim curtis and tom moody } ; runs } ; hop { filter_eq { all_rows ; batting partners ; chris read and andrew harris } ; runs } }, interpretation: select the rows whose batting partners record fuzzily matches to tim curtis and tom moody . take the runs record of this row . select the rows whose batting partners record fuzzily matches to chris read and andrew harris . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; batting partners ; tim curtis and tom moody } ; runs } ; hop { filter_eq { all_rows ; batting partners ; chris read and andrew harris } ; runs } }, interpretation: select the rows whose game site record fuzzily matches to forbes field . the minimum date record of these rows is sunday september 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; game site ; forbes field } ; date } ; sunday september 20 }, interpretation: select the rows whose game site record fuzzily matches to forbes field . the minimum date record of these rows is sunday september 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; game site ; forbes field } ; date } ; sunday september 20 }, interpretation: select the rows whose team classification record fuzzily matches to relax - gam . for the sprints classification records of these rows , most of them fuzzily match to v\u00edctor hugo pe\u00f1a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; team classification ; relax - gam } ; sprints classification ; v\u00edctor hugo pe\u00f1a }, interpretation: select the rows whose team classification record fuzzily matches to relax - gam . for the sprints classification records of these rows , most of them fuzzily match to v\u00edctor hugo pe\u00f1a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; team classification ; relax - gam } ; sprints classification ; v\u00edctor hugo pe\u00f1a }, interpretation: select the rows whose event record fuzzily matches to men 's . the average of the swim ( 1.5 km ) record of these rows is 18:41 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; event ; men 's } ; swim ( 1.5 km ) } ; 18:41 }, interpretation: select the rows whose event record fuzzily matches to men 's . the average of the swim ( 1.5 km ) record of these rows is 18:41 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; event ; men 's } ; swim ( 1.5 km ) } ; 18:41 }, interpretation: select the row whose population record of all rows is maximum . the borough record of this row is fleurimont .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; borough } ; fleurimont }, interpretation: select the row whose population record of all rows is maximum . the borough record of this row is fleurimont .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; borough } ; fleurimont }, interpretation: for the regional county municipality records of all rows , all of them fuzzily match to not part of a rcm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; regional county municipality ; not part of a rcm }, interpretation: for the regional county municipality records of all rows , all of them fuzzily match to not part of a rcm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; regional county municipality ; not part of a rcm }, interpretation: for the played records of all rows , most of them are equal to 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 9 }, interpretation: for the played records of all rows , most of them are equal to 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 9 }, interpretation: for the date records of all rows , all of them fuzzily match to march .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; march }, interpretation: for the cores records of all rows , all of them are equal to 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; cores ; 4 }, interpretation: for the cores records of all rows , all of them are equal to 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; cores ; 4 }, interpretation: select the rows whose race winner record fuzzily matches to andrew pitt . among these rows , select the rows whose fastest lap record fuzzily matches to gianluca vizziello . there is only one such row in the table . the date record of this unqiue row is 27 april .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; race winner ; andrew pitt } ; fastest lap ; gianluca vizziello } } ; eq { hop { filter_eq { filter_eq { all_rows ; race winner ; andrew pitt } ; fastest lap ; gianluca vizziello } ; date } ; 27 april } }, interpretation: select the rows whose race winner record fuzzily matches to andrew pitt . among these rows , select the rows whose fastest lap record fuzzily matches to gianluca vizziello . there is only one such row in the table . the date record of this unqiue row is 27 april .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; race winner ; andrew pitt } ; fastest lap ; gianluca vizziello } } ; eq { hop { filter_eq { filter_eq { all_rows ; race winner ; andrew pitt } ; fastest lap ; gianluca vizziello } ; date } ; 27 april } }, interpretation: select the rows whose date record fuzzily matches to 2004 . among these rows , select the rows whose surface record fuzzily matches to hard . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; 2004 } ; surface ; hard } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 2004 . among these rows , select the rows whose surface record fuzzily matches to hard . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; 2004 } ; surface ; hard } } ; 2 }, interpretation: select the rows whose 1st place team record fuzzily matches to mary star all - stars . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st place team ; mary star all - stars } } ; 5 }, interpretation: select the rows whose 1st place team record fuzzily matches to mary star all - stars . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st place team ; mary star all - stars } } ; 5 }, interpretation: select the rows whose manner of departure record fuzzily matches to resigned . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; resigned } } ; 6 }, interpretation: select the rows whose manner of departure record fuzzily matches to resigned . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; resigned } } ; 6 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 19 may 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 19 may 2007 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 19 may 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 19 may 2007 }, interpretation: the maximum score record of all rows is l 83 - 74 . the date record of the row with superlative score record is february 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; score } ; l 83 - 74 } ; eq { hop { argmax { all_rows ; score } ; date } ; february 5 } }, interpretation: the maximum score record of all rows is l 83 - 74 . the date record of the row with superlative score record is february 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; score } ; l 83 - 74 } ; eq { hop { argmax { all_rows ; score } ; date } ; february 5 } }, interpretation: select the rows whose area record fuzzily matches to newmarket . there is only one such row in the table . the name record of this unqiue row is newmarket school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; area ; newmarket } } ; eq { hop { filter_eq { all_rows ; area ; newmarket } ; name } ; newmarket school } }, interpretation: select the rows whose area record fuzzily matches to newmarket . there is only one such row in the table . the name record of this unqiue row is newmarket school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; area ; newmarket } } ; eq { hop { filter_eq { all_rows ; area ; newmarket } ; name } ; newmarket school } }, interpretation: select the row whose height ( m ) record of all rows is 2nd maximum . the island record of this row is ailsa craig .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ( m ) ; 2 } ; island } ; ailsa craig }, interpretation: select the row whose height ( m ) record of all rows is 2nd maximum . the island record of this row is ailsa craig .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ( m ) ; 2 } ; island } ; ailsa craig }, interpretation: select the rows whose directed by record fuzzily matches to peter deluise . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; directed by ; peter deluise } }, interpretation: select the rows whose directed by record fuzzily matches to peter deluise . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; directed by ; peter deluise } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose total record is greater than 153 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; country ; united states } ; total ; 153 } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose total record is greater than 153 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; country ; united states } ; total ; 153 } } ; 2 }, interpretation: select the row whose attendance / g record of all rows is maximum . the season record of this row is 2004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance / g } ; season } ; 2004 }, interpretation: select the row whose attendance / g record of all rows is maximum . the season record of this row is 2004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance / g } ; season } ; 2004 }, interpretation: select the row whose gold record of all rows is 2nd maximum . the nation record of this row is romania .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; gold ; 2 } ; nation } ; romania }, interpretation: select the row whose gold record of all rows is 2nd maximum . the nation record of this row is romania .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; gold ; 2 } ; nation } ; romania }, interpretation: for the pilot records of all rows , all of them fuzzily match to donald campbell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; pilot ; donald campbell }, interpretation: for the pilot records of all rows , all of them fuzzily match to donald campbell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; pilot ; donald campbell }, interpretation: select the rows whose pole position record fuzzily matches to alain prost . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole position ; alain prost } } ; 2 }, interpretation: select the rows whose pole position record fuzzily matches to alain prost . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole position ; alain prost } } ; 2 }, interpretation: select the row whose population ( 2007 ) record of all rows is 2nd maximum . the municipality record of this row is labo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 2007 ) ; 2 } ; municipality } ; labo }, interpretation: select the row whose population ( 2007 ) record of all rows is 2nd maximum . the municipality record of this row is labo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 2007 ) ; 2 } ; municipality } ; labo }, interpretation: select the row whose south asians 2011 record of all rows is maximum . the province record of this row is ontario .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; south asians 2011 } ; province } ; ontario }, interpretation: select the row whose south asians 2011 record of all rows is maximum . the province record of this row is ontario .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; south asians 2011 } ; province } ; ontario }, interpretation: select the rows whose time record is greater than 7:00:00 . there is only one such row in the table . the country record of this unqiue row is iraq .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; time ; 7:00:00 } } ; eq { hop { filter_greater { all_rows ; time ; 7:00:00 } ; country } ; iraq } }, interpretation: select the rows whose time record is greater than 7:00:00 . there is only one such row in the table . the country record of this unqiue row is iraq .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; time ; 7:00:00 } } ; eq { hop { filter_greater { all_rows ; time ; 7:00:00 } ; country } ; iraq } }, interpretation: the average of the blank ends record of all rows is 6.9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blank ends } ; 6.9 }, interpretation: the average of the blank ends record of all rows is 6.9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blank ends } ; 6.9 }, interpretation: select the rows whose runs record is equal to 203 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; runs ; 203 } } ; 2 }, interpretation: select the rows whose runs record is equal to 203 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; runs ; 203 } } ; 2 }, interpretation: select the rows whose main venue record fuzzily matches to dover park . there is only one such row in the table . the event name record of this unqiue row is dieppe kite international .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; main venue ; dover park } } ; eq { hop { filter_eq { all_rows ; main venue ; dover park } ; event name } ; dieppe kite international } }, interpretation: select the rows whose main venue record fuzzily matches to dover park . there is only one such row in the table . the event name record of this unqiue row is dieppe kite international .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; main venue ; dover park } } ; eq { hop { filter_eq { all_rows ; main venue ; dover park } ; event name } ; dieppe kite international } }, interpretation: select the row whose date record of all rows is 2nd maximum . the venue record of this row is vasil levski national stadium , sofia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; venue } ; vasil levski national stadium , sofia }, interpretation: select the row whose date record of all rows is 2nd maximum . the venue record of this row is vasil levski national stadium , sofia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; venue } ; vasil levski national stadium , sofia }, interpretation: select the rows whose gold record is equal to 3 . there is only one such row in the table . the nation record of this unqiue row is china ( chn ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 3 } } ; eq { hop { filter_eq { all_rows ; gold ; 3 } ; nation } ; china ( chn ) } }, interpretation: select the rows whose gold record is equal to 3 . there is only one such row in the table . the nation record of this unqiue row is china ( chn ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 3 } } ; eq { hop { filter_eq { all_rows ; gold ; 3 } ; nation } ; china ( chn ) } }, interpretation: select the rows whose opponent record fuzzily matches to toronto maple leafs . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; toronto maple leafs } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to toronto maple leafs . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; toronto maple leafs } } ; 3 }, interpretation: select the row whose points record of all rows is maximum . the opponent record of this row is ottawa senators .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; opponent } ; ottawa senators }, interpretation: select the row whose points record of all rows is maximum . the opponent record of this row is ottawa senators .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; opponent } ; ottawa senators }, interpretation: the average of the population urban area in millions record of all rows is 5.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population urban area in millions } ; 5.1 }, interpretation: the average of the population urban area in millions record of all rows is 5.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population urban area in millions } ; 5.1 }, interpretation: select the rows whose round record fuzzily matches to 1 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; 1 } } ; 4 }, interpretation: select the rows whose round record fuzzily matches to 1 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; 1 } } ; 4 }, interpretation: select the rows whose length record is greater than 4:00 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; length ; 4:00 } } ; 3 }, interpretation: select the rows whose length record is greater than 4:00 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; length ; 4:00 } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 10 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 10 }, interpretation: select the rows whose traction type record fuzzily matches to petrol . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; traction type ; petrol } } ; 2 }, interpretation: select the rows whose traction type record fuzzily matches to petrol . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; traction type ; petrol } } ; 2 }, interpretation: select the row whose laps record of all rows is 2nd minimum . the driver record of this row is dan gurney .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; laps ; 2 } ; driver } ; dan gurney }, interpretation: select the row whose laps record of all rows is 2nd minimum . the driver record of this row is dan gurney .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; laps ; 2 } ; driver } ; dan gurney }, interpretation: select the row whose start record of all rows is minimum . the year record of this row is 1936 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; start } ; year } ; 1936 }, interpretation: select the row whose start record of all rows is minimum . the year record of this row is 1936 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; start } ; year } ; 1936 }, interpretation: select the rows whose bronze record is equal to 2 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; 2 } } ; 5 }, interpretation: select the rows whose bronze record is equal to 2 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; 2 } } ; 5 }, interpretation: select the rows whose year record is greater than 2000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; year ; 2000 } } ; 3 }, interpretation: select the rows whose year record is greater than 2000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; year ; 2000 } } ; 3 }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is canon yaound\u00e9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; canon yaound\u00e9 }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is canon yaound\u00e9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; canon yaound\u00e9 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the score record of these rows is 68.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; score } ; 68.67 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the score record of these rows is 68.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; score } ; 68.67 }, interpretation: select the rows whose draws record is greater than 5 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; draws ; 5 } } ; 4 }, interpretation: select the rows whose draws record is greater than 5 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; draws ; 5 } } ; 4 }, interpretation: for the date records of all rows , all of them fuzzily match to 1 may 1926 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 1 may 1926 }, interpretation: for the date records of all rows , all of them fuzzily match to 1 may 1926 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 1 may 1926 }, interpretation: select the rows whose year record is greater than 2010 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; year ; 2010 } }, interpretation: select the rows whose year record is greater than 2010 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; year ; 2010 } }, interpretation: the average of the size record of all rows is 405.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; size } ; 405.1 }, interpretation: the average of the size record of all rows is 405.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; size } ; 405.1 }, interpretation: select the rows whose title record fuzzily matches to road to the north pole . take the original air date record of this row . select the rows whose title record fuzzily matches to road to europe . take the original air date record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; road to the north pole } ; original air date } ; hop { filter_eq { all_rows ; title ; road to europe } ; original air date } }, interpretation: select the rows whose title record fuzzily matches to road to the north pole . take the original air date record of this row . select the rows whose title record fuzzily matches to road to europe . take the original air date record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; road to the north pole } ; original air date } ; hop { filter_eq { all_rows ; title ; road to europe } ; original air date } }, interpretation: the 1st minimum place record of all rows is 1 . the artist record of the row with 1st minimum place record is vnia fernandes .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; place ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; place ; 1 } ; artist } ; vnia fernandes } }, interpretation: the 1st minimum place record of all rows is 1 . the artist record of the row with 1st minimum place record is vnia fernandes .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; place ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; place ; 1 } ; artist } ; vnia fernandes } }, interpretation: for the type records of all rows , most of them fuzzily match to lake .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; lake }, interpretation: for the type records of all rows , most of them fuzzily match to lake .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; lake }, interpretation: select the rows whose english name record fuzzily matches to hexi district . take the density record of this row . select the rows whose english name record fuzzily matches to fenghuang . take the density record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english name ; hexi district } ; density } ; hop { filter_eq { all_rows ; english name ; fenghuang } ; density } }, interpretation: select the rows whose english name record fuzzily matches to hexi district . take the density record of this row . select the rows whose english name record fuzzily matches to fenghuang . take the density record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english name ; hexi district } ; density } ; hop { filter_eq { all_rows ; english name ; fenghuang } ; density } }, interpretation: select the rows whose call sign record fuzzily matches to w269ax . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to w230av . take the frequency mhz record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; call sign ; w269ax } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; w230av } ; frequency mhz } }, interpretation: select the rows whose call sign record fuzzily matches to w269ax . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to w230av . take the frequency mhz record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; call sign ; w269ax } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; w230av } ; frequency mhz } }, interpretation: the average of the attendance record of all rows is 16261 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16261 }, interpretation: the average of the attendance record of all rows is 16261 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16261 }, interpretation: the average of the rest mass mev / c 2 record of all rows is 1352 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rest mass mev / c 2 } ; 1352 }, interpretation: the average of the rest mass mev / c 2 record of all rows is 1352 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rest mass mev / c 2 } ; 1352 }, interpretation: select the row whose no record of all rows is 4th maximum . the player record of this row is corliss williamson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; no ; 4 } ; player } ; corliss williamson }, interpretation: select the row whose no record of all rows is 4th maximum . the player record of this row is corliss williamson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; no ; 4 } ; player } ; corliss williamson }, interpretation: for the mlb draft records of all rows , most of them fuzzily match to 1995 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; mlb draft ; 1995 }, interpretation: for the mlb draft records of all rows , most of them fuzzily match to 1995 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; mlb draft ; 1995 }, interpretation: for the completion records of all rows , most of them are greater than or equal to 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; completion ; 2000 }, interpretation: for the completion records of all rows , most of them are greater than or equal to 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; completion ; 2000 }, interpretation: select the rows whose nationality record fuzzily matches to usa . among these rows , select the rows whose position record fuzzily matches to rw . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; nationality ; usa } ; position ; rw } } ; 2 }, interpretation: select the rows whose nationality record fuzzily matches to usa . among these rows , select the rows whose position record fuzzily matches to rw . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; nationality ; usa } ; position ; rw } } ; 2 }, interpretation: select the rows whose format record fuzzily matches to limited edition . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; limited edition } } ; 5 }, interpretation: select the rows whose format record fuzzily matches to limited edition . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; limited edition } } ; 5 }, interpretation: for the result records of all rows , most of them fuzzily match to nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; nominated }, interpretation: for the result records of all rows , most of them fuzzily match to nominated .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; nominated }, interpretation: the average of the attendance record of all rows is 50799 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 50799 }, interpretation: the average of the attendance record of all rows is 50799 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 50799 }, interpretation: select the rows whose date record is greater than or equal to december 3 , 1989 . among these rows , select the rows whose attendance record is greater than 10000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater_eq { all_rows ; date ; december 3 , 1989 } ; attendance ; 10000 } } ; 3 }, interpretation: select the rows whose date record is greater than or equal to december 3 , 1989 . among these rows , select the rows whose attendance record is greater than 10000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater_eq { all_rows ; date ; december 3 , 1989 } ; attendance ; 10000 } } ; 3 }, interpretation: for the shot pct records of all rows , most of them are greater than 65 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; shot pct ; 65 % }, interpretation: for the shot pct records of all rows , most of them are greater than 65 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; shot pct ; 65 % }, interpretation: the maximum result record of all rows is w 45 - 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; result } ; w 45 - 7 }, interpretation: the maximum result record of all rows is w 45 - 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; result } ; w 45 - 7 }, interpretation: select the rows whose player record fuzzily matches to adam voges . take the runs record of this row . select the rows whose player record fuzzily matches to callum ferguson . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; adam voges } ; runs } ; hop { filter_eq { all_rows ; player ; callum ferguson } ; runs } }, interpretation: select the rows whose player record fuzzily matches to adam voges . take the runs record of this row . select the rows whose player record fuzzily matches to callum ferguson . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; adam voges } ; runs } ; hop { filter_eq { all_rows ; player ; callum ferguson } ; runs } }, interpretation: the average of the occurrences record of all rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; occurrences } ; 10 }, interpretation: the average of the occurrences record of all rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; occurrences } ; 10 }, interpretation: for the website records of all rows , most of them fuzzily match to english .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; website ; english }, interpretation: for the website records of all rows , most of them fuzzily match to english .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; website ; english }, interpretation: select the rows whose nationality record fuzzily matches to canada . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; canada } } ; 2 }, interpretation: select the rows whose nationality record fuzzily matches to canada . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; canada } } ; 2 }, interpretation: select the rows whose total record is equal to 1 . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; total ; 1 } } ; 7 }, interpretation: select the rows whose total record is equal to 1 . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; total ; 1 } } ; 7 }, interpretation: select the row whose record record of all rows is 2nd maximum . the year record of this row is 1979 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; record ; 2 } ; year } ; 1979 }, interpretation: select the row whose record record of all rows is 2nd maximum . the year record of this row is 1979 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; record ; 2 } ; year } ; 1979 }, interpretation: select the rows whose event record fuzzily matches to wc beijing . the sum of the rank points record of these rows is 23 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; event ; wc beijing } ; rank points } ; 23 }, interpretation: select the rows whose event record fuzzily matches to wc beijing . the sum of the rank points record of these rows is 23 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; event ; wc beijing } ; rank points } ; 23 }, interpretation: select the rows whose date record fuzzily matches to 14 jun 2005 . take the margin of victory record of this row . select the rows whose date record fuzzily matches to 12 jul 2006 . take the margin of victory record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 14 jun 2005 } ; margin of victory } ; hop { filter_eq { all_rows ; date ; 12 jul 2006 } ; margin of victory } }, interpretation: select the rows whose date record fuzzily matches to 14 jun 2005 . take the margin of victory record of this row . select the rows whose date record fuzzily matches to 12 jul 2006 . take the margin of victory record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 14 jun 2005 } ; margin of victory } ; hop { filter_eq { all_rows ; date ; 12 jul 2006 } ; margin of victory } }, interpretation: select the rows whose year record is less than 1967 . among these rows , select the rows whose result record fuzzily matches to 2nd . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; year ; 1967 } ; result ; 2nd } } ; 2 }, interpretation: select the rows whose year record is less than 1967 . among these rows , select the rows whose result record fuzzily matches to 2nd . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; year ; 1967 } ; result ; 2nd } } ; 2 }, interpretation: for the surface records of all rows , most of them fuzzily match to grass .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; grass }, interpretation: for the surface records of all rows , most of them fuzzily match to grass .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; grass }, interpretation: select the rows whose us viewers ( in millions ) record is equal to 3.69 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; us viewers ( in millions ) ; 3.69 } } ; 2 }, interpretation: select the rows whose us viewers ( in millions ) record is equal to 3.69 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; us viewers ( in millions ) ; 3.69 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 6 march 1976 . select the row whose tie no record of these rows is minimum . the home team record of this row is sunderland . the away team record of this row is crystal palace .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmin { filter_eq { all_rows ; date ; 6 march 1976 } ; tie no } ; home team } ; sunderland } ; eq { hop { argmin { filter_eq { all_rows ; date ; 6 march 1976 } ; tie no } ; away team } ; crystal palace } }, interpretation: select the rows whose date record fuzzily matches to 6 march 1976 . select the row whose tie no record of these rows is minimum . the home team record of this row is sunderland . the away team record of this row is crystal palace .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmin { filter_eq { all_rows ; date ; 6 march 1976 } ; tie no } ; home team } ; sunderland } ; eq { hop { argmin { filter_eq { all_rows ; date ; 6 march 1976 } ; tie no } ; away team } ; crystal palace } }, interpretation: select the row whose years for rockets record of all rows is minimum . the player record of this row is perry , curtis curtis perry .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; years for rockets } ; player } ; perry , curtis curtis perry }, interpretation: select the row whose years for rockets record of all rows is minimum . the player record of this row is perry , curtis curtis perry .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; years for rockets } ; player } ; perry , curtis curtis perry }, interpretation: select the rows whose goals record is equal to 64 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; goals ; 64 } } ; 3 }, interpretation: select the rows whose goals record is equal to 64 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; goals ; 64 } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to victoria park . there is only one such row in the table . the home team record of this unqiue row is collingwood . the away team record of this unqiue row is north melbourne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; victoria park } } ; and { eq { hop { filter_eq { all_rows ; venue ; victoria park } ; home team } ; collingwood } ; eq { hop { filter_eq { all_rows ; venue ; victoria park } ; away team } ; north melbourne } } }, interpretation: select the rows whose venue record fuzzily matches to victoria park . there is only one such row in the table . the home team record of this unqiue row is collingwood . the away team record of this unqiue row is north melbourne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; victoria park } } ; and { eq { hop { filter_eq { all_rows ; venue ; victoria park } ; home team } ; collingwood } ; eq { hop { filter_eq { all_rows ; venue ; victoria park } ; away team } ; north melbourne } } }, interpretation: select the row whose time record of all rows is 1st minimum . the opponent record of this row is mark sinclair .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; opponent } ; mark sinclair }, interpretation: select the row whose time record of all rows is 1st minimum . the opponent record of this row is mark sinclair .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; opponent } ; mark sinclair }, interpretation: select the row whose award record of all rows is 2nd maximum . the film record of this row is mercy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; award ; 2 } ; film } ; mercy }, interpretation: select the row whose award record of all rows is 2nd maximum . the film record of this row is mercy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; award ; 2 } ; film } ; mercy }, interpretation: select the row whose overall record record of all rows is maximum . the texas vs record of this row is texas a & m .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overall record } ; texas vs } ; texas a & m }, interpretation: select the row whose overall record record of all rows is maximum . the texas vs record of this row is texas a & m .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overall record } ; texas vs } ; texas a & m }, interpretation: select the rows whose goal difference record is less than 0 . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; goal difference ; 0 } } ; 8 }, interpretation: select the rows whose goal difference record is less than 0 . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; goal difference ; 0 } } ; 8 }, interpretation: select the rows whose entrant record fuzzily matches to north american racing team . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; entrant ; north american racing team } } ; 3 }, interpretation: select the rows whose entrant record fuzzily matches to north american racing team . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; entrant ; north american racing team } } ; 3 }, interpretation: select the rows whose film title used in nomination record fuzzily matches to the other bank . take the year ( ceremony ) record of this row . select the rows whose film title used in nomination record fuzzily matches to keep smiling . take the year ( ceremony ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; film title used in nomination ; the other bank } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; film title used in nomination ; keep smiling } ; year ( ceremony ) } }, interpretation: select the rows whose film title used in nomination record fuzzily matches to the other bank . take the year ( ceremony ) record of this row . select the rows whose film title used in nomination record fuzzily matches to keep smiling . take the year ( ceremony ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; film title used in nomination ; the other bank } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; film title used in nomination ; keep smiling } ; year ( ceremony ) } }, interpretation: select the rows whose margin record fuzzily matches to 3 strokes . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin ; 3 strokes } } ; 2 }, interpretation: select the rows whose margin record fuzzily matches to 3 strokes . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin ; 3 strokes } } ; 2 }, interpretation: select the rows whose losses record is equal to 8 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; losses ; 8 } } ; 2 }, interpretation: select the rows whose losses record is equal to 8 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; losses ; 8 } } ; 2 }, interpretation: select the row whose crowd record of all rows is 3rd maximum . the home team score record of this row is 13.7 ( 85 ) . the away team record of this row is st kilda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmax { all_rows ; crowd ; 3 } ; home team score } ; 13.7 ( 85 ) } ; eq { hop { nth_argmax { all_rows ; crowd ; 3 } ; away team } ; st kilda } }, interpretation: select the row whose crowd record of all rows is 3rd maximum . the home team score record of this row is 13.7 ( 85 ) . the away team record of this row is st kilda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmax { all_rows ; crowd ; 3 } ; home team score } ; 13.7 ( 85 ) } ; eq { hop { nth_argmax { all_rows ; crowd ; 3 } ; away team } ; st kilda } }, interpretation: select the rows whose local government area record fuzzily matches to anangu pitjantjatjara yankunytjatjara . take the pop 2006 record of this row . select the rows whose local government area record fuzzily matches to outback areas community development trust . take the pop 2006 record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; local government area ; anangu pitjantjatjara yankunytjatjara } ; pop 2006 } ; hop { filter_eq { all_rows ; local government area ; outback areas community development trust } ; pop 2006 } }, interpretation: select the rows whose local government area record fuzzily matches to anangu pitjantjatjara yankunytjatjara . take the pop 2006 record of this row . select the rows whose local government area record fuzzily matches to outback areas community development trust . take the pop 2006 record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; local government area ; anangu pitjantjatjara yankunytjatjara } ; pop 2006 } ; hop { filter_eq { all_rows ; local government area ; outback areas community development trust } ; pop 2006 } }, interpretation: select the rows whose release date record fuzzily matches to january 2011 . the average of the release price ( usd ) record of these rows is 507.71 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; release date ; january 2011 } ; release price ( usd ) } ; 507.71 }, interpretation: select the rows whose release date record fuzzily matches to january 2011 . the average of the release price ( usd ) record of these rows is 507.71 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; release date ; january 2011 } ; release price ( usd ) } ; 507.71 }, interpretation: select the rows whose gold record is greater than 100 . select the row whose silver record of these rows is maximum . the country record of this row is indonesia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_greater { all_rows ; gold ; 100 } ; silver } ; country } ; indonesia }, interpretation: select the rows whose gold record is greater than 100 . select the row whose silver record of these rows is maximum . the country record of this row is indonesia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_greater { all_rows ; gold ; 100 } ; silver } ; country } ; indonesia }, interpretation: for the primary sponsor ( s ) records of all rows , most of them do not match to n / a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; primary sponsor ( s ) ; n / a }, interpretation: for the primary sponsor ( s ) records of all rows , most of them do not match to n / a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; primary sponsor ( s ) ; n / a }, interpretation: the sum of the w record of all rows is 21 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; w } ; 21 }, interpretation: the sum of the w record of all rows is 21 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; w } ; 21 }, interpretation: select the rows whose driver / passenger record fuzzily matches to jan hendrickx / tim smeuninx . take the points record of this row . select the rows whose driver / passenger record fuzzily matches to marko happich / meinrad schelbert . take the points record of this row . the first record is greater than the second record . the points record of the first row is 405 . the points record of the second row is 317 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; driver / passenger ; jan hendrickx / tim smeuninx } ; points } ; hop { filter_eq { all_rows ; driver / passenger ; marko happich / meinrad schelbert } ; points } } ; and { eq { hop { filter_eq { all_rows ; driver / passenger ; jan hendrickx / tim smeuninx } ; points } ; 405 } ; eq { hop { filter_eq { all_rows ; driver / passenger ; marko happich / meinrad schelbert } ; points } ; 317 } } }, interpretation: select the rows whose driver / passenger record fuzzily matches to jan hendrickx / tim smeuninx . take the points record of this row . select the rows whose driver / passenger record fuzzily matches to marko happich / meinrad schelbert . take the points record of this row . the first record is greater than the second record . the points record of the first row is 405 . the points record of the second row is 317 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; driver / passenger ; jan hendrickx / tim smeuninx } ; points } ; hop { filter_eq { all_rows ; driver / passenger ; marko happich / meinrad schelbert } ; points } } ; and { eq { hop { filter_eq { all_rows ; driver / passenger ; jan hendrickx / tim smeuninx } ; points } ; 405 } ; eq { hop { filter_eq { all_rows ; driver / passenger ; marko happich / meinrad schelbert } ; points } ; 317 } } }, interpretation: select the rows whose country record fuzzily matches to zimbabwe . there is only one such row in the table . the player record of this unqiue row is nick price .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; zimbabwe } } ; eq { hop { filter_eq { all_rows ; country ; zimbabwe } ; player } ; nick price } }, interpretation: select the rows whose country record fuzzily matches to zimbabwe . there is only one such row in the table . the player record of this unqiue row is nick price .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; zimbabwe } } ; eq { hop { filter_eq { all_rows ; country ; zimbabwe } ; player } ; nick price } }, interpretation: the average of the total record of all rows is 9.29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 9.29 }, interpretation: the average of the total record of all rows is 9.29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 9.29 }, interpretation: select the rows whose result record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; result } } ; 5 }, interpretation: select the rows whose result record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; result } } ; 5 }, interpretation: the average of the pick record of all rows is 16.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 16.6 }, interpretation: the average of the pick record of all rows is 16.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 16.6 }, interpretation: select the rows whose builder record fuzzily matches to general dynamics , quincy . select the row whose commissioned - decommissioned record of these rows is 1st minimum . the ship record of this row is wichita .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; builder ; general dynamics , quincy } ; commissioned - decommissioned ; 1 } ; ship } ; wichita }, interpretation: select the rows whose builder record fuzzily matches to general dynamics , quincy . select the row whose commissioned - decommissioned record of these rows is 1st minimum . the ship record of this row is wichita .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; builder ; general dynamics , quincy } ; commissioned - decommissioned ; 1 } ; ship } ; wichita }, interpretation: select the rows whose player record fuzzily matches to mitchell johnson . take the innings record of this row . select the rows whose player record fuzzily matches to shane lee . take the innings record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; mitchell johnson } ; innings } ; hop { filter_eq { all_rows ; player ; shane lee } ; innings } }, interpretation: select the rows whose player record fuzzily matches to mitchell johnson . take the innings record of this row . select the rows whose player record fuzzily matches to shane lee . take the innings record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; mitchell johnson } ; innings } ; hop { filter_eq { all_rows ; player ; shane lee } ; innings } }, interpretation: select the row whose pick record of all rows is 4th minimum . the player record of this row is marcus harrison .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 4 } ; player } ; marcus harrison }, interpretation: select the row whose pick record of all rows is 4th minimum . the player record of this row is marcus harrison .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 4 } ; player } ; marcus harrison }, interpretation: select the row whose season record of all rows is 5th minimum . the team record of this row is runcorn highfield .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; season ; 5 } ; team } ; runcorn highfield }, interpretation: select the row whose season record of all rows is 5th minimum . the team record of this row is runcorn highfield .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; season ; 5 } ; team } ; runcorn highfield }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose money record is less than 140000 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_less { filter_eq { all_rows ; country ; united states } ; money ; 140000 } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose money record is less than 140000 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_less { filter_eq { all_rows ; country ; united states } ; money ; 140000 } }, interpretation: select the rows whose position record fuzzily matches to running back . for the round records of these rows , all of them are less than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_less { filter_eq { all_rows ; position ; running back } ; round ; 10 }, interpretation: select the rows whose position record fuzzily matches to running back . for the round records of these rows , all of them are less than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_less { filter_eq { all_rows ; position ; running back } ; round ; 10 }, interpretation: select the row whose last match record of all rows is maximum . the competition record of this row is uefa champions league .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; last match } ; competition } ; uefa champions league }, interpretation: select the row whose last match record of all rows is maximum . the competition record of this row is uefa champions league .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; last match } ; competition } ; uefa champions league }, interpretation: for the displacement records of all rows , most of them are equal to 3.9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; displacement ; 3.9 }, interpretation: for the displacement records of all rows , most of them are equal to 3.9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; displacement ; 3.9 }, interpretation: the average of the attendance record of all rows is 17863 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 17863 }, interpretation: the average of the attendance record of all rows is 17863 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 17863 }, interpretation: select the rows whose week 5 record fuzzily matches to melisa jackson . take the record of this row . select the rows whose week 5 record fuzzily matches to - . take the record of this row . the first record is less than the second record . the record of the first row is january . the record of the second row is february .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; week 5 ; melisa jackson } ; } ; hop { filter_eq { all_rows ; week 5 ; - } ; } } ; and { eq { hop { filter_eq { all_rows ; week 5 ; melisa jackson } ; } ; january } ; eq { hop { filter_eq { all_rows ; week 5 ; - } ; } ; february } } }, interpretation: select the rows whose week 5 record fuzzily matches to melisa jackson . take the record of this row . select the rows whose week 5 record fuzzily matches to - . take the record of this row . the first record is less than the second record . the record of the first row is january . the record of the second row is february .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; week 5 ; melisa jackson } ; } ; hop { filter_eq { all_rows ; week 5 ; - } ; } } ; and { eq { hop { filter_eq { all_rows ; week 5 ; melisa jackson } ; } ; january } ; eq { hop { filter_eq { all_rows ; week 5 ; - } ; } ; february } } }, interpretation: the average of the height in ft record of all rows is 6 - 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height in ft } ; 6 - 9 }, interpretation: the average of the height in ft record of all rows is 6 - 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height in ft } ; 6 - 9 }, interpretation: for the gold records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; gold ; 1 }, interpretation: for the gold records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; gold ; 1 }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose silver record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; silver ; 1 } } ; 2 }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose silver record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; silver ; 1 } } ; 2 }, interpretation: for the ihsaa class records of all rows , all of them fuzzily match to a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; ihsaa class ; a }, interpretation: for the ihsaa class records of all rows , all of them fuzzily match to a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; ihsaa class ; a }, interpretation: select the rows whose date record is less than january 1 , 2000 . for the format records of these rows , most of them fuzzily match to cd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_less { all_rows ; date ; january 1 , 2000 } ; format ; cd }, interpretation: select the rows whose date record is less than january 1 , 2000 . for the format records of these rows , most of them fuzzily match to cd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_less { all_rows ; date ; january 1 , 2000 } ; format ; cd }, interpretation: select the row whose power ( kw ) record of all rows is 2nd maximum . the branding record of this row is kingdom radio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; power ( kw ) ; 2 } ; branding } ; kingdom radio }, interpretation: select the row whose power ( kw ) record of all rows is 2nd maximum . the branding record of this row is kingdom radio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; power ( kw ) ; 2 } ; branding } ; kingdom radio }, interpretation: select the rows whose home team score record is less than 14.0 . among these rows , select the rows whose date record fuzzily matches to 28 april 1973 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; home team score ; 14.0 } ; date ; 28 april 1973 } } ; 2 }, interpretation: select the rows whose home team score record is less than 14.0 . among these rows , select the rows whose date record fuzzily matches to 28 april 1973 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; home team score ; 14.0 } ; date ; 28 april 1973 } } ; 2 }, interpretation: select the rows whose air date record fuzzily matches to july 2008 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; air date ; july 2008 } } ; 2 }, interpretation: select the rows whose air date record fuzzily matches to july 2008 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; air date ; july 2008 } } ; 2 }, interpretation: select the row whose attendance / g record of all rows is minimum . the season record of this row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; attendance / g } ; season } ; 2007 }, interpretation: select the row whose attendance / g record of all rows is minimum . the season record of this row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; attendance / g } ; season } ; 2007 }, interpretation: the sum of the runs record of all rows is 2617 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; runs } ; 2617 }, interpretation: the sum of the runs record of all rows is 2617 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; runs } ; 2617 }, interpretation: select the rows whose top speed ( km / h ) record is less than 175 . there is only one such row in the table . the model record of this unqiue row is 1.4 16v .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; top speed ( km / h ) ; 175 } } ; eq { hop { filter_less { all_rows ; top speed ( km / h ) ; 175 } ; model } ; 1.4 16v } }, interpretation: select the rows whose top speed ( km / h ) record is less than 175 . there is only one such row in the table . the model record of this unqiue row is 1.4 16v .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; top speed ( km / h ) ; 175 } } ; eq { hop { filter_less { all_rows ; top speed ( km / h ) ; 175 } ; model } ; 1.4 16v } }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is mcg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; mcg }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is mcg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; mcg }, interpretation: for the party records of all rows , all of them fuzzily match to democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party ; democratic }, interpretation: select the row whose time record of all rows is 1st minimum . the rank record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; rank } ; 1 }, interpretation: select the row whose time record of all rows is 1st minimum . the rank record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; rank } ; 1 }, interpretation: select the row whose enrollment record of all rows is 2nd minimum . the institution record of this row is philander smith college .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; enrollment ; 2 } ; institution } ; philander smith college }, interpretation: select the row whose enrollment record of all rows is 2nd minimum . the institution record of this row is philander smith college .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; enrollment ; 2 } ; institution } ; philander smith college }, interpretation: select the rows whose date record fuzzily matches to 16 october 2012 . take the score record of this row . select the rows whose date record fuzzily matches to 8 october 2010 . take the score record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; date ; 16 october 2012 } ; score } ; hop { filter_eq { all_rows ; date ; 8 october 2010 } ; score } }, interpretation: select the rows whose date record fuzzily matches to 16 october 2012 . take the score record of this row . select the rows whose date record fuzzily matches to 8 october 2010 . take the score record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; date ; 16 october 2012 } ; score } ; hop { filter_eq { all_rows ; date ; 8 october 2010 } ; score } }, interpretation: select the rows whose winner record fuzzily matches to 6 - 1 , 6 - 1 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; winner ; 6 - 1 , 6 - 1 } }, interpretation: select the rows whose winner record fuzzily matches to 6 - 1 , 6 - 1 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; winner ; 6 - 1 , 6 - 1 } }, interpretation: select the rows whose men 's singles record fuzzily matches to kasperi salo . take the year record of this row . select the rows whose men 's singles record fuzzily matches to ville lang . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; men 's singles ; kasperi salo } ; year } ; hop { filter_eq { all_rows ; men 's singles ; ville lang } ; year } }, interpretation: select the rows whose men 's singles record fuzzily matches to kasperi salo . take the year record of this row . select the rows whose men 's singles record fuzzily matches to ville lang . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; men 's singles ; kasperi salo } ; year } ; hop { filter_eq { all_rows ; men 's singles ; ville lang } ; year } }, interpretation: select the rows whose date record fuzzily matches to april 19 . take the high points record of this row . select the rows whose date record fuzzily matches to april 20 . take the high points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; april 19 } ; high points } ; hop { filter_eq { all_rows ; date ; april 20 } ; high points } }, interpretation: select the rows whose date record fuzzily matches to april 19 . take the high points record of this row . select the rows whose date record fuzzily matches to april 20 . take the high points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; april 19 } ; high points } ; hop { filter_eq { all_rows ; date ; april 20 } ; high points } }, interpretation: select the rows whose venue record fuzzily matches to amman . among these rows , select the rows whose result record fuzzily matches to win . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; venue ; amman } ; result ; win } } ; 6 }, interpretation: select the rows whose venue record fuzzily matches to amman . among these rows , select the rows whose result record fuzzily matches to win . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; venue ; amman } ; result ; win } } ; 6 }, interpretation: select the rows whose team record fuzzily matches to queens park rangers . take the date of vacancy record of this row . select the rows whose team record fuzzily matches to norwich city . take the date of vacancy record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; team ; queens park rangers } ; date of vacancy } ; hop { filter_eq { all_rows ; team ; norwich city } ; date of vacancy } } ; -7 days }, interpretation: select the rows whose team record fuzzily matches to queens park rangers . take the date of vacancy record of this row . select the rows whose team record fuzzily matches to norwich city . take the date of vacancy record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; team ; queens park rangers } ; date of vacancy } ; hop { filter_eq { all_rows ; team ; norwich city } ; date of vacancy } } ; -7 days }, interpretation: select the rows whose bronze record is equal to 34 . there is only one such row in the table . the rank record of this unqiue row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bronze ; 34 } } ; eq { hop { filter_eq { all_rows ; bronze ; 34 } ; rank } ; 5 } }, interpretation: select the rows whose bronze record is equal to 34 . there is only one such row in the table . the rank record of this unqiue row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bronze ; 34 } } ; eq { hop { filter_eq { all_rows ; bronze ; 34 } ; rank } ; 5 } }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the track record of this unqiue row is little valley speedway .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; track } ; little valley speedway } }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the track record of this unqiue row is little valley speedway .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; track } ; little valley speedway } }, interpretation: select the rows whose hometown record fuzzily matches to santiago de los caballeros . among these rows , select the rows whose age record is less than 19 . there is only one such row in the table . the contestant record of this unqiue row is valerie chardonnens vargas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_eq { all_rows ; hometown ; santiago de los caballeros } ; age ; 19 } } ; eq { hop { filter_less { filter_eq { all_rows ; hometown ; santiago de los caballeros } ; age ; 19 } ; contestant } ; valerie chardonnens vargas } }, interpretation: select the rows whose hometown record fuzzily matches to santiago de los caballeros . among these rows , select the rows whose age record is less than 19 . there is only one such row in the table . the contestant record of this unqiue row is valerie chardonnens vargas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_eq { all_rows ; hometown ; santiago de los caballeros } ; age ; 19 } } ; eq { hop { filter_less { filter_eq { all_rows ; hometown ; santiago de los caballeros } ; age ; 19 } ; contestant } ; valerie chardonnens vargas } }, interpretation: select the rows whose member countries record fuzzily matches to malta . take the gdp per capita ( us ) record of this row . select the rows whose member countries record fuzzily matches to czech republic . take the gdp per capita ( us ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; member countries ; malta } ; gdp per capita ( us ) } ; hop { filter_eq { all_rows ; member countries ; czech republic } ; gdp per capita ( us ) } }, interpretation: select the rows whose member countries record fuzzily matches to malta . take the gdp per capita ( us ) record of this row . select the rows whose member countries record fuzzily matches to czech republic . take the gdp per capita ( us ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; member countries ; malta } ; gdp per capita ( us ) } ; hop { filter_eq { all_rows ; member countries ; czech republic } ; gdp per capita ( us ) } }, interpretation: select the rows whose player record fuzzily matches to yordanos abay . take the goals record of this row . select the rows whose player record fuzzily matches to fathi jabir . take the goals record of this row . the second record is 15 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; yordanos abay } ; goals } ; hop { filter_eq { all_rows ; player ; fathi jabir } ; goals } } ; -15 }, interpretation: select the rows whose player record fuzzily matches to yordanos abay . take the goals record of this row . select the rows whose player record fuzzily matches to fathi jabir . take the goals record of this row . the second record is 15 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; yordanos abay } ; goals } ; hop { filter_eq { all_rows ; player ; fathi jabir } ; goals } } ; -15 }, interpretation: select the rows whose year record fuzzily matches to 1975 . take the stages record of this row . select the rows whose year record fuzzily matches to 1976 . take the stages record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1975 } ; stages } ; hop { filter_eq { all_rows ; year ; 1976 } ; stages } }, interpretation: select the rows whose year record fuzzily matches to 1975 . take the stages record of this row . select the rows whose year record fuzzily matches to 1976 . take the stages record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1975 } ; stages } ; hop { filter_eq { all_rows ; year ; 1976 } ; stages } }, interpretation: for the driver records of all rows , all of them fuzzily match to alessandro pier guidi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; driver ; alessandro pier guidi }, interpretation: for the driver records of all rows , all of them fuzzily match to alessandro pier guidi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; driver ; alessandro pier guidi }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose incumbent record fuzzily matches to otto passman . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to t ashton thompson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; otto passman } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; t ashton thompson } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to otto passman . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to t ashton thompson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; otto passman } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; t ashton thompson } ; first elected } }, interpretation: the sum of the score record of all rows is 29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 29 }, interpretation: the sum of the score record of all rows is 29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 29 }, interpretation: select the rows whose segment a record fuzzily matches to metal detectors . take the episode record of this row . select the rows whose segment a record fuzzily matches to riding mowers . take the episode record of this row . the second record is 1 larger than the first record . the episode record of the first row is 151 . the episode record of the second row is 152 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; segment a ; metal detectors } ; episode } ; hop { filter_eq { all_rows ; segment a ; riding mowers } ; episode } } ; -1 } ; and { eq { hop { filter_eq { all_rows ; segment a ; metal detectors } ; episode } ; 151 } ; eq { hop { filter_eq { all_rows ; segment a ; riding mowers } ; episode } ; 152 } } }, interpretation: select the rows whose segment a record fuzzily matches to metal detectors . take the episode record of this row . select the rows whose segment a record fuzzily matches to riding mowers . take the episode record of this row . the second record is 1 larger than the first record . the episode record of the first row is 151 . the episode record of the second row is 152 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; segment a ; metal detectors } ; episode } ; hop { filter_eq { all_rows ; segment a ; riding mowers } ; episode } } ; -1 } ; and { eq { hop { filter_eq { all_rows ; segment a ; metal detectors } ; episode } ; 151 } ; eq { hop { filter_eq { all_rows ; segment a ; riding mowers } ; episode } ; 152 } } }, interpretation: select the rows whose date record fuzzily matches to friday , 16 february . the sum of the crowd record of these rows is 46,000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; friday , 16 february } ; crowd } ; 46,000 }, interpretation: select the rows whose date record fuzzily matches to friday , 16 february . the sum of the crowd record of these rows is 46,000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; friday , 16 february } ; crowd } ; 46,000 }, interpretation: select the row whose number record of all rows is maximum . the unit numbers record of this row is 254001 - 254032 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number } ; unit numbers } ; 254001 - 254032 }, interpretation: select the row whose number record of all rows is maximum . the unit numbers record of this row is 254001 - 254032 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number } ; unit numbers } ; 254001 - 254032 }, interpretation: select the row whose quota record of all rows is 2nd maximum . the constituency record of this row is connachtulster .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; quota ; 2 } ; constituency } ; connachtulster }, interpretation: select the row whose quota record of all rows is 2nd maximum . the constituency record of this row is connachtulster .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; quota ; 2 } ; constituency } ; connachtulster }, interpretation: select the row whose foundation record of all rows is 2nd minimum . the english name record of this row is japan coast guard academy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; foundation ; 2 } ; english name } ; japan coast guard academy }, interpretation: select the row whose foundation record of all rows is 2nd minimum . the english name record of this row is japan coast guard academy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; foundation ; 2 } ; english name } ; japan coast guard academy }, interpretation: for the viewers ( million ) records of all rows , most of them are greater than 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; viewers ( million ) ; 3 }, interpretation: for the viewers ( million ) records of all rows , most of them are greater than 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; viewers ( million ) ; 3 }, interpretation: select the rows whose category record fuzzily matches to outstanding actor . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; category ; outstanding actor } } ; 3 }, interpretation: select the rows whose category record fuzzily matches to outstanding actor . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; category ; outstanding actor } } ; 3 }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the team record of this row is dallas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; team } ; dallas }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the team record of this row is dallas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; team } ; dallas }, interpretation: select the rows whose result record fuzzily matches to t . there is only one such row in the table . the date record of this unqiue row is october 2 , 1953 . the opponent record of this unqiue row is philadelphia eagles .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; t } } ; and { eq { hop { filter_eq { all_rows ; result ; t } ; date } ; october 2 , 1953 } ; eq { hop { filter_eq { all_rows ; result ; t } ; opponent } ; philadelphia eagles } } }, interpretation: select the rows whose result record fuzzily matches to t . there is only one such row in the table . the date record of this unqiue row is october 2 , 1953 . the opponent record of this unqiue row is philadelphia eagles .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; t } } ; and { eq { hop { filter_eq { all_rows ; result ; t } ; date } ; october 2 , 1953 } ; eq { hop { filter_eq { all_rows ; result ; t } ; opponent } ; philadelphia eagles } } }, interpretation: select the rows whose written by record fuzzily matches to lucy watkins . there is only one such row in the table . the title record of this unqiue row is sweet dreams .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; lucy watkins } } ; eq { hop { filter_eq { all_rows ; written by ; lucy watkins } ; title } ; sweet dreams } }, interpretation: select the rows whose written by record fuzzily matches to lucy watkins . there is only one such row in the table . the title record of this unqiue row is sweet dreams .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; lucy watkins } } ; eq { hop { filter_eq { all_rows ; written by ; lucy watkins } ; title } ; sweet dreams } }, interpretation: select the row whose design flow ( lpm ) record of all rows is maximum . the location record of this row is marcala , hon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; design flow ( lpm ) } ; location } ; marcala , hon }, interpretation: select the row whose design flow ( lpm ) record of all rows is maximum . the location record of this row is marcala , hon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; design flow ( lpm ) } ; location } ; marcala , hon }, interpretation: select the rows whose size ( steps ) record is greater than 4 . the average of the size ( cents ) record of these rows is 510 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_greater { all_rows ; size ( steps ) ; 4 } ; size ( cents ) } ; 510 }, interpretation: select the rows whose size ( steps ) record is greater than 4 . the average of the size ( cents ) record of these rows is 510 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_greater { all_rows ; size ( steps ) ; 4 } ; size ( cents ) } ; 510 }, interpretation: select the rows whose country record fuzzily matches to fiji . there is only one such row in the table . the player record of this unqiue row is vijay singh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; fiji } } ; eq { hop { filter_eq { all_rows ; country ; fiji } ; player } ; vijay singh } }, interpretation: select the rows whose name record fuzzily matches to richard schryer . take the round record of this row . select the rows whose name record fuzzily matches to james carter . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; richard schryer } ; round } ; hop { filter_eq { all_rows ; name ; james carter } ; round } }, interpretation: select the rows whose name record fuzzily matches to richard schryer . take the round record of this row . select the rows whose name record fuzzily matches to james carter . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; richard schryer } ; round } ; hop { filter_eq { all_rows ; name ; james carter } ; round } }, interpretation: select the rows whose years in orlando record fuzzily matches to present . there is only one such row in the table . the player record of this unqiue row is victor oladipo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; years in orlando ; present } } ; eq { hop { filter_eq { all_rows ; years in orlando ; present } ; player } ; victor oladipo } }, interpretation: select the rows whose years in orlando record fuzzily matches to present . there is only one such row in the table . the player record of this unqiue row is victor oladipo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; years in orlando ; present } } ; eq { hop { filter_eq { all_rows ; years in orlando ; present } ; player } ; victor oladipo } }, interpretation: select the row whose year joined record of all rows is 1st maximum . the school record of this row is elkhart christian .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year joined ; 1 } ; school } ; elkhart christian }, interpretation: select the row whose year joined record of all rows is 1st maximum . the school record of this row is elkhart christian .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year joined ; 1 } ; school } ; elkhart christian }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose attendance record is greater than 60000 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; november } ; attendance ; 60000 } } ; 1 }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose attendance record is greater than 60000 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; november } ; attendance ; 60000 } } ; 1 }, interpretation: select the rows whose team record fuzzily matches to bms scuderia italia . take the laps record of this row . select the rows whose team record fuzzily matches to jb racing . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; bms scuderia italia } ; laps } ; hop { filter_eq { all_rows ; team ; jb racing } ; laps } }, interpretation: select the rows whose team record fuzzily matches to bms scuderia italia . take the laps record of this row . select the rows whose team record fuzzily matches to jb racing . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; bms scuderia italia } ; laps } ; hop { filter_eq { all_rows ; team ; jb racing } ; laps } }, interpretation: select the row whose took office record of all rows is 4th minimum . the delegate record of this row is brian k mchale .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; took office ; 4 } ; delegate } ; brian k mchale }, interpretation: select the row whose took office record of all rows is 4th minimum . the delegate record of this row is brian k mchale .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; took office ; 4 } ; delegate } ; brian k mchale }, interpretation: for the nationality records of all rows , all of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; canada }, interpretation: for the nationality records of all rows , all of them fuzzily match to canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; canada }, interpretation: select the rows whose model record fuzzily matches to 325ti . take the power record of this row . select the rows whose model record fuzzily matches to 316ti . take the power record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; model ; 325ti } ; power } ; hop { filter_eq { all_rows ; model ; 316ti } ; power } }, interpretation: select the rows whose model record fuzzily matches to 325ti . take the power record of this row . select the rows whose model record fuzzily matches to 316ti . take the power record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; model ; 325ti } ; power } ; hop { filter_eq { all_rows ; model ; 316ti } ; power } }, interpretation: select the rows whose nationality record fuzzily matches to canada . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; canada } } ; 4 }, interpretation: select the rows whose nationality record fuzzily matches to canada . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; canada } } ; 4 }, interpretation: select the rows whose visitor record fuzzily matches to chicago black hawks . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; visitor ; chicago black hawks } } ; 3 }, interpretation: select the rows whose visitor record fuzzily matches to chicago black hawks . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; visitor ; chicago black hawks } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to december . for the attendance records of these rows , most of them are greater than 60000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; date ; december } ; attendance ; 60000 }, interpretation: select the rows whose date record fuzzily matches to december . for the attendance records of these rows , most of them are greater than 60000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; date ; december } ; attendance ; 60000 }, interpretation: select the rows whose year record is equal to 2008 . among these rows , select the rows whose length record is greater than 5:00 . there is only one such row in the table . the music video record of this unqiue row is umbrella ( feat younha ) ( \uc6b0\uc0b0 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; year ; 2008 } ; length ; 5:00 } } ; eq { hop { filter_greater { filter_eq { all_rows ; year ; 2008 } ; length ; 5:00 } ; music video } ; umbrella ( feat younha ) ( \uc6b0\uc0b0 ) } }, interpretation: select the rows whose year record is equal to 2008 . among these rows , select the rows whose length record is greater than 5:00 . there is only one such row in the table . the music video record of this unqiue row is umbrella ( feat younha ) ( \uc6b0\uc0b0 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; year ; 2008 } ; length ; 5:00 } } ; eq { hop { filter_greater { filter_eq { all_rows ; year ; 2008 } ; length ; 5:00 } ; music video } ; umbrella ( feat younha ) ( \uc6b0\uc0b0 ) } }, interpretation: select the rows whose round record is equal to 2 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; 2 } } ; 3 }, interpretation: select the rows whose round record is equal to 2 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; round ; 2 } } ; 3 }, interpretation: for the coach records of all rows , all of them fuzzily match to john cartwright .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; coach ; john cartwright }, interpretation: for the coach records of all rows , all of them fuzzily match to john cartwright .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; coach ; john cartwright }, interpretation: select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . select the rows whose home team record fuzzily matches to essendon . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } ; hop { filter_eq { all_rows ; home team ; essendon } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . select the rows whose home team record fuzzily matches to essendon . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } ; hop { filter_eq { all_rows ; home team ; essendon } ; home team score } }, interpretation: for the date records of all rows , all of them fuzzily match to 2 august 1980 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 2 august 1980 }, interpretation: for the date records of all rows , all of them fuzzily match to 2 august 1980 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 2 august 1980 }, interpretation: select the rows whose incumbent record fuzzily matches to david d terry . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to john little mcclellan . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; david d terry } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; john little mcclellan } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to david d terry . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to john little mcclellan . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; david d terry } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; john little mcclellan } ; first elected } }, interpretation: select the rows whose player record fuzzily matches to ed furgol . take the money record of this row . select the rows whose player record fuzzily matches to lloyd mangrum . take the money record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; ed furgol } ; money } ; hop { filter_eq { all_rows ; player ; lloyd mangrum } ; money } }, interpretation: select the rows whose player record fuzzily matches to ed furgol . take the money record of this row . select the rows whose player record fuzzily matches to lloyd mangrum . take the money record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; ed furgol } ; money } ; hop { filter_eq { all_rows ; player ; lloyd mangrum } ; money } }, interpretation: select the rows whose women 's singles record fuzzily matches to sara persson . there is only one such row in the table . the year record of this unqiue row is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; women 's singles ; sara persson } } ; eq { hop { filter_eq { all_rows ; women 's singles ; sara persson } ; year } ; 2006 } }, interpretation: select the rows whose women 's singles record fuzzily matches to sara persson . there is only one such row in the table . the year record of this unqiue row is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; women 's singles ; sara persson } } ; eq { hop { filter_eq { all_rows ; women 's singles ; sara persson } ; year } ; 2006 } }, interpretation: select the rows whose team record fuzzily matches to aermacchi . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; team ; aermacchi } }, interpretation: select the rows whose team record fuzzily matches to aermacchi . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; team ; aermacchi } }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the tournament record of this unqiue row is valencia , spain .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; tournament } ; valencia , spain } }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the tournament record of this unqiue row is valencia , spain .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; tournament } ; valencia , spain } }, interpretation: select the rows whose place record fuzzily matches to pietersburg . take the population record of this row . select the rows whose place record fuzzily matches to alldays . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; place ; pietersburg } ; population } ; hop { filter_eq { all_rows ; place ; alldays } ; population } }, interpretation: select the rows whose place record fuzzily matches to pietersburg . take the population record of this row . select the rows whose place record fuzzily matches to alldays . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; place ; pietersburg } ; population } ; hop { filter_eq { all_rows ; place ; alldays } ; population } }, interpretation: select the rows whose candidate 's name record fuzzily matches to michael mackay . take the rank record of this row . select the rows whose candidate 's name record fuzzily matches to joe larkin . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; candidate 's name ; michael mackay } ; rank } ; hop { filter_eq { all_rows ; candidate 's name ; joe larkin } ; rank } }, interpretation: select the rows whose candidate 's name record fuzzily matches to michael mackay . take the rank record of this row . select the rows whose candidate 's name record fuzzily matches to joe larkin . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; candidate 's name ; michael mackay } ; rank } ; hop { filter_eq { all_rows ; candidate 's name ; joe larkin } ; rank } }, interpretation: select the rows whose pick record is equal to 19 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pick ; 19 } } ; 3 }, interpretation: select the rows whose pick record is equal to 19 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pick ; 19 } } ; 3 }, interpretation: for the issue price records of all rows , most of them are less than 100.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; issue price ; 100.0 }, interpretation: for the issue price records of all rows , most of them are less than 100.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; issue price ; 100.0 }, interpretation: select the rows whose date introduced record fuzzily matches to june . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date introduced ; june } } ; 5 }, interpretation: select the rows whose date introduced record fuzzily matches to june . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date introduced ; june } } ; 5 }, interpretation: the average of the leading scorer record of all rows is 28.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; leading scorer } ; 28.5 }, interpretation: the average of the leading scorer record of all rows is 28.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; leading scorer } ; 28.5 }, interpretation: for the wins records of all rows , most of them are less than 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; wins ; 20 }, interpretation: for the wins records of all rows , most of them are less than 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; wins ; 20 }, interpretation: select the rows whose tournament record fuzzily matches to mercedes . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; mercedes } } ; 3 }, interpretation: select the rows whose tournament record fuzzily matches to mercedes . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; mercedes } } ; 3 }, interpretation: select the rows whose began play record fuzzily matches to 19 . for the club records of these rows , most of them fuzzily match to rochester .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; began play ; 19 } ; club ; rochester }, interpretation: select the rows whose began play record fuzzily matches to 19 . for the club records of these rows , most of them fuzzily match to rochester .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; began play ; 19 } ; club ; rochester }, interpretation: select the rows whose winning constructor record fuzzily matches to bugatti . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winning constructor ; bugatti } } ; 4 }, interpretation: select the rows whose winning constructor record fuzzily matches to bugatti . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winning constructor ; bugatti } } ; 4 }, interpretation: for the notes records of all rows , most of them fuzzily match to french .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; notes ; french }, interpretation: for the notes records of all rows , most of them fuzzily match to french .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; notes ; french }, interpretation: for the time records of all rows , most of them are less than 54.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; time ; 54.0 }, interpretation: for the time records of all rows , most of them are less than 54.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; time ; 54.0 }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose attendance record is greater than 60,000 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; november } ; attendance ; 60,000 } } ; 1 }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose attendance record is greater than 60,000 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; november } ; attendance ; 60,000 } } ; 1 }, interpretation: select the rows whose branch record fuzzily matches to us marine corps . there is only one such row in the table . the name record of this unqiue row is general james l jones .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; branch ; us marine corps } } ; eq { hop { filter_eq { all_rows ; branch ; us marine corps } ; name } ; general james l jones } }, interpretation: select the rows whose branch record fuzzily matches to us marine corps . there is only one such row in the table . the name record of this unqiue row is general james l jones .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; branch ; us marine corps } } ; eq { hop { filter_eq { all_rows ; branch ; us marine corps } ; name } ; general james l jones } }, interpretation: the average of the bronze record of all rows is 1.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; bronze } ; 1.67 }, interpretation: the average of the bronze record of all rows is 1.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; bronze } ; 1.67 }, interpretation: select the row whose enrollment record of all rows is maximum . the location record of this row is cleveland , tennessee .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; location } ; cleveland , tennessee }, interpretation: select the row whose enrollment record of all rows is maximum . the location record of this row is cleveland , tennessee .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; location } ; cleveland , tennessee }, interpretation: select the row whose location attendance record of all rows is 1st maximum . the team record of this row is chicago .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 1 } ; team } ; chicago }, interpretation: select the row whose location attendance record of all rows is 1st maximum . the team record of this row is chicago .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 1 } ; team } ; chicago }, interpretation: select the rows whose college record fuzzily matches to houston . there is only one such row in the table . the name record of this unqiue row is jimmy herndon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; houston } } ; eq { hop { filter_eq { all_rows ; college ; houston } ; name } ; jimmy herndon } }, interpretation: select the rows whose college record fuzzily matches to houston . there is only one such row in the table . the name record of this unqiue row is jimmy herndon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; houston } } ; eq { hop { filter_eq { all_rows ; college ; houston } ; name } ; jimmy herndon } }, interpretation: select the rows whose winner record fuzzily matches to rangers . among these rows , select the rows whose runner - up record fuzzily matches to morton . there is only one such row in the table . the season record of this unqiue row is 1941 - 42 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; winner ; rangers } ; runner - up ; morton } } ; eq { hop { filter_eq { filter_eq { all_rows ; winner ; rangers } ; runner - up ; morton } ; season } ; 1941 - 42 } }, interpretation: select the rows whose winner record fuzzily matches to rangers . among these rows , select the rows whose runner - up record fuzzily matches to morton . there is only one such row in the table . the season record of this unqiue row is 1941 - 42 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; winner ; rangers } ; runner - up ; morton } } ; eq { hop { filter_eq { filter_eq { all_rows ; winner ; rangers } ; runner - up ; morton } ; season } ; 1941 - 42 } }, interpretation: select the row whose original air date record of all rows is 1st maximum . the title record of this row is i 'll take you .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; title } ; i 'll take you }, interpretation: select the row whose original air date record of all rows is 1st maximum . the title record of this row is i 'll take you .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; title } ; i 'll take you }, interpretation: select the rows whose year record fuzzily matches to 1996 . take the winnings record of this row . select the rows whose year record fuzzily matches to 1998 . take the winnings record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1996 } ; winnings } ; hop { filter_eq { all_rows ; year ; 1998 } ; winnings } }, interpretation: select the rows whose year record fuzzily matches to 1996 . take the winnings record of this row . select the rows whose year record fuzzily matches to 1998 . take the winnings record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1996 } ; winnings } ; hop { filter_eq { all_rows ; year ; 1998 } ; winnings } }, interpretation: select the rows whose frequency mhz record is greater than 100 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; frequency mhz ; 100 } } ; 3 }, interpretation: select the rows whose frequency mhz record is greater than 100 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; frequency mhz ; 100 } } ; 3 }, interpretation: select the rows whose shooter record fuzzily matches to cze . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; shooter ; cze } } ; 2 }, interpretation: select the rows whose shooter record fuzzily matches to cze . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; shooter ; cze } } ; 2 }, interpretation: select the row whose original air date record of all rows is 2nd maximum . the title record of this row is the understudy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 2 } ; title } ; the understudy }, interpretation: select the row whose original air date record of all rows is 2nd maximum . the title record of this row is the understudy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 2 } ; title } ; the understudy }, interpretation: select the rows whose score record fuzzily matches to 1-1 . there is only one such row in the table . the april record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 1-1 } } ; eq { hop { filter_eq { all_rows ; score ; 1-1 } ; april } ; 1 } }, interpretation: select the rows whose score record fuzzily matches to 1-1 . there is only one such row in the table . the april record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 1-1 } } ; eq { hop { filter_eq { all_rows ; score ; 1-1 } ; april } ; 1 } }, interpretation: the average of the for record of all rows is 31 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; for } ; 31 }, interpretation: the average of the for record of all rows is 31 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; for } ; 31 }, interpretation: select the row whose points record of all rows is 2nd maximum . the name record of this row is angelika buck / erich buck .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; name } ; angelika buck / erich buck }, interpretation: select the row whose points record of all rows is 2nd maximum . the name record of this row is angelika buck / erich buck .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; name } ; angelika buck / erich buck }, interpretation: select the rows whose result record fuzzily matches to win . the sum of the black knights points record of these rows is 85 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; win } ; black knights points } ; 85 }, interpretation: select the rows whose result record fuzzily matches to win . the sum of the black knights points record of these rows is 85 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; win } ; black knights points } ; 85 }, interpretation: select the rows whose overall pick record fuzzily matches to 9 . take the overall pick record of this row . select the rows whose overall pick record fuzzily matches to 18 . take the overall pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; overall pick ; 9 } ; overall pick } ; hop { filter_eq { all_rows ; overall pick ; 18 } ; overall pick } }, interpretation: select the rows whose overall pick record fuzzily matches to 9 . take the overall pick record of this row . select the rows whose overall pick record fuzzily matches to 18 . take the overall pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; overall pick ; 9 } ; overall pick } ; hop { filter_eq { all_rows ; overall pick ; 18 } ; overall pick } }, interpretation: the sum of the total record of all rows is 25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 25 }, interpretation: the sum of the total record of all rows is 25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 25 }, interpretation: select the rows whose town ships record is equal to 18 . there is only one such row in the table . the state / region record of this unqiue row is kachin state .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; town ships ; 18 } } ; eq { hop { filter_eq { all_rows ; town ships ; 18 } ; state / region } ; kachin state } }, interpretation: select the rows whose town ships record is equal to 18 . there is only one such row in the table . the state / region record of this unqiue row is kachin state .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; town ships ; 18 } } ; eq { hop { filter_eq { all_rows ; town ships ; 18 } ; state / region } ; kachin state } }, interpretation: select the row whose vuelta record of all rows is maximum . the name record of this row is tony rominger ( sui ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; vuelta } ; name } ; tony rominger ( sui ) }, interpretation: select the row whose vuelta record of all rows is maximum . the name record of this row is tony rominger ( sui ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; vuelta } ; name } ; tony rominger ( sui ) }, interpretation: for the year opened records of all rows , most of them are less than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year opened ; 2000 }, interpretation: for the year opened records of all rows , most of them are less than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year opened ; 2000 }, interpretation: select the row whose population record of all rows is 2nd maximum . the official name record of this row is hillsborough .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 2 } ; official name } ; hillsborough }, interpretation: select the row whose population record of all rows is 2nd maximum . the official name record of this row is hillsborough .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 2 } ; official name } ; hillsborough }, interpretation: for the venue records of all rows , all of them fuzzily match to skonto hall , riga .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; venue ; skonto hall , riga }, interpretation: for the venue records of all rows , all of them fuzzily match to skonto hall , riga .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; venue ; skonto hall , riga }, interpretation: select the rows whose aspect record fuzzily matches to 16:9 . there is only one such row in the table . the channel record of this unqiue row is 26.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; aspect ; 16:9 } } ; eq { hop { filter_eq { all_rows ; aspect ; 16:9 } ; channel } ; 26.1 } }, interpretation: select the rows whose aspect record fuzzily matches to 16:9 . there is only one such row in the table . the channel record of this unqiue row is 26.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; aspect ; 16:9 } } ; eq { hop { filter_eq { all_rows ; aspect ; 16:9 } ; channel } ; 26.1 } }, interpretation: select the rows whose winner record fuzzily matches to kiveton park . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winner ; kiveton park } } ; 2 }, interpretation: select the rows whose winner record fuzzily matches to kiveton park . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winner ; kiveton park } } ; 2 }, interpretation: select the rows whose tournament record fuzzily matches to fukuoka , japan . there is only one such row in the table . the date record of this unqiue row is may 11 , 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; fukuoka , japan } } ; eq { hop { filter_eq { all_rows ; tournament ; fukuoka , japan } ; date } ; may 11 , 2003 } }, interpretation: select the rows whose tournament record fuzzily matches to fukuoka , japan . there is only one such row in the table . the date record of this unqiue row is may 11 , 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; fukuoka , japan } } ; eq { hop { filter_eq { all_rows ; tournament ; fukuoka , japan } ; date } ; may 11 , 2003 } }, interpretation: select the row whose win % record of all rows is 2nd maximum . the coach record of this row is jim larranaga .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win % ; 2 } ; coach } ; jim larranaga }, interpretation: select the row whose win % record of all rows is 2nd maximum . the coach record of this row is jim larranaga .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win % ; 2 } ; coach } ; jim larranaga }, interpretation: select the rows whose result record fuzzily matches to selected . there is only one such row in the table . the week record of this unqiue row is wild card .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; selected } } ; eq { hop { filter_eq { all_rows ; result ; selected } ; week } ; wild card } }, interpretation: select the rows whose result record fuzzily matches to selected . there is only one such row in the table . the week record of this unqiue row is wild card .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; selected } } ; eq { hop { filter_eq { all_rows ; result ; selected } ; week } ; wild card } }, interpretation: select the rows whose date record fuzzily matches to 2 april . select the row whose crowd record of these rows is 1st maximum . the home team record of this row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; date ; 2 april } ; crowd ; 1 } ; home team } ; collingwood }, interpretation: select the rows whose date record fuzzily matches to 2 april . select the row whose crowd record of these rows is 1st maximum . the home team record of this row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; date ; 2 april } ; crowd ; 1 } ; home team } ; collingwood }, interpretation: select the rows whose nation record fuzzily matches to mexico . take the total record of this row . select the rows whose nation record fuzzily matches to canada . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; mexico } ; total } ; hop { filter_eq { all_rows ; nation ; canada } ; total } }, interpretation: select the rows whose nation record fuzzily matches to mexico . take the total record of this row . select the rows whose nation record fuzzily matches to canada . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; mexico } ; total } ; hop { filter_eq { all_rows ; nation ; canada } ; total } }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 4th minimum . the attendance record of this row is 45511 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 4 } ; attendance } ; 45511 }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 4th minimum . the attendance record of this row is 45511 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 4 } ; attendance } ; 45511 }, interpretation: the sum of the games played record of all rows is 52 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; games played } ; 52 }, interpretation: the sum of the games played record of all rows is 52 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; games played } ; 52 }, interpretation: select the rows whose year record is equal to 1990 . the sum of the pages record of these rows is 1135 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1990 } ; pages } ; 1135 }, interpretation: select the rows whose year record is equal to 1990 . the sum of the pages record of these rows is 1135 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1990 } ; pages } ; 1135 }, interpretation: select the rows whose year record fuzzily matches to 1998 . take the result record of this row . select the rows whose year record fuzzily matches to 2010 . take the result record of this row . the first record fuzzily matches to the second record . the result record of the first row is champions . the result record of the second row is champions .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; year ; 1998 } ; result } ; hop { filter_eq { all_rows ; year ; 2010 } ; result } } ; and { eq { hop { filter_eq { all_rows ; year ; 1998 } ; result } ; champions } ; eq { hop { filter_eq { all_rows ; year ; 2010 } ; result } ; champions } } }, interpretation: select the rows whose year record fuzzily matches to 1998 . take the result record of this row . select the rows whose year record fuzzily matches to 2010 . take the result record of this row . the first record fuzzily matches to the second record . the result record of the first row is champions . the result record of the second row is champions .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; year ; 1998 } ; result } ; hop { filter_eq { all_rows ; year ; 2010 } ; result } } ; and { eq { hop { filter_eq { all_rows ; year ; 1998 } ; result } ; champions } ; eq { hop { filter_eq { all_rows ; year ; 2010 } ; result } ; champions } } }, interpretation: for the result records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; win }, interpretation: for the result records of all rows , most of them fuzzily match to win .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; win }, interpretation: the average of the attendance record of all rows is 23036 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 23036 }, interpretation: the average of the attendance record of all rows is 23036 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 23036 }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose candidates record fuzzily matches to % . there is only one such row in the table . the district record of this unqiue row is arkansas 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; % } } ; eq { hop { filter_eq { all_rows ; candidates ; % } ; district } ; arkansas 5 } }, interpretation: select the rows whose candidates record fuzzily matches to % . there is only one such row in the table . the district record of this unqiue row is arkansas 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; % } } ; eq { hop { filter_eq { all_rows ; candidates ; % } ; district } ; arkansas 5 } }, interpretation: select the row whose population record of all rows is maximum . the official name record of this row is saint george .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; official name } ; saint george }, interpretation: select the row whose population record of all rows is maximum . the official name record of this row is saint george .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; official name } ; saint george }, interpretation: select the row whose points record of all rows is 2nd maximum . the club record of this row is c\u00e1diz cf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; club } ; c\u00e1diz cf }, interpretation: select the row whose points record of all rows is 2nd maximum . the club record of this row is c\u00e1diz cf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; club } ; c\u00e1diz cf }, interpretation: select the row whose height record of all rows is 3rd maximum . the name record of this row is will hudson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ; 3 } ; name } ; will hudson }, interpretation: select the row whose height record of all rows is 3rd maximum . the name record of this row is will hudson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ; 3 } ; name } ; will hudson }, interpretation: the average of the us viewers ( millions ) record of all rows is 11.34 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 11.34 }, interpretation: the average of the us viewers ( millions ) record of all rows is 11.34 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 11.34 }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose silver record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; silver ; 2 } } ; 2 }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose silver record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; silver ; 2 } } ; 2 }, interpretation: select the rows whose city record fuzzily matches to budapest , hungary . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; city ; budapest , hungary } }, interpretation: select the rows whose city record fuzzily matches to budapest , hungary . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; city ; budapest , hungary } }, interpretation: select the rows whose home team record fuzzily matches to manchester city . take the score record of this row . select the rows whose home team record fuzzily matches to arsenal . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; manchester city } ; score } ; hop { filter_eq { all_rows ; home team ; arsenal } ; score } }, interpretation: select the rows whose home team record fuzzily matches to manchester city . take the score record of this row . select the rows whose home team record fuzzily matches to arsenal . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; manchester city } ; score } ; hop { filter_eq { all_rows ; home team ; arsenal } ; score } }, interpretation: select the rows whose week record fuzzily matches to 17 . take the result record of this row . select the rows whose week record fuzzily matches to 16 . take the result record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; week ; 17 } ; result } ; hop { filter_eq { all_rows ; week ; 16 } ; result } }, interpretation: select the rows whose week record fuzzily matches to 17 . take the result record of this row . select the rows whose week record fuzzily matches to 16 . take the result record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; week ; 17 } ; result } ; hop { filter_eq { all_rows ; week ; 16 } ; result } }, interpretation: for the headquarters records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; headquarters ; united states }, interpretation: for the headquarters records of all rows , most of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; headquarters ; united states }, interpretation: select the rows whose born / died record fuzzily matches to present . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; born / died ; present } } ; 2 }, interpretation: select the rows whose born / died record fuzzily matches to present . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; born / died ; present } } ; 2 }, interpretation: select the rows whose club record fuzzily matches to balmain tigers . there is only one such row in the table . the name record of this unqiue row is gavin woods .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; club ; balmain tigers } } ; eq { hop { filter_eq { all_rows ; club ; balmain tigers } ; name } ; gavin woods } }, interpretation: select the rows whose club record fuzzily matches to balmain tigers . there is only one such row in the table . the name record of this unqiue row is gavin woods .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; club ; balmain tigers } } ; eq { hop { filter_eq { all_rows ; club ; balmain tigers } ; name } ; gavin woods } }, interpretation: select the row whose unemployment rate record of all rows is maximum . the county record of this row is schoharie .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; unemployment rate } ; county } ; schoharie }, interpretation: select the row whose unemployment rate record of all rows is maximum . the county record of this row is schoharie .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; unemployment rate } ; county } ; schoharie }, interpretation: the 1st minimum date of vacancy record of all rows is 7 sep 2010 . the outgoing head coach record of the row with 1st minimum date of vacancy record is rasoul korbekandi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date of vacancy ; 1 } ; 7 sep 2010 } ; eq { hop { nth_argmin { all_rows ; date of vacancy ; 1 } ; outgoing head coach } ; rasoul korbekandi } }, interpretation: the 1st minimum date of vacancy record of all rows is 7 sep 2010 . the outgoing head coach record of the row with 1st minimum date of vacancy record is rasoul korbekandi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date of vacancy ; 1 } ; 7 sep 2010 } ; eq { hop { nth_argmin { all_rows ; date of vacancy ; 1 } ; outgoing head coach } ; rasoul korbekandi } }, interpretation: select the row whose money record of all rows is 2nd maximum . the player record of this row is tom watson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; money ; 2 } ; player } ; tom watson }, interpretation: select the row whose money record of all rows is 2nd maximum . the player record of this row is tom watson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; money ; 2 } ; player } ; tom watson }, interpretation: for the nationality records of all rows , most of them fuzzily match to aut .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; aut }, interpretation: for the nationality records of all rows , most of them fuzzily match to aut .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; aut }, interpretation: for the ownership records of all rows , most of them do not match to state - owned .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; ownership ; state - owned }, interpretation: for the ownership records of all rows , most of them do not match to state - owned .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; ownership ; state - owned }, interpretation: for the country records of all rows , most of them fuzzily match to belgium .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; belgium }, interpretation: for the country records of all rows , most of them fuzzily match to belgium .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; belgium }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is pat cannon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; pat cannon }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is pat cannon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; pat cannon }, interpretation: select the row whose max power record of all rows is minimum . the vehicle record of this row is nissan y11 ad van .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; max power } ; vehicle } ; nissan y11 ad van }, interpretation: select the row whose max power record of all rows is minimum . the vehicle record of this row is nissan y11 ad van .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; max power } ; vehicle } ; nissan y11 ad van }, interpretation: the 14th minimum no record of all rows is 14 . the date record of the row with 14th minimum no record is 18 mar 2012 . the winners share record of the row with 14th minimum no record is 225000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; no ; 14 } ; 14 } ; and { eq { hop { nth_argmin { all_rows ; no ; 14 } ; date } ; 18 mar 2012 } ; eq { hop { nth_argmin { all_rows ; no ; 14 } ; winners share } ; 225000 } } }, interpretation: the 14th minimum no record of all rows is 14 . the date record of the row with 14th minimum no record is 18 mar 2012 . the winners share record of the row with 14th minimum no record is 225000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; no ; 14 } ; 14 } ; and { eq { hop { nth_argmin { all_rows ; no ; 14 } ; date } ; 18 mar 2012 } ; eq { hop { nth_argmin { all_rows ; no ; 14 } ; winners share } ; 225000 } } }, interpretation: select the row whose worldwide gross record of all rows is 4th maximum . the title record of this row is the hobbit : an unexpected journey .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; worldwide gross ; 4 } ; title } ; the hobbit : an unexpected journey }, interpretation: select the row whose worldwide gross record of all rows is 4th maximum . the title record of this row is the hobbit : an unexpected journey .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; worldwide gross ; 4 } ; title } ; the hobbit : an unexpected journey }, interpretation: select the rows whose opponent record fuzzily matches to mississippi state . take the date record of this row . select the rows whose opponent record fuzzily matches to vanderbilt . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; mississippi state } ; date } ; hop { filter_eq { all_rows ; opponent ; vanderbilt } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to mississippi state . take the date record of this row . select the rows whose opponent record fuzzily matches to vanderbilt . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; mississippi state } ; date } ; hop { filter_eq { all_rows ; opponent ; vanderbilt } ; date } }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: the average of the original air date record of all rows is 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; original air date } ; 2009 }, interpretation: the average of the original air date record of all rows is 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; original air date } ; 2009 }, interpretation: select the rows whose transfer window record fuzzily matches to winter . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; transfer window ; winter } } ; 3 }, interpretation: select the rows whose transfer window record fuzzily matches to winter . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; transfer window ; winter } } ; 3 }, interpretation: select the rows whose categor\u00eda record fuzzily matches to rock group . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; categor\u00eda ; rock group } } ; 2 }, interpretation: select the rows whose categor\u00eda record fuzzily matches to rock group . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; categor\u00eda ; rock group } } ; 2 }, interpretation: the sum of the electorate record of all rows is 2633581 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; electorate } ; 2633581 }, interpretation: the sum of the electorate record of all rows is 2633581 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; electorate } ; 2633581 }, interpretation: for the class records of all rows , all of them fuzzily match to d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; class ; d }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is new orleans saints .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; new orleans saints }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is new orleans saints .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; new orleans saints }, interpretation: select the rows whose high assists record fuzzily matches to delonte west . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; high assists ; delonte west } }, interpretation: select the rows whose high assists record fuzzily matches to delonte west . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; high assists ; delonte west } }, interpretation: select the rows whose club record fuzzily matches to lokomotiva b . take the number of seasons in prva hnl record of this row . select the rows whose club record fuzzily matches to slaven belupo b . take the number of seasons in prva hnl record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; lokomotiva b } ; number of seasons in prva hnl } ; hop { filter_eq { all_rows ; club ; slaven belupo b } ; number of seasons in prva hnl } }, interpretation: select the rows whose club record fuzzily matches to lokomotiva b . take the number of seasons in prva hnl record of this row . select the rows whose club record fuzzily matches to slaven belupo b . take the number of seasons in prva hnl record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; lokomotiva b } ; number of seasons in prva hnl } ; hop { filter_eq { all_rows ; club ; slaven belupo b } ; number of seasons in prva hnl } }, interpretation: select the rows whose location record fuzzily matches to victoriaville , quebec , canada . there is only one such row in the table . the opponent record of this unqiue row is brian magee .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; victoriaville , quebec , canada } } ; eq { hop { filter_eq { all_rows ; location ; victoriaville , quebec , canada } ; opponent } ; brian magee } }, interpretation: select the rows whose location record fuzzily matches to victoriaville , quebec , canada . there is only one such row in the table . the opponent record of this unqiue row is brian magee .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; victoriaville , quebec , canada } } ; eq { hop { filter_eq { all_rows ; location ; victoriaville , quebec , canada } ; opponent } ; brian magee } }, interpretation: for the location attendance records of all rows , most of them fuzzily match to american airlines arena .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location attendance ; american airlines arena }, interpretation: for the location attendance records of all rows , most of them fuzzily match to american airlines arena .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location attendance ; american airlines arena }, interpretation: the average of the pieces record of all rows is 271.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pieces } ; 271.6 }, interpretation: the average of the pieces record of all rows is 271.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pieces } ; 271.6 }, interpretation: for the population ( 2011 - 01 - 01 ) records of all rows , most of them are greater than 511840 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; population ( 2011 - 01 - 01 ) ; 511840 }, interpretation: for the population ( 2011 - 01 - 01 ) records of all rows , most of them are greater than 511840 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; population ( 2011 - 01 - 01 ) ; 511840 }, interpretation: the average of the money record of all rows is 1584 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money } ; 1584 }, interpretation: the average of the money record of all rows is 1584 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money } ; 1584 }, interpretation: select the rows whose matches record is less than 10 . among these rows , select the rows whose innings record is greater than 14 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_less { all_rows ; matches ; 10 } ; innings ; 14 } } ; 2 }, interpretation: select the rows whose matches record is less than 10 . among these rows , select the rows whose innings record is greater than 14 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_less { all_rows ; matches ; 10 } ; innings ; 14 } } ; 2 }, interpretation: select the rows whose age record is equal to 8 . among these rows , select the rows whose sp record fuzzily matches to 20 / 1 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; age ; 8 } ; sp ; 20 / 1 } } ; 1 }, interpretation: select the rows whose age record is equal to 8 . among these rows , select the rows whose sp record fuzzily matches to 20 / 1 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; age ; 8 } ; sp ; 20 / 1 } } ; 1 }, interpretation: for the established records of all rows , most of them are greater than or equal to 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; established ; 2000 }, interpretation: for the established records of all rows , most of them are greater than or equal to 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; established ; 2000 }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose owner record fuzzily matches to wnetorg . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; owner ; wnetorg } } ; 2 }, interpretation: select the rows whose owner record fuzzily matches to wnetorg . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; owner ; wnetorg } } ; 2 }, interpretation: select the rows whose place record is equal to 1 . there is only one such row in the table . the draw record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; place ; 1 } } ; eq { hop { filter_eq { all_rows ; place ; 1 } ; draw } ; 1 } }, interpretation: select the rows whose place record is equal to 1 . there is only one such row in the table . the draw record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; place ; 1 } } ; eq { hop { filter_eq { all_rows ; place ; 1 } ; draw } ; 1 } }, interpretation: the average of the attendance record of all rows is 6999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 6999 }, interpretation: the average of the attendance record of all rows is 6999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 6999 }, interpretation: select the rows whose team record fuzzily matches to new orleans . the sum of the location attendance record of these rows is 27053 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; new orleans } ; location attendance } ; 27053 }, interpretation: select the rows whose team record fuzzily matches to new orleans . the sum of the location attendance record of these rows is 27053 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; new orleans } ; location attendance } ; 27053 }, interpretation: the average of the crowd record of all rows is 18978 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 18978 }, interpretation: the average of the crowd record of all rows is 18978 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 18978 }, interpretation: for the distance / duration records of all rows , all of them are greater than 40 laps .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; distance / duration ; 40 laps }, interpretation: for the distance / duration records of all rows , all of them are greater than 40 laps .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; distance / duration ; 40 laps }, interpretation: select the rows whose code name record fuzzily matches to surfer . take the serial number record of this row . select the rows whose code name record fuzzily matches to shark . take the serial number record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; code name ; surfer } ; serial number } ; hop { filter_eq { all_rows ; code name ; shark } ; serial number } }, interpretation: select the rows whose code name record fuzzily matches to surfer . take the serial number record of this row . select the rows whose code name record fuzzily matches to shark . take the serial number record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; code name ; surfer } ; serial number } ; hop { filter_eq { all_rows ; code name ; shark } ; serial number } }, interpretation: for the prize records of all rows , most of them are greater than 500,000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; prize ; 500,000 }, interpretation: for the prize records of all rows , most of them are greater than 500,000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; prize ; 500,000 }, interpretation: select the rows whose type record fuzzily matches to embankment . the maximum height ( m ) record of these rows is 67.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; type ; embankment } ; height ( m ) } ; 67.0 }, interpretation: select the rows whose type record fuzzily matches to embankment . the maximum height ( m ) record of these rows is 67.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; type ; embankment } ; height ( m ) } ; 67.0 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is june 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; june 9 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is june 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; june 9 }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: select the rows whose track record fuzzily matches to mono 45upm - romance adieu ( weltklang remix ) . take the year record of this row . select the rows whose track record fuzzily matches to kinder aus asbest - hey engel ( weltklang remix ) . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; track ; mono 45upm - romance adieu ( weltklang remix ) } ; year } ; hop { filter_eq { all_rows ; track ; kinder aus asbest - hey engel ( weltklang remix ) } ; year } }, interpretation: select the rows whose track record fuzzily matches to mono 45upm - romance adieu ( weltklang remix ) . take the year record of this row . select the rows whose track record fuzzily matches to kinder aus asbest - hey engel ( weltklang remix ) . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; track ; mono 45upm - romance adieu ( weltklang remix ) } ; year } ; hop { filter_eq { all_rows ; track ; kinder aus asbest - hey engel ( weltklang remix ) } ; year } }, interpretation: for the nationality records of all rows , most of them fuzzily match to spain .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; spain }, interpretation: for the nationality records of all rows , most of them fuzzily match to spain .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; spain }, interpretation: for the winning party 2003 records of all rows , most of them fuzzily match to labour .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winning party 2003 ; labour }, interpretation: for the winning party 2003 records of all rows , most of them fuzzily match to labour .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winning party 2003 ; labour }, interpretation: select the rows whose country record fuzzily matches to belgium . take the total record of this row . select the rows whose country record fuzzily matches to brazil . take the total record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; belgium } ; total } ; hop { filter_eq { all_rows ; country ; brazil } ; total } }, interpretation: select the rows whose country record fuzzily matches to belgium . take the total record of this row . select the rows whose country record fuzzily matches to brazil . take the total record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; belgium } ; total } ; hop { filter_eq { all_rows ; country ; brazil } ; total } }, interpretation: the average of the viewing figure record of all rows is 6.73 million .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewing figure } ; 6.73 million }, interpretation: the average of the viewing figure record of all rows is 6.73 million .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewing figure } ; 6.73 million }, interpretation: select the rows whose year record is equal to 1987 . the sum of the notes record of these rows is 4:27:46 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1987 } ; notes } ; 4:27:46 }, interpretation: select the rows whose year record is equal to 1987 . the sum of the notes record of these rows is 4:27:46 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1987 } ; notes } ; 4:27:46 }, interpretation: select the row whose imports record of all rows is maximum . the country record of this row is china .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; imports } ; country } ; china }, interpretation: select the row whose imports record of all rows is maximum . the country record of this row is china .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; imports } ; country } ; china }, interpretation: select the row whose finish record of all rows is 2nd minimum . the player record of this row is jeff sluman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; finish ; 2 } ; player } ; jeff sluman }, interpretation: select the row whose finish record of all rows is 2nd minimum . the player record of this row is jeff sluman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; finish ; 2 } ; player } ; jeff sluman }, interpretation: select the rows whose season record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; season } } ; 5 }, interpretation: select the rows whose national titles record is equal to 0 . there is only one such row in the table . the school record of this unqiue row is college of saint mary .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; national titles ; 0 } } ; eq { hop { filter_eq { all_rows ; national titles ; 0 } ; school } ; college of saint mary } }, interpretation: select the rows whose national titles record is equal to 0 . there is only one such row in the table . the school record of this unqiue row is college of saint mary .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; national titles ; 0 } } ; eq { hop { filter_eq { all_rows ; national titles ; 0 } ; school } ; college of saint mary } }, interpretation: select the row whose elevation ( m ) record of all rows is 2nd maximum . the peak record of this row is sn\u00f8hetta .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; elevation ( m ) ; 2 } ; peak } ; sn\u00f8hetta }, interpretation: select the row whose elevation ( m ) record of all rows is 2nd maximum . the peak record of this row is sn\u00f8hetta .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; elevation ( m ) ; 2 } ; peak } ; sn\u00f8hetta }, interpretation: select the rows whose region record fuzzily matches to united states . there is only one such row in the table . the date record of this unqiue row is 17 march 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; region ; united states } } ; eq { hop { filter_eq { all_rows ; region ; united states } ; date } ; 17 march 2009 } }, interpretation: select the rows whose region record fuzzily matches to united states . there is only one such row in the table . the date record of this unqiue row is 17 march 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; region ; united states } } ; eq { hop { filter_eq { all_rows ; region ; united states } ; date } ; 17 march 2009 } }, interpretation: select the rows whose nickname record fuzzily matches to polar bears . there is only one such row in the table . the school record of this unqiue row is jackson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nickname ; polar bears } } ; eq { hop { filter_eq { all_rows ; nickname ; polar bears } ; school } ; jackson } }, interpretation: select the rows whose nickname record fuzzily matches to polar bears . there is only one such row in the table . the school record of this unqiue row is jackson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nickname ; polar bears } } ; eq { hop { filter_eq { all_rows ; nickname ; polar bears } ; school } ; jackson } }, interpretation: select the rows whose aspect record fuzzily matches to 16:9 . there is only one such row in the table . the channel record of this unqiue row is 31.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; aspect ; 16:9 } } ; eq { hop { filter_eq { all_rows ; aspect ; 16:9 } ; channel } ; 31.1 } }, interpretation: select the rows whose aspect record fuzzily matches to 16:9 . there is only one such row in the table . the channel record of this unqiue row is 31.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; aspect ; 16:9 } } ; eq { hop { filter_eq { all_rows ; aspect ; 16:9 } ; channel } ; 31.1 } }, interpretation: select the rows whose route of administration record fuzzily matches to iv . among these rows , select the rows whose investigation record fuzzily matches to infection / inflammation imaging . there is only one such row in the table . the name record of this unqiue row is in111 - s leukocyte .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; route of administration ; iv } ; investigation ; infection / inflammation imaging } } ; eq { hop { filter_eq { filter_eq { all_rows ; route of administration ; iv } ; investigation ; infection / inflammation imaging } ; name } ; in111 - s leukocyte } }, interpretation: select the rows whose route of administration record fuzzily matches to iv . among these rows , select the rows whose investigation record fuzzily matches to infection / inflammation imaging . there is only one such row in the table . the name record of this unqiue row is in111 - s leukocyte .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; route of administration ; iv } ; investigation ; infection / inflammation imaging } } ; eq { hop { filter_eq { filter_eq { all_rows ; route of administration ; iv } ; investigation ; infection / inflammation imaging } ; name } ; in111 - s leukocyte } }, interpretation: the average of the population record of all rows is 60970 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population } ; 60970 }, interpretation: the average of the population record of all rows is 60970 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population } ; 60970 }, interpretation: the average of the pop record of all rows is 38009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pop } ; 38009 }, interpretation: the average of the pop record of all rows is 38009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pop } ; 38009 }, interpretation: select the row whose date record of all rows is 2nd maximum . the tournament record of this row is augusta , united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; tournament } ; augusta , united states }, interpretation: select the row whose date record of all rows is 2nd maximum . the tournament record of this row is augusta , united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; tournament } ; augusta , united states }, interpretation: select the rows whose date record fuzzily matches to sunday , november 16 . take the attendance record of this row . select the rows whose date record fuzzily matches to monday , december 22 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; sunday , november 16 } ; attendance } ; hop { filter_eq { all_rows ; date ; monday , december 22 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to sunday , november 16 . take the attendance record of this row . select the rows whose date record fuzzily matches to monday , december 22 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; sunday , november 16 } ; attendance } ; hop { filter_eq { all_rows ; date ; monday , december 22 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to october . select the row whose attendance record of these rows is 1st maximum . the opponent record of this row is dallas cowboys .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; date ; october } ; attendance ; 1 } ; opponent } ; dallas cowboys }, interpretation: select the rows whose date record fuzzily matches to october . select the row whose attendance record of these rows is 1st maximum . the opponent record of this row is dallas cowboys .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; date ; october } ; attendance ; 1 } ; opponent } ; dallas cowboys }, interpretation: select the rows whose bleeding time record fuzzily matches to unaffected . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bleeding time ; unaffected } } ; 6 }, interpretation: select the rows whose bleeding time record fuzzily matches to unaffected . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bleeding time ; unaffected } } ; 6 }, interpretation: select the rows whose name record fuzzily matches to historic federal reserve bank . take the floors record of this row . select the rows whose name record fuzzily matches to kansas city power and light building . take the floors record of this row . the first record is less than the second record . the floors record of the first row is 16 . the floors record of the second row is 34 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; name ; historic federal reserve bank } ; floors } ; hop { filter_eq { all_rows ; name ; kansas city power and light building } ; floors } } ; and { eq { hop { filter_eq { all_rows ; name ; historic federal reserve bank } ; floors } ; 16 } ; eq { hop { filter_eq { all_rows ; name ; kansas city power and light building } ; floors } ; 34 } } }, interpretation: select the rows whose name record fuzzily matches to historic federal reserve bank . take the floors record of this row . select the rows whose name record fuzzily matches to kansas city power and light building . take the floors record of this row . the first record is less than the second record . the floors record of the first row is 16 . the floors record of the second row is 34 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; name ; historic federal reserve bank } ; floors } ; hop { filter_eq { all_rows ; name ; kansas city power and light building } ; floors } } ; and { eq { hop { filter_eq { all_rows ; name ; historic federal reserve bank } ; floors } ; 16 } ; eq { hop { filter_eq { all_rows ; name ; kansas city power and light building } ; floors } ; 34 } } }, interpretation: select the row whose date record of all rows is maximum . the label record of this row is fantasy records .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; label } ; fantasy records }, interpretation: select the row whose date record of all rows is maximum . the label record of this row is fantasy records .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; label } ; fantasy records }, interpretation: select the rows whose broadcast record fuzzily matches to espn . for the attendance records of these rows , most of them are less than 100000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; broadcast ; espn } ; attendance ; 100000 }, interpretation: select the rows whose broadcast record fuzzily matches to espn . for the attendance records of these rows , most of them are less than 100000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; broadcast ; espn } ; attendance ; 100000 }, interpretation: select the row whose date record of all rows is 2nd minimum . the opponents record of this row is 1 . fc heidenheim .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; opponents } ; 1 . fc heidenheim }, interpretation: select the row whose date record of all rows is 2nd minimum . the opponents record of this row is 1 . fc heidenheim .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; opponents } ; 1 . fc heidenheim }, interpretation: for the yards records of all rows , most of them are greater than 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; yards ; 20 }, interpretation: for the yards records of all rows , most of them are greater than 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; yards ; 20 }, interpretation: the maximum final score record of all rows is w 41 - 31 . the opponent record of the row with superlative final score record is hamburg sea devils .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; final score } ; w 41 - 31 } ; eq { hop { argmax { all_rows ; final score } ; opponent } ; hamburg sea devils } }, interpretation: the maximum final score record of all rows is w 41 - 31 . the opponent record of the row with superlative final score record is hamburg sea devils .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; final score } ; w 41 - 31 } ; eq { hop { argmax { all_rows ; final score } ; opponent } ; hamburg sea devils } }, interpretation: the sum of the championships record of all rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; championships } ; 1 }, interpretation: the sum of the championships record of all rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; championships } ; 1 }, interpretation: select the rows whose points record is equal to 17 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; points ; 17 } } ; 3 }, interpretation: select the rows whose points record is equal to 17 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; points ; 17 } } ; 3 }, interpretation: select the rows whose episode title record fuzzily matches to remember . take the original air date record of this row . select the rows whose episode title record fuzzily matches to big brotherly love . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; episode title ; remember } ; original air date } ; hop { filter_eq { all_rows ; episode title ; big brotherly love } ; original air date } }, interpretation: select the rows whose episode title record fuzzily matches to remember . take the original air date record of this row . select the rows whose episode title record fuzzily matches to big brotherly love . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; episode title ; remember } ; original air date } ; hop { filter_eq { all_rows ; episode title ; big brotherly love } ; original air date } }, interpretation: select the row whose titles record of all rows is maximum . the city record of this row is budapest .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; titles } ; city } ; budapest }, interpretation: select the row whose titles record of all rows is maximum . the city record of this row is budapest .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; titles } ; city } ; budapest }, interpretation: select the rows whose episode record fuzzily matches to 4 . take the ratings ( kanto ) record of this row . select the rows whose episode record fuzzily matches to 3 . take the ratings ( kanto ) record of this row . the first record is less than the second record . the ratings ( kanto ) record of the first row is 4.3 . the ratings ( kanto ) record of the second row is 4.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; episode ; 4 } ; ratings ( kanto ) } ; hop { filter_eq { all_rows ; episode ; 3 } ; ratings ( kanto ) } } ; and { eq { hop { filter_eq { all_rows ; episode ; 4 } ; ratings ( kanto ) } ; 4.3 } ; eq { hop { filter_eq { all_rows ; episode ; 3 } ; ratings ( kanto ) } ; 4.6 } } }, interpretation: select the rows whose episode record fuzzily matches to 4 . take the ratings ( kanto ) record of this row . select the rows whose episode record fuzzily matches to 3 . take the ratings ( kanto ) record of this row . the first record is less than the second record . the ratings ( kanto ) record of the first row is 4.3 . the ratings ( kanto ) record of the second row is 4.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; episode ; 4 } ; ratings ( kanto ) } ; hop { filter_eq { all_rows ; episode ; 3 } ; ratings ( kanto ) } } ; and { eq { hop { filter_eq { all_rows ; episode ; 4 } ; ratings ( kanto ) } ; 4.3 } ; eq { hop { filter_eq { all_rows ; episode ; 3 } ; ratings ( kanto ) } ; 4.6 } } }, interpretation: select the rows whose format record fuzzily matches to vinyl record . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; vinyl record } } ; 2 }, interpretation: select the rows whose format record fuzzily matches to vinyl record . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; vinyl record } } ; 2 }, interpretation: the average of the score record of all rows is 97.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 97.3 }, interpretation: the average of the score record of all rows is 97.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 97.3 }, interpretation: for the winning car records of all rows , most of them fuzzily match to lotus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winning car ; lotus }, interpretation: for the winning car records of all rows , most of them fuzzily match to lotus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winning car ; lotus }, interpretation: select the row whose td 's record of all rows is 2nd maximum . the player record of this row is lenzie jackson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; td 's ; 2 } ; player } ; lenzie jackson }, interpretation: select the row whose td 's record of all rows is 2nd maximum . the player record of this row is lenzie jackson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; td 's ; 2 } ; player } ; lenzie jackson }, interpretation: for the political party records of all rows , most of them fuzzily match to labour party .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; political party ; labour party }, interpretation: for the political party records of all rows , most of them fuzzily match to labour party .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; political party ; labour party }, interpretation: the sum of the population census 2009 record of all rows is 4383743 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population census 2009 } ; 4383743 }, interpretation: the sum of the population census 2009 record of all rows is 4383743 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population census 2009 } ; 4383743 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is november 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; november 17 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is november 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; november 17 }, interpretation: select the rows whose sport record fuzzily matches to wrestling . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; sport ; wrestling } } ; 2 }, interpretation: select the rows whose sport record fuzzily matches to wrestling . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; sport ; wrestling } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to sunday . select the row whose week record of these rows is 6th minimum . the opponent record of this row is new york giants .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; date ; sunday } ; week ; 6 } ; opponent } ; new york giants }, interpretation: select the rows whose date record fuzzily matches to sunday . select the row whose week record of these rows is 6th minimum . the opponent record of this row is new york giants .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; date ; sunday } ; week ; 6 } ; opponent } ; new york giants }, interpretation: for the nominated work records of all rows , most of them fuzzily match to 71 : into the fire .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nominated work ; 71 : into the fire }, interpretation: for the nominated work records of all rows , most of them fuzzily match to 71 : into the fire .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nominated work ; 71 : into the fire }, interpretation: select the rows whose venue record fuzzily matches to neman . take the capacity record of this row . select the rows whose venue record fuzzily matches to darida . take the capacity record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; neman } ; capacity } ; hop { filter_eq { all_rows ; venue ; darida } ; capacity } }, interpretation: select the rows whose venue record fuzzily matches to neman . take the capacity record of this row . select the rows whose venue record fuzzily matches to darida . take the capacity record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; neman } ; capacity } ; hop { filter_eq { all_rows ; venue ; darida } ; capacity } }, interpretation: for the average attendance home records of all rows , most of them are less than 3200 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; average attendance home ; 3200 }, interpretation: for the average attendance home records of all rows , most of them are less than 3200 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; average attendance home ; 3200 }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is victoria park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; victoria park }, interpretation: select the rows whose points record is greater than or equal to 20 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; points ; 20 } } ; 3 }, interpretation: select the rows whose points record is greater than or equal to 20 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; points ; 20 } } ; 3 }, interpretation: select the rows whose competition record fuzzily matches to world championships . the 2nd minimum year record of these rows is 2001 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; competition ; world championships } ; year ; 2 } ; 2001 }, interpretation: select the rows whose competition record fuzzily matches to world championships . the 2nd minimum year record of these rows is 2001 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; competition ; world championships } ; year ; 2 } ; 2001 }, interpretation: select the rows whose l3 cache record fuzzily matches to 8 mb . the maximum frequency record of these rows is 3 ghz . the model number record of the row with superlative frequency record is core i7 - 3940xm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; l3 cache ; 8 mb } ; frequency } ; 3 ghz } ; eq { hop { argmax { filter_eq { all_rows ; l3 cache ; 8 mb } ; frequency } ; model number } ; core i7 - 3940xm } }, interpretation: select the rows whose l3 cache record fuzzily matches to 8 mb . the maximum frequency record of these rows is 3 ghz . the model number record of the row with superlative frequency record is core i7 - 3940xm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; l3 cache ; 8 mb } ; frequency } ; 3 ghz } ; eq { hop { argmax { filter_eq { all_rows ; l3 cache ; 8 mb } ; frequency } ; model number } ; core i7 - 3940xm } }, interpretation: select the rows whose date record is greater than 31 december 2010 . among these rows , select the rows whose competition record fuzzily matches to euro 2012 qualifying . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; date ; 31 december 2010 } ; competition ; euro 2012 qualifying } } ; 3 }, interpretation: select the rows whose date record is greater than 31 december 2010 . among these rows , select the rows whose competition record fuzzily matches to euro 2012 qualifying . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; date ; 31 december 2010 } ; competition ; euro 2012 qualifying } } ; 3 }, interpretation: select the rows whose % buddhist record is not equal to - . there is only one such row in the table . the area record of this unqiue row is ladakh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; % buddhist ; - } } ; eq { hop { filter_not_eq { all_rows ; % buddhist ; - } ; area } ; ladakh } }, interpretation: select the rows whose % buddhist record is not equal to - . there is only one such row in the table . the area record of this unqiue row is ladakh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; % buddhist ; - } } ; eq { hop { filter_not_eq { all_rows ; % buddhist ; - } ; area } ; ladakh } }, interpretation: select the rows whose high rebounds record fuzzily matches to garnett . the sum of the high rebounds record of these rows is 65 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; high rebounds ; garnett } ; high rebounds } ; 65 }, interpretation: select the rows whose high rebounds record fuzzily matches to garnett . the sum of the high rebounds record of these rows is 65 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; high rebounds ; garnett } ; high rebounds } ; 65 }, interpretation: the average of the % of popular vote record of all rows is 2.21 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; % of popular vote } ; 2.21 }, interpretation: the average of the % of popular vote record of all rows is 2.21 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; % of popular vote } ; 2.21 }, interpretation: select the row whose date record of all rows is 9th minimum . the competition record of this row is friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 9 } ; competition } ; friendly }, interpretation: select the row whose date record of all rows is 9th minimum . the competition record of this row is friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 9 } ; competition } ; friendly }, interpretation: select the rows whose chassis record fuzzily matches to hesketh 308e . take the year record of this row . select the rows whose chassis record fuzzily matches to surtees ts19 . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; chassis ; hesketh 308e } ; year } ; hop { filter_eq { all_rows ; chassis ; surtees ts19 } ; year } }, interpretation: select the rows whose chassis record fuzzily matches to hesketh 308e . take the year record of this row . select the rows whose chassis record fuzzily matches to surtees ts19 . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; chassis ; hesketh 308e } ; year } ; hop { filter_eq { all_rows ; chassis ; surtees ts19 } ; year } }, interpretation: for the points records of all rows , most of them are greater than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 100 }, interpretation: for the points records of all rows , most of them are greater than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 100 }, interpretation: select the row whose time record of all rows is 4th minimum . the country record of this row is bulgaria .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 4 } ; country } ; bulgaria }, interpretation: select the row whose time record of all rows is 4th minimum . the country record of this row is bulgaria .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 4 } ; country } ; bulgaria }, interpretation: select the rows whose team record fuzzily matches to pescarolo sport . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; pescarolo sport } } ; 2 }, interpretation: select the rows whose team record fuzzily matches to pescarolo sport . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; pescarolo sport } } ; 2 }, interpretation: for the points records of all rows , most of them are less than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 10 }, interpretation: for the points records of all rows , most of them are less than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 10 }, interpretation: select the rows whose directed by record fuzzily matches to michael lange . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; michael lange } } ; 9 }, interpretation: select the rows whose directed by record fuzzily matches to michael lange . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; michael lange } } ; 9 }, interpretation: select the row whose gore % record of all rows is maximum . the county record of this row is clark .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gore % } ; county } ; clark }, interpretation: select the row whose gore % record of all rows is maximum . the county record of this row is clark .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gore % } ; county } ; clark }, interpretation: select the row whose number of electorates ( 2003 ) record of all rows is 2nd maximum . the constituency number record of this row is 49 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; number of electorates ( 2003 ) ; 2 } ; constituency number } ; 49 }, interpretation: select the row whose number of electorates ( 2003 ) record of all rows is 2nd maximum . the constituency number record of this row is 49 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; number of electorates ( 2003 ) ; 2 } ; constituency number } ; 49 }, interpretation: select the rows whose street address record fuzzily matches to gold avenue sw . for the height ft / m records of these rows , all of them are greater than or equal to 180 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater_eq { filter_eq { all_rows ; street address ; gold avenue sw } ; height ft / m ; 180 }, interpretation: select the rows whose street address record fuzzily matches to gold avenue sw . for the height ft / m records of these rows , all of them are greater than or equal to 180 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater_eq { filter_eq { all_rows ; street address ; gold avenue sw } ; height ft / m ; 180 }, interpretation: select the rows whose us viewers ( in millions ) record is less than 8 . there is only one such row in the table . the no by series record of this unqiue row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; us viewers ( in millions ) ; 8 } } ; eq { hop { filter_less { all_rows ; us viewers ( in millions ) ; 8 } ; no by series } ; 6 } }, interpretation: select the rows whose us viewers ( in millions ) record is less than 8 . there is only one such row in the table . the no by series record of this unqiue row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; us viewers ( in millions ) ; 8 } } ; eq { hop { filter_less { all_rows ; us viewers ( in millions ) ; 8 } ; no by series } ; 6 } }, interpretation: select the rows whose race time record is less than 3:00:00 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; race time ; 3:00:00 } } ; 4 }, interpretation: select the rows whose race time record is less than 3:00:00 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; race time ; 3:00:00 } } ; 4 }, interpretation: select the rows whose visitor record does not match to philadelphia . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; visitor ; philadelphia } } ; 7 }, interpretation: select the rows whose visitor record does not match to philadelphia . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; visitor ; philadelphia } } ; 7 }, interpretation: select the rows whose year record is equal to 2005 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 2005 } } ; 2 }, interpretation: select the rows whose year record is equal to 2005 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 2005 } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose to par record is equal to -6 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -6 } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose to par record is equal to -6 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -6 } } ; 2 }, interpretation: for the enrollment ( 2010 ) records of all rows , all of them are less than 1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_less { all_rows ; enrollment ( 2010 ) ; 1000 }, interpretation: for the enrollment ( 2010 ) records of all rows , all of them are less than 1000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_less { all_rows ; enrollment ( 2010 ) ; 1000 }, interpretation: for the points records of all rows , most of them are greater than or equal to 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; points ; 3 }, interpretation: for the points records of all rows , most of them are greater than or equal to 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; points ; 3 }, interpretation: select the rows whose podiums record is greater than 9 . there is only one such row in the table . the season record of this unqiue row is 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; podiums ; 9 } } ; eq { hop { filter_greater { all_rows ; podiums ; 9 } ; season } ; 2008 } }, interpretation: select the rows whose podiums record is greater than 9 . there is only one such row in the table . the season record of this unqiue row is 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; podiums ; 9 } } ; eq { hop { filter_greater { all_rows ; podiums ; 9 } ; season } ; 2008 } }, interpretation: select the rows whose manner of departure record fuzzily matches to contract terminated . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; contract terminated } } ; 3 }, interpretation: select the rows whose manner of departure record fuzzily matches to contract terminated . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; contract terminated } } ; 3 }, interpretation: select the rows whose winner record fuzzily matches to luke youlden . there is only one such row in the table . the race title record of this unqiue row is mallala .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winner ; luke youlden } } ; eq { hop { filter_eq { all_rows ; winner ; luke youlden } ; race title } ; mallala } }, interpretation: select the rows whose winner record fuzzily matches to luke youlden . there is only one such row in the table . the race title record of this unqiue row is mallala .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winner ; luke youlden } } ; eq { hop { filter_eq { all_rows ; winner ; luke youlden } ; race title } ; mallala } }, interpretation: select the rows whose name record fuzzily matches to uchana kalan . take the number of electorates ( 2009 ) record of this row . select the rows whose name record fuzzily matches to bawani khera . take the number of electorates ( 2009 ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; uchana kalan } ; number of electorates ( 2009 ) } ; hop { filter_eq { all_rows ; name ; bawani khera } ; number of electorates ( 2009 ) } }, interpretation: select the rows whose name record fuzzily matches to uchana kalan . take the number of electorates ( 2009 ) record of this row . select the rows whose name record fuzzily matches to bawani khera . take the number of electorates ( 2009 ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; uchana kalan } ; number of electorates ( 2009 ) } ; hop { filter_eq { all_rows ; name ; bawani khera } ; number of electorates ( 2009 ) } }, interpretation: for the date records of all rows , all of them fuzzily match to may .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; may }, interpretation: for the date records of all rows , all of them fuzzily match to may .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; may }, interpretation: select the row whose years for grizzlies record of all rows is minimum . the player record of this row is eric leckner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; years for grizzlies } ; player } ; eric leckner }, interpretation: select the row whose years for grizzlies record of all rows is minimum . the player record of this row is eric leckner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; years for grizzlies } ; player } ; eric leckner }, interpretation: select the rows whose l record is equal to 0 . there is only one such row in the table . the skip record of this unqiue row is kevin martin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; l ; 0 } } ; eq { hop { filter_eq { all_rows ; l ; 0 } ; skip } ; kevin martin } }, interpretation: select the rows whose l record is equal to 0 . there is only one such row in the table . the skip record of this unqiue row is kevin martin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; l ; 0 } } ; eq { hop { filter_eq { all_rows ; l ; 0 } ; skip } ; kevin martin } }, interpretation: select the rows whose result record fuzzily matches to 2nd . there is only one such row in the table . the year record of this unqiue row is 1963 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 2nd } } ; eq { hop { filter_eq { all_rows ; result ; 2nd } ; year } ; 1963 } }, interpretation: select the rows whose result record fuzzily matches to 2nd . there is only one such row in the table . the year record of this unqiue row is 1963 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 2nd } } ; eq { hop { filter_eq { all_rows ; result ; 2nd } ; year } ; 1963 } }, interpretation: select the rows whose club record fuzzily matches to real oviedo . take the wins record of this row . select the rows whose club record fuzzily matches to ca osasuna . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; real oviedo } ; wins } ; hop { filter_eq { all_rows ; club ; ca osasuna } ; wins } }, interpretation: select the rows whose club record fuzzily matches to real oviedo . take the wins record of this row . select the rows whose club record fuzzily matches to ca osasuna . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; real oviedo } ; wins } ; hop { filter_eq { all_rows ; club ; ca osasuna } ; wins } }, interpretation: select the row whose 13.5 - inch / 1400lb record of all rows is maximum . the ship record of this row is k\u00f6nig .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 13.5 - inch / 1400lb } ; ship } ; k\u00f6nig }, interpretation: select the row whose 13.5 - inch / 1400lb record of all rows is maximum . the ship record of this row is k\u00f6nig .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 13.5 - inch / 1400lb } ; ship } ; k\u00f6nig }, interpretation: select the rows whose result record fuzzily matches to win . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; win } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to win . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; win } } ; 4 }, interpretation: select the row whose rank record of all rows is 4th minimum . the rowers record of this row is zsolt hirling , tam\u00e3 \u00a1 s varga .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; rank ; 4 } ; rowers } ; zsolt hirling , tam\u00e3 \u00a1 s varga }, interpretation: select the row whose rank record of all rows is 4th minimum . the rowers record of this row is zsolt hirling , tam\u00e3 \u00a1 s varga .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; rank ; 4 } ; rowers } ; zsolt hirling , tam\u00e3 \u00a1 s varga }, interpretation: select the rows whose location record fuzzily matches to china . among these rows , select the rows whose authors record fuzzily matches to yuan . there is only one such row in the table . the name record of this unqiue row is didactylornis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; china } ; authors ; yuan } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; china } ; authors ; yuan } ; name } ; didactylornis } }, interpretation: select the rows whose location record fuzzily matches to china . among these rows , select the rows whose authors record fuzzily matches to yuan . there is only one such row in the table . the name record of this unqiue row is didactylornis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; china } ; authors ; yuan } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; china } ; authors ; yuan } ; name } ; didactylornis } }, interpretation: select the rows whose athlete record fuzzily matches to tony geal . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; athlete ; tony geal } }, interpretation: select the rows whose athlete record fuzzily matches to tony geal . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; athlete ; tony geal } }, interpretation: select the row whose opening week nett gross record of all rows is maximum . the movie record of this row is chennai express .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; opening week nett gross } ; movie } ; chennai express }, interpretation: select the row whose opening week nett gross record of all rows is maximum . the movie record of this row is chennai express .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; opening week nett gross } ; movie } ; chennai express }, interpretation: select the rows whose number of contestants record is equal to 11 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; number of contestants ; 11 } } ; 3 }, interpretation: select the rows whose number of contestants record is equal to 11 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; number of contestants ; 11 } } ; 3 }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: select the rows whose country record fuzzily matches to usa . take the % of world demand record of this row . select the rows whose country record fuzzily matches to south korea . take the % of world demand record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; country ; usa } ; % of world demand } ; hop { filter_eq { all_rows ; country ; south korea } ; % of world demand } }, interpretation: select the rows whose country record fuzzily matches to usa . take the % of world demand record of this row . select the rows whose country record fuzzily matches to south korea . take the % of world demand record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; country ; usa } ; % of world demand } ; hop { filter_eq { all_rows ; country ; south korea } ; % of world demand } }, interpretation: select the row whose runners - up record of all rows is 2nd maximum . the clubs record of this row is primeiro de agosto .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; runners - up ; 2 } ; clubs } ; primeiro de agosto }, interpretation: select the row whose runners - up record of all rows is 2nd maximum . the clubs record of this row is primeiro de agosto .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; runners - up ; 2 } ; clubs } ; primeiro de agosto }, interpretation: select the row whose tonnes record of all rows is 2nd maximum . the location record of this row is anchorage , alaska .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; tonnes ; 2 } ; location } ; anchorage , alaska }, interpretation: select the row whose tonnes record of all rows is 2nd maximum . the location record of this row is anchorage , alaska .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; tonnes ; 2 } ; location } ; anchorage , alaska }, interpretation: select the rows whose player record fuzzily matches to ty warren . take the round record of this row . select the rows whose player record fuzzily matches to dan klecko . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ty warren } ; round } ; hop { filter_eq { all_rows ; player ; dan klecko } ; round } }, interpretation: select the rows whose player record fuzzily matches to ty warren . take the round record of this row . select the rows whose player record fuzzily matches to dan klecko . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ty warren } ; round } ; hop { filter_eq { all_rows ; player ; dan klecko } ; round } }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 2 }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 2 }, interpretation: for the outcome records of all rows , most of them fuzzily match to winner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; winner }, interpretation: for the location : records of all rows , most of them fuzzily match to nashville , united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location : ; nashville , united states }, interpretation: for the location : records of all rows , most of them fuzzily match to nashville , united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location : ; nashville , united states }, interpretation: select the rows whose years record fuzzily matches to k - 6 . among these rows , select the rows whose suburb / town record fuzzily matches to villawood . there is only one such row in the table . the founded record of this unqiue row is 1955 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; years ; k - 6 } ; suburb / town ; villawood } } ; eq { hop { filter_eq { filter_eq { all_rows ; years ; k - 6 } ; suburb / town ; villawood } ; founded } ; 1955 } }, interpretation: select the rows whose years record fuzzily matches to k - 6 . among these rows , select the rows whose suburb / town record fuzzily matches to villawood . there is only one such row in the table . the founded record of this unqiue row is 1955 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; years ; k - 6 } ; suburb / town ; villawood } } ; eq { hop { filter_eq { filter_eq { all_rows ; years ; k - 6 } ; suburb / town ; villawood } ; founded } ; 1955 } }, interpretation: select the rows whose location in park record fuzzily matches to baja ridge . select the row whose year first opened record of these rows is 1st minimum . the current name record of this row is revolution .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; location in park ; baja ridge } ; year first opened ; 1 } ; current name } ; revolution }, interpretation: select the rows whose location in park record fuzzily matches to baja ridge . select the row whose year first opened record of these rows is 1st minimum . the current name record of this row is revolution .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; location in park ; baja ridge } ; year first opened ; 1 } ; current name } ; revolution }, interpretation: select the rows whose county record fuzzily matches to mobile . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; mobile } } ; 3 }, interpretation: select the rows whose county record fuzzily matches to mobile . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; mobile } } ; 3 }, interpretation: select the rows whose series record fuzzily matches to australian formula 3 championship - national class . the average of the points record of these rows is 160.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; series ; australian formula 3 championship - national class } ; points } ; 160.5 }, interpretation: select the rows whose series record fuzzily matches to australian formula 3 championship - national class . the average of the points record of these rows is 160.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; series ; australian formula 3 championship - national class } ; points } ; 160.5 }, interpretation: select the rows whose to par record fuzzily matches to +1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; +1 } } ; 2 }, interpretation: select the rows whose to par record fuzzily matches to +1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; +1 } } ; 2 }, interpretation: select the rows whose high points record fuzzily matches to m williams . there is only one such row in the table . the date record of this unqiue row is may 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; high points ; m williams } } ; eq { hop { filter_eq { all_rows ; high points ; m williams } ; date } ; may 2 } }, interpretation: select the rows whose high points record fuzzily matches to m williams . there is only one such row in the table . the date record of this unqiue row is may 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; high points ; m williams } } ; eq { hop { filter_eq { all_rows ; high points ; m williams } ; date } ; may 2 } }, interpretation: select the rows whose wood record fuzzily matches to green . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; wood ; green } }, interpretation: select the rows whose wood record fuzzily matches to green . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; wood ; green } }, interpretation: select the row whose races record of all rows is 2nd minimum . the season record of this row is 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; races ; 2 } ; season } ; 2010 }, interpretation: select the row whose races record of all rows is 2nd minimum . the season record of this row is 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; races ; 2 } ; season } ; 2010 }, interpretation: the average of the crowd record of all rows is 14000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 14000 }, interpretation: the average of the crowd record of all rows is 14000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 14000 }, interpretation: select the rows whose call sign record fuzzily matches to ktaw . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to ktml . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; call sign ; ktaw } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; ktml } ; frequency mhz } }, interpretation: select the rows whose call sign record fuzzily matches to ktaw . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to ktml . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; call sign ; ktaw } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; ktml } ; frequency mhz } }, interpretation: select the row whose year established record of all rows is 2nd maximum . the members record of this row is university of otago .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year established ; 2 } ; members } ; university of otago }, interpretation: select the row whose year established record of all rows is 2nd maximum . the members record of this row is university of otago .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year established ; 2 } ; members } ; university of otago }, interpretation: select the rows whose opponent record fuzzily matches to iowa . take the date record of this row . select the rows whose opponent record fuzzily matches to 4 michigan . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; iowa } ; date } ; hop { filter_eq { all_rows ; opponent ; 4 michigan } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to iowa . take the date record of this row . select the rows whose opponent record fuzzily matches to 4 michigan . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; iowa } ; date } ; hop { filter_eq { all_rows ; opponent ; 4 michigan } ; date } }, interpretation: select the rows whose erp w record is equal to 10 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; erp w ; 10 } } ; 4 }, interpretation: select the rows whose erp w record is equal to 10 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; erp w ; 10 } } ; 4 }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the rows whose director record fuzzily matches to silvio caiozzi . the minimum year ( ceremony ) record of these rows is 1990 : ( 63rd ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; director ; silvio caiozzi } ; year ( ceremony ) } ; 1990 : ( 63rd ) }, interpretation: select the rows whose director record fuzzily matches to silvio caiozzi . the minimum year ( ceremony ) record of these rows is 1990 : ( 63rd ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; director ; silvio caiozzi } ; year ( ceremony ) } ; 1990 : ( 63rd ) }, interpretation: select the row whose us viewers ( million ) record of all rows is 2nd maximum . the title record of this row is weekend at bobby 's .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us viewers ( million ) ; 2 } ; title } ; weekend at bobby 's }, interpretation: select the row whose us viewers ( million ) record of all rows is 2nd maximum . the title record of this row is weekend at bobby 's .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us viewers ( million ) ; 2 } ; title } ; weekend at bobby 's }, interpretation: select the rows whose partner record fuzzily matches to helena sukov\u00e1 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; helena sukov\u00e1 } } ; 3 }, interpretation: select the rows whose partner record fuzzily matches to helena sukov\u00e1 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; helena sukov\u00e1 } } ; 3 }, interpretation: select the rows whose of candidates nominated record is greater than 50 . there is only one such row in the table . the election record of this unqiue row is 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; of candidates nominated ; 50 } } ; eq { hop { filter_greater { all_rows ; of candidates nominated ; 50 } ; election } ; 2008 } }, interpretation: select the rows whose of candidates nominated record is greater than 50 . there is only one such row in the table . the election record of this unqiue row is 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; of candidates nominated ; 50 } } ; eq { hop { filter_greater { all_rows ; of candidates nominated ; 50 } ; election } ; 2008 } }, interpretation: select the rows whose year record is equal to 2012 . select the row whose worldwide gross record of these rows is maximum . the movie record of this row is ek tha tiger .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; year ; 2012 } ; worldwide gross } ; movie } ; ek tha tiger }, interpretation: select the rows whose year record is equal to 2012 . select the row whose worldwide gross record of these rows is maximum . the movie record of this row is ek tha tiger .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; year ; 2012 } ; worldwide gross } ; movie } ; ek tha tiger }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . there is only one such row in the table . the incumbent record of this unqiue row is bob brady .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; unopposed } } ; eq { hop { filter_eq { all_rows ; candidates ; unopposed } ; incumbent } ; bob brady } }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . there is only one such row in the table . the incumbent record of this unqiue row is bob brady .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; unopposed } } ; eq { hop { filter_eq { all_rows ; candidates ; unopposed } ; incumbent } ; bob brady } }, interpretation: select the rows whose viewers ( households in millions ) record is less than 18 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; viewers ( households in millions ) ; 18 } } ; 3 }, interpretation: select the rows whose viewers ( households in millions ) record is less than 18 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; viewers ( households in millions ) ; 18 } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to lose . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; lose } } ; 5 }, interpretation: select the rows whose result record fuzzily matches to lose . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; lose } } ; 5 }, interpretation: select the row whose silver record of all rows is 2nd maximum . the nation record of this row is kazakhstan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; kazakhstan }, interpretation: select the row whose silver record of all rows is 2nd maximum . the nation record of this row is kazakhstan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; kazakhstan }, interpretation: select the rows whose position record fuzzily matches to tight end . the average of the height record of these rows is 6 ' 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; position ; tight end } ; height } ; 6 ' 4 }, interpretation: select the rows whose position record fuzzily matches to tight end . the average of the height record of these rows is 6 ' 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; position ; tight end } ; height } ; 6 ' 4 }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: select the row whose total record of all rows is 1st maximum . the nation record of this row is china .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 1 } ; nation } ; china }, interpretation: select the row whose total record of all rows is 1st maximum . the nation record of this row is china .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 1 } ; nation } ; china }, interpretation: select the rows whose season record fuzzily matches to 2010 - 11 . take the rank ( league / conference ) record of this row . select the rows whose season record fuzzily matches to 2012 - 13 . take the rank ( league / conference ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; season ; 2010 - 11 } ; rank ( league / conference ) } ; hop { filter_eq { all_rows ; season ; 2012 - 13 } ; rank ( league / conference ) } }, interpretation: select the rows whose season record fuzzily matches to 2010 - 11 . take the rank ( league / conference ) record of this row . select the rows whose season record fuzzily matches to 2012 - 13 . take the rank ( league / conference ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; season ; 2010 - 11 } ; rank ( league / conference ) } ; hop { filter_eq { all_rows ; season ; 2012 - 13 } ; rank ( league / conference ) } }, interpretation: select the rows whose away team record fuzzily matches to south melbourne . take the away team score record of this row . select the rows whose away team record fuzzily matches to north melbourne . take the away team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; away team ; south melbourne } ; away team score } ; hop { filter_eq { all_rows ; away team ; north melbourne } ; away team score } }, interpretation: select the rows whose away team record fuzzily matches to south melbourne . take the away team score record of this row . select the rows whose away team record fuzzily matches to north melbourne . take the away team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; away team ; south melbourne } ; away team score } ; hop { filter_eq { all_rows ; away team ; north melbourne } ; away team score } }, interpretation: select the rows whose home team score record is greater than 12 . among these rows , select the rows whose crowd record is less than 20000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; home team score ; 12 } ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose home team score record is greater than 12 . among these rows , select the rows whose crowd record is less than 20000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; home team score ; 12 } ; crowd ; 20000 } } ; 2 }, interpretation: for the type records of all rows , most of them fuzzily match to private .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; private }, interpretation: for the type records of all rows , most of them fuzzily match to private .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; private }, interpretation: select the rows whose attendance record fuzzily matches to n / a . there is only one such row in the table . the date record of this unqiue row is october 25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; attendance ; n / a } } ; eq { hop { filter_eq { all_rows ; attendance ; n / a } ; date } ; october 25 } }, interpretation: select the rows whose attendance record fuzzily matches to n / a . there is only one such row in the table . the date record of this unqiue row is october 25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; attendance ; n / a } } ; eq { hop { filter_eq { all_rows ; attendance ; n / a } ; date } ; october 25 } }, interpretation: for the nationality records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; united states }, interpretation: for the nationality records of all rows , all of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; united states }, interpretation: the sum of the 1995 regional record of all rows is 63.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; 1995 regional } ; 63.6 }, interpretation: the sum of the 1995 regional record of all rows is 63.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; 1995 regional } ; 63.6 }, interpretation: for the played records of all rows , all of them are equal to 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 18 }, interpretation: for the played records of all rows , all of them are equal to 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 18 }, interpretation: select the row whose founded record of all rows is 2nd maximum . the institution record of this row is high point university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; founded ; 2 } ; institution } ; high point university }, interpretation: select the row whose founded record of all rows is 2nd maximum . the institution record of this row is high point university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; founded ; 2 } ; institution } ; high point university }, interpretation: select the rows whose high rebounds record fuzzily matches to m cage . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; m cage } } ; 3 }, interpretation: select the rows whose high rebounds record fuzzily matches to m cage . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; m cage } } ; 3 }, interpretation: select the rows whose game site record fuzzily matches to gillette stadium . the average of the result record of these rows is 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; game site ; gillette stadium } ; result } ; 26 }, interpretation: select the rows whose game site record fuzzily matches to gillette stadium . the average of the result record of these rows is 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; game site ; gillette stadium } ; result } ; 26 }, interpretation: select the rows whose team record fuzzily matches to team penske . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; team penske } } ; 5 }, interpretation: select the rows whose team record fuzzily matches to team penske . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; team penske } } ; 5 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is june 25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; june 25 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is june 25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; june 25 }, interpretation: the average of the number of seats record of all rows is 44 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of seats } ; 44 }, interpretation: the average of the number of seats record of all rows is 44 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of seats } ; 44 }, interpretation: select the row whose winnings record of all rows is maximum . the year record of this row is 2004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winnings } ; year } ; 2004 }, interpretation: select the row whose winnings record of all rows is maximum . the year record of this row is 2004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winnings } ; year } ; 2004 }, interpretation: select the row whose assistant professors record of all rows is minimum . the lecturers record of this row is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; assistant professors } ; lecturers } ; 7 }, interpretation: select the row whose assistant professors record of all rows is minimum . the lecturers record of this row is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; assistant professors } ; lecturers } ; 7 }, interpretation: the sum of the podiums record of all rows is 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; podiums } ; 18 }, interpretation: the sum of the podiums record of all rows is 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; podiums } ; 18 }, interpretation: select the rows whose riaa certification record fuzzily matches to gold . there is only one such row in the table . the year record of this unqiue row is 1979 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; riaa certification ; gold } } ; eq { hop { filter_eq { all_rows ; riaa certification ; gold } ; year } ; 1979 } }, interpretation: select the rows whose riaa certification record fuzzily matches to gold . there is only one such row in the table . the year record of this unqiue row is 1979 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; riaa certification ; gold } } ; eq { hop { filter_eq { all_rows ; riaa certification ; gold } ; year } ; 1979 } }, interpretation: select the row whose gold record of all rows is 2nd maximum . the nation record of this row is japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; gold ; 2 } ; nation } ; japan }, interpretation: select the row whose gold record of all rows is 2nd maximum . the nation record of this row is japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; gold ; 2 } ; nation } ; japan }, interpretation: select the rows whose artist record fuzzily matches to demos beke . take the points record of this row . select the rows whose artist record fuzzily matches to lucas christodolou . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; demos beke } ; points } ; hop { filter_eq { all_rows ; artist ; lucas christodolou } ; points } }, interpretation: select the rows whose artist record fuzzily matches to demos beke . take the points record of this row . select the rows whose artist record fuzzily matches to lucas christodolou . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; demos beke } ; points } ; hop { filter_eq { all_rows ; artist ; lucas christodolou } ; points } }, interpretation: select the rows whose fa cup record is greater than 0 . select the row whose championship record of these rows is 2nd maximum . the name record of this row is stern john .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; fa cup ; 0 } ; championship ; 2 } ; name } ; stern john }, interpretation: select the rows whose fa cup record is greater than 0 . select the row whose championship record of these rows is 2nd maximum . the name record of this row is stern john .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; fa cup ; 0 } ; championship ; 2 } ; name } ; stern john }, interpretation: select the rows whose opponent record fuzzily matches to dallas cowboys . take the attendance record of this row . select the rows whose opponent record fuzzily matches to philadelphia eagles . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; dallas cowboys } ; attendance } ; hop { filter_eq { all_rows ; opponent ; philadelphia eagles } ; attendance } }, interpretation: select the rows whose opponent record fuzzily matches to dallas cowboys . take the attendance record of this row . select the rows whose opponent record fuzzily matches to philadelphia eagles . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; dallas cowboys } ; attendance } ; hop { filter_eq { all_rows ; opponent ; philadelphia eagles } ; attendance } }, interpretation: for the played records of all rows , all of them are equal to 34 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 34 }, interpretation: for the played records of all rows , all of them are equal to 34 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 34 }, interpretation: for the award ceremony records of all rows , most of them fuzzily match to drama desk award .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; award ceremony ; drama desk award }, interpretation: for the award ceremony records of all rows , most of them fuzzily match to drama desk award .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; award ceremony ; drama desk award }, interpretation: select the rows whose country record fuzzily matches to india . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; india } } ; 4 }, interpretation: select the rows whose country record fuzzily matches to india . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; india } } ; 4 }, interpretation: select the row whose silver record of all rows is 2nd maximum . the nation record of this row is canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; canada }, interpretation: select the row whose silver record of all rows is 2nd maximum . the nation record of this row is canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; canada }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the game record of this row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; game } ; 6 }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the game record of this row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; game } ; 6 }, interpretation: select the rows whose christians record fuzzily matches to 41 % . there is only one such row in the table . the ethnic group record of this unqiue row is kunama .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; christians ; 41 % } } ; eq { hop { filter_eq { all_rows ; christians ; 41 % } ; ethnic group } ; kunama } }, interpretation: select the rows whose christians record fuzzily matches to 41 % . there is only one such row in the table . the ethnic group record of this unqiue row is kunama .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; christians ; 41 % } } ; eq { hop { filter_eq { all_rows ; christians ; 41 % } ; ethnic group } ; kunama } }, interpretation: select the row whose uncut run time record of all rows is 2nd maximum . the title record of this row is addio zio tom .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; uncut run time ; 2 } ; title } ; addio zio tom }, interpretation: select the row whose uncut run time record of all rows is 2nd maximum . the title record of this row is addio zio tom .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; uncut run time ; 2 } ; title } ; addio zio tom }, interpretation: select the row whose enrollment ( 2010 ) record of all rows is 2nd maximum . the school record of this row is heritage .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ( 2010 ) ; 2 } ; school } ; heritage }, interpretation: select the row whose enrollment ( 2010 ) record of all rows is 2nd maximum . the school record of this row is heritage .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ( 2010 ) ; 2 } ; school } ; heritage }, interpretation: select the rows whose date ( s ) record fuzzily matches to september 2006 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ( s ) ; september 2006 } } ; 2 }, interpretation: select the rows whose date ( s ) record fuzzily matches to september 2006 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ( s ) ; september 2006 } } ; 2 }, interpretation: for the long records of all rows , most of them are less than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; long ; 10 }, interpretation: for the long records of all rows , most of them are less than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; long ; 10 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 9 }, interpretation: select the rows whose isbn us record fuzzily matches to unknown . there is only one such row in the table . the title record of this unqiue row is mission to venus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; isbn us ; unknown } } ; eq { hop { filter_eq { all_rows ; isbn us ; unknown } ; title } ; mission to venus } }, interpretation: select the rows whose isbn us record fuzzily matches to unknown . there is only one such row in the table . the title record of this unqiue row is mission to venus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; isbn us ; unknown } } ; eq { hop { filter_eq { all_rows ; isbn us ; unknown } ; title } ; mission to venus } }, interpretation: select the rows whose directed by record fuzzily matches to john kretchmer . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; directed by ; john kretchmer } }, interpretation: select the rows whose directed by record fuzzily matches to john kretchmer . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; directed by ; john kretchmer } }, interpretation: the sum of the enrollment record of all rows is 8,600 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 8,600 }, interpretation: the sum of the enrollment record of all rows is 8,600 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 8,600 }, interpretation: select the rows whose opponent record fuzzily matches to toronto maple leafs . the sum of the attendance record of these rows is 38,002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; toronto maple leafs } ; attendance } ; 38,002 }, interpretation: select the rows whose opponent record fuzzily matches to toronto maple leafs . the sum of the attendance record of these rows is 38,002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; toronto maple leafs } ; attendance } ; 38,002 }, interpretation: for the outcome records of all rows , most of them fuzzily match to winner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; winner }, interpretation: select the rows whose titles record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; titles ; 1 } } ; 2 }, interpretation: select the rows whose titles record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; titles ; 1 } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to tifton . there is only one such row in the table . the institution record of this unqiue row is abraham baldwin agricultural college .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; tifton } } ; eq { hop { filter_eq { all_rows ; location ; tifton } ; institution } ; abraham baldwin agricultural college } }, interpretation: select the rows whose location record fuzzily matches to tifton . there is only one such row in the table . the institution record of this unqiue row is abraham baldwin agricultural college .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; tifton } } ; eq { hop { filter_eq { all_rows ; location ; tifton } ; institution } ; abraham baldwin agricultural college } }, interpretation: for the class records of all rows , most of them fuzzily match to cat a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; cat a }, interpretation: for the class records of all rows , most of them fuzzily match to cat a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; cat a }, interpretation: select the rows whose surface record fuzzily matches to clay . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; clay } } ; 3 }, interpretation: select the rows whose surface record fuzzily matches to clay . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; clay } } ; 3 }, interpretation: select the rows whose vessel record fuzzily matches to smeaton array . take the max speed record of this row . select the rows whose vessel record fuzzily matches to marianarray . take the max speed record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; vessel ; smeaton array } ; max speed } ; hop { filter_eq { all_rows ; vessel ; marianarray } ; max speed } }, interpretation: select the rows whose vessel record fuzzily matches to smeaton array . take the max speed record of this row . select the rows whose vessel record fuzzily matches to marianarray . take the max speed record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; vessel ; smeaton array } ; max speed } ; hop { filter_eq { all_rows ; vessel ; marianarray } ; max speed } }, interpretation: select the rows whose opponent record fuzzily matches to debi purcell . take the round record of this row . select the rows whose opponent record fuzzily matches to tomomi sunaba . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; debi purcell } ; round } ; hop { filter_eq { all_rows ; opponent ; tomomi sunaba } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to debi purcell . take the round record of this row . select the rows whose opponent record fuzzily matches to tomomi sunaba . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; debi purcell } ; round } ; hop { filter_eq { all_rows ; opponent ; tomomi sunaba } ; round } }, interpretation: for the games played records of all rows , all of them are equal to 36 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; games played ; 36 }, interpretation: for the games played records of all rows , all of them are equal to 36 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; games played ; 36 }, interpretation: select the row whose roll record of all rows is 2nd maximum . the name record of this row is albany school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; roll ; 2 } ; name } ; albany school }, interpretation: select the row whose roll record of all rows is 2nd maximum . the name record of this row is albany school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; roll ; 2 } ; name } ; albany school }, interpretation: select the row whose date record of all rows is 2nd maximum . the tournament record of this row is makarska , croatia itf 75000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; tournament } ; makarska , croatia itf 75000 }, interpretation: select the row whose date record of all rows is 2nd maximum . the tournament record of this row is makarska , croatia itf 75000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; tournament } ; makarska , croatia itf 75000 }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: select the rows whose colony record fuzzily matches to chandernagore . take the de facto transfer record of this row . select the rows whose colony record fuzzily matches to karikal . take the de facto transfer record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; colony ; chandernagore } ; de facto transfer } ; hop { filter_eq { all_rows ; colony ; karikal } ; de facto transfer } }, interpretation: select the rows whose colony record fuzzily matches to chandernagore . take the de facto transfer record of this row . select the rows whose colony record fuzzily matches to karikal . take the de facto transfer record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; colony ; chandernagore } ; de facto transfer } ; hop { filter_eq { all_rows ; colony ; karikal } ; de facto transfer } }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: for the transmission records of all rows , most of them fuzzily match to analog & digital .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; transmission ; analog & digital }, interpretation: for the transmission records of all rows , most of them fuzzily match to analog & digital .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; transmission ; analog & digital }, interpretation: select the rows whose tournament record fuzzily matches to australian international . take the year record of this row . select the rows whose tournament record fuzzily matches to canadian open . take the year record of this row . the first record is 1 year larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; tournament ; australian international } ; year } ; hop { filter_eq { all_rows ; tournament ; canadian open } ; year } } ; 1 year }, interpretation: select the rows whose tournament record fuzzily matches to australian international . take the year record of this row . select the rows whose tournament record fuzzily matches to canadian open . take the year record of this row . the first record is 1 year larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; tournament ; australian international } ; year } ; hop { filter_eq { all_rows ; tournament ; canadian open } ; year } } ; 1 year }, interpretation: for the venue records of all rows , most of them fuzzily match to estadio cuscatl\u00e1n , san salvador , el salvador .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; estadio cuscatl\u00e1n , san salvador , el salvador }, interpretation: for the venue records of all rows , most of them fuzzily match to estadio cuscatl\u00e1n , san salvador , el salvador .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; estadio cuscatl\u00e1n , san salvador , el salvador }, interpretation: select the rows whose team record fuzzily matches to america . the average of the average fencers rank record of these rows is 6.58 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; team ; america } ; average fencers rank } ; 6.58 }, interpretation: select the rows whose team record fuzzily matches to america . the average of the average fencers rank record of these rows is 6.58 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; team ; america } ; average fencers rank } ; 6.58 }, interpretation: select the row whose vuelta wins record of all rows is maximum . the country record of this row is spain .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; vuelta wins } ; country } ; spain }, interpretation: select the row whose vuelta wins record of all rows is maximum . the country record of this row is spain .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; vuelta wins } ; country } ; spain }, interpretation: for the language records of all rows , most of them fuzzily match to hindi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; language ; hindi }, interpretation: for the language records of all rows , most of them fuzzily match to hindi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; language ; hindi }, interpretation: for the current streak records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current streak ; w }, interpretation: for the current streak records of all rows , most of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current streak ; w }, interpretation: select the rows whose tournament record fuzzily matches to masters tournament . take the top - 5 record of this row . select the rows whose tournament record fuzzily matches to us open . take the top - 5 record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; masters tournament } ; top - 5 } ; hop { filter_eq { all_rows ; tournament ; us open } ; top - 5 } }, interpretation: select the rows whose tournament record fuzzily matches to masters tournament . take the top - 5 record of this row . select the rows whose tournament record fuzzily matches to us open . take the top - 5 record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; masters tournament } ; top - 5 } ; hop { filter_eq { all_rows ; tournament ; us open } ; top - 5 } }, interpretation: select the rows whose general classification record fuzzily matches to igor ant\u00f3n . among these rows , select the rows whose winner record fuzzily matches to markus fothen . there is only one such row in the table . the stage record of this unqiue row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; general classification ; igor ant\u00f3n } ; winner ; markus fothen } } ; eq { hop { filter_eq { filter_eq { all_rows ; general classification ; igor ant\u00f3n } ; winner ; markus fothen } ; stage } ; 5 } }, interpretation: select the rows whose general classification record fuzzily matches to igor ant\u00f3n . among these rows , select the rows whose winner record fuzzily matches to markus fothen . there is only one such row in the table . the stage record of this unqiue row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; general classification ; igor ant\u00f3n } ; winner ; markus fothen } } ; eq { hop { filter_eq { filter_eq { all_rows ; general classification ; igor ant\u00f3n } ; winner ; markus fothen } ; stage } ; 5 } }, interpretation: for the wheels records of all rows , most of them fuzzily match to 0-4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wheels ; 0-4 }, interpretation: for the wheels records of all rows , most of them fuzzily match to 0-4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wheels ; 0-4 }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the tournament record of this unqiue row is trivandrum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; tournament } ; trivandrum } }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the tournament record of this unqiue row is trivandrum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; tournament } ; trivandrum } }, interpretation: select the row whose year record of all rows is 4th minimum . the against record of this row is georgia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 4 } ; against } ; georgia }, interpretation: select the row whose year record of all rows is 4th minimum . the against record of this row is georgia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 4 } ; against } ; georgia }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is college all - stars at chicago .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; college all - stars at chicago }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is college all - stars at chicago .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; college all - stars at chicago }, interpretation: the average of the goals per match record of all rows is 1.052 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals per match } ; 1.052 }, interpretation: the average of the goals per match record of all rows is 1.052 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals per match } ; 1.052 }, interpretation: select the rows whose location record fuzzily matches to arnhem . take the date ( from ) record of this row . select the rows whose location record fuzzily matches to nijmegen . take the date ( from ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; location ; arnhem } ; date ( from ) } ; hop { filter_eq { all_rows ; location ; nijmegen } ; date ( from ) } }, interpretation: select the rows whose location record fuzzily matches to arnhem . take the date ( from ) record of this row . select the rows whose location record fuzzily matches to nijmegen . take the date ( from ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; location ; arnhem } ; date ( from ) } ; hop { filter_eq { all_rows ; location ; nijmegen } ; date ( from ) } }, interpretation: select the rows whose no record is arbitrary . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; no } } ; 11 }, interpretation: select the rows whose no record is arbitrary . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; no } } ; 11 }, interpretation: the average of the goals against record of all rows is 53 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals against } ; 53 }, interpretation: the average of the goals against record of all rows is 53 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals against } ; 53 }, interpretation: select the rows whose college record fuzzily matches to clark university . there is only one such row in the table . the player record of this unqiue row is millard hamilton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; clark university } } ; eq { hop { filter_eq { all_rows ; college ; clark university } ; player } ; millard hamilton } }, interpretation: select the rows whose college record fuzzily matches to clark university . there is only one such row in the table . the player record of this unqiue row is millard hamilton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; clark university } } ; eq { hop { filter_eq { all_rows ; college ; clark university } ; player } ; millard hamilton } }, interpretation: the average of the total record of all rows is 19.71 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 19.71 }, interpretation: the average of the total record of all rows is 19.71 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 19.71 }, interpretation: select the rows whose venue record fuzzily matches to mcg . take the crowd record of this row . select the rows whose venue record fuzzily matches to vfl park . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; mcg } ; crowd } ; hop { filter_eq { all_rows ; venue ; vfl park } ; crowd } }, interpretation: select the rows whose venue record fuzzily matches to mcg . take the crowd record of this row . select the rows whose venue record fuzzily matches to vfl park . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; mcg } ; crowd } ; hop { filter_eq { all_rows ; venue ; vfl park } ; crowd } }, interpretation: select the rows whose goals record is less than 55 . there is only one such row in the table . the player record of this unqiue row is eus\u00e9bio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; goals ; 55 } } ; eq { hop { filter_less { all_rows ; goals ; 55 } ; player } ; eus\u00e9bio } }, interpretation: select the rows whose goals record is less than 55 . there is only one such row in the table . the player record of this unqiue row is eus\u00e9bio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; goals ; 55 } } ; eq { hop { filter_less { all_rows ; goals ; 55 } ; player } ; eus\u00e9bio } }, interpretation: select the rows whose home team record fuzzily matches to geelong . take the home team score record of this row . select the rows whose home team record fuzzily matches to richmond . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; geelong } ; home team score } ; hop { filter_eq { all_rows ; home team ; richmond } ; home team score } }, interpretation: select the row whose capacity record of all rows is 3rd maximum . the stadium record of this row is stadion gradski vrt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; capacity ; 3 } ; stadium } ; stadion gradski vrt }, interpretation: select the row whose capacity record of all rows is 3rd maximum . the stadium record of this row is stadion gradski vrt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; capacity ; 3 } ; stadium } ; stadion gradski vrt }, interpretation: select the rows whose year record fuzzily matches to 1965 . take the overall record record of this row . select the rows whose year record fuzzily matches to 1959 . take the overall record record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1965 } ; overall record } ; hop { filter_eq { all_rows ; year ; 1959 } ; overall record } }, interpretation: select the rows whose year record fuzzily matches to 1965 . take the overall record record of this row . select the rows whose year record fuzzily matches to 1959 . take the overall record record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1965 } ; overall record } ; hop { filter_eq { all_rows ; year ; 1959 } ; overall record } }, interpretation: select the row whose height record of all rows is 2nd maximum . the player record of this row is argo meresaar ( c ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ; 2 } ; player } ; argo meresaar ( c ) }, interpretation: select the row whose height record of all rows is 2nd maximum . the player record of this row is argo meresaar ( c ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ; 2 } ; player } ; argo meresaar ( c ) }, interpretation: select the rows whose successor record fuzzily matches to vacant . there is only one such row in the table . the district record of this unqiue row is illinois 1st .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; successor ; vacant } } ; eq { hop { filter_eq { all_rows ; successor ; vacant } ; district } ; illinois 1st } }, interpretation: select the rows whose successor record fuzzily matches to vacant . there is only one such row in the table . the district record of this unqiue row is illinois 1st .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; successor ; vacant } } ; eq { hop { filter_eq { all_rows ; successor ; vacant } ; district } ; illinois 1st } }, interpretation: select the row whose w record of all rows is 2nd maximum . the team record of this row is narbonne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; w ; 2 } ; team } ; narbonne }, interpretation: select the row whose w record of all rows is 2nd maximum . the team record of this row is narbonne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; w ; 2 } ; team } ; narbonne }, interpretation: select the row whose against record of all rows is maximum . the opposing team record of this row is australia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing team } ; australia }, interpretation: select the row whose against record of all rows is maximum . the opposing team record of this row is australia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing team } ; australia }, interpretation: select the row whose round record of all rows is minimum . the name record of this row is joseph addai .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; round } ; name } ; joseph addai }, interpretation: select the row whose round record of all rows is minimum . the name record of this row is joseph addai .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; round } ; name } ; joseph addai }, interpretation: select the rows whose station record fuzzily matches to kstp - tv . there is only one such row in the table . the channel record of this unqiue row is 5.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; station ; kstp - tv } } ; eq { hop { filter_eq { all_rows ; station ; kstp - tv } ; channel } ; 5.1 } }, interpretation: select the rows whose station record fuzzily matches to kstp - tv . there is only one such row in the table . the channel record of this unqiue row is 5.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; station ; kstp - tv } } ; eq { hop { filter_eq { all_rows ; station ; kstp - tv } ; channel } ; 5.1 } }, interpretation: select the rows whose resolution record fuzzily matches to committed suicide . there is only one such row in the table . the name record of this unqiue row is jos\u00e9 manuel balmaceda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; resolution ; committed suicide } } ; eq { hop { filter_eq { all_rows ; resolution ; committed suicide } ; name } ; jos\u00e9 manuel balmaceda } }, interpretation: select the rows whose resolution record fuzzily matches to committed suicide . there is only one such row in the table . the name record of this unqiue row is jos\u00e9 manuel balmaceda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; resolution ; committed suicide } } ; eq { hop { filter_eq { all_rows ; resolution ; committed suicide } ; name } ; jos\u00e9 manuel balmaceda } }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose colors record fuzzily matches to white . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; colors ; white } } ; 3 }, interpretation: select the rows whose colors record fuzzily matches to white . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; colors ; white } } ; 3 }, interpretation: select the row whose date of vacancy record of all rows is minimum . the outgoing manager record of this row is mauricio cienfuegos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date of vacancy } ; outgoing manager } ; mauricio cienfuegos }, interpretation: select the row whose date of vacancy record of all rows is minimum . the outgoing manager record of this row is mauricio cienfuegos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date of vacancy } ; outgoing manager } ; mauricio cienfuegos }, interpretation: the average of the total record of all rows is 32366 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 32366 }, interpretation: the average of the total record of all rows is 32366 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 32366 }, interpretation: select the rows whose kitmaker record fuzzily matches to adidas . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; kitmaker ; adidas } } ; 3 }, interpretation: select the rows whose kitmaker record fuzzily matches to adidas . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; kitmaker ; adidas } } ; 3 }, interpretation: for the kitmaker records of all rows , most of them do not match to n / a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; kitmaker ; n / a }, interpretation: for the kitmaker records of all rows , most of them do not match to n / a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; kitmaker ; n / a }, interpretation: select the rows whose steals record fuzzily matches to 3 tied . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; steals ; 3 tied } } ; 4 }, interpretation: select the rows whose steals record fuzzily matches to 3 tied . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; steals ; 3 tied } } ; 4 }, interpretation: select the rows whose gold record is greater than 200 . for the total records of these rows , all of them are greater than 1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_greater { all_rows ; gold ; 200 } ; total ; 1000 }, interpretation: select the rows whose gold record is greater than 200 . for the total records of these rows , all of them are greater than 1000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_greater { all_rows ; gold ; 200 } ; total ; 1000 }, interpretation: select the rows whose opponent in the final record fuzzily matches to \u00e1gnes sz\u00e1vay . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent in the final ; \u00e1gnes sz\u00e1vay } } ; 2 }, interpretation: select the rows whose opponent in the final record fuzzily matches to \u00e1gnes sz\u00e1vay . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent in the final ; \u00e1gnes sz\u00e1vay } } ; 2 }, interpretation: the average of the total passengers record of all rows is 4773780 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total passengers } ; 4773780 }, interpretation: the average of the total passengers record of all rows is 4773780 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total passengers } ; 4773780 }, interpretation: the 2nd minimum rank record of all rows is 2 . the name record of the row with 2nd minimum rank record is camelia potec . the nationality record of the row with 2nd minimum rank record is romania . the time record of the row with 2nd minimum rank record is 1:59.54 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 2 } ; 2 } ; and { eq { hop { nth_argmin { all_rows ; rank ; 2 } ; name } ; camelia potec } ; and { eq { hop { nth_argmin { all_rows ; rank ; 2 } ; nationality } ; romania } ; eq { hop { nth_argmin { all_rows ; rank ; 2 } ; time } ; 1:59.54 } } } }, interpretation: the 2nd minimum rank record of all rows is 2 . the name record of the row with 2nd minimum rank record is camelia potec . the nationality record of the row with 2nd minimum rank record is romania . the time record of the row with 2nd minimum rank record is 1:59.54 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 2 } ; 2 } ; and { eq { hop { nth_argmin { all_rows ; rank ; 2 } ; name } ; camelia potec } ; and { eq { hop { nth_argmin { all_rows ; rank ; 2 } ; nationality } ; romania } ; eq { hop { nth_argmin { all_rows ; rank ; 2 } ; time } ; 1:59.54 } } } }, interpretation: select the rows whose laps record is greater than 312 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; laps ; 312 } }, interpretation: select the rows whose laps record is greater than 312 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; laps ; 312 } }, interpretation: select the row whose ratings record of all rows is maximum . the guest ( s ) record of this row is matt lucas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; ratings } ; guest ( s ) } ; matt lucas }, interpretation: select the row whose ratings record of all rows is maximum . the guest ( s ) record of this row is matt lucas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; ratings } ; guest ( s ) } ; matt lucas }, interpretation: for the best records of all rows , most of them are less than 59.999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; best ; 59.999 }, interpretation: for the best records of all rows , most of them are less than 59.999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; best ; 59.999 }, interpretation: select the row whose top 10 record of all rows is maximum . the year record of this row is 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; top 10 } ; year } ; 2005 }, interpretation: select the row whose top 10 record of all rows is maximum . the year record of this row is 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; top 10 } ; year } ; 2005 }, interpretation: for the year named records of all rows , most of them are less than 1998 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year named ; 1998 }, interpretation: for the year named records of all rows , most of them are less than 1998 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year named ; 1998 }, interpretation: select the rows whose max processors record fuzzily matches to 1 ultrasparc t1 . select the row whose max memory record of these rows is 1st minimum . the model record of this row is t1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; max processors ; 1 ultrasparc t1 } ; max memory ; 1 } ; model } ; t1000 }, interpretation: select the rows whose max processors record fuzzily matches to 1 ultrasparc t1 . select the row whose max memory record of these rows is 1st minimum . the model record of this row is t1000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; max processors ; 1 ultrasparc t1 } ; max memory ; 1 } ; model } ; t1000 }, interpretation: select the rows whose no in season record fuzzily matches to 1 / 2 . take the us viewers ( million ) record of this row . select the rows whose no in season record fuzzily matches to 16 . take the us viewers ( million ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; no in season ; 1 / 2 } ; us viewers ( million ) } ; hop { filter_eq { all_rows ; no in season ; 16 } ; us viewers ( million ) } }, interpretation: select the rows whose no in season record fuzzily matches to 1 / 2 . take the us viewers ( million ) record of this row . select the rows whose no in season record fuzzily matches to 16 . take the us viewers ( million ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; no in season ; 1 / 2 } ; us viewers ( million ) } ; hop { filter_eq { all_rows ; no in season ; 16 } ; us viewers ( million ) } }, interpretation: for the rhode island records of all rows , most of them fuzzily match to lincoln ll lincoln .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; rhode island ; lincoln ll lincoln }, interpretation: for the rhode island records of all rows , most of them fuzzily match to lincoln ll lincoln .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; rhode island ; lincoln ll lincoln }, interpretation: select the rows whose visitor record fuzzily matches to los angeles . take the date record of this row . select the rows whose visitor record fuzzily matches to toronto . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; los angeles } ; date } ; hop { filter_eq { all_rows ; visitor ; toronto } ; date } }, interpretation: select the rows whose visitor record fuzzily matches to los angeles . take the date record of this row . select the rows whose visitor record fuzzily matches to toronto . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; los angeles } ; date } ; hop { filter_eq { all_rows ; visitor ; toronto } ; date } }, interpretation: select the row whose length record of all rows is 2nd maximum . the line name record of this row is north auckland line .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; length ; 2 } ; line name } ; north auckland line }, interpretation: select the row whose length record of all rows is 2nd maximum . the line name record of this row is north auckland line .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; length ; 2 } ; line name } ; north auckland line }, interpretation: select the rows whose director record fuzzily matches to benedict andrews . there is only one such row in the table . the production record of this unqiue row is the war of the roses .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; benedict andrews } } ; eq { hop { filter_eq { all_rows ; director ; benedict andrews } ; production } ; the war of the roses } }, interpretation: select the rows whose director record fuzzily matches to benedict andrews . there is only one such row in the table . the production record of this unqiue row is the war of the roses .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; benedict andrews } } ; eq { hop { filter_eq { all_rows ; director ; benedict andrews } ; production } ; the war of the roses } }, interpretation: select the rows whose format record fuzzily matches to oldies . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; oldies } } ; 4 }, interpretation: select the rows whose format record fuzzily matches to oldies . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; oldies } } ; 4 }, interpretation: select the rows whose drawn record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; drawn ; 1 } } ; 2 }, interpretation: select the rows whose drawn record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; drawn ; 1 } } ; 2 }, interpretation: select the rows whose competing entities record fuzzily matches to individuals . the minimum first held record of these rows is 1931 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; competing entities ; individuals } ; first held } ; 1931 }, interpretation: select the rows whose competing entities record fuzzily matches to individuals . the minimum first held record of these rows is 1931 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; competing entities ; individuals } ; first held } ; 1931 }, interpretation: for the result records of all rows , most of them fuzzily match to not nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; not nominated }, interpretation: select the rows whose opponent record fuzzily matches to pittsburgh steelers . select the row whose attendance record of these rows is maximum . the date record of this row is september 19 , 2004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; opponent ; pittsburgh steelers } ; attendance } ; date } ; september 19 , 2004 }, interpretation: select the rows whose opponent record fuzzily matches to pittsburgh steelers . select the row whose attendance record of these rows is maximum . the date record of this row is september 19 , 2004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; opponent ; pittsburgh steelers } ; attendance } ; date } ; september 19 , 2004 }, interpretation: select the row whose pts record of all rows is maximum . the entrant record of this row is leyton house march racing team .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; pts } ; entrant } ; leyton house march racing team }, interpretation: select the row whose pts record of all rows is maximum . the entrant record of this row is leyton house march racing team .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; pts } ; entrant } ; leyton house march racing team }, interpretation: select the rows whose gender record fuzzily matches to m . among these rows , select the rows whose votes record is less than 3000 . there is only one such row in the table . the candidate 's name record of this unqiue row is lorne robinson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_eq { all_rows ; gender ; m } ; votes ; 3000 } } ; eq { hop { filter_less { filter_eq { all_rows ; gender ; m } ; votes ; 3000 } ; candidate 's name } ; lorne robinson } }, interpretation: select the rows whose gender record fuzzily matches to m . among these rows , select the rows whose votes record is less than 3000 . there is only one such row in the table . the candidate 's name record of this unqiue row is lorne robinson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_eq { all_rows ; gender ; m } ; votes ; 3000 } } ; eq { hop { filter_less { filter_eq { all_rows ; gender ; m } ; votes ; 3000 } ; candidate 's name } ; lorne robinson } }, interpretation: select the rows whose album record fuzzily matches to lost souls . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; album ; lost souls } } ; 3 }, interpretation: select the rows whose album record fuzzily matches to lost souls . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; album ; lost souls } } ; 3 }, interpretation: select the rows whose score record is equal to 64 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 64 } } ; 2 }, interpretation: select the rows whose score record is equal to 64 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 64 } } ; 2 }, interpretation: the average of the crowd record of all rows is 21012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21012 }, interpretation: the average of the crowd record of all rows is 21012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21012 }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is princes park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; princes park }, interpretation: select the rows whose winner record fuzzily matches to tony longhurst . there is only one such row in the table . the series record of this unqiue row is atcc round 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winner ; tony longhurst } } ; eq { hop { filter_eq { all_rows ; winner ; tony longhurst } ; series } ; atcc round 5 } }, interpretation: select the rows whose winner record fuzzily matches to tony longhurst . there is only one such row in the table . the series record of this unqiue row is atcc round 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winner ; tony longhurst } } ; eq { hop { filter_eq { all_rows ; winner ; tony longhurst } ; series } ; atcc round 5 } }, interpretation: the average of the us viewers ( millions ) record of all rows is 2.46 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 2.46 }, interpretation: the average of the us viewers ( millions ) record of all rows is 2.46 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 2.46 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 5 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 5 }, interpretation: select the rows whose class record fuzzily matches to c1 . there is only one such row in the table . the year record of this unqiue row is 1992 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; class ; c1 } } ; eq { hop { filter_eq { all_rows ; class ; c1 } ; year } ; 1992 } }, interpretation: select the rows whose class record fuzzily matches to c1 . there is only one such row in the table . the year record of this unqiue row is 1992 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; class ; c1 } } ; eq { hop { filter_eq { all_rows ; class ; c1 } ; year } ; 1992 } }, interpretation: select the rows whose games record is greater than 30 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; games ; 30 } } ; 3 }, interpretation: select the rows whose games record is greater than 30 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; games ; 30 } } ; 3 }, interpretation: select the row whose original air date record of all rows is minimum . the writer record of this row is michael chaplin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; original air date } ; writer } ; michael chaplin }, interpretation: select the row whose original air date record of all rows is minimum . the writer record of this row is michael chaplin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; original air date } ; writer } ; michael chaplin }, interpretation: select the row whose laps record of all rows is minimum . the driver record of this row is mike wilds .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; laps } ; driver } ; mike wilds }, interpretation: select the row whose laps record of all rows is minimum . the driver record of this row is mike wilds .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; laps } ; driver } ; mike wilds }, interpretation: select the row whose runs record of all rows is 2nd maximum . the batsmen record of this row is mark pettini jason gallian .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; runs ; 2 } ; batsmen } ; mark pettini jason gallian }, interpretation: select the row whose runs record of all rows is 2nd maximum . the batsmen record of this row is mark pettini jason gallian .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; runs ; 2 } ; batsmen } ; mark pettini jason gallian }, interpretation: select the rows whose class record fuzzily matches to p 2 . select the row whose quantity record of these rows is minimum . the year ( s ) built record of this row is 1886 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; class ; p 2 } ; quantity } ; year ( s ) built } ; 1886 }, interpretation: select the rows whose class record fuzzily matches to p 2 . select the row whose quantity record of these rows is minimum . the year ( s ) built record of this row is 1886 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; class ; p 2 } ; quantity } ; year ( s ) built } ; 1886 }, interpretation: select the row whose date record of all rows is 2nd minimum . the venue record of this row is bahrain national stadium , manama .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; venue } ; bahrain national stadium , manama }, interpretation: select the row whose date record of all rows is 2nd minimum . the venue record of this row is bahrain national stadium , manama .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; venue } ; bahrain national stadium , manama }, interpretation: select the rows whose top - 10 record is not equal to 0 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; top - 10 ; 0 } } ; eq { hop { filter_not_eq { all_rows ; top - 10 ; 0 } ; tournament } ; the open championship } }, interpretation: select the rows whose top - 10 record is not equal to 0 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; top - 10 ; 0 } } ; eq { hop { filter_not_eq { all_rows ; top - 10 ; 0 } ; tournament } ; the open championship } }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is melbourne storm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; melbourne storm }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is melbourne storm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; melbourne storm }, interpretation: select the rows whose name record fuzzily matches to phil karn . take the goals record of this row . select the rows whose name record fuzzily matches to michael apple . take the goals record of this row . the first record is 2 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; phil karn } ; goals } ; hop { filter_eq { all_rows ; name ; michael apple } ; goals } } ; 2 }, interpretation: select the rows whose name record fuzzily matches to phil karn . take the goals record of this row . select the rows whose name record fuzzily matches to michael apple . take the goals record of this row . the first record is 2 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; phil karn } ; goals } ; hop { filter_eq { all_rows ; name ; michael apple } ; goals } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . select the rows whose venue record fuzzily matches to victoria park . take the crowd record of this row . the first record is 1000 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; venue ; princes park } ; crowd } ; hop { filter_eq { all_rows ; venue ; victoria park } ; crowd } } ; 1000 }, interpretation: select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . select the rows whose venue record fuzzily matches to victoria park . take the crowd record of this row . the first record is 1000 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; venue ; princes park } ; crowd } ; hop { filter_eq { all_rows ; venue ; victoria park } ; crowd } } ; 1000 }, interpretation: select the row whose founded record of all rows is minimum . the school record of this row is lockland high school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; founded } ; school } ; lockland high school }, interpretation: select the row whose founded record of all rows is minimum . the school record of this row is lockland high school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; founded } ; school } ; lockland high school }, interpretation: select the row whose viewing figure record of all rows is maximum . the episode record of this row is episode 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewing figure } ; episode } ; episode 11 }, interpretation: select the row whose viewing figure record of all rows is maximum . the episode record of this row is episode 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewing figure } ; episode } ; episode 11 }, interpretation: select the rows whose score record fuzzily matches to 0 . among these rows , select the rows whose attendance record is greater than 4000 . there is only one such row in the table . the home team record of this unqiue row is milton keynes dons .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; score ; 0 } ; attendance ; 4000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; score ; 0 } ; attendance ; 4000 } ; home team } ; milton keynes dons } }, interpretation: select the rows whose score record fuzzily matches to 0 . among these rows , select the rows whose attendance record is greater than 4000 . there is only one such row in the table . the home team record of this unqiue row is milton keynes dons .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; score ; 0 } ; attendance ; 4000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; score ; 0 } ; attendance ; 4000 } ; home team } ; milton keynes dons } }, interpretation: for the year records of all rows , most of them fuzzily match to 198 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; year ; 198 }, interpretation: for the year records of all rows , most of them fuzzily match to 198 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; year ; 198 }, interpretation: select the rows whose country record fuzzily matches to spain . there is only one such row in the table . the player record of this unqiue row is jos\u00e9 mar\u00eda olaz\u00e1bal .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; spain } } ; eq { hop { filter_eq { all_rows ; country ; spain } ; player } ; jos\u00e9 mar\u00eda olaz\u00e1bal } }, interpretation: select the rows whose country record fuzzily matches to spain . there is only one such row in the table . the player record of this unqiue row is jos\u00e9 mar\u00eda olaz\u00e1bal .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; spain } } ; eq { hop { filter_eq { all_rows ; country ; spain } ; player } ; jos\u00e9 mar\u00eda olaz\u00e1bal } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose to par record is equal to -1 . there is only one such row in the table . the place record of this unqiue row is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } } ; eq { hop { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } ; place } ; 3 } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose to par record is equal to -1 . there is only one such row in the table . the place record of this unqiue row is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } } ; eq { hop { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } ; place } ; 3 } }, interpretation: select the row whose management and support record of all rows is maximum . the administrating agencies by nip funds only record of this row is 0 consolidated cryptologic program .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; management and support } ; administrating agencies by nip funds only } ; 0 consolidated cryptologic program }, interpretation: select the row whose management and support record of all rows is maximum . the administrating agencies by nip funds only record of this row is 0 consolidated cryptologic program .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; management and support } ; administrating agencies by nip funds only } ; 0 consolidated cryptologic program }, interpretation: select the row whose distance / duration record of all rows is 2nd minimum . the year record of this row is 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; distance / duration ; 2 } ; year } ; 2010 }, interpretation: select the row whose distance / duration record of all rows is 2nd minimum . the year record of this row is 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; distance / duration ; 2 } ; year } ; 2010 }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is marlen angelidou .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; marlen angelidou }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is marlen angelidou .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; marlen angelidou }, interpretation: the average of the crowd record of all rows is 17750 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17750 }, interpretation: the average of the crowd record of all rows is 17750 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17750 }, interpretation: the average of the to par record of all rows is -5.94 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -5.94 }, interpretation: the average of the to par record of all rows is -5.94 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -5.94 }, interpretation: the average of the gold record of all rows is 3.29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 3.29 }, interpretation: the average of the gold record of all rows is 3.29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 3.29 }, interpretation: select the rows whose td 's record is equal to 17 . there is only one such row in the table . the player name record of this unqiue row is torrance marshall .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; td 's ; 17 } } ; eq { hop { filter_eq { all_rows ; td 's ; 17 } ; player name } ; torrance marshall } }, interpretation: select the rows whose td 's record is equal to 17 . there is only one such row in the table . the player name record of this unqiue row is torrance marshall .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; td 's ; 17 } } ; eq { hop { filter_eq { all_rows ; td 's ; 17 } ; player name } ; torrance marshall } }, interpretation: select the rows whose capacity record is greater than 30000 . among these rows , select the rows whose stadium record fuzzily matches to stadio giuseppe meazza . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; capacity ; 30000 } ; stadium ; stadio giuseppe meazza } } ; 2 }, interpretation: select the rows whose capacity record is greater than 30000 . among these rows , select the rows whose stadium record fuzzily matches to stadio giuseppe meazza . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; capacity ; 30000 } ; stadium ; stadio giuseppe meazza } } ; 2 }, interpretation: for the eliminated by records of all rows , most of them fuzzily match to carlito .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; eliminated by ; carlito }, interpretation: for the eliminated by records of all rows , most of them fuzzily match to carlito .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; eliminated by ; carlito }, interpretation: select the rows whose school record fuzzily matches to avon community . take the enrollment record of this row . select the rows whose school record fuzzily matches to brownsburg . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; school ; avon community } ; enrollment } ; hop { filter_eq { all_rows ; school ; brownsburg } ; enrollment } }, interpretation: select the rows whose school record fuzzily matches to avon community . take the enrollment record of this row . select the rows whose school record fuzzily matches to brownsburg . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; school ; avon community } ; enrollment } ; hop { filter_eq { all_rows ; school ; brownsburg } ; enrollment } }, interpretation: for the bandwidth included records of all rows , all of them fuzzily match to unlimited mb .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; bandwidth included ; unlimited mb }, interpretation: for the bandwidth included records of all rows , all of them fuzzily match to unlimited mb .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; bandwidth included ; unlimited mb }, interpretation: the sum of the result record of all rows is 456 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; result } ; 456 }, interpretation: the sum of the result record of all rows is 456 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; result } ; 456 }, interpretation: select the rows whose peak record is equal to 1 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; peak ; 1 } } ; 4 }, interpretation: select the rows whose peak record is equal to 1 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; peak ; 1 } } ; 4 }, interpretation: select the rows whose player record fuzzily matches to pascal chimbonda . take the total record of this row . select the rows whose player record fuzzily matches to robbie keane . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; pascal chimbonda } ; total } ; hop { filter_eq { all_rows ; player ; robbie keane } ; total } }, interpretation: select the rows whose player record fuzzily matches to pascal chimbonda . take the total record of this row . select the rows whose player record fuzzily matches to robbie keane . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; pascal chimbonda } ; total } ; hop { filter_eq { all_rows ; player ; robbie keane } ; total } }, interpretation: select the row whose time record of all rows is minimum . the name record of this row is pieter van den hoogenband .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; name } ; pieter van den hoogenband }, interpretation: select the row whose time record of all rows is minimum . the name record of this row is pieter van den hoogenband .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; name } ; pieter van den hoogenband }, interpretation: select the rows whose incumbent record fuzzily matches to john page . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to francis walker . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; john page } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; francis walker } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to john page . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to francis walker . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; john page } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; francis walker } ; first elected } }, interpretation: the average of the 1990 - 95 record of all rows is 0.27 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 1990 - 95 } ; 0.27 }, interpretation: the average of the 1990 - 95 record of all rows is 0.27 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 1990 - 95 } ; 0.27 }, interpretation: select the rows whose location record fuzzily matches to bridgewater , massachusetts . take the enrollment record of this row . select the rows whose location record fuzzily matches to fitchburg , massachusetts . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; location ; bridgewater , massachusetts } ; enrollment } ; hop { filter_eq { all_rows ; location ; fitchburg , massachusetts } ; enrollment } }, interpretation: select the rows whose location record fuzzily matches to bridgewater , massachusetts . take the enrollment record of this row . select the rows whose location record fuzzily matches to fitchburg , massachusetts . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; location ; bridgewater , massachusetts } ; enrollment } ; hop { filter_eq { all_rows ; location ; fitchburg , massachusetts } ; enrollment } }, interpretation: select the rows whose first elected record is equal to 2002 . there is only one such row in the table . the incumbent record of this unqiue row is chris chocola .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 2002 } } ; eq { hop { filter_eq { all_rows ; first elected ; 2002 } ; incumbent } ; chris chocola } }, interpretation: select the rows whose first elected record is equal to 2002 . there is only one such row in the table . the incumbent record of this unqiue row is chris chocola .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 2002 } } ; eq { hop { filter_eq { all_rows ; first elected ; 2002 } ; incumbent } ; chris chocola } }, interpretation: select the row whose points record of all rows is maximum . the final placing record of this row is 11th .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; final placing } ; 11th }, interpretation: select the row whose points record of all rows is maximum . the final placing record of this row is 11th .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; final placing } ; 11th }, interpretation: select the rows whose ends won record is greater than 50 . among these rows , select the rows whose ends lost record is less than 50 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; ends won ; 50 } ; ends lost ; 50 } } ; 2 }, interpretation: select the rows whose ends won record is greater than 50 . among these rows , select the rows whose ends lost record is less than 50 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; ends won ; 50 } ; ends lost ; 50 } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to retired . there is only one such row in the table . the incumbent record of this unqiue row is edward boland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired } } ; eq { hop { filter_eq { all_rows ; result ; retired } ; incumbent } ; edward boland } }, interpretation: select the rows whose result record fuzzily matches to retired . there is only one such row in the table . the incumbent record of this unqiue row is edward boland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired } } ; eq { hop { filter_eq { all_rows ; result ; retired } ; incumbent } ; edward boland } }, interpretation: select the rows whose location record fuzzily matches to ga . among these rows , select the rows whose champion record fuzzily matches to emory . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; ga } ; champion ; emory } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to ga . among these rows , select the rows whose champion record fuzzily matches to emory . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; ga } ; champion ; emory } } ; 2 }, interpretation: select the row whose events record of all rows is maximum . the player record of this row is jim thorpe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; events } ; player } ; jim thorpe }, interpretation: select the row whose events record of all rows is maximum . the player record of this row is jim thorpe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; events } ; player } ; jim thorpe }, interpretation: for the venue records of all rows , most of them fuzzily match to amman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; amman }, interpretation: for the venue records of all rows , most of them fuzzily match to amman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; amman }, interpretation: for the agg records of all rows , most of them are not equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; agg ; 0 }, interpretation: for the agg records of all rows , most of them are not equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; agg ; 0 }, interpretation: select the row whose production ( mt ) record of all rows is maximum . the commodity record of this row is wheat .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; production ( mt ) } ; commodity } ; wheat }, interpretation: select the row whose production ( mt ) record of all rows is maximum . the commodity record of this row is wheat .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; production ( mt ) } ; commodity } ; wheat }, interpretation: the 3rd maximum winnings record of all rows is 160261 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; winnings ; 3 } ; 160261 }, interpretation: the 3rd maximum winnings record of all rows is 160261 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; winnings ; 3 } ; 160261 }, interpretation: select the rows whose points record is equal to 0 . there is only one such row in the table . the artist record of this unqiue row is photogenique .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 0 } } ; eq { hop { filter_eq { all_rows ; points ; 0 } ; artist } ; photogenique } }, interpretation: select the rows whose points record is equal to 0 . there is only one such row in the table . the artist record of this unqiue row is photogenique .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 0 } } ; eq { hop { filter_eq { all_rows ; points ; 0 } ; artist } ; photogenique } }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is wright patman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; wright patman }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is wright patman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; wright patman }, interpretation: select the rows whose country record fuzzily matches to united states . for the to par records of these rows , most of them are greater than -8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; country ; united states } ; to par ; -8 }, interpretation: select the rows whose country record fuzzily matches to united states . for the to par records of these rows , most of them are greater than -8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; country ; united states } ; to par ; -8 }, interpretation: the sum of the quantity record of all rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; quantity } ; 10 }, interpretation: the sum of the quantity record of all rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; quantity } ; 10 }, interpretation: for the date records of all rows , all of them fuzzily match to 1 august .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 1 august }, interpretation: for the date records of all rows , all of them fuzzily match to 1 august .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 1 august }, interpretation: for the mlb draft records of all rows , most of them fuzzily match to draft .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; mlb draft ; draft }, interpretation: for the mlb draft records of all rows , most of them fuzzily match to draft .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; mlb draft ; draft }, interpretation: select the rows whose tournament record fuzzily matches to us open . take the top - 10 record of this row . select the rows whose tournament record fuzzily matches to the open championship . take the top - 10 record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; tournament ; us open } ; top - 10 } ; hop { filter_eq { all_rows ; tournament ; the open championship } ; top - 10 } } ; 1 }, interpretation: select the rows whose tournament record fuzzily matches to us open . take the top - 10 record of this row . select the rows whose tournament record fuzzily matches to the open championship . take the top - 10 record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; tournament ; us open } ; top - 10 } ; hop { filter_eq { all_rows ; tournament ; the open championship } ; top - 10 } } ; 1 }, interpretation: for the venue records of all rows , most of them fuzzily match to twickenham , london .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; twickenham , london }, interpretation: for the venue records of all rows , most of them fuzzily match to twickenham , london .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; twickenham , london }, interpretation: for the population gender records of all rows , most of them fuzzily match to male .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; population gender ; male }, interpretation: for the population gender records of all rows , most of them fuzzily match to male .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; population gender ; male }, interpretation: select the rows whose agricultural panel record is equal to 0 . there is only one such row in the table . the party record of this unqiue row is independent .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; agricultural panel ; 0 } } ; eq { hop { filter_eq { all_rows ; agricultural panel ; 0 } ; party } ; independent } }, interpretation: select the rows whose agricultural panel record is equal to 0 . there is only one such row in the table . the party record of this unqiue row is independent .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; agricultural panel ; 0 } } ; eq { hop { filter_eq { all_rows ; agricultural panel ; 0 } ; party } ; independent } }, interpretation: for the to par records of all rows , most of them are equal to 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; to par ; 7 }, interpretation: for the to par records of all rows , most of them are equal to 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; to par ; 7 }, interpretation: select the row whose rank record of all rows is minimum . the year record of this row is 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; rank } ; year } ; 2012 }, interpretation: select the row whose rank record of all rows is minimum . the year record of this row is 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; rank } ; year } ; 2012 }, interpretation: select the rows whose series result record fuzzily matches to drawn . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; series result ; drawn } } ; 7 }, interpretation: select the rows whose series result record fuzzily matches to drawn . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; series result ; drawn } } ; 7 }, interpretation: for the pl gp records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; pl gp ; 0 }, interpretation: for the pl gp records of all rows , all of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; pl gp ; 0 }, interpretation: select the rows whose yards record is greater than 1000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; yards ; 1000 } } ; 2 }, interpretation: select the rows whose yards record is greater than 1000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; yards ; 1000 } } ; 2 }, interpretation: for the flagship station records of all rows , most of them fuzzily match to weei .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; flagship station ; weei }, interpretation: for the flagship station records of all rows , most of them fuzzily match to weei .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; flagship station ; weei }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is overton brooks .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; overton brooks }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is overton brooks .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; overton brooks }, interpretation: select the rows whose round record is greater than 3 . among these rows , select the rows whose overall record is less than 200 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; round ; 3 } ; overall ; 200 } } ; 3 }, interpretation: select the rows whose round record is greater than 3 . among these rows , select the rows whose overall record is less than 200 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; round ; 3 } ; overall ; 200 } } ; 3 }, interpretation: select the rows whose home team record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; home team } } ; 6 }, interpretation: select the rows whose home team record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; home team } } ; 6 }, interpretation: select the row whose total record of all rows is 2nd maximum . the league cup record of this row is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; league cup } ; 2 }, interpretation: select the row whose total record of all rows is 2nd maximum . the league cup record of this row is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; league cup } ; 2 }, interpretation: select the rows whose diemaco model record fuzzily matches to lsw . take the barrel length record of this row . select the rows whose diemaco model record fuzzily matches to c8 . take the barrel length record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; diemaco model ; lsw } ; barrel length } ; hop { filter_eq { all_rows ; diemaco model ; c8 } ; barrel length } }, interpretation: select the rows whose diemaco model record fuzzily matches to lsw . take the barrel length record of this row . select the rows whose diemaco model record fuzzily matches to c8 . take the barrel length record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; diemaco model ; lsw } ; barrel length } ; hop { filter_eq { all_rows ; diemaco model ; c8 } ; barrel length } }, interpretation: the average of the enrollment record of all rows is 2282 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 2282 }, interpretation: the average of the enrollment record of all rows is 2282 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 2282 }, interpretation: for the high assists records of all rows , most of them fuzzily match to joe johnson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; joe johnson }, interpretation: for the high assists records of all rows , most of them fuzzily match to joe johnson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; joe johnson }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the crowd record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; crowd } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; crowd } }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the crowd record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; crowd } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; crowd } }, interpretation: select the row whose bronze record of all rows is 2nd maximum . the nation record of this row is netherlands .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; bronze ; 2 } ; nation } ; netherlands }, interpretation: select the row whose bronze record of all rows is 2nd maximum . the nation record of this row is netherlands .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; bronze ; 2 } ; nation } ; netherlands }, interpretation: select the rows whose date record fuzzily matches to 12 june 1937 . select the row whose crowd record of these rows is maximum . the venue record of this row is punt road oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd } ; venue } ; punt road oval }, interpretation: select the rows whose date record fuzzily matches to 12 june 1937 . select the row whose crowd record of these rows is maximum . the venue record of this row is punt road oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd } ; venue } ; punt road oval }, interpretation: select the rows whose location attendance record fuzzily matches to us airways center 18422 . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; us airways center 18422 } } ; 7 }, interpretation: select the rows whose location attendance record fuzzily matches to us airways center 18422 . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; us airways center 18422 } } ; 7 }, interpretation: select the rows whose venue record fuzzily matches to chile . there is only one such row in the table . the date record of this unqiue row is september 4 , 2001 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; chile } } ; eq { hop { filter_eq { all_rows ; venue ; chile } ; date } ; september 4 , 2001 } }, interpretation: select the rows whose venue record fuzzily matches to chile . there is only one such row in the table . the date record of this unqiue row is september 4 , 2001 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; chile } } ; eq { hop { filter_eq { all_rows ; venue ; chile } ; date } ; september 4 , 2001 } }, interpretation: select the row whose against record of all rows is maximum . the opposing teams record of this row is argentina .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing teams } ; argentina }, interpretation: select the row whose against record of all rows is maximum . the opposing teams record of this row is argentina .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing teams } ; argentina }, interpretation: select the row whose speed record of all rows is maximum . the country record of this row is italy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; speed } ; country } ; italy }, interpretation: select the row whose speed record of all rows is maximum . the country record of this row is italy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; speed } ; country } ; italy }, interpretation: select the rows whose result record fuzzily matches to nominated . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; nominated } } ; 6 }, interpretation: select the rows whose result record fuzzily matches to nominated . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; nominated } } ; 6 }, interpretation: the 2nd minimum date record of all rows is 22 february 1998 . the tournament record of the row with 2nd minimum date record is hannover , germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 2 } ; 22 february 1998 } ; eq { hop { nth_argmin { all_rows ; date ; 2 } ; tournament } ; hannover , germany } }, interpretation: the 2nd minimum date record of all rows is 22 february 1998 . the tournament record of the row with 2nd minimum date record is hannover , germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 2 } ; 22 february 1998 } ; eq { hop { nth_argmin { all_rows ; date ; 2 } ; tournament } ; hannover , germany } }, interpretation: for the date records of all rows , all of them fuzzily match to 6 june 1970 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 6 june 1970 }, interpretation: for the date records of all rows , all of them fuzzily match to 6 june 1970 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 6 june 1970 }, interpretation: select the rows whose winner record fuzzily matches to billy casper . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winner ; billy casper } } ; 3 }, interpretation: select the rows whose winner record fuzzily matches to billy casper . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winner ; billy casper } } ; 3 }, interpretation: select the rows whose first elected record is equal to 1824 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1824 } } ; 3 }, interpretation: select the rows whose first elected record is equal to 1824 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1824 } } ; 3 }, interpretation: select the rows whose away team score record is less than 20 . among these rows , select the rows whose crowd record is less than 20000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_less { all_rows ; away team score ; 20 } ; crowd ; 20000 } } ; 3 }, interpretation: select the rows whose away team score record is less than 20 . among these rows , select the rows whose crowd record is less than 20000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_less { all_rows ; away team score ; 20 } ; crowd ; 20000 } } ; 3 }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is keith ellison .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; keith ellison }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is keith ellison .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; keith ellison }, interpretation: select the rows whose played record is less than 10 . among these rows , select the rows whose palace wins record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; played ; 10 } ; palace wins ; 0 } } ; 3 }, interpretation: select the rows whose played record is less than 10 . among these rows , select the rows whose palace wins record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; played ; 10 } ; palace wins ; 0 } } ; 3 }, interpretation: select the rows whose us viewers ( millions ) record does not match to n/a . the average of the us viewers ( millions ) record of these rows is 2.59 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_not_eq { all_rows ; us viewers ( millions ) ; n/a } ; us viewers ( millions ) } ; 2.59 }, interpretation: select the rows whose us viewers ( millions ) record does not match to n/a . the average of the us viewers ( millions ) record of these rows is 2.59 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_not_eq { all_rows ; us viewers ( millions ) ; n/a } ; us viewers ( millions ) } ; 2.59 }, interpretation: for the attendance records of all rows , most of them are greater than 10,000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 10,000 }, interpretation: for the attendance records of all rows , most of them are greater than 10,000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 10,000 }, interpretation: select the rows whose adopted record fuzzily matches to 1999 . among these rows , select the rows whose population ( 2011 - 01 - 01 ) record is less than 1000000 . there is only one such row in the table . the state record of this unqiue row is luxembourg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_eq { all_rows ; adopted ; 1999 } ; population ( 2011 - 01 - 01 ) ; 1000000 } } ; eq { hop { filter_less { filter_eq { all_rows ; adopted ; 1999 } ; population ( 2011 - 01 - 01 ) ; 1000000 } ; state } ; luxembourg } }, interpretation: select the rows whose adopted record fuzzily matches to 1999 . among these rows , select the rows whose population ( 2011 - 01 - 01 ) record is less than 1000000 . there is only one such row in the table . the state record of this unqiue row is luxembourg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_eq { all_rows ; adopted ; 1999 } ; population ( 2011 - 01 - 01 ) ; 1000000 } } ; eq { hop { filter_less { filter_eq { all_rows ; adopted ; 1999 } ; population ( 2011 - 01 - 01 ) ; 1000000 } ; state } ; luxembourg } }, interpretation: select the rows whose channel record is equal to 40 . there is only one such row in the table . the territory record of this unqiue row is indonesia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; channel ; 40 } } ; eq { hop { filter_eq { all_rows ; channel ; 40 } ; territory } ; indonesia } }, interpretation: select the rows whose channel record is equal to 40 . there is only one such row in the table . the territory record of this unqiue row is indonesia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; channel ; 40 } } ; eq { hop { filter_eq { all_rows ; channel ; 40 } ; territory } ; indonesia } }, interpretation: select the rows whose constellation record fuzzily matches to centaurus . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constellation ; centaurus } } ; 4 }, interpretation: select the rows whose constellation record fuzzily matches to centaurus . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constellation ; centaurus } } ; 4 }, interpretation: select the rows whose incumbent record fuzzily matches to wilbur mills . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james william trimble . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; wilbur mills } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james william trimble } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to wilbur mills . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james william trimble . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; wilbur mills } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james william trimble } ; first elected } }, interpretation: select the row whose draw record of all rows is 1st minimum . the artist record of this row is alma \u010dard\u017ei\u0107 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; draw ; 1 } ; artist } ; alma \u010dard\u017ei\u0107 }, interpretation: select the row whose draw record of all rows is 1st minimum . the artist record of this row is alma \u010dard\u017ei\u0107 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; draw ; 1 } ; artist } ; alma \u010dard\u017ei\u0107 }, interpretation: select the rows whose res record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is ruben villareal .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; res ; draw } } ; eq { hop { filter_eq { all_rows ; res ; draw } ; opponent } ; ruben villareal } }, interpretation: select the rows whose res record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is ruben villareal .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; res ; draw } } ; eq { hop { filter_eq { all_rows ; res ; draw } ; opponent } ; ruben villareal } }, interpretation: select the rows whose average record is equal to 32 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; average ; 32 } } ; 3 }, interpretation: select the rows whose average record is equal to 32 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; average ; 32 } } ; 3 }, interpretation: for the chassis records of all rows , most of them fuzzily match to dallara .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; dallara }, interpretation: for the chassis records of all rows , most of them fuzzily match to dallara .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; dallara }, interpretation: for the weight records of all rows , most of them are greater than or equal to 200 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; weight ; 200 }, interpretation: for the weight records of all rows , most of them are greater than or equal to 200 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; weight ; 200 }, interpretation: select the row whose enrollment record of all rows is 2nd maximum . the school record of this row is fort wayne carroll .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ; 2 } ; school } ; fort wayne carroll }, interpretation: select the row whose enrollment record of all rows is 2nd maximum . the school record of this row is fort wayne carroll .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ; 2 } ; school } ; fort wayne carroll }, interpretation: select the row whose year record of all rows is 2nd maximum . the womens singles record of this row is wang yihan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; womens singles } ; wang yihan }, interpretation: select the row whose year record of all rows is 2nd maximum . the womens singles record of this row is wang yihan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; womens singles } ; wang yihan }, interpretation: select the rows whose running time record is less than 30 minutes . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_less { all_rows ; running time ; 30 minutes } }, interpretation: select the rows whose running time record is less than 30 minutes . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_less { all_rows ; running time ; 30 minutes } }, interpretation: select the row whose attendance record of all rows is 2nd minimum . the date record of this row is january 2 , 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; attendance ; 2 } ; date } ; january 2 , 2005 }, interpretation: select the row whose attendance record of all rows is 2nd minimum . the date record of this row is january 2 , 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; attendance ; 2 } ; date } ; january 2 , 2005 }, interpretation: select the row whose total record of all rows is maximum . the nbr class record of this row is 396 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nbr class } ; 396 }, interpretation: select the row whose total record of all rows is maximum . the nbr class record of this row is 396 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nbr class } ; 396 }, interpretation: select the row whose enrolment record of all rows is maximum . the school record of this row is pembroke school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrolment } ; school } ; pembroke school }, interpretation: select the row whose enrolment record of all rows is maximum . the school record of this row is pembroke school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrolment } ; school } ; pembroke school }, interpretation: select the rows whose int ' l debut record fuzzily matches to france . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; int ' l debut ; france } } ; 2 }, interpretation: select the rows whose int ' l debut record fuzzily matches to france . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; int ' l debut ; france } } ; 2 }, interpretation: for the laps records of all rows , most of them are greater than 60 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; laps ; 60 }, interpretation: for the laps records of all rows , most of them are greater than 60 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; laps ; 60 }, interpretation: select the rows whose year record fuzzily matches to 2011 . take the purse record of this row . select the rows whose year record fuzzily matches to 2005 . take the purse record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2011 } ; purse } ; hop { filter_eq { all_rows ; year ; 2005 } ; purse } }, interpretation: select the rows whose year record fuzzily matches to 2011 . take the purse record of this row . select the rows whose year record fuzzily matches to 2005 . take the purse record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2011 } ; purse } ; hop { filter_eq { all_rows ; year ; 2005 } ; purse } }, interpretation: select the rows whose event record is arbitrary . the number of such rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; event } } ; 14 }, interpretation: select the rows whose event record is arbitrary . the number of such rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; event } } ; 14 }, interpretation: select the rows whose date record fuzzily matches to april 1 . take the record record of this row . select the rows whose date record fuzzily matches to march 30 . take the record record of this row . the first record is greater than the second record . the record record of the first row is 3 - 2 . the record record of the second row is 2 - 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; date ; april 1 } ; record } ; hop { filter_eq { all_rows ; date ; march 30 } ; record } } ; and { eq { hop { filter_eq { all_rows ; date ; april 1 } ; record } ; 3 - 2 } ; eq { hop { filter_eq { all_rows ; date ; march 30 } ; record } ; 2 - 2 } } }, interpretation: select the rows whose date record fuzzily matches to april 1 . take the record record of this row . select the rows whose date record fuzzily matches to march 30 . take the record record of this row . the first record is greater than the second record . the record record of the first row is 3 - 2 . the record record of the second row is 2 - 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; date ; april 1 } ; record } ; hop { filter_eq { all_rows ; date ; march 30 } ; record } } ; and { eq { hop { filter_eq { all_rows ; date ; april 1 } ; record } ; 3 - 2 } ; eq { hop { filter_eq { all_rows ; date ; march 30 } ; record } ; 2 - 2 } } }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: select the row whose year born record of all rows is minimum . the player record of this row is goran jagodnik .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year born } ; player } ; goran jagodnik }, interpretation: select the row whose year born record of all rows is minimum . the player record of this row is goran jagodnik .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year born } ; player } ; goran jagodnik }, interpretation: select the rows whose mens singles record fuzzily matches to alan budi kusuma . take the year record of this row . select the rows whose mens singles record fuzzily matches to hermawan susanto . take the year record of this row . the second record is 1 year larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; mens singles ; alan budi kusuma } ; year } ; hop { filter_eq { all_rows ; mens singles ; hermawan susanto } ; year } } ; -1 year }, interpretation: select the rows whose mens singles record fuzzily matches to alan budi kusuma . take the year record of this row . select the rows whose mens singles record fuzzily matches to hermawan susanto . take the year record of this row . the second record is 1 year larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; mens singles ; alan budi kusuma } ; year } ; hop { filter_eq { all_rows ; mens singles ; hermawan susanto } ; year } } ; -1 year }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose ship record fuzzily matches to l\u00fctzow . take the total record of this row . select the rows whose ship record fuzzily matches to seydlitz . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; ship ; l\u00fctzow } ; total } ; hop { filter_eq { all_rows ; ship ; seydlitz } ; total } }, interpretation: select the rows whose ship record fuzzily matches to l\u00fctzow . take the total record of this row . select the rows whose ship record fuzzily matches to seydlitz . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; ship ; l\u00fctzow } ; total } ; hop { filter_eq { all_rows ; ship ; seydlitz } ; total } }, interpretation: select the rows whose tournament record fuzzily matches to the open championship . there is only one such row in the table . the wins record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; the open championship } } ; eq { hop { filter_eq { all_rows ; tournament ; the open championship } ; wins } ; 1 } }, interpretation: select the rows whose tournament record fuzzily matches to the open championship . there is only one such row in the table . the wins record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; the open championship } } ; eq { hop { filter_eq { all_rows ; tournament ; the open championship } ; wins } ; 1 } }, interpretation: select the rows whose al - wehdat wins record is greater than 20 . there is only one such row in the table . the tournament record of this unqiue row is jordan premier league .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; al - wehdat wins ; 20 } } ; eq { hop { filter_greater { all_rows ; al - wehdat wins ; 20 } ; tournament } ; jordan premier league } }, interpretation: select the rows whose al - wehdat wins record is greater than 20 . there is only one such row in the table . the tournament record of this unqiue row is jordan premier league .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; al - wehdat wins ; 20 } } ; eq { hop { filter_greater { all_rows ; al - wehdat wins ; 20 } ; tournament } ; jordan premier league } }, interpretation: the sum of the against record of all rows is 119 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 119 }, interpretation: the sum of the against record of all rows is 119 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 119 }, interpretation: select the rows whose position record fuzzily matches to lb . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; lb } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to lb . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; lb } } ; 2 }, interpretation: for the speed records of all rows , most of them are greater than 93 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; speed ; 93 }, interpretation: for the speed records of all rows , most of them are greater than 93 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; speed ; 93 }, interpretation: select the rows whose township record fuzzily matches to james hill . take the water ( sqmi ) record of this row . select the rows whose township record fuzzily matches to jim river valley . take the water ( sqmi ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; township ; james hill } ; water ( sqmi ) } ; hop { filter_eq { all_rows ; township ; jim river valley } ; water ( sqmi ) } }, interpretation: select the rows whose township record fuzzily matches to james hill . take the water ( sqmi ) record of this row . select the rows whose township record fuzzily matches to jim river valley . take the water ( sqmi ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; township ; james hill } ; water ( sqmi ) } ; hop { filter_eq { all_rows ; township ; jim river valley } ; water ( sqmi ) } }, interpretation: select the rows whose result record fuzzily matches to 28 - 17 . there is only one such row in the table . the date record of this unqiue row is september 9 , 1962 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 28 - 17 } } ; eq { hop { filter_eq { all_rows ; result ; 28 - 17 } ; date } ; september 9 , 1962 } }, interpretation: select the rows whose result record fuzzily matches to 28 - 17 . there is only one such row in the table . the date record of this unqiue row is september 9 , 1962 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 28 - 17 } } ; eq { hop { filter_eq { all_rows ; result ; 28 - 17 } ; date } ; september 9 , 1962 } }, interpretation: select the rows whose race record fuzzily matches to italian grand prix . take the date record of this row . select the rows whose race record fuzzily matches to european grand prix . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; race ; italian grand prix } ; date } ; hop { filter_eq { all_rows ; race ; european grand prix } ; date } }, interpretation: select the rows whose race record fuzzily matches to italian grand prix . take the date record of this row . select the rows whose race record fuzzily matches to european grand prix . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; race ; italian grand prix } ; date } ; hop { filter_eq { all_rows ; race ; european grand prix } ; date } }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is 9 october 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; 9 october 2012 }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is 9 october 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; 9 october 2012 }, interpretation: select the rows whose tournament record fuzzily matches to the open championship . take the events record of this row . select the rows whose tournament record fuzzily matches to pga championship . take the events record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; the open championship } ; events } ; hop { filter_eq { all_rows ; tournament ; pga championship } ; events } }, interpretation: select the rows whose tournament record fuzzily matches to the open championship . take the events record of this row . select the rows whose tournament record fuzzily matches to pga championship . take the events record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; the open championship } ; events } ; hop { filter_eq { all_rows ; tournament ; pga championship } ; events } }, interpretation: for the batting style records of all rows , most of them fuzzily match to right hand bat .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; batting style ; right hand bat }, interpretation: for the batting style records of all rows , most of them fuzzily match to right hand bat .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; batting style ; right hand bat }, interpretation: select the rows whose game site record fuzzily matches to shea stadium . select the row whose attendance record of these rows is maximum . the date record of this row is 1983 - 10 - 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; game site ; shea stadium } ; attendance } ; date } ; 1983 - 10 - 16 }, interpretation: select the rows whose game site record fuzzily matches to shea stadium . select the row whose attendance record of these rows is maximum . the date record of this row is 1983 - 10 - 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; game site ; shea stadium } ; attendance } ; date } ; 1983 - 10 - 16 }, interpretation: select the row whose points record of all rows is maximum . the song record of this row is living my life without you .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; song } ; living my life without you }, interpretation: select the row whose points record of all rows is maximum . the song record of this row is living my life without you .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; song } ; living my life without you }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 5 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 5 }, interpretation: for the format records of all rows , most of them fuzzily match to cd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; cd }, interpretation: select the row whose average ratings record of all rows is maximum . the romaji title record of this row is karei - naru ichizoku .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average ratings } ; romaji title } ; karei - naru ichizoku }, interpretation: select the row whose average ratings record of all rows is maximum . the romaji title record of this row is karei - naru ichizoku .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average ratings } ; romaji title } ; karei - naru ichizoku }, interpretation: select the rows whose 1st member record fuzzily matches to edmund mordaunt . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st member ; edmund mordaunt } } ; 2 }, interpretation: select the rows whose 1st member record fuzzily matches to edmund mordaunt . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st member ; edmund mordaunt } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to grass . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; surface ; grass } }, interpretation: select the rows whose surface record fuzzily matches to grass . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; surface ; grass } }, interpretation: for the name records of all rows , most of them fuzzily match to - .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; name ; - }, interpretation: for the name records of all rows , most of them fuzzily match to - .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; name ; - }, interpretation: select the row whose year record of all rows is minimum . the winner record of this row is deep gold .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year } ; winner } ; deep gold }, interpretation: select the row whose year record of all rows is minimum . the winner record of this row is deep gold .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year } ; winner } ; deep gold }, interpretation: select the rows whose bronze record is greater than 0 . there is only one such row in the table . the nation record of this unqiue row is austria .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; bronze ; 0 } } ; eq { hop { filter_greater { all_rows ; bronze ; 0 } ; nation } ; austria } }, interpretation: select the rows whose bronze record is greater than 0 . there is only one such row in the table . the nation record of this unqiue row is austria .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; bronze ; 0 } } ; eq { hop { filter_greater { all_rows ; bronze ; 0 } ; nation } ; austria } }, interpretation: select the rows whose date record fuzzily matches to september . for the result records of these rows , all of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; september } ; result ; l }, interpretation: select the rows whose date record fuzzily matches to september . for the result records of these rows , all of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; september } ; result ; l }, interpretation: select the rows whose visitor record fuzzily matches to cavaliers . take the date record of this row . select the rows whose visitor record fuzzily matches to hornets . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; cavaliers } ; date } ; hop { filter_eq { all_rows ; visitor ; hornets } ; date } }, interpretation: select the rows whose visitor record fuzzily matches to cavaliers . take the date record of this row . select the rows whose visitor record fuzzily matches to hornets . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; cavaliers } ; date } ; hop { filter_eq { all_rows ; visitor ; hornets } ; date } }, interpretation: select the rows whose incumbent record fuzzily matches to chauncey w reed . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to sid simpson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; chauncey w reed } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; sid simpson } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to chauncey w reed . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to sid simpson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; chauncey w reed } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; sid simpson } ; first elected } }, interpretation: select the rows whose venue record fuzzily matches to etihad stadium . there is only one such row in the table . the premier record of this unqiue row is geelong .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; etihad stadium } } ; eq { hop { filter_eq { all_rows ; venue ; etihad stadium } ; premier } ; geelong } }, interpretation: select the rows whose venue record fuzzily matches to etihad stadium . there is only one such row in the table . the premier record of this unqiue row is geelong .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; etihad stadium } } ; eq { hop { filter_eq { all_rows ; venue ; etihad stadium } ; premier } ; geelong } }, interpretation: for the class records of all rows , most of them fuzzily match to a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; a }, interpretation: for the class records of all rows , most of them fuzzily match to a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; a }, interpretation: select the rows whose easa ( eu ) record fuzzily matches to yes . there is only one such row in the table . the airline record of this unqiue row is premiair .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; easa ( eu ) ; yes } } ; eq { hop { filter_eq { all_rows ; easa ( eu ) ; yes } ; airline } ; premiair } }, interpretation: select the rows whose easa ( eu ) record fuzzily matches to yes . there is only one such row in the table . the airline record of this unqiue row is premiair .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; easa ( eu ) ; yes } } ; eq { hop { filter_eq { all_rows ; easa ( eu ) ; yes } ; airline } ; premiair } }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the home team record of this row is melbourne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; home team } ; melbourne }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the home team record of this row is melbourne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; home team } ; melbourne }, interpretation: select the rows whose points record is greater than 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 0 } } ; 2 }, interpretation: select the rows whose points record is greater than 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 0 } } ; 2 }, interpretation: the average of the duration record of all rows is 54 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; duration } ; 54 }, interpretation: the average of the duration record of all rows is 54 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; duration } ; 54 }, interpretation: select the rows whose entrant record fuzzily matches to martini racing . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; entrant ; martini racing } } ; 4 }, interpretation: select the rows whose entrant record fuzzily matches to martini racing . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; entrant ; martini racing } } ; 4 }, interpretation: select the rows whose loss record fuzzily matches to reardon . there is only one such row in the table . the date record of this unqiue row is october 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; loss ; reardon } } ; eq { hop { filter_eq { all_rows ; loss ; reardon } ; date } ; october 18 } }, interpretation: select the rows whose loss record fuzzily matches to reardon . there is only one such row in the table . the date record of this unqiue row is october 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; loss ; reardon } } ; eq { hop { filter_eq { all_rows ; loss ; reardon } ; date } ; october 18 } }, interpretation: select the row whose viewers ( millions ) record of all rows is maximum . the title record of this row is about face .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers ( millions ) } ; title } ; about face }, interpretation: select the row whose viewers ( millions ) record of all rows is maximum . the title record of this row is about face .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers ( millions ) } ; title } ; about face }, interpretation: select the rows whose host record fuzzily matches to allen bestwick . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; host ; allen bestwick } } ; 2 }, interpretation: select the rows whose host record fuzzily matches to allen bestwick . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; host ; allen bestwick } } ; 2 }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is east carolina university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; east carolina university }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is east carolina university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; east carolina university }, interpretation: select the rows whose year record is equal to 2000 . there is only one such row in the table . the name record of this unqiue row is anthony thomas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2000 } } ; eq { hop { filter_eq { all_rows ; year ; 2000 } ; name } ; anthony thomas } }, interpretation: select the rows whose year record is equal to 2000 . there is only one such row in the table . the name record of this unqiue row is anthony thomas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2000 } } ; eq { hop { filter_eq { all_rows ; year ; 2000 } ; name } ; anthony thomas } }, interpretation: select the rows whose dates record is less than or equal to 2005 . select the row whose dates record of these rows is 1st minimum . the squadron record of this row is squadron 33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_less_eq { all_rows ; dates ; 2005 } ; dates ; 1 } ; squadron } ; squadron 33 }, interpretation: select the rows whose dates record is less than or equal to 2005 . select the row whose dates record of these rows is 1st minimum . the squadron record of this row is squadron 33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_less_eq { all_rows ; dates ; 2005 } ; dates ; 1 } ; squadron } ; squadron 33 }, interpretation: select the row whose run time record of all rows is maximum . the episode number record of this row is 313 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; run time } ; episode number } ; 313 }, interpretation: select the row whose run time record of all rows is maximum . the episode number record of this row is 313 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; run time } ; episode number } ; 313 }, interpretation: select the rows whose played record is equal to 114 . for the points records of these rows , most of them are greater than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; played ; 114 } ; points ; 100 }, interpretation: select the rows whose played record is equal to 114 . for the points records of these rows , most of them are greater than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; played ; 114 } ; points ; 100 }, interpretation: select the row whose losses record of all rows is maximum . the team record of this row is liverpool city .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; losses } ; team } ; liverpool city }, interpretation: select the row whose losses record of all rows is maximum . the team record of this row is liverpool city .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; losses } ; team } ; liverpool city }, interpretation: select the rows whose high assists record fuzzily matches to kevin garnett . there is only one such row in the table . the date record of this unqiue row is december 21 . the team record of this unqiue row is new york .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; high assists ; kevin garnett } } ; and { eq { hop { filter_eq { all_rows ; high assists ; kevin garnett } ; date } ; december 21 } ; eq { hop { filter_eq { all_rows ; high assists ; kevin garnett } ; team } ; new york } } }, interpretation: select the rows whose high assists record fuzzily matches to kevin garnett . there is only one such row in the table . the date record of this unqiue row is december 21 . the team record of this unqiue row is new york .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; high assists ; kevin garnett } } ; and { eq { hop { filter_eq { all_rows ; high assists ; kevin garnett } ; date } ; december 21 } ; eq { hop { filter_eq { all_rows ; high assists ; kevin garnett } ; team } ; new york } } }, interpretation: select the rows whose 2nd evening record fuzzily matches to n / a . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2nd evening ; n / a } } ; 3 }, interpretation: select the rows whose 2nd evening record fuzzily matches to n / a . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2nd evening ; n / a } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to november . for the result records of these rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; november } ; result ; w }, interpretation: select the rows whose date record fuzzily matches to november . for the result records of these rows , most of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; november } ; result ; w }, interpretation: select the rows whose venue record fuzzily matches to san francisco . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; san francisco } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to san francisco . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; san francisco } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to win . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; win } } ; 6 }, interpretation: select the rows whose result record fuzzily matches to win . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; win } } ; 6 }, interpretation: select the rows whose manner of departure record fuzzily matches to mutual consent . there is only one such row in the table . the outgoing manager record of this unqiue row is lee sinnott .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; mutual consent } } ; eq { hop { filter_eq { all_rows ; manner of departure ; mutual consent } ; outgoing manager } ; lee sinnott } }, interpretation: select the rows whose manner of departure record fuzzily matches to mutual consent . there is only one such row in the table . the outgoing manager record of this unqiue row is lee sinnott .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; mutual consent } } ; eq { hop { filter_eq { all_rows ; manner of departure ; mutual consent } ; outgoing manager } ; lee sinnott } }, interpretation: select the rows whose region record fuzzily matches to kansai . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; region ; kansai } } ; 2 }, interpretation: select the rows whose region record fuzzily matches to kansai . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; region ; kansai } } ; 2 }, interpretation: select the rows whose mlb draft record fuzzily matches to pirates . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; mlb draft ; pirates } } ; 2 }, interpretation: select the rows whose mlb draft record fuzzily matches to pirates . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; mlb draft ; pirates } } ; 2 }, interpretation: select the rows whose years record fuzzily matches to 1 - 8 . among these rows , select the rows whose authority record fuzzily matches to integrated . there is only one such row in the table . the name record of this unqiue row is st teresa 's school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; years ; 1 - 8 } ; authority ; integrated } } ; eq { hop { filter_eq { filter_eq { all_rows ; years ; 1 - 8 } ; authority ; integrated } ; name } ; st teresa 's school } }, interpretation: select the rows whose years record fuzzily matches to 1 - 8 . among these rows , select the rows whose authority record fuzzily matches to integrated . there is only one such row in the table . the name record of this unqiue row is st teresa 's school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; years ; 1 - 8 } ; authority ; integrated } } ; eq { hop { filter_eq { filter_eq { all_rows ; years ; 1 - 8 } ; authority ; integrated } ; name } ; st teresa 's school } }, interpretation: select the row whose time record of all rows is 5th minimum . the athlete record of this row is craig virgin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 5 } ; athlete } ; craig virgin }, interpretation: select the row whose time record of all rows is 5th minimum . the athlete record of this row is craig virgin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 5 } ; athlete } ; craig virgin }, interpretation: select the row whose bronze record of all rows is maximum . the nation record of this row is spain .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; bronze } ; nation } ; spain }, interpretation: select the row whose bronze record of all rows is maximum . the nation record of this row is spain .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; bronze } ; nation } ; spain }, interpretation: for the points records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; points ; 0 }, interpretation: for the points records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; points ; 0 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the site record of this row is ben hill griffin stadium gainesville , fl .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; site } ; ben hill griffin stadium gainesville , fl }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the site record of this row is ben hill griffin stadium gainesville , fl .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; site } ; ben hill griffin stadium gainesville , fl }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: select the rows whose co - driver record fuzzily matches to leo kinnunen . for the pos records of these rows , most of them fuzzily match to ret .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; co - driver ; leo kinnunen } ; pos ; ret }, interpretation: select the rows whose co - driver record fuzzily matches to leo kinnunen . for the pos records of these rows , most of them fuzzily match to ret .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; co - driver ; leo kinnunen } ; pos ; ret }, interpretation: for the result records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; re - elected }, interpretation: select the rows whose college record fuzzily matches to new mexico . there is only one such row in the table . the player record of this unqiue row is brian ramsay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; new mexico } } ; eq { hop { filter_eq { all_rows ; college ; new mexico } ; player } ; brian ramsay } }, interpretation: select the rows whose college record fuzzily matches to new mexico . there is only one such row in the table . the player record of this unqiue row is brian ramsay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; new mexico } } ; eq { hop { filter_eq { all_rows ; college ; new mexico } ; player } ; brian ramsay } }, interpretation: select the rows whose men 's singles record fuzzily matches to tan joe hok . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; men 's singles ; tan joe hok } } ; 2 }, interpretation: select the rows whose men 's singles record fuzzily matches to tan joe hok . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; men 's singles ; tan joe hok } } ; 2 }, interpretation: select the rows whose school colors record fuzzily matches to orange & black . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; school colors ; orange & black } } ; 2 }, interpretation: select the rows whose school colors record fuzzily matches to orange & black . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; school colors ; orange & black } } ; 2 }, interpretation: select the rows whose time record fuzzily matches to 5:00 . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; 5:00 } } ; 8 }, interpretation: select the rows whose time record fuzzily matches to 5:00 . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; 5:00 } } ; 8 }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; germany }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; germany }, interpretation: the minimum date record of all rows is september 4 , 1994 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { all_rows ; date } ; september 4 , 1994 }, interpretation: the minimum date record of all rows is september 4 , 1994 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { all_rows ; date } ; september 4 , 1994 }, interpretation: select the row whose date record of all rows is 2nd maximum . the tournament record of this row is moscow .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; tournament } ; moscow }, interpretation: select the row whose date record of all rows is 2nd maximum . the tournament record of this row is moscow .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; tournament } ; moscow }, interpretation: select the rows whose round record is equal to 7 . among these rows , select the rows whose college record fuzzily matches to oregon . there is only one such row in the table . the name record of this unqiue row is steve smith .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; round ; 7 } ; college ; oregon } } ; eq { hop { filter_eq { filter_eq { all_rows ; round ; 7 } ; college ; oregon } ; name } ; steve smith } }, interpretation: select the rows whose round record is equal to 7 . among these rows , select the rows whose college record fuzzily matches to oregon . there is only one such row in the table . the name record of this unqiue row is steve smith .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; round ; 7 } ; college ; oregon } } ; eq { hop { filter_eq { filter_eq { all_rows ; round ; 7 } ; college ; oregon } ; name } ; steve smith } }, interpretation: select the rows whose name record fuzzily matches to kara lynn joyce . take the time record of this row . select the rows whose name record fuzzily matches to aliaksandra herasimenia . take the time record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; kara lynn joyce } ; time } ; hop { filter_eq { all_rows ; name ; aliaksandra herasimenia } ; time } }, interpretation: select the rows whose name record fuzzily matches to kara lynn joyce . take the time record of this row . select the rows whose name record fuzzily matches to aliaksandra herasimenia . take the time record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; kara lynn joyce } ; time } ; hop { filter_eq { all_rows ; name ; aliaksandra herasimenia } ; time } }, interpretation: select the rows whose competition record fuzzily matches to uefa euro 2004 qualifying . there is only one such row in the table . the date record of this unqiue row is 2003 - 02 - 04 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; uefa euro 2004 qualifying } } ; eq { hop { filter_eq { all_rows ; competition ; uefa euro 2004 qualifying } ; date } ; 2003 - 02 - 04 } }, interpretation: select the rows whose competition record fuzzily matches to uefa euro 2004 qualifying . there is only one such row in the table . the date record of this unqiue row is 2003 - 02 - 04 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; uefa euro 2004 qualifying } } ; eq { hop { filter_eq { all_rows ; competition ; uefa euro 2004 qualifying } ; date } ; 2003 - 02 - 04 } }, interpretation: select the rows whose wins record is equal to 10 . there is only one such row in the table . the club record of this unqiue row is east bengal club .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 10 } } ; eq { hop { filter_eq { all_rows ; wins ; 10 } ; club } ; east bengal club } }, interpretation: select the rows whose wins record is equal to 10 . there is only one such row in the table . the club record of this unqiue row is east bengal club .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 10 } } ; eq { hop { filter_eq { all_rows ; wins ; 10 } ; club } ; east bengal club } }, interpretation: select the rows whose laps record is equal to 200 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; laps ; 200 } } ; 4 }, interpretation: select the rows whose laps record is equal to 200 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; laps ; 200 } } ; 4 }, interpretation: select the rows whose general classification record fuzzily matches to nick nuyens . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; general classification ; nick nuyens } } ; 5 }, interpretation: select the rows whose general classification record fuzzily matches to nick nuyens . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; general classification ; nick nuyens } } ; 5 }, interpretation: for the competition records of all rows , most of them fuzzily match to 2014 fifa world cup qualification .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; 2014 fifa world cup qualification }, interpretation: for the competition records of all rows , most of them fuzzily match to 2014 fifa world cup qualification .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; 2014 fifa world cup qualification }, interpretation: select the rows whose tournament record fuzzily matches to buenos aires . take the date record of this row . select the rows whose tournament record fuzzily matches to panama city . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tournament ; buenos aires } ; date } ; hop { filter_eq { all_rows ; tournament ; panama city } ; date } }, interpretation: select the rows whose tournament record fuzzily matches to buenos aires . take the date record of this row . select the rows whose tournament record fuzzily matches to panama city . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tournament ; buenos aires } ; date } ; hop { filter_eq { all_rows ; tournament ; panama city } ; date } }, interpretation: the average of the launch record of all rows is 2001-2002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; launch } ; 2001-2002 }, interpretation: the average of the launch record of all rows is 2001-2002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; launch } ; 2001-2002 }, interpretation: for the score records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; l }, interpretation: for the date of vacancy records of all rows , most of them fuzzily match to 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date of vacancy ; 2010 }, interpretation: for the date of vacancy records of all rows , most of them fuzzily match to 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date of vacancy ; 2010 }, interpretation: for the type records of all rows , all of them fuzzily match to private .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; type ; private }, interpretation: select the rows whose total record is less than 13 . the sum of the silver record of these rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less { all_rows ; total ; 13 } ; silver } ; 2 }, interpretation: select the rows whose total record is less than 13 . the sum of the silver record of these rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less { all_rows ; total ; 13 } ; silver } ; 2 }, interpretation: the minimum finish position record of all rows is 36th .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { all_rows ; finish position } ; 36th }, interpretation: the minimum finish position record of all rows is 36th .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { all_rows ; finish position } ; 36th }, interpretation: select the rows whose date record fuzzily matches to april 18 . take the score record of this row . select the rows whose date record fuzzily matches to april 21 . take the score record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; date ; april 18 } ; score } ; hop { filter_eq { all_rows ; date ; april 21 } ; score } }, interpretation: select the rows whose date record fuzzily matches to april 18 . take the score record of this row . select the rows whose date record fuzzily matches to april 21 . take the score record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; date ; april 18 } ; score } ; hop { filter_eq { all_rows ; date ; april 21 } ; score } }, interpretation: the average of the away team score record of all rows is 14.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; away team score } ; 14.2 }, interpretation: the average of the away team score record of all rows is 14.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; away team score } ; 14.2 }, interpretation: select the rows whose station record fuzzily matches to kami - mio . take the distance ( km ) record of this row . select the rows whose station record fuzzily matches to funao . take the distance ( km ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; station ; kami - mio } ; distance ( km ) } ; hop { filter_eq { all_rows ; station ; funao } ; distance ( km ) } }, interpretation: select the rows whose station record fuzzily matches to kami - mio . take the distance ( km ) record of this row . select the rows whose station record fuzzily matches to funao . take the distance ( km ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; station ; kami - mio } ; distance ( km ) } ; hop { filter_eq { all_rows ; station ; funao } ; distance ( km ) } }, interpretation: select the rows whose gold record is equal to 7 . there is only one such row in the table . the nation record of this unqiue row is brazil ( bra ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 7 } } ; eq { hop { filter_eq { all_rows ; gold ; 7 } ; nation } ; brazil ( bra ) } }, interpretation: select the rows whose gold record is equal to 7 . there is only one such row in the table . the nation record of this unqiue row is brazil ( bra ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 7 } } ; eq { hop { filter_eq { all_rows ; gold ; 7 } ; nation } ; brazil ( bra ) } }, interpretation: select the rows whose chassis record fuzzily matches to connew pc1 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; chassis ; connew pc1 } } ; 1 }, interpretation: select the rows whose chassis record fuzzily matches to connew pc1 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; chassis ; connew pc1 } } ; 1 }, interpretation: select the rows whose club record fuzzily matches to biu chun rangers . take the position in 2012 - 13 record of this row . select the rows whose club record fuzzily matches to citizen . take the position in 2012 - 13 record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; biu chun rangers } ; position in 2012 - 13 } ; hop { filter_eq { all_rows ; club ; citizen } ; position in 2012 - 13 } }, interpretation: select the rows whose club record fuzzily matches to biu chun rangers . take the position in 2012 - 13 record of this row . select the rows whose club record fuzzily matches to citizen . take the position in 2012 - 13 record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; biu chun rangers } ; position in 2012 - 13 } ; hop { filter_eq { all_rows ; club ; citizen } ; position in 2012 - 13 } }, interpretation: for the high rebounds records of all rows , most of them fuzzily match to chris bosh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high rebounds ; chris bosh }, interpretation: for the high rebounds records of all rows , most of them fuzzily match to chris bosh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high rebounds ; chris bosh }, interpretation: select the rows whose polyunsaturated fat record fuzzily matches to 3 % . there is only one such row in the table . the total fat record of this unqiue row is 94 g .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; polyunsaturated fat ; 3 % } } ; eq { hop { filter_eq { all_rows ; polyunsaturated fat ; 3 % } ; total fat } ; 94 g } }, interpretation: select the rows whose polyunsaturated fat record fuzzily matches to 3 % . there is only one such row in the table . the total fat record of this unqiue row is 94 g .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; polyunsaturated fat ; 3 % } } ; eq { hop { filter_eq { all_rows ; polyunsaturated fat ; 3 % } ; total fat } ; 94 g } }, interpretation: select the rows whose wins record is equal to 1 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wins ; 1 } } ; 1 }, interpretation: select the rows whose wins record is equal to 1 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wins ; 1 } } ; 1 }, interpretation: for the w / l records of all rows , most of them fuzzily match to loss .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; w / l ; loss }, interpretation: for the w / l records of all rows , most of them fuzzily match to loss .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; w / l ; loss }, interpretation: select the row whose enrollment record of all rows is maximum . the high school record of this row is mount tahoma .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; high school } ; mount tahoma }, interpretation: select the row whose enrollment record of all rows is maximum . the high school record of this row is mount tahoma .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; high school } ; mount tahoma }, interpretation: select the rows whose player record fuzzily matches to dwight lewis . take the round record of this row . select the rows whose player record fuzzily matches to doug hogan . take the round record of this row . the first record is less than the second record . the round record of the first row is 10 . the round record of the second row is 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; dwight lewis } ; round } ; hop { filter_eq { all_rows ; player ; doug hogan } ; round } } ; and { eq { hop { filter_eq { all_rows ; player ; dwight lewis } ; round } ; 10 } ; eq { hop { filter_eq { all_rows ; player ; doug hogan } ; round } ; 16 } } }, interpretation: select the rows whose player record fuzzily matches to dwight lewis . take the round record of this row . select the rows whose player record fuzzily matches to doug hogan . take the round record of this row . the first record is less than the second record . the round record of the first row is 10 . the round record of the second row is 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; dwight lewis } ; round } ; hop { filter_eq { all_rows ; player ; doug hogan } ; round } } ; and { eq { hop { filter_eq { all_rows ; player ; dwight lewis } ; round } ; 10 } ; eq { hop { filter_eq { all_rows ; player ; doug hogan } ; round } ; 16 } } }, interpretation: select the rows whose authority record fuzzily matches to state integrated . there is only one such row in the table . the name record of this unqiue row is st joseph 's catholic school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; authority ; state integrated } } ; eq { hop { filter_eq { all_rows ; authority ; state integrated } ; name } ; st joseph 's catholic school } }, interpretation: select the rows whose authority record fuzzily matches to state integrated . there is only one such row in the table . the name record of this unqiue row is st joseph 's catholic school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; authority ; state integrated } } ; eq { hop { filter_eq { all_rows ; authority ; state integrated } ; name } ; st joseph 's catholic school } }, interpretation: select the rows whose rank record is less than or equal to 2 . the sum of the wins record of these rows is 35 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less_eq { all_rows ; rank ; 2 } ; wins } ; 35 }, interpretation: select the rows whose rank record is less than or equal to 2 . the sum of the wins record of these rows is 35 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less_eq { all_rows ; rank ; 2 } ; wins } ; 35 }, interpretation: select the rows whose avg attend record is less than 4000 . there is only one such row in the table . the indoor year record of this unqiue row is 1983 - 1984 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; avg attend ; 4000 } } ; eq { hop { filter_less { all_rows ; avg attend ; 4000 } ; indoor year } ; 1983 - 1984 } }, interpretation: select the rows whose avg attend record is less than 4000 . there is only one such row in the table . the indoor year record of this unqiue row is 1983 - 1984 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; avg attend ; 4000 } } ; eq { hop { filter_less { all_rows ; avg attend ; 4000 } ; indoor year } ; 1983 - 1984 } }, interpretation: select the rows whose status record fuzzily matches to village . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; village } } ; 4 }, interpretation: select the rows whose status record fuzzily matches to village . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; village } } ; 4 }, interpretation: select the rows whose opponent record fuzzily matches to philadelphia eagles . there is only one such row in the table . the week record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; philadelphia eagles } } ; eq { hop { filter_eq { all_rows ; opponent ; philadelphia eagles } ; week } ; 1 } }, interpretation: select the rows whose opponent record fuzzily matches to philadelphia eagles . there is only one such row in the table . the week record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; philadelphia eagles } } ; eq { hop { filter_eq { all_rows ; opponent ; philadelphia eagles } ; week } ; 1 } }, interpretation: select the rows whose performer 2 record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; performer 2 } } ; 6 }, interpretation: select the rows whose performer 2 record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; performer 2 } } ; 6 }, interpretation: select the rows whose l record is equal to 0 . there is only one such row in the table . the skip ( club ) record of this unqiue row is brad gushue ( bally haly ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; l ; 0 } } ; eq { hop { filter_eq { all_rows ; l ; 0 } ; skip ( club ) } ; brad gushue ( bally haly ) } }, interpretation: select the rows whose l record is equal to 0 . there is only one such row in the table . the skip ( club ) record of this unqiue row is brad gushue ( bally haly ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; l ; 0 } } ; eq { hop { filter_eq { all_rows ; l ; 0 } ; skip ( club ) } ; brad gushue ( bally haly ) } }, interpretation: select the rows whose location record fuzzily matches to marquette , michigan . there is only one such row in the table . the institution record of this unqiue row is northern michigan university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; marquette , michigan } } ; eq { hop { filter_eq { all_rows ; location ; marquette , michigan } ; institution } ; northern michigan university } }, interpretation: select the rows whose location record fuzzily matches to marquette , michigan . there is only one such row in the table . the institution record of this unqiue row is northern michigan university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; marquette , michigan } } ; eq { hop { filter_eq { all_rows ; location ; marquette , michigan } ; institution } ; northern michigan university } }, interpretation: select the row whose start record of all rows is minimum . the year record of this row is 1954 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; start } ; year } ; 1954 }, interpretation: select the row whose start record of all rows is minimum . the year record of this row is 1954 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; start } ; year } ; 1954 }, interpretation: select the rows whose location record fuzzily matches to st pete times forum . among these rows , select the rows whose attendance record is greater than 16000 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; location ; st pete times forum } ; attendance ; 16000 } } ; 5 }, interpretation: select the rows whose location record fuzzily matches to st pete times forum . among these rows , select the rows whose attendance record is greater than 16000 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; location ; st pete times forum } ; attendance ; 16000 } } ; 5 }, interpretation: select the rows whose high assists record fuzzily matches to steve blake . among these rows , select the rows whose score record fuzzily matches to w . there is only one such row in the table . the date record of this unqiue row is april 21 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; high assists ; steve blake } ; score ; w } } ; eq { hop { filter_eq { filter_eq { all_rows ; high assists ; steve blake } ; score ; w } ; date } ; april 21 } }, interpretation: select the rows whose high assists record fuzzily matches to steve blake . among these rows , select the rows whose score record fuzzily matches to w . there is only one such row in the table . the date record of this unqiue row is april 21 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; high assists ; steve blake } ; score ; w } } ; eq { hop { filter_eq { filter_eq { all_rows ; high assists ; steve blake } ; score ; w } ; date } ; april 21 } }, interpretation: the average of the total record of all rows is 3.75 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 3.75 }, interpretation: the average of the total record of all rows is 3.75 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 3.75 }, interpretation: select the rows whose position record fuzzily matches to cornerback . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; cornerback } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to cornerback . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; cornerback } } ; 2 }, interpretation: select the row whose score record of all rows is 2nd minimum . the player record of this row is steve jones .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; score ; 2 } ; player } ; steve jones }, interpretation: select the row whose score record of all rows is 2nd minimum . the player record of this row is steve jones .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; score ; 2 } ; player } ; steve jones }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the home team record of this row is milton keynes dons .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; home team } ; milton keynes dons }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the home team record of this row is milton keynes dons .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; home team } ; milton keynes dons }, interpretation: select the rows whose position record fuzzily matches to running back . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; running back } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to running back . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; running back } } ; 3 }, interpretation: for the championships records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; championships ; 1 }, interpretation: for the championships records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; championships ; 1 }, interpretation: select the rows whose name record fuzzily matches to over the deel . take the age record of this row . select the rows whose name record fuzzily matches to captain dibble . take the age record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; over the deel } ; age } ; hop { filter_eq { all_rows ; name ; captain dibble } ; age } }, interpretation: select the rows whose name record fuzzily matches to over the deel . take the age record of this row . select the rows whose name record fuzzily matches to captain dibble . take the age record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; over the deel } ; age } ; hop { filter_eq { all_rows ; name ; captain dibble } ; age } }, interpretation: select the rows whose location record fuzzily matches to sheffield , england . among these rows , select the rows whose type record fuzzily matches to club trophy . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; sheffield , england } ; type ; club trophy } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to sheffield , england . among these rows , select the rows whose type record fuzzily matches to club trophy . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; sheffield , england } ; type ; club trophy } } ; 2 }, interpretation: select the row whose joined record of all rows is 3rd maximum . the school record of this row is south bend clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; joined ; 3 } ; school } ; south bend clay }, interpretation: select the row whose joined record of all rows is 3rd maximum . the school record of this row is south bend clay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; joined ; 3 } ; school } ; south bend clay }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is ud las palmas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; ud las palmas }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is ud las palmas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; ud las palmas }, interpretation: select the rows whose opponent record fuzzily matches to detroit red wings . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; detroit red wings } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to detroit red wings . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; detroit red wings } } ; 3 }, interpretation: select the rows whose race title record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; race title } } ; 5 }, interpretation: select the rows whose race title record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; race title } } ; 5 }, interpretation: the average of the total record of all rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 3 }, interpretation: the average of the total record of all rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 3 }, interpretation: select the rows whose site / stadium record fuzzily matches to goodwin field . there is only one such row in the table . the date record of this unqiue row is may 25 . the opponent record of this unqiue row is cal state fullerton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; site / stadium ; goodwin field } } ; and { eq { hop { filter_eq { all_rows ; site / stadium ; goodwin field } ; date } ; may 25 } ; eq { hop { filter_eq { all_rows ; site / stadium ; goodwin field } ; opponent } ; cal state fullerton } } }, interpretation: select the rows whose site / stadium record fuzzily matches to goodwin field . there is only one such row in the table . the date record of this unqiue row is may 25 . the opponent record of this unqiue row is cal state fullerton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; site / stadium ; goodwin field } } ; and { eq { hop { filter_eq { all_rows ; site / stadium ; goodwin field } ; date } ; may 25 } ; eq { hop { filter_eq { all_rows ; site / stadium ; goodwin field } ; opponent } ; cal state fullerton } } }, interpretation: select the rows whose model record fuzzily matches to nd4 . take the top speed ( in operation ) \uff08 km / h \uff09 record of this row . select the rows whose model record fuzzily matches to nd5 . take the top speed ( in operation ) \uff08 km / h \uff09 record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; model ; nd4 } ; top speed ( in operation ) \uff08 km / h \uff09 } ; hop { filter_eq { all_rows ; model ; nd5 } ; top speed ( in operation ) \uff08 km / h \uff09 } }, interpretation: select the rows whose model record fuzzily matches to nd4 . take the top speed ( in operation ) \uff08 km / h \uff09 record of this row . select the rows whose model record fuzzily matches to nd5 . take the top speed ( in operation ) \uff08 km / h \uff09 record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; model ; nd4 } ; top speed ( in operation ) \uff08 km / h \uff09 } ; hop { filter_eq { all_rows ; model ; nd5 } ; top speed ( in operation ) \uff08 km / h \uff09 } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose to par record is equal to -1 . there is only one such row in the table . the player record of this unqiue row is jack nicklaus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } } ; eq { hop { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } ; player } ; jack nicklaus } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose to par record is equal to -1 . there is only one such row in the table . the player record of this unqiue row is jack nicklaus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } } ; eq { hop { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } ; player } ; jack nicklaus } }, interpretation: select the row whose time record of all rows is maximum . the game record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time } ; game } ; 1 }, interpretation: select the row whose time record of all rows is maximum . the game record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time } ; game } ; 1 }, interpretation: for the format ( s ) records of all rows , most of them fuzzily match to cd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ( s ) ; cd }, interpretation: for the format ( s ) records of all rows , most of them fuzzily match to cd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ( s ) ; cd }, interpretation: for the power ( kw ) records of all rows , most of them fuzzily match to 5 kw .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; power ( kw ) ; 5 kw }, interpretation: for the power ( kw ) records of all rows , most of them fuzzily match to 5 kw .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; power ( kw ) ; 5 kw }, interpretation: select the row whose elevation ( m ) record of all rows is maximum . the peak record of this row is mount popomanaseu .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; elevation ( m ) } ; peak } ; mount popomanaseu }, interpretation: select the row whose elevation ( m ) record of all rows is maximum . the peak record of this row is mount popomanaseu .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; elevation ( m ) } ; peak } ; mount popomanaseu }, interpretation: select the rows whose winning driver record fuzzily matches to aj foyt . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winning driver ; aj foyt } } ; 4 }, interpretation: select the rows whose winning driver record fuzzily matches to aj foyt . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winning driver ; aj foyt } } ; 4 }, interpretation: for the country records of all rows , most of them fuzzily match to united arab emirates .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united arab emirates }, interpretation: for the country records of all rows , most of them fuzzily match to united arab emirates .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united arab emirates }, interpretation: select the rows whose hometown record fuzzily matches to ca . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; hometown ; ca } } ; 2 }, interpretation: select the rows whose hometown record fuzzily matches to ca . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; hometown ; ca } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to carpet ( i ) . there is only one such row in the table . the tournament record of this unqiue row is wolfsburg , germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; carpet ( i ) } } ; eq { hop { filter_eq { all_rows ; surface ; carpet ( i ) } ; tournament } ; wolfsburg , germany } }, interpretation: select the rows whose surface record fuzzily matches to carpet ( i ) . there is only one such row in the table . the tournament record of this unqiue row is wolfsburg , germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; carpet ( i ) } } ; eq { hop { filter_eq { all_rows ; surface ; carpet ( i ) } ; tournament } ; wolfsburg , germany } }, interpretation: select the row whose time ( et ) record of all rows is maximum . the week record of this row is 9 . the opponent record of this row is pittsburgh steelers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; time ( et ) } ; week } ; 9 } ; eq { hop { argmax { all_rows ; time ( et ) } ; opponent } ; pittsburgh steelers } }, interpretation: select the row whose time ( et ) record of all rows is maximum . the week record of this row is 9 . the opponent record of this row is pittsburgh steelers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; time ( et ) } ; week } ; 9 } ; eq { hop { argmax { all_rows ; time ( et ) } ; opponent } ; pittsburgh steelers } }, interpretation: for the shot pct records of all rows , most of them are less than 80 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; shot pct ; 80 % }, interpretation: for the shot pct records of all rows , most of them are less than 80 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; shot pct ; 80 % }, interpretation: the sum of the loans received , 3q record of all rows is 8550000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; loans received , 3q } ; 8550000 }, interpretation: the sum of the loans received , 3q record of all rows is 8550000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; loans received , 3q } ; 8550000 }, interpretation: select the row whose stage record of all rows is 2nd minimum . the year record of this row is 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; stage ; 2 } ; year } ; 2003 }, interpretation: select the row whose stage record of all rows is 2nd minimum . the year record of this row is 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; stage ; 2 } ; year } ; 2003 }, interpretation: select the rows whose home team score record is greater than 10 . among these rows , select the rows whose crowd record is less than 20000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; home team score ; 10 } ; crowd ; 20000 } } ; 3 }, interpretation: select the rows whose home team score record is greater than 10 . among these rows , select the rows whose crowd record is less than 20000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; home team score ; 10 } ; crowd ; 20000 } } ; 3 }, interpretation: select the rows whose fate record fuzzily matches to damaged . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; fate ; damaged } } ; 2 }, interpretation: select the rows whose fate record fuzzily matches to damaged . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; fate ; damaged } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to league . for the venue records of these rows , most of them fuzzily match to away .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; competition ; league } ; venue ; away }, interpretation: select the rows whose competition record fuzzily matches to league . for the venue records of these rows , most of them fuzzily match to away .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; competition ; league } ; venue ; away }, interpretation: for the prone records of all rows , most of them are less than 200 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; prone ; 200 }, interpretation: for the prone records of all rows , most of them are less than 200 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; prone ; 200 }, interpretation: select the rows whose song title record fuzzily matches to nee maatalo . take the year record of this row . select the rows whose song title record fuzzily matches to hey po . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; song title ; nee maatalo } ; year } ; hop { filter_eq { all_rows ; song title ; hey po } ; year } }, interpretation: select the rows whose song title record fuzzily matches to nee maatalo . take the year record of this row . select the rows whose song title record fuzzily matches to hey po . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; song title ; nee maatalo } ; year } ; hop { filter_eq { all_rows ; song title ; hey po } ; year } }, interpretation: select the row whose area ( km square ) record of all rows is 3rd maximum . the name of county record of this row is pest .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; area ( km square ) ; 3 } ; name of county } ; pest }, interpretation: select the row whose area ( km square ) record of all rows is 3rd maximum . the name of county record of this row is pest .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; area ( km square ) ; 3 } ; name of county } ; pest }, interpretation: select the rows whose won record is greater than 10 . among these rows , select the rows whose lost record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; won ; 10 } ; lost ; 3 } } ; 2 }, interpretation: select the rows whose won record is greater than 10 . among these rows , select the rows whose lost record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; won ; 10 } ; lost ; 3 } } ; 2 }, interpretation: select the rows whose champion record fuzzily matches to karrie webb . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champion ; karrie webb } } ; 2 }, interpretation: select the rows whose champion record fuzzily matches to karrie webb . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champion ; karrie webb } } ; 2 }, interpretation: select the rows whose club record fuzzily matches to bath city . take the fa cup record of this row . select the rows whose club record fuzzily matches to telford united . take the fa cup record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; bath city } ; fa cup } ; hop { filter_eq { all_rows ; club ; telford united } ; fa cup } }, interpretation: select the rows whose club record fuzzily matches to bath city . take the fa cup record of this row . select the rows whose club record fuzzily matches to telford united . take the fa cup record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; bath city } ; fa cup } ; hop { filter_eq { all_rows ; club ; telford united } ; fa cup } }, interpretation: for the established records of all rows , most of them are less than 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; established ; 2005 }, interpretation: for the established records of all rows , most of them are less than 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; established ; 2005 }, interpretation: select the row whose est record of all rows is minimum . the local government area record of this row is outback areas community development trust .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; est } ; local government area } ; outback areas community development trust }, interpretation: select the row whose est record of all rows is minimum . the local government area record of this row is outback areas community development trust .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; est } ; local government area } ; outback areas community development trust }, interpretation: the average of the score record of all rows is 70.46 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 70.46 }, interpretation: the average of the score record of all rows is 70.46 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 70.46 }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is united states ( usa ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; united states ( usa ) }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is united states ( usa ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; united states ( usa ) }, interpretation: select the rows whose opponent record fuzzily matches to minnesota vikings . take the date record of this row . select the rows whose opponent record fuzzily matches to green bay packers . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; minnesota vikings } ; date } ; hop { filter_eq { all_rows ; opponent ; green bay packers } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to minnesota vikings . take the date record of this row . select the rows whose opponent record fuzzily matches to green bay packers . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; minnesota vikings } ; date } ; hop { filter_eq { all_rows ; opponent ; green bay packers } ; date } }, interpretation: select the rows whose rider record fuzzily matches to marino lejarreta ( 3 ) . take the final position - giro record of this row . select the rows whose rider record fuzzily matches to marino lejarreta ( 2 ) . take the final position - giro record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; rider ; marino lejarreta ( 3 ) } ; final position - giro } ; hop { filter_eq { all_rows ; rider ; marino lejarreta ( 2 ) } ; final position - giro } }, interpretation: select the rows whose rider record fuzzily matches to marino lejarreta ( 3 ) . take the final position - giro record of this row . select the rows whose rider record fuzzily matches to marino lejarreta ( 2 ) . take the final position - giro record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; rider ; marino lejarreta ( 3 ) } ; final position - giro } ; hop { filter_eq { all_rows ; rider ; marino lejarreta ( 2 ) } ; final position - giro } }, interpretation: select the rows whose author record fuzzily matches to barbara clegg and marc platt . there is only one such row in the table . the title record of this unqiue row is point of entry .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; author ; barbara clegg and marc platt } } ; eq { hop { filter_eq { all_rows ; author ; barbara clegg and marc platt } ; title } ; point of entry } }, interpretation: select the rows whose author record fuzzily matches to barbara clegg and marc platt . there is only one such row in the table . the title record of this unqiue row is point of entry .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; author ; barbara clegg and marc platt } } ; eq { hop { filter_eq { all_rows ; author ; barbara clegg and marc platt } ; title } ; point of entry } }, interpretation: select the rows whose tag team record fuzzily matches to rosey and the hurricane . take the eliminated record of this row . select the rows whose tag team record fuzzily matches to jindrak and cade . take the eliminated record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tag team ; rosey and the hurricane } ; eliminated } ; hop { filter_eq { all_rows ; tag team ; jindrak and cade } ; eliminated } }, interpretation: select the rows whose tag team record fuzzily matches to rosey and the hurricane . take the eliminated record of this row . select the rows whose tag team record fuzzily matches to jindrak and cade . take the eliminated record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tag team ; rosey and the hurricane } ; eliminated } ; hop { filter_eq { all_rows ; tag team ; jindrak and cade } ; eliminated } }, interpretation: for the station type records of all rows , most of them fuzzily match to relay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; station type ; relay }, interpretation: for the station type records of all rows , most of them fuzzily match to relay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; station type ; relay }, interpretation: for the gold records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; gold ; 0 }, interpretation: for the result records of all rows , all of them fuzzily match to re-elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; re-elected }, interpretation: for the dominant religion ( 2002 ) records of all rows , most of them fuzzily match to orthodox christianity .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity }, interpretation: for the dominant religion ( 2002 ) records of all rows , most of them fuzzily match to orthodox christianity .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity }, interpretation: select the rows whose weight ( lb ) record is less than 200 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; weight ( lb ) ; 200 } } ; 4 }, interpretation: select the rows whose weight ( lb ) record is less than 200 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; weight ( lb ) ; 200 } } ; 4 }, interpretation: for the motor records of all rows , all of them fuzzily match to castor 4b .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; motor ; castor 4b }, interpretation: for the motor records of all rows , all of them fuzzily match to castor 4b .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; motor ; castor 4b }, interpretation: select the row whose laps record of all rows is 2nd minimum . the driver record of this row is graham hill .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; laps ; 2 } ; driver } ; graham hill }, interpretation: select the row whose laps record of all rows is 2nd minimum . the driver record of this row is graham hill .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; laps ; 2 } ; driver } ; graham hill }, interpretation: select the rows whose soap opera record fuzzily matches to as the world turns . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; soap opera ; as the world turns } } ; 3 }, interpretation: select the rows whose soap opera record fuzzily matches to as the world turns . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; soap opera ; as the world turns } } ; 3 }, interpretation: select the row whose per capita income record of all rows is 2nd minimum . the county record of this row is piscataquis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; per capita income ; 2 } ; county } ; piscataquis }, interpretation: select the row whose per capita income record of all rows is 2nd minimum . the county record of this row is piscataquis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; per capita income ; 2 } ; county } ; piscataquis }, interpretation: select the rows whose points record is greater than 90 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 90 } } ; 2 }, interpretation: select the rows whose points record is greater than 90 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 90 } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to 3-1 . there is only one such row in the table . the date record of this unqiue row is 15 august 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 3-1 } } ; eq { hop { filter_eq { all_rows ; result ; 3-1 } ; date } ; 15 august 2012 } }, interpretation: select the rows whose result record fuzzily matches to 3-1 . there is only one such row in the table . the date record of this unqiue row is 15 august 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 3-1 } } ; eq { hop { filter_eq { all_rows ; result ; 3-1 } ; date } ; 15 august 2012 } }, interpretation: select the rows whose mascot record fuzzily matches to scorpion . there is only one such row in the table . the elementary schools record of this unqiue row is san tan ( home ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; mascot ; scorpion } } ; eq { hop { filter_eq { all_rows ; mascot ; scorpion } ; elementary schools } ; san tan ( home ) } }, interpretation: select the rows whose mascot record fuzzily matches to scorpion . there is only one such row in the table . the elementary schools record of this unqiue row is san tan ( home ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; mascot ; scorpion } } ; eq { hop { filter_eq { all_rows ; mascot ; scorpion } ; elementary schools } ; san tan ( home ) } }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is saturday , april 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; saturday , april 10 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is saturday , april 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; saturday , april 10 }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose clinical status record fuzzily matches to fda - approved . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; clinical status ; fda - approved } } ; 6 }, interpretation: select the rows whose clinical status record fuzzily matches to fda - approved . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; clinical status ; fda - approved } } ; 6 }, interpretation: select the rows whose hometown record fuzzily matches to ca . there is only one such row in the table . the player record of this unqiue row is james kaprelian .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; hometown ; ca } } ; eq { hop { filter_eq { all_rows ; hometown ; ca } ; player } ; james kaprelian } }, interpretation: select the rows whose hometown record fuzzily matches to ca . there is only one such row in the table . the player record of this unqiue row is james kaprelian .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; hometown ; ca } } ; eq { hop { filter_eq { all_rows ; hometown ; ca } ; player } ; james kaprelian } }, interpretation: the average of the score record of all rows is 3.7-2 .7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 3.7-2 .7 }, interpretation: the average of the score record of all rows is 3.7-2 .7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 3.7-2 .7 }, interpretation: select the row whose win / loss record of all rows is 4th maximum . the season record of this row is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win / loss ; 4 } ; season } ; 2006 }, interpretation: select the row whose win / loss record of all rows is 4th maximum . the season record of this row is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win / loss ; 4 } ; season } ; 2006 }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 2 }, interpretation: the 2nd maximum points record of all rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; points ; 2 } ; 48 }, interpretation: the 2nd maximum points record of all rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; points ; 2 } ; 48 }, interpretation: select the rows whose content record fuzzily matches to salute . there is only one such row in the table . the television service record of this unqiue row is erde und mensch .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; content ; salute } } ; eq { hop { filter_eq { all_rows ; content ; salute } ; television service } ; erde und mensch } }, interpretation: select the rows whose content record fuzzily matches to salute . there is only one such row in the table . the television service record of this unqiue row is erde und mensch .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; content ; salute } } ; eq { hop { filter_eq { all_rows ; content ; salute } ; television service } ; erde und mensch } }, interpretation: select the rows whose average record is greater than 500 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; average ; 500 } } ; 2 }, interpretation: select the rows whose average record is greater than 500 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; average ; 500 } } ; 2 }, interpretation: select the rows whose cover model record fuzzily matches to two alternative covers . there is only one such row in the table . the date record of this unqiue row is 3 - 04 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; cover model ; two alternative covers } } ; eq { hop { filter_eq { all_rows ; cover model ; two alternative covers } ; date } ; 3 - 04 } }, interpretation: select the rows whose cover model record fuzzily matches to two alternative covers . there is only one such row in the table . the date record of this unqiue row is 3 - 04 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; cover model ; two alternative covers } } ; eq { hop { filter_eq { all_rows ; cover model ; two alternative covers } ; date } ; 3 - 04 } }, interpretation: select the rows whose year record fuzzily matches to 1994 . take the wins record of this row . select the rows whose year record fuzzily matches to 1996 . take the wins record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 1994 } ; wins } ; hop { filter_eq { all_rows ; year ; 1996 } ; wins } } ; 1 }, interpretation: select the rows whose year record fuzzily matches to 1994 . take the wins record of this row . select the rows whose year record fuzzily matches to 1996 . take the wins record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 1994 } ; wins } ; hop { filter_eq { all_rows ; year ; 1996 } ; wins } } ; 1 }, interpretation: select the rows whose manner of departure record fuzzily matches to mutual consent . there is only one such row in the table . the outgoing manager record of this unqiue row is jimmy calderwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; mutual consent } } ; eq { hop { filter_eq { all_rows ; manner of departure ; mutual consent } ; outgoing manager } ; jimmy calderwood } }, interpretation: select the rows whose manner of departure record fuzzily matches to mutual consent . there is only one such row in the table . the outgoing manager record of this unqiue row is jimmy calderwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; mutual consent } } ; eq { hop { filter_eq { all_rows ; manner of departure ; mutual consent } ; outgoing manager } ; jimmy calderwood } }, interpretation: select the rows whose screens record is greater than 100 . there is only one such row in the table . the territory record of this unqiue row is turkey .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; screens ; 100 } } ; eq { hop { filter_greater { all_rows ; screens ; 100 } ; territory } ; turkey } }, interpretation: select the rows whose screens record is greater than 100 . there is only one such row in the table . the territory record of this unqiue row is turkey .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; screens ; 100 } } ; eq { hop { filter_greater { all_rows ; screens ; 100 } ; territory } ; turkey } }, interpretation: select the rows whose date record fuzzily matches to 10 june 2009 . take the competition record of this row . select the rows whose date record fuzzily matches to 5 september 2009 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is 2010 fifa world cup qualification . the competition record of the second row is 2010 fifa world cup qualification .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; date ; 10 june 2009 } ; competition } ; hop { filter_eq { all_rows ; date ; 5 september 2009 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; date ; 10 june 2009 } ; competition } ; 2010 fifa world cup qualification } ; eq { hop { filter_eq { all_rows ; date ; 5 september 2009 } ; competition } ; 2010 fifa world cup qualification } } }, interpretation: select the rows whose date record fuzzily matches to 10 june 2009 . take the competition record of this row . select the rows whose date record fuzzily matches to 5 september 2009 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is 2010 fifa world cup qualification . the competition record of the second row is 2010 fifa world cup qualification .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; date ; 10 june 2009 } ; competition } ; hop { filter_eq { all_rows ; date ; 5 september 2009 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; date ; 10 june 2009 } ; competition } ; 2010 fifa world cup qualification } ; eq { hop { filter_eq { all_rows ; date ; 5 september 2009 } ; competition } ; 2010 fifa world cup qualification } } }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is wigan warriors .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; wigan warriors }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is wigan warriors .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; wigan warriors }, interpretation: select the rows whose title record fuzzily matches to empire . take the order record of this row . select the rows whose title record fuzzily matches to hollywood . take the order record of this row . the first record is less than the second record . the order record of the first row is 4 . the order record of the second row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; title ; empire } ; order } ; hop { filter_eq { all_rows ; title ; hollywood } ; order } } ; and { eq { hop { filter_eq { all_rows ; title ; empire } ; order } ; 4 } ; eq { hop { filter_eq { all_rows ; title ; hollywood } ; order } ; 5 } } }, interpretation: select the rows whose title record fuzzily matches to empire . take the order record of this row . select the rows whose title record fuzzily matches to hollywood . take the order record of this row . the first record is less than the second record . the order record of the first row is 4 . the order record of the second row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; title ; empire } ; order } ; hop { filter_eq { all_rows ; title ; hollywood } ; order } } ; and { eq { hop { filter_eq { all_rows ; title ; empire } ; order } ; 4 } ; eq { hop { filter_eq { all_rows ; title ; hollywood } ; order } ; 5 } } }, interpretation: for the result records of all rows , most of them fuzzily match to safe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; safe }, interpretation: select the rows whose title record fuzzily matches to trust and consequence . take the original air date record of this row . select the rows whose title record fuzzily matches to father , can you hair me . take the original air date record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; title ; trust and consequence } ; original air date } ; hop { filter_eq { all_rows ; title ; father , can you hair me } ; original air date } } ; -7 days }, interpretation: select the rows whose title record fuzzily matches to trust and consequence . take the original air date record of this row . select the rows whose title record fuzzily matches to father , can you hair me . take the original air date record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; title ; trust and consequence } ; original air date } ; hop { filter_eq { all_rows ; title ; father , can you hair me } ; original air date } } ; -7 days }, interpretation: select the rows whose power rpm record is equal to 6800 . there is only one such row in the table . the model record of this unqiue row is sl 63 amg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; power rpm ; 6800 } } ; eq { hop { filter_eq { all_rows ; power rpm ; 6800 } ; model } ; sl 63 amg } }, interpretation: select the rows whose power rpm record is equal to 6800 . there is only one such row in the table . the model record of this unqiue row is sl 63 amg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; power rpm ; 6800 } } ; eq { hop { filter_eq { all_rows ; power rpm ; 6800 } ; model } ; sl 63 amg } }, interpretation: select the rows whose top - 25 record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; top - 25 ; 0 } } ; 2 }, interpretation: select the rows whose top - 25 record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; top - 25 ; 0 } } ; 2 }, interpretation: for the chassis records of all rows , most of them fuzzily match to talbot-lago t26c da .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; talbot-lago t26c da }, interpretation: for the chassis records of all rows , most of them fuzzily match to talbot-lago t26c da .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; talbot-lago t26c da }, interpretation: select the row whose ratings record of all rows is 1st maximum . the broadcast date record of this row is 14 august 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; ratings ; 1 } ; broadcast date } ; 14 august 2012 }, interpretation: select the row whose ratings record of all rows is 1st maximum . the broadcast date record of this row is 14 august 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; ratings ; 1 } ; broadcast date } ; 14 august 2012 }, interpretation: select the row whose us viewers ( millions ) record of all rows is maximum . the original air date record of this row is november 7 , 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( millions ) } ; original air date } ; november 7 , 2010 }, interpretation: select the row whose us viewers ( millions ) record of all rows is maximum . the original air date record of this row is november 7 , 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( millions ) } ; original air date } ; november 7 , 2010 }, interpretation: select the rows whose 1st leg record fuzzily matches to 0-0 . there is only one such row in the table . the team 1 record of this unqiue row is s\u00e3o paulo . the team 2 record of this unqiue row is nacional .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 1st leg ; 0-0 } } ; and { eq { hop { filter_eq { all_rows ; 1st leg ; 0-0 } ; team 1 } ; s\u00e3o paulo } ; eq { hop { filter_eq { all_rows ; 1st leg ; 0-0 } ; team 2 } ; nacional } } }, interpretation: select the rows whose 1st leg record fuzzily matches to 0-0 . there is only one such row in the table . the team 1 record of this unqiue row is s\u00e3o paulo . the team 2 record of this unqiue row is nacional .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 1st leg ; 0-0 } } ; and { eq { hop { filter_eq { all_rows ; 1st leg ; 0-0 } ; team 1 } ; s\u00e3o paulo } ; eq { hop { filter_eq { all_rows ; 1st leg ; 0-0 } ; team 2 } ; nacional } } }, interpretation: for the result records of all rows , all of them fuzzily match to re-elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; re-elected }, interpretation: select the row whose population record of all rows is maximum . the official name record of this row is moncton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; official name } ; moncton }, interpretation: select the row whose population record of all rows is maximum . the official name record of this row is moncton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; official name } ; moncton }, interpretation: for the date records of all rows , all of them fuzzily match to 10 july 1954 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 10 july 1954 }, interpretation: for the date records of all rows , all of them fuzzily match to 10 july 1954 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 10 july 1954 }, interpretation: the average of the races record of all rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; races } ; 12 }, interpretation: the average of the races record of all rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; races } ; 12 }, interpretation: the sum of the points record of all rows is 96 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 96 }, interpretation: the sum of the points record of all rows is 96 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 96 }, interpretation: select the row whose appearances record of all rows is maximum . the name record of this row is philippe jeannol .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; appearances } ; name } ; philippe jeannol }, interpretation: select the row whose appearances record of all rows is maximum . the name record of this row is philippe jeannol .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; appearances } ; name } ; philippe jeannol }, interpretation: select the rows whose date record fuzzily matches to november 22 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 29 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; november 22 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 29 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to november 22 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 29 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; november 22 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 29 } ; attendance } }, interpretation: select the rows whose name record fuzzily matches to darwin robinson . take the round record of this row . select the rows whose name record fuzzily matches to joe miller . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; darwin robinson } ; round } ; hop { filter_eq { all_rows ; name ; joe miller } ; round } }, interpretation: select the rows whose name record fuzzily matches to darwin robinson . take the round record of this row . select the rows whose name record fuzzily matches to joe miller . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; darwin robinson } ; round } ; hop { filter_eq { all_rows ; name ; joe miller } ; round } }, interpretation: the average of the earnings record of all rows is 11647073 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; 11647073 }, interpretation: the average of the earnings record of all rows is 11647073 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; 11647073 }, interpretation: select the row whose date record of all rows is 13th minimum . the race record of this row is italian grand prix .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 13 } ; race } ; italian grand prix }, interpretation: select the row whose date record of all rows is 13th minimum . the race record of this row is italian grand prix .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 13 } ; race } ; italian grand prix }, interpretation: select the rows whose year born record is equal to 1979 . there is only one such row in the table . the player record of this unqiue row is konstantinos tsartsaris .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year born ; 1979 } } ; eq { hop { filter_eq { all_rows ; year born ; 1979 } ; player } ; konstantinos tsartsaris } }, interpretation: select the rows whose year born record is equal to 1979 . there is only one such row in the table . the player record of this unqiue row is konstantinos tsartsaris .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year born ; 1979 } } ; eq { hop { filter_eq { all_rows ; year born ; 1979 } ; player } ; konstantinos tsartsaris } }, interpretation: select the row whose goals record of all rows is 2nd maximum . the nationality record of this row is ireland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goals ; 2 } ; nationality } ; ireland }, interpretation: select the row whose goals record of all rows is 2nd maximum . the nationality record of this row is ireland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goals ; 2 } ; nationality } ; ireland }, interpretation: for the highest rank records of all rows , all of them fuzzily match to maegashira .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; highest rank ; maegashira }, interpretation: for the highest rank records of all rows , all of them fuzzily match to maegashira .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; highest rank ; maegashira }, interpretation: for the location records of all rows , most of them fuzzily match to south dakota .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; south dakota }, interpretation: for the location records of all rows , most of them fuzzily match to south dakota .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; south dakota }, interpretation: select the rows whose model number record fuzzily matches to core i7 - 2649 m . take the frequency record of this row . select the rows whose model number record fuzzily matches to core i7 - 2629 m . take the frequency record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; model number ; core i7 - 2649 m } ; frequency } ; hop { filter_eq { all_rows ; model number ; core i7 - 2629 m } ; frequency } }, interpretation: select the rows whose model number record fuzzily matches to core i7 - 2649 m . take the frequency record of this row . select the rows whose model number record fuzzily matches to core i7 - 2629 m . take the frequency record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; model number ; core i7 - 2649 m } ; frequency } ; hop { filter_eq { all_rows ; model number ; core i7 - 2629 m } ; frequency } }, interpretation: for the authority records of all rows , all of them fuzzily match to state .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; authority ; state }, interpretation: for the authority records of all rows , all of them fuzzily match to state .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; authority ; state }, interpretation: for the date records of all rows , all of them fuzzily match to 9 august 1952 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 9 august 1952 }, interpretation: for the date records of all rows , all of them fuzzily match to 9 august 1952 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 9 august 1952 }, interpretation: select the rows whose crowd record is less than 10,000 . there is only one such row in the table . the venue record of this unqiue row is corio oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10,000 } } ; eq { hop { filter_less { all_rows ; crowd ; 10,000 } ; venue } ; corio oval } }, interpretation: select the rows whose crowd record is less than 10,000 . there is only one such row in the table . the venue record of this unqiue row is corio oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10,000 } } ; eq { hop { filter_less { all_rows ; crowd ; 10,000 } ; venue } ; corio oval } }, interpretation: select the rows whose club record fuzzily matches to pro recco . there is only one such row in the table . the name v t e record of this unqiue row is predrag joki\u0107 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; club ; pro recco } } ; eq { hop { filter_eq { all_rows ; club ; pro recco } ; name v t e } ; predrag joki\u0107 } }, interpretation: select the rows whose club record fuzzily matches to pro recco . there is only one such row in the table . the name v t e record of this unqiue row is predrag joki\u0107 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; club ; pro recco } } ; eq { hop { filter_eq { all_rows ; club ; pro recco } ; name v t e } ; predrag joki\u0107 } }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose attendance record is greater than 60000 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_greater { filter_eq { all_rows ; date ; november } ; attendance ; 60000 } }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose attendance record is greater than 60000 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_greater { filter_eq { all_rows ; date ; november } ; attendance ; 60000 } }, interpretation: select the rows whose player record fuzzily matches to jarron collins . take the years for jazz record of this row . select the rows whose player record fuzzily matches to dell curry . take the years for jazz record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; jarron collins } ; years for jazz } ; hop { filter_eq { all_rows ; player ; dell curry } ; years for jazz } }, interpretation: select the rows whose player record fuzzily matches to jarron collins . take the years for jazz record of this row . select the rows whose player record fuzzily matches to dell curry . take the years for jazz record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; jarron collins } ; years for jazz } ; hop { filter_eq { all_rows ; player ; dell curry } ; years for jazz } }, interpretation: select the rows whose coach record fuzzily matches to brian noble . select the row whose main article record of these rows is 4th minimum . the lost record of this row is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; coach ; brian noble } ; main article ; 4 } ; lost } ; 7 }, interpretation: select the rows whose coach record fuzzily matches to brian noble . select the row whose main article record of these rows is 4th minimum . the lost record of this row is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; coach ; brian noble } ; main article ; 4 } ; lost } ; 7 }, interpretation: select the row whose result record of all rows is maximum . the opponent record of this row is new england patriots .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; opponent } ; new england patriots }, interpretation: select the row whose result record of all rows is maximum . the opponent record of this row is new england patriots .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; opponent } ; new england patriots }, interpretation: for the date records of all rows , most of them fuzzily match to january .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; january }, interpretation: for the date records of all rows , most of them fuzzily match to january .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; january }, interpretation: select the rows whose event record fuzzily matches to medley . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; event ; medley } }, interpretation: select the rows whose event record fuzzily matches to medley . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; event ; medley } }, interpretation: select the row whose result f - a record of all rows is maximum . the opponents record of this row is dumbarton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result f - a } ; opponents } ; dumbarton }, interpretation: select the row whose result f - a record of all rows is maximum . the opponents record of this row is dumbarton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result f - a } ; opponents } ; dumbarton }, interpretation: select the rows whose player record fuzzily matches to mark fidler . take the goals record of this row . select the rows whose player record fuzzily matches to david sacco . take the goals record of this row . the first record is 3 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; mark fidler } ; goals } ; hop { filter_eq { all_rows ; player ; david sacco } ; goals } } ; 3 }, interpretation: select the rows whose player record fuzzily matches to mark fidler . take the goals record of this row . select the rows whose player record fuzzily matches to david sacco . take the goals record of this row . the first record is 3 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; mark fidler } ; goals } ; hop { filter_eq { all_rows ; player ; david sacco } ; goals } } ; 3 }, interpretation: select the rows whose high points record fuzzily matches to gerald wallace . there is only one such row in the table . the date record of this unqiue row is february 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; high points ; gerald wallace } } ; eq { hop { filter_eq { all_rows ; high points ; gerald wallace } ; date } ; february 8 } }, interpretation: select the rows whose high points record fuzzily matches to gerald wallace . there is only one such row in the table . the date record of this unqiue row is february 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; high points ; gerald wallace } } ; eq { hop { filter_eq { all_rows ; high points ; gerald wallace } ; date } ; february 8 } }, interpretation: select the row whose points record of all rows is 2nd maximum . the song record of this row is are you sure .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; song } ; are you sure }, interpretation: select the row whose points record of all rows is 2nd maximum . the song record of this row is are you sure .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; song } ; are you sure }, interpretation: select the rows whose champion record fuzzily matches to university of california , berkeley . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champion ; university of california , berkeley } } ; 4 }, interpretation: select the rows whose champion record fuzzily matches to university of california , berkeley . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champion ; university of california , berkeley } } ; 4 }, interpretation: for the qual 2 records of all rows , most of them are not equal to - .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; qual 2 ; - }, interpretation: for the qual 2 records of all rows , most of them are not equal to - .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; qual 2 ; - }, interpretation: select the row whose height record of all rows is maximum . the player record of this row is jos\u00e9 luis molt\u00f3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height } ; player } ; jos\u00e9 luis molt\u00f3 }, interpretation: select the row whose height record of all rows is maximum . the player record of this row is jos\u00e9 luis molt\u00f3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height } ; player } ; jos\u00e9 luis molt\u00f3 }, interpretation: select the rows whose position record fuzzily matches to ol . select the row whose pick record of these rows is minimum . the cfl team record of this row is montreal alouettes .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; position ; ol } ; pick } ; cfl team } ; montreal alouettes }, interpretation: select the rows whose position record fuzzily matches to ol . select the row whose pick record of these rows is minimum . the cfl team record of this row is montreal alouettes .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; position ; ol } ; pick } ; cfl team } ; montreal alouettes }, interpretation: select the rows whose 2008 club record fuzzily matches to henan . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2008 club ; henan } } ; 2 }, interpretation: select the rows whose 2008 club record fuzzily matches to henan . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2008 club ; henan } } ; 2 }, interpretation: select the rows whose televote record fuzzily matches to 2.33 % . there is only one such row in the table . the artist record of this unqiue row is simona sivanio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; televote ; 2.33 % } } ; eq { hop { filter_eq { all_rows ; televote ; 2.33 % } ; artist } ; simona sivanio } }, interpretation: select the rows whose televote record fuzzily matches to 2.33 % . there is only one such row in the table . the artist record of this unqiue row is simona sivanio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; televote ; 2.33 % } } ; eq { hop { filter_eq { all_rows ; televote ; 2.33 % } ; artist } ; simona sivanio } }, interpretation: select the rows whose laps record is equal to 1 . there is only one such row in the table . the year record of this unqiue row is 1964 . the finish record of this unqiue row is 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; laps ; 1 } } ; and { eq { hop { filter_eq { all_rows ; laps ; 1 } ; year } ; 1964 } ; eq { hop { filter_eq { all_rows ; laps ; 1 } ; finish } ; 30 } } }, interpretation: select the rows whose laps record is equal to 1 . there is only one such row in the table . the year record of this unqiue row is 1964 . the finish record of this unqiue row is 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; laps ; 1 } } ; and { eq { hop { filter_eq { all_rows ; laps ; 1 } ; year } ; 1964 } ; eq { hop { filter_eq { all_rows ; laps ; 1 } ; finish } ; 30 } } }, interpretation: select the rows whose successor record fuzzily matches to vacant . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; successor ; vacant } } ; 2 }, interpretation: select the rows whose successor record fuzzily matches to vacant . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; successor ; vacant } } ; 2 }, interpretation: for the category records of all rows , most of them fuzzily match to best original score .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; category ; best original score }, interpretation: for the category records of all rows , most of them fuzzily match to best original score .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; category ; best original score }, interpretation: the maximum home team score record of all rows is 15.17 ( 107 ) . the home team record of the row with superlative home team score record is south melbourne . the date record of the row with superlative home team score record is 7 august 1926 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; home team score } ; 15.17 ( 107 ) } ; and { eq { hop { argmax { all_rows ; home team score } ; home team } ; south melbourne } ; eq { hop { argmax { all_rows ; home team score } ; date } ; 7 august 1926 } } }, interpretation: the maximum home team score record of all rows is 15.17 ( 107 ) . the home team record of the row with superlative home team score record is south melbourne . the date record of the row with superlative home team score record is 7 august 1926 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; home team score } ; 15.17 ( 107 ) } ; and { eq { hop { argmax { all_rows ; home team score } ; home team } ; south melbourne } ; eq { hop { argmax { all_rows ; home team score } ; date } ; 7 august 1926 } } }, interpretation: select the rows whose service years record fuzzily matches to 1989 . there is only one such row in the table . the ship name record of this unqiue row is kri halim perdanakususma .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; service years ; 1989 } } ; eq { hop { filter_eq { all_rows ; service years ; 1989 } ; ship name } ; kri halim perdanakususma } }, interpretation: select the rows whose service years record fuzzily matches to 1989 . there is only one such row in the table . the ship name record of this unqiue row is kri halim perdanakususma .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; service years ; 1989 } } ; eq { hop { filter_eq { all_rows ; service years ; 1989 } ; ship name } ; kri halim perdanakususma } }, interpretation: select the rows whose score record fuzzily matches to 2 - 0 . there is only one such row in the table . the home team record of this unqiue row is eastern team a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 2 - 0 } } ; eq { hop { filter_eq { all_rows ; score ; 2 - 0 } ; home team } ; eastern team a } }, interpretation: select the rows whose score record fuzzily matches to 2 - 0 . there is only one such row in the table . the home team record of this unqiue row is eastern team a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 2 - 0 } } ; eq { hop { filter_eq { all_rows ; score ; 2 - 0 } ; home team } ; eastern team a } }, interpretation: select the rows whose director record fuzzily matches to siddique . take the year record of this row . select the rows whose director record fuzzily matches to arbaaz khan . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; director ; siddique } ; year } ; hop { filter_eq { all_rows ; director ; arbaaz khan } ; year } }, interpretation: select the rows whose director record fuzzily matches to siddique . take the year record of this row . select the rows whose director record fuzzily matches to arbaaz khan . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; director ; siddique } ; year } ; hop { filter_eq { all_rows ; director ; arbaaz khan } ; year } }, interpretation: for the league cup records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; league cup ; 0 }, interpretation: for the league cup records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; league cup ; 0 }, interpretation: select the rows whose state record fuzzily matches to new york . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; state ; new york } } ; 3 }, interpretation: select the rows whose state record fuzzily matches to new york . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; state ; new york } } ; 3 }, interpretation: select the row whose enrollment record of all rows is minimum . the school record of this row is cloverdale .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; enrollment } ; school } ; cloverdale }, interpretation: select the row whose enrollment record of all rows is minimum . the school record of this row is cloverdale .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; enrollment } ; school } ; cloverdale }, interpretation: select the row whose date of appointment record of all rows is 4th minimum . the replaced by record of this row is carlos jurado .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date of appointment ; 4 } ; replaced by } ; carlos jurado }, interpretation: select the row whose date of appointment record of all rows is 4th minimum . the replaced by record of this row is carlos jurado .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date of appointment ; 4 } ; replaced by } ; carlos jurado }, interpretation: select the rows whose fatalities record is equal to 0 . there is only one such row in the table . the date record of this unqiue row is 2 february 1969 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; fatalities ; 0 } } ; eq { hop { filter_eq { all_rows ; fatalities ; 0 } ; date } ; 2 february 1969 } }, interpretation: select the rows whose fatalities record is equal to 0 . there is only one such row in the table . the date record of this unqiue row is 2 february 1969 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; fatalities ; 0 } } ; eq { hop { filter_eq { all_rows ; fatalities ; 0 } ; date } ; 2 february 1969 } }, interpretation: select the rows whose opponent record fuzzily matches to usc . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; usc } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to usc . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; usc } } ; 3 }, interpretation: the average of the mark record of all rows is 47.05 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; mark } ; 47.05 }, interpretation: the average of the mark record of all rows is 47.05 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; mark } ; 47.05 }, interpretation: select the row whose first elected record of all rows is 2nd maximum . the incumbent record of this row is lane evans .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first elected ; 2 } ; incumbent } ; lane evans }, interpretation: select the row whose first elected record of all rows is 2nd maximum . the incumbent record of this row is lane evans .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first elected ; 2 } ; incumbent } ; lane evans }, interpretation: select the rows whose surface record fuzzily matches to carpet ( i ) . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; carpet ( i ) } } ; 2 }, interpretation: select the rows whose title record fuzzily matches to ( part . among these rows , select the rows whose directed by record fuzzily matches to tom tataranowicz . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; title ; ( part } ; directed by ; tom tataranowicz } } ; 3 }, interpretation: select the rows whose title record fuzzily matches to ( part . among these rows , select the rows whose directed by record fuzzily matches to tom tataranowicz . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; title ; ( part } ; directed by ; tom tataranowicz } } ; 3 }, interpretation: the average of the margin ( pts ) record of all rows is 27.25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; margin ( pts ) } ; 27.25 }, interpretation: the average of the margin ( pts ) record of all rows is 27.25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; margin ( pts ) } ; 27.25 }, interpretation: the average of the to par record of all rows is -3.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -3.4 }, interpretation: the average of the to par record of all rows is -3.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -3.4 }, interpretation: select the rows whose opponent record fuzzily matches to san diego chargers . take the date record of this row . select the rows whose opponent record fuzzily matches to dallas cowboys . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; san diego chargers } ; date } ; hop { filter_eq { all_rows ; opponent ; dallas cowboys } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to san diego chargers . take the date record of this row . select the rows whose opponent record fuzzily matches to dallas cowboys . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; san diego chargers } ; date } ; hop { filter_eq { all_rows ; opponent ; dallas cowboys } ; date } }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the home team record of this row is richmond .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; home team } ; richmond }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the home team record of this row is richmond .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; home team } ; richmond }, interpretation: the maximum games record of all rows is 38 . the name record of the row with superlative games record is andrew panko .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; games } ; 38 } ; eq { hop { argmax { all_rows ; games } ; name } ; andrew panko } }, interpretation: the maximum games record of all rows is 38 . the name record of the row with superlative games record is andrew panko .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; games } ; 38 } ; eq { hop { argmax { all_rows ; games } ; name } ; andrew panko } }, interpretation: select the rows whose director record fuzzily matches to j clark mathis . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; director ; j clark mathis } }, interpretation: select the rows whose director record fuzzily matches to j clark mathis . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; director ; j clark mathis } }, interpretation: select the row whose total record of all rows is maximum . the athlete record of this row is anastasia davydova & anastasiya yermakova .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; athlete } ; anastasia davydova & anastasiya yermakova }, interpretation: select the row whose total record of all rows is maximum . the athlete record of this row is anastasia davydova & anastasiya yermakova .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; athlete } ; anastasia davydova & anastasiya yermakova }, interpretation: select the rows whose previous network record fuzzily matches to nbc . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; previous network ; nbc } } ; 3 }, interpretation: select the rows whose previous network record fuzzily matches to nbc . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; previous network ; nbc } } ; 3 }, interpretation: the average of the gold record of all rows is 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 15 }, interpretation: the average of the gold record of all rows is 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 15 }, interpretation: select the rows whose opponent record fuzzily matches to andrew chappelle . take the round record of this row . select the rows whose opponent record fuzzily matches to danny payne . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; andrew chappelle } ; round } ; hop { filter_eq { all_rows ; opponent ; danny payne } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to andrew chappelle . take the round record of this row . select the rows whose opponent record fuzzily matches to danny payne . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; andrew chappelle } ; round } ; hop { filter_eq { all_rows ; opponent ; danny payne } ; round } }, interpretation: the sum of the runs record of all rows is 3324 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; runs } ; 3324 }, interpretation: the sum of the runs record of all rows is 3324 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; runs } ; 3324 }, interpretation: select the rows whose name record fuzzily matches to greg merson . take the wsop cashes record of this row . select the rows whose name record fuzzily matches to michael esposito . take the wsop cashes record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; greg merson } ; wsop cashes } ; hop { filter_eq { all_rows ; name ; michael esposito } ; wsop cashes } }, interpretation: select the rows whose name record fuzzily matches to greg merson . take the wsop cashes record of this row . select the rows whose name record fuzzily matches to michael esposito . take the wsop cashes record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; greg merson } ; wsop cashes } ; hop { filter_eq { all_rows ; name ; michael esposito } ; wsop cashes } }, interpretation: select the rows whose points record is greater than 60 . among these rows , select the rows whose tries for record is less than 60 . there is only one such row in the table . the club record of this unqiue row is kidwelly rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_greater { all_rows ; points ; 60 } ; tries for ; 60 } } ; eq { hop { filter_less { filter_greater { all_rows ; points ; 60 } ; tries for ; 60 } ; club } ; kidwelly rfc } }, interpretation: select the rows whose points record is greater than 60 . among these rows , select the rows whose tries for record is less than 60 . there is only one such row in the table . the club record of this unqiue row is kidwelly rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_greater { all_rows ; points ; 60 } ; tries for ; 60 } } ; eq { hop { filter_less { filter_greater { all_rows ; points ; 60 } ; tries for ; 60 } ; club } ; kidwelly rfc } }, interpretation: the average of the points record of all rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 11 }, interpretation: the average of the points record of all rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 11 }, interpretation: select the rows whose races record is equal to 16 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; races ; 16 } } ; 4 }, interpretation: select the rows whose races record is equal to 16 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; races ; 16 } } ; 4 }, interpretation: select the row whose points ( pts ) record of all rows is 2nd maximum . the team ( equipo ) record of this row is san francisco fc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ( pts ) ; 2 } ; team ( equipo ) } ; san francisco fc }, interpretation: select the row whose points ( pts ) record of all rows is 2nd maximum . the team ( equipo ) record of this row is san francisco fc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ( pts ) ; 2 } ; team ( equipo ) } ; san francisco fc }, interpretation: select the rows whose type record fuzzily matches to shunter . select the row whose introduced record of these rows is 1st minimum . the class record of this row is class 08 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; type ; shunter } ; introduced ; 1 } ; class } ; class 08 }, interpretation: select the rows whose type record fuzzily matches to shunter . select the row whose introduced record of these rows is 1st minimum . the class record of this row is class 08 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; type ; shunter } ; introduced ; 1 } ; class } ; class 08 }, interpretation: select the row whose population density ( people / km square ) record of all rows is maximum . the metropolitan area record of this row is mumbai ( bombay ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population density ( people / km square ) } ; metropolitan area } ; mumbai ( bombay ) }, interpretation: select the row whose population density ( people / km square ) record of all rows is maximum . the metropolitan area record of this row is mumbai ( bombay ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population density ( people / km square ) } ; metropolitan area } ; mumbai ( bombay ) }, interpretation: select the rows whose host record fuzzily matches to hopton - on - sea . there is only one such row in the table . the season record of this unqiue row is 1998 / 99 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; host ; hopton - on - sea } } ; eq { hop { filter_eq { all_rows ; host ; hopton - on - sea } ; season } ; 1998 / 99 } }, interpretation: select the rows whose host record fuzzily matches to hopton - on - sea . there is only one such row in the table . the season record of this unqiue row is 1998 / 99 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; host ; hopton - on - sea } } ; eq { hop { filter_eq { all_rows ; host ; hopton - on - sea } ; season } ; 1998 / 99 } }, interpretation: for the format records of all rows , most of them fuzzily match to vinyl .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; vinyl }, interpretation: for the format records of all rows , most of them fuzzily match to vinyl .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; vinyl }, interpretation: select the rows whose drawn record is equal to 0 . select the row whose won record of these rows is maximum . the club record of this row is brynmawr rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; drawn ; 0 } ; won } ; club } ; brynmawr rfc }, interpretation: select the rows whose drawn record is equal to 0 . select the row whose won record of these rows is maximum . the club record of this row is brynmawr rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; drawn ; 0 } ; won } ; club } ; brynmawr rfc }, interpretation: select the rows whose format record fuzzily matches to christian . take the frequency record of this row . select the rows whose format record fuzzily matches to public broadcasting . take the frequency record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; format ; christian } ; frequency } ; hop { filter_eq { all_rows ; format ; public broadcasting } ; frequency } }, interpretation: select the rows whose format record fuzzily matches to christian . take the frequency record of this row . select the rows whose format record fuzzily matches to public broadcasting . take the frequency record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; format ; christian } ; frequency } ; hop { filter_eq { all_rows ; format ; public broadcasting } ; frequency } }, interpretation: select the rows whose directed by record fuzzily matches to allan arkush . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; allan arkush } } ; 2 }, interpretation: select the rows whose directed by record fuzzily matches to allan arkush . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; allan arkush } } ; 2 }, interpretation: select the rows whose man of the match record fuzzily matches to icl pakistan . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; man of the match ; icl pakistan } }, interpretation: select the rows whose man of the match record fuzzily matches to icl pakistan . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; man of the match ; icl pakistan } }, interpretation: for the ihsaa class records of all rows , all of them fuzzily match to aaaa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; ihsaa class ; aaaa }, interpretation: for the ihsaa class records of all rows , all of them fuzzily match to aaaa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; ihsaa class ; aaaa }, interpretation: select the rows whose focal plane in ft ( m ) record fuzzily matches to n / a . there is only one such row in the table . the lighthouse record of this unqiue row is basco .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; focal plane in ft ( m ) ; n / a } } ; eq { hop { filter_eq { all_rows ; focal plane in ft ( m ) ; n / a } ; lighthouse } ; basco } }, interpretation: select the rows whose focal plane in ft ( m ) record fuzzily matches to n / a . there is only one such row in the table . the lighthouse record of this unqiue row is basco .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; focal plane in ft ( m ) ; n / a } } ; eq { hop { filter_eq { all_rows ; focal plane in ft ( m ) ; n / a } ; lighthouse } ; basco } }, interpretation: select the rows whose city of license record fuzzily matches to lyons falls , ny . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to norwich , ny . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; city of license ; lyons falls , ny } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; norwich , ny } ; frequency mhz } }, interpretation: select the rows whose city of license record fuzzily matches to lyons falls , ny . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to norwich , ny . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; city of license ; lyons falls , ny } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; norwich , ny } ; frequency mhz } }, interpretation: select the rows whose home team record fuzzily matches to melbourne . the average of the crowd record of these rows is 15750 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; home team ; melbourne } ; crowd } ; 15750 }, interpretation: select the rows whose home team record fuzzily matches to melbourne . the average of the crowd record of these rows is 15750 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; home team ; melbourne } ; crowd } ; 15750 }, interpretation: select the rows whose ground record fuzzily matches to football park . among these rows , select the rows whose crowd record is less than 16000 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_eq { all_rows ; ground ; football park } ; crowd ; 16000 } } ; 1 }, interpretation: select the rows whose ground record fuzzily matches to football park . among these rows , select the rows whose crowd record is less than 16000 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_eq { all_rows ; ground ; football park } ; crowd ; 16000 } } ; 1 }, interpretation: the sum of the national titles record of all rows is 79 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; national titles } ; 79 }, interpretation: the sum of the national titles record of all rows is 79 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; national titles } ; 79 }, interpretation: select the row whose date of appointment record of all rows is 3rd minimum . the replaced by record of this row is ivan pudar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date of appointment ; 3 } ; replaced by } ; ivan pudar }, interpretation: select the row whose date of appointment record of all rows is 3rd minimum . the replaced by record of this row is ivan pudar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date of appointment ; 3 } ; replaced by } ; ivan pudar }, interpretation: select the rows whose county record fuzzily matches to wexford . there is only one such row in the table . the player record of this unqiue row is christy kehoe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; county ; wexford } } ; eq { hop { filter_eq { all_rows ; county ; wexford } ; player } ; christy kehoe } }, interpretation: select the rows whose county record fuzzily matches to wexford . there is only one such row in the table . the player record of this unqiue row is christy kehoe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; county ; wexford } } ; eq { hop { filter_eq { all_rows ; county ; wexford } ; player } ; christy kehoe } }, interpretation: select the row whose population record of all rows is 3rd maximum . the english name record of this row is suibin county .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 3 } ; english name } ; suibin county }, interpretation: select the row whose population record of all rows is 3rd maximum . the english name record of this row is suibin county .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 3 } ; english name } ; suibin county }, interpretation: the sum of the quantity record of all rows is 427 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; quantity } ; 427 }, interpretation: the sum of the quantity record of all rows is 427 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; quantity } ; 427 }, interpretation: select the rows whose nba years record is equal to 3 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nba years ; 3 } } ; 5 }, interpretation: select the rows whose nba years record is equal to 3 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nba years ; 3 } } ; 5 }, interpretation: select the rows whose year record is greater than or equal to 1960 . the maximum rank record of these rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_greater_eq { all_rows ; year ; 1960 } ; rank } ; 17 }, interpretation: select the rows whose year record is greater than or equal to 1960 . the maximum rank record of these rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_greater_eq { all_rows ; year ; 1960 } ; rank } ; 17 }, interpretation: select the row whose points record of all rows is 2nd maximum . the performer record of this row is honor heffernan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; performer } ; honor heffernan }, interpretation: select the row whose points record of all rows is 2nd maximum . the performer record of this row is honor heffernan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; performer } ; honor heffernan }, interpretation: select the rows whose performer 4 record fuzzily matches to john bird . there is only one such row in the table . the episode record of this unqiue row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; performer 4 ; john bird } } ; eq { hop { filter_eq { all_rows ; performer 4 ; john bird } ; episode } ; 5 } }, interpretation: select the rows whose performer 4 record fuzzily matches to john bird . there is only one such row in the table . the episode record of this unqiue row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; performer 4 ; john bird } } ; eq { hop { filter_eq { all_rows ; performer 4 ; john bird } ; episode } ; 5 } }, interpretation: the maximum duration ( days ) record of all rows is 184.84 . the expedition record of the row with superlative duration ( days ) record is salyut 6 - eo - 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; duration ( days ) } ; 184.84 } ; eq { hop { argmax { all_rows ; duration ( days ) } ; expedition } ; salyut 6 - eo - 4 } }, interpretation: the maximum duration ( days ) record of all rows is 184.84 . the expedition record of the row with superlative duration ( days ) record is salyut 6 - eo - 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; duration ( days ) } ; 184.84 } ; eq { hop { argmax { all_rows ; duration ( days ) } ; expedition } ; salyut 6 - eo - 4 } }, interpretation: for the launch records of all rows , most of them are greater than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; launch ; 2000 }, interpretation: for the launch records of all rows , most of them are greater than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; launch ; 2000 }, interpretation: select the row whose strike rate record of all rows is maximum . the player record of this row is paul harris .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; strike rate } ; player } ; paul harris }, interpretation: select the row whose strike rate record of all rows is maximum . the player record of this row is paul harris .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; strike rate } ; player } ; paul harris }, interpretation: select the rows whose opposition record fuzzily matches to surrey . take the score record of this row . select the rows whose opposition record fuzzily matches to somerset . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposition ; surrey } ; score } ; hop { filter_eq { all_rows ; opposition ; somerset } ; score } }, interpretation: select the rows whose opposition record fuzzily matches to surrey . take the score record of this row . select the rows whose opposition record fuzzily matches to somerset . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposition ; surrey } ; score } ; hop { filter_eq { all_rows ; opposition ; somerset } ; score } }, interpretation: the average of the horwood record of all rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; horwood } ; 8 }, interpretation: the average of the horwood record of all rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; horwood } ; 8 }, interpretation: select the rows whose date record fuzzily matches to january . among these rows , select the rows whose crowd record is less than 4000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_eq { all_rows ; date ; january } ; crowd ; 4000 } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to january . among these rows , select the rows whose crowd record is less than 4000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_eq { all_rows ; date ; january } ; crowd ; 4000 } } ; 3 }, interpretation: select the row whose time / retired record of all rows is maximum . the rider record of this row is dani pedrosa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time / retired } ; rider } ; dani pedrosa }, interpretation: select the row whose time / retired record of all rows is maximum . the rider record of this row is dani pedrosa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time / retired } ; rider } ; dani pedrosa }, interpretation: for the date records of all rows , most of them fuzzily match to 03 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 03 }, interpretation: for the date records of all rows , most of them fuzzily match to 03 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 03 }, interpretation: select the rows whose executive record fuzzily matches to second . among these rows , select the rows whose first minister record fuzzily matches to ian paisley . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; executive ; second } ; first minister ; ian paisley } } ; 2 }, interpretation: select the rows whose executive record fuzzily matches to second . among these rows , select the rows whose first minister record fuzzily matches to ian paisley . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; executive ; second } ; first minister ; ian paisley } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to lost re-election republican gain . there is only one such row in the table . the incumbent record of this unqiue row is tom luken .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; lost re-election republican gain } } ; eq { hop { filter_eq { all_rows ; result ; lost re-election republican gain } ; incumbent } ; tom luken } }, interpretation: select the rows whose result record fuzzily matches to lost re-election republican gain . there is only one such row in the table . the incumbent record of this unqiue row is tom luken .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; lost re-election republican gain } } ; eq { hop { filter_eq { all_rows ; result ; lost re-election republican gain } ; incumbent } ; tom luken } }, interpretation: for the height records of all rows , most of them are greater than or equal to 6 ' 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; height ; 6 ' 0 }, interpretation: for the height records of all rows , most of them are greater than or equal to 6 ' 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; height ; 6 ' 0 }, interpretation: select the rows whose successor record fuzzily matches to john parker hale ( r ) . take the date of successors formal installation record of this row . select the rows whose successor record fuzzily matches to william bigler ( d ) . take the date of successors formal installation record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; successor ; john parker hale ( r ) } ; date of successors formal installation } ; hop { filter_eq { all_rows ; successor ; william bigler ( d ) } ; date of successors formal installation } }, interpretation: select the rows whose successor record fuzzily matches to john parker hale ( r ) . take the date of successors formal installation record of this row . select the rows whose successor record fuzzily matches to william bigler ( d ) . take the date of successors formal installation record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; successor ; john parker hale ( r ) } ; date of successors formal installation } ; hop { filter_eq { all_rows ; successor ; william bigler ( d ) } ; date of successors formal installation } }, interpretation: select the rows whose record record fuzzily matches to 4 - 0 . take the time record of this row . select the rows whose record record fuzzily matches to 5 - 0 . take the time record of this row . the first record is less than the second record . the time record of the first row is 1:43 . the time record of the second row is 5:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; record ; 4 - 0 } ; time } ; hop { filter_eq { all_rows ; record ; 5 - 0 } ; time } } ; and { eq { hop { filter_eq { all_rows ; record ; 4 - 0 } ; time } ; 1:43 } ; eq { hop { filter_eq { all_rows ; record ; 5 - 0 } ; time } ; 5:00 } } }, interpretation: select the rows whose record record fuzzily matches to 4 - 0 . take the time record of this row . select the rows whose record record fuzzily matches to 5 - 0 . take the time record of this row . the first record is less than the second record . the time record of the first row is 1:43 . the time record of the second row is 5:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; record ; 4 - 0 } ; time } ; hop { filter_eq { all_rows ; record ; 5 - 0 } ; time } } ; and { eq { hop { filter_eq { all_rows ; record ; 4 - 0 } ; time } ; 1:43 } ; eq { hop { filter_eq { all_rows ; record ; 5 - 0 } ; time } ; 5:00 } } }, interpretation: select the rows whose player record fuzzily matches to ido kozikaro . take the height record of this row . select the rows whose player record fuzzily matches to lior eliyahu . take the height record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ido kozikaro } ; height } ; hop { filter_eq { all_rows ; player ; lior eliyahu } ; height } }, interpretation: select the rows whose player record fuzzily matches to ido kozikaro . take the height record of this row . select the rows whose player record fuzzily matches to lior eliyahu . take the height record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ido kozikaro } ; height } ; hop { filter_eq { all_rows ; player ; lior eliyahu } ; height } }, interpretation: for the date records of all rows , all of them fuzzily match to 14 may 1949 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 14 may 1949 }, interpretation: for the date records of all rows , all of them fuzzily match to 14 may 1949 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 14 may 1949 }, interpretation: select the rows whose jersey number ( s ) record fuzzily matches to , . there is only one such row in the table . the player record of this unqiue row is reggie evans .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; jersey number ( s ) ; , } } ; eq { hop { filter_eq { all_rows ; jersey number ( s ) ; , } ; player } ; reggie evans } }, interpretation: select the rows whose jersey number ( s ) record fuzzily matches to , . there is only one such row in the table . the player record of this unqiue row is reggie evans .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; jersey number ( s ) ; , } } ; eq { hop { filter_eq { all_rows ; jersey number ( s ) ; , } ; player } ; reggie evans } }, interpretation: for the origin of programming records of all rows , most of them fuzzily match to india .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; origin of programming ; india }, interpretation: for the origin of programming records of all rows , most of them fuzzily match to india .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; origin of programming ; india }, interpretation: select the rows whose song title record fuzzily matches to he thinks i still care . take the length record of this row . select the rows whose song title record fuzzily matches to the pain of loving you . take the length record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; song title ; he thinks i still care } ; length } ; hop { filter_eq { all_rows ; song title ; the pain of loving you } ; length } }, interpretation: select the rows whose song title record fuzzily matches to he thinks i still care . take the length record of this row . select the rows whose song title record fuzzily matches to the pain of loving you . take the length record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; song title ; he thinks i still care } ; length } ; hop { filter_eq { all_rows ; song title ; the pain of loving you } ; length } }, interpretation: the average of the floor record of all rows is 60.589 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; floor } ; 60.589 }, interpretation: the average of the floor record of all rows is 60.589 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; floor } ; 60.589 }, interpretation: select the rows whose season record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; season } } ; 10 }, interpretation: select the rows whose season record is arbitrary . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; season } } ; 10 }, interpretation: select the rows whose opposing team record fuzzily matches to fiji . take the against record of this row . select the rows whose opposing team record fuzzily matches to taranaki . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing team ; fiji } ; against } ; hop { filter_eq { all_rows ; opposing team ; taranaki } ; against } }, interpretation: select the rows whose opposing team record fuzzily matches to fiji . take the against record of this row . select the rows whose opposing team record fuzzily matches to taranaki . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing team ; fiji } ; against } ; hop { filter_eq { all_rows ; opposing team ; taranaki } ; against } }, interpretation: select the row whose caps record of all rows is maximum . the name record of this row is ronaldo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; caps } ; name } ; ronaldo }, interpretation: select the row whose caps record of all rows is maximum . the name record of this row is ronaldo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; caps } ; name } ; ronaldo }, interpretation: select the rows whose name record fuzzily matches to jelena skerovic . take the assists record of this row . select the rows whose name record fuzzily matches to kathy wambe . take the assists record of this row . the first record is greater than the second record . the assists record of the first row is 54 . the assists record of the second row is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; jelena skerovic } ; assists } ; hop { filter_eq { all_rows ; name ; kathy wambe } ; assists } } ; and { eq { hop { filter_eq { all_rows ; name ; jelena skerovic } ; assists } ; 54 } ; eq { hop { filter_eq { all_rows ; name ; kathy wambe } ; assists } ; 48 } } }, interpretation: select the rows whose name record fuzzily matches to jelena skerovic . take the assists record of this row . select the rows whose name record fuzzily matches to kathy wambe . take the assists record of this row . the first record is greater than the second record . the assists record of the first row is 54 . the assists record of the second row is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; jelena skerovic } ; assists } ; hop { filter_eq { all_rows ; name ; kathy wambe } ; assists } } ; and { eq { hop { filter_eq { all_rows ; name ; jelena skerovic } ; assists } ; 54 } ; eq { hop { filter_eq { all_rows ; name ; kathy wambe } ; assists } ; 48 } } }, interpretation: select the rows whose position record fuzzily matches to tight end . there is only one such row in the table . the player record of this unqiue row is spencer nead .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; tight end } } ; eq { hop { filter_eq { all_rows ; position ; tight end } ; player } ; spencer nead } }, interpretation: select the rows whose position record fuzzily matches to tight end . there is only one such row in the table . the player record of this unqiue row is spencer nead .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; tight end } } ; eq { hop { filter_eq { all_rows ; position ; tight end } ; player } ; spencer nead } }, interpretation: select the rows whose event record fuzzily matches to ept baden classic . take the prize record of this row . select the rows whose event record fuzzily matches to the european poker championships . take the prize record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; event ; ept baden classic } ; prize } ; hop { filter_eq { all_rows ; event ; the european poker championships } ; prize } }, interpretation: select the rows whose event record fuzzily matches to ept baden classic . take the prize record of this row . select the rows whose event record fuzzily matches to the european poker championships . take the prize record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; event ; ept baden classic } ; prize } ; hop { filter_eq { all_rows ; event ; the european poker championships } ; prize } }, interpretation: the sum of the bb + hbp record of all rows is 580 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; bb + hbp } ; 580 }, interpretation: the sum of the bb + hbp record of all rows is 580 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; bb + hbp } ; 580 }, interpretation: the average of the time record of all rows is 13.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 13.4 }, interpretation: the average of the time record of all rows is 13.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 13.4 }, interpretation: select the rows whose reason for change record fuzzily matches to died . there is only one such row in the table . the vacator record of this unqiue row is thomas blount ( dr ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; died } } ; eq { hop { filter_eq { all_rows ; reason for change ; died } ; vacator } ; thomas blount ( dr ) } }, interpretation: select the rows whose reason for change record fuzzily matches to died . there is only one such row in the table . the vacator record of this unqiue row is thomas blount ( dr ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; died } } ; eq { hop { filter_eq { all_rows ; reason for change ; died } ; vacator } ; thomas blount ( dr ) } }, interpretation: select the rows whose player record fuzzily matches to juan theron . take the overs record of this row . select the rows whose player record fuzzily matches to makhaya ntini . take the overs record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; juan theron } ; overs } ; hop { filter_eq { all_rows ; player ; makhaya ntini } ; overs } }, interpretation: select the rows whose player record fuzzily matches to juan theron . take the overs record of this row . select the rows whose player record fuzzily matches to makhaya ntini . take the overs record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; juan theron } ; overs } ; hop { filter_eq { all_rows ; player ; makhaya ntini } ; overs } }, interpretation: select the rows whose manufacturer record fuzzily matches to suzuki . the average of the laps record of these rows is 21.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; manufacturer ; suzuki } ; laps } ; 21.5 }, interpretation: select the rows whose manufacturer record fuzzily matches to suzuki . the average of the laps record of these rows is 21.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; manufacturer ; suzuki } ; laps } ; 21.5 }, interpretation: for the party records of all rows , most of them fuzzily match to democrat .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democrat }, interpretation: for the party records of all rows , most of them fuzzily match to democrat .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democrat }, interpretation: select the rows whose country record fuzzily matches to sweden . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; sweden } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to sweden . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; sweden } } ; 2 }, interpretation: select the rows whose game record fuzzily matches to 69 . take the score record of this row . select the rows whose game record fuzzily matches to 66 . take the score record of this row . the first record is greater than the second record . the opponent record of the first row is boston bruins . the opponent record of the second row is boston bruins .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; game ; 69 } ; score } ; hop { filter_eq { all_rows ; game ; 66 } ; score } } ; and { eq { hop { filter_eq { all_rows ; game ; 69 } ; opponent } ; boston bruins } ; eq { hop { filter_eq { all_rows ; game ; 66 } ; opponent } ; boston bruins } } }, interpretation: select the rows whose game record fuzzily matches to 69 . take the score record of this row . select the rows whose game record fuzzily matches to 66 . take the score record of this row . the first record is greater than the second record . the opponent record of the first row is boston bruins . the opponent record of the second row is boston bruins .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; game ; 69 } ; score } ; hop { filter_eq { all_rows ; game ; 66 } ; score } } ; and { eq { hop { filter_eq { all_rows ; game ; 69 } ; opponent } ; boston bruins } ; eq { hop { filter_eq { all_rows ; game ; 66 } ; opponent } ; boston bruins } } }, interpretation: select the row whose date of vacancy record of all rows is 2nd maximum . the team record of this row is coventry city .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date of vacancy ; 2 } ; team } ; coventry city }, interpretation: select the row whose date of vacancy record of all rows is 2nd maximum . the team record of this row is coventry city .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date of vacancy ; 2 } ; team } ; coventry city }, interpretation: select the rows whose rider record fuzzily matches to wattie brown . take the time record of this row . select the rows whose rider record fuzzily matches to chris swallow . take the time record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; rider ; wattie brown } ; time } ; hop { filter_eq { all_rows ; rider ; chris swallow } ; time } }, interpretation: select the rows whose rider record fuzzily matches to wattie brown . take the time record of this row . select the rows whose rider record fuzzily matches to chris swallow . take the time record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; rider ; wattie brown } ; time } ; hop { filter_eq { all_rows ; rider ; chris swallow } ; time } }, interpretation: select the rows whose margin of victory record fuzzily matches to 1 stroke . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin of victory ; 1 stroke } } ; 2 }, interpretation: select the rows whose margin of victory record fuzzily matches to 1 stroke . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin of victory ; 1 stroke } } ; 2 }, interpretation: the average of the crowd record of all rows is 16667 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16667 }, interpretation: the average of the crowd record of all rows is 16667 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16667 }, interpretation: select the row whose overall record of all rows is 2nd minimum . the name record of this row is charley holm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; overall ; 2 } ; name } ; charley holm }, interpretation: select the row whose overall record of all rows is 2nd minimum . the name record of this row is charley holm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; overall ; 2 } ; name } ; charley holm }, interpretation: select the rows whose partner record fuzzily matches to tatiana poutchek . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; tatiana poutchek } } ; 2 }, interpretation: select the rows whose partner record fuzzily matches to tatiana poutchek . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; tatiana poutchek } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 5 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 5 }, interpretation: for the station type records of all rows , most of them fuzzily match to relay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; station type ; relay }, interpretation: select the row whose no in series record of all rows is 1st maximum . the family / families record of this row is the williams family .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; no in series ; 1 } ; family / families } ; the williams family }, interpretation: select the row whose no in series record of all rows is 1st maximum . the family / families record of this row is the williams family .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; no in series ; 1 } ; family / families } ; the williams family }, interpretation: select the rows whose qual 1 record is equal to - . there is only one such row in the table . the name record of this unqiue row is a j allmendinger .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; qual 1 ; - } } ; eq { hop { filter_eq { all_rows ; qual 1 ; - } ; name } ; a j allmendinger } }, interpretation: select the rows whose qual 1 record is equal to - . there is only one such row in the table . the name record of this unqiue row is a j allmendinger .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; qual 1 ; - } } ; eq { hop { filter_eq { all_rows ; qual 1 ; - } ; name } ; a j allmendinger } }, interpretation: select the rows whose erp w record is equal to 33 . there is only one such row in the table . the call sign record of this unqiue row is w267 am .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; erp w ; 33 } } ; eq { hop { filter_eq { all_rows ; erp w ; 33 } ; call sign } ; w267 am } }, interpretation: select the rows whose erp w record is equal to 33 . there is only one such row in the table . the call sign record of this unqiue row is w267 am .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; erp w ; 33 } } ; eq { hop { filter_eq { all_rows ; erp w ; 33 } ; call sign } ; w267 am } }, interpretation: select the row whose location attendance record of all rows is 1st maximum . the team record of this row is cleveland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 1 } ; team } ; cleveland }, interpretation: select the row whose location attendance record of all rows is 1st maximum . the team record of this row is cleveland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 1 } ; team } ; cleveland }, interpretation: select the rows whose opponent in the final record fuzzily matches to sania mirza . there is only one such row in the table . the championship record of this unqiue row is hyderabad , india .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; sania mirza } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; sania mirza } ; championship } ; hyderabad , india } }, interpretation: select the rows whose opponent in the final record fuzzily matches to sania mirza . there is only one such row in the table . the championship record of this unqiue row is hyderabad , india .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; sania mirza } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; sania mirza } ; championship } ; hyderabad , india } }, interpretation: the average of the total record of all rows is 2.13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 2.13 }, interpretation: the average of the total record of all rows is 2.13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 2.13 }, interpretation: select the rows whose rank record is less than or equal to 5 . the average of the bronze record of these rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; rank ; 5 } ; bronze } ; 4 }, interpretation: select the rows whose rank record is less than or equal to 5 . the average of the bronze record of these rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; rank ; 5 } ; bronze } ; 4 }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: select the row whose time record of all rows is 3rd minimum . the athlete record of this row is gabriella bascelli .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; athlete } ; gabriella bascelli }, interpretation: select the row whose time record of all rows is 3rd minimum . the athlete record of this row is gabriella bascelli .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; athlete } ; gabriella bascelli }, interpretation: select the rows whose college record fuzzily matches to mercer . select the row whose pick record of these rows is 1st minimum . the player record of this row is sam mitchell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; college ; mercer } ; pick ; 1 } ; player } ; sam mitchell }, interpretation: select the rows whose college record fuzzily matches to mercer . select the row whose pick record of these rows is 1st minimum . the player record of this row is sam mitchell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; college ; mercer } ; pick ; 1 } ; player } ; sam mitchell }, interpretation: the sum of the against record of all rows is 121 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 121 }, interpretation: the sum of the against record of all rows is 121 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 121 }, interpretation: select the row whose points record of all rows is maximum . the driver record of this row is will power .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; driver } ; will power }, interpretation: select the row whose points record of all rows is maximum . the driver record of this row is will power .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; driver } ; will power }, interpretation: select the rows whose score record fuzzily matches to l . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; l } } ; 1 }, interpretation: select the rows whose score record fuzzily matches to l . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; l } } ; 1 }, interpretation: select the rows whose total record is greater than 1 . among these rows , select the rows whose bronze record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; total ; 1 } ; bronze ; 0 } } ; 2 }, interpretation: select the rows whose total record is greater than 1 . among these rows , select the rows whose bronze record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; total ; 1 } ; bronze ; 0 } } ; 2 }, interpretation: the average of the wickets record of all rows is 33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wickets } ; 33 }, interpretation: the average of the wickets record of all rows is 33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wickets } ; 33 }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; candidates ; unopposed } } ; 3 }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; candidates ; unopposed } } ; 3 }, interpretation: the average of the us viewers ( millions ) record of all rows is 17.89 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 17.89 }, interpretation: the average of the us viewers ( millions ) record of all rows is 17.89 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 17.89 }, interpretation: the maximum goals record of all rows is 1468 . the country record of the row with superlative goals record is austria czech republic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; goals } ; 1468 } ; eq { hop { argmax { all_rows ; goals } ; country } ; austria czech republic } }, interpretation: the maximum goals record of all rows is 1468 . the country record of the row with superlative goals record is austria czech republic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; goals } ; 1468 } ; eq { hop { argmax { all_rows ; goals } ; country } ; austria czech republic } }, interpretation: select the rows whose position record is greater than 10 . there is only one such row in the table . the year record of this unqiue row is 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; position ; 10 } } ; eq { hop { filter_greater { all_rows ; position ; 10 } ; year } ; 2008 } }, interpretation: select the rows whose position record is greater than 10 . there is only one such row in the table . the year record of this unqiue row is 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; position ; 10 } } ; eq { hop { filter_greater { all_rows ; position ; 10 } ; year } ; 2008 } }, interpretation: select the rows whose shirt sponsor record fuzzily matches to n / a . there is only one such row in the table . the team record of this unqiue row is dubai .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; shirt sponsor ; n / a } } ; eq { hop { filter_eq { all_rows ; shirt sponsor ; n / a } ; team } ; dubai } }, interpretation: select the rows whose shirt sponsor record fuzzily matches to n / a . there is only one such row in the table . the team record of this unqiue row is dubai .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; shirt sponsor ; n / a } } ; eq { hop { filter_eq { all_rows ; shirt sponsor ; n / a } ; team } ; dubai } }, interpretation: select the rows whose original air date record fuzzily matches to august . select the row whose us viewers ( million ) record of these rows is 2nd maximum . the title record of this row is a little death .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; original air date ; august } ; us viewers ( million ) ; 2 } ; title } ; a little death }, interpretation: select the rows whose original air date record fuzzily matches to august . select the row whose us viewers ( million ) record of these rows is 2nd maximum . the title record of this row is a little death .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; original air date ; august } ; us viewers ( million ) ; 2 } ; title } ; a little death }, interpretation: select the rows whose school / club team record fuzzily matches to penn state . there is only one such row in the table . the player record of this unqiue row is john amaechi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; penn state } } ; eq { hop { filter_eq { all_rows ; school / club team ; penn state } ; player } ; john amaechi } }, interpretation: select the rows whose school / club team record fuzzily matches to penn state . there is only one such row in the table . the player record of this unqiue row is john amaechi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; penn state } } ; eq { hop { filter_eq { all_rows ; school / club team ; penn state } ; player } ; john amaechi } }, interpretation: for the 5th venue records of all rows , all of them fuzzily match to na .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; 5th venue ; na }, interpretation: for the 5th venue records of all rows , all of them fuzzily match to na .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; 5th venue ; na }, interpretation: select the row whose position record of all rows is minimum . the season record of this row is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; position } ; season } ; 2006 }, interpretation: select the row whose position record of all rows is minimum . the season record of this row is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; position } ; season } ; 2006 }, interpretation: select the row whose date record of all rows is 11th minimum . the field record of this row is cawley memorial stadium .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 11 } ; field } ; cawley memorial stadium }, interpretation: select the row whose date record of all rows is 11th minimum . the field record of this row is cawley memorial stadium .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 11 } ; field } ; cawley memorial stadium }, interpretation: select the rows whose home record fuzzily matches to ny rangers . there is only one such row in the table . the date record of this unqiue row is december 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; home ; ny rangers } } ; eq { hop { filter_eq { all_rows ; home ; ny rangers } ; date } ; december 1 } }, interpretation: select the rows whose home record fuzzily matches to ny rangers . there is only one such row in the table . the date record of this unqiue row is december 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; home ; ny rangers } } ; eq { hop { filter_eq { all_rows ; home ; ny rangers } ; date } ; december 1 } }, interpretation: select the rows whose municipality record fuzzily matches to trieste . take the inhabitants record of this row . select the rows whose municipality record fuzzily matches to udine . take the inhabitants record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; municipality ; trieste } ; inhabitants } ; hop { filter_eq { all_rows ; municipality ; udine } ; inhabitants } }, interpretation: select the rows whose municipality record fuzzily matches to trieste . take the inhabitants record of this row . select the rows whose municipality record fuzzily matches to udine . take the inhabitants record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; municipality ; trieste } ; inhabitants } ; hop { filter_eq { all_rows ; municipality ; udine } ; inhabitants } }, interpretation: select the row whose attendance record of all rows is maximum . the week record of this row is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; week } ; 11 }, interpretation: select the row whose attendance record of all rows is maximum . the week record of this row is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; week } ; 11 }, interpretation: select the row whose population record of all rows is maximum . the english name record of this row is hedong district .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; english name } ; hedong district }, interpretation: select the row whose population record of all rows is maximum . the english name record of this row is hedong district .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; english name } ; hedong district }, interpretation: the 4th minimum date record of all rows is 21 july 2013 . the opponent in the final record of the row with 4th minimum date record is federico delbonis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 4 } ; 21 july 2013 } ; eq { hop { nth_argmin { all_rows ; date ; 4 } ; opponent in the final } ; federico delbonis } }, interpretation: the 4th minimum date record of all rows is 21 july 2013 . the opponent in the final record of the row with 4th minimum date record is federico delbonis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 4 } ; 21 july 2013 } ; eq { hop { nth_argmin { all_rows ; date ; 4 } ; opponent in the final } ; federico delbonis } }, interpretation: select the row whose wins record of all rows is maximum . the player record of this row is tom kite .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; player } ; tom kite }, interpretation: select the row whose wins record of all rows is maximum . the player record of this row is tom kite .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; player } ; tom kite }, interpretation: for the date records of all rows , all of them fuzzily match to april .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; april }, interpretation: for the date records of all rows , all of them fuzzily match to april .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; april }, interpretation: select the row whose erp / power w record of all rows is 2nd maximum . the call sign record of this row is wrli - fm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; erp / power w ; 2 } ; call sign } ; wrli - fm }, interpretation: select the row whose erp / power w record of all rows is 2nd maximum . the call sign record of this row is wrli - fm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; erp / power w ; 2 } ; call sign } ; wrli - fm }, interpretation: select the rows whose opposing teams record fuzzily matches to france . take the against record of this row . select the rows whose opposing teams record fuzzily matches to wales . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing teams ; france } ; against } ; hop { filter_eq { all_rows ; opposing teams ; wales } ; against } }, interpretation: select the rows whose opposing teams record fuzzily matches to france . take the against record of this row . select the rows whose opposing teams record fuzzily matches to wales . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing teams ; france } ; against } ; hop { filter_eq { all_rows ; opposing teams ; wales } ; against } }, interpretation: select the rows whose first elected record fuzzily matches to 1878 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1878 } } ; 3 }, interpretation: select the rows whose first elected record fuzzily matches to 1878 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1878 } } ; 3 }, interpretation: select the row whose year record of all rows is 2nd minimum . the author record of this row is anthony browne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; author } ; anthony browne }, interpretation: select the row whose year record of all rows is 2nd minimum . the author record of this row is anthony browne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; author } ; anthony browne }, interpretation: select the rows whose driver record fuzzily matches to sarah fisher . take the laps record of this row . select the rows whose driver record fuzzily matches to dan wheldon . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; sarah fisher } ; laps } ; hop { filter_eq { all_rows ; driver ; dan wheldon } ; laps } }, interpretation: select the rows whose driver record fuzzily matches to sarah fisher . take the laps record of this row . select the rows whose driver record fuzzily matches to dan wheldon . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; sarah fisher } ; laps } ; hop { filter_eq { all_rows ; driver ; dan wheldon } ; laps } }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is january 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; january 11 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is january 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; january 11 }, interpretation: the sum of the enrollment record of all rows is 81233 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 81233 }, interpretation: the sum of the enrollment record of all rows is 81233 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 81233 }, interpretation: the average of the finish position record of all rows is 42.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish position } ; 42.8 }, interpretation: the average of the finish position record of all rows is 42.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish position } ; 42.8 }, interpretation: the average of the enrollment record of all rows is 20944 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 20944 }, interpretation: the average of the enrollment record of all rows is 20944 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 20944 }, interpretation: select the rows whose season record is greater than or equal to 1973 . the sum of the won record of these rows is 77 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; season ; 1973 } ; won } ; 77 }, interpretation: select the rows whose season record is greater than or equal to 1973 . the sum of the won record of these rows is 77 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; season ; 1973 } ; won } ; 77 }, interpretation: for the home team score records of all rows , most of them are greater than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; home team score ; 10 }, interpretation: for the home team score records of all rows , most of them are greater than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; home team score ; 10 }, interpretation: select the row whose 2012 record of all rows is maximum . the location record of this row is lake buena vista , florida , usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2012 } ; location } ; lake buena vista , florida , usa }, interpretation: select the row whose 2012 record of all rows is maximum . the location record of this row is lake buena vista , florida , usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2012 } ; location } ; lake buena vista , florida , usa }, interpretation: for the games played records of all rows , all of them are equal to 36 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; games played ; 36 }, interpretation: for the points records of all rows , most of them are greater than or equal to 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; points ; 10 }, interpretation: for the points records of all rows , most of them are greater than or equal to 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; points ; 10 }, interpretation: select the rows whose date record fuzzily matches to august . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; august } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to august . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; august } } ; 2 }, interpretation: select the rows whose playoffs record fuzzily matches to champion . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; playoffs ; champion } } ; eq { hop { filter_eq { all_rows ; playoffs ; champion } ; year } ; 1989 } }, interpretation: select the rows whose playoffs record fuzzily matches to champion . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; playoffs ; champion } } ; eq { hop { filter_eq { all_rows ; playoffs ; champion } ; year } ; 1989 } }, interpretation: select the rows whose competition record fuzzily matches to friendly . there is only one such row in the table . the date record of this unqiue row is 15 august 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; friendly } } ; eq { hop { filter_eq { all_rows ; competition ; friendly } ; date } ; 15 august 2012 } }, interpretation: select the rows whose competition record fuzzily matches to friendly . there is only one such row in the table . the date record of this unqiue row is 15 august 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; friendly } } ; eq { hop { filter_eq { all_rows ; competition ; friendly } ; date } ; 15 august 2012 } }, interpretation: select the rows whose date record fuzzily matches to august . the sum of the attendance record of these rows is 46879 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; august } ; attendance } ; 46879 }, interpretation: select the rows whose date record fuzzily matches to august . the sum of the attendance record of these rows is 46879 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; august } ; attendance } ; 46879 }, interpretation: select the rows whose date record fuzzily matches to september . the sum of the attendance record of these rows is 226814 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; september } ; attendance } ; 226814 }, interpretation: select the rows whose date record fuzzily matches to september . the sum of the attendance record of these rows is 226814 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; september } ; attendance } ; 226814 }, interpretation: select the rows whose air force cross record fuzzily matches to lifesaving medal . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; air force cross ; lifesaving medal } } ; 2 }, interpretation: select the rows whose air force cross record fuzzily matches to lifesaving medal . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; air force cross ; lifesaving medal } } ; 2 }, interpretation: select the row whose viewers record of all rows is maximum . the no record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers } ; no } ; 1 }, interpretation: select the row whose viewers record of all rows is maximum . the no record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers } ; no } ; 1 }, interpretation: select the rows whose college name record fuzzily matches to government thiruvarur medical college . take the estd record of this row . select the rows whose college name record fuzzily matches to government theni medical college . take the estd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; college name ; government thiruvarur medical college } ; estd } ; hop { filter_eq { all_rows ; college name ; government theni medical college } ; estd } }, interpretation: select the rows whose college name record fuzzily matches to government thiruvarur medical college . take the estd record of this row . select the rows whose college name record fuzzily matches to government theni medical college . take the estd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; college name ; government thiruvarur medical college } ; estd } ; hop { filter_eq { all_rows ; college name ; government theni medical college } ; estd } }, interpretation: select the rows whose team record fuzzily matches to pescarolo sport . for the laps records of these rows , most of them are greater than 300 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; team ; pescarolo sport } ; laps ; 300 }, interpretation: select the rows whose team record fuzzily matches to pescarolo sport . for the laps records of these rows , most of them are greater than 300 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; team ; pescarolo sport } ; laps ; 300 }, interpretation: the average of the points record of all rows is 263.16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 263.16 }, interpretation: the average of the points record of all rows is 263.16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 263.16 }, interpretation: select the row whose frequency mhz record of all rows is 2nd maximum . the city of license record of this row is pound , virginia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency mhz ; 2 } ; city of license } ; pound , virginia }, interpretation: select the row whose frequency mhz record of all rows is 2nd maximum . the city of license record of this row is pound , virginia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency mhz ; 2 } ; city of license } ; pound , virginia }, interpretation: for the reason for change records of all rows , most of them fuzzily match to died .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reason for change ; died }, interpretation: for the reason for change records of all rows , most of them fuzzily match to died .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reason for change ; died }, interpretation: for the games records of all rows , most of them are equal to 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; games ; 5 }, interpretation: for the games records of all rows , most of them are equal to 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; games ; 5 }, interpretation: select the rows whose competition record fuzzily matches to uefa cup . among these rows , select the rows whose result record fuzzily matches to draw . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; competition ; uefa cup } ; result ; draw } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to uefa cup . among these rows , select the rows whose result record fuzzily matches to draw . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; competition ; uefa cup } ; result ; draw } } ; 2 }, interpretation: select the row whose overall record of all rows is maximum . the name record of this row is sean renfree .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overall } ; name } ; sean renfree }, interpretation: select the row whose overall record of all rows is maximum . the name record of this row is sean renfree .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overall } ; name } ; sean renfree }, interpretation: the average of the crowd record of all rows is 25000-27000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 25000-27000 }, interpretation: the average of the crowd record of all rows is 25000-27000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 25000-27000 }, interpretation: select the rows whose dance record fuzzily matches to lyrical jazz . take the week record of this row . select the rows whose dance record fuzzily matches to jive . take the week record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; dance ; lyrical jazz } ; week } ; hop { filter_eq { all_rows ; dance ; jive } ; week } }, interpretation: select the rows whose dance record fuzzily matches to lyrical jazz . take the week record of this row . select the rows whose dance record fuzzily matches to jive . take the week record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; dance ; lyrical jazz } ; week } ; hop { filter_eq { all_rows ; dance ; jive } ; week } }, interpretation: select the rows whose date record fuzzily matches to september . the average of the attendance record of these rows is 56,592 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; date ; september } ; attendance } ; 56,592 }, interpretation: select the rows whose date record fuzzily matches to september . the average of the attendance record of these rows is 56,592 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; date ; september } ; attendance } ; 56,592 }, interpretation: for the tyres records of all rows , most of them fuzzily match to g .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tyres ; g }, interpretation: for the tyres records of all rows , most of them fuzzily match to g .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tyres ; g }, interpretation: for the apparent magnitude records of all rows , most of them are greater than 10.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; apparent magnitude ; 10.0 }, interpretation: for the apparent magnitude records of all rows , most of them are greater than 10.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; apparent magnitude ; 10.0 }, interpretation: select the rows whose interregnum began record fuzzily matches to 20 february 1790 death of joseph ii . take the duration record of this row . select the rows whose interregnum began record fuzzily matches to 1 march 1792 death of leopold ii . take the duration record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; interregnum began ; 20 february 1790 death of joseph ii } ; duration } ; hop { filter_eq { all_rows ; interregnum began ; 1 march 1792 death of leopold ii } ; duration } }, interpretation: select the rows whose interregnum began record fuzzily matches to 20 february 1790 death of joseph ii . take the duration record of this row . select the rows whose interregnum began record fuzzily matches to 1 march 1792 death of leopold ii . take the duration record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; interregnum began ; 20 february 1790 death of joseph ii } ; duration } ; hop { filter_eq { all_rows ; interregnum began ; 1 march 1792 death of leopold ii } ; duration } }, interpretation: select the rows whose result record fuzzily matches to final . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; final } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to final . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; final } } ; 4 }, interpretation: select the row whose votes record of all rows is 2nd maximum . the party record of this row is labour .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; votes ; 2 } ; party } ; labour }, interpretation: select the row whose votes record of all rows is 2nd maximum . the party record of this row is labour .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; votes ; 2 } ; party } ; labour }, interpretation: select the row whose margin record of all rows is maximum . the year record of this row is 1980 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin } ; year } ; 1980 }, interpretation: select the row whose margin record of all rows is maximum . the year record of this row is 1980 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin } ; year } ; 1980 }, interpretation: select the rows whose accolade record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; accolade } } ; 6 }, interpretation: select the rows whose accolade record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; accolade } } ; 6 }, interpretation: select the row whose evening gown record of all rows is minimum . the state record of this row is pennsylvania .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; evening gown } ; state } ; pennsylvania }, interpretation: select the row whose evening gown record of all rows is minimum . the state record of this row is pennsylvania .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; evening gown } ; state } ; pennsylvania }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 1985 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 1985 }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 1985 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 1985 }, interpretation: select the row whose viewers ( millions ) record of all rows is maximum . the episode record of this row is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers ( millions ) } ; episode } ; 7 }, interpretation: select the row whose viewers ( millions ) record of all rows is maximum . the episode record of this row is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers ( millions ) } ; episode } ; 7 }, interpretation: the average of the attendance record of all rows is 45585 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 45585 }, interpretation: the average of the attendance record of all rows is 45585 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 45585 }, interpretation: select the rows whose partner record fuzzily matches to simon aspelin . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; simon aspelin } } ; 11 }, interpretation: select the rows whose partner record fuzzily matches to simon aspelin . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; simon aspelin } } ; 11 }, interpretation: the average of the candidates record of all rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 13 }, interpretation: the average of the candidates record of all rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 13 }, interpretation: select the rows whose area ( km square ) record is greater than 1000000 . for the population ( millions , 2011 ) records of these rows , most of them are greater than 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_greater { all_rows ; area ( km square ) ; 1000000 } ; population ( millions , 2011 ) ; 6 }, interpretation: select the rows whose area ( km square ) record is greater than 1000000 . for the population ( millions , 2011 ) records of these rows , most of them are greater than 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_greater { all_rows ; area ( km square ) ; 1000000 } ; population ( millions , 2011 ) ; 6 }, interpretation: the sum of the casinos record of all rows is 217 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; casinos } ; 217 }, interpretation: the sum of the casinos record of all rows is 217 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; casinos } ; 217 }, interpretation: the average of the blackberry record of all rows is 3.19 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blackberry } ; 3.19 % }, interpretation: the average of the blackberry record of all rows is 3.19 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blackberry } ; 3.19 % }, interpretation: the average of the attendance record of all rows is 43174 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 43174 }, interpretation: the average of the attendance record of all rows is 43174 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 43174 }, interpretation: select the rows whose date record fuzzily matches to 1997 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 1997 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 1997 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 1997 } } ; 2 }, interpretation: select the rows whose crowd record is greater than 20000 . among these rows , select the rows whose venue record fuzzily matches to victoria park . there is only one such row in the table . the home team record of this unqiue row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; venue ; victoria park } } ; eq { hop { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; venue ; victoria park } ; home team } ; collingwood } }, interpretation: select the rows whose crowd record is greater than 20000 . among these rows , select the rows whose venue record fuzzily matches to victoria park . there is only one such row in the table . the home team record of this unqiue row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; venue ; victoria park } } ; eq { hop { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; venue ; victoria park } ; home team } ; collingwood } }, interpretation: select the rows whose city record fuzzily matches to santa clara , california . there is only one such row in the table . the athlete record of this unqiue row is mike ryan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; city ; santa clara , california } } ; eq { hop { filter_eq { all_rows ; city ; santa clara , california } ; athlete } ; mike ryan } }, interpretation: select the rows whose city record fuzzily matches to santa clara , california . there is only one such row in the table . the athlete record of this unqiue row is mike ryan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; city ; santa clara , california } } ; eq { hop { filter_eq { all_rows ; city ; santa clara , california } ; athlete } ; mike ryan } }, interpretation: select the rows whose team ( league ) record fuzzily matches to lake superior state university ( ncaa ) . there is only one such row in the table . the player record of this unqiue row is paul constantin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ( league ) ; lake superior state university ( ncaa ) } } ; eq { hop { filter_eq { all_rows ; team ( league ) ; lake superior state university ( ncaa ) } ; player } ; paul constantin } }, interpretation: select the rows whose team ( league ) record fuzzily matches to lake superior state university ( ncaa ) . there is only one such row in the table . the player record of this unqiue row is paul constantin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ( league ) ; lake superior state university ( ncaa ) } } ; eq { hop { filter_eq { all_rows ; team ( league ) ; lake superior state university ( ncaa ) } ; player } ; paul constantin } }, interpretation: the 12th minimum pick record of all rows is 12 . the player record of the row with 12th minimum pick record is john curtis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; pick ; 12 } ; 12 } ; eq { hop { nth_argmin { all_rows ; pick ; 12 } ; player } ; john curtis } }, interpretation: the 12th minimum pick record of all rows is 12 . the player record of the row with 12th minimum pick record is john curtis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; pick ; 12 } ; 12 } ; eq { hop { nth_argmin { all_rows ; pick ; 12 } ; player } ; john curtis } }, interpretation: select the rows whose tournament record fuzzily matches to the open championship . there is only one such row in the table . the wins record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; the open championship } } ; eq { hop { filter_eq { all_rows ; tournament ; the open championship } ; wins } ; 1 } }, interpretation: the 1st minimum date record of all rows is 03 oct . the time record of the row with 1st minimum date record is 12:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 1 } ; 03 oct } ; eq { hop { nth_argmin { all_rows ; date ; 1 } ; time } ; 12:00 } }, interpretation: the 1st minimum date record of all rows is 03 oct . the time record of the row with 1st minimum date record is 12:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 1 } ; 03 oct } ; eq { hop { nth_argmin { all_rows ; date ; 1 } ; time } ; 12:00 } }, interpretation: select the rows whose lms class record fuzzily matches to 3p . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lms class ; 3p } } ; 2 }, interpretation: select the rows whose lms class record fuzzily matches to 3p . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lms class ; 3p } } ; 2 }, interpretation: the average of the score record of all rows is 2.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 2.2 }, interpretation: the average of the score record of all rows is 2.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 2.2 }, interpretation: select the rows whose opponent record fuzzily matches to brooklyn dodgers . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; brooklyn dodgers } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to brooklyn dodgers . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; brooklyn dodgers } } ; 2 }, interpretation: for the engine records of all rows , most of them fuzzily match to ferrari v12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; engine ; ferrari v12 }, interpretation: for the engine records of all rows , most of them fuzzily match to ferrari v12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; engine ; ferrari v12 }, interpretation: select the rows whose region record fuzzily matches to middle east . the maximum joined opec record of these rows is 1967 . the country record of the row with superlative joined opec record is united arab emirates .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; region ; middle east } ; joined opec } ; 1967 } ; eq { hop { argmax { filter_eq { all_rows ; region ; middle east } ; joined opec } ; country } ; united arab emirates } }, interpretation: select the rows whose region record fuzzily matches to middle east . the maximum joined opec record of these rows is 1967 . the country record of the row with superlative joined opec record is united arab emirates .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; region ; middle east } ; joined opec } ; 1967 } ; eq { hop { argmax { filter_eq { all_rows ; region ; middle east } ; joined opec } ; country } ; united arab emirates } }, interpretation: select the row whose founded record of all rows is minimum . the team record of this row is northern demons .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; founded } ; team } ; northern demons }, interpretation: select the row whose founded record of all rows is minimum . the team record of this row is northern demons .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; founded } ; team } ; northern demons }, interpretation: select the rows whose artist record fuzzily matches to kerri burnett . there is only one such row in the table . the theme record of this unqiue row is trumpeter swan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; artist ; kerri burnett } } ; eq { hop { filter_eq { all_rows ; artist ; kerri burnett } ; theme } ; trumpeter swan } }, interpretation: select the rows whose artist record fuzzily matches to kerri burnett . there is only one such row in the table . the theme record of this unqiue row is trumpeter swan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; artist ; kerri burnett } } ; eq { hop { filter_eq { all_rows ; artist ; kerri burnett } ; theme } ; trumpeter swan } }, interpretation: select the rows whose player record fuzzily matches to bob tway . take the year ( s ) won record of this row . select the rows whose player record fuzzily matches to phil mickelson . take the year ( s ) won record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; bob tway } ; year ( s ) won } ; hop { filter_eq { all_rows ; player ; phil mickelson } ; year ( s ) won } }, interpretation: select the rows whose player record fuzzily matches to bob tway . take the year ( s ) won record of this row . select the rows whose player record fuzzily matches to phil mickelson . take the year ( s ) won record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; bob tway } ; year ( s ) won } ; hop { filter_eq { all_rows ; player ; phil mickelson } ; year ( s ) won } }, interpretation: select the rows whose nationality record fuzzily matches to milanese . there is only one such row in the table . the elector record of this unqiue row is simone borsano .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; milanese } } ; eq { hop { filter_eq { all_rows ; nationality ; milanese } ; elector } ; simone borsano } }, interpretation: select the rows whose nationality record fuzzily matches to milanese . there is only one such row in the table . the elector record of this unqiue row is simone borsano .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; milanese } } ; eq { hop { filter_eq { all_rows ; nationality ; milanese } ; elector } ; simone borsano } }, interpretation: select the rows whose player record fuzzily matches to lionel cann . take the runs record of this row . select the rows whose player record fuzzily matches to dean minors . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; lionel cann } ; runs } ; hop { filter_eq { all_rows ; player ; dean minors } ; runs } }, interpretation: select the rows whose player record fuzzily matches to lionel cann . take the runs record of this row . select the rows whose player record fuzzily matches to dean minors . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; lionel cann } ; runs } ; hop { filter_eq { all_rows ; player ; dean minors } ; runs } }, interpretation: for the platform ( s ) records of all rows , most of them fuzzily match to playstation 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ( s ) ; playstation 3 }, interpretation: for the platform ( s ) records of all rows , most of them fuzzily match to playstation 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ( s ) ; playstation 3 }, interpretation: for the video records of all rows , most of them fuzzily match to 480i .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; video ; 480i }, interpretation: for the video records of all rows , most of them fuzzily match to 480i .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; video ; 480i }, interpretation: select the rows whose name record fuzzily matches to quinn pitcock . take the round record of this row . select the rows whose name record fuzzily matches to roy hall . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; quinn pitcock } ; round } ; hop { filter_eq { all_rows ; name ; roy hall } ; round } }, interpretation: select the rows whose name record fuzzily matches to quinn pitcock . take the round record of this row . select the rows whose name record fuzzily matches to roy hall . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; quinn pitcock } ; round } ; hop { filter_eq { all_rows ; name ; roy hall } ; round } }, interpretation: select the row whose us viewers ( million ) record of all rows is minimum . the title record of this row is the lorelais ' first day at yale .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; us viewers ( million ) } ; title } ; the lorelais ' first day at yale }, interpretation: select the row whose us viewers ( million ) record of all rows is minimum . the title record of this row is the lorelais ' first day at yale .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; us viewers ( million ) } ; title } ; the lorelais ' first day at yale }, interpretation: select the rows whose field goals record is not equal to 0 . there is only one such row in the table . the player record of this unqiue row is octy graham .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; field goals ; 0 } } ; eq { hop { filter_not_eq { all_rows ; field goals ; 0 } ; player } ; octy graham } }, interpretation: select the rows whose field goals record is not equal to 0 . there is only one such row in the table . the player record of this unqiue row is octy graham .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; field goals ; 0 } } ; eq { hop { filter_not_eq { all_rows ; field goals ; 0 } ; player } ; octy graham } }, interpretation: for the intra - molecular structure records of all rows , most of them fuzzily match to no .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; intra - molecular structure ; no }, interpretation: for the intra - molecular structure records of all rows , most of them fuzzily match to no .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; intra - molecular structure ; no }, interpretation: select the row whose pts record of all rows is maximum . the year record of this row is 1995 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; pts } ; year } ; 1995 }, interpretation: select the row whose pts record of all rows is maximum . the year record of this row is 1995 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; pts } ; year } ; 1995 }, interpretation: select the rows whose no in season record fuzzily matches to 1 . take the viewers ( millions ) record of this row . select the rows whose no in season record fuzzily matches to 12 . take the viewers ( millions ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; no in season ; 1 } ; viewers ( millions ) } ; hop { filter_eq { all_rows ; no in season ; 12 } ; viewers ( millions ) } }, interpretation: select the rows whose no in season record fuzzily matches to 1 . take the viewers ( millions ) record of this row . select the rows whose no in season record fuzzily matches to 12 . take the viewers ( millions ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; no in season ; 1 } ; viewers ( millions ) } ; hop { filter_eq { all_rows ; no in season ; 12 } ; viewers ( millions ) } }, interpretation: the average of the score record of all rows is 139 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 139 }, interpretation: the average of the score record of all rows is 139 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 139 }, interpretation: select the row whose swing to gain record of all rows is 3rd maximum . the constituency record of this row is ayr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; swing to gain ; 3 } ; constituency } ; ayr }, interpretation: select the row whose swing to gain record of all rows is 3rd maximum . the constituency record of this row is ayr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; swing to gain ; 3 } ; constituency } ; ayr }, interpretation: select the rows whose year record is equal to 2013 . there is only one such row in the table . the nominated work record of this unqiue row is commitment .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2013 } } ; eq { hop { filter_eq { all_rows ; year ; 2013 } ; nominated work } ; commitment } }, interpretation: select the rows whose year record is equal to 2013 . there is only one such row in the table . the nominated work record of this unqiue row is commitment .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2013 } } ; eq { hop { filter_eq { all_rows ; year ; 2013 } ; nominated work } ; commitment } }, interpretation: select the rows whose decade record fuzzily matches to 2000s . there is only one such row in the table . the song title record of this unqiue row is dirty little secret .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; decade ; 2000s } } ; eq { hop { filter_eq { all_rows ; decade ; 2000s } ; song title } ; dirty little secret } }, interpretation: select the rows whose decade record fuzzily matches to 2000s . there is only one such row in the table . the song title record of this unqiue row is dirty little secret .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; decade ; 2000s } } ; eq { hop { filter_eq { all_rows ; decade ; 2000s } ; song title } ; dirty little secret } }, interpretation: select the rows whose date record fuzzily matches to october . select the row whose week record of these rows is 3rd minimum . the opponent record of this row is san francisco 49ers . the result record of this row is w 31 - 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmin { filter_eq { all_rows ; date ; october } ; week ; 3 } ; opponent } ; san francisco 49ers } ; eq { hop { nth_argmin { filter_eq { all_rows ; date ; october } ; week ; 3 } ; result } ; w 31 - 17 } }, interpretation: select the rows whose date record fuzzily matches to october . select the row whose week record of these rows is 3rd minimum . the opponent record of this row is san francisco 49ers . the result record of this row is w 31 - 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmin { filter_eq { all_rows ; date ; october } ; week ; 3 } ; opponent } ; san francisco 49ers } ; eq { hop { nth_argmin { filter_eq { all_rows ; date ; october } ; week ; 3 } ; result } ; w 31 - 17 } }, interpretation: select the rows whose candidates record fuzzily matches to david bard . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; candidates ; david bard } } ; 2 }, interpretation: select the rows whose candidates record fuzzily matches to david bard . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; candidates ; david bard } } ; 2 }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 4 }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 4 }, interpretation: for the points records of all rows , most of them are less than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 10 }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; united states }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; united states }, interpretation: select the row whose year established record of all rows is minimum . the members record of this row is university of t\u00fcbingen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year established } ; members } ; university of t\u00fcbingen }, interpretation: select the row whose year established record of all rows is minimum . the members record of this row is university of t\u00fcbingen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year established } ; members } ; university of t\u00fcbingen }, interpretation: select the rows whose opponent record fuzzily matches to new york jets . select the row whose date record of these rows is 2nd minimum . the bills points record of this row is 34 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; new york jets } ; date ; 2 } ; bills points } ; 34 }, interpretation: select the rows whose opponent record fuzzily matches to new york jets . select the row whose date record of these rows is 2nd minimum . the bills points record of this row is 34 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; new york jets } ; date ; 2 } ; bills points } ; 34 }, interpretation: the average of the crowd record of all rows is 16000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16000 }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is vfl park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; vfl park }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is vfl park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; vfl park }, interpretation: the average of the attendance record of all rows is 50540 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 50540 }, interpretation: the average of the attendance record of all rows is 50540 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 50540 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 17 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 17 }, interpretation: select the rows whose airline record fuzzily matches to tam . take the rank record of this row . select the rows whose airline record fuzzily matches to gol . take the rank record of this row . the second record is 1 better larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; airline ; tam } ; rank } ; hop { filter_eq { all_rows ; airline ; gol } ; rank } } ; -1 better }, interpretation: select the rows whose airline record fuzzily matches to tam . take the rank record of this row . select the rows whose airline record fuzzily matches to gol . take the rank record of this row . the second record is 1 better larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; airline ; tam } ; rank } ; hop { filter_eq { all_rows ; airline ; gol } ; rank } } ; -1 better }, interpretation: select the rows whose away team record fuzzily matches to richmond . take the away team score record of this row . select the rows whose away team record fuzzily matches to hawthorn . take the away team score record of this row . the first record is greater than the second record . the away team score record of the first row is 7.9 ( 51 ) . the away team score record of the second row is 7.7 ( 49 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; hop { filter_eq { all_rows ; away team ; hawthorn } ; away team score } } ; and { eq { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; 7.9 ( 51 ) } ; eq { hop { filter_eq { all_rows ; away team ; hawthorn } ; away team score } ; 7.7 ( 49 ) } } }, interpretation: select the rows whose away team record fuzzily matches to richmond . take the away team score record of this row . select the rows whose away team record fuzzily matches to hawthorn . take the away team score record of this row . the first record is greater than the second record . the away team score record of the first row is 7.9 ( 51 ) . the away team score record of the second row is 7.7 ( 49 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; hop { filter_eq { all_rows ; away team ; hawthorn } ; away team score } } ; and { eq { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; 7.9 ( 51 ) } ; eq { hop { filter_eq { all_rows ; away team ; hawthorn } ; away team score } ; 7.7 ( 49 ) } } }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is s otis bland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; s otis bland }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is s otis bland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; s otis bland }, interpretation: select the rows whose engine type record fuzzily matches to diesel - electric . there is only one such row in the table . the make & model record of this unqiue row is orion vii 3rd generation .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine type ; diesel - electric } } ; eq { hop { filter_eq { all_rows ; engine type ; diesel - electric } ; make & model } ; orion vii 3rd generation } }, interpretation: select the rows whose engine type record fuzzily matches to diesel - electric . there is only one such row in the table . the make & model record of this unqiue row is orion vii 3rd generation .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine type ; diesel - electric } } ; eq { hop { filter_eq { all_rows ; engine type ; diesel - electric } ; make & model } ; orion vii 3rd generation } }, interpretation: select the rows whose result record fuzzily matches to l . the 2nd minimum date record of these rows is october 11 , 1998 . the opponent record of the row with 2nd minimum date record is new england patriots .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { filter_eq { all_rows ; result ; l } ; date ; 2 } ; october 11 , 1998 } ; eq { hop { nth_argmin { filter_eq { all_rows ; result ; l } ; date ; 2 } ; opponent } ; new england patriots } }, interpretation: select the rows whose result record fuzzily matches to l . the 2nd minimum date record of these rows is october 11 , 1998 . the opponent record of the row with 2nd minimum date record is new england patriots .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { filter_eq { all_rows ; result ; l } ; date ; 2 } ; october 11 , 1998 } ; eq { hop { nth_argmin { filter_eq { all_rows ; result ; l } ; date ; 2 } ; opponent } ; new england patriots } }, interpretation: select the row whose year record of all rows is 1st minimum . the name record of this row is franklin exchange building .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 1 } ; name } ; franklin exchange building }, interpretation: select the row whose year record of all rows is 1st minimum . the name record of this row is franklin exchange building .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 1 } ; name } ; franklin exchange building }, interpretation: the average of the margin of victory record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; margin of victory } ; 2 }, interpretation: the average of the margin of victory record of all rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; margin of victory } ; 2 }, interpretation: for the uccfs records of all rows , most of them are equal to 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; uccfs ; 2006 }, interpretation: for the uccfs records of all rows , most of them are equal to 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; uccfs ; 2006 }, interpretation: select the rows whose native american record fuzzily matches to 0.0 % . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; native american ; 0.0 % } } ; 4 }, interpretation: select the rows whose native american record fuzzily matches to 0.0 % . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; native american ; 0.0 % } } ; 4 }, interpretation: for the points records of all rows , most of them are greater than or equal to 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; points ; 7 }, interpretation: for the points records of all rows , most of them are greater than or equal to 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; points ; 7 }, interpretation: select the rows whose result record does not match to re-elected . there is only one such row in the table . the incumbent record of this unqiue row is iris faircloth blitch .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; result ; re-elected } } ; eq { hop { filter_not_eq { all_rows ; result ; re-elected } ; incumbent } ; iris faircloth blitch } }, interpretation: select the rows whose result record does not match to re-elected . there is only one such row in the table . the incumbent record of this unqiue row is iris faircloth blitch .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; result ; re-elected } } ; eq { hop { filter_not_eq { all_rows ; result ; re-elected } ; incumbent } ; iris faircloth blitch } }, interpretation: select the row whose distance ( km ) record of all rows is minimum . the station record of this row is kawarada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; distance ( km ) } ; station } ; kawarada }, interpretation: select the row whose distance ( km ) record of all rows is minimum . the station record of this row is kawarada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; distance ( km ) } ; station } ; kawarada }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose county record fuzzily matches to new haven . for the proposed records of these rows , most of them are less than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; county ; new haven } ; proposed ; 2000 }, interpretation: select the rows whose county record fuzzily matches to new haven . for the proposed records of these rows , most of them are less than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; county ; new haven } ; proposed ; 2000 }, interpretation: select the rows whose altitude ( mslm ) record is greater than 100 . among these rows , select the rows whose population record is less than 10000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; altitude ( mslm ) ; 100 } ; population ; 10000 } } ; 2 }, interpretation: select the rows whose altitude ( mslm ) record is greater than 100 . among these rows , select the rows whose population record is less than 10000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; altitude ( mslm ) ; 100 } ; population ; 10000 } } ; 2 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is new york giants .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; new york giants }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is new york giants .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; new york giants }, interpretation: select the row whose upper index kcal / nm 3 record of all rows is 2nd maximum . the fuel gas record of this row is iso - butane .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; upper index kcal / nm 3 ; 2 } ; fuel gas } ; iso - butane }, interpretation: select the row whose upper index kcal / nm 3 record of all rows is 2nd maximum . the fuel gas record of this row is iso - butane .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; upper index kcal / nm 3 ; 2 } ; fuel gas } ; iso - butane }, interpretation: select the rows whose manufacturer record fuzzily matches to kawasaki . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; manufacturer ; kawasaki } }, interpretation: select the rows whose manufacturer record fuzzily matches to kawasaki . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; manufacturer ; kawasaki } }, interpretation: for the publisher records of all rows , most of them fuzzily match to nintendo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; publisher ; nintendo }, interpretation: for the publisher records of all rows , most of them fuzzily match to nintendo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; publisher ; nintendo }, interpretation: select the rows whose high points record fuzzily matches to vince carter . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high points ; vince carter } } ; 12 }, interpretation: select the rows whose high points record fuzzily matches to vince carter . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high points ; vince carter } } ; 12 }, interpretation: the average of the first downs record of all rows is 19.42 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; first downs } ; 19.42 }, interpretation: the average of the first downs record of all rows is 19.42 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; first downs } ; 19.42 }, interpretation: for the network records of all rows , all of them fuzzily match to abc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; network ; abc }, interpretation: for the network records of all rows , all of them fuzzily match to abc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; network ; abc }, interpretation: select the rows whose nation record fuzzily matches to puerto rico . take the bronze record of this row . select the rows whose nation record fuzzily matches to barbados . take the bronze record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; puerto rico } ; bronze } ; hop { filter_eq { all_rows ; nation ; barbados } ; bronze } }, interpretation: select the rows whose nation record fuzzily matches to puerto rico . take the bronze record of this row . select the rows whose nation record fuzzily matches to barbados . take the bronze record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; puerto rico } ; bronze } ; hop { filter_eq { all_rows ; nation ; barbados } ; bronze } }, interpretation: select the row whose total record of all rows is 2nd maximum . the name record of this row is michael doyle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; name } ; michael doyle }, interpretation: select the row whose total record of all rows is 2nd maximum . the name record of this row is michael doyle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; name } ; michael doyle }, interpretation: the average of the population record of all rows is 338662 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population } ; 338662 }, interpretation: the average of the population record of all rows is 338662 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population } ; 338662 }, interpretation: the average of the drawn record of all rows is 2.55 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; drawn } ; 2.55 }, interpretation: the average of the drawn record of all rows is 2.55 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; drawn } ; 2.55 }, interpretation: the average of the earnings record of all rows is $ 8,661,168.40 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; $ 8,661,168.40 }, interpretation: the average of the earnings record of all rows is $ 8,661,168.40 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; $ 8,661,168.40 }, interpretation: select the rows whose format record fuzzily matches to black gospel . there is only one such row in the table . the call letters record of this unqiue row is kees .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; format ; black gospel } } ; eq { hop { filter_eq { all_rows ; format ; black gospel } ; call letters } ; kees } }, interpretation: select the rows whose format record fuzzily matches to black gospel . there is only one such row in the table . the call letters record of this unqiue row is kees .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; format ; black gospel } } ; eq { hop { filter_eq { all_rows ; format ; black gospel } ; call letters } ; kees } }, interpretation: select the rows whose date record fuzzily matches to november . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; november } ; result ; l }, interpretation: select the rows whose date record fuzzily matches to november . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; november } ; result ; l }, interpretation: select the rows whose tournament record fuzzily matches to mci heritage golf classic . there is only one such row in the table . the date record of this unqiue row is 17 apr 1988 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; mci heritage golf classic } } ; eq { hop { filter_eq { all_rows ; tournament ; mci heritage golf classic } ; date } ; 17 apr 1988 } }, interpretation: select the rows whose tournament record fuzzily matches to mci heritage golf classic . there is only one such row in the table . the date record of this unqiue row is 17 apr 1988 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; mci heritage golf classic } } ; eq { hop { filter_eq { all_rows ; tournament ; mci heritage golf classic } ; date } ; 17 apr 1988 } }, interpretation: for the partner records of all rows , most of them fuzzily match to app .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; partner ; app }, interpretation: for the partner records of all rows , most of them fuzzily match to app .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; partner ; app }, interpretation: select the row whose time record of all rows is minimum . the rider record of this row is chas mortimer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; rider } ; chas mortimer }, interpretation: select the row whose time record of all rows is minimum . the rider record of this row is chas mortimer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; rider } ; chas mortimer }, interpretation: the average of the televote / sms record of all rows is 8.33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; televote / sms } ; 8.33 }, interpretation: the average of the televote / sms record of all rows is 8.33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; televote / sms } ; 8.33 }, interpretation: the average of the prize record of all rows is 3137419 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; prize } ; 3137419 }, interpretation: the average of the prize record of all rows is 3137419 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; prize } ; 3137419 }, interpretation: select the rows whose arena record fuzzily matches to honda center . among these rows , select the rows whose attendance record is equal to 17174 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; arena ; honda center } ; attendance ; 17174 } } ; 5 }, interpretation: select the rows whose arena record fuzzily matches to honda center . among these rows , select the rows whose attendance record is equal to 17174 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; arena ; honda center } ; attendance ; 17174 } } ; 5 }, interpretation: select the rows whose location record fuzzily matches to casablanca . for the category records of these rows , all of them fuzzily match to touring car .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; location ; casablanca } ; category ; touring car }, interpretation: select the rows whose location record fuzzily matches to casablanca . for the category records of these rows , all of them fuzzily match to touring car .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; location ; casablanca } ; category ; touring car }, interpretation: for the winning amount records of all rows , most of them fuzzily match to rs 10 , 00000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winning amount ; rs 10 , 00000 }, interpretation: for the winning amount records of all rows , most of them fuzzily match to rs 10 , 00000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winning amount ; rs 10 , 00000 }, interpretation: select the rows whose name record fuzzily matches to sue . take the discovered record of this row . select the rows whose name record fuzzily matches to bucky . take the discovered record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; sue } ; discovered } ; hop { filter_eq { all_rows ; name ; bucky } ; discovered } }, interpretation: select the rows whose name record fuzzily matches to sue . take the discovered record of this row . select the rows whose name record fuzzily matches to bucky . take the discovered record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; sue } ; discovered } ; hop { filter_eq { all_rows ; name ; bucky } ; discovered } }, interpretation: select the row whose total record of all rows is maximum . the gymnast record of this row is yang yilin ( chn ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; gymnast } ; yang yilin ( chn ) }, interpretation: select the row whose total record of all rows is maximum . the gymnast record of this row is yang yilin ( chn ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; gymnast } ; yang yilin ( chn ) }, interpretation: the average of the earnings record of all rows is $ 426,356.60 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; $ 426,356.60 }, interpretation: the average of the earnings record of all rows is $ 426,356.60 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; $ 426,356.60 }, interpretation: the average of the enrollment record of all rows is 738 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 738 }, interpretation: the average of the enrollment record of all rows is 738 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 738 }, interpretation: select the rows whose city record fuzzily matches to atlanta , ga . take the passengers record of this row . select the rows whose city record fuzzily matches to orlando , fl . take the passengers record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; city ; atlanta , ga } ; passengers } ; hop { filter_eq { all_rows ; city ; orlando , fl } ; passengers } }, interpretation: select the rows whose city record fuzzily matches to atlanta , ga . take the passengers record of this row . select the rows whose city record fuzzily matches to orlando , fl . take the passengers record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; city ; atlanta , ga } ; passengers } ; hop { filter_eq { all_rows ; city ; orlando , fl } ; passengers } }, interpretation: select the row whose race record of all rows is minimum . the season record of this row is 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; race } ; season } ; 2011 }, interpretation: select the row whose race record of all rows is minimum . the season record of this row is 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; race } ; season } ; 2011 }, interpretation: select the rows whose first class team record fuzzily matches to new south wales . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first class team ; new south wales } } ; 5 }, interpretation: select the rows whose first class team record fuzzily matches to new south wales . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first class team ; new south wales } } ; 5 }, interpretation: select the rows whose constructor record fuzzily matches to ferrari . select the row whose time / retired record of these rows is minimum . the driver record of this row is rubens barrichello .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; constructor ; ferrari } ; time / retired } ; driver } ; rubens barrichello }, interpretation: select the rows whose constructor record fuzzily matches to ferrari . select the row whose time / retired record of these rows is minimum . the driver record of this row is rubens barrichello .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; constructor ; ferrari } ; time / retired } ; driver } ; rubens barrichello }, interpretation: for the original air date records of all rows , most of them are less than or equal to february 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less_eq { all_rows ; original air date ; february 2005 }, interpretation: for the original air date records of all rows , most of them are less than or equal to february 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less_eq { all_rows ; original air date ; february 2005 }, interpretation: select the rows whose stadium record fuzzily matches to rovaniemen keskuskentt\u00e4 . take the capacity record of this row . select the rows whose stadium record fuzzily matches to sonera stadium . take the capacity record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; stadium ; rovaniemen keskuskentt\u00e4 } ; capacity } ; hop { filter_eq { all_rows ; stadium ; sonera stadium } ; capacity } }, interpretation: select the rows whose stadium record fuzzily matches to rovaniemen keskuskentt\u00e4 . take the capacity record of this row . select the rows whose stadium record fuzzily matches to sonera stadium . take the capacity record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; stadium ; rovaniemen keskuskentt\u00e4 } ; capacity } ; hop { filter_eq { all_rows ; stadium ; sonera stadium } ; capacity } }, interpretation: select the row whose time record of all rows is maximum . the opponent record of this row is bob schrijber .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time } ; opponent } ; bob schrijber }, interpretation: select the row whose time record of all rows is maximum . the opponent record of this row is bob schrijber .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time } ; opponent } ; bob schrijber }, interpretation: for the manufacturer records of all rows , most of them fuzzily match to chevrolet .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manufacturer ; chevrolet }, interpretation: for the manufacturer records of all rows , most of them fuzzily match to chevrolet .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manufacturer ; chevrolet }, interpretation: the average of the scored record of all rows is 1.17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; scored } ; 1.17 }, interpretation: the average of the scored record of all rows is 1.17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; scored } ; 1.17 }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: select the rows whose team record fuzzily matches to yamaha . the average of the points record of these rows is 4.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; team ; yamaha } ; points } ; 4.5 }, interpretation: select the rows whose team record fuzzily matches to yamaha . the average of the points record of these rows is 4.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; team ; yamaha } ; points } ; 4.5 }, interpretation: select the row whose points record of all rows is 2nd maximum . the name record of this row is tom hilde .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; name } ; tom hilde }, interpretation: select the row whose points record of all rows is 2nd maximum . the name record of this row is tom hilde .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; name } ; tom hilde }, interpretation: the average of the crowd record of all rows is 22250 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 22250 }, interpretation: the average of the crowd record of all rows is 22250 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 22250 }, interpretation: select the rows whose team ( s ) record fuzzily matches to dingman brothers racing . there is only one such row in the table . the year record of this unqiue row is 1987 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ( s ) ; dingman brothers racing } } ; eq { hop { filter_eq { all_rows ; team ( s ) ; dingman brothers racing } ; year } ; 1987 } }, interpretation: select the rows whose team ( s ) record fuzzily matches to dingman brothers racing . there is only one such row in the table . the year record of this unqiue row is 1987 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ( s ) ; dingman brothers racing } } ; eq { hop { filter_eq { all_rows ; team ( s ) ; dingman brothers racing } ; year } ; 1987 } }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is mike doyle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; mike doyle }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is mike doyle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; mike doyle }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: for the date records of all rows , all of them fuzzily match to 10 may 1969 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 10 may 1969 }, interpretation: for the date records of all rows , all of them fuzzily match to 10 may 1969 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 10 may 1969 }, interpretation: select the rows whose country of origin record fuzzily matches to united states . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country of origin ; united states } } ; 2 }, interpretation: select the rows whose country of origin record fuzzily matches to united states . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country of origin ; united states } } ; 2 }, interpretation: select the row whose goals against record of all rows is maximum . the team record of this row is montreal crystals .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals against } ; team } ; montreal crystals }, interpretation: select the row whose goals against record of all rows is maximum . the team record of this row is montreal crystals .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals against } ; team } ; montreal crystals }, interpretation: select the rows whose president record fuzzily matches to jo\u00e3o havelange . take the took office record of this row . select the rows whose president record fuzzily matches to sepp blatter . take the took office record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; president ; jo\u00e3o havelange } ; took office } ; hop { filter_eq { all_rows ; president ; sepp blatter } ; took office } }, interpretation: select the rows whose president record fuzzily matches to jo\u00e3o havelange . take the took office record of this row . select the rows whose president record fuzzily matches to sepp blatter . take the took office record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; president ; jo\u00e3o havelange } ; took office } ; hop { filter_eq { all_rows ; president ; sepp blatter } ; took office } }, interpretation: select the rows whose 9:00 record fuzzily matches to the office . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 9:00 ; the office } } ; 2 }, interpretation: select the rows whose 9:00 record fuzzily matches to the office . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 9:00 ; the office } } ; 2 }, interpretation: select the rows whose enrollment record is greater than 3000 . the average of the varsity sports record of these rows is 10.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_greater { all_rows ; enrollment ; 3000 } ; varsity sports } ; 10.4 }, interpretation: select the rows whose enrollment record is greater than 3000 . the average of the varsity sports record of these rows is 10.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_greater { all_rows ; enrollment ; 3000 } ; varsity sports } ; 10.4 }, interpretation: select the rows whose nominee record fuzzily matches to anthony hopkins . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nominee ; anthony hopkins } } ; 2 }, interpretation: select the rows whose nominee record fuzzily matches to anthony hopkins . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nominee ; anthony hopkins } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 9 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 9 }, interpretation: select the rows whose club ( city / town ) record fuzzily matches to hankook verdes united ( san ignacio ) . take the goals for / against record of this row . select the rows whose club ( city / town ) record fuzzily matches to fc belize ( belize city ) . take the goals for / against record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ( city / town ) ; hankook verdes united ( san ignacio ) } ; goals for / against } ; hop { filter_eq { all_rows ; club ( city / town ) ; fc belize ( belize city ) } ; goals for / against } }, interpretation: select the rows whose club ( city / town ) record fuzzily matches to hankook verdes united ( san ignacio ) . take the goals for / against record of this row . select the rows whose club ( city / town ) record fuzzily matches to fc belize ( belize city ) . take the goals for / against record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ( city / town ) ; hankook verdes united ( san ignacio ) } ; goals for / against } ; hop { filter_eq { all_rows ; club ( city / town ) ; fc belize ( belize city ) } ; goals for / against } }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 4 }, interpretation: select the row whose year record of all rows is 3rd maximum . the version record of this row is album version .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 3 } ; version } ; album version }, interpretation: select the row whose year record of all rows is 3rd maximum . the version record of this row is album version .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 3 } ; version } ; album version }, interpretation: select the row whose year record of all rows is 2nd minimum . the driver record of this row is tony stewart . the average speed ( mph ) record of this row is 134.891 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmin { all_rows ; year ; 2 } ; driver } ; tony stewart } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; average speed ( mph ) } ; 134.891 } }, interpretation: select the row whose year record of all rows is 2nd minimum . the driver record of this row is tony stewart . the average speed ( mph ) record of this row is 134.891 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmin { all_rows ; year ; 2 } ; driver } ; tony stewart } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; average speed ( mph ) } ; 134.891 } }, interpretation: select the rows whose total record is equal to 5 . there is only one such row in the table . the country record of this unqiue row is russia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; total ; 5 } } ; eq { hop { filter_eq { all_rows ; total ; 5 } ; country } ; russia } }, interpretation: select the rows whose total record is equal to 5 . there is only one such row in the table . the country record of this unqiue row is russia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; total ; 5 } } ; eq { hop { filter_eq { all_rows ; total ; 5 } ; country } ; russia } }, interpretation: select the rows whose total record is greater than or equal to 10 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; total ; 10 } } ; 3 }, interpretation: select the rows whose total record is greater than or equal to 10 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; total ; 10 } } ; 3 }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: select the rows whose aircraft record fuzzily matches to boeing . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; aircraft ; boeing } } ; 3 }, interpretation: select the rows whose aircraft record fuzzily matches to boeing . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; aircraft ; boeing } } ; 3 }, interpretation: the average of the score record of all rows is 210.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 210.6 }, interpretation: the average of the score record of all rows is 210.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 210.6 }, interpretation: select the row whose goals scored record of all rows is 2nd maximum . the team record of this row is san salvador fc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goals scored ; 2 } ; team } ; san salvador fc }, interpretation: select the row whose goals scored record of all rows is 2nd maximum . the team record of this row is san salvador fc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goals scored ; 2 } ; team } ; san salvador fc }, interpretation: select the row whose winnings record of all rows is maximum . the year record of this row is 1998 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winnings } ; year } ; 1998 }, interpretation: select the row whose winnings record of all rows is maximum . the year record of this row is 1998 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winnings } ; year } ; 1998 }, interpretation: select the rows whose tournament record fuzzily matches to switzerland . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; switzerland } } ; 3 }, interpretation: select the rows whose tournament record fuzzily matches to switzerland . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; switzerland } } ; 3 }, interpretation: select the rows whose service record fuzzily matches to marine corps . among these rows , select the rows whose rank record fuzzily matches to private . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; service ; marine corps } ; rank ; private } } ; 5 }, interpretation: select the rows whose service record fuzzily matches to marine corps . among these rows , select the rows whose rank record fuzzily matches to private . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; service ; marine corps } ; rank ; private } } ; 5 }, interpretation: select the rows whose first elected record fuzzily matches to 196 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 196 } } ; 2 }, interpretation: select the rows whose first elected record fuzzily matches to 196 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 196 } } ; 2 }, interpretation: select the rows whose first premiere record fuzzily matches to 2009 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first premiere ; 2009 } } ; 3 }, interpretation: select the rows whose first premiere record fuzzily matches to 2009 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first premiere ; 2009 } } ; 3 }, interpretation: the sum of the crowd record of all rows is 123128 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 123128 }, interpretation: the sum of the crowd record of all rows is 123128 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 123128 }, interpretation: select the rows whose category record fuzzily matches to best supporting actress . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; category ; best supporting actress } }, interpretation: select the rows whose category record fuzzily matches to best supporting actress . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; category ; best supporting actress } }, interpretation: select the row whose earnings record of all rows is maximum . the player record of this row is tiger woods .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; earnings } ; player } ; tiger woods }, interpretation: select the row whose earnings record of all rows is maximum . the player record of this row is tiger woods .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; earnings } ; player } ; tiger woods }, interpretation: select the row whose capacity record of all rows is maximum . the club record of this row is standard li\u00e8ge .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; capacity } ; club } ; standard li\u00e8ge }, interpretation: select the row whose capacity record of all rows is maximum . the club record of this row is standard li\u00e8ge .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; capacity } ; club } ; standard li\u00e8ge }, interpretation: the sum of the laps record of all rows is 3670 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 3670 }, interpretation: the sum of the laps record of all rows is 3670 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 3670 }, interpretation: for the margin of victory records of all rows , most of them fuzzily match to 1 stroke .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; margin of victory ; 1 stroke }, interpretation: for the margin of victory records of all rows , most of them fuzzily match to 1 stroke .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; margin of victory ; 1 stroke }, interpretation: select the row whose no record of all rows is 2nd minimum . the player record of this row is rick roberson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; no ; 2 } ; player } ; rick roberson }, interpretation: select the row whose no record of all rows is 2nd minimum . the player record of this row is rick roberson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; no ; 2 } ; player } ; rick roberson }, interpretation: select the rows whose venue record fuzzily matches to glasgow . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; glasgow } } ; 6 }, interpretation: select the rows whose venue record fuzzily matches to glasgow . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; glasgow } } ; 6 }, interpretation: select the rows whose top - 5 record is equal to 1 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; top - 5 ; 1 } } ; eq { hop { filter_eq { all_rows ; top - 5 ; 1 } ; tournament } ; the open championship } }, interpretation: select the rows whose top - 5 record is equal to 1 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; top - 5 ; 1 } } ; eq { hop { filter_eq { all_rows ; top - 5 ; 1 } ; tournament } ; the open championship } }, interpretation: the sum of the points record of all rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 14 }, interpretation: the sum of the points record of all rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 14 }, interpretation: select the rows whose programming record fuzzily matches to main wybe programming . take the channel record of this row . select the rows whose programming record fuzzily matches to russia today . take the channel record of this row . the second record is 0.3 larger than the first record . the channel record of the first row is 35.1 . the channel record of the second row is 35.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; programming ; main wybe programming } ; channel } ; hop { filter_eq { all_rows ; programming ; russia today } ; channel } } ; -0.3 } ; and { eq { hop { filter_eq { all_rows ; programming ; main wybe programming } ; channel } ; 35.1 } ; eq { hop { filter_eq { all_rows ; programming ; russia today } ; channel } ; 35.4 } } }, interpretation: select the rows whose programming record fuzzily matches to main wybe programming . take the channel record of this row . select the rows whose programming record fuzzily matches to russia today . take the channel record of this row . the second record is 0.3 larger than the first record . the channel record of the first row is 35.1 . the channel record of the second row is 35.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; programming ; main wybe programming } ; channel } ; hop { filter_eq { all_rows ; programming ; russia today } ; channel } } ; -0.3 } ; and { eq { hop { filter_eq { all_rows ; programming ; main wybe programming } ; channel } ; 35.1 } ; eq { hop { filter_eq { all_rows ; programming ; russia today } ; channel } ; 35.4 } } }, interpretation: select the row whose swansea win record of all rows is maximum . the competition record of this row is league .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; swansea win } ; competition } ; league }, interpretation: select the row whose swansea win record of all rows is maximum . the competition record of this row is league .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; swansea win } ; competition } ; league }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: select the rows whose game site record fuzzily matches to shea stadium . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; game site ; shea stadium } } ; 8 }, interpretation: select the rows whose game site record fuzzily matches to shea stadium . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; game site ; shea stadium } } ; 8 }, interpretation: select the row whose pick record of all rows is minimum . the pick record of this row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; pick } ; pick } ; 5 }, interpretation: select the row whose pick record of all rows is minimum . the pick record of this row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; pick } ; pick } ; 5 }, interpretation: for the producer ( s ) records of all rows , most of them fuzzily match to mike e clark .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; producer ( s ) ; mike e clark }, interpretation: for the producer ( s ) records of all rows , most of them fuzzily match to mike e clark .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; producer ( s ) ; mike e clark }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; soviet union }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; soviet union }, interpretation: the average of the crowd record of all rows is 19900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 19900 }, interpretation: the average of the crowd record of all rows is 19900 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 19900 }, interpretation: for the position records of all rows , most of them fuzzily match to 1st .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; 1st }, interpretation: for the position records of all rows , most of them fuzzily match to 1st .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; 1st }, interpretation: select the rows whose position record fuzzily matches to fl . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; position ; fl } }, interpretation: select the rows whose position record fuzzily matches to fl . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; position ; fl } }, interpretation: select the row whose total trade record of all rows is 1st minimum . the country record of this row is iran .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; total trade ; 1 } ; country } ; iran }, interpretation: select the row whose total trade record of all rows is 1st minimum . the country record of this row is iran .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; total trade ; 1 } ; country } ; iran }, interpretation: select the row whose date record of all rows is 2nd minimum . the event record of this row is 2008 european poker championships .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; event } ; 2008 european poker championships }, interpretation: select the row whose date record of all rows is 2nd minimum . the event record of this row is 2008 european poker championships .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; event } ; 2008 european poker championships }, interpretation: select the rows whose visitor record fuzzily matches to dallas . take the date record of this row . select the rows whose visitor record fuzzily matches to montreal . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; dallas } ; date } ; hop { filter_eq { all_rows ; visitor ; montreal } ; date } }, interpretation: select the rows whose visitor record fuzzily matches to dallas . take the date record of this row . select the rows whose visitor record fuzzily matches to montreal . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; dallas } ; date } ; hop { filter_eq { all_rows ; visitor ; montreal } ; date } }, interpretation: select the rows whose nationality record fuzzily matches to alatri . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; nationality ; alatri } }, interpretation: select the rows whose nationality record fuzzily matches to alatri . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; nationality ; alatri } }, interpretation: for the date records of all rows , most of them fuzzily match to may .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; may }, interpretation: select the rows whose frequency record fuzzily matches to 91.1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; frequency ; 91.1 } } ; 2 }, interpretation: select the rows whose frequency record fuzzily matches to 91.1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; frequency ; 91.1 } } ; 2 }, interpretation: select the rows whose record label record fuzzily matches to for us . there is only one such row in the table . the single record of this unqiue row is moped girls .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; record label ; for us } } ; eq { hop { filter_eq { all_rows ; record label ; for us } ; single } ; moped girls } }, interpretation: select the rows whose record label record fuzzily matches to for us . there is only one such row in the table . the single record of this unqiue row is moped girls .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; record label ; for us } } ; eq { hop { filter_eq { all_rows ; record label ; for us } ; single } ; moped girls } }, interpretation: select the rows whose team record fuzzily matches to ducati . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; ducati } } ; 3 }, interpretation: select the rows whose team record fuzzily matches to ducati . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; ducati } } ; 3 }, interpretation: select the row whose votes record of all rows is 1st minimum . the party record of this row is country party .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; votes ; 1 } ; party } ; country party }, interpretation: select the row whose votes record of all rows is 1st minimum . the party record of this row is country party .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; votes ; 1 } ; party } ; country party }, interpretation: the sum of the points record of all rows is 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 16 }, interpretation: the sum of the points record of all rows is 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 16 }, interpretation: select the rows whose enrollment record is greater than 350 . for the ihsaa football class records of these rows , most of them fuzzily match to a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_greater { all_rows ; enrollment ; 350 } ; ihsaa football class ; a }, interpretation: select the rows whose enrollment record is greater than 350 . for the ihsaa football class records of these rows , most of them fuzzily match to a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_greater { all_rows ; enrollment ; 350 } ; ihsaa football class ; a }, interpretation: the sum of the crowd record of all rows is 105500 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 105500 }, interpretation: the sum of the crowd record of all rows is 105500 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 105500 }, interpretation: select the rows whose tv station record fuzzily matches to fuji tv . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv station ; fuji tv } } ; 5 }, interpretation: select the rows whose tv station record fuzzily matches to fuji tv . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv station ; fuji tv } } ; 5 }, interpretation: select the rows whose club record fuzzily matches to swansea uplands rfc . take the tries for record of this row . select the rows whose club record fuzzily matches to trebanos rfc . take the tries for record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; swansea uplands rfc } ; tries for } ; hop { filter_eq { all_rows ; club ; trebanos rfc } ; tries for } }, interpretation: select the rows whose club record fuzzily matches to swansea uplands rfc . take the tries for record of this row . select the rows whose club record fuzzily matches to trebanos rfc . take the tries for record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; swansea uplands rfc } ; tries for } ; hop { filter_eq { all_rows ; club ; trebanos rfc } ; tries for } }, interpretation: select the rows whose party record fuzzily matches to republican . the average of the candidates record of these rows is 50.12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; party ; republican } ; candidates } ; 50.12 }, interpretation: select the rows whose party record fuzzily matches to republican . the average of the candidates record of these rows is 50.12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; party ; republican } ; candidates } ; 50.12 }, interpretation: select the row whose laps record of all rows is minimum . the co - drivers record of this row is gianmaria bruni pierre kaffer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; laps } ; co - drivers } ; gianmaria bruni pierre kaffer }, interpretation: select the row whose laps record of all rows is minimum . the co - drivers record of this row is gianmaria bruni pierre kaffer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; laps } ; co - drivers } ; gianmaria bruni pierre kaffer }, interpretation: select the rows whose circuit record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; circuit } } ; 5 }, interpretation: select the rows whose circuit record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; circuit } } ; 5 }, interpretation: select the row whose date record of all rows is minimum . the circuit record of this row is calder park raceway .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; circuit } ; calder park raceway }, interpretation: select the row whose date record of all rows is minimum . the circuit record of this row is calder park raceway .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; circuit } ; calder park raceway }, interpretation: select the rows whose floors record is equal to 1 . there is only one such row in the table . the name record of this unqiue row is saint michael 's church .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; floors ; 1 } } ; eq { hop { filter_eq { all_rows ; floors ; 1 } ; name } ; saint michael 's church } }, interpretation: select the rows whose floors record is equal to 1 . there is only one such row in the table . the name record of this unqiue row is saint michael 's church .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; floors ; 1 } } ; eq { hop { filter_eq { all_rows ; floors ; 1 } ; name } ; saint michael 's church } }, interpretation: the 2nd minimum date record of all rows is december 21 , 1986 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 2 } ; december 21 , 1986 }, interpretation: the 2nd minimum date record of all rows is december 21 , 1986 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 2 } ; december 21 , 1986 }, interpretation: select the row whose frequency mhz record of all rows is 3rd maximum . the erp kw record of this row is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency mhz ; 3 } ; erp kw } ; 3 }, interpretation: select the row whose frequency mhz record of all rows is 3rd maximum . the erp kw record of this row is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency mhz ; 3 } ; erp kw } ; 3 }, interpretation: select the rows whose runner - up record fuzzily matches to dynamo moscow . take the season record of this row . select the rows whose runner - up record fuzzily matches to lokomotiv moscow . take the season record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; runner - up ; dynamo moscow } ; season } ; hop { filter_eq { all_rows ; runner - up ; lokomotiv moscow } ; season } }, interpretation: select the rows whose runner - up record fuzzily matches to dynamo moscow . take the season record of this row . select the rows whose runner - up record fuzzily matches to lokomotiv moscow . take the season record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; runner - up ; dynamo moscow } ; season } ; hop { filter_eq { all_rows ; runner - up ; lokomotiv moscow } ; season } }, interpretation: select the row whose distance record of all rows is minimum . the city 1 record of this row is s\u00e3o paulo . the city 2 record of this row is rio de janeiro .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmin { all_rows ; distance } ; city 1 } ; s\u00e3o paulo } ; eq { hop { argmin { all_rows ; distance } ; city 2 } ; rio de janeiro } }, interpretation: select the row whose distance record of all rows is minimum . the city 1 record of this row is s\u00e3o paulo . the city 2 record of this row is rio de janeiro .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmin { all_rows ; distance } ; city 1 } ; s\u00e3o paulo } ; eq { hop { argmin { all_rows ; distance } ; city 2 } ; rio de janeiro } }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: select the rows whose goals for record is greater than or equal to 50 . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; goals for ; 50 } } ; 7 }, interpretation: select the rows whose goals for record is greater than or equal to 50 . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; goals for ; 50 } } ; 7 }, interpretation: for the goals records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; goals ; 0 }, interpretation: for the goals records of all rows , all of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; goals ; 0 }, interpretation: select the rows whose capacity record is less than 10000 . for the 201112 season records of these rows , most of them fuzzily match to divisione b .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_less { all_rows ; capacity ; 10000 } ; 201112 season ; divisione b }, interpretation: select the rows whose capacity record is less than 10000 . for the 201112 season records of these rows , most of them fuzzily match to divisione b .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_less { all_rows ; capacity ; 10000 } ; 201112 season ; divisione b }, interpretation: for the tv records of all rows , most of them fuzzily match to nbc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tv ; nbc }, interpretation: for the tv records of all rows , most of them fuzzily match to nbc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tv ; nbc }, interpretation: the 16th minimum date record of all rows is december 20 , 1981 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 16 } ; december 20 , 1981 }, interpretation: the 16th minimum date record of all rows is december 20 , 1981 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 16 } ; december 20 , 1981 }, interpretation: select the row whose time record of all rows is 2nd maximum . the wrestler record of this row is chris masters .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; time ; 2 } ; wrestler } ; chris masters }, interpretation: select the row whose time record of all rows is 2nd maximum . the wrestler record of this row is chris masters .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; time ; 2 } ; wrestler } ; chris masters }, interpretation: select the rows whose club record fuzzily matches to glais rfc . take the lost record of this row . select the rows whose club record fuzzily matches to tycroes rfc . take the lost record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; glais rfc } ; lost } ; hop { filter_eq { all_rows ; club ; tycroes rfc } ; lost } }, interpretation: select the rows whose club record fuzzily matches to glais rfc . take the lost record of this row . select the rows whose club record fuzzily matches to tycroes rfc . take the lost record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; glais rfc } ; lost } ; hop { filter_eq { all_rows ; club ; tycroes rfc } ; lost } }, interpretation: select the row whose tonnage record of all rows is 2nd maximum . the name record of this row is ocean rover .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; tonnage ; 2 } ; name } ; ocean rover }, interpretation: select the row whose tonnage record of all rows is 2nd maximum . the name record of this row is ocean rover .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; tonnage ; 2 } ; name } ; ocean rover }, interpretation: select the rows whose type record fuzzily matches to nursery . there is only one such row in the table . the name record of this unqiue row is heath lane .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; type ; nursery } } ; eq { hop { filter_eq { all_rows ; type ; nursery } ; name } ; heath lane } }, interpretation: select the rows whose type record fuzzily matches to nursery . there is only one such row in the table . the name record of this unqiue row is heath lane .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; type ; nursery } } ; eq { hop { filter_eq { all_rows ; type ; nursery } ; name } ; heath lane } }, interpretation: select the row whose floors record of all rows is 2nd maximum . the name record of this row is aul tower .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; floors ; 2 } ; name } ; aul tower }, interpretation: select the row whose floors record of all rows is 2nd maximum . the name record of this row is aul tower .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; floors ; 2 } ; name } ; aul tower }, interpretation: select the row whose size record of all rows is maximum . the school record of this row is mitchell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; size } ; school } ; mitchell }, interpretation: select the row whose size record of all rows is maximum . the school record of this row is mitchell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; size } ; school } ; mitchell }, interpretation: select the rows whose opponent record fuzzily matches to arizona . among these rows , select the rows whose result record fuzzily matches to ot . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { filter_eq { all_rows ; opponent ; arizona } ; result ; ot } }, interpretation: select the rows whose opponent record fuzzily matches to arizona . among these rows , select the rows whose result record fuzzily matches to ot . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { filter_eq { all_rows ; opponent ; arizona } ; result ; ot } }, interpretation: select the rows whose pole position record fuzzily matches to ayrton senna . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole position ; ayrton senna } } ; 8 }, interpretation: select the rows whose pole position record fuzzily matches to ayrton senna . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole position ; ayrton senna } } ; 8 }, interpretation: select the rows whose months in malayalam era record fuzzily matches to chingam . take the gregorian calendar record of this row . select the rows whose months in malayalam era record fuzzily matches to tulam . take the gregorian calendar record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; months in malayalam era ; chingam } ; gregorian calendar } ; hop { filter_eq { all_rows ; months in malayalam era ; tulam } ; gregorian calendar } }, interpretation: select the rows whose months in malayalam era record fuzzily matches to chingam . take the gregorian calendar record of this row . select the rows whose months in malayalam era record fuzzily matches to tulam . take the gregorian calendar record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; months in malayalam era ; chingam } ; gregorian calendar } ; hop { filter_eq { all_rows ; months in malayalam era ; tulam } ; gregorian calendar } }, interpretation: for the us viewers ( millions ) records of all rows , most of them are greater than or equal to 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; us viewers ( millions ) ; 15 }, interpretation: for the us viewers ( millions ) records of all rows , most of them are greater than or equal to 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; us viewers ( millions ) ; 15 }, interpretation: select the row whose crowd record of all rows is 1st maximum . the away team record of this row is st kilda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; away team } ; st kilda }, interpretation: select the row whose crowd record of all rows is 1st maximum . the away team record of this row is st kilda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; away team } ; st kilda }, interpretation: select the rows whose home team record fuzzily matches to collingwood . take the crowd record of this row . select the rows whose home team record fuzzily matches to carlton . take the crowd record of this row . the first record is greater than the second record . the away team record of the first row is south melbourne . the away team record of the second row is geelong .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; home team ; collingwood } ; crowd } ; hop { filter_eq { all_rows ; home team ; carlton } ; crowd } } ; and { eq { hop { filter_eq { all_rows ; home team ; collingwood } ; away team } ; south melbourne } ; eq { hop { filter_eq { all_rows ; home team ; carlton } ; away team } ; geelong } } }, interpretation: select the rows whose home team record fuzzily matches to collingwood . take the crowd record of this row . select the rows whose home team record fuzzily matches to carlton . take the crowd record of this row . the first record is greater than the second record . the away team record of the first row is south melbourne . the away team record of the second row is geelong .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; home team ; collingwood } ; crowd } ; hop { filter_eq { all_rows ; home team ; carlton } ; crowd } } ; and { eq { hop { filter_eq { all_rows ; home team ; collingwood } ; away team } ; south melbourne } ; eq { hop { filter_eq { all_rows ; home team ; carlton } ; away team } ; geelong } } }, interpretation: the average of the deaths record of all rows is 13.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; deaths } ; 13.4 }, interpretation: the average of the deaths record of all rows is 13.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; deaths } ; 13.4 }, interpretation: select the rows whose race record fuzzily matches to super g . there is only one such row in the table . the season record of this unqiue row is 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; race ; super g } } ; eq { hop { filter_eq { all_rows ; race ; super g } ; season } ; 2009 } }, interpretation: select the rows whose race record fuzzily matches to super g . there is only one such row in the table . the season record of this unqiue row is 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; race ; super g } } ; eq { hop { filter_eq { all_rows ; race ; super g } ; season } ; 2009 } }, interpretation: select the rows whose top 5 record is not equal to 0 . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; top 5 ; 0 } } ; 10 }, interpretation: select the rows whose top 5 record is not equal to 0 . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; top 5 ; 0 } } ; 10 }, interpretation: select the rows whose city of license record fuzzily matches to san antonio . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; city of license ; san antonio } } ; 4 }, interpretation: select the rows whose city of license record fuzzily matches to san antonio . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; city of license ; san antonio } } ; 4 }, interpretation: select the rows whose withdrawn record is equal to 1951 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; withdrawn ; 1951 } } ; 5 }, interpretation: select the rows whose withdrawn record is equal to 1951 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; withdrawn ; 1951 } } ; 5 }, interpretation: select the rows whose voivodeship after 1569 record fuzzily matches to samogitian eldership . take the year established record of this row . select the rows whose voivodeship after 1569 record fuzzily matches to trakai voivodeship . take the year established record of this row . the second record is 2 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; voivodeship after 1569 ; samogitian eldership } ; year established } ; hop { filter_eq { all_rows ; voivodeship after 1569 ; trakai voivodeship } ; year established } } ; -2 years }, interpretation: select the rows whose voivodeship after 1569 record fuzzily matches to samogitian eldership . take the year established record of this row . select the rows whose voivodeship after 1569 record fuzzily matches to trakai voivodeship . take the year established record of this row . the second record is 2 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; voivodeship after 1569 ; samogitian eldership } ; year established } ; hop { filter_eq { all_rows ; voivodeship after 1569 ; trakai voivodeship } ; year established } } ; -2 years }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: select the rows whose mascot record fuzzily matches to tigers . there is only one such row in the table . the school record of this unqiue row is yorktown .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; mascot ; tigers } } ; eq { hop { filter_eq { all_rows ; mascot ; tigers } ; school } ; yorktown } }, interpretation: select the rows whose mascot record fuzzily matches to tigers . there is only one such row in the table . the school record of this unqiue row is yorktown .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; mascot ; tigers } } ; eq { hop { filter_eq { all_rows ; mascot ; tigers } ; school } ; yorktown } }, interpretation: for the high points records of all rows , most of them fuzzily match to paul westphal .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; paul westphal }, interpretation: for the high points records of all rows , most of them fuzzily match to paul westphal .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; paul westphal }, interpretation: for the yvert records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; yvert ; 0 }, interpretation: for the yvert records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; yvert ; 0 }, interpretation: for the date records of all rows , most of them fuzzily match to june .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; june }, interpretation: for the date records of all rows , most of them fuzzily match to june .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; june }, interpretation: select the rows whose certification record fuzzily matches to 2x platinum . there is only one such row in the table . the album record of this unqiue row is my love : essential collection .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; certification ; 2x platinum } } ; eq { hop { filter_eq { all_rows ; certification ; 2x platinum } ; album } ; my love : essential collection } }, interpretation: select the rows whose certification record fuzzily matches to 2x platinum . there is only one such row in the table . the album record of this unqiue row is my love : essential collection .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; certification ; 2x platinum } } ; eq { hop { filter_eq { all_rows ; certification ; 2x platinum } ; album } ; my love : essential collection } }, interpretation: select the rows whose date record fuzzily matches to february . there is only one such row in the table . the event record of this unqiue row is indianapolis boat , sport & travel show .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; february } } ; eq { hop { filter_eq { all_rows ; date ; february } ; event } ; indianapolis boat , sport & travel show } }, interpretation: select the rows whose date record fuzzily matches to february . there is only one such row in the table . the event record of this unqiue row is indianapolis boat , sport & travel show .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; february } } ; eq { hop { filter_eq { all_rows ; date ; february } ; event } ; indianapolis boat , sport & travel show } }, interpretation: for the episodes records of all rows , most of them are equal to 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; episodes ; 11 }, interpretation: for the episodes records of all rows , most of them are equal to 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; episodes ; 11 }, interpretation: select the row whose average record of all rows is 2nd maximum . the team record of this row is river plate .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; average ; 2 } ; team } ; river plate }, interpretation: select the row whose average record of all rows is 2nd maximum . the team record of this row is river plate .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; average ; 2 } ; team } ; river plate }, interpretation: select the rows whose time / retired record fuzzily matches to clutch . for the laps records of these rows , most of them are greater than 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; time / retired ; clutch } ; laps ; 30 }, interpretation: select the rows whose time / retired record fuzzily matches to clutch . for the laps records of these rows , most of them are greater than 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; time / retired ; clutch } ; laps ; 30 }, interpretation: select the rows whose venue record fuzzily matches to brunswick street oval . there is only one such row in the table . the home team record of this unqiue row is fitzroy . the away team record of this unqiue row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; brunswick street oval } } ; and { eq { hop { filter_eq { all_rows ; venue ; brunswick street oval } ; home team } ; fitzroy } ; eq { hop { filter_eq { all_rows ; venue ; brunswick street oval } ; away team } ; collingwood } } }, interpretation: select the rows whose venue record fuzzily matches to brunswick street oval . there is only one such row in the table . the home team record of this unqiue row is fitzroy . the away team record of this unqiue row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; brunswick street oval } } ; and { eq { hop { filter_eq { all_rows ; venue ; brunswick street oval } ; home team } ; fitzroy } ; eq { hop { filter_eq { all_rows ; venue ; brunswick street oval } ; away team } ; collingwood } } }, interpretation: select the rows whose october 20 , 2008 record fuzzily matches to 2010 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; october 20 , 2008 ; 2010 } } ; 6 }, interpretation: select the rows whose october 20 , 2008 record fuzzily matches to 2010 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; october 20 , 2008 ; 2010 } } ; 6 }, interpretation: for the high assists records of all rows , most of them fuzzily match to imari sawyer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; imari sawyer }, interpretation: for the high assists records of all rows , most of them fuzzily match to imari sawyer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; imari sawyer }, interpretation: for the result records of all rows , most of them fuzzily match to 1st .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; 1st }, interpretation: for the result records of all rows , most of them fuzzily match to 1st .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; 1st }, interpretation: select the row whose weight ( lbs ) record of all rows is maximum . the name record of this row is joseph barksdale .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; weight ( lbs ) } ; name } ; joseph barksdale }, interpretation: select the row whose weight ( lbs ) record of all rows is maximum . the name record of this row is joseph barksdale .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; weight ( lbs ) } ; name } ; joseph barksdale }, interpretation: for the manner of departure records of all rows , most of them fuzzily match to sacked .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manner of departure ; sacked }, interpretation: for the manner of departure records of all rows , most of them fuzzily match to sacked .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manner of departure ; sacked }, interpretation: select the rows whose opposition record fuzzily matches to pune warriors india . take the win % record of this row . select the rows whose opposition record fuzzily matches to kochi tuskers kerala . take the win % record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposition ; pune warriors india } ; win % } ; hop { filter_eq { all_rows ; opposition ; kochi tuskers kerala } ; win % } }, interpretation: select the rows whose opposition record fuzzily matches to pune warriors india . take the win % record of this row . select the rows whose opposition record fuzzily matches to kochi tuskers kerala . take the win % record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposition ; pune warriors india } ; win % } ; hop { filter_eq { all_rows ; opposition ; kochi tuskers kerala } ; win % } }, interpretation: select the rows whose silver record is greater than 0 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; silver ; 0 } } ; 5 }, interpretation: select the rows whose silver record is greater than 0 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; silver ; 0 } } ; 5 }, interpretation: select the rows whose home team score record is greater than or equal to 11 . for the crowd records of these rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_greater_eq { all_rows ; home team score ; 11 } ; crowd ; 10000 }, interpretation: select the rows whose home team score record is greater than or equal to 11 . for the crowd records of these rows , most of them are greater than 10000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_greater_eq { all_rows ; home team score ; 11 } ; crowd ; 10000 }, interpretation: the sum of the population record of all rows is 22,500 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population } ; 22,500 }, interpretation: the sum of the population record of all rows is 22,500 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population } ; 22,500 }, interpretation: select the rows whose mens singles record fuzzily matches to chen hong . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; mens singles ; chen hong } } ; 2 }, interpretation: select the rows whose mens singles record fuzzily matches to chen hong . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; mens singles ; chen hong } } ; 2 }, interpretation: select the row whose number of seasons in top division record of all rows is 3rd maximum . the club record of this row is rijeka a , b .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; number of seasons in top division ; 3 } ; club } ; rijeka a , b }, interpretation: select the row whose number of seasons in top division record of all rows is 3rd maximum . the club record of this row is rijeka a , b .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; number of seasons in top division ; 3 } ; club } ; rijeka a , b }, interpretation: select the row whose candidates record of all rows is maximum . the district record of this row is georgia 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; candidates } ; district } ; georgia 1 }, interpretation: select the row whose candidates record of all rows is maximum . the district record of this row is georgia 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; candidates } ; district } ; georgia 1 }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is st kilda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; st kilda }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is st kilda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; st kilda }, interpretation: the average of the number of deputies record of all rows is 114 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of deputies } ; 114 }, interpretation: the average of the number of deputies record of all rows is 114 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of deputies } ; 114 }, interpretation: select the rows whose country record fuzzily matches to fra . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; fra } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to fra . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; fra } } ; 3 }, interpretation: select the row whose attendance record of all rows is maximum . the week record of this row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; week } ; 5 }, interpretation: select the row whose attendance record of all rows is maximum . the week record of this row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; week } ; 5 }, interpretation: select the row whose top 10 record of all rows is maximum . the year record of this row is 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; top 10 } ; year } ; 2009 }, interpretation: select the row whose top 10 record of all rows is maximum . the year record of this row is 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; top 10 } ; year } ; 2009 }, interpretation: the average of the attendance record of all rows is 16325 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16325 }, interpretation: the average of the attendance record of all rows is 16325 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16325 }, interpretation: select the rows whose screens record is greater than 1000 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; screens ; 1000 } } ; 5 }, interpretation: select the rows whose screens record is greater than 1000 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; screens ; 1000 } } ; 5 }, interpretation: select the rows whose nation record fuzzily matches to south korea . take the bronze record of this row . select the rows whose nation record fuzzily matches to estonia . take the bronze record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; south korea } ; bronze } ; hop { filter_eq { all_rows ; nation ; estonia } ; bronze } }, interpretation: select the rows whose nation record fuzzily matches to south korea . take the bronze record of this row . select the rows whose nation record fuzzily matches to estonia . take the bronze record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; south korea } ; bronze } ; hop { filter_eq { all_rows ; nation ; estonia } ; bronze } }, interpretation: the sum of the attendance record of all rows is 779652 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 779652 }, interpretation: the sum of the attendance record of all rows is 779652 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 779652 }, interpretation: the average of the vertical record of all rows is 720 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; vertical } ; 720 }, interpretation: the average of the vertical record of all rows is 720 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; vertical } ; 720 }, interpretation: select the rows whose rr romaja record fuzzily matches to gangwon . take the area record of this row . select the rows whose rr romaja record fuzzily matches to jeju . take the area record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rr romaja ; gangwon } ; area } ; hop { filter_eq { all_rows ; rr romaja ; jeju } ; area } }, interpretation: select the rows whose rr romaja record fuzzily matches to gangwon . take the area record of this row . select the rows whose rr romaja record fuzzily matches to jeju . take the area record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rr romaja ; gangwon } ; area } ; hop { filter_eq { all_rows ; rr romaja ; jeju } ; area } }, interpretation: select the rows whose surface record fuzzily matches to clay . the sum of the score record of these rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; surface ; clay } ; score } ; 7 }, interpretation: select the rows whose surface record fuzzily matches to clay . the sum of the score record of these rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; surface ; clay } ; score } ; 7 }, interpretation: select the row whose size record of all rows is 2nd maximum . the campus record of this row is kendall campus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; size ; 2 } ; campus } ; kendall campus }, interpretation: select the row whose size record of all rows is 2nd maximum . the campus record of this row is kendall campus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; size ; 2 } ; campus } ; kendall campus }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 5 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 5 }, interpretation: the maximum money raised , 3q record of all rows is 11624255 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; money raised , 3q } ; 11624255 }, interpretation: the maximum money raised , 3q record of all rows is 11624255 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; money raised , 3q } ; 11624255 }, interpretation: for the team records of all rows , most of them fuzzily match to rothmans honda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; rothmans honda }, interpretation: for the team records of all rows , most of them fuzzily match to rothmans honda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; rothmans honda }, interpretation: select the row whose date record of all rows is maximum . the number & name record of this row is no 07005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; number & name } ; no 07005 }, interpretation: select the row whose date record of all rows is maximum . the number & name record of this row is no 07005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; number & name } ; no 07005 }, interpretation: select the row whose time record of all rows is minimum . the nationality record of this row is australia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; nationality } ; australia }, interpretation: select the row whose time record of all rows is minimum . the nationality record of this row is australia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; nationality } ; australia }, interpretation: for the tournament records of all rows , most of them fuzzily match to 25000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tournament ; 25000 }, interpretation: for the tournament records of all rows , most of them fuzzily match to 25000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tournament ; 25000 }, interpretation: select the rows whose test record fuzzily matches to math . among these rows , select the rows whose number of students record is greater than 100000 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_greater { filter_eq { all_rows ; test ; math } ; number of students ; 100000 } }, interpretation: select the rows whose test record fuzzily matches to math . among these rows , select the rows whose number of students record is greater than 100000 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_greater { filter_eq { all_rows ; test ; math } ; number of students ; 100000 } }, interpretation: select the rows whose division record fuzzily matches to southeast . the average of the pts record of these rows is 75.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; division ; southeast } ; pts } ; 75.5 }, interpretation: select the rows whose division record fuzzily matches to southeast . the average of the pts record of these rows is 75.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; division ; southeast } ; pts } ; 75.5 }, interpretation: select the rows whose school record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; school } } ; 6 }, interpretation: select the rows whose school record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; school } } ; 6 }, interpretation: select the rows whose format record fuzzily matches to cd . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; cd } } ; 7 }, interpretation: select the rows whose format record fuzzily matches to cd . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; cd } } ; 7 }, interpretation: select the row whose average record of all rows is 2nd maximum . the team record of this row is boca juniors .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; average ; 2 } ; team } ; boca juniors }, interpretation: select the row whose average record of all rows is 2nd maximum . the team record of this row is boca juniors .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; average ; 2 } ; team } ; boca juniors }, interpretation: select the rows whose date record fuzzily matches to may 2008 . for the original artist records of these rows , all of them fuzzily match to beatles .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; may 2008 } ; original artist ; beatles }, interpretation: select the rows whose date record fuzzily matches to may 2008 . for the original artist records of these rows , all of them fuzzily match to beatles .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; may 2008 } ; original artist ; beatles }, interpretation: select the rows whose year record fuzzily matches to 2009 . take the finish position record of this row . select the rows whose year record fuzzily matches to 2008 . take the finish position record of this row . the first record is less than the second record . the finish position record of the first row is 31st . the finish position record of the second row is 33rd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; year ; 2009 } ; finish position } ; hop { filter_eq { all_rows ; year ; 2008 } ; finish position } } ; and { eq { hop { filter_eq { all_rows ; year ; 2009 } ; finish position } ; 31st } ; eq { hop { filter_eq { all_rows ; year ; 2008 } ; finish position } ; 33rd } } }, interpretation: select the rows whose year record fuzzily matches to 2009 . take the finish position record of this row . select the rows whose year record fuzzily matches to 2008 . take the finish position record of this row . the first record is less than the second record . the finish position record of the first row is 31st . the finish position record of the second row is 33rd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; year ; 2009 } ; finish position } ; hop { filter_eq { all_rows ; year ; 2008 } ; finish position } } ; and { eq { hop { filter_eq { all_rows ; year ; 2009 } ; finish position } ; 31st } ; eq { hop { filter_eq { all_rows ; year ; 2008 } ; finish position } ; 33rd } } }, interpretation: select the rows whose record label record fuzzily matches to wild world . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; record label ; wild world } } ; 3 }, interpretation: select the rows whose record label record fuzzily matches to wild world . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; record label ; wild world } } ; 3 }, interpretation: the average of the total record of all rows is 15.419 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 15.419 }, interpretation: the average of the total record of all rows is 15.419 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 15.419 }, interpretation: select the rows whose role record fuzzily matches to police officer lung . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; role ; police officer lung } } ; 5 }, interpretation: select the rows whose role record fuzzily matches to police officer lung . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; role ; police officer lung } } ; 5 }, interpretation: select the rows whose wins record is equal to 18 . there is only one such row in the table . the driver record of this unqiue row is dani\u00ebl willemsen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 18 } } ; eq { hop { filter_eq { all_rows ; wins ; 18 } ; driver } ; dani\u00ebl willemsen } }, interpretation: select the rows whose wins record is equal to 18 . there is only one such row in the table . the driver record of this unqiue row is dani\u00ebl willemsen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 18 } } ; eq { hop { filter_eq { all_rows ; wins ; 18 } ; driver } ; dani\u00ebl willemsen } }, interpretation: for the surface records of all rows , all of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; surface ; clay }, interpretation: for the suites records of all rows , most of them are greater than or equal to 125 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; suites ; 125 }, interpretation: for the suites records of all rows , most of them are greater than or equal to 125 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; suites ; 125 }, interpretation: select the rows whose silver record is equal to 6 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; silver ; 6 } } ; 2 }, interpretation: select the rows whose silver record is equal to 6 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; silver ; 6 } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to l . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; l } } ; 8 }, interpretation: select the rows whose result record fuzzily matches to l . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; l } } ; 8 }, interpretation: the average of the crowd record of all rows is 20188 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 20188 }, interpretation: the average of the crowd record of all rows is 20188 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 20188 }, interpretation: select the rows whose english title record fuzzily matches to lives of omission . take the peak record of this row . select the rows whose english title record fuzzily matches to the rippling blossom . take the peak record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; lives of omission } ; peak } ; hop { filter_eq { all_rows ; english title ; the rippling blossom } ; peak } }, interpretation: select the rows whose english title record fuzzily matches to lives of omission . take the peak record of this row . select the rows whose english title record fuzzily matches to the rippling blossom . take the peak record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; lives of omission } ; peak } ; hop { filter_eq { all_rows ; english title ; the rippling blossom } ; peak } }, interpretation: select the rows whose population ( 2010 census ) record is less than 5000 . there is only one such row in the table . the district record of this unqiue row is intramuros .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; population ( 2010 census ) ; 5000 } } ; eq { hop { filter_less { all_rows ; population ( 2010 census ) ; 5000 } ; district } ; intramuros } }, interpretation: select the rows whose population ( 2010 census ) record is less than 5000 . there is only one such row in the table . the district record of this unqiue row is intramuros .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; population ( 2010 census ) ; 5000 } } ; eq { hop { filter_less { all_rows ; population ( 2010 census ) ; 5000 } ; district } ; intramuros } }, interpretation: select the rows whose year record fuzzily matches to 2000 . take the goals scored record of this row . select the rows whose year record fuzzily matches to 1999 . take the goals scored record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2000 } ; goals scored } ; hop { filter_eq { all_rows ; year ; 1999 } ; goals scored } }, interpretation: select the rows whose year record fuzzily matches to 2000 . take the goals scored record of this row . select the rows whose year record fuzzily matches to 1999 . take the goals scored record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2000 } ; goals scored } ; hop { filter_eq { all_rows ; year ; 1999 } ; goals scored } }, interpretation: select the rows whose object type record fuzzily matches to spiral galaxy . among these rows , select the rows whose apparent magnitude record is equal to 13.0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; object type ; spiral galaxy } ; apparent magnitude ; 13.0 } } ; 2 }, interpretation: select the rows whose object type record fuzzily matches to spiral galaxy . among these rows , select the rows whose apparent magnitude record is equal to 13.0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; object type ; spiral galaxy } ; apparent magnitude ; 13.0 } } ; 2 }, interpretation: select the rows whose product record fuzzily matches to grain . take the 2001 record of this row . select the rows whose product record fuzzily matches to timber . take the 2001 record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; product ; grain } ; 2001 } ; hop { filter_eq { all_rows ; product ; timber } ; 2001 } }, interpretation: select the rows whose product record fuzzily matches to grain . take the 2001 record of this row . select the rows whose product record fuzzily matches to timber . take the 2001 record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; product ; grain } ; 2001 } ; hop { filter_eq { all_rows ; product ; timber } ; 2001 } }, interpretation: for the laps led records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps led ; 0 }, interpretation: for the laps led records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps led ; 0 }, interpretation: for the final records of all rows , most of them fuzzily match to did not advance .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; final ; did not advance }, interpretation: for the final records of all rows , most of them fuzzily match to did not advance .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; final ; did not advance }, interpretation: select the rows whose club record fuzzily matches to real murcia . take the wins record of this row . select the rows whose club record fuzzily matches to jerez cd . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; real murcia } ; wins } ; hop { filter_eq { all_rows ; club ; jerez cd } ; wins } }, interpretation: select the rows whose club record fuzzily matches to real murcia . take the wins record of this row . select the rows whose club record fuzzily matches to jerez cd . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; real murcia } ; wins } ; hop { filter_eq { all_rows ; club ; jerez cd } ; wins } }, interpretation: the average of the population served record of all rows is 4038 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population served } ; 4038 }, interpretation: the average of the population served record of all rows is 4038 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population served } ; 4038 }, interpretation: the minimum closed record of all rows is 1983 . the station record of the row with superlative closed record is fairmount avenue .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { min { all_rows ; closed } ; 1983 } ; eq { hop { argmin { all_rows ; closed } ; station } ; fairmount avenue } }, interpretation: the minimum closed record of all rows is 1983 . the station record of the row with superlative closed record is fairmount avenue .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { min { all_rows ; closed } ; 1983 } ; eq { hop { argmin { all_rows ; closed } ; station } ; fairmount avenue } }, interpretation: the average of the enrollment record of all rows is 651.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 651.8 }, interpretation: the average of the enrollment record of all rows is 651.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 651.8 }, interpretation: select the rows whose winning party 2003 record fuzzily matches to liberal democrats . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winning party 2003 ; liberal democrats } } ; 3 }, interpretation: select the rows whose winning party 2003 record fuzzily matches to liberal democrats . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winning party 2003 ; liberal democrats } } ; 3 }, interpretation: select the rows whose bodyweight record is equal to 69.73 . there is only one such row in the table . the name record of this unqiue row is nelly rivera ( dom ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bodyweight ; 69.73 } } ; eq { hop { filter_eq { all_rows ; bodyweight ; 69.73 } ; name } ; nelly rivera ( dom ) } }, interpretation: select the rows whose bodyweight record is equal to 69.73 . there is only one such row in the table . the name record of this unqiue row is nelly rivera ( dom ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bodyweight ; 69.73 } } ; eq { hop { filter_eq { all_rows ; bodyweight ; 69.73 } ; name } ; nelly rivera ( dom ) } }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is mcg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; mcg }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is mcg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; mcg }, interpretation: select the rows whose status record fuzzily matches to millennium trophy match . there is only one such row in the table . the opposing teams record of this unqiue row is ireland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; millennium trophy match } } ; eq { hop { filter_eq { all_rows ; status ; millennium trophy match } ; opposing teams } ; ireland } }, interpretation: select the rows whose status record fuzzily matches to millennium trophy match . there is only one such row in the table . the opposing teams record of this unqiue row is ireland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; millennium trophy match } } ; eq { hop { filter_eq { all_rows ; status ; millennium trophy match } ; opposing teams } ; ireland } }, interpretation: select the rows whose attendance record is greater than 20,000 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; attendance ; 20,000 } } ; 5 }, interpretation: select the rows whose attendance record is greater than 20,000 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; attendance ; 20,000 } } ; 5 }, interpretation: the average of the crowd record of all rows is 12000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 12000 }, interpretation: the average of the crowd record of all rows is 12000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 12000 }, interpretation: select the rows whose studio record fuzzily matches to tristar pictures . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; studio ; tristar pictures } }, interpretation: select the rows whose studio record fuzzily matches to tristar pictures . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; studio ; tristar pictures } }, interpretation: the 1st minimum first elected record of all rows is 1904 . the incumbent record of the row with 1st minimum first elected record is j thomas heflin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; first elected ; 1 } ; 1904 } ; eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; j thomas heflin } }, interpretation: the 1st minimum first elected record of all rows is 1904 . the incumbent record of the row with 1st minimum first elected record is j thomas heflin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; first elected ; 1 } ; 1904 } ; eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; j thomas heflin } }, interpretation: select the rows whose first elected record is equal to 1985 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; first elected ; 1985 } }, interpretation: select the rows whose first elected record is equal to 1985 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; first elected ; 1985 } }, interpretation: select the rows whose goals record is equal to 23 . there is only one such row in the table . the player record of this unqiue row is mehmet y\u0131lmaz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goals ; 23 } } ; eq { hop { filter_eq { all_rows ; goals ; 23 } ; player } ; mehmet y\u0131lmaz } }, interpretation: select the rows whose goals record is equal to 23 . there is only one such row in the table . the player record of this unqiue row is mehmet y\u0131lmaz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goals ; 23 } } ; eq { hop { filter_eq { all_rows ; goals ; 23 } ; player } ; mehmet y\u0131lmaz } }, interpretation: select the rows whose bowling style record fuzzily matches to left arm slow chinaman . there is only one such row in the table . the player record of this unqiue row is michael bevan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bowling style ; left arm slow chinaman } } ; eq { hop { filter_eq { all_rows ; bowling style ; left arm slow chinaman } ; player } ; michael bevan } }, interpretation: select the rows whose bowling style record fuzzily matches to left arm slow chinaman . there is only one such row in the table . the player record of this unqiue row is michael bevan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; bowling style ; left arm slow chinaman } } ; eq { hop { filter_eq { all_rows ; bowling style ; left arm slow chinaman } ; player } ; michael bevan } }, interpretation: select the row whose first elected record of all rows is 4th minimum . the incumbent record of this row is robert aderholt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 4 } ; incumbent } ; robert aderholt }, interpretation: select the row whose first elected record of all rows is 4th minimum . the incumbent record of this row is robert aderholt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 4 } ; incumbent } ; robert aderholt }, interpretation: for the class records of all rows , most of them fuzzily match to 48 kg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; 48 kg }, interpretation: for the class records of all rows , most of them fuzzily match to 48 kg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; 48 kg }, interpretation: for the category records of all rows , all of them fuzzily match to short film 2005 prix uip .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; category ; short film 2005 prix uip }, interpretation: for the category records of all rows , all of them fuzzily match to short film 2005 prix uip .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; category ; short film 2005 prix uip }, interpretation: for the used as or integrated with records of all rows , most of them fuzzily match to software .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; used as or integrated with ; software }, interpretation: for the used as or integrated with records of all rows , most of them fuzzily match to software .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; used as or integrated with ; software }, interpretation: select the rows whose team record fuzzily matches to pk racing . there is only one such row in the table . the name record of this unqiue row is max papis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; pk racing } } ; eq { hop { filter_eq { all_rows ; team ; pk racing } ; name } ; max papis } }, interpretation: select the rows whose team record fuzzily matches to pk racing . there is only one such row in the table . the name record of this unqiue row is max papis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; pk racing } } ; eq { hop { filter_eq { all_rows ; team ; pk racing } ; name } ; max papis } }, interpretation: select the rows whose opponent in the final record fuzzily matches to adriano panatta . there is only one such row in the table . the championship record of this unqiue row is bologna , italy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; adriano panatta } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; adriano panatta } ; championship } ; bologna , italy } }, interpretation: select the rows whose opponent in the final record fuzzily matches to adriano panatta . there is only one such row in the table . the championship record of this unqiue row is bologna , italy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; adriano panatta } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; adriano panatta } ; championship } ; bologna , italy } }, interpretation: select the rows whose area ( km 2 ) record is less than 50 . select the row whose population record of these rows is 1st maximum . the common of record of this row is moncalieri .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_less { all_rows ; area ( km 2 ) ; 50 } ; population ; 1 } ; common of } ; moncalieri }, interpretation: select the rows whose area ( km 2 ) record is less than 50 . select the row whose population record of these rows is 1st maximum . the common of record of this row is moncalieri .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_less { all_rows ; area ( km 2 ) ; 50 } ; population ; 1 } ; common of } ; moncalieri }, interpretation: for the party records of all rows , most of them fuzzily match to democratic - republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic - republican }, interpretation: select the rows whose team 1 record fuzzily matches to elche . take the 2nd leg record of this row . select the rows whose team 1 record fuzzily matches to numancia . take the 2nd leg record of this row . the first record fuzzily matches to the second record . the 2nd leg record of the first row is 0 - 2 . the 2nd leg record of the second row is 0 - 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; team 1 ; elche } ; 2nd leg } ; hop { filter_eq { all_rows ; team 1 ; numancia } ; 2nd leg } } ; and { eq { hop { filter_eq { all_rows ; team 1 ; elche } ; 2nd leg } ; 0 - 2 } ; eq { hop { filter_eq { all_rows ; team 1 ; numancia } ; 2nd leg } ; 0 - 2 } } }, interpretation: select the rows whose team 1 record fuzzily matches to elche . take the 2nd leg record of this row . select the rows whose team 1 record fuzzily matches to numancia . take the 2nd leg record of this row . the first record fuzzily matches to the second record . the 2nd leg record of the first row is 0 - 2 . the 2nd leg record of the second row is 0 - 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; team 1 ; elche } ; 2nd leg } ; hop { filter_eq { all_rows ; team 1 ; numancia } ; 2nd leg } } ; and { eq { hop { filter_eq { all_rows ; team 1 ; elche } ; 2nd leg } ; 0 - 2 } ; eq { hop { filter_eq { all_rows ; team 1 ; numancia } ; 2nd leg } ; 0 - 2 } } }, interpretation: the 2nd minimum date record of all rows is 31 may .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 2 } ; 31 may }, interpretation: the 2nd minimum date record of all rows is 31 may .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 2 } ; 31 may }, interpretation: select the rows whose points record is greater than 20 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 20 } } ; 3 }, interpretation: select the rows whose points record is greater than 20 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 20 } } ; 3 }, interpretation: select the rows whose incumbent record fuzzily matches to frank t bow . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to louis stokes . take the first elected record of this row . the second record is 18 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; frank t bow } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; louis stokes } ; first elected } } ; -18 years }, interpretation: select the rows whose incumbent record fuzzily matches to frank t bow . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to louis stokes . take the first elected record of this row . the second record is 18 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; frank t bow } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; louis stokes } ; first elected } } ; -18 years }, interpretation: select the rows whose height in ft record is less than 6-0 . there is only one such row in the table . the player record of this unqiue row is turner , andre andre turner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; height in ft ; 6-0 } } ; eq { hop { filter_less { all_rows ; height in ft ; 6-0 } ; player } ; turner , andre andre turner } }, interpretation: select the rows whose height in ft record is less than 6-0 . there is only one such row in the table . the player record of this unqiue row is turner , andre andre turner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; height in ft ; 6-0 } } ; eq { hop { filter_less { all_rows ; height in ft ; 6-0 } ; player } ; turner , andre andre turner } }, interpretation: for the site records of all rows , most of them fuzzily match to ames .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; site ; ames }, interpretation: for the site records of all rows , most of them fuzzily match to ames .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; site ; ames }, interpretation: select the rows whose date record fuzzily matches to september 8 , 1986 . take the attendance record of this row . select the rows whose date record fuzzily matches to december 21 , 1986 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; september 8 , 1986 } ; attendance } ; hop { filter_eq { all_rows ; date ; december 21 , 1986 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to september 8 , 1986 . take the attendance record of this row . select the rows whose date record fuzzily matches to december 21 , 1986 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; september 8 , 1986 } ; attendance } ; hop { filter_eq { all_rows ; date ; december 21 , 1986 } ; attendance } }, interpretation: for the owner records of all rows , most of them fuzzily match to greentrains .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; owner ; greentrains }, interpretation: for the owner records of all rows , most of them fuzzily match to greentrains .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; owner ; greentrains }, interpretation: select the rows whose date record fuzzily matches to nov 15 . take the cowboys points record of this row . select the rows whose date record fuzzily matches to nov 8 . take the cowboys points record of this row . the first record is 2 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; nov 15 } ; cowboys points } ; hop { filter_eq { all_rows ; date ; nov 8 } ; cowboys points } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to nov 15 . take the cowboys points record of this row . select the rows whose date record fuzzily matches to nov 8 . take the cowboys points record of this row . the first record is 2 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; nov 15 } ; cowboys points } ; hop { filter_eq { all_rows ; date ; nov 8 } ; cowboys points } } ; 2 }, interpretation: select the rows whose ignition timing record fuzzily matches to 180 - 540 . there is only one such row in the table . the engine record of this unqiue row is i4 ' long bang ' .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; ignition timing ; 180 - 540 } } ; eq { hop { filter_eq { all_rows ; ignition timing ; 180 - 540 } ; engine } ; i4 ' long bang ' } }, interpretation: select the rows whose ignition timing record fuzzily matches to 180 - 540 . there is only one such row in the table . the engine record of this unqiue row is i4 ' long bang ' .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; ignition timing ; 180 - 540 } } ; eq { hop { filter_eq { all_rows ; ignition timing ; 180 - 540 } ; engine } ; i4 ' long bang ' } }, interpretation: select the rows whose owner record fuzzily matches to eternacom . there is only one such row in the table . the frequency record of this unqiue row is 103.5 fm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; owner ; eternacom } } ; eq { hop { filter_eq { all_rows ; owner ; eternacom } ; frequency } ; 103.5 fm } }, interpretation: select the rows whose owner record fuzzily matches to eternacom . there is only one such row in the table . the frequency record of this unqiue row is 103.5 fm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; owner ; eternacom } } ; eq { hop { filter_eq { all_rows ; owner ; eternacom } ; frequency } ; 103.5 fm } }, interpretation: select the rows whose lost record is equal to 0 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lost ; 0 } } ; 5 }, interpretation: select the rows whose lost record is equal to 0 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lost ; 0 } } ; 5 }, interpretation: select the rows whose team record fuzzily matches to detroit . among these rows , select the rows whose high rebounds record fuzzily matches to shaquille o'neal . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; team ; detroit } ; high rebounds ; shaquille o'neal } } ; 3 }, interpretation: select the rows whose team record fuzzily matches to detroit . among these rows , select the rows whose high rebounds record fuzzily matches to shaquille o'neal . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; team ; detroit } ; high rebounds ; shaquille o'neal } } ; 3 }, interpretation: select the rows whose fate record fuzzily matches to wrecked . there is only one such row in the table . the name record of this unqiue row is magnet .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; fate ; wrecked } } ; eq { hop { filter_eq { all_rows ; fate ; wrecked } ; name } ; magnet } }, interpretation: select the rows whose fate record fuzzily matches to wrecked . there is only one such row in the table . the name record of this unqiue row is magnet .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; fate ; wrecked } } ; eq { hop { filter_eq { all_rows ; fate ; wrecked } ; name } ; magnet } }, interpretation: select the row whose score record of all rows is maximum . the tie no record of this row is replay . the home team record of this row is southampton . the away team record of this row is sheffield wednesday .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; score } ; tie no } ; replay } ; and { eq { hop { argmax { all_rows ; score } ; home team } ; southampton } ; eq { hop { argmax { all_rows ; score } ; away team } ; sheffield wednesday } } }, interpretation: select the row whose score record of all rows is maximum . the tie no record of this row is replay . the home team record of this row is southampton . the away team record of this row is sheffield wednesday .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; score } ; tie no } ; replay } ; and { eq { hop { argmax { all_rows ; score } ; home team } ; southampton } ; eq { hop { argmax { all_rows ; score } ; away team } ; sheffield wednesday } } }, interpretation: the average of the height record of all rows is 198.77 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height } ; 198.77 }, interpretation: the average of the height record of all rows is 198.77 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height } ; 198.77 }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: select the rows whose position record fuzzily matches to power forward . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; power forward } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to power forward . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; power forward } } ; 3 }, interpretation: select the row whose hosted 4 teams since record of all rows is minimum . the metropolitan area record of this row is detroit , michigan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; hosted 4 teams since } ; metropolitan area } ; detroit , michigan }, interpretation: select the row whose hosted 4 teams since record of all rows is minimum . the metropolitan area record of this row is detroit , michigan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; hosted 4 teams since } ; metropolitan area } ; detroit , michigan }, interpretation: for the party records of all rows , all of them fuzzily match to democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party ; democratic }, interpretation: for the elevator records of all rows , all of them fuzzily match to urban vi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; elevator ; urban vi }, interpretation: for the elevator records of all rows , all of them fuzzily match to urban vi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; elevator ; urban vi }, interpretation: for the score records of all rows , most of them are equal to 70 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; 70 }, interpretation: for the score records of all rows , most of them are equal to 70 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; 70 }, interpretation: select the row whose duration record of all rows is 2nd maximum . the interregnum began record of this row is 20 october 1740 death of charles vi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; duration ; 2 } ; interregnum began } ; 20 october 1740 death of charles vi }, interpretation: select the row whose duration record of all rows is 2nd maximum . the interregnum began record of this row is 20 october 1740 death of charles vi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; duration ; 2 } ; interregnum began } ; 20 october 1740 death of charles vi }, interpretation: select the rows whose school / club team record fuzzily matches to wisconsin . there is only one such row in the table . the player record of this unqiue row is todd nelson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; wisconsin } } ; eq { hop { filter_eq { all_rows ; school / club team ; wisconsin } ; player } ; todd nelson } }, interpretation: select the rows whose school / club team record fuzzily matches to wisconsin . there is only one such row in the table . the player record of this unqiue row is todd nelson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; wisconsin } } ; eq { hop { filter_eq { all_rows ; school / club team ; wisconsin } ; player } ; todd nelson } }, interpretation: select the rows whose rd record is greater than or equal to 4 . select the row whose pick record of these rows is 2nd minimum . the player record of this row is matt butcher .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_greater_eq { all_rows ; rd ; 4 } ; pick ; 2 } ; player } ; matt butcher }, interpretation: select the rows whose rd record is greater than or equal to 4 . select the row whose pick record of these rows is 2nd minimum . the player record of this row is matt butcher .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_greater_eq { all_rows ; rd ; 4 } ; pick ; 2 } ; player } ; matt butcher }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is detroit lions .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; detroit lions }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is detroit lions .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; detroit lions }, interpretation: select the rows whose 1st party record fuzzily matches to liberal . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st party ; liberal } } ; 4 }, interpretation: select the rows whose 1st party record fuzzily matches to liberal . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st party ; liberal } } ; 4 }, interpretation: select the rows whose date record fuzzily matches to 30 august 1952 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 30 august 1952 } } ; 6 }, interpretation: select the rows whose date record fuzzily matches to 30 august 1952 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 30 august 1952 } } ; 6 }, interpretation: select the rows whose rebounds per game record is equal to 3.4 . there is only one such row in the table . the tournament record of this unqiue row is 2011 eurobasket .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; rebounds per game ; 3.4 } } ; eq { hop { filter_eq { all_rows ; rebounds per game ; 3.4 } ; tournament } ; 2011 eurobasket } }, interpretation: select the rows whose rebounds per game record is equal to 3.4 . there is only one such row in the table . the tournament record of this unqiue row is 2011 eurobasket .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; rebounds per game ; 3.4 } } ; eq { hop { filter_eq { all_rows ; rebounds per game ; 3.4 } ; tournament } ; 2011 eurobasket } }, interpretation: select the rows whose tournament record fuzzily matches to baton rouge , us . take the date record of this row . select the rows whose tournament record fuzzily matches to granby , canada . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tournament ; baton rouge , us } ; date } ; hop { filter_eq { all_rows ; tournament ; granby , canada } ; date } }, interpretation: select the rows whose tournament record fuzzily matches to baton rouge , us . take the date record of this row . select the rows whose tournament record fuzzily matches to granby , canada . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tournament ; baton rouge , us } ; date } ; hop { filter_eq { all_rows ; tournament ; granby , canada } ; date } }, interpretation: select the row whose us viewers ( million ) record of all rows is 2nd maximum . the - record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us viewers ( million ) ; 2 } ; - } ; 1 }, interpretation: select the row whose us viewers ( million ) record of all rows is 2nd maximum . the - record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us viewers ( million ) ; 2 } ; - } ; 1 }, interpretation: select the rows whose 2009 record fuzzily matches to sf . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2009 ; sf } } ; eq { hop { filter_eq { all_rows ; 2009 ; sf } ; tournament } ; us open } }, interpretation: select the rows whose 2009 record fuzzily matches to sf . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2009 ; sf } } ; eq { hop { filter_eq { all_rows ; 2009 ; sf } ; tournament } ; us open } }, interpretation: the average of the lost record of all rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 7 }, interpretation: the average of the lost record of all rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 7 }, interpretation: the average of the weight record of all rows is 250.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight } ; 250.5 }, interpretation: the average of the weight record of all rows is 250.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight } ; 250.5 }, interpretation: select the rows whose industry record fuzzily matches to oil and gas . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; industry ; oil and gas } } ; 4 }, interpretation: select the rows whose industry record fuzzily matches to oil and gas . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; industry ; oil and gas } } ; 4 }, interpretation: select the row whose weeks on top record of all rows is 1st maximum . the song record of this row is music .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; weeks on top ; 1 } ; song } ; music }, interpretation: select the row whose weeks on top record of all rows is 1st maximum . the song record of this row is music .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; weeks on top ; 1 } ; song } ; music }, interpretation: select the rows whose theme record fuzzily matches to 1970s dance music . there is only one such row in the table . the week record of this unqiue row is top 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; theme ; 1970s dance music } } ; eq { hop { filter_eq { all_rows ; theme ; 1970s dance music } ; week } ; top 7 } }, interpretation: select the rows whose theme record fuzzily matches to 1970s dance music . there is only one such row in the table . the week record of this unqiue row is top 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; theme ; 1970s dance music } } ; eq { hop { filter_eq { all_rows ; theme ; 1970s dance music } ; week } ; top 7 } }, interpretation: select the rows whose name record fuzzily matches to jack riley . the sum of the games record of these rows is 375 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; name ; jack riley } ; games } ; 375 }, interpretation: select the rows whose name record fuzzily matches to jack riley . the sum of the games record of these rows is 375 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; name ; jack riley } ; games } ; 375 }, interpretation: for the visitor records of all rows , most of them fuzzily match to new jersey devils .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; visitor ; new jersey devils }, interpretation: for the visitor records of all rows , most of them fuzzily match to new jersey devils .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; visitor ; new jersey devils }, interpretation: select the rows whose venue record fuzzily matches to away . the average of the attendance record of these rows is 1,692 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; venue ; away } ; attendance } ; 1,692 }, interpretation: select the rows whose venue record fuzzily matches to away . the average of the attendance record of these rows is 1,692 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; venue ; away } ; attendance } ; 1,692 }, interpretation: select the row whose entry date record of all rows is minimum . the single record of this row is meet me halfway .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; entry date } ; single } ; meet me halfway }, interpretation: select the row whose entry date record of all rows is minimum . the single record of this row is meet me halfway .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; entry date } ; single } ; meet me halfway }, interpretation: select the rows whose top - 5 record is greater than 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; top - 5 ; 0 } } ; 2 }, interpretation: select the rows whose top - 5 record is greater than 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; top - 5 ; 0 } } ; 2 }, interpretation: select the row whose year record of all rows is 2nd maximum . the role record of this row is ahana sharma .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; role } ; ahana sharma }, interpretation: select the row whose year record of all rows is 2nd maximum . the role record of this row is ahana sharma .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; role } ; ahana sharma }, interpretation: select the rows whose result record does not match to re - elected . there is only one such row in the table . the incumbent record of this unqiue row is brooks hays .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; result ; re - elected } } ; eq { hop { filter_not_eq { all_rows ; result ; re - elected } ; incumbent } ; brooks hays } }, interpretation: select the rows whose result record does not match to re - elected . there is only one such row in the table . the incumbent record of this unqiue row is brooks hays .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; result ; re - elected } } ; eq { hop { filter_not_eq { all_rows ; result ; re - elected } ; incumbent } ; brooks hays } }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is niamh kavanagh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; niamh kavanagh }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is niamh kavanagh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; niamh kavanagh }, interpretation: select the rows whose time / retired record fuzzily matches to + 6 laps . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time / retired ; + 6 laps } } ; 3 }, interpretation: select the rows whose time / retired record fuzzily matches to + 6 laps . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time / retired ; + 6 laps } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 2 }, interpretation: select the rows whose team 1 record fuzzily matches to as saint - \u00e9tienne ( d1 ) . take the score record of this row . select the rows whose team 1 record fuzzily matches to girondins de bordeaux ( d1 ) . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 1 ; as saint - \u00e9tienne ( d1 ) } ; score } ; hop { filter_eq { all_rows ; team 1 ; girondins de bordeaux ( d1 ) } ; score } }, interpretation: select the rows whose team 1 record fuzzily matches to as saint - \u00e9tienne ( d1 ) . take the score record of this row . select the rows whose team 1 record fuzzily matches to girondins de bordeaux ( d1 ) . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 1 ; as saint - \u00e9tienne ( d1 ) } ; score } ; hop { filter_eq { all_rows ; team 1 ; girondins de bordeaux ( d1 ) } ; score } }, interpretation: select the rows whose incumbent record fuzzily matches to david d terry . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to ezekiel c gathings . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; david d terry } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; ezekiel c gathings } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to david d terry . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to ezekiel c gathings . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; david d terry } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; ezekiel c gathings } ; first elected } }, interpretation: select the rows whose host record fuzzily matches to jack arute . there is only one such row in the table . the year record of this unqiue row is 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; host ; jack arute } } ; eq { hop { filter_eq { all_rows ; host ; jack arute } ; year } ; 2008 } }, interpretation: select the rows whose host record fuzzily matches to jack arute . there is only one such row in the table . the year record of this unqiue row is 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; host ; jack arute } } ; eq { hop { filter_eq { all_rows ; host ; jack arute } ; year } ; 2008 } }, interpretation: select the rows whose scoring rank record fuzzily matches to n/a . there is only one such row in the table . the year record of this unqiue row is 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; scoring rank ; n/a } } ; eq { hop { filter_eq { all_rows ; scoring rank ; n/a } ; year } ; 2005 } }, interpretation: select the rows whose scoring rank record fuzzily matches to n/a . there is only one such row in the table . the year record of this unqiue row is 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; scoring rank ; n/a } } ; eq { hop { filter_eq { all_rows ; scoring rank ; n/a } ; year } ; 2005 } }, interpretation: select the rows whose hk viewers record is greater than 2.20 million . there is only one such row in the table . the english title record of this unqiue row is beyond the realm of conscience .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; hk viewers ; 2.20 million } } ; eq { hop { filter_greater { all_rows ; hk viewers ; 2.20 million } ; english title } ; beyond the realm of conscience } }, interpretation: select the rows whose hk viewers record is greater than 2.20 million . there is only one such row in the table . the english title record of this unqiue row is beyond the realm of conscience .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; hk viewers ; 2.20 million } } ; eq { hop { filter_greater { all_rows ; hk viewers ; 2.20 million } ; english title } ; beyond the realm of conscience } }, interpretation: select the rows whose station record fuzzily matches to turnham green . take the cancelled record of this row . select the rows whose station record fuzzily matches to crouch end . take the cancelled record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; station ; turnham green } ; cancelled } ; hop { filter_eq { all_rows ; station ; crouch end } ; cancelled } }, interpretation: select the rows whose station record fuzzily matches to turnham green . take the cancelled record of this row . select the rows whose station record fuzzily matches to crouch end . take the cancelled record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; station ; turnham green } ; cancelled } ; hop { filter_eq { all_rows ; station ; crouch end } ; cancelled } }, interpretation: select the rows whose year record is less than or equal to 1974 . among these rows , select the rows whose place record fuzzily matches to cairo . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less_eq { all_rows ; year ; 1974 } ; place ; cairo } } ; 1 }, interpretation: select the rows whose year record is less than or equal to 1974 . among these rows , select the rows whose place record fuzzily matches to cairo . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less_eq { all_rows ; year ; 1974 } ; place ; cairo } } ; 1 }, interpretation: select the rows whose game site record fuzzily matches to the meadowlands . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; game site ; the meadowlands } } ; 8 }, interpretation: select the rows whose game site record fuzzily matches to the meadowlands . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; game site ; the meadowlands } } ; 8 }, interpretation: select the rows whose party record fuzzily matches to democratic . among these rows , select the rows whose first elected record is equal to 1974 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; party ; democratic } ; first elected ; 1974 } } ; 2 }, interpretation: select the rows whose party record fuzzily matches to democratic . among these rows , select the rows whose first elected record is equal to 1974 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; party ; democratic } ; first elected ; 1974 } } ; 2 }, interpretation: select the row whose distance record of all rows is maximum . the stage record of this row is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; distance } ; stage } ; 2 }, interpretation: select the row whose distance record of all rows is maximum . the stage record of this row is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; distance } ; stage } ; 2 }, interpretation: select the rows whose engine record fuzzily matches to judd v8 . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine ; judd v8 } } ; eq { hop { filter_eq { all_rows ; engine ; judd v8 } ; year } ; 1989 } }, interpretation: select the rows whose engine record fuzzily matches to judd v8 . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine ; judd v8 } } ; eq { hop { filter_eq { all_rows ; engine ; judd v8 } ; year } ; 1989 } }, interpretation: select the rows whose location record fuzzily matches to tokyo , japan . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; tokyo , japan } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to tokyo , japan . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; tokyo , japan } } ; 3 }, interpretation: select the row whose debut record of all rows is 3rd maximum . the ring name record of this row is kyokush\u016bh\u014d k\u014dki .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; debut ; 3 } ; ring name } ; kyokush\u016bh\u014d k\u014dki }, interpretation: select the row whose debut record of all rows is 3rd maximum . the ring name record of this row is kyokush\u016bh\u014d k\u014dki .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; debut ; 3 } ; ring name } ; kyokush\u016bh\u014d k\u014dki }, interpretation: select the rows whose rating record is less than 3 . there is only one such row in the table . the ride record of this unqiue row is taxi jam .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; rating ; 3 } } ; eq { hop { filter_less { all_rows ; rating ; 3 } ; ride } ; taxi jam } }, interpretation: select the rows whose rating record is less than 3 . there is only one such row in the table . the ride record of this unqiue row is taxi jam .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; rating ; 3 } } ; eq { hop { filter_less { all_rows ; rating ; 3 } ; ride } ; taxi jam } }, interpretation: select the rows whose earpads record fuzzily matches to comfort pads . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; earpads ; comfort pads } } ; 4 }, interpretation: select the rows whose earpads record fuzzily matches to comfort pads . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; earpads ; comfort pads } } ; 4 }, interpretation: the average of the number of hurricanes record of all rows is 4.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of hurricanes } ; 4.3 }, interpretation: the average of the number of hurricanes record of all rows is 4.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of hurricanes } ; 4.3 }, interpretation: select the rows whose games played record is greater than 100 . there is only one such row in the table . the rival record of this unqiue row is georgia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; games played ; 100 } } ; eq { hop { filter_greater { all_rows ; games played ; 100 } ; rival } ; georgia } }, interpretation: select the rows whose games played record is greater than 100 . there is only one such row in the table . the rival record of this unqiue row is georgia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; games played ; 100 } } ; eq { hop { filter_greater { all_rows ; games played ; 100 } ; rival } ; georgia } }, interpretation: for the competition or tour records of all rows , most of them fuzzily match to friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition or tour ; friendly }, interpretation: for the competition or tour records of all rows , most of them fuzzily match to friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition or tour ; friendly }, interpretation: select the rows whose 50 m split record is less than 29.0 . among these rows , select the rows whose nationality record fuzzily matches to zimbabwe . there is only one such row in the table . the name record of this unqiue row is kirsty coventry .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_less { all_rows ; 50 m split ; 29.0 } ; nationality ; zimbabwe } } ; eq { hop { filter_eq { filter_less { all_rows ; 50 m split ; 29.0 } ; nationality ; zimbabwe } ; name } ; kirsty coventry } }, interpretation: select the rows whose 50 m split record is less than 29.0 . among these rows , select the rows whose nationality record fuzzily matches to zimbabwe . there is only one such row in the table . the name record of this unqiue row is kirsty coventry .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_less { all_rows ; 50 m split ; 29.0 } ; nationality ; zimbabwe } } ; eq { hop { filter_eq { filter_less { all_rows ; 50 m split ; 29.0 } ; nationality ; zimbabwe } ; name } ; kirsty coventry } }, interpretation: select the rows whose year record is equal to 2013 . among these rows , select the rows whose result record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; year ; 2013 } ; result ; won } } ; 3 }, interpretation: select the rows whose year record is equal to 2013 . among these rows , select the rows whose result record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; year ; 2013 } ; result ; won } } ; 3 }, interpretation: for the result records of all rows , most of them fuzzily match to advanced .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; advanced }, interpretation: for the result records of all rows , most of them fuzzily match to advanced .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; advanced }, interpretation: select the rows whose tournament record fuzzily matches to masters tournament . take the top - 5 record of this row . select the rows whose tournament record fuzzily matches to us open . take the top - 5 record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; masters tournament } ; top - 5 } ; hop { filter_eq { all_rows ; tournament ; us open } ; top - 5 } }, interpretation: the average of the crowd record of all rows is 17128 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17128 }, interpretation: the average of the crowd record of all rows is 17128 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17128 }, interpretation: the average of the attendance record of all rows is 43583 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 43583 }, interpretation: the average of the attendance record of all rows is 43583 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 43583 }, interpretation: select the rows whose capacity record is greater than 10000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; capacity ; 10000 } } ; 3 }, interpretation: select the rows whose capacity record is greater than 10000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; capacity ; 10000 } } ; 3 }, interpretation: select the row whose year record of all rows is 2nd maximum . the album title record of this row is realism .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; album title } ; realism }, interpretation: select the row whose year record of all rows is 2nd maximum . the album title record of this row is realism .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; album title } ; realism }, interpretation: select the rows whose result record does not match to retired . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; result ; retired } } ; 4 }, interpretation: select the rows whose result record does not match to retired . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; result ; retired } } ; 4 }, interpretation: select the rows whose date record is greater than april 8 . among these rows , select the rows whose attendance record is greater than 35000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; date ; april 8 } ; attendance ; 35000 } } ; 2 }, interpretation: select the rows whose date record is greater than april 8 . among these rows , select the rows whose attendance record is greater than 35000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; date ; april 8 } ; attendance ; 35000 } } ; 2 }, interpretation: select the row whose frequency record of all rows is maximum . the model number record of this row is turion 64 x2 tl - 68 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency } ; model number } ; turion 64 x2 tl - 68 }, interpretation: select the row whose frequency record of all rows is maximum . the model number record of this row is turion 64 x2 tl - 68 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency } ; model number } ; turion 64 x2 tl - 68 }, interpretation: select the rows whose rider record is arbitrary . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; rider } } ; 8 }, interpretation: select the rows whose rider record is arbitrary . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; rider } } ; 8 }, interpretation: select the rows whose location record fuzzily matches to yankee stadium . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; yankee stadium } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to yankee stadium . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; yankee stadium } } ; 3 }, interpretation: select the rows whose language record fuzzily matches to norwegian . there is only one such row in the table . the song record of this unqiue row is sommer i palma .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; language ; norwegian } } ; eq { hop { filter_eq { all_rows ; language ; norwegian } ; song } ; sommer i palma } }, interpretation: select the rows whose language record fuzzily matches to norwegian . there is only one such row in the table . the song record of this unqiue row is sommer i palma .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; language ; norwegian } } ; eq { hop { filter_eq { all_rows ; language ; norwegian } ; song } ; sommer i palma } }, interpretation: the 1st minimum date record of all rows is may 31 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 1 } ; may 31 }, interpretation: the 1st minimum date record of all rows is may 31 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 1 } ; may 31 }, interpretation: select the rows whose candidate ( party ) record fuzzily matches to joseph estrada ( pmp ) . take the spent per voter ( php ) record of this row . select the rows whose candidate ( party ) record fuzzily matches to jejomar binay ( pdp - laban ) . take the spent per voter ( php ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; candidate ( party ) ; joseph estrada ( pmp ) } ; spent per voter ( php ) } ; hop { filter_eq { all_rows ; candidate ( party ) ; jejomar binay ( pdp - laban ) } ; spent per voter ( php ) } }, interpretation: select the rows whose candidate ( party ) record fuzzily matches to joseph estrada ( pmp ) . take the spent per voter ( php ) record of this row . select the rows whose candidate ( party ) record fuzzily matches to jejomar binay ( pdp - laban ) . take the spent per voter ( php ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; candidate ( party ) ; joseph estrada ( pmp ) } ; spent per voter ( php ) } ; hop { filter_eq { all_rows ; candidate ( party ) ; jejomar binay ( pdp - laban ) } ; spent per voter ( php ) } }, interpretation: the maximum best finish record of all rows is t - 17 . the year record of the row with superlative best finish record is 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; best finish } ; t - 17 } ; eq { hop { argmax { all_rows ; best finish } ; year } ; 2000 } }, interpretation: the maximum best finish record of all rows is t - 17 . the year record of the row with superlative best finish record is 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; best finish } ; t - 17 } ; eq { hop { argmax { all_rows ; best finish } ; year } ; 2000 } }, interpretation: select the rows whose home team score record is less than 15 . among these rows , select the rows whose crowd record is greater than 15000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_less { all_rows ; home team score ; 15 } ; crowd ; 15000 } } ; 3 }, interpretation: select the rows whose home team score record is less than 15 . among these rows , select the rows whose crowd record is greater than 15000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_less { all_rows ; home team score ; 15 } ; crowd ; 15000 } } ; 3 }, interpretation: for the team name records of all rows , most of them fuzzily match to kemba racing .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team name ; kemba racing }, interpretation: for the team name records of all rows , most of them fuzzily match to kemba racing .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team name ; kemba racing }, interpretation: select the rows whose player record fuzzily matches to craig stadler . take the money record of this row . select the rows whose player record fuzzily matches to fred couples . take the money record of this row . the first record is 5863 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; craig stadler } ; money } ; hop { filter_eq { all_rows ; player ; fred couples } ; money } } ; 5863 }, interpretation: select the rows whose player record fuzzily matches to craig stadler . take the money record of this row . select the rows whose player record fuzzily matches to fred couples . take the money record of this row . the first record is 5863 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; craig stadler } ; money } ; hop { filter_eq { all_rows ; player ; fred couples } ; money } } ; 5863 }, interpretation: select the rows whose opponent record fuzzily matches to troy nelson . take the round record of this row . select the rows whose opponent record fuzzily matches to shelton barnes . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; troy nelson } ; round } ; hop { filter_eq { all_rows ; opponent ; shelton barnes } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to troy nelson . take the round record of this row . select the rows whose opponent record fuzzily matches to shelton barnes . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; troy nelson } ; round } ; hop { filter_eq { all_rows ; opponent ; shelton barnes } ; round } }, interpretation: select the row whose fatalities record of all rows is maximum . the date record of this row is 3 march 1974 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; fatalities } ; date } ; 3 march 1974 }, interpretation: select the row whose fatalities record of all rows is maximum . the date record of this row is 3 march 1974 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; fatalities } ; date } ; 3 march 1974 }, interpretation: select the rows whose surface record fuzzily matches to hard . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; hard } } ; 4 }, interpretation: select the rows whose surface record fuzzily matches to hard . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; hard } } ; 4 }, interpretation: select the rows whose position record fuzzily matches to test driver . there is only one such row in the table . the series record of this unqiue row is formula one .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; test driver } } ; eq { hop { filter_eq { all_rows ; position ; test driver } ; series } ; formula one } }, interpretation: select the rows whose position record fuzzily matches to test driver . there is only one such row in the table . the series record of this unqiue row is formula one .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; test driver } } ; eq { hop { filter_eq { all_rows ; position ; test driver } ; series } ; formula one } }, interpretation: the sum of the crowd record of all rows is 129,800 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 129,800 }, interpretation: the sum of the crowd record of all rows is 129,800 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 129,800 }, interpretation: the average of the wins record of all rows is .12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; .12 }, interpretation: the average of the wins record of all rows is .12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; .12 }, interpretation: select the rows whose coach record fuzzily matches to steve yoder . take the record record of this row . select the rows whose coach record fuzzily matches to bill cofield . take the record record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; coach ; steve yoder } ; record } ; hop { filter_eq { all_rows ; coach ; bill cofield } ; record } }, interpretation: select the rows whose coach record fuzzily matches to steve yoder . take the record record of this row . select the rows whose coach record fuzzily matches to bill cofield . take the record record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; coach ; steve yoder } ; record } ; hop { filter_eq { all_rows ; coach ; bill cofield } ; record } }, interpretation: for the wins records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; wins ; 0 }, interpretation: select the row whose games record of all rows is maximum . the season record of this row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; games } ; season } ; 2007 }, interpretation: select the row whose games record of all rows is maximum . the season record of this row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; games } ; season } ; 2007 }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: for the written by records of all rows , all of them fuzzily match to michael hirst .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; written by ; michael hirst }, interpretation: for the written by records of all rows , all of them fuzzily match to michael hirst .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; written by ; michael hirst }, interpretation: select the rows whose gold record is equal to 13 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; 13 } } ; 2 }, interpretation: select the rows whose gold record is equal to 13 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; 13 } } ; 2 }, interpretation: select the rows whose official name record fuzzily matches to saint george . take the population record of this row . select the rows whose official name record fuzzily matches to saint andrews . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; official name ; saint george } ; population } ; hop { filter_eq { all_rows ; official name ; saint andrews } ; population } }, interpretation: select the rows whose official name record fuzzily matches to saint george . take the population record of this row . select the rows whose official name record fuzzily matches to saint andrews . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; official name ; saint george } ; population } ; hop { filter_eq { all_rows ; official name ; saint andrews } ; population } }, interpretation: select the rows whose year record is equal to 1979 . the sum of the result record of these rows is 59 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1979 } ; result } ; 59 }, interpretation: select the rows whose year record is equal to 1979 . the sum of the result record of these rows is 59 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1979 } ; result } ; 59 }, interpretation: select the rows whose assists record is equal to 40 . the number of such rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; assists ; 40 } } ; 13 }, interpretation: select the rows whose assists record is equal to 40 . the number of such rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; assists ; 40 } } ; 13 }, interpretation: select the rows whose pilot record fuzzily matches to and . there is only one such row in the table . the vehicle record of this unqiue row is schempp - hirth nimbus - 4dm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pilot ; and } } ; eq { hop { filter_eq { all_rows ; pilot ; and } ; vehicle } ; schempp - hirth nimbus - 4dm } }, interpretation: select the rows whose pilot record fuzzily matches to and . there is only one such row in the table . the vehicle record of this unqiue row is schempp - hirth nimbus - 4dm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pilot ; and } } ; eq { hop { filter_eq { all_rows ; pilot ; and } ; vehicle } ; schempp - hirth nimbus - 4dm } }, interpretation: select the rows whose opponent record fuzzily matches to los angeles rams . the average of the attendance record of these rows is 68,437 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; opponent ; los angeles rams } ; attendance } ; 68,437 }, interpretation: select the rows whose opponent record fuzzily matches to los angeles rams . the average of the attendance record of these rows is 68,437 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; opponent ; los angeles rams } ; attendance } ; 68,437 }, interpretation: for the entrant records of all rows , most of them fuzzily match to clarke - mordaunt - guthrie .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; entrant ; clarke - mordaunt - guthrie }, interpretation: for the entrant records of all rows , most of them fuzzily match to clarke - mordaunt - guthrie .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; entrant ; clarke - mordaunt - guthrie }, interpretation: select the row whose date record of all rows is 1st minimum . the opponent record of this row is cincinnati bengals .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; opponent } ; cincinnati bengals }, interpretation: select the row whose date record of all rows is 1st minimum . the opponent record of this row is cincinnati bengals .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; opponent } ; cincinnati bengals }, interpretation: for the begin records of all rows , most of them are less than 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; begin ; 2009 }, interpretation: for the begin records of all rows , most of them are less than 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; begin ; 2009 }, interpretation: for the event records of all rows , most of them do not match to team competitions .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; event ; team competitions }, interpretation: for the event records of all rows , most of them do not match to team competitions .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; event ; team competitions }, interpretation: select the rows whose points record is less than 20 . among these rows , select the rows whose draw record is equal to 2 . there is only one such row in the table . the team record of this unqiue row is wanda nowa huta .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_less { all_rows ; points ; 20 } ; draw ; 2 } } ; eq { hop { filter_eq { filter_less { all_rows ; points ; 20 } ; draw ; 2 } ; team } ; wanda nowa huta } }, interpretation: select the rows whose points record is less than 20 . among these rows , select the rows whose draw record is equal to 2 . there is only one such row in the table . the team record of this unqiue row is wanda nowa huta .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_less { all_rows ; points ; 20 } ; draw ; 2 } } ; eq { hop { filter_eq { filter_less { all_rows ; points ; 20 } ; draw ; 2 } ; team } ; wanda nowa huta } }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the opponent record of this row is denver broncos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; opponent } ; denver broncos }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the opponent record of this row is denver broncos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; opponent } ; denver broncos }, interpretation: the average of the attendance record of all rows is 16119 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16119 }, interpretation: the average of the attendance record of all rows is 16119 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16119 }, interpretation: select the rows whose playoffs record fuzzily matches to did not qualify . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; playoffs ; did not qualify } } ; 2 }, interpretation: select the rows whose playoffs record fuzzily matches to did not qualify . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; playoffs ; did not qualify } } ; 2 }, interpretation: the average of the attendance record of all rows is 43800 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 43800 }, interpretation: the average of the attendance record of all rows is 43800 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 43800 }, interpretation: select the rows whose writer record fuzzily matches to ed roe . there is only one such row in the table . the production code record of this unqiue row is 402 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; writer ; ed roe } } ; eq { hop { filter_eq { all_rows ; writer ; ed roe } ; production code } ; 402 } }, interpretation: select the rows whose writer record fuzzily matches to ed roe . there is only one such row in the table . the production code record of this unqiue row is 402 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; writer ; ed roe } } ; eq { hop { filter_eq { all_rows ; writer ; ed roe } ; production code } ; 402 } }, interpretation: select the row whose administrative panel record of all rows is maximum . the party record of this row is fine gael .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; administrative panel } ; party } ; fine gael }, interpretation: select the row whose administrative panel record of all rows is maximum . the party record of this row is fine gael .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; administrative panel } ; party } ; fine gael }, interpretation: select the rows whose tournaments played record is greater than 20 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; tournaments played ; 20 } }, interpretation: select the rows whose tournaments played record is greater than 20 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; tournaments played ; 20 } }, interpretation: for the score records of all rows , most of them are greater than or equal to 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; score ; 5 }, interpretation: for the score records of all rows , most of them are greater than or equal to 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; score ; 5 }, interpretation: select the rows whose date record fuzzily matches to october . among these rows , select the rows whose result record fuzzily matches to w . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; october } ; result ; w } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to october . among these rows , select the rows whose result record fuzzily matches to w . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; october } ; result ; w } } ; 3 }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: select the rows whose score record is equal to 0 . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 0 } } ; 7 }, interpretation: select the rows whose score record is equal to 0 . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 0 } } ; 7 }, interpretation: select the rows whose 2013 date record fuzzily matches to may . among these rows , select the rows whose local name record fuzzily matches to \u043f\u0440\u0430\u0437\u043d\u0438\u043a \u0440\u0430\u0434\u0430 , praznik rada . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; 2013 date ; may } ; local name ; \u043f\u0440\u0430\u0437\u043d\u0438\u043a \u0440\u0430\u0434\u0430 , praznik rada } } ; 2 }, interpretation: select the rows whose 2013 date record fuzzily matches to may . among these rows , select the rows whose local name record fuzzily matches to \u043f\u0440\u0430\u0437\u043d\u0438\u043a \u0440\u0430\u0434\u0430 , praznik rada . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; 2013 date ; may } ; local name ; \u043f\u0440\u0430\u0437\u043d\u0438\u043a \u0440\u0430\u0434\u0430 , praznik rada } } ; 2 }, interpretation: the average of the weight record of all rows is 88 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight } ; 88 }, interpretation: the average of the weight record of all rows is 88 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight } ; 88 }, interpretation: select the row whose notes record of all rows is 3rd maximum . the year record of this row is 2004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; notes ; 3 } ; year } ; 2004 }, interpretation: select the row whose notes record of all rows is 3rd maximum . the year record of this row is 2004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; notes ; 3 } ; year } ; 2004 }, interpretation: for the attendance records of all rows , most of them are greater than or equal to 60000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; attendance ; 60000 }, interpretation: for the attendance records of all rows , most of them are greater than or equal to 60000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; attendance ; 60000 }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: select the rows whose nationality record fuzzily matches to australia . there is only one such row in the table . the name record of this unqiue row is michael klim .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; australia } } ; eq { hop { filter_eq { all_rows ; nationality ; australia } ; name } ; michael klim } }, interpretation: select the rows whose nationality record fuzzily matches to australia . there is only one such row in the table . the name record of this unqiue row is michael klim .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; australia } } ; eq { hop { filter_eq { all_rows ; nationality ; australia } ; name } ; michael klim } }, interpretation: select the row whose points record of all rows is maximum . the points record of this row is 227 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; points } ; 227 }, interpretation: select the row whose points record of all rows is maximum . the points record of this row is 227 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; points } ; 227 }, interpretation: select the rows whose space agency record fuzzily matches to nasa . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; space agency ; nasa } } ; 3 }, interpretation: select the rows whose space agency record fuzzily matches to nasa . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; space agency ; nasa } } ; 3 }, interpretation: the sum of the pts record of all rows is 23 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; pts } ; 23 }, interpretation: the sum of the pts record of all rows is 23 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; pts } ; 23 }, interpretation: select the rows whose manufacturer record fuzzily matches to ford . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manufacturer ; ford } } ; 3 }, interpretation: select the rows whose manufacturer record fuzzily matches to ford . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manufacturer ; ford } } ; 3 }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the home team score record of this row . select the rows whose home team record fuzzily matches to collingwood . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; home team score } ; hop { filter_eq { all_rows ; home team ; collingwood } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the home team score record of this row . select the rows whose home team record fuzzily matches to collingwood . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; home team score } ; hop { filter_eq { all_rows ; home team ; collingwood } ; home team score } }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is tom barrett .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; tom barrett }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is tom barrett .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; tom barrett }, interpretation: select the rows whose max height ( ft ) record is greater than or equal to 20000 . among these rows , select the rows whose m / v ft / s record is greater than or equal to 2200 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_greater_eq { all_rows ; max height ( ft ) ; 20000 } ; m / v ft / s ; 2200 } } ; 3 }, interpretation: select the rows whose max height ( ft ) record is greater than or equal to 20000 . among these rows , select the rows whose m / v ft / s record is greater than or equal to 2200 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_greater_eq { all_rows ; max height ( ft ) ; 20000 } ; m / v ft / s ; 2200 } } ; 3 }, interpretation: select the rows whose year record fuzzily matches to 2000 . take the position record of this row . select the rows whose year record fuzzily matches to 2004 . take the position record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2000 } ; position } ; hop { filter_eq { all_rows ; year ; 2004 } ; position } }, interpretation: select the rows whose year record fuzzily matches to 2000 . take the position record of this row . select the rows whose year record fuzzily matches to 2004 . take the position record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2000 } ; position } ; hop { filter_eq { all_rows ; year ; 2004 } ; position } }, interpretation: select the rows whose years record is equal to 2010 . the average of the power record of these rows is 3875 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; years ; 2010 } ; power } ; 3875 }, interpretation: select the rows whose years record is equal to 2010 . the average of the power record of these rows is 3875 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; years ; 2010 } ; power } ; 3875 }, interpretation: select the rows whose events record is equal to 0 . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; events ; 0 } } ; eq { hop { filter_eq { all_rows ; events ; 0 } ; tournament } ; us open } }, interpretation: select the rows whose events record is equal to 0 . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; events ; 0 } } ; eq { hop { filter_eq { all_rows ; events ; 0 } ; tournament } ; us open } }, interpretation: select the rows whose player record fuzzily matches to kj choi . take the reset points record of this row . select the rows whose player record fuzzily matches to charles howell iii . take the reset points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; kj choi } ; reset points } ; hop { filter_eq { all_rows ; player ; charles howell iii } ; reset points } }, interpretation: select the rows whose player record fuzzily matches to kj choi . take the reset points record of this row . select the rows whose player record fuzzily matches to charles howell iii . take the reset points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; kj choi } ; reset points } ; hop { filter_eq { all_rows ; player ; charles howell iii } ; reset points } }, interpretation: select the rows whose written by record fuzzily matches to david wolkove . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; david wolkove } } ; 2 }, interpretation: select the rows whose written by record fuzzily matches to david wolkove . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; david wolkove } } ; 2 }, interpretation: select the rows whose type record fuzzily matches to private . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; private } } ; 12 }, interpretation: select the rows whose type record fuzzily matches to private . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; private } } ; 12 }, interpretation: select the rows whose colour record fuzzily matches to brown . there is only one such row in the table . the name record of this unqiue row is ted .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; colour ; brown } } ; eq { hop { filter_eq { all_rows ; colour ; brown } ; name } ; ted } }, interpretation: select the rows whose colour record fuzzily matches to brown . there is only one such row in the table . the name record of this unqiue row is ted .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; colour ; brown } } ; eq { hop { filter_eq { all_rows ; colour ; brown } ; name } ; ted } }, interpretation: the sum of the parishes record of all rows is 3149 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; parishes } ; 3149 }, interpretation: the sum of the parishes record of all rows is 3149 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; parishes } ; 3149 }, interpretation: select the rows whose hpfs record fuzzily matches to partial . there is only one such row in the table . the ntfs record of this unqiue row is yes v1 .2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; hpfs ; partial } } ; eq { hop { filter_eq { all_rows ; hpfs ; partial } ; ntfs } ; yes v1 .2 } }, interpretation: select the rows whose hpfs record fuzzily matches to partial . there is only one such row in the table . the ntfs record of this unqiue row is yes v1 .2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; hpfs ; partial } } ; eq { hop { filter_eq { all_rows ; hpfs ; partial } ; ntfs } ; yes v1 .2 } }, interpretation: select the row whose date record of all rows is 3rd minimum . the centerfold model record of this row is sandra hubby .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 3 } ; centerfold model } ; sandra hubby }, interpretation: select the row whose date record of all rows is 3rd minimum . the centerfold model record of this row is sandra hubby .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 3 } ; centerfold model } ; sandra hubby }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is sydney .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; sydney }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is sydney .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; sydney }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is princes park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; princes park }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is princes park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; princes park }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the to par record of these rows is 9.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; to par } ; 9.67 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the to par record of these rows is 9.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; to par } ; 9.67 }, interpretation: select the rows whose investigation record fuzzily matches to somatostatin receptor imaging . for the route of administration records of these rows , all of them fuzzily match to iv .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; investigation ; somatostatin receptor imaging } ; route of administration ; iv }, interpretation: select the rows whose investigation record fuzzily matches to somatostatin receptor imaging . for the route of administration records of these rows , all of them fuzzily match to iv .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; investigation ; somatostatin receptor imaging } ; route of administration ; iv }, interpretation: select the row whose us viewers ( in millions ) record of all rows is maximum . the title record of this row is crazy for you .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; title } ; crazy for you }, interpretation: select the row whose us viewers ( in millions ) record of all rows is maximum . the title record of this row is crazy for you .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; title } ; crazy for you }, interpretation: select the rows whose location ( city , state ) record fuzzily matches to michigan . there is only one such row in the table . the yard name record of this unqiue row is great lakes engineering co .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ( city , state ) ; michigan } } ; eq { hop { filter_eq { all_rows ; location ( city , state ) ; michigan } ; yard name } ; great lakes engineering co } }, interpretation: select the rows whose location ( city , state ) record fuzzily matches to michigan . there is only one such row in the table . the yard name record of this unqiue row is great lakes engineering co .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ( city , state ) ; michigan } } ; eq { hop { filter_eq { all_rows ; location ( city , state ) ; michigan } ; yard name } ; great lakes engineering co } }, interpretation: select the rows whose competition record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; competition } } ; 10 }, interpretation: select the rows whose competition record is arbitrary . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; competition } } ; 10 }, interpretation: select the rows whose pos record fuzzily matches to dnf . there is only one such row in the table . the year record of this unqiue row is 2004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pos ; dnf } } ; eq { hop { filter_eq { all_rows ; pos ; dnf } ; year } ; 2004 } }, interpretation: select the rows whose pos record fuzzily matches to dnf . there is only one such row in the table . the year record of this unqiue row is 2004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pos ; dnf } } ; eq { hop { filter_eq { all_rows ; pos ; dnf } ; year } ; 2004 } }, interpretation: for the songwriter ( s ) records of all rows , all of them fuzzily match to ( adapted by malcolm dodds ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; songwriter ( s ) ; ( adapted by malcolm dodds ) }, interpretation: for the songwriter ( s ) records of all rows , all of them fuzzily match to ( adapted by malcolm dodds ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; songwriter ( s ) ; ( adapted by malcolm dodds ) }, interpretation: select the row whose time record of all rows is 1st minimum . the winner record of this row is cashier 's dream .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; winner } ; cashier 's dream }, interpretation: select the row whose time record of all rows is 1st minimum . the winner record of this row is cashier 's dream .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; winner } ; cashier 's dream }, interpretation: select the row whose cuts made record of all rows is maximum . the year record of this row is 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; cuts made } ; year } ; 2009 }, interpretation: select the row whose cuts made record of all rows is maximum . the year record of this row is 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; cuts made } ; year } ; 2009 }, interpretation: select the row whose speed ( km / h ) record of all rows is 2nd maximum . the vehicle record of this row is lockheed sr - 71 blackbird .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; speed ( km / h ) ; 2 } ; vehicle } ; lockheed sr - 71 blackbird }, interpretation: select the row whose speed ( km / h ) record of all rows is 2nd maximum . the vehicle record of this row is lockheed sr - 71 blackbird .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; speed ( km / h ) ; 2 } ; vehicle } ; lockheed sr - 71 blackbird }, interpretation: for the year records of all rows , all of them are greater than 1970 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; year ; 1970 }, interpretation: for the year records of all rows , all of them are greater than 1970 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; year ; 1970 }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: select the row whose operating expenditures record of all rows is 1st maximum . the candidate record of this row is barack obama .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; operating expenditures ; 1 } ; candidate } ; barack obama }, interpretation: select the row whose operating expenditures record of all rows is 1st maximum . the candidate record of this row is barack obama .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; operating expenditures ; 1 } ; candidate } ; barack obama }, interpretation: select the rows whose result record fuzzily matches to 35-34 . there is only one such row in the table . the date record of this unqiue row is november 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 35-34 } } ; eq { hop { filter_eq { all_rows ; result ; 35-34 } ; date } ; november 15 } }, interpretation: select the rows whose result record fuzzily matches to 35-34 . there is only one such row in the table . the date record of this unqiue row is november 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 35-34 } } ; eq { hop { filter_eq { all_rows ; result ; 35-34 } ; date } ; november 15 } }, interpretation: select the rows whose launch date record fuzzily matches to june . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; launch date ; june } } ; 3 }, interpretation: select the rows whose launch date record fuzzily matches to june . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; launch date ; june } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to safe . the sum of the score record of these rows is 54 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; safe } ; score } ; 54 }, interpretation: select the rows whose result record fuzzily matches to safe . the sum of the score record of these rows is 54 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; safe } ; score } ; 54 }, interpretation: select the rows whose namesake record fuzzily matches to sumerian town . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; namesake ; sumerian town } } ; 2 }, interpretation: select the rows whose namesake record fuzzily matches to sumerian town . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; namesake ; sumerian town } } ; 2 }, interpretation: for the high points records of all rows , most of them fuzzily match to kevin martin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; kevin martin }, interpretation: for the high points records of all rows , most of them fuzzily match to kevin martin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; kevin martin }, interpretation: the sum of the attendance record of all rows is 129457 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 129457 }, interpretation: the sum of the attendance record of all rows is 129457 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 129457 }, interpretation: select the rows whose venue record fuzzily matches to waverley park . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; waverley park } } ; 4 }, interpretation: select the rows whose venue record fuzzily matches to waverley park . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; waverley park } } ; 4 }, interpretation: select the rows whose points record is greater than 41 . there is only one such row in the table . the artist record of this unqiue row is extra nena .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; points ; 41 } } ; eq { hop { filter_greater { all_rows ; points ; 41 } ; artist } ; extra nena } }, interpretation: select the rows whose points record is greater than 41 . there is only one such row in the table . the artist record of this unqiue row is extra nena .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; points ; 41 } } ; eq { hop { filter_greater { all_rows ; points ; 41 } ; artist } ; extra nena } }, interpretation: select the rows whose competition record fuzzily matches to 2000 summer olympics . take the class record of this row . select the rows whose competition record fuzzily matches to 1996 summer olympics . take the class record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; competition ; 2000 summer olympics } ; class } ; hop { filter_eq { all_rows ; competition ; 1996 summer olympics } ; class } }, interpretation: select the rows whose competition record fuzzily matches to 2000 summer olympics . take the class record of this row . select the rows whose competition record fuzzily matches to 1996 summer olympics . take the class record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; competition ; 2000 summer olympics } ; class } ; hop { filter_eq { all_rows ; competition ; 1996 summer olympics } ; class } }, interpretation: select the rows whose model number record fuzzily matches to 800 . the average of the frequency record of these rows is 800 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; model number ; 800 } ; frequency } ; 800 }, interpretation: select the rows whose model number record fuzzily matches to 800 . the average of the frequency record of these rows is 800 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; model number ; 800 } ; frequency } ; 800 }, interpretation: select the rows whose name record fuzzily matches to gary neville . take the total record of this row . select the rows whose name record fuzzily matches to alex stepney . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; gary neville } ; total } ; hop { filter_eq { all_rows ; name ; alex stepney } ; total } }, interpretation: select the rows whose name record fuzzily matches to gary neville . take the total record of this row . select the rows whose name record fuzzily matches to alex stepney . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; gary neville } ; total } ; hop { filter_eq { all_rows ; name ; alex stepney } ; total } }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: select the rows whose first elected record fuzzily matches to 195 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 195 } } ; 2 }, interpretation: select the rows whose first elected record fuzzily matches to 195 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 195 } } ; 2 }, interpretation: select the row whose react record of all rows is minimum . the athlete record of this row is tyler christopher .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; react } ; athlete } ; tyler christopher }, interpretation: select the row whose react record of all rows is minimum . the athlete record of this row is tyler christopher .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; react } ; athlete } ; tyler christopher }, interpretation: select the row whose laps record of all rows is maximum . the year record of this row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; laps } ; year } ; 1989 }, interpretation: select the row whose laps record of all rows is maximum . the year record of this row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; laps } ; year } ; 1989 }, interpretation: select the rows whose crowd record is less than 10000 . the average of the crowd record of these rows is 7005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less { all_rows ; crowd ; 10000 } ; crowd } ; 7005 }, interpretation: select the rows whose crowd record is less than 10000 . the average of the crowd record of these rows is 7005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less { all_rows ; crowd ; 10000 } ; crowd } ; 7005 }, interpretation: select the rows whose date record fuzzily matches to sept 15 . take the attendance record of this row . select the rows whose date record fuzzily matches to nov 3 . take the attendance record of this row . the first record is greater than the second record . the opponent record of the first row is green bay packers . the opponent record of the second row is chicago bears .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; date ; sept 15 } ; attendance } ; hop { filter_eq { all_rows ; date ; nov 3 } ; attendance } } ; and { eq { hop { filter_eq { all_rows ; date ; sept 15 } ; opponent } ; green bay packers } ; eq { hop { filter_eq { all_rows ; date ; nov 3 } ; opponent } ; chicago bears } } }, interpretation: select the rows whose date record fuzzily matches to sept 15 . take the attendance record of this row . select the rows whose date record fuzzily matches to nov 3 . take the attendance record of this row . the first record is greater than the second record . the opponent record of the first row is green bay packers . the opponent record of the second row is chicago bears .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; date ; sept 15 } ; attendance } ; hop { filter_eq { all_rows ; date ; nov 3 } ; attendance } } ; and { eq { hop { filter_eq { all_rows ; date ; sept 15 } ; opponent } ; green bay packers } ; eq { hop { filter_eq { all_rows ; date ; nov 3 } ; opponent } ; chicago bears } } }, interpretation: for the director records of all rows , most of them fuzzily match to paul gay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; director ; paul gay }, interpretation: for the director records of all rows , most of them fuzzily match to paul gay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; director ; paul gay }, interpretation: the average of the away team score record of all rows is 8.75 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; away team score } ; 8.75 }, interpretation: the average of the away team score record of all rows is 8.75 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; away team score } ; 8.75 }, interpretation: select the row whose date record of all rows is 1st minimum . the winning driver record of this row is eugenio silvani .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; winning driver } ; eugenio silvani }, interpretation: select the row whose date record of all rows is 1st minimum . the winning driver record of this row is eugenio silvani .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; winning driver } ; eugenio silvani }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 1989 }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 1989 }, interpretation: select the rows whose country of origin record fuzzily matches to colombia . there is only one such row in the table . the name / designation record of this unqiue row is saturn machine pistol .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country of origin ; colombia } } ; eq { hop { filter_eq { all_rows ; country of origin ; colombia } ; name / designation } ; saturn machine pistol } }, interpretation: select the rows whose country of origin record fuzzily matches to colombia . there is only one such row in the table . the name / designation record of this unqiue row is saturn machine pistol .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country of origin ; colombia } } ; eq { hop { filter_eq { all_rows ; country of origin ; colombia } ; name / designation } ; saturn machine pistol } }, interpretation: the average of the elevation ( m ) record of all rows is 4390 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; elevation ( m ) } ; 4390 }, interpretation: the average of the elevation ( m ) record of all rows is 4390 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; elevation ( m ) } ; 4390 }, interpretation: select the rows whose constructor record fuzzily matches to toyota . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constructor ; toyota } } ; 2 }, interpretation: select the rows whose constructor record fuzzily matches to toyota . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constructor ; toyota } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 3 }, interpretation: select the row whose release - year of first charted record record of all rows is minimum . the artist record of this row is frank sinatra .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; release - year of first charted record } ; artist } ; frank sinatra }, interpretation: select the row whose release - year of first charted record record of all rows is minimum . the artist record of this row is frank sinatra .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; release - year of first charted record } ; artist } ; frank sinatra }, interpretation: select the row whose score record of all rows is maximum . the team 1 record of this row is as monaco ( d1 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; team 1 } ; as monaco ( d1 ) }, interpretation: select the row whose score record of all rows is maximum . the team 1 record of this row is as monaco ( d1 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; team 1 } ; as monaco ( d1 ) }, interpretation: select the rows whose webcast link record fuzzily matches to n / a . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; webcast link ; n / a } } ; 2 }, interpretation: select the rows whose webcast link record fuzzily matches to n / a . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; webcast link ; n / a } } ; 2 }, interpretation: select the rows whose status record fuzzily matches to rural community . there is only one such row in the table . the official name record of this unqiue row is beaubassin east .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; rural community } } ; eq { hop { filter_eq { all_rows ; status ; rural community } ; official name } ; beaubassin east } }, interpretation: select the rows whose status record fuzzily matches to rural community . there is only one such row in the table . the official name record of this unqiue row is beaubassin east .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; rural community } } ; eq { hop { filter_eq { all_rows ; status ; rural community } ; official name } ; beaubassin east } }, interpretation: select the row whose time record of all rows is 3rd minimum . the race record of this row is derrinstown stud derby trial .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; race } ; derrinstown stud derby trial }, interpretation: select the row whose time record of all rows is 3rd minimum . the race record of this row is derrinstown stud derby trial .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; race } ; derrinstown stud derby trial }, interpretation: select the rows whose venue record fuzzily matches to athens , greece . take the date record of this row . select the rows whose venue record fuzzily matches to oslo , norway . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; athens , greece } ; date } ; hop { filter_eq { all_rows ; venue ; oslo , norway } ; date } }, interpretation: select the rows whose venue record fuzzily matches to athens , greece . take the date record of this row . select the rows whose venue record fuzzily matches to oslo , norway . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; athens , greece } ; date } ; hop { filter_eq { all_rows ; venue ; oslo , norway } ; date } }, interpretation: select the rows whose year record fuzzily matches to 1961 . take the rank record of this row . select the rows whose year record fuzzily matches to 1970 . take the rank record of this row . the first record is less than the second record . the rank record of the first row is 17 . the rank record of the second row is 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; year ; 1961 } ; rank } ; hop { filter_eq { all_rows ; year ; 1970 } ; rank } } ; and { eq { hop { filter_eq { all_rows ; year ; 1961 } ; rank } ; 17 } ; eq { hop { filter_eq { all_rows ; year ; 1970 } ; rank } ; 22 } } }, interpretation: select the rows whose year record fuzzily matches to 1961 . take the rank record of this row . select the rows whose year record fuzzily matches to 1970 . take the rank record of this row . the first record is less than the second record . the rank record of the first row is 17 . the rank record of the second row is 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; year ; 1961 } ; rank } ; hop { filter_eq { all_rows ; year ; 1970 } ; rank } } ; and { eq { hop { filter_eq { all_rows ; year ; 1961 } ; rank } ; 17 } ; eq { hop { filter_eq { all_rows ; year ; 1970 } ; rank } ; 22 } } }, interpretation: select the rows whose warship record fuzzily matches to chacabuco . take the speed ( knots ) record of this row . select the rows whose warship record fuzzily matches to abtao . take the speed ( knots ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; warship ; chacabuco } ; speed ( knots ) } ; hop { filter_eq { all_rows ; warship ; abtao } ; speed ( knots ) } }, interpretation: select the rows whose warship record fuzzily matches to chacabuco . take the speed ( knots ) record of this row . select the rows whose warship record fuzzily matches to abtao . take the speed ( knots ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; warship ; chacabuco } ; speed ( knots ) } ; hop { filter_eq { all_rows ; warship ; abtao } ; speed ( knots ) } }, interpretation: select the row whose matches record of all rows is maximum . the year record of this row is 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; year } ; 2012 }, interpretation: select the row whose matches record of all rows is maximum . the year record of this row is 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; year } ; 2012 }, interpretation: for the partner records of all rows , most of them fuzzily match to j\u00fcrgen melzer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; partner ; j\u00fcrgen melzer }, interpretation: for the partner records of all rows , most of them fuzzily match to j\u00fcrgen melzer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; partner ; j\u00fcrgen melzer }, interpretation: select the row whose face value record of all rows is 4th maximum . the ecosystem record of this row is alpine tundra .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; face value ; 4 } ; ecosystem } ; alpine tundra }, interpretation: select the row whose face value record of all rows is 4th maximum . the ecosystem record of this row is alpine tundra .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; face value ; 4 } ; ecosystem } ; alpine tundra }, interpretation: select the row whose muzzle energy record of all rows is maximum . the cartridge record of this row is .357 magnum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; muzzle energy } ; cartridge } ; .357 magnum }, interpretation: select the row whose muzzle energy record of all rows is maximum . the cartridge record of this row is .357 magnum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; muzzle energy } ; cartridge } ; .357 magnum }, interpretation: the average of the crowd record of all rows is 21000-22000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21000-22000 }, interpretation: the average of the crowd record of all rows is 21000-22000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21000-22000 }, interpretation: for the horse records of all rows , most of them fuzzily match to yp\u00e4j\u00e4 karuso .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; horse ; yp\u00e4j\u00e4 karuso }, interpretation: for the horse records of all rows , most of them fuzzily match to yp\u00e4j\u00e4 karuso .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; horse ; yp\u00e4j\u00e4 karuso }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the score record of these rows is 279.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; score } ; 279.4 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the score record of these rows is 279.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; score } ; 279.4 }, interpretation: select the rows whose position record fuzzily matches to running back . there is only one such row in the table . the player record of this unqiue row is mel farr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; running back } } ; eq { hop { filter_eq { all_rows ; position ; running back } ; player } ; mel farr } }, interpretation: select the rows whose position record fuzzily matches to running back . there is only one such row in the table . the player record of this unqiue row is mel farr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; running back } } ; eq { hop { filter_eq { all_rows ; position ; running back } ; player } ; mel farr } }, interpretation: select the row whose viewers ( million ) record of all rows is maximum . the title record of this row is no excuses .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers ( million ) } ; title } ; no excuses }, interpretation: select the row whose viewers ( million ) record of all rows is maximum . the title record of this row is no excuses .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers ( million ) } ; title } ; no excuses }, interpretation: select the rows whose 1st leg record fuzzily matches to 0-3 . there is only one such row in the table . the team 1 record of this unqiue row is blooming . the team 2 record of this unqiue row is river plate .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 1st leg ; 0-3 } } ; and { eq { hop { filter_eq { all_rows ; 1st leg ; 0-3 } ; team 1 } ; blooming } ; eq { hop { filter_eq { all_rows ; 1st leg ; 0-3 } ; team 2 } ; river plate } } }, interpretation: select the rows whose 1st leg record fuzzily matches to 0-3 . there is only one such row in the table . the team 1 record of this unqiue row is blooming . the team 2 record of this unqiue row is river plate .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 1st leg ; 0-3 } } ; and { eq { hop { filter_eq { all_rows ; 1st leg ; 0-3 } ; team 1 } ; blooming } ; eq { hop { filter_eq { all_rows ; 1st leg ; 0-3 } ; team 2 } ; river plate } } }, interpretation: select the row whose attendance record of all rows is 1st maximum . the acc team record of this row is 4 duke .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; acc team } ; 4 duke }, interpretation: select the row whose attendance record of all rows is 1st maximum . the acc team record of this row is 4 duke .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; acc team } ; 4 duke }, interpretation: select the rows whose position record fuzzily matches to left wing . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; left wing } } ; 4 }, interpretation: select the rows whose position record fuzzily matches to left wing . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; left wing } } ; 4 }, interpretation: for the date records of all rows , all of them fuzzily match to 17 june 1939 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 17 june 1939 }, interpretation: for the date records of all rows , all of them fuzzily match to 17 june 1939 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 17 june 1939 }, interpretation: select the rows whose region record fuzzily matches to united states or japan . for the format records of these rows , most of them fuzzily match to cd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; region ; united states or japan } ; format ; cd }, interpretation: select the rows whose region record fuzzily matches to united states or japan . for the format records of these rows , most of them fuzzily match to cd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; region ; united states or japan } ; format ; cd }, interpretation: select the rows whose elevation record is greater than 12000 feet . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; elevation ; 12000 feet } } ; 3 }, interpretation: select the rows whose elevation record is greater than 12000 feet . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; elevation ; 12000 feet } } ; 3 }, interpretation: select the rows whose internl tourism receipts 2011 ( million usd ) record fuzzily matches to n/d . there is only one such row in the table . the selected caribbean and n latin america countries record of this unqiue row is cuba . the revenues as % of exports goods and services 2011 record of this unqiue row is n / d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } } ; and { eq { hop { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } ; selected caribbean and n latin america countries } ; cuba } ; eq { hop { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } ; revenues as % of exports goods and services 2011 } ; n / d } } }, interpretation: select the rows whose internl tourism receipts 2011 ( million usd ) record fuzzily matches to n/d . there is only one such row in the table . the selected caribbean and n latin america countries record of this unqiue row is cuba . the revenues as % of exports goods and services 2011 record of this unqiue row is n / d .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } } ; and { eq { hop { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } ; selected caribbean and n latin america countries } ; cuba } ; eq { hop { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } ; revenues as % of exports goods and services 2011 } ; n / d } } }, interpretation: select the row whose height ( cm ) record of all rows is 2nd maximum . the name record of this row is al iafrate .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ( cm ) ; 2 } ; name } ; al iafrate }, interpretation: select the row whose height ( cm ) record of all rows is 2nd maximum . the name record of this row is al iafrate .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ( cm ) ; 2 } ; name } ; al iafrate }, interpretation: select the rows whose finish record is equal to 14 . there is only one such row in the table . the year record of this unqiue row is 1982 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; finish ; 14 } } ; eq { hop { filter_eq { all_rows ; finish ; 14 } ; year } ; 1982 } }, interpretation: select the rows whose finish record is equal to 14 . there is only one such row in the table . the year record of this unqiue row is 1982 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; finish ; 14 } } ; eq { hop { filter_eq { all_rows ; finish ; 14 } ; year } ; 1982 } }, interpretation: select the rows whose frequency record fuzzily matches to 830 khz . there is only one such row in the table . the calls record of this unqiue row is wcrn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; frequency ; 830 khz } } ; eq { hop { filter_eq { all_rows ; frequency ; 830 khz } ; calls } ; wcrn } }, interpretation: select the rows whose frequency record fuzzily matches to 830 khz . there is only one such row in the table . the calls record of this unqiue row is wcrn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; frequency ; 830 khz } } ; eq { hop { filter_eq { all_rows ; frequency ; 830 khz } ; calls } ; wcrn } }, interpretation: select the rows whose callsign record fuzzily matches to dwll . take the power record of this row . select the rows whose callsign record fuzzily matches to dyku . take the power record of this row . the first record is 10 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; callsign ; dwll } ; power } ; hop { filter_eq { all_rows ; callsign ; dyku } ; power } } ; 10 }, interpretation: select the rows whose callsign record fuzzily matches to dwll . take the power record of this row . select the rows whose callsign record fuzzily matches to dyku . take the power record of this row . the first record is 10 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; callsign ; dwll } ; power } ; hop { filter_eq { all_rows ; callsign ; dyku } ; power } } ; 10 }, interpretation: select the rows whose year record fuzzily matches to sophomore . the average of the weight record of these rows is 192.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; year ; sophomore } ; weight } ; 192.5 }, interpretation: select the rows whose year record fuzzily matches to sophomore . the average of the weight record of these rows is 192.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; year ; sophomore } ; weight } ; 192.5 }, interpretation: select the rows whose nationality record fuzzily matches to united states . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; united states } } ; 3 }, interpretation: select the rows whose nationality record fuzzily matches to united states . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; united states } } ; 3 }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is william j driver .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; william j driver }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is william j driver .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; william j driver }, interpretation: for the class records of all rows , all of them fuzzily match to d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; class ; d }, interpretation: select the row whose points record of all rows is 3rd maximum . the rider record of this row is mick grant .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 3 } ; rider } ; mick grant }, interpretation: select the row whose points record of all rows is 3rd maximum . the rider record of this row is mick grant .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 3 } ; rider } ; mick grant }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 3rd minimum . the attendance record of this row is 51925 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 3 } ; attendance } ; 51925 }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 3rd minimum . the attendance record of this row is 51925 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 3 } ; attendance } ; 51925 }, interpretation: the average of the finish position record of all rows is 29.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish position } ; 29.8 }, interpretation: the average of the finish position record of all rows is 29.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish position } ; 29.8 }, interpretation: select the rows whose player record fuzzily matches to julien cayer . take the overall pick record of this row . select the rows whose player record fuzzily matches to gustav nyquist . take the overall pick record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; julien cayer } ; overall pick } ; hop { filter_eq { all_rows ; player ; gustav nyquist } ; overall pick } }, interpretation: select the rows whose player record fuzzily matches to julien cayer . take the overall pick record of this row . select the rows whose player record fuzzily matches to gustav nyquist . take the overall pick record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; julien cayer } ; overall pick } ; hop { filter_eq { all_rows ; player ; gustav nyquist } ; overall pick } }, interpretation: select the rows whose date record fuzzily matches to february . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; february } } ; 4 }, interpretation: select the rows whose date record fuzzily matches to february . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; february } } ; 4 }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: select the rows whose player record fuzzily matches to jeff feniak . take the round record of this row . select the rows whose player record fuzzily matches to konstantin rudenko . take the round record of this row . the second record is 2 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; jeff feniak } ; round } ; hop { filter_eq { all_rows ; player ; konstantin rudenko } ; round } } ; -2 }, interpretation: select the rows whose player record fuzzily matches to jeff feniak . take the round record of this row . select the rows whose player record fuzzily matches to konstantin rudenko . take the round record of this row . the second record is 2 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; jeff feniak } ; round } ; hop { filter_eq { all_rows ; player ; konstantin rudenko } ; round } } ; -2 }, interpretation: select the rows whose the mole record is arbitrary . the number of such rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; the mole } } ; 14 }, interpretation: select the rows whose the mole record is arbitrary . the number of such rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; the mole } } ; 14 }, interpretation: select the rows whose tournament record fuzzily matches to taipei , taiwan . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; taipei , taiwan } } ; 2 }, interpretation: select the rows whose tournament record fuzzily matches to taipei , taiwan . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; taipei , taiwan } } ; 2 }, interpretation: select the row whose high points record of all rows is maximum . the high points record of this row is dalembert ( 23 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; high points } ; high points } ; dalembert ( 23 ) }, interpretation: select the row whose high points record of all rows is maximum . the high points record of this row is dalembert ( 23 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; high points } ; high points } ; dalembert ( 23 ) }, interpretation: select the rows whose currency record fuzzily matches to lithuanian litas . take the entry erm ii record of this row . select the rows whose currency record fuzzily matches to latvian lats . take the entry erm ii record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; currency ; lithuanian litas } ; entry erm ii } ; hop { filter_eq { all_rows ; currency ; latvian lats } ; entry erm ii } }, interpretation: select the rows whose currency record fuzzily matches to lithuanian litas . take the entry erm ii record of this row . select the rows whose currency record fuzzily matches to latvian lats . take the entry erm ii record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; currency ; lithuanian litas } ; entry erm ii } ; hop { filter_eq { all_rows ; currency ; latvian lats } ; entry erm ii } }, interpretation: select the rows whose department record is arbitrary . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; department } } ; 7 }, interpretation: select the rows whose department record is arbitrary . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; department } } ; 7 }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is harry lane englebright .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; harry lane englebright }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is harry lane englebright .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; harry lane englebright }, interpretation: for the time slot ( est ) records of all rows , most of them fuzzily match to wednesday 10 pm / 9c .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; time slot ( est ) ; wednesday 10 pm / 9c }, interpretation: for the time slot ( est ) records of all rows , most of them fuzzily match to wednesday 10 pm / 9c .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; time slot ( est ) ; wednesday 10 pm / 9c }, interpretation: select the row whose laps record of all rows is maximum . the year record of this row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; laps } ; year } ; 2007 }, interpretation: select the row whose laps record of all rows is maximum . the year record of this row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; laps } ; year } ; 2007 }, interpretation: select the row whose tied record of all rows is maximum . the season record of this row is 1968 - 69 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; tied } ; season } ; 1968 - 69 }, interpretation: select the row whose tied record of all rows is maximum . the season record of this row is 1968 - 69 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; tied } ; season } ; 1968 - 69 }, interpretation: select the row whose money record of all rows is 4th maximum . the score record of this row is 68 + 68 + 69 + 79 = 284 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; money ; 4 } ; score } ; 68 + 68 + 69 + 79, interpretation: select the row whose money record of all rows is 4th maximum . the score record of this row is 68 + 68 + 69 + 79 = 284 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; money ; 4 } ; score } ; 68 + 68 + 69 + 79, interpretation: select the rows whose college record fuzzily matches to north carolina . there is only one such row in the table . the name record of this unqiue row is micah moon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; north carolina } } ; eq { hop { filter_eq { all_rows ; college ; north carolina } ; name } ; micah moon } }, interpretation: select the rows whose college record fuzzily matches to north carolina . there is only one such row in the table . the name record of this unqiue row is micah moon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; north carolina } } ; eq { hop { filter_eq { all_rows ; college ; north carolina } ; name } ; micah moon } }, interpretation: select the rows whose top - 25 record is equal to 6 . there is only one such row in the table . the tournament record of this unqiue row is masters tournament .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; top - 25 ; 6 } } ; eq { hop { filter_eq { all_rows ; top - 25 ; 6 } ; tournament } ; masters tournament } }, interpretation: select the rows whose top - 25 record is equal to 6 . there is only one such row in the table . the tournament record of this unqiue row is masters tournament .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; top - 25 ; 6 } } ; eq { hop { filter_eq { all_rows ; top - 25 ; 6 } ; tournament } ; masters tournament } }, interpretation: select the rows whose team record fuzzily matches to palmeiras . take the against record of this row . select the rows whose team record fuzzily matches to flamengo . take the against record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; team ; palmeiras } ; against } ; hop { filter_eq { all_rows ; team ; flamengo } ; against } }, interpretation: select the rows whose team record fuzzily matches to palmeiras . take the against record of this row . select the rows whose team record fuzzily matches to flamengo . take the against record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; team ; palmeiras } ; against } ; hop { filter_eq { all_rows ; team ; flamengo } ; against } }, interpretation: for the venue records of all rows , most of them fuzzily match to lansdowne road , dublin , ireland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; lansdowne road , dublin , ireland }, interpretation: for the venue records of all rows , most of them fuzzily match to lansdowne road , dublin , ireland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; lansdowne road , dublin , ireland }, interpretation: the sum of the gold record of all rows is 36 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 36 }, interpretation: the sum of the gold record of all rows is 36 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 36 }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is frank wolf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; frank wolf }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is frank wolf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; frank wolf }, interpretation: for the score records of all rows , most of them are greater than or equal to 70 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; score ; 70 }, interpretation: for the score records of all rows , most of them are greater than or equal to 70 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; score ; 70 }, interpretation: the sum of the attendance record of all rows is 476,381 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 476,381 }, interpretation: the sum of the attendance record of all rows is 476,381 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 476,381 }, interpretation: for the headquarters records of all rows , most of them fuzzily match to sweden .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; headquarters ; sweden }, interpretation: for the headquarters records of all rows , most of them fuzzily match to sweden .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; headquarters ; sweden }, interpretation: for the round records of all rows , all of them are equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; round ; 1 }, interpretation: for the round records of all rows , all of them are equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; round ; 1 }, interpretation: select the rows whose sp record fuzzily matches to 10 / 1 . select the row whose position record of these rows is 1st minimum . the jockey record of this row is richard johnson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; sp ; 10 / 1 } ; position ; 1 } ; jockey } ; richard johnson }, interpretation: select the rows whose sp record fuzzily matches to 10 / 1 . select the row whose position record of these rows is 1st minimum . the jockey record of this row is richard johnson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; sp ; 10 / 1 } ; position ; 1 } ; jockey } ; richard johnson }, interpretation: for the monounsaturated fat records of all rows , most of them are greater than or equal to 20 g .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; monounsaturated fat ; 20 g }, interpretation: for the monounsaturated fat records of all rows , most of them are greater than or equal to 20 g .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; monounsaturated fat ; 20 g }, interpretation: select the rows whose gold record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; 1 } } ; 2 }, interpretation: select the rows whose gold record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; 1 } } ; 2 }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: the sum of the rounds record of all rows is 122 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; rounds } ; 122 }, interpretation: the sum of the rounds record of all rows is 122 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; rounds } ; 122 }, interpretation: for the award ceremony records of all rows , most of them fuzzily match to drama desk award .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; award ceremony ; drama desk award }, interpretation: select the rows whose pos record fuzzily matches to dnf . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pos ; dnf } } ; 7 }, interpretation: select the rows whose pos record fuzzily matches to dnf . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pos ; dnf } } ; 7 }, interpretation: select the row whose no of installments record of all rows is 2nd maximum . the book series record of this row is the hardy boys .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; no of installments ; 2 } ; book series } ; the hardy boys }, interpretation: select the row whose no of installments record of all rows is 2nd maximum . the book series record of this row is the hardy boys .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; no of installments ; 2 } ; book series } ; the hardy boys }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: select the rows whose school record fuzzily matches to hawaii . there is only one such row in the table . the player record of this unqiue row is darrick branch .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school ; hawaii } } ; eq { hop { filter_eq { all_rows ; school ; hawaii } ; player } ; darrick branch } }, interpretation: select the rows whose school record fuzzily matches to hawaii . there is only one such row in the table . the player record of this unqiue row is darrick branch .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school ; hawaii } } ; eq { hop { filter_eq { all_rows ; school ; hawaii } ; player } ; darrick branch } }, interpretation: select the rows whose high rebounds record fuzzily matches to chris bosh . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; chris bosh } } ; 9 }, interpretation: select the rows whose high rebounds record fuzzily matches to chris bosh . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; chris bosh } } ; 9 }, interpretation: select the rows whose opponent record fuzzily matches to chicago bears . select the row whose date record of these rows is 2nd minimum . the attendance record of this row is 47475 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; chicago bears } ; date ; 2 } ; attendance } ; 47475 }, interpretation: select the rows whose opponent record fuzzily matches to chicago bears . select the row whose date record of these rows is 2nd minimum . the attendance record of this row is 47475 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; chicago bears } ; date ; 2 } ; attendance } ; 47475 }, interpretation: the average of the goals record of all rows is 26.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 26.2 }, interpretation: the average of the goals record of all rows is 26.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 26.2 }, interpretation: the average of the episode record of all rows is 32.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; episode } ; 32.5 }, interpretation: the average of the episode record of all rows is 32.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; episode } ; 32.5 }, interpretation: select the rows whose team record fuzzily matches to east germany . take the lost record of this row . select the rows whose team record fuzzily matches to poland . take the lost record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; east germany } ; lost } ; hop { filter_eq { all_rows ; team ; poland } ; lost } }, interpretation: select the rows whose team record fuzzily matches to east germany . take the lost record of this row . select the rows whose team record fuzzily matches to poland . take the lost record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; east germany } ; lost } ; hop { filter_eq { all_rows ; team ; poland } ; lost } }, interpretation: select the rows whose manufacturer record fuzzily matches to suzuki . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manufacturer ; suzuki } } ; 2 }, interpretation: select the rows whose manufacturer record fuzzily matches to suzuki . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manufacturer ; suzuki } } ; 2 }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is united states ( usa ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; united states ( usa ) }, interpretation: select the rows whose team ( league ) record fuzzily matches to london knights . there is only one such row in the table . the player record of this unqiue row is jim sandlak .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ( league ) ; london knights } } ; eq { hop { filter_eq { all_rows ; team ( league ) ; london knights } ; player } ; jim sandlak } }, interpretation: select the rows whose team ( league ) record fuzzily matches to london knights . there is only one such row in the table . the player record of this unqiue row is jim sandlak .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ( league ) ; london knights } } ; eq { hop { filter_eq { all_rows ; team ( league ) ; london knights } ; player } ; jim sandlak } }, interpretation: for the position records of all rows , most of them fuzzily match to defence .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; defence }, interpretation: for the position records of all rows , most of them fuzzily match to defence .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; defence }, interpretation: select the rows whose tournament record fuzzily matches to jordan fa shield . take the draws record of this row . select the rows whose tournament record fuzzily matches to jordan super cup . take the draws record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; jordan fa shield } ; draws } ; hop { filter_eq { all_rows ; tournament ; jordan super cup } ; draws } }, interpretation: select the rows whose tournament record fuzzily matches to jordan fa shield . take the draws record of this row . select the rows whose tournament record fuzzily matches to jordan super cup . take the draws record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; jordan fa shield } ; draws } ; hop { filter_eq { all_rows ; tournament ; jordan super cup } ; draws } }, interpretation: select the rows whose cfl team record fuzzily matches to hamilton tiger - cats . take the pick record of this row . select the rows whose cfl team record fuzzily matches to british columbia lions . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; cfl team ; hamilton tiger - cats } ; pick } ; hop { filter_eq { all_rows ; cfl team ; british columbia lions } ; pick } }, interpretation: select the rows whose cfl team record fuzzily matches to hamilton tiger - cats . take the pick record of this row . select the rows whose cfl team record fuzzily matches to british columbia lions . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; cfl team ; hamilton tiger - cats } ; pick } ; hop { filter_eq { all_rows ; cfl team ; british columbia lions } ; pick } }, interpretation: select the rows whose position record fuzzily matches to running back . among these rows , select the rows whose round record is greater than 4 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; position ; running back } ; round ; 4 } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to running back . among these rows , select the rows whose round record is greater than 4 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; position ; running back } ; round ; 4 } } ; 3 }, interpretation: select the rows whose chassis record fuzzily matches to lola . there is only one such row in the table . the year record of this unqiue row is 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; lola } } ; eq { hop { filter_eq { all_rows ; chassis ; lola } ; year } ; 1993 } }, interpretation: select the rows whose chassis record fuzzily matches to lola . there is only one such row in the table . the year record of this unqiue row is 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; lola } } ; eq { hop { filter_eq { all_rows ; chassis ; lola } ; year } ; 1993 } }, interpretation: the average of the average ratings record of all rows is 11.76 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; average ratings } ; 11.76 % }, interpretation: the average of the average ratings record of all rows is 11.76 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; average ratings } ; 11.76 % }, interpretation: select the row whose years for jazz record of all rows is 2nd minimum . the player record of this row is j j anderson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; years for jazz ; 2 } ; player } ; j j anderson }, interpretation: select the row whose years for jazz record of all rows is 2nd minimum . the player record of this row is j j anderson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; years for jazz ; 2 } ; player } ; j j anderson }, interpretation: select the rows whose nation record fuzzily matches to ecuador . take the 2011 ( imf ) record of this row . select the rows whose nation record fuzzily matches to paraguay . take the 2011 ( imf ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; ecuador } ; 2011 ( imf ) } ; hop { filter_eq { all_rows ; nation ; paraguay } ; 2011 ( imf ) } }, interpretation: select the rows whose nation record fuzzily matches to ecuador . take the 2011 ( imf ) record of this row . select the rows whose nation record fuzzily matches to paraguay . take the 2011 ( imf ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; ecuador } ; 2011 ( imf ) } ; hop { filter_eq { all_rows ; nation ; paraguay } ; 2011 ( imf ) } }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: the average of the high points record of all rows is 27-28 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; high points } ; 27-28 }, interpretation: the average of the high points record of all rows is 27-28 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; high points } ; 27-28 }, interpretation: select the row whose silver record of all rows is 1st maximum . the nation record of this row is france .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 1 } ; nation } ; france }, interpretation: select the row whose silver record of all rows is 1st maximum . the nation record of this row is france .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 1 } ; nation } ; france }, interpretation: select the row whose negotiable debt at mid - 2005 ( us dollar bn equivalent ) record of all rows is 2nd maximum . the currency record of this row is us dollar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; negotiable debt at mid - 2005 ( us dollar bn equivalent ) ; 2 } ; currency } ; us dollar }, interpretation: select the row whose negotiable debt at mid - 2005 ( us dollar bn equivalent ) record of all rows is 2nd maximum . the currency record of this row is us dollar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; negotiable debt at mid - 2005 ( us dollar bn equivalent ) ; 2 } ; currency } ; us dollar }, interpretation: select the rows whose score record fuzzily matches to 1 - 0 . among these rows , select the rows whose attendance record fuzzily matches to february . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; 1 - 0 } ; attendance ; february } } ; 2 }, interpretation: select the rows whose score record fuzzily matches to 1 - 0 . among these rows , select the rows whose attendance record fuzzily matches to february . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; 1 - 0 } ; attendance ; february } } ; 2 }, interpretation: select the rows whose lost record is equal to 17 . there is only one such row in the table . the club record of this unqiue row is milford haven rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lost ; 17 } } ; eq { hop { filter_eq { all_rows ; lost ; 17 } ; club } ; milford haven rfc } }, interpretation: select the rows whose lost record is equal to 17 . there is only one such row in the table . the club record of this unqiue row is milford haven rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lost ; 17 } } ; eq { hop { filter_eq { all_rows ; lost ; 17 } ; club } ; milford haven rfc } }, interpretation: select the rows whose name record fuzzily matches to adam gilchrist ( wk ) . take the innings record of this row . select the rows whose name record fuzzily matches to matthew hayden . take the innings record of this row . the first record is greater than the second record . the innings record of the first row is 8 . the innings record of the second row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; adam gilchrist ( wk ) } ; innings } ; hop { filter_eq { all_rows ; name ; matthew hayden } ; innings } } ; and { eq { hop { filter_eq { all_rows ; name ; adam gilchrist ( wk ) } ; innings } ; 8 } ; eq { hop { filter_eq { all_rows ; name ; matthew hayden } ; innings } ; 6 } } }, interpretation: select the rows whose name record fuzzily matches to adam gilchrist ( wk ) . take the innings record of this row . select the rows whose name record fuzzily matches to matthew hayden . take the innings record of this row . the first record is greater than the second record . the innings record of the first row is 8 . the innings record of the second row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; adam gilchrist ( wk ) } ; innings } ; hop { filter_eq { all_rows ; name ; matthew hayden } ; innings } } ; and { eq { hop { filter_eq { all_rows ; name ; adam gilchrist ( wk ) } ; innings } ; 8 } ; eq { hop { filter_eq { all_rows ; name ; matthew hayden } ; innings } ; 6 } } }, interpretation: select the rows whose winning team record fuzzily matches to texas . among these rows , select the rows whose winning pitcher record fuzzily matches to chris young . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winning team ; texas } ; winning pitcher ; chris young } } ; 2 }, interpretation: select the rows whose winning team record fuzzily matches to texas . among these rows , select the rows whose winning pitcher record fuzzily matches to chris young . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winning team ; texas } ; winning pitcher ; chris young } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to february 2 . take the attendance record of this row . select the rows whose date record fuzzily matches to february 29 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; february 2 } ; attendance } ; hop { filter_eq { all_rows ; date ; february 29 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to february 2 . take the attendance record of this row . select the rows whose date record fuzzily matches to february 29 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; february 2 } ; attendance } ; hop { filter_eq { all_rows ; date ; february 29 } ; attendance } }, interpretation: select the row whose position in 1992 record of all rows is minimum . the team record of this row is dinamo minsk .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; position in 1992 } ; team } ; dinamo minsk }, interpretation: select the row whose position in 1992 record of all rows is minimum . the team record of this row is dinamo minsk .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; position in 1992 } ; team } ; dinamo minsk }, interpretation: select the rows whose class record fuzzily matches to 6ai . take the quantity record of this row . select the rows whose class record fuzzily matches to 6d . take the quantity record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; class ; 6ai } ; quantity } ; hop { filter_eq { all_rows ; class ; 6d } ; quantity } }, interpretation: select the rows whose class record fuzzily matches to 6ai . take the quantity record of this row . select the rows whose class record fuzzily matches to 6d . take the quantity record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; class ; 6ai } ; quantity } ; hop { filter_eq { all_rows ; class ; 6d } ; quantity } }, interpretation: select the rows whose release date record fuzzily matches to 2004 . there is only one such row in the table . the version record of this unqiue row is 4.10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; release date ; 2004 } } ; eq { hop { filter_eq { all_rows ; release date ; 2004 } ; version } ; 4.10 } }, interpretation: select the rows whose release date record fuzzily matches to 2004 . there is only one such row in the table . the version record of this unqiue row is 4.10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; release date ; 2004 } } ; eq { hop { filter_eq { all_rows ; release date ; 2004 } ; version } ; 4.10 } }, interpretation: select the rows whose constellation record fuzzily matches to ursa major . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constellation ; ursa major } } ; 3 }, interpretation: select the rows whose constellation record fuzzily matches to ursa major . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constellation ; ursa major } } ; 3 }, interpretation: the average of the roll record of all rows is 338.66 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; roll } ; 338.66 }, interpretation: the average of the roll record of all rows is 338.66 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; roll } ; 338.66 }, interpretation: select the row whose registered voters record of all rows is 3rd maximum . the city record of this row is encinitas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; registered voters ; 3 } ; city } ; encinitas }, interpretation: select the row whose registered voters record of all rows is 3rd maximum . the city record of this row is encinitas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; registered voters ; 3 } ; city } ; encinitas }, interpretation: for the time records of all rows , most of them are less than 4:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; time ; 4:00 }, interpretation: for the time records of all rows , most of them are less than 4:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; time ; 4:00 }, interpretation: select the rows whose tournament record fuzzily matches to us open . take the events record of this row . select the rows whose tournament record fuzzily matches to pga championship . take the events record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; us open } ; events } ; hop { filter_eq { all_rows ; tournament ; pga championship } ; events } }, interpretation: select the rows whose tournament record fuzzily matches to us open . take the events record of this row . select the rows whose tournament record fuzzily matches to pga championship . take the events record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tournament ; us open } ; events } ; hop { filter_eq { all_rows ; tournament ; pga championship } ; events } }, interpretation: select the rows whose to par record fuzzily matches to - 9 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; - 9 } } ; 4 }, interpretation: select the rows whose to par record fuzzily matches to - 9 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; - 9 } } ; 4 }, interpretation: for the high points records of all rows , most of them fuzzily match to jason richardson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; jason richardson }, interpretation: for the high points records of all rows , most of them fuzzily match to jason richardson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; jason richardson }, interpretation: for the founded records of all rows , most of them fuzzily match to 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; founded ; 18 }, interpretation: for the founded records of all rows , most of them fuzzily match to 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; founded ; 18 }, interpretation: the average of the home team score record of all rows is 15.18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 15.18 }, interpretation: the average of the home team score record of all rows is 15.18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 15.18 }, interpretation: select the rows whose nbr class record fuzzily matches to 251 . take the total record of this row . select the rows whose nbr class record fuzzily matches to 229 . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nbr class ; 251 } ; total } ; hop { filter_eq { all_rows ; nbr class ; 229 } ; total } }, interpretation: select the rows whose nbr class record fuzzily matches to 251 . take the total record of this row . select the rows whose nbr class record fuzzily matches to 229 . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nbr class ; 251 } ; total } ; hop { filter_eq { all_rows ; nbr class ; 229 } ; total } }, interpretation: select the rows whose points record is greater than or equal to 55 . among these rows , select the rows whose opponent record fuzzily matches to new york rangers . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater_eq { all_rows ; points ; 55 } ; opponent ; new york rangers } } ; 2 }, interpretation: select the rows whose points record is greater than or equal to 55 . among these rows , select the rows whose opponent record fuzzily matches to new york rangers . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater_eq { all_rows ; points ; 55 } ; opponent ; new york rangers } } ; 2 }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the to par record of these rows is 3.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; to par } ; 3.4 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the to par record of these rows is 3.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; to par } ; 3.4 }, interpretation: select the rows whose week record fuzzily matches to 1 . take the attendance record of this row . select the rows whose week record fuzzily matches to 15 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; week ; 1 } ; attendance } ; hop { filter_eq { all_rows ; week ; 15 } ; attendance } }, interpretation: select the rows whose week record fuzzily matches to 1 . take the attendance record of this row . select the rows whose week record fuzzily matches to 15 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; week ; 1 } ; attendance } ; hop { filter_eq { all_rows ; week ; 15 } ; attendance } }, interpretation: select the rows whose format record fuzzily matches to country . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; country } } ; 2 }, interpretation: select the rows whose format record fuzzily matches to country . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; country } } ; 2 }, interpretation: select the row whose crowd record of all rows is maximum . the date record of this row is friday , 1 august .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; date } ; friday , 1 august }, interpretation: select the row whose crowd record of all rows is maximum . the date record of this row is friday , 1 august .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; date } ; friday , 1 august }, interpretation: select the rows whose location attendance record fuzzily matches to at & t center . the average of the location attendance record of these rows is 18581 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; location attendance ; at & t center } ; location attendance } ; 18581 }, interpretation: select the rows whose location attendance record fuzzily matches to at & t center . the average of the location attendance record of these rows is 18581 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; location attendance ; at & t center } ; location attendance } ; 18581 }, interpretation: select the rows whose hdtv record fuzzily matches to yes . there is only one such row in the table . the television service record of this unqiue row is satisfaction hd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; hdtv ; yes } } ; eq { hop { filter_eq { all_rows ; hdtv ; yes } ; television service } ; satisfaction hd } }, interpretation: select the rows whose hdtv record fuzzily matches to yes . there is only one such row in the table . the television service record of this unqiue row is satisfaction hd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; hdtv ; yes } } ; eq { hop { filter_eq { all_rows ; hdtv ; yes } ; television service } ; satisfaction hd } }, interpretation: select the rows whose crowd record is greater than 10000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; crowd ; 10000 } } ; 2 }, interpretation: select the rows whose crowd record is greater than 10000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; crowd ; 10000 } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to poland . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; location ; poland } }, interpretation: select the rows whose location record fuzzily matches to poland . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; location ; poland } }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 12 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 12 }, interpretation: select the row whose points record of all rows is maximum . the singer record of this row is olta boka .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; singer } ; olta boka }, interpretation: select the row whose points record of all rows is maximum . the singer record of this row is olta boka .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; singer } ; olta boka }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose score record fuzzily matches to 143 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; united states } ; score ; 143 } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose score record fuzzily matches to 143 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; united states } ; score ; 143 } } ; 2 }, interpretation: for the area ( km square ) records of all rows , most of them are greater than 40 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; area ( km square ) ; 40 }, interpretation: for the area ( km square ) records of all rows , most of them are greater than 40 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; area ( km square ) ; 40 }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is denver broncos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; denver broncos }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is denver broncos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; denver broncos }, interpretation: select the row whose events record of all rows is 2nd maximum . the tournament record of this row is pga championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; events ; 2 } ; tournament } ; pga championship }, interpretation: select the row whose events record of all rows is 2nd maximum . the tournament record of this row is pga championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; events ; 2 } ; tournament } ; pga championship }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: for the draws records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; draws ; 0 }, interpretation: for the draws records of all rows , all of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; draws ; 0 }, interpretation: the average of the t c ( k ) record of all rows is 99.8 degrees .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; t c ( k ) } ; 99.8 degrees }, interpretation: the average of the t c ( k ) record of all rows is 99.8 degrees .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; t c ( k ) } ; 99.8 degrees }, interpretation: select the rows whose outcome of election record fuzzily matches to ndc opposition . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome of election ; ndc opposition } } ; 2 }, interpretation: select the rows whose outcome of election record fuzzily matches to ndc opposition . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome of election ; ndc opposition } } ; 2 }, interpretation: select the row whose score record of all rows is 2nd maximum . the date record of this row is march 13 . the opponent record of this row is baltimore bullets .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmax { all_rows ; score ; 2 } ; date } ; march 13 } ; eq { hop { nth_argmax { all_rows ; score ; 2 } ; opponent } ; baltimore bullets } }, interpretation: select the row whose score record of all rows is 2nd maximum . the date record of this row is march 13 . the opponent record of this row is baltimore bullets .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmax { all_rows ; score ; 2 } ; date } ; march 13 } ; eq { hop { nth_argmax { all_rows ; score ; 2 } ; opponent } ; baltimore bullets } }, interpretation: select the rows whose recorded record fuzzily matches to 1980 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; recorded ; 1980 } }, interpretation: select the rows whose recorded record fuzzily matches to 1980 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; recorded ; 1980 } }, interpretation: the average of the frequency record of all rows is 2200 mhz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; frequency } ; 2200 mhz }, interpretation: the average of the frequency record of all rows is 2200 mhz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; frequency } ; 2200 mhz }, interpretation: select the row whose commissioned record of all rows is 1st minimum . the name record of this row is cygnet .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; commissioned ; 1 } ; name } ; cygnet }, interpretation: select the row whose commissioned record of all rows is 1st minimum . the name record of this row is cygnet .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; commissioned ; 1 } ; name } ; cygnet }, interpretation: select the rows whose area in 1000 km square ( 1930 ) record is greater than 30 . among these rows , select the rows whose population in 1000 ( 1931 ) record is greater than 2000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; area in 1000 km square ( 1930 ) ; 30 } ; population in 1000 ( 1931 ) ; 2000 } } ; 2 }, interpretation: select the rows whose area in 1000 km square ( 1930 ) record is greater than 30 . among these rows , select the rows whose population in 1000 ( 1931 ) record is greater than 2000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; area in 1000 km square ( 1930 ) ; 30 } ; population in 1000 ( 1931 ) ; 2000 } } ; 2 }, interpretation: select the row whose transfer fee record of all rows is maximum . the name record of this row is ferdinand .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; transfer fee } ; name } ; ferdinand }, interpretation: select the row whose transfer fee record of all rows is maximum . the name record of this row is ferdinand .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; transfer fee } ; name } ; ferdinand }, interpretation: select the rows whose party record fuzzily matches to independent . there is only one such row in the table . the candidate record of this unqiue row is peter law .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; independent } } ; eq { hop { filter_eq { all_rows ; party ; independent } ; candidate } ; peter law } }, interpretation: select the rows whose party record fuzzily matches to independent . there is only one such row in the table . the candidate record of this unqiue row is peter law .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; independent } } ; eq { hop { filter_eq { all_rows ; party ; independent } ; candidate } ; peter law } }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the score record of these rows is 139.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; score } ; 139.5 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the score record of these rows is 139.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; score } ; 139.5 }, interpretation: select the rows whose area record fuzzily matches to featherston . select the row whose roll record of these rows is maximum . the name record of this row is st teresa 's school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; area ; featherston } ; roll } ; name } ; st teresa 's school }, interpretation: select the rows whose area record fuzzily matches to featherston . select the row whose roll record of these rows is maximum . the name record of this row is st teresa 's school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; area ; featherston } ; roll } ; name } ; st teresa 's school }, interpretation: select the rows whose type record fuzzily matches to embankment . for the height ( m ) records of these rows , most of them are less than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; type ; embankment } ; height ( m ) ; 100 }, interpretation: select the rows whose type record fuzzily matches to embankment . for the height ( m ) records of these rows , most of them are less than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; type ; embankment } ; height ( m ) ; 100 }, interpretation: select the rows whose municipality record fuzzily matches to tecate . take the area ( km2 ) record of this row . select the rows whose municipality record fuzzily matches to tijuana . take the area ( km2 ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; municipality ; tecate } ; area ( km2 ) } ; hop { filter_eq { all_rows ; municipality ; tijuana } ; area ( km2 ) } }, interpretation: select the rows whose municipality record fuzzily matches to tecate . take the area ( km2 ) record of this row . select the rows whose municipality record fuzzily matches to tijuana . take the area ( km2 ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; municipality ; tecate } ; area ( km2 ) } ; hop { filter_eq { all_rows ; municipality ; tijuana } ; area ( km2 ) } }, interpretation: select the rows whose opponent record fuzzily matches to denver broncos . take the date record of this row . select the rows whose opponent record fuzzily matches to new york titans . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; denver broncos } ; date } ; hop { filter_eq { all_rows ; opponent ; new york titans } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to denver broncos . take the date record of this row . select the rows whose opponent record fuzzily matches to new york titans . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; denver broncos } ; date } ; hop { filter_eq { all_rows ; opponent ; new york titans } ; date } }, interpretation: select the rows whose class record fuzzily matches to d . the average of the quantity record of these rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; class ; d } ; quantity } ; 48 }, interpretation: select the rows whose class record fuzzily matches to d . the average of the quantity record of these rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; class ; d } ; quantity } ; 48 }, interpretation: select the rows whose year opened record is less than 1954 . there is only one such row in the table . the facility record of this unqiue row is monroe correctional complex ( mcc ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; year opened ; 1954 } } ; eq { hop { filter_less { all_rows ; year opened ; 1954 } ; facility } ; monroe correctional complex ( mcc ) } }, interpretation: select the rows whose year opened record is less than 1954 . there is only one such row in the table . the facility record of this unqiue row is monroe correctional complex ( mcc ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; year opened ; 1954 } } ; eq { hop { filter_less { all_rows ; year opened ; 1954 } ; facility } ; monroe correctional complex ( mcc ) } }, interpretation: the sum of the total record of all rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 48 }, interpretation: the sum of the total record of all rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 48 }, interpretation: select the rows whose series record fuzzily matches to gp2 series . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; series ; gp2 series } } ; 2 }, interpretation: select the rows whose series record fuzzily matches to gp2 series . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; series ; gp2 series } } ; 2 }, interpretation: the average of the points record of all rows is 14.56 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 14.56 }, interpretation: the average of the points record of all rows is 14.56 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 14.56 }, interpretation: select the rows whose directed by record fuzzily matches to brent woods . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; brent woods } } ; 2 }, interpretation: select the rows whose directed by record fuzzily matches to brent woods . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; brent woods } } ; 2 }, interpretation: the sum of the assists record of all rows is 54 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; assists } ; 54 }, interpretation: the sum of the assists record of all rows is 54 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; assists } ; 54 }, interpretation: select the row whose wins record of all rows is maximum . the constructor record of this row is citro\u00ebn total world rally team .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; constructor } ; citro\u00ebn total world rally team }, interpretation: select the row whose wins record of all rows is maximum . the constructor record of this row is citro\u00ebn total world rally team .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; constructor } ; citro\u00ebn total world rally team }, interpretation: select the row whose pop ( 2010 ) record of all rows is 2nd maximum . the township record of this row is ypsilanti .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; pop ( 2010 ) ; 2 } ; township } ; ypsilanti }, interpretation: select the row whose pop ( 2010 ) record of all rows is 2nd maximum . the township record of this row is ypsilanti .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; pop ( 2010 ) ; 2 } ; township } ; ypsilanti }, interpretation: for the vacator records of all rows , most of them fuzzily match to d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; vacator ; d }, interpretation: for the vacator records of all rows , most of them fuzzily match to d .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; vacator ; d }, interpretation: for the venue records of all rows , most of them fuzzily match to johannesburg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; johannesburg }, interpretation: for the venue records of all rows , most of them fuzzily match to johannesburg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; johannesburg }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: select the rows whose round of 16 record does not match to did not advance . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; round of 16 ; did not advance } } ; 4 }, interpretation: select the rows whose round of 16 record does not match to did not advance . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; round of 16 ; did not advance } } ; 4 }, interpretation: select the rows whose engine ( s ) record fuzzily matches to yamaha . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine ( s ) ; yamaha } } ; eq { hop { filter_eq { all_rows ; engine ( s ) ; yamaha } ; year } ; 1989 } }, interpretation: select the rows whose engine ( s ) record fuzzily matches to yamaha . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine ( s ) ; yamaha } } ; eq { hop { filter_eq { all_rows ; engine ( s ) ; yamaha } ; year } ; 1989 } }, interpretation: for the gdp ( billion us ) records of all rows , most of them are greater than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; gdp ( billion us ) ; 100 }, interpretation: for the gdp ( billion us ) records of all rows , most of them are greater than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; gdp ( billion us ) ; 100 }, interpretation: select the row whose enrollment record of all rows is 2nd maximum . the school record of this row is stony brook university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ; 2 } ; school } ; stony brook university }, interpretation: select the row whose enrollment record of all rows is 2nd maximum . the school record of this row is stony brook university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ; 2 } ; school } ; stony brook university }, interpretation: select the row whose away team score record of all rows is 2nd maximum . the home team record of this row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; away team score ; 2 } ; home team } ; collingwood }, interpretation: select the row whose away team score record of all rows is 2nd maximum . the home team record of this row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; away team score ; 2 } ; home team } ; collingwood }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is ralph a gamble .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; ralph a gamble }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is ralph a gamble .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; ralph a gamble }, interpretation: select the rows whose transmitter record fuzzily matches to mullaghanish . take the 2fm ( mhz ) record of this row . select the rows whose transmitter record fuzzily matches to mount leinster . take the 2fm ( mhz ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; transmitter ; mullaghanish } ; 2fm ( mhz ) } ; hop { filter_eq { all_rows ; transmitter ; mount leinster } ; 2fm ( mhz ) } }, interpretation: select the rows whose transmitter record fuzzily matches to mullaghanish . take the 2fm ( mhz ) record of this row . select the rows whose transmitter record fuzzily matches to mount leinster . take the 2fm ( mhz ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; transmitter ; mullaghanish } ; 2fm ( mhz ) } ; hop { filter_eq { all_rows ; transmitter ; mount leinster } ; 2fm ( mhz ) } }, interpretation: select the rows whose result record fuzzily matches to made january shortlist . there is only one such row in the table . the film title used in nomination record of this unqiue row is samson and delilah .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; made january shortlist } } ; eq { hop { filter_eq { all_rows ; result ; made january shortlist } ; film title used in nomination } ; samson and delilah } }, interpretation: select the rows whose result record fuzzily matches to made january shortlist . there is only one such row in the table . the film title used in nomination record of this unqiue row is samson and delilah .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; made january shortlist } } ; eq { hop { filter_eq { all_rows ; result ; made january shortlist } ; film title used in nomination } ; samson and delilah } }, interpretation: select the rows whose year of release record is equal to 1979 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year of release ; 1979 } } ; 2 }, interpretation: select the rows whose year of release record is equal to 1979 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year of release ; 1979 } } ; 2 }, interpretation: select the rows whose co - singers record fuzzily matches to solo . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; co - singers ; solo } } ; 6 }, interpretation: select the rows whose co - singers record fuzzily matches to solo . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; co - singers ; solo } } ; 6 }, interpretation: select the rows whose label record fuzzily matches to rock records . among these rows , select the rows whose release date record fuzzily matches to 2000 . there is only one such row in the table . the english title record of this unqiue row is courage .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; label ; rock records } ; release date ; 2000 } } ; eq { hop { filter_eq { filter_eq { all_rows ; label ; rock records } ; release date ; 2000 } ; english title } ; courage } }, interpretation: select the rows whose label record fuzzily matches to rock records . among these rows , select the rows whose release date record fuzzily matches to 2000 . there is only one such row in the table . the english title record of this unqiue row is courage .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; label ; rock records } ; release date ; 2000 } } ; eq { hop { filter_eq { filter_eq { all_rows ; label ; rock records } ; release date ; 2000 } ; english title } ; courage } }, interpretation: select the rows whose year record is equal to 1967 . the sum of the points record of these rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1967 } ; points } ; 2 }, interpretation: select the rows whose year record is equal to 1967 . the sum of the points record of these rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1967 } ; points } ; 2 }, interpretation: the average of the goals record of all rows is 63.78 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 63.78 }, interpretation: the average of the goals record of all rows is 63.78 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 63.78 }, interpretation: select the rows whose headquarters record fuzzily matches to united kingdom . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; headquarters ; united kingdom } } ; 2 }, interpretation: select the rows whose headquarters record fuzzily matches to united kingdom . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; headquarters ; united kingdom } } ; 2 }, interpretation: select the rows whose player record fuzzily matches to linden rowat ( g ) . take the round record of this row . select the rows whose player record fuzzily matches to dwight king ( c ) . take the round record of this row . the first record is 1 larger than the second record . the round record of the first row is 5 . the round record of the second row is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; player ; linden rowat ( g ) } ; round } ; hop { filter_eq { all_rows ; player ; dwight king ( c ) } ; round } } ; 1 } ; and { eq { hop { filter_eq { all_rows ; player ; linden rowat ( g ) } ; round } ; 5 } ; eq { hop { filter_eq { all_rows ; player ; dwight king ( c ) } ; round } ; 4 } } }, interpretation: select the rows whose player record fuzzily matches to linden rowat ( g ) . take the round record of this row . select the rows whose player record fuzzily matches to dwight king ( c ) . take the round record of this row . the first record is 1 larger than the second record . the round record of the first row is 5 . the round record of the second row is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; player ; linden rowat ( g ) } ; round } ; hop { filter_eq { all_rows ; player ; dwight king ( c ) } ; round } } ; 1 } ; and { eq { hop { filter_eq { all_rows ; player ; linden rowat ( g ) } ; round } ; 5 } ; eq { hop { filter_eq { all_rows ; player ; dwight king ( c ) } ; round } ; 4 } } }, interpretation: select the row whose originalairdate record of all rows is 2nd minimum . the title record of this row is a bright and shiny future .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; originalairdate ; 2 } ; title } ; a bright and shiny future }, interpretation: select the row whose originalairdate record of all rows is 2nd minimum . the title record of this row is a bright and shiny future .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; originalairdate ; 2 } ; title } ; a bright and shiny future }, interpretation: the average of the attendance record of all rows is 58252 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 58252 }, interpretation: the average of the attendance record of all rows is 58252 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 58252 }, interpretation: select the row whose 1910 census record of all rows is 3rd maximum . the city record of this row is fuzan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; 1910 census ; 3 } ; city } ; fuzan }, interpretation: select the row whose 1910 census record of all rows is 3rd maximum . the city record of this row is fuzan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; 1910 census ; 3 } ; city } ; fuzan }, interpretation: select the rows whose directed by record fuzzily matches to guy bee . there is only one such row in the table . the title record of this unqiue row is family matters .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; guy bee } } ; eq { hop { filter_eq { all_rows ; directed by ; guy bee } ; title } ; family matters } }, interpretation: select the rows whose directed by record fuzzily matches to guy bee . there is only one such row in the table . the title record of this unqiue row is family matters .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; guy bee } } ; eq { hop { filter_eq { all_rows ; directed by ; guy bee } ; title } ; family matters } }, interpretation: select the rows whose location record fuzzily matches to japan . among these rows , select the rows whose res record fuzzily matches to win . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; japan } ; res ; win } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to japan . among these rows , select the rows whose res record fuzzily matches to win . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; japan } ; res ; win } } ; 3 }, interpretation: for the released records of all rows , most of them fuzzily match to 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; released ; 2012 }, interpretation: for the released records of all rows , most of them fuzzily match to 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; released ; 2012 }, interpretation: select the rows whose player record fuzzily matches to fedor dmitriev . take the year born record of this row . select the rows whose player record fuzzily matches to anton ponkrashov . take the year born record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; fedor dmitriev } ; year born } ; hop { filter_eq { all_rows ; player ; anton ponkrashov } ; year born } }, interpretation: select the rows whose player record fuzzily matches to fedor dmitriev . take the year born record of this row . select the rows whose player record fuzzily matches to anton ponkrashov . take the year born record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; fedor dmitriev } ; year born } ; hop { filter_eq { all_rows ; player ; anton ponkrashov } ; year born } }, interpretation: select the rows whose sport record fuzzily matches to soccer . take the 1st tournament record of this row . select the rows whose sport record fuzzily matches to bowling . take the 1st tournament record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; sport ; soccer } ; 1st tournament } ; hop { filter_eq { all_rows ; sport ; bowling } ; 1st tournament } }, interpretation: select the rows whose sport record fuzzily matches to soccer . take the 1st tournament record of this row . select the rows whose sport record fuzzily matches to bowling . take the 1st tournament record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; sport ; soccer } ; 1st tournament } ; hop { filter_eq { all_rows ; sport ; bowling } ; 1st tournament } }, interpretation: select the rows whose season record fuzzily matches to 2005 . take the races record of this row . select the rows whose season record fuzzily matches to 2012 . take the races record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2005 } ; races } ; hop { filter_eq { all_rows ; season ; 2012 } ; races } }, interpretation: select the rows whose season record fuzzily matches to 2005 . take the races record of this row . select the rows whose season record fuzzily matches to 2012 . take the races record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2005 } ; races } ; hop { filter_eq { all_rows ; season ; 2012 } ; races } }, interpretation: select the rows whose gold record is equal to - . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; - } } ; 2 }, interpretation: select the rows whose gold record is equal to - . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; - } } ; 2 }, interpretation: select the rows whose incumbent record fuzzily matches to edward everett eslick . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to gordon browning . take the first elected record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; incumbent ; edward everett eslick } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; gordon browning } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to edward everett eslick . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to gordon browning . take the first elected record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; incumbent ; edward everett eslick } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; gordon browning } ; first elected } }, interpretation: select the rows whose host record fuzzily matches to jack arute . take the year record of this row . select the rows whose host record fuzzily matches to allen bestwick . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; host ; jack arute } ; year } ; hop { filter_eq { all_rows ; host ; allen bestwick } ; year } }, interpretation: select the rows whose host record fuzzily matches to jack arute . take the year record of this row . select the rows whose host record fuzzily matches to allen bestwick . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; host ; jack arute } ; year } ; hop { filter_eq { all_rows ; host ; allen bestwick } ; year } }, interpretation: select the rows whose position record fuzzily matches to centre - left . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; centre - left } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to centre - left . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; centre - left } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to november . the number of such rows is 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; november } } ; 16 }, interpretation: select the rows whose date record fuzzily matches to november . the number of such rows is 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; november } } ; 16 }, interpretation: select the rows whose matches record is greater than 200 . among these rows , select the rows whose innings record is greater than 250 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; matches ; 200 } ; innings ; 250 } } ; 3 }, interpretation: select the rows whose matches record is greater than 200 . among these rows , select the rows whose innings record is greater than 250 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; matches ; 200 } ; innings ; 250 } } ; 3 }, interpretation: select the row whose uk viewers ( million ) record of all rows is 5th maximum . the title record of this row is episode 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; uk viewers ( million ) ; 5 } ; title } ; episode 4 }, interpretation: select the row whose uk viewers ( million ) record of all rows is 5th maximum . the title record of this row is episode 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; uk viewers ( million ) ; 5 } ; title } ; episode 4 }, interpretation: select the rows whose name record fuzzily matches to robert childress . take the round record of this row . select the rows whose name record fuzzily matches to ivey armstrong . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; robert childress } ; round } ; hop { filter_eq { all_rows ; name ; ivey armstrong } ; round } }, interpretation: select the rows whose name record fuzzily matches to robert childress . take the round record of this row . select the rows whose name record fuzzily matches to ivey armstrong . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; robert childress } ; round } ; hop { filter_eq { all_rows ; name ; ivey armstrong } ; round } }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is lake oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; lake oval }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is lake oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; lake oval }, interpretation: select the row whose place record of all rows is minimum . the player record of this row is gary hallberg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; place } ; player } ; gary hallberg }, interpretation: select the row whose place record of all rows is minimum . the player record of this row is gary hallberg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; place } ; player } ; gary hallberg }, interpretation: select the rows whose club record fuzzily matches to sporting de gij\u00f3n . take the points record of this row . select the rows whose club record fuzzily matches to c\u00e1diz cf . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; sporting de gij\u00f3n } ; points } ; hop { filter_eq { all_rows ; club ; c\u00e1diz cf } ; points } }, interpretation: select the rows whose club record fuzzily matches to sporting de gij\u00f3n . take the points record of this row . select the rows whose club record fuzzily matches to c\u00e1diz cf . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; sporting de gij\u00f3n } ; points } ; hop { filter_eq { all_rows ; club ; c\u00e1diz cf } ; points } }, interpretation: for the party leader records of all rows , all of them fuzzily match to habib bourguiba .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party leader ; habib bourguiba }, interpretation: for the party leader records of all rows , all of them fuzzily match to habib bourguiba .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party leader ; habib bourguiba }, interpretation: for the location records of all rows , most of them fuzzily match to busch stadium .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; busch stadium }, interpretation: for the location records of all rows , most of them fuzzily match to busch stadium .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; busch stadium }, interpretation: select the rows whose club record fuzzily matches to ca osasuna . take the wins record of this row . select the rows whose club record fuzzily matches to real oviedo . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; ca osasuna } ; wins } ; hop { filter_eq { all_rows ; club ; real oviedo } ; wins } }, interpretation: select the rows whose club record fuzzily matches to ca osasuna . take the wins record of this row . select the rows whose club record fuzzily matches to real oviedo . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; ca osasuna } ; wins } ; hop { filter_eq { all_rows ; club ; real oviedo } ; wins } }, interpretation: for the jockey records of all rows , most of them fuzzily match to c newitt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; jockey ; c newitt }, interpretation: for the jockey records of all rows , most of them fuzzily match to c newitt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; jockey ; c newitt }, interpretation: select the rows whose opponent record fuzzily matches to dallas cowboys . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; dallas cowboys } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to dallas cowboys . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; dallas cowboys } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to wide receiver . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; wide receiver } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to wide receiver . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; wide receiver } } ; 2 }, interpretation: for the laps records of all rows , most of them are equal to 47 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps ; 47 }, interpretation: for the laps records of all rows , most of them are equal to 47 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps ; 47 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 6 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 6 }, interpretation: select the rows whose lost record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lost ; 3 } } ; 2 }, interpretation: select the rows whose lost record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lost ; 3 } } ; 2 }, interpretation: select the rows whose power ( kw ) record fuzzily matches to 10 kw . among these rows , select the rows whose frequency record is greater than 100.0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; power ( kw ) ; 10 kw } ; frequency ; 100.0 } } ; 2 }, interpretation: select the rows whose power ( kw ) record fuzzily matches to 10 kw . among these rows , select the rows whose frequency record is greater than 100.0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; power ( kw ) ; 10 kw } ; frequency ; 100.0 } } ; 2 }, interpretation: select the rows whose player record fuzzily matches to chi chi rodriguez . take the wins record of this row . select the rows whose player record fuzzily matches to dave stockton . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; chi chi rodriguez } ; wins } ; hop { filter_eq { all_rows ; player ; dave stockton } ; wins } }, interpretation: select the rows whose player record fuzzily matches to chi chi rodriguez . take the wins record of this row . select the rows whose player record fuzzily matches to dave stockton . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; chi chi rodriguez } ; wins } ; hop { filter_eq { all_rows ; player ; dave stockton } ; wins } }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is buffalo bills .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; buffalo bills }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is buffalo bills .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; buffalo bills }, interpretation: select the rows whose nation record fuzzily matches to usa . the sum of the goals record of these rows is 74 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; nation ; usa } ; goals } ; 74 }, interpretation: select the rows whose nation record fuzzily matches to usa . the sum of the goals record of these rows is 74 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; nation ; usa } ; goals } ; 74 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 17 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 17 }, interpretation: select the rows whose original air date record fuzzily matches to february 2010 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; february 2010 } } ; 3 }, interpretation: select the rows whose original air date record fuzzily matches to february 2010 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; february 2010 } } ; 3 }, interpretation: select the row whose scoring average record of all rows is minimum . the year record of this row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; scoring average } ; year } ; 2007 }, interpretation: select the row whose scoring average record of all rows is minimum . the year record of this row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; scoring average } ; year } ; 2007 }, interpretation: select the rows whose laps record is equal to 46 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; laps ; 46 } } ; 4 }, interpretation: select the rows whose laps record is equal to 46 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; laps ; 46 } } ; 4 }, interpretation: select the rows whose ceased to be consort record fuzzily matches to husband 's death . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; ceased to be consort ; husband 's death } } ; 3 }, interpretation: select the rows whose ceased to be consort record fuzzily matches to husband 's death . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; ceased to be consort ; husband 's death } } ; 3 }, interpretation: select the rows whose team record fuzzily matches to tauro . take the goals scored record of this row . select the rows whose team record fuzzily matches to alianza . take the goals scored record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; tauro } ; goals scored } ; hop { filter_eq { all_rows ; team ; alianza } ; goals scored } }, interpretation: select the rows whose team record fuzzily matches to tauro . take the goals scored record of this row . select the rows whose team record fuzzily matches to alianza . take the goals scored record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; tauro } ; goals scored } ; hop { filter_eq { all_rows ; team ; alianza } ; goals scored } }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose first elected record is equal to 1944 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; first elected ; 1944 } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose first elected record is equal to 1944 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; first elected ; 1944 } } ; 2 }, interpretation: for the wins records of all rows , most of them are greater than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; wins ; 10 }, interpretation: for the wins records of all rows , most of them are greater than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; wins ; 10 }, interpretation: select the row whose react record of all rows is 5th minimum . the name record of this row is christopher williams .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; react ; 5 } ; name } ; christopher williams }, interpretation: select the row whose react record of all rows is 5th minimum . the name record of this row is christopher williams .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; react ; 5 } ; name } ; christopher williams }, interpretation: for the visitor records of all rows , most of them fuzzily match to san antonio spurs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; visitor ; san antonio spurs }, interpretation: for the visitor records of all rows , most of them fuzzily match to san antonio spurs .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; visitor ; san antonio spurs }, interpretation: select the rows whose tournament record fuzzily matches to paris . take the career win - loss record of this row . select the rows whose tournament record fuzzily matches to rome . take the career win - loss record of this row . the first record does not match to the second record . the career win - loss record of the first row is 6 - 4 . the career win - loss record of the second row is 0 - 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { not_eq { hop { filter_eq { all_rows ; tournament ; paris } ; career win - loss } ; hop { filter_eq { all_rows ; tournament ; rome } ; career win - loss } } ; and { eq { hop { filter_eq { all_rows ; tournament ; paris } ; career win - loss } ; 6 - 4 } ; eq { hop { filter_eq { all_rows ; tournament ; rome } ; career win - loss } ; 0 - 8 } } }, interpretation: select the rows whose tournament record fuzzily matches to paris . take the career win - loss record of this row . select the rows whose tournament record fuzzily matches to rome . take the career win - loss record of this row . the first record does not match to the second record . the career win - loss record of the first row is 6 - 4 . the career win - loss record of the second row is 0 - 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { not_eq { hop { filter_eq { all_rows ; tournament ; paris } ; career win - loss } ; hop { filter_eq { all_rows ; tournament ; rome } ; career win - loss } } ; and { eq { hop { filter_eq { all_rows ; tournament ; paris } ; career win - loss } ; 6 - 4 } ; eq { hop { filter_eq { all_rows ; tournament ; rome } ; career win - loss } ; 0 - 8 } } }, interpretation: select the rows whose style record fuzzily matches to country - western two - step . there is only one such row in the table . the couple record of this unqiue row is kherington payne mark kanemura .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; style ; country - western two - step } } ; eq { hop { filter_eq { all_rows ; style ; country - western two - step } ; couple } ; kherington payne mark kanemura } }, interpretation: select the rows whose style record fuzzily matches to country - western two - step . there is only one such row in the table . the couple record of this unqiue row is kherington payne mark kanemura .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; style ; country - western two - step } } ; eq { hop { filter_eq { all_rows ; style ; country - western two - step } ; couple } ; kherington payne mark kanemura } }, interpretation: the average of the capacity record of all rows is 8561 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 8561 }, interpretation: the average of the capacity record of all rows is 8561 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 8561 }, interpretation: the average of the erp / power w record of all rows is 6012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; erp / power w } ; 6012 }, interpretation: the average of the erp / power w record of all rows is 6012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; erp / power w } ; 6012 }, interpretation: for the us viewers ( millions ) records of all rows , most of them fuzzily match to n / a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; us viewers ( millions ) ; n / a }, interpretation: for the us viewers ( millions ) records of all rows , most of them fuzzily match to n / a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; us viewers ( millions ) ; n / a }, interpretation: select the rows whose ostrich record fuzzily matches to egyptian goose . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; ostrich ; egyptian goose } }, interpretation: select the rows whose ostrich record fuzzily matches to egyptian goose . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; ostrich ; egyptian goose } }, interpretation: for the date records of all rows , most of them fuzzily match to 25 october .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 25 october }, interpretation: for the date records of all rows , most of them fuzzily match to 25 october .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 25 october }, interpretation: for the attendance records of all rows , most of them are greater than 15800 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 15800 }, interpretation: for the attendance records of all rows , most of them are greater than 15800 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 15800 }, interpretation: select the rows whose points record is greater than or equal to 40 . for the difference records of these rows , all of them are greater than 40 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_greater_eq { all_rows ; points ; 40 } ; difference ; 40 }, interpretation: select the rows whose points record is greater than or equal to 40 . for the difference records of these rows , all of them are greater than 40 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_greater_eq { all_rows ; points ; 40 } ; difference ; 40 }, interpretation: the average of the attendance record of all rows is 45,972 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 45,972 }, interpretation: the average of the attendance record of all rows is 45,972 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 45,972 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is january 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; january 30 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is january 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; january 30 }, interpretation: select the rows whose position record fuzzily matches to m . among these rows , select the rows whose pick record is greater than 27 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; position ; m } ; pick ; 27 } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to m . among these rows , select the rows whose pick record is greater than 27 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; position ; m } ; pick ; 27 } } ; 3 }, interpretation: select the rows whose constructor record fuzzily matches to talbot - lago - talbot . among these rows , select the rows whose laps record is greater than 30 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; constructor ; talbot - lago - talbot } ; laps ; 30 } } ; 5 }, interpretation: select the rows whose constructor record fuzzily matches to talbot - lago - talbot . among these rows , select the rows whose laps record is greater than 30 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; constructor ; talbot - lago - talbot } ; laps ; 30 } } ; 5 }, interpretation: for the type records of all rows , most of them fuzzily match to norte\u00f1o .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; norte\u00f1o }, interpretation: for the type records of all rows , most of them fuzzily match to norte\u00f1o .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; norte\u00f1o }, interpretation: select the rows whose location record fuzzily matches to hermanos rodriguez . among these rows , select the rows whose constructor record fuzzily matches to williams - renault . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; hermanos rodriguez } ; constructor ; williams - renault } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to hermanos rodriguez . among these rows , select the rows whose constructor record fuzzily matches to williams - renault . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; hermanos rodriguez } ; constructor ; williams - renault } } ; 2 }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the row whose central rate record of all rows is maximum . the currency record of this row is danish krone .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; central rate } ; currency } ; danish krone }, interpretation: select the row whose central rate record of all rows is maximum . the currency record of this row is danish krone .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; central rate } ; currency } ; danish krone }, interpretation: the average of the points record of all rows is 265 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 265 }, interpretation: the average of the points record of all rows is 265 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 265 }, interpretation: select the rows whose district record fuzzily matches to shajapur . there is only one such row in the table . the name record of this unqiue row is susner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; district ; shajapur } } ; eq { hop { filter_eq { all_rows ; district ; shajapur } ; name } ; susner } }, interpretation: select the rows whose district record fuzzily matches to shajapur . there is only one such row in the table . the name record of this unqiue row is susner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; district ; shajapur } } ; eq { hop { filter_eq { all_rows ; district ; shajapur } ; name } ; susner } }, interpretation: select the rows whose year joined record is equal to 1971 . there is only one such row in the table . the school record of this unqiue row is southern wells .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year joined ; 1971 } } ; eq { hop { filter_eq { all_rows ; year joined ; 1971 } ; school } ; southern wells } }, interpretation: select the rows whose year joined record is equal to 1971 . there is only one such row in the table . the school record of this unqiue row is southern wells .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year joined ; 1971 } } ; eq { hop { filter_eq { all_rows ; year joined ; 1971 } ; school } ; southern wells } }, interpretation: select the row whose jersey number ( s ) record of all rows is 2nd maximum . the player record of this row is patrick ewing .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; jersey number ( s ) ; 2 } ; player } ; patrick ewing }, interpretation: select the row whose jersey number ( s ) record of all rows is 2nd maximum . the player record of this row is patrick ewing .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; jersey number ( s ) ; 2 } ; player } ; patrick ewing }, interpretation: the average of the haat record of all rows is 261 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; haat } ; 261 }, interpretation: the average of the haat record of all rows is 261 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; haat } ; 261 }, interpretation: select the rows whose tyre record fuzzily matches to e . for the constructor records of these rows , most of them fuzzily match to ferrari .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; tyre ; e } ; constructor ; ferrari }, interpretation: select the rows whose tyre record fuzzily matches to e . for the constructor records of these rows , most of them fuzzily match to ferrari .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; tyre ; e } ; constructor ; ferrari }, interpretation: select the row whose time record of all rows is 1st minimum . the winner record of this row is native heir .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; winner } ; native heir }, interpretation: select the row whose time record of all rows is 1st minimum . the winner record of this row is native heir .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 1 } ; winner } ; native heir }, interpretation: select the rows whose date record fuzzily matches to december . there is only one such row in the table . the region record of this unqiue row is japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; december } } ; eq { hop { filter_eq { all_rows ; date ; december } ; region } ; japan } }, interpretation: select the rows whose date record fuzzily matches to december . there is only one such row in the table . the region record of this unqiue row is japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; december } } ; eq { hop { filter_eq { all_rows ; date ; december } ; region } ; japan } }, interpretation: select the row whose seats ( acs ) record of all rows is 1st maximum . the state record of this row is madhya pradesh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; seats ( acs ) ; 1 } ; state } ; madhya pradesh }, interpretation: select the row whose seats ( acs ) record of all rows is 1st maximum . the state record of this row is madhya pradesh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; seats ( acs ) ; 1 } ; state } ; madhya pradesh }, interpretation: the average of the result record of all rows is 3rd place .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; result } ; 3rd place }, interpretation: the average of the result record of all rows is 3rd place .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; result } ; 3rd place }, interpretation: the average of the attendance record of all rows is 16828.89 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16828.89 }, interpretation: the average of the attendance record of all rows is 16828.89 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16828.89 }, interpretation: select the rows whose political party record fuzzily matches to democratic party of albania . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; political party ; democratic party of albania } } ; 2 }, interpretation: select the rows whose political party record fuzzily matches to democratic party of albania . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; political party ; democratic party of albania } } ; 2 }, interpretation: for the engine records of all rows , all of them fuzzily match to ford v8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; engine ; ford v8 }, interpretation: for the engine records of all rows , all of them fuzzily match to ford v8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; engine ; ford v8 }, interpretation: for the venue records of all rows , most of them fuzzily match to london .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; london }, interpretation: for the venue records of all rows , most of them fuzzily match to london .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; london }, interpretation: select the rows whose rank record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; rank } } ; 9 }, interpretation: select the rows whose rank record is arbitrary . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; rank } } ; 9 }, interpretation: select the row whose earnings record of all rows is maximum . the player record of this row is lee trevino .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; earnings } ; player } ; lee trevino }, interpretation: select the row whose earnings record of all rows is maximum . the player record of this row is lee trevino .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; earnings } ; player } ; lee trevino }, interpretation: select the rows whose max memory record fuzzily matches to 128 gb . among these rows , select the rows whose max processors record fuzzily matches to 1 ultrasparc t2 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; max memory ; 128 gb } ; max processors ; 1 ultrasparc t2 } } ; 2 }, interpretation: select the rows whose max memory record fuzzily matches to 128 gb . among these rows , select the rows whose max processors record fuzzily matches to 1 ultrasparc t2 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; max memory ; 128 gb } ; max processors ; 1 ultrasparc t2 } } ; 2 }, interpretation: select the rows whose pole position record fuzzily matches to ayrton senna . the number of such rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole position ; ayrton senna } } ; 13 }, interpretation: select the rows whose pole position record fuzzily matches to ayrton senna . the number of such rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole position ; ayrton senna } } ; 13 }, interpretation: for the race leader records of all rows , most of them fuzzily match to luigi marchisio ( ita ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; race leader ; luigi marchisio ( ita ) }, interpretation: for the race leader records of all rows , most of them fuzzily match to luigi marchisio ( ita ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; race leader ; luigi marchisio ( ita ) }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; united states }, interpretation: select the rows whose name record fuzzily matches to eclair . take the launched record of this row . select the rows whose name record fuzzily matches to derwent . take the launched record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; eclair } ; launched } ; hop { filter_eq { all_rows ; name ; derwent } ; launched } }, interpretation: select the rows whose name record fuzzily matches to eclair . take the launched record of this row . select the rows whose name record fuzzily matches to derwent . take the launched record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; eclair } ; launched } ; hop { filter_eq { all_rows ; name ; derwent } ; launched } }, interpretation: select the rows whose venue record fuzzily matches to trent bridge . there is only one such row in the table . the date record of this unqiue row is 23 , 24 , 25 , 26 , 27 july 1998 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; trent bridge } } ; eq { hop { filter_eq { all_rows ; venue ; trent bridge } ; date } ; 23 , 24 , 25 , 26 , 27 july 1998 } }, interpretation: select the rows whose venue record fuzzily matches to trent bridge . there is only one such row in the table . the date record of this unqiue row is 23 , 24 , 25 , 26 , 27 july 1998 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; trent bridge } } ; eq { hop { filter_eq { all_rows ; venue ; trent bridge } ; date } ; 23 , 24 , 25 , 26 , 27 july 1998 } }, interpretation: select the rows whose region record fuzzily matches to east . among these rows , select the rows whose state record fuzzily matches to virginia . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; region ; east } ; state ; virginia } } ; 2 }, interpretation: select the rows whose region record fuzzily matches to east . among these rows , select the rows whose state record fuzzily matches to virginia . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; region ; east } ; state ; virginia } } ; 2 }, interpretation: select the row whose us viewers ( in millions ) record of all rows is maximum . the title record of this row is the new normal . the directed by record of this row is michael lange .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; title } ; the new normal } ; eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; directed by } ; michael lange } }, interpretation: select the row whose us viewers ( in millions ) record of all rows is maximum . the title record of this row is the new normal . the directed by record of this row is michael lange .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; title } ; the new normal } ; eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; directed by } ; michael lange } }, interpretation: for the date records of all rows , all of them fuzzily match to december .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; december }, interpretation: select the rows whose driver / passenger record fuzzily matches to dani\u00e3l willemsen / sven verbrugge 1 . take the points record of this row . select the rows whose driver / passenger record fuzzily matches to janis daiders / lauris daiders . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver / passenger ; dani\u00e3l willemsen / sven verbrugge 1 } ; points } ; hop { filter_eq { all_rows ; driver / passenger ; janis daiders / lauris daiders } ; points } }, interpretation: select the rows whose driver / passenger record fuzzily matches to dani\u00e3l willemsen / sven verbrugge 1 . take the points record of this row . select the rows whose driver / passenger record fuzzily matches to janis daiders / lauris daiders . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver / passenger ; dani\u00e3l willemsen / sven verbrugge 1 } ; points } ; hop { filter_eq { all_rows ; driver / passenger ; janis daiders / lauris daiders } ; points } }, interpretation: select the row whose result record of all rows is 1st maximum . the incumbent record of this row is john lewis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; result ; 1 } ; incumbent } ; john lewis }, interpretation: select the row whose result record of all rows is 1st maximum . the incumbent record of this row is john lewis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; result ; 1 } ; incumbent } ; john lewis }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is october 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; october 7 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is october 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; october 7 }, interpretation: the average of the laps record of all rows is 164 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 164 }, interpretation: the average of the laps record of all rows is 164 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 164 }, interpretation: select the rows whose blank ends record is less than 10 . there is only one such row in the table . the skip record of this unqiue row is johnny frederiksen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; blank ends ; 10 } } ; eq { hop { filter_less { all_rows ; blank ends ; 10 } ; skip } ; johnny frederiksen } }, interpretation: select the rows whose blank ends record is less than 10 . there is only one such row in the table . the skip record of this unqiue row is johnny frederiksen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; blank ends ; 10 } } ; eq { hop { filter_less { all_rows ; blank ends ; 10 } ; skip } ; johnny frederiksen } }, interpretation: select the rows whose result record fuzzily matches to loss . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; loss } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to loss . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; loss } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to kohl center madison , wi . there is only one such row in the table . the acc team record of this unqiue row is nc state .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; kohl center madison , wi } } ; eq { hop { filter_eq { all_rows ; location ; kohl center madison , wi } ; acc team } ; nc state } }, interpretation: select the rows whose location record fuzzily matches to kohl center madison , wi . there is only one such row in the table . the acc team record of this unqiue row is nc state .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; kohl center madison , wi } } ; eq { hop { filter_eq { all_rows ; location ; kohl center madison , wi } ; acc team } ; nc state } }, interpretation: select the row whose first elected record of all rows is 7th minimum . the district record of this row is south carolina 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 7 } ; district } ; south carolina 3 }, interpretation: select the row whose first elected record of all rows is 7th minimum . the district record of this row is south carolina 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 7 } ; district } ; south carolina 3 }, interpretation: the 1st minimum rank record of all rows is 1 . the nation record of the row with 1st minimum rank record is japan . the gold record of the row with 1st minimum rank record is 6 . the total record of the row with 1st minimum rank record is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 1 } ; 1 } ; and { eq { hop { nth_argmin { all_rows ; rank ; 1 } ; nation } ; japan } ; and { eq { hop { nth_argmin { all_rows ; rank ; 1 } ; gold } ; 6 } ; eq { hop { nth_argmin { all_rows ; rank ; 1 } ; total } ; 12 } } } }, interpretation: the 1st minimum rank record of all rows is 1 . the nation record of the row with 1st minimum rank record is japan . the gold record of the row with 1st minimum rank record is 6 . the total record of the row with 1st minimum rank record is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 1 } ; 1 } ; and { eq { hop { nth_argmin { all_rows ; rank ; 1 } ; nation } ; japan } ; and { eq { hop { nth_argmin { all_rows ; rank ; 1 } ; gold } ; 6 } ; eq { hop { nth_argmin { all_rows ; rank ; 1 } ; total } ; 12 } } } }, interpretation: for the date records of all rows , all of them fuzzily match to december .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; december }, interpretation: for the year records of all rows , most of them are equal to 1986 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; year ; 1986 }, interpretation: for the year records of all rows , most of them are equal to 1986 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; year ; 1986 }, interpretation: select the rows whose lost record is equal to 14 . there is only one such row in the table . the club record of this unqiue row is burry port rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lost ; 14 } } ; eq { hop { filter_eq { all_rows ; lost ; 14 } ; club } ; burry port rfc } }, interpretation: select the rows whose lost record is equal to 14 . there is only one such row in the table . the club record of this unqiue row is burry port rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lost ; 14 } } ; eq { hop { filter_eq { all_rows ; lost ; 14 } ; club } ; burry port rfc } }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is grove city college .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; grove city college }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is grove city college .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; grove city college }, interpretation: select the rows whose nationality record fuzzily matches to slovakia . there is only one such row in the table . the distance record of this unqiue row is 500 m .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; slovakia } } ; eq { hop { filter_eq { all_rows ; nationality ; slovakia } ; distance } ; 500 m } }, interpretation: select the rows whose nationality record fuzzily matches to slovakia . there is only one such row in the table . the distance record of this unqiue row is 500 m .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; slovakia } } ; eq { hop { filter_eq { all_rows ; nationality ; slovakia } ; distance } ; 500 m } }, interpretation: for the country records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; united states }, interpretation: select the rows whose location record fuzzily matches to nevada , united states . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; nevada , united states } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to nevada , united states . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; nevada , united states } } ; 2 }, interpretation: select the row whose score record of all rows is maximum . the team 1 record of this row is fc nantes ( d1 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; team 1 } ; fc nantes ( d1 ) }, interpretation: select the row whose score record of all rows is maximum . the team 1 record of this row is fc nantes ( d1 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; team 1 } ; fc nantes ( d1 ) }, interpretation: select the row whose home team score record of all rows is 2nd maximum . the home team record of this row is essendon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; home team score ; 2 } ; home team } ; essendon }, interpretation: select the row whose home team score record of all rows is 2nd maximum . the home team record of this row is essendon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; home team score ; 2 } ; home team } ; essendon }, interpretation: select the row whose maximum seating capacity record of all rows is maximum . the arena / venue record of this row is la salle coliseum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; maximum seating capacity } ; arena / venue } ; la salle coliseum }, interpretation: select the row whose maximum seating capacity record of all rows is maximum . the arena / venue record of this row is la salle coliseum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; maximum seating capacity } ; arena / venue } ; la salle coliseum }, interpretation: select the rows whose outgoing manager record fuzzily matches to ra\u015fit \u00e7etiner . take the date of vacancy record of this row . select the rows whose outgoing manager record fuzzily matches to engin ipeko\u011flu . take the date of vacancy record of this row . the second record is 8 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; outgoing manager ; ra\u015fit \u00e7etiner } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; engin ipeko\u011flu } ; date of vacancy } } ; -8 days }, interpretation: select the rows whose outgoing manager record fuzzily matches to ra\u015fit \u00e7etiner . take the date of vacancy record of this row . select the rows whose outgoing manager record fuzzily matches to engin ipeko\u011flu . take the date of vacancy record of this row . the second record is 8 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; outgoing manager ; ra\u015fit \u00e7etiner } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; engin ipeko\u011flu } ; date of vacancy } } ; -8 days }, interpretation: select the rows whose player record fuzzily matches to frederick l conklin . take the touchdowns record of this row . select the rows whose player record fuzzily matches to jimmy craig . take the touchdowns record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; frederick l conklin } ; touchdowns } ; hop { filter_eq { all_rows ; player ; jimmy craig } ; touchdowns } }, interpretation: select the rows whose player record fuzzily matches to frederick l conklin . take the touchdowns record of this row . select the rows whose player record fuzzily matches to jimmy craig . take the touchdowns record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; frederick l conklin } ; touchdowns } ; hop { filter_eq { all_rows ; player ; jimmy craig } ; touchdowns } }, interpretation: the average of the orangemen points record of all rows is 20.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; orangemen points } ; 20.3 }, interpretation: the average of the orangemen points record of all rows is 20.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; orangemen points } ; 20.3 }, interpretation: select the rows whose position record fuzzily matches to defensive tackle . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; defensive tackle } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to defensive tackle . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; defensive tackle } } ; 2 }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is palestra it\u00e1lia - sp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; palestra it\u00e1lia - sp }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is palestra it\u00e1lia - sp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; palestra it\u00e1lia - sp }, interpretation: for the surface records of all rows , most of them fuzzily match to dirt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; dirt }, interpretation: for the surface records of all rows , most of them fuzzily match to dirt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; dirt }, interpretation: select the rows whose institution record fuzzily matches to minot state university . take the enrollment record of this row . select the rows whose institution record fuzzily matches to dakota state university . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; institution ; minot state university } ; enrollment } ; hop { filter_eq { all_rows ; institution ; dakota state university } ; enrollment } }, interpretation: select the rows whose institution record fuzzily matches to minot state university . take the enrollment record of this row . select the rows whose institution record fuzzily matches to dakota state university . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; institution ; minot state university } ; enrollment } ; hop { filter_eq { all_rows ; institution ; dakota state university } ; enrollment } }, interpretation: select the row whose us air date record of all rows is 3rd minimum . the us air date record of this row is july 3 , 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; us air date ; 3 } ; us air date } ; july 3 , 1993 }, interpretation: select the row whose us air date record of all rows is 3rd minimum . the us air date record of this row is july 3 , 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; us air date ; 3 } ; us air date } ; july 3 , 1993 }, interpretation: select the rows whose player record fuzzily matches to sura , bob bob sura . take the years for rockets record of this row . select the rows whose player record fuzzily matches to stroud , john john stroud . take the years for rockets record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; sura , bob bob sura } ; years for rockets } ; hop { filter_eq { all_rows ; player ; stroud , john john stroud } ; years for rockets } }, interpretation: select the rows whose player record fuzzily matches to sura , bob bob sura . take the years for rockets record of this row . select the rows whose player record fuzzily matches to stroud , john john stroud . take the years for rockets record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; sura , bob bob sura } ; years for rockets } ; hop { filter_eq { all_rows ; player ; stroud , john john stroud } ; years for rockets } }, interpretation: select the rows whose date record fuzzily matches to october . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; october } } ; 8 }, interpretation: select the rows whose date record fuzzily matches to october . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; october } } ; 8 }, interpretation: select the rows whose date of appointment record fuzzily matches to 3 november 2008 . there is only one such row in the table . the outgoing manager record of this unqiue row is osman \u00f6zdemir .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date of appointment ; 3 november 2008 } } ; eq { hop { filter_eq { all_rows ; date of appointment ; 3 november 2008 } ; outgoing manager } ; osman \u00f6zdemir } }, interpretation: select the rows whose date of appointment record fuzzily matches to 3 november 2008 . there is only one such row in the table . the outgoing manager record of this unqiue row is osman \u00f6zdemir .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date of appointment ; 3 november 2008 } } ; eq { hop { filter_eq { all_rows ; date of appointment ; 3 november 2008 } ; outgoing manager } ; osman \u00f6zdemir } }, interpretation: for the year joined records of all rows , most of them are less than 1978 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year joined ; 1978 }, interpretation: for the year joined records of all rows , most of them are less than 1978 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year joined ; 1978 }, interpretation: the 4th minimum week record of all rows is 4 . the attendance record of the row with 4th minimum week record is 55883 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; week ; 4 } ; 4 } ; eq { hop { nth_argmin { all_rows ; week ; 4 } ; attendance } ; 55883 } }, interpretation: the 4th minimum week record of all rows is 4 . the attendance record of the row with 4th minimum week record is 55883 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; week ; 4 } ; 4 } ; eq { hop { nth_argmin { all_rows ; week ; 4 } ; attendance } ; 55883 } }, interpretation: select the rows whose nation record fuzzily matches to united kingdom . take the silver record of this row . select the rows whose nation record fuzzily matches to finland . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; united kingdom } ; silver } ; hop { filter_eq { all_rows ; nation ; finland } ; silver } }, interpretation: select the rows whose nation record fuzzily matches to united kingdom . take the silver record of this row . select the rows whose nation record fuzzily matches to finland . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; united kingdom } ; silver } ; hop { filter_eq { all_rows ; nation ; finland } ; silver } }, interpretation: select the rows whose joined record is equal to 2007 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; joined ; 2007 } } ; 2 }, interpretation: select the rows whose joined record is equal to 2007 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; joined ; 2007 } } ; 2 }, interpretation: the average of the area ( km square ) record of all rows is 198.448 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) } ; 198.448 }, interpretation: the average of the area ( km square ) record of all rows is 198.448 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) } ; 198.448 }, interpretation: select the row whose completed record of all rows is 2nd maximum . the name record of this row is church of st thomas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; completed ; 2 } ; name } ; church of st thomas }, interpretation: select the row whose completed record of all rows is 2nd maximum . the name record of this row is church of st thomas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; completed ; 2 } ; name } ; church of st thomas }, interpretation: select the row whose championships in st louis record of all rows is maximum . the team record of this row is st louis stars .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; championships in st louis } ; team } ; st louis stars }, interpretation: select the row whose championships in st louis record of all rows is maximum . the team record of this row is st louis stars .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; championships in st louis } ; team } ; st louis stars }, interpretation: select the rows whose county team record fuzzily matches to kilkenny . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county team ; kilkenny } } ; 4 }, interpretation: select the rows whose county team record fuzzily matches to kilkenny . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county team ; kilkenny } } ; 4 }, interpretation: select the rows whose score record fuzzily matches to w . among these rows , select the rows whose high rebounds record fuzzily matches to dwight howard . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; w } ; high rebounds ; dwight howard } } ; 5 }, interpretation: select the rows whose score record fuzzily matches to w . among these rows , select the rows whose high rebounds record fuzzily matches to dwight howard . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; w } ; high rebounds ; dwight howard } } ; 5 }, interpretation: select the rows whose away team score record fuzzily matches to 9.12 ( 66 ) . the maximum crowd record of these rows is 29374 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; away team score ; 9.12 ( 66 ) } ; crowd } ; 29374 }, interpretation: select the rows whose away team score record fuzzily matches to 9.12 ( 66 ) . the maximum crowd record of these rows is 29374 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; away team score ; 9.12 ( 66 ) } ; crowd } ; 29374 }, interpretation: select the rows whose status record fuzzily matches to retired republican hold . there is only one such row in the table . the district record of this unqiue row is minnesota3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; retired republican hold } } ; eq { hop { filter_eq { all_rows ; status ; retired republican hold } ; district } ; minnesota3 } }, interpretation: select the rows whose status record fuzzily matches to retired republican hold . there is only one such row in the table . the district record of this unqiue row is minnesota3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; retired republican hold } } ; eq { hop { filter_eq { all_rows ; status ; retired republican hold } ; district } ; minnesota3 } }, interpretation: select the rows whose cuts made record is less than 20 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; cuts made ; 20 } } ; 3 }, interpretation: select the rows whose cuts made record is less than 20 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; cuts made ; 20 } } ; 3 }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is vfl park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; vfl park }, interpretation: the 1st minimum place record of all rows is 1 . the player record of the row with 1st minimum place record is vijay singh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; place ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; place ; 1 } ; player } ; vijay singh } }, interpretation: the 1st minimum place record of all rows is 1 . the player record of the row with 1st minimum place record is vijay singh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; place ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; place ; 1 } ; player } ; vijay singh } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose opponent record fuzzily matches to chicago bears . take the date record of this row . select the rows whose opponent record fuzzily matches to staten island stapletons . take the date record of this row . the second record is 7 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; chicago bears } ; date } ; hop { filter_eq { all_rows ; opponent ; staten island stapletons } ; date } } ; -7 }, interpretation: select the rows whose opponent record fuzzily matches to chicago bears . take the date record of this row . select the rows whose opponent record fuzzily matches to staten island stapletons . take the date record of this row . the second record is 7 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; chicago bears } ; date } ; hop { filter_eq { all_rows ; opponent ; staten island stapletons } ; date } } ; -7 }, interpretation: select the row whose original air date record of all rows is 1st maximum . the title record of this row is weeping willows .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; title } ; weeping willows }, interpretation: select the row whose original air date record of all rows is 1st maximum . the title record of this row is weeping willows .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; title } ; weeping willows }, interpretation: select the rows whose 2nd venue record fuzzily matches to mexico city . there is only one such row in the table . the year record of this unqiue row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2nd venue ; mexico city } } ; eq { hop { filter_eq { all_rows ; 2nd venue ; mexico city } ; year } ; 2007 } }, interpretation: select the rows whose 2nd venue record fuzzily matches to mexico city . there is only one such row in the table . the year record of this unqiue row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2nd venue ; mexico city } } ; eq { hop { filter_eq { all_rows ; 2nd venue ; mexico city } ; year } ; 2007 } }, interpretation: select the rows whose position record fuzzily matches to defensive back . the minimum overall record of these rows is 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; position ; defensive back } ; overall } ; 22 }, interpretation: select the rows whose position record fuzzily matches to defensive back . the minimum overall record of these rows is 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; position ; defensive back } ; overall } ; 22 }, interpretation: the average of the frequency ( per hour ) record of all rows is 3.11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; frequency ( per hour ) } ; 3.11 }, interpretation: the average of the frequency ( per hour ) record of all rows is 3.11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; frequency ( per hour ) } ; 3.11 }, interpretation: the maximum time record of all rows is 2:54 . the opponent record of the row with superlative time record is clay davidson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; time } ; 2:54 } ; eq { hop { argmax { all_rows ; time } ; opponent } ; clay davidson } }, interpretation: the maximum time record of all rows is 2:54 . the opponent record of the row with superlative time record is clay davidson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; time } ; 2:54 } ; eq { hop { argmax { all_rows ; time } ; opponent } ; clay davidson } }, interpretation: for the crowd records of all rows , all of them are greater than or equal to 8000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater_eq { all_rows ; crowd ; 8000 }, interpretation: for the crowd records of all rows , all of them are greater than or equal to 8000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater_eq { all_rows ; crowd ; 8000 }, interpretation: for the championship records of all rows , most of them fuzzily match to nabisco dinah shore .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; championship ; nabisco dinah shore }, interpretation: for the championship records of all rows , most of them fuzzily match to nabisco dinah shore .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; championship ; nabisco dinah shore }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . there is only one such row in the table . the incumbent record of this unqiue row is tony p hall .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; unopposed } } ; eq { hop { filter_eq { all_rows ; candidates ; unopposed } ; incumbent } ; tony p hall } }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . there is only one such row in the table . the incumbent record of this unqiue row is tony p hall .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; unopposed } } ; eq { hop { filter_eq { all_rows ; candidates ; unopposed } ; incumbent } ; tony p hall } }, interpretation: select the rows whose position record fuzzily matches to guard . the minimum round record of these rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; position ; guard } ; round } ; 11 }, interpretation: select the rows whose position record fuzzily matches to guard . the minimum round record of these rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; position ; guard } ; round } ; 11 }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose silver record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; silver ; 1 } } ; 2 }, interpretation: select the rows whose street address record fuzzily matches to 424 church street . take the floors record of this row . select the rows whose street address record fuzzily matches to 211 union street . take the floors record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; street address ; 424 church street } ; floors } ; hop { filter_eq { all_rows ; street address ; 211 union street } ; floors } }, interpretation: select the rows whose street address record fuzzily matches to 424 church street . take the floors record of this row . select the rows whose street address record fuzzily matches to 211 union street . take the floors record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; street address ; 424 church street } ; floors } ; hop { filter_eq { all_rows ; street address ; 211 union street } ; floors } }, interpretation: the average of the crowd record of all rows is 13841 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 13841 }, interpretation: the average of the crowd record of all rows is 13841 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 13841 }, interpretation: select the rows whose earpads record fuzzily matches to circumaural bowl . there is only one such row in the table . the headphone model record of this unqiue row is gs1000i .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; earpads ; circumaural bowl } } ; eq { hop { filter_eq { all_rows ; earpads ; circumaural bowl } ; headphone model } ; gs1000i } }, interpretation: select the rows whose earpads record fuzzily matches to circumaural bowl . there is only one such row in the table . the headphone model record of this unqiue row is gs1000i .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; earpads ; circumaural bowl } } ; eq { hop { filter_eq { all_rows ; earpads ; circumaural bowl } ; headphone model } ; gs1000i } }, interpretation: the sum of the top - 25 record of all rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; top - 25 } ; 48 }, interpretation: the sum of the top - 25 record of all rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; top - 25 } ; 48 }, interpretation: select the row whose against record of all rows is maximum . the opposing teams record of this row is new zealand .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing teams } ; new zealand }, interpretation: select the row whose against record of all rows is maximum . the opposing teams record of this row is new zealand .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing teams } ; new zealand }, interpretation: select the row whose home team score record of all rows is 2nd minimum . the home team record of this row is north melbourne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; home team score ; 2 } ; home team } ; north melbourne }, interpretation: select the row whose home team score record of all rows is 2nd minimum . the home team record of this row is north melbourne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; home team score ; 2 } ; home team } ; north melbourne }, interpretation: for the release date records of all rows , all of them fuzzily match to september 14 , 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; release date ; september 14 , 2010 }, interpretation: for the release date records of all rows , all of them fuzzily match to september 14 , 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; release date ; september 14 , 2010 }, interpretation: select the rows whose player record fuzzily matches to leron mitchell . take the pick record of this row . select the rows whose player record fuzzily matches to aaron wagner . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; leron mitchell } ; pick } ; hop { filter_eq { all_rows ; player ; aaron wagner } ; pick } }, interpretation: select the rows whose player record fuzzily matches to leron mitchell . take the pick record of this row . select the rows whose player record fuzzily matches to aaron wagner . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; leron mitchell } ; pick } ; hop { filter_eq { all_rows ; player ; aaron wagner } ; pick } }, interpretation: the sum of the laps record of all rows is 1,268 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 1,268 }, interpretation: the sum of the laps record of all rows is 1,268 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 1,268 }, interpretation: for the high assists records of all rows , most of them fuzzily match to steve nash .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; steve nash }, interpretation: for the high assists records of all rows , most of them fuzzily match to steve nash .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; steve nash }, interpretation: select the rows whose entrant record fuzzily matches to jolly club spa . there is only one such row in the table . the engine record of this unqiue row is motori moderni tipo 615 - 90 1.5 v6 t .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; entrant ; jolly club spa } } ; eq { hop { filter_eq { all_rows ; entrant ; jolly club spa } ; engine } ; motori moderni tipo 615 - 90 1.5 v6 t } }, interpretation: select the rows whose entrant record fuzzily matches to jolly club spa . there is only one such row in the table . the engine record of this unqiue row is motori moderni tipo 615 - 90 1.5 v6 t .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; entrant ; jolly club spa } } ; eq { hop { filter_eq { all_rows ; entrant ; jolly club spa } ; engine } ; motori moderni tipo 615 - 90 1.5 v6 t } }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the row whose game record of all rows is minimum . the location attendance record of this row is pepsi center 14243 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; game } ; location attendance } ; pepsi center 14243 }, interpretation: select the row whose game record of all rows is minimum . the location attendance record of this row is pepsi center 14243 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; game } ; location attendance } ; pepsi center 14243 }, interpretation: select the row whose average record of all rows is maximum . the professional partner record of this row is janja lesar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average } ; professional partner } ; janja lesar }, interpretation: select the row whose average record of all rows is maximum . the professional partner record of this row is janja lesar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average } ; professional partner } ; janja lesar }, interpretation: select the rows whose expected year of completion record is equal to 2006 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; expected year of completion ; 2006 } } ; 3 }, interpretation: select the rows whose expected year of completion record is equal to 2006 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; expected year of completion ; 2006 } } ; 3 }, interpretation: select the rows whose first elected record is equal to 1944 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1944 } } ; 2 }, interpretation: select the rows whose first elected record is equal to 1944 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1944 } } ; 2 }, interpretation: select the rows whose railway record fuzzily matches to pdswjr . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; railway ; pdswjr } } ; 3 }, interpretation: select the rows whose railway record fuzzily matches to pdswjr . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; railway ; pdswjr } } ; 3 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 6 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 6 }, interpretation: select the rows whose bsu head coach record fuzzily matches to bus conner . take the year record of this row . select the rows whose bsu head coach record fuzzily matches to greg graham . take the year record of this row . the second record is 32 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; bsu head coach ; bus conner } ; year } ; hop { filter_eq { all_rows ; bsu head coach ; greg graham } ; year } } ; -32 years }, interpretation: select the rows whose bsu head coach record fuzzily matches to bus conner . take the year record of this row . select the rows whose bsu head coach record fuzzily matches to greg graham . take the year record of this row . the second record is 32 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; bsu head coach ; bus conner } ; year } ; hop { filter_eq { all_rows ; bsu head coach ; greg graham } ; year } } ; -32 years }, interpretation: for the high assists records of all rows , most of them fuzzily match to baron davis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; baron davis }, interpretation: for the high assists records of all rows , most of them fuzzily match to baron davis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; baron davis }, interpretation: select the rows whose opponent in the final record fuzzily matches to christ\u00edna papad\u00e1ki . take the date record of this row . select the rows whose opponent in the final record fuzzily matches to julia vakulenko . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent in the final ; christ\u00edna papad\u00e1ki } ; date } ; hop { filter_eq { all_rows ; opponent in the final ; julia vakulenko } ; date } }, interpretation: select the rows whose opponent in the final record fuzzily matches to christ\u00edna papad\u00e1ki . take the date record of this row . select the rows whose opponent in the final record fuzzily matches to julia vakulenko . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent in the final ; christ\u00edna papad\u00e1ki } ; date } ; hop { filter_eq { all_rows ; opponent in the final ; julia vakulenko } ; date } }, interpretation: for the crowd records of all rows , most of them are less than 30000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; crowd ; 30000 }, interpretation: for the crowd records of all rows , most of them are less than 30000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; crowd ; 30000 }, interpretation: select the rows whose meas num record is arbitrary . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; meas num } } ; 11 }, interpretation: select the rows whose meas num record is arbitrary . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; meas num } } ; 11 }, interpretation: select the rows whose engine record fuzzily matches to ford cosworth dfr v8 . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine ; ford cosworth dfr v8 } } ; eq { hop { filter_eq { all_rows ; engine ; ford cosworth dfr v8 } ; year } ; 1989 } }, interpretation: select the rows whose engine record fuzzily matches to ford cosworth dfr v8 . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; engine ; ford cosworth dfr v8 } } ; eq { hop { filter_eq { all_rows ; engine ; ford cosworth dfr v8 } ; year } ; 1989 } }, interpretation: select the rows whose team record fuzzily matches to south china . take the loss record of this row . select the rows whose team record fuzzily matches to xiangxue pharmaceutical . take the loss record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; team ; south china } ; loss } ; hop { filter_eq { all_rows ; team ; xiangxue pharmaceutical } ; loss } }, interpretation: select the rows whose team record fuzzily matches to south china . take the loss record of this row . select the rows whose team record fuzzily matches to xiangxue pharmaceutical . take the loss record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; team ; south china } ; loss } ; hop { filter_eq { all_rows ; team ; xiangxue pharmaceutical } ; loss } }, interpretation: select the rows whose manner of departure record fuzzily matches to resigned . there is only one such row in the table . the outgoing manager record of this unqiue row is thomas doll .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; resigned } } ; eq { hop { filter_eq { all_rows ; manner of departure ; resigned } ; outgoing manager } ; thomas doll } }, interpretation: select the rows whose manner of departure record fuzzily matches to resigned . there is only one such row in the table . the outgoing manager record of this unqiue row is thomas doll .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; resigned } } ; eq { hop { filter_eq { all_rows ; manner of departure ; resigned } ; outgoing manager } ; thomas doll } }, interpretation: select the rows whose player record fuzzily matches to alain kashama . take the pick record of this row . select the rows whose player record fuzzily matches to amarpreet sanghera . take the pick record of this row . the first record is less than the second record . the pick record of the first row is 8 . the pick record of the second row is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; alain kashama } ; pick } ; hop { filter_eq { all_rows ; player ; amarpreet sanghera } ; pick } } ; and { eq { hop { filter_eq { all_rows ; player ; alain kashama } ; pick } ; 8 } ; eq { hop { filter_eq { all_rows ; player ; amarpreet sanghera } ; pick } ; 9 } } }, interpretation: select the rows whose player record fuzzily matches to alain kashama . take the pick record of this row . select the rows whose player record fuzzily matches to amarpreet sanghera . take the pick record of this row . the first record is less than the second record . the pick record of the first row is 8 . the pick record of the second row is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; alain kashama } ; pick } ; hop { filter_eq { all_rows ; player ; amarpreet sanghera } ; pick } } ; and { eq { hop { filter_eq { all_rows ; player ; alain kashama } ; pick } ; 8 } ; eq { hop { filter_eq { all_rows ; player ; amarpreet sanghera } ; pick } ; 9 } } }, interpretation: the average of the losses record of all rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; losses } ; 13 }, interpretation: the average of the losses record of all rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; losses } ; 13 }, interpretation: select the rows whose state record fuzzily matches to illinois . select the row whose enrollment record of these rows is maximum . the founded record of this row is 1887 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; state ; illinois } ; enrollment } ; founded } ; 1887 }, interpretation: select the rows whose state record fuzzily matches to illinois . select the row whose enrollment record of these rows is maximum . the founded record of this row is 1887 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; state ; illinois } ; enrollment } ; founded } ; 1887 }, interpretation: select the rows whose position record fuzzily matches to guard . among these rows , select the rows whose height in ft record fuzzily matches to 6 - 2 . there is only one such row in the table . the player record of this unqiue row is garland , winston winston garland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; position ; guard } ; height in ft ; 6 - 2 } } ; eq { hop { filter_eq { filter_eq { all_rows ; position ; guard } ; height in ft ; 6 - 2 } ; player } ; garland , winston winston garland } }, interpretation: select the rows whose position record fuzzily matches to guard . among these rows , select the rows whose height in ft record fuzzily matches to 6 - 2 . there is only one such row in the table . the player record of this unqiue row is garland , winston winston garland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; position ; guard } ; height in ft ; 6 - 2 } } ; eq { hop { filter_eq { filter_eq { all_rows ; position ; guard } ; height in ft ; 6 - 2 } ; player } ; garland , winston winston garland } }, interpretation: the average of the crowd record of all rows is 17724 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17724 }, interpretation: the average of the crowd record of all rows is 17724 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17724 }, interpretation: the average of the points record of all rows is 62 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 62 }, interpretation: the average of the points record of all rows is 62 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 62 }, interpretation: select the rows whose district record fuzzily matches to hisar . the average of the number of electorates ( 2009 ) record of these rows is 132744 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; district ; hisar } ; number of electorates ( 2009 ) } ; 132744 }, interpretation: select the rows whose district record fuzzily matches to hisar . the average of the number of electorates ( 2009 ) record of these rows is 132744 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; district ; hisar } ; number of electorates ( 2009 ) } ; 132744 }, interpretation: select the rows whose institution record fuzzily matches to university of dayton . take the founded record of this row . select the rows whose institution record fuzzily matches to university of memphis . take the founded record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; institution ; university of dayton } ; founded } ; hop { filter_eq { all_rows ; institution ; university of memphis } ; founded } }, interpretation: select the rows whose institution record fuzzily matches to university of dayton . take the founded record of this row . select the rows whose institution record fuzzily matches to university of memphis . take the founded record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; institution ; university of dayton } ; founded } ; hop { filter_eq { all_rows ; institution ; university of memphis } ; founded } }, interpretation: select the rows whose player record fuzzily matches to ( a ) . there is only one such row in the table . the player record of this unqiue row is jim simons ( a ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; player ; ( a ) } } ; eq { hop { filter_eq { all_rows ; player ; ( a ) } ; player } ; jim simons ( a ) } }, interpretation: select the rows whose player record fuzzily matches to ( a ) . there is only one such row in the table . the player record of this unqiue row is jim simons ( a ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; player ; ( a ) } } ; eq { hop { filter_eq { all_rows ; player ; ( a ) } ; player } ; jim simons ( a ) } }, interpretation: select the row whose rank record of all rows is maximum . the name record of this row is environmental sustainability index .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; rank } ; name } ; environmental sustainability index }, interpretation: select the row whose rank record of all rows is maximum . the name record of this row is environmental sustainability index .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; rank } ; name } ; environmental sustainability index }, interpretation: select the rows whose name record fuzzily matches to margravine johanna of baden - baden . take the became duchess record of this row . select the rows whose name record fuzzily matches to victoria of saxe - coburg and gotha . take the became duchess record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; margravine johanna of baden - baden } ; became duchess } ; hop { filter_eq { all_rows ; name ; victoria of saxe - coburg and gotha } ; became duchess } }, interpretation: select the rows whose name record fuzzily matches to margravine johanna of baden - baden . take the became duchess record of this row . select the rows whose name record fuzzily matches to victoria of saxe - coburg and gotha . take the became duchess record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; margravine johanna of baden - baden } ; became duchess } ; hop { filter_eq { all_rows ; name ; victoria of saxe - coburg and gotha } ; became duchess } }, interpretation: select the rows whose athlete record fuzzily matches to federico muller . take the round of 16 record of this row . select the rows whose athlete record fuzzily matches to felipe saucedo . take the round of 16 record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; athlete ; federico muller } ; round of 16 } ; hop { filter_eq { all_rows ; athlete ; felipe saucedo } ; round of 16 } }, interpretation: select the rows whose athlete record fuzzily matches to federico muller . take the round of 16 record of this row . select the rows whose athlete record fuzzily matches to felipe saucedo . take the round of 16 record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; athlete ; federico muller } ; round of 16 } ; hop { filter_eq { all_rows ; athlete ; felipe saucedo } ; round of 16 } }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the score record of these rows is 66 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; score } ; 66 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the score record of these rows is 66 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; score } ; 66 }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: select the rows whose team 1 record fuzzily matches to energy invest rustavi . take the agg record of this row . select the rows whose team 1 record fuzzily matches to spartak pleven . take the agg record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 1 ; energy invest rustavi } ; agg } ; hop { filter_eq { all_rows ; team 1 ; spartak pleven } ; agg } }, interpretation: select the rows whose team 1 record fuzzily matches to energy invest rustavi . take the agg record of this row . select the rows whose team 1 record fuzzily matches to spartak pleven . take the agg record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 1 ; energy invest rustavi } ; agg } ; hop { filter_eq { all_rows ; team 1 ; spartak pleven } ; agg } }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 10 }, interpretation: the average of the age record of all rows is 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; age } ; 30 }, interpretation: the average of the age record of all rows is 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; age } ; 30 }, interpretation: select the row whose population record of all rows is 1st maximum . the official name record of this row is chipman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 1 } ; official name } ; chipman }, interpretation: select the row whose population record of all rows is 1st maximum . the official name record of this row is chipman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 1 } ; official name } ; chipman }, interpretation: select the row whose commissioned record of all rows is maximum . the name record of this row is chivalrous .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; commissioned } ; name } ; chivalrous }, interpretation: select the row whose commissioned record of all rows is maximum . the name record of this row is chivalrous .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; commissioned } ; name } ; chivalrous }, interpretation: select the rows whose final position / round record fuzzily matches to runner - up . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; final position / round ; runner - up } } ; 4 }, interpretation: select the rows whose final position / round record fuzzily matches to runner - up . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; final position / round ; runner - up } } ; 4 }, interpretation: for the series records of all rows , most of them fuzzily match to formula 3 championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; series ; formula 3 championship }, interpretation: for the series records of all rows , most of them fuzzily match to formula 3 championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; series ; formula 3 championship }, interpretation: select the rows whose erp / power w record is greater than 5000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; erp / power w ; 5000 } } ; 3 }, interpretation: select the rows whose erp / power w record is greater than 5000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; erp / power w ; 5000 } } ; 3 }, interpretation: select the rows whose rank record fuzzily matches to 1 . take the bronze record of this row . select the rows whose rank record fuzzily matches to 4 . take the bronze record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; rank ; 1 } ; bronze } ; hop { filter_eq { all_rows ; rank ; 4 } ; bronze } }, interpretation: select the rows whose rank record fuzzily matches to 1 . take the bronze record of this row . select the rows whose rank record fuzzily matches to 4 . take the bronze record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; rank ; 1 } ; bronze } ; hop { filter_eq { all_rows ; rank ; 4 } ; bronze } }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is rochester institute of technology .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; rochester institute of technology }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is rochester institute of technology .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; rochester institute of technology }, interpretation: select the rows whose builder record fuzzily matches to rh & dr . the maximum year built record of these rows is c1949 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; builder ; rh & dr } ; year built } ; c1949 }, interpretation: select the rows whose builder record fuzzily matches to rh & dr . the maximum year built record of these rows is c1949 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; builder ; rh & dr } ; year built } ; c1949 }, interpretation: select the rows whose yards record is greater than 1400 . there is only one such row in the table . the player record of this unqiue row is derrick lewis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; yards ; 1400 } } ; eq { hop { filter_greater { all_rows ; yards ; 1400 } ; player } ; derrick lewis } }, interpretation: select the rows whose yards record is greater than 1400 . there is only one such row in the table . the player record of this unqiue row is derrick lewis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; yards ; 1400 } } ; eq { hop { filter_greater { all_rows ; yards ; 1400 } ; player } ; derrick lewis } }, interpretation: select the rows whose method record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is yoko takahashi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; method ; draw } } ; eq { hop { filter_eq { all_rows ; method ; draw } ; opponent } ; yoko takahashi } }, interpretation: select the rows whose method record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is yoko takahashi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; method ; draw } } ; eq { hop { filter_eq { all_rows ; method ; draw } ; opponent } ; yoko takahashi } }, interpretation: for the outcome records of all rows , most of them fuzzily match to runner-up .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; runner-up }, interpretation: for the outcome records of all rows , most of them fuzzily match to runner-up .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; runner-up }, interpretation: select the rows whose visitor record fuzzily matches to suns . take the date record of this row . select the rows whose visitor record fuzzily matches to timberwolves . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; suns } ; date } ; hop { filter_eq { all_rows ; visitor ; timberwolves } ; date } }, interpretation: select the rows whose visitor record fuzzily matches to suns . take the date record of this row . select the rows whose visitor record fuzzily matches to timberwolves . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; suns } ; date } ; hop { filter_eq { all_rows ; visitor ; timberwolves } ; date } }, interpretation: select the rows whose election record fuzzily matches to 1988 . take the of total votes record of this row . select the rows whose election record fuzzily matches to 1993 . take the of total votes record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; election ; 1988 } ; of total votes } ; hop { filter_eq { all_rows ; election ; 1993 } ; of total votes } }, interpretation: select the rows whose election record fuzzily matches to 1988 . take the of total votes record of this row . select the rows whose election record fuzzily matches to 1993 . take the of total votes record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; election ; 1988 } ; of total votes } ; hop { filter_eq { all_rows ; election ; 1993 } ; of total votes } }, interpretation: the average of the points record of all rows is 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 0 }, interpretation: the average of the points record of all rows is 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 0 }, interpretation: for the fate records of all rows , most of them fuzzily match to sunk .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; fate ; sunk }, interpretation: for the fate records of all rows , most of them fuzzily match to sunk .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; fate ; sunk }, interpretation: select the rows whose losses record is equal to 13 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; losses ; 13 } } ; 4 }, interpretation: select the rows whose losses record is equal to 13 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; losses ; 13 } } ; 4 }, interpretation: select the rows whose team record fuzzily matches to rhein fire . the average of the capacity record of these rows is 56308 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; team ; rhein fire } ; capacity } ; 56308 }, interpretation: select the rows whose team record fuzzily matches to rhein fire . the average of the capacity record of these rows is 56308 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; team ; rhein fire } ; capacity } ; 56308 }, interpretation: select the rows whose location attendance record fuzzily matches to oracle arena . there is only one such row in the table . the date record of this unqiue row is november 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location attendance ; oracle arena } } ; eq { hop { filter_eq { all_rows ; location attendance ; oracle arena } ; date } ; november 18 } }, interpretation: select the rows whose location attendance record fuzzily matches to oracle arena . there is only one such row in the table . the date record of this unqiue row is november 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location attendance ; oracle arena } } ; eq { hop { filter_eq { all_rows ; location attendance ; oracle arena } ; date } ; november 18 } }, interpretation: select the rows whose winner record fuzzily matches to edd kimber . take the premiere record of this row . select the rows whose winner record fuzzily matches to joanne wheatley . take the premiere record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; winner ; edd kimber } ; premiere } ; hop { filter_eq { all_rows ; winner ; joanne wheatley } ; premiere } }, interpretation: select the rows whose winner record fuzzily matches to edd kimber . take the premiere record of this row . select the rows whose winner record fuzzily matches to joanne wheatley . take the premiere record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; winner ; edd kimber } ; premiere } ; hop { filter_eq { all_rows ; winner ; joanne wheatley } ; premiere } }, interpretation: select the row whose winter olympics record of all rows is 2nd maximum . the winner record of this row is thomas wassberg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winter olympics ; 2 } ; winner } ; thomas wassberg }, interpretation: select the row whose winter olympics record of all rows is 2nd maximum . the winner record of this row is thomas wassberg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winter olympics ; 2 } ; winner } ; thomas wassberg }, interpretation: select the rows whose season record fuzzily matches to 1978 - 79 . take the goals for record of this row . select the rows whose season record fuzzily matches to 1975 - 76 . take the goals for record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 1978 - 79 } ; goals for } ; hop { filter_eq { all_rows ; season ; 1975 - 76 } ; goals for } }, interpretation: select the rows whose season record fuzzily matches to 1978 - 79 . take the goals for record of this row . select the rows whose season record fuzzily matches to 1975 - 76 . take the goals for record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 1978 - 79 } ; goals for } ; hop { filter_eq { all_rows ; season ; 1975 - 76 } ; goals for } }, interpretation: select the row whose pick record of all rows is 3rd minimum . the player record of this row is dale hackbart .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 3 } ; player } ; dale hackbart }, interpretation: select the row whose pick record of all rows is 3rd minimum . the player record of this row is dale hackbart .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 3 } ; player } ; dale hackbart }, interpretation: select the row whose founding date record of all rows is 2nd minimum . the organization record of this row is delta epsilon sigma iota .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; founding date ; 2 } ; organization } ; delta epsilon sigma iota }, interpretation: select the row whose founding date record of all rows is 2nd minimum . the organization record of this row is delta epsilon sigma iota .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; founding date ; 2 } ; organization } ; delta epsilon sigma iota }, interpretation: the average of the 2008 record of all rows is 8133819 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 2008 } ; 8133819 }, interpretation: the average of the 2008 record of all rows is 8133819 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 2008 } ; 8133819 }, interpretation: for the enrollment ( 2013 / 14 ) records of all rows , most of them are greater than 400 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; enrollment ( 2013 / 14 ) ; 400 }, interpretation: for the enrollment ( 2013 / 14 ) records of all rows , most of them are greater than 400 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; enrollment ( 2013 / 14 ) ; 400 }, interpretation: the average of the length record of all rows is 3:43 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; length } ; 3:43 }, interpretation: the average of the length record of all rows is 3:43 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; length } ; 3:43 }, interpretation: the sum of the enrollment record of all rows is 44185 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 44185 }, interpretation: the sum of the enrollment record of all rows is 44185 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 44185 }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 3 }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 3 }, interpretation: select the rows whose method record fuzzily matches to ko ( punch ) . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; method ; ko ( punch ) } }, interpretation: select the rows whose method record fuzzily matches to ko ( punch ) . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; method ; ko ( punch ) } }, interpretation: select the rows whose nation record fuzzily matches to kenya . among these rows , select the rows whose time record is less than 30:34 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_eq { all_rows ; nation ; kenya } ; time ; 30:34 } } ; 2 }, interpretation: select the rows whose nation record fuzzily matches to kenya . among these rows , select the rows whose time record is less than 30:34 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_eq { all_rows ; nation ; kenya } ; time ; 30:34 } } ; 2 }, interpretation: select the row whose quantity made record of all rows is maximum . the class record of this row is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; quantity made } ; class } ; 2 }, interpretation: select the row whose quantity made record of all rows is maximum . the class record of this row is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; quantity made } ; class } ; 2 }, interpretation: select the row whose pick record of all rows is 1st minimum . the nationality record of this row is canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 1 } ; nationality } ; canada }, interpretation: select the row whose pick record of all rows is 1st minimum . the nationality record of this row is canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 1 } ; nationality } ; canada }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; october } ; result ; w }, interpretation: select the row whose sets lost record of all rows is 2nd maximum . the team record of this row is far eastern university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; sets lost ; 2 } ; team } ; far eastern university }, interpretation: select the row whose sets lost record of all rows is 2nd maximum . the team record of this row is far eastern university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; sets lost ; 2 } ; team } ; far eastern university }, interpretation: select the rows whose location attendance record fuzzily matches to staples center . for the high assists records of these rows , all of them fuzzily match to baron davis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; location attendance ; staples center } ; high assists ; baron davis }, interpretation: select the rows whose location attendance record fuzzily matches to staples center . for the high assists records of these rows , all of them fuzzily match to baron davis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; location attendance ; staples center } ; high assists ; baron davis }, interpretation: select the row whose tries for record of all rows is maximum . the club record of this row is bridgend ravens .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; tries for } ; club } ; bridgend ravens }, interpretation: select the row whose tries for record of all rows is maximum . the club record of this row is bridgend ravens .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; tries for } ; club } ; bridgend ravens }, interpretation: select the rows whose status record fuzzily matches to re - elected . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; re - elected } } ; 3 }, interpretation: select the rows whose status record fuzzily matches to re - elected . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; re - elected } } ; 3 }, interpretation: select the rows whose name record fuzzily matches to santa maria da feira . take the area ( km square ) record of this row . select the rows whose name record fuzzily matches to vale de cambra . take the area ( km square ) record of this row . the first record is greater than the second record . the area ( km square ) record of the first row is 215.1 . the area ( km square ) record of the second row is 146.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; santa maria da feira } ; area ( km square ) } ; hop { filter_eq { all_rows ; name ; vale de cambra } ; area ( km square ) } } ; and { eq { hop { filter_eq { all_rows ; name ; santa maria da feira } ; area ( km square ) } ; 215.1 } ; eq { hop { filter_eq { all_rows ; name ; vale de cambra } ; area ( km square ) } ; 146.5 } } }, interpretation: select the rows whose name record fuzzily matches to santa maria da feira . take the area ( km square ) record of this row . select the rows whose name record fuzzily matches to vale de cambra . take the area ( km square ) record of this row . the first record is greater than the second record . the area ( km square ) record of the first row is 215.1 . the area ( km square ) record of the second row is 146.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; santa maria da feira } ; area ( km square ) } ; hop { filter_eq { all_rows ; name ; vale de cambra } ; area ( km square ) } } ; and { eq { hop { filter_eq { all_rows ; name ; santa maria da feira } ; area ( km square ) } ; 215.1 } ; eq { hop { filter_eq { all_rows ; name ; vale de cambra } ; area ( km square ) } ; 146.5 } } }, interpretation: select the rows whose date record fuzzily matches to january 2013 . the sum of the result record of these rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; january 2013 } ; result } ; 2 }, interpretation: select the rows whose date record fuzzily matches to january 2013 . the sum of the result record of these rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; january 2013 } ; result } ; 2 }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the crowd record of this row . select the rows whose home team record fuzzily matches to geelong . take the crowd record of this row . the first record is greater than the second record . the away team record of the first row is footscray . the away team record of the second row is st kilda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; crowd } ; hop { filter_eq { all_rows ; home team ; geelong } ; crowd } } ; and { eq { hop { filter_eq { all_rows ; home team ; fitzroy } ; away team } ; footscray } ; eq { hop { filter_eq { all_rows ; home team ; geelong } ; away team } ; st kilda } } }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the crowd record of this row . select the rows whose home team record fuzzily matches to geelong . take the crowd record of this row . the first record is greater than the second record . the away team record of the first row is footscray . the away team record of the second row is st kilda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; crowd } ; hop { filter_eq { all_rows ; home team ; geelong } ; crowd } } ; and { eq { hop { filter_eq { all_rows ; home team ; fitzroy } ; away team } ; footscray } ; eq { hop { filter_eq { all_rows ; home team ; geelong } ; away team } ; st kilda } } }, interpretation: for the transfer window records of all rows , all of them fuzzily match to winter .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; transfer window ; winter }, interpretation: for the transfer window records of all rows , all of them fuzzily match to winter .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; transfer window ; winter }, interpretation: select the rows whose first broadcast record fuzzily matches to october . among these rows , select the rows whose seans team record fuzzily matches to joe wilkinson . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; first broadcast ; october } ; seans team ; joe wilkinson } } ; 2 }, interpretation: select the rows whose first broadcast record fuzzily matches to october . among these rows , select the rows whose seans team record fuzzily matches to joe wilkinson . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; first broadcast ; october } ; seans team ; joe wilkinson } } ; 2 }, interpretation: select the rows whose season record is equal to 2011 . the maximum races record of these rows is 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; season ; 2011 } ; races } ; 18 }, interpretation: select the rows whose season record is equal to 2011 . the maximum races record of these rows is 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; season ; 2011 } ; races } ; 18 }, interpretation: select the rows whose 1992 - 93 record is equal to 37 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1992 - 93 ; 37 } } ; 2 }, interpretation: select the rows whose 1992 - 93 record is equal to 37 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1992 - 93 ; 37 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to december . among these rows , select the rows whose game site record fuzzily matches to rich stadium . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; december } ; game site ; rich stadium } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to december . among these rows , select the rows whose game site record fuzzily matches to rich stadium . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; december } ; game site ; rich stadium } } ; 2 }, interpretation: select the row whose score record of all rows is 1st maximum . the ground record of this row is humber college north .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; score ; 1 } ; ground } ; humber college north }, interpretation: select the row whose score record of all rows is 1st maximum . the ground record of this row is humber college north .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; score ; 1 } ; ground } ; humber college north }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: the sum of the number of reviews record of all rows is 83 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; number of reviews } ; 83 }, interpretation: the sum of the number of reviews record of all rows is 83 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; number of reviews } ; 83 }, interpretation: select the row whose date record of all rows is 17th minimum . the competition record of this row is 2012 philippine peace cup .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 17 } ; competition } ; 2012 philippine peace cup }, interpretation: select the row whose date record of all rows is 17th minimum . the competition record of this row is 2012 philippine peace cup .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 17 } ; competition } ; 2012 philippine peace cup }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 2 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 2 }, interpretation: for the final score records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; final score ; l }, interpretation: for the final score records of all rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; final score ; l }, interpretation: the sum of the races record of all rows is 164 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 164 }, interpretation: the sum of the races record of all rows is 164 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 164 }, interpretation: the average of the laps record of all rows is 102.9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 102.9 }, interpretation: the average of the laps record of all rows is 102.9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 102.9 }, interpretation: for the res records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; res ; win }, interpretation: for the res records of all rows , most of them fuzzily match to win .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; res ; win }, interpretation: select the rows whose original air date record fuzzily matches to june . select the row whose us viewers ( million ) record of these rows is 1st maximum . the title record of this row is begin the begin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; original air date ; june } ; us viewers ( million ) ; 1 } ; title } ; begin the begin }, interpretation: select the rows whose original air date record fuzzily matches to june . select the row whose us viewers ( million ) record of these rows is 1st maximum . the title record of this row is begin the begin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; original air date ; june } ; us viewers ( million ) ; 1 } ; title } ; begin the begin }, interpretation: select the rows whose bank record fuzzily matches to mellat bank . take the total assets ( score ) record of this row . select the rows whose bank record fuzzily matches to bank of industry and mine . take the total assets ( score ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; bank ; mellat bank } ; total assets ( score ) } ; hop { filter_eq { all_rows ; bank ; bank of industry and mine } ; total assets ( score ) } }, interpretation: select the rows whose bank record fuzzily matches to mellat bank . take the total assets ( score ) record of this row . select the rows whose bank record fuzzily matches to bank of industry and mine . take the total assets ( score ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; bank ; mellat bank } ; total assets ( score ) } ; hop { filter_eq { all_rows ; bank ; bank of industry and mine } ; total assets ( score ) } }, interpretation: select the rows whose name record fuzzily matches to alfred pfaff . take the goals record of this row . select the rows whose name record fuzzily matches to lothar sch\u00e4mer . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; alfred pfaff } ; goals } ; hop { filter_eq { all_rows ; name ; lothar sch\u00e4mer } ; goals } }, interpretation: select the rows whose name record fuzzily matches to alfred pfaff . take the goals record of this row . select the rows whose name record fuzzily matches to lothar sch\u00e4mer . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; alfred pfaff } ; goals } ; hop { filter_eq { all_rows ; name ; lothar sch\u00e4mer } ; goals } }, interpretation: the sum of the frequency mhz record of all rows is 724 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; frequency mhz } ; 724 }, interpretation: the sum of the frequency mhz record of all rows is 724 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; frequency mhz } ; 724 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 5 }, interpretation: for the played records of all rows , all of them are equal to 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 30 }, interpretation: select the rows whose name record fuzzily matches to jeff thomson . take the matches record of this row . select the rows whose name record fuzzily matches to mitchell johnson . take the matches record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; jeff thomson } ; matches } ; hop { filter_eq { all_rows ; name ; mitchell johnson } ; matches } } ; 1 }, interpretation: select the rows whose name record fuzzily matches to jeff thomson . take the matches record of this row . select the rows whose name record fuzzily matches to mitchell johnson . take the matches record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; jeff thomson } ; matches } ; hop { filter_eq { all_rows ; name ; mitchell johnson } ; matches } } ; 1 }, interpretation: select the rows whose elevation ( m ) record is greater than 3000 . for the prominence ( m ) records of these rows , all of them are greater than 2400 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_greater { all_rows ; elevation ( m ) ; 3000 } ; prominence ( m ) ; 2400 }, interpretation: select the rows whose elevation ( m ) record is greater than 3000 . for the prominence ( m ) records of these rows , all of them are greater than 2400 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_greater { all_rows ; elevation ( m ) ; 3000 } ; prominence ( m ) ; 2400 }, interpretation: select the row whose extra points record of all rows is maximum . the player record of this row is merv pregulman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; extra points } ; player } ; merv pregulman }, interpretation: select the row whose extra points record of all rows is maximum . the player record of this row is merv pregulman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; extra points } ; player } ; merv pregulman }, interpretation: select the row whose laps record of all rows is maximum . the year record of this row is 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; laps } ; year } ; 2003 }, interpretation: select the row whose laps record of all rows is maximum . the year record of this row is 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; laps } ; year } ; 2003 }, interpretation: select the row whose total record of all rows is maximum . the country record of this row is france .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; country } ; france }, interpretation: select the row whose total record of all rows is maximum . the country record of this row is france .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; country } ; france }, interpretation: select the row whose rank record of all rows is minimum . the nation record of this row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; rank } ; nation } ; soviet union }, interpretation: select the row whose rank record of all rows is minimum . the nation record of this row is soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; rank } ; nation } ; soviet union }, interpretation: select the rows whose artist record fuzzily matches to dire straits . take the claimed sales record of this row . select the rows whose artist record fuzzily matches to barbra streisand . take the claimed sales record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; artist ; dire straits } ; claimed sales } ; hop { filter_eq { all_rows ; artist ; barbra streisand } ; claimed sales } }, interpretation: select the rows whose artist record fuzzily matches to dire straits . take the claimed sales record of this row . select the rows whose artist record fuzzily matches to barbra streisand . take the claimed sales record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; artist ; dire straits } ; claimed sales } ; hop { filter_eq { all_rows ; artist ; barbra streisand } ; claimed sales } }, interpretation: select the rows whose party record fuzzily matches to conservative . take the votes record of this row . select the rows whose party record fuzzily matches to labour . take the votes record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; party ; conservative } ; votes } ; hop { filter_eq { all_rows ; party ; labour } ; votes } }, interpretation: select the rows whose party record fuzzily matches to conservative . take the votes record of this row . select the rows whose party record fuzzily matches to labour . take the votes record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; party ; conservative } ; votes } ; hop { filter_eq { all_rows ; party ; labour } ; votes } }, interpretation: select the row whose score record of all rows is minimum . the player record of this row is phil mickelson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; score } ; player } ; phil mickelson }, interpretation: select the row whose score record of all rows is minimum . the player record of this row is phil mickelson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; score } ; player } ; phil mickelson }, interpretation: for the status records of all rows , most of them fuzzily match to loaned .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; status ; loaned }, interpretation: for the status records of all rows , most of them fuzzily match to loaned .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; status ; loaned }, interpretation: select the rows whose opponent in the final record fuzzily matches to mark selby . there is only one such row in the table . the championship record of this unqiue row is uk championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; mark selby } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; mark selby } ; championship } ; uk championship } }, interpretation: select the rows whose opponent in the final record fuzzily matches to mark selby . there is only one such row in the table . the championship record of this unqiue row is uk championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; mark selby } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; mark selby } ; championship } ; uk championship } }, interpretation: for the birth records of all rows , most of them are less than 1800 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; birth ; 1800 }, interpretation: for the birth records of all rows , most of them are less than 1800 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; birth ; 1800 }, interpretation: for the years records of all rows , most of them fuzzily match to 2001 - 2004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; years ; 2001 - 2004 }, interpretation: for the years records of all rows , most of them fuzzily match to 2001 - 2004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; years ; 2001 - 2004 }, interpretation: the average of the rating record of all rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rating } ; 4 }, interpretation: the average of the rating record of all rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rating } ; 4 }, interpretation: select the rows whose album record fuzzily matches to american gangster . take the 1st week sales record of this row . select the rows whose album record fuzzily matches to from nothin ' to somethin' . take the 1st week sales record of this row . the first record is greater than the second record . the 1st week sales record of the first row is 426000 . the 1st week sales record of the second row is 159000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; album ; american gangster } ; 1st week sales } ; hop { filter_eq { all_rows ; album ; from nothin ' to somethin' } ; 1st week sales } } ; and { eq { hop { filter_eq { all_rows ; album ; american gangster } ; 1st week sales } ; 426000 } ; eq { hop { filter_eq { all_rows ; album ; from nothin ' to somethin' } ; 1st week sales } ; 159000 } } }, interpretation: select the rows whose album record fuzzily matches to american gangster . take the 1st week sales record of this row . select the rows whose album record fuzzily matches to from nothin ' to somethin' . take the 1st week sales record of this row . the first record is greater than the second record . the 1st week sales record of the first row is 426000 . the 1st week sales record of the second row is 159000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; album ; american gangster } ; 1st week sales } ; hop { filter_eq { all_rows ; album ; from nothin ' to somethin' } ; 1st week sales } } ; and { eq { hop { filter_eq { all_rows ; album ; american gangster } ; 1st week sales } ; 426000 } ; eq { hop { filter_eq { all_rows ; album ; from nothin ' to somethin' } ; 1st week sales } ; 159000 } } }, interpretation: select the row whose matches record of all rows is maximum . the goalkeeper record of this row is chema .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; goalkeeper } ; chema }, interpretation: select the row whose matches record of all rows is maximum . the goalkeeper record of this row is chema .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; goalkeeper } ; chema }, interpretation: select the rows whose visitor record fuzzily matches to pittsburgh . take the date record of this row . select the rows whose visitor record fuzzily matches to boston . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; pittsburgh } ; date } ; hop { filter_eq { all_rows ; visitor ; boston } ; date } }, interpretation: select the rows whose visitor record fuzzily matches to pittsburgh . take the date record of this row . select the rows whose visitor record fuzzily matches to boston . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; pittsburgh } ; date } ; hop { filter_eq { all_rows ; visitor ; boston } ; date } }, interpretation: select the rows whose gpu model record fuzzily matches to hd graphics 4000 . for the l3 cache records of these rows , most of them fuzzily match to 6mb .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; gpu model ; hd graphics 4000 } ; l3 cache ; 6mb }, interpretation: select the rows whose gpu model record fuzzily matches to hd graphics 4000 . for the l3 cache records of these rows , most of them fuzzily match to 6mb .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; gpu model ; hd graphics 4000 } ; l3 cache ; 6mb }, interpretation: select the rows whose college record fuzzily matches to acadia . there is only one such row in the table . the player record of this unqiue row is karl ortmanns .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; acadia } } ; eq { hop { filter_eq { all_rows ; college ; acadia } ; player } ; karl ortmanns } }, interpretation: select the rows whose college record fuzzily matches to acadia . there is only one such row in the table . the player record of this unqiue row is karl ortmanns .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; acadia } } ; eq { hop { filter_eq { all_rows ; college ; acadia } ; player } ; karl ortmanns } }, interpretation: the average of the pick record of all rows is 20.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 20.8 }, interpretation: the average of the pick record of all rows is 20.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 20.8 }, interpretation: select the rows whose partner record fuzzily matches to igor sijsling . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; igor sijsling } } ; 2 }, interpretation: select the rows whose partner record fuzzily matches to igor sijsling . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; igor sijsling } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to fleetcenter . the minimum date record of these rows is fri mar 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; location ; fleetcenter } ; date } ; fri mar 1 }, interpretation: select the rows whose location record fuzzily matches to fleetcenter . the minimum date record of these rows is fri mar 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; location ; fleetcenter } ; date } ; fri mar 1 }, interpretation: select the rows whose moving parts record fuzzily matches to yes . there is only one such row in the table . the technology record of this unqiue row is flow .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; moving parts ; yes } } ; eq { hop { filter_eq { all_rows ; moving parts ; yes } ; technology } ; flow } }, interpretation: select the rows whose moving parts record fuzzily matches to yes . there is only one such row in the table . the technology record of this unqiue row is flow .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; moving parts ; yes } } ; eq { hop { filter_eq { all_rows ; moving parts ; yes } ; technology } ; flow } }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is south korea .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; south korea }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is south korea .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; south korea }, interpretation: select the rows whose opponent record fuzzily matches to queensland . take the runs record of this row . select the rows whose opponent record fuzzily matches to victoria . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; queensland } ; runs } ; hop { filter_eq { all_rows ; opponent ; victoria } ; runs } }, interpretation: select the rows whose opponent record fuzzily matches to queensland . take the runs record of this row . select the rows whose opponent record fuzzily matches to victoria . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; queensland } ; runs } ; hop { filter_eq { all_rows ; opponent ; victoria } ; runs } }, interpretation: select the row whose height ( in ) record of all rows is maximum . the contestant record of this row is happie ntelamo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height ( in ) } ; contestant } ; happie ntelamo }, interpretation: select the row whose height ( in ) record of all rows is maximum . the contestant record of this row is happie ntelamo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height ( in ) } ; contestant } ; happie ntelamo }, interpretation: select the rows whose 1988 record is equal to - . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; 1988 ; - } }, interpretation: select the rows whose 1988 record is equal to - . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; 1988 ; - } }, interpretation: select the rows whose player record fuzzily matches to tom watson . take the total record of this row . select the rows whose player record fuzzily matches to tom weiskopf . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; tom watson } ; total } ; hop { filter_eq { all_rows ; player ; tom weiskopf } ; total } }, interpretation: select the rows whose player record fuzzily matches to tom watson . take the total record of this row . select the rows whose player record fuzzily matches to tom weiskopf . take the total record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; tom watson } ; total } ; hop { filter_eq { all_rows ; player ; tom weiskopf } ; total } }, interpretation: the average of the matches record of all rows is 51 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; matches } ; 51 }, interpretation: the average of the matches record of all rows is 51 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; matches } ; 51 }, interpretation: select the row whose multi lane record of all rows is maximum . the category wise record of this row is national highways .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; multi lane } ; category wise } ; national highways }, interpretation: select the row whose multi lane record of all rows is maximum . the category wise record of this row is national highways .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; multi lane } ; category wise } ; national highways }, interpretation: select the rows whose laps record is less than 5 . there is only one such row in the table . the year record of this unqiue row is 1953 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; laps ; 5 } } ; eq { hop { filter_less { all_rows ; laps ; 5 } ; year } ; 1953 } }, interpretation: select the rows whose laps record is less than 5 . there is only one such row in the table . the year record of this unqiue row is 1953 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; laps ; 5 } } ; eq { hop { filter_less { all_rows ; laps ; 5 } ; year } ; 1953 } }, interpretation: for the first issue records of all rows , most of them fuzzily match to august 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first issue ; august 2008 }, interpretation: for the first issue records of all rows , most of them fuzzily match to august 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first issue ; august 2008 }, interpretation: select the rows whose from record is greater than or equal to 1930 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; from ; 1930 } } ; 3 }, interpretation: select the rows whose from record is greater than or equal to 1930 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; from ; 1930 } } ; 3 }, interpretation: select the rows whose network record fuzzily matches to the wb . the sum of the viewers in millions record of these rows is 7.62 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; network ; the wb } ; viewers in millions } ; 7.62 }, interpretation: select the rows whose network record fuzzily matches to the wb . the sum of the viewers in millions record of these rows is 7.62 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; network ; the wb } ; viewers in millions } ; 7.62 }, interpretation: select the rows whose equatorial bulge record is less than 100 . select the row whose equatorial diameter record of these rows is 1st maximum . the body record of this row is earth .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_less { all_rows ; equatorial bulge ; 100 } ; equatorial diameter ; 1 } ; body } ; earth }, interpretation: select the rows whose equatorial bulge record is less than 100 . select the row whose equatorial diameter record of these rows is 1st maximum . the body record of this row is earth .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_less { all_rows ; equatorial bulge ; 100 } ; equatorial diameter ; 1 } ; body } ; earth }, interpretation: select the rows whose namesake record fuzzily matches to assyrian town where ishtar was worshipped . there is only one such row in the table . the name record of this unqiue row is arbela sulcus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; namesake ; assyrian town where ishtar was worshipped } } ; eq { hop { filter_eq { all_rows ; namesake ; assyrian town where ishtar was worshipped } ; name } ; arbela sulcus } }, interpretation: select the rows whose namesake record fuzzily matches to assyrian town where ishtar was worshipped . there is only one such row in the table . the name record of this unqiue row is arbela sulcus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; namesake ; assyrian town where ishtar was worshipped } } ; eq { hop { filter_eq { all_rows ; namesake ; assyrian town where ishtar was worshipped } ; name } ; arbela sulcus } }, interpretation: the 4th minimum year record of all rows is 1985 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; year ; 4 } ; 1985 }, interpretation: the 4th minimum year record of all rows is 1985 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; year ; 4 } ; 1985 }, interpretation: select the rows whose location record fuzzily matches to beijing . take the year record of this row . select the rows whose location record fuzzily matches to hiroshima . take the year record of this row . the second record is 4 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; location ; beijing } ; year } ; hop { filter_eq { all_rows ; location ; hiroshima } ; year } } ; -4 }, interpretation: select the rows whose location record fuzzily matches to beijing . take the year record of this row . select the rows whose location record fuzzily matches to hiroshima . take the year record of this row . the second record is 4 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; location ; beijing } ; year } ; hop { filter_eq { all_rows ; location ; hiroshima } ; year } } ; -4 }, interpretation: the average of the elevation ( m ) record of all rows is 2069.16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; elevation ( m ) } ; 2069.16 }, interpretation: the average of the elevation ( m ) record of all rows is 2069.16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; elevation ( m ) } ; 2069.16 }, interpretation: select the rows whose state record fuzzily matches to illinois . among these rows , select the rows whose founded record is equal to 1887 . there is only one such row in the table . the school record of this unqiue row is benedictine university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; state ; illinois } ; founded ; 1887 } } ; eq { hop { filter_eq { filter_eq { all_rows ; state ; illinois } ; founded ; 1887 } ; school } ; benedictine university } }, interpretation: select the rows whose state record fuzzily matches to illinois . among these rows , select the rows whose founded record is equal to 1887 . there is only one such row in the table . the school record of this unqiue row is benedictine university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; state ; illinois } ; founded ; 1887 } } ; eq { hop { filter_eq { filter_eq { all_rows ; state ; illinois } ; founded ; 1887 } ; school } ; benedictine university } }, interpretation: select the rows whose date record fuzzily matches to december . there is only one such row in the table . the round record of this unqiue row is 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; december } } ; eq { hop { filter_eq { all_rows ; date ; december } ; round } ; 20 } }, interpretation: select the rows whose date record fuzzily matches to december . there is only one such row in the table . the round record of this unqiue row is 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; december } } ; eq { hop { filter_eq { all_rows ; date ; december } ; round } ; 20 } }, interpretation: select the rows whose gender record fuzzily matches to m . the maximum votes record of these rows is 11542 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; gender ; m } ; votes } ; 11542 }, interpretation: select the rows whose gender record fuzzily matches to m . the maximum votes record of these rows is 11542 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; gender ; m } ; votes } ; 11542 }, interpretation: select the rows whose attendance record is less than 10000 . there is only one such row in the table . the date record of this unqiue row is march 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; attendance ; 10000 } } ; eq { hop { filter_less { all_rows ; attendance ; 10000 } ; date } ; march 11 } }, interpretation: select the rows whose attendance record is less than 10000 . there is only one such row in the table . the date record of this unqiue row is march 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; attendance ; 10000 } } ; eq { hop { filter_less { all_rows ; attendance ; 10000 } ; date } ; march 11 } }, interpretation: for the general classification records of all rows , most of them fuzzily match to alejandro valverde .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; general classification ; alejandro valverde }, interpretation: for the general classification records of all rows , most of them fuzzily match to alejandro valverde .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; general classification ; alejandro valverde }, interpretation: select the rows whose name record fuzzily matches to john childress . take the overall record of this row . select the rows whose name record fuzzily matches to claude crabb . take the overall record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; john childress } ; overall } ; hop { filter_eq { all_rows ; name ; claude crabb } ; overall } }, interpretation: select the rows whose name record fuzzily matches to john childress . take the overall record of this row . select the rows whose name record fuzzily matches to claude crabb . take the overall record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; john childress } ; overall } ; hop { filter_eq { all_rows ; name ; claude crabb } ; overall } }, interpretation: select the rows whose vehicle record fuzzily matches to mitsubishi i - miev . take the clean electric grid california ( san francisco ) record of this row . select the rows whose vehicle record fuzzily matches to chevrolet volt . take the clean electric grid california ( san francisco ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; vehicle ; mitsubishi i - miev } ; clean electric grid california ( san francisco ) } ; hop { filter_eq { all_rows ; vehicle ; chevrolet volt } ; clean electric grid california ( san francisco ) } }, interpretation: select the rows whose vehicle record fuzzily matches to mitsubishi i - miev . take the clean electric grid california ( san francisco ) record of this row . select the rows whose vehicle record fuzzily matches to chevrolet volt . take the clean electric grid california ( san francisco ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; vehicle ; mitsubishi i - miev } ; clean electric grid california ( san francisco ) } ; hop { filter_eq { all_rows ; vehicle ; chevrolet volt } ; clean electric grid california ( san francisco ) } }, interpretation: for the outcome records of all rows , most of them fuzzily match to winner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; winner }, interpretation: select the row whose capacity record of all rows is 2nd minimum . the stadium record of this row is stadio italia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; capacity ; 2 } ; stadium } ; stadio italia }, interpretation: select the row whose capacity record of all rows is 2nd minimum . the stadium record of this row is stadio italia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; capacity ; 2 } ; stadium } ; stadio italia }, interpretation: select the rows whose team record is arbitrary . the number of such rows is 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; team } } ; 18 }, interpretation: select the rows whose team record is arbitrary . the number of such rows is 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; team } } ; 18 }, interpretation: for the result records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; win }, interpretation: select the row whose overall pick record of all rows is 3rd minimum . the player record of this row is dennis byrd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; overall pick ; 3 } ; player } ; dennis byrd }, interpretation: select the row whose overall pick record of all rows is 3rd minimum . the player record of this row is dennis byrd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; overall pick ; 3 } ; player } ; dennis byrd }, interpretation: for the game site records of all rows , most of them fuzzily match to kingdome .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; game site ; kingdome }, interpretation: for the game site records of all rows , most of them fuzzily match to kingdome .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; game site ; kingdome }, interpretation: select the rows whose owner record fuzzily matches to university . there is only one such row in the table . the frequency record of this unqiue row is fm 101.7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; owner ; university } } ; eq { hop { filter_eq { all_rows ; owner ; university } ; frequency } ; fm 101.7 } }, interpretation: select the rows whose owner record fuzzily matches to university . there is only one such row in the table . the frequency record of this unqiue row is fm 101.7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; owner ; university } } ; eq { hop { filter_eq { all_rows ; owner ; university } ; frequency } ; fm 101.7 } }, interpretation: select the rows whose college record fuzzily matches to detroit mercy . there is only one such row in the table . the player record of this unqiue row is joe kopicki .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; detroit mercy } } ; eq { hop { filter_eq { all_rows ; college ; detroit mercy } ; player } ; joe kopicki } }, interpretation: select the rows whose college record fuzzily matches to detroit mercy . there is only one such row in the table . the player record of this unqiue row is joe kopicki .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; detroit mercy } } ; eq { hop { filter_eq { all_rows ; college ; detroit mercy } ; player } ; joe kopicki } }, interpretation: select the rows whose guest record fuzzily matches to garry trudeau . there is only one such row in the table . the episode record of this unqiue row is 806 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; guest ; garry trudeau } } ; eq { hop { filter_eq { all_rows ; guest ; garry trudeau } ; episode } ; 806 } }, interpretation: select the rows whose guest record fuzzily matches to garry trudeau . there is only one such row in the table . the episode record of this unqiue row is 806 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; guest ; garry trudeau } } ; eq { hop { filter_eq { all_rows ; guest ; garry trudeau } ; episode } ; 806 } }, interpretation: select the rows whose league record is equal to 7 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; league ; 7 } } ; 2 }, interpretation: select the rows whose league record is equal to 7 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; league ; 7 } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to sabrina gole\u0161 . there is only one such row in the table . the date record of this unqiue row is 23 april 1984 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; sabrina gole\u0161 } } ; eq { hop { filter_eq { all_rows ; opponent ; sabrina gole\u0161 } ; date } ; 23 april 1984 } }, interpretation: select the rows whose opponent record fuzzily matches to sabrina gole\u0161 . there is only one such row in the table . the date record of this unqiue row is 23 april 1984 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; sabrina gole\u0161 } } ; eq { hop { filter_eq { all_rows ; opponent ; sabrina gole\u0161 } ; date } ; 23 april 1984 } }, interpretation: select the rows whose city of license record fuzzily matches to kingston . take the frequency record of this row . select the rows whose city of license record fuzzily matches to pembroke . take the frequency record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; city of license ; kingston } ; frequency } ; hop { filter_eq { all_rows ; city of license ; pembroke } ; frequency } }, interpretation: select the rows whose city of license record fuzzily matches to kingston . take the frequency record of this row . select the rows whose city of license record fuzzily matches to pembroke . take the frequency record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; city of license ; kingston } ; frequency } ; hop { filter_eq { all_rows ; city of license ; pembroke } ; frequency } }, interpretation: select the row whose attendance record of all rows is maximum . the game site record of this row is waldstadion .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; game site } ; waldstadion }, interpretation: select the row whose attendance record of all rows is maximum . the game site record of this row is waldstadion .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; game site } ; waldstadion }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 3 }, interpretation: for the status records of all rows , all of them fuzzily match to running .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; status ; running }, interpretation: for the status records of all rows , all of them fuzzily match to running .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; status ; running }, interpretation: select the rows whose platform ( s ) record fuzzily matches to gamecube . there is only one such row in the table . the game record of this unqiue row is resident evil 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; platform ( s ) ; gamecube } } ; eq { hop { filter_eq { all_rows ; platform ( s ) ; gamecube } ; game } ; resident evil 4 } }, interpretation: select the rows whose platform ( s ) record fuzzily matches to gamecube . there is only one such row in the table . the game record of this unqiue row is resident evil 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; platform ( s ) ; gamecube } } ; eq { hop { filter_eq { all_rows ; platform ( s ) ; gamecube } ; game } ; resident evil 4 } }, interpretation: the average of the attendance record of all rows is 67503 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 67503 }, interpretation: the average of the attendance record of all rows is 67503 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 67503 }, interpretation: for the national team records of all rows , all of them fuzzily match to brazil .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; national team ; brazil }, interpretation: for the national team records of all rows , all of them fuzzily match to brazil .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; national team ; brazil }, interpretation: select the row whose us viewers ( million ) record of all rows is maximum . the title record of this row is baby not on board .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( million ) } ; title } ; baby not on board }, interpretation: select the row whose us viewers ( million ) record of all rows is maximum . the title record of this row is baby not on board .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( million ) } ; title } ; baby not on board }, interpretation: select the rows whose incumbent record fuzzily matches to sam graves . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to russ carnahan . take the first elected record of this row . the second record is 4 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; sam graves } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; russ carnahan } ; first elected } } ; -4 }, interpretation: select the rows whose incumbent record fuzzily matches to sam graves . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to russ carnahan . take the first elected record of this row . the second record is 4 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; sam graves } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; russ carnahan } ; first elected } } ; -4 }, interpretation: for the result records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; win }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . take the january record of this row . select the rows whose opponent record fuzzily matches to carolina hurricanes . take the january record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; chicago blackhawks } ; january } ; hop { filter_eq { all_rows ; opponent ; carolina hurricanes } ; january } }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . take the january record of this row . select the rows whose opponent record fuzzily matches to carolina hurricanes . take the january record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; chicago blackhawks } ; january } ; hop { filter_eq { all_rows ; opponent ; carolina hurricanes } ; january } }, interpretation: select the row whose - record of all rows is 2nd minimum . the team record of this row is rahal letterman lanigan racing .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; - ; 2 } ; team } ; rahal letterman lanigan racing }, interpretation: select the row whose - record of all rows is 2nd minimum . the team record of this row is rahal letterman lanigan racing .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; - ; 2 } ; team } ; rahal letterman lanigan racing }, interpretation: for the headquarters records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; headquarters ; united states }, interpretation: select the rows whose wins record is greater than 4 . among these rows , select the rows whose loses record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; wins ; 4 } ; loses ; 2 } } ; 2 }, interpretation: select the rows whose wins record is greater than 4 . among these rows , select the rows whose loses record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; wins ; 4 } ; loses ; 2 } } ; 2 }, interpretation: the minimum place record of all rows is 1st . the song record of the row with superlative place record is what 's another year .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { min { all_rows ; place } ; 1st } ; eq { hop { argmin { all_rows ; place } ; song } ; what 's another year } }, interpretation: the minimum place record of all rows is 1st . the song record of the row with superlative place record is what 's another year .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { min { all_rows ; place } ; 1st } ; eq { hop { argmin { all_rows ; place } ; song } ; what 's another year } }, interpretation: select the row whose date record of all rows is 2nd minimum . the score record of this row is 3 - 6 , 2 - 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; score } ; 3 - 6 , 2 - 6 }, interpretation: select the row whose date record of all rows is 2nd minimum . the score record of this row is 3 - 6 , 2 - 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; score } ; 3 - 6 , 2 - 6 }, interpretation: select the rows whose college record fuzzily matches to iowa state . there is only one such row in the table . the name record of this unqiue row is clyde shugart .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; iowa state } } ; eq { hop { filter_eq { all_rows ; college ; iowa state } ; name } ; clyde shugart } }, interpretation: select the rows whose college record fuzzily matches to iowa state . there is only one such row in the table . the name record of this unqiue row is clyde shugart .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; iowa state } } ; eq { hop { filter_eq { all_rows ; college ; iowa state } ; name } ; clyde shugart } }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is brunswick street oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; brunswick street oval }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is brunswick street oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; brunswick street oval }, interpretation: the 2nd minimum date record of all rows is jun 25 . the score record of the row with 2nd minimum date record is 2 - 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 2 } ; jun 25 } ; eq { hop { nth_argmin { all_rows ; date ; 2 } ; score } ; 2 - 3 } }, interpretation: the 2nd minimum date record of all rows is jun 25 . the score record of the row with 2nd minimum date record is 2 - 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 2 } ; jun 25 } ; eq { hop { nth_argmin { all_rows ; date ; 2 } ; score } ; 2 - 3 } }, interpretation: the sum of the ends won record of all rows is 516 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; ends won } ; 516 }, interpretation: the sum of the ends won record of all rows is 516 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; ends won } ; 516 }, interpretation: select the rows whose year record fuzzily matches to 1987 . take the points record of this row . select the rows whose year record fuzzily matches to 1995 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1987 } ; points } ; hop { filter_eq { all_rows ; year ; 1995 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 1987 . take the points record of this row . select the rows whose year record fuzzily matches to 1995 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1987 } ; points } ; hop { filter_eq { all_rows ; year ; 1995 } ; points } }, interpretation: select the rows whose home team score record is greater than 10 . for the crowd records of these rows , most of them are less than 20000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_greater { all_rows ; home team score ; 10 } ; crowd ; 20000 }, interpretation: select the rows whose home team score record is greater than 10 . for the crowd records of these rows , most of them are less than 20000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_greater { all_rows ; home team score ; 10 } ; crowd ; 20000 }, interpretation: select the rows whose res record fuzzily matches to win . among these rows , select the rows whose round record is equal to 1 . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; res ; win } ; round ; 1 } } ; 8 }, interpretation: select the rows whose res record fuzzily matches to win . among these rows , select the rows whose round record is equal to 1 . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; res ; win } ; round ; 1 } } ; 8 }, interpretation: select the rows whose try bonus record is equal to 1 . there is only one such row in the table . the club record of this unqiue row is cefn coed rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; try bonus ; 1 } } ; eq { hop { filter_eq { all_rows ; try bonus ; 1 } ; club } ; cefn coed rfc } }, interpretation: select the rows whose try bonus record is equal to 1 . there is only one such row in the table . the club record of this unqiue row is cefn coed rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; try bonus ; 1 } } ; eq { hop { filter_eq { all_rows ; try bonus ; 1 } ; club } ; cefn coed rfc } }, interpretation: select the rows whose mult 1 record fuzzily matches to 8x . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; mult 1 ; 8x } } ; 2 }, interpretation: select the rows whose mult 1 record fuzzily matches to 8x . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; mult 1 ; 8x } } ; 2 }, interpretation: for the number of aircraft records of all rows , most of them are greater than 40 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; number of aircraft ; 40 }, interpretation: for the number of aircraft records of all rows , most of them are greater than 40 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; number of aircraft ; 40 }, interpretation: select the rows whose result record fuzzily matches to lost re - election democratic gain . there is only one such row in the table . the incumbent record of this unqiue row is fred e busbey .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; lost re - election democratic gain } } ; eq { hop { filter_eq { all_rows ; result ; lost re - election democratic gain } ; incumbent } ; fred e busbey } }, interpretation: select the rows whose result record fuzzily matches to lost re - election democratic gain . there is only one such row in the table . the incumbent record of this unqiue row is fred e busbey .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; lost re - election democratic gain } } ; eq { hop { filter_eq { all_rows ; result ; lost re - election democratic gain } ; incumbent } ; fred e busbey } }, interpretation: select the rows whose country record fuzzily matches to northern ireland . there is only one such row in the table . the player record of this unqiue row is david feherty .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; northern ireland } } ; eq { hop { filter_eq { all_rows ; country ; northern ireland } ; player } ; david feherty } }, interpretation: select the rows whose country record fuzzily matches to northern ireland . there is only one such row in the table . the player record of this unqiue row is david feherty .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; northern ireland } } ; eq { hop { filter_eq { all_rows ; country ; northern ireland } ; player } ; david feherty } }, interpretation: the 1st minimum us release date record of all rows is 27 june 2006 . the title record of the row with 1st minimum us release date record is galaxy angel .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; us release date ; 1 } ; 27 june 2006 } ; eq { hop { nth_argmin { all_rows ; us release date ; 1 } ; title } ; galaxy angel } }, interpretation: the 1st minimum us release date record of all rows is 27 june 2006 . the title record of the row with 1st minimum us release date record is galaxy angel .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; us release date ; 1 } ; 27 june 2006 } ; eq { hop { nth_argmin { all_rows ; us release date ; 1 } ; title } ; galaxy angel } }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is indiana university southeast .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; indiana university southeast }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is indiana university southeast .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; indiana university southeast }, interpretation: select the rows whose regular season record is greater than 600 . there is only one such row in the table . the name record of this unqiue row is bobby hull .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; regular season ; 600 } } ; eq { hop { filter_greater { all_rows ; regular season ; 600 } ; name } ; bobby hull } }, interpretation: select the rows whose regular season record is greater than 600 . there is only one such row in the table . the name record of this unqiue row is bobby hull .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; regular season ; 600 } } ; eq { hop { filter_greater { all_rows ; regular season ; 600 } ; name } ; bobby hull } }, interpretation: the maximum highest record of all rows is 1398 . the team record of the row with superlative highest record is dumbarton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; highest } ; 1398 } ; eq { hop { argmax { all_rows ; highest } ; team } ; dumbarton } }, interpretation: the maximum highest record of all rows is 1398 . the team record of the row with superlative highest record is dumbarton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; highest } ; 1398 } ; eq { hop { argmax { all_rows ; highest } ; team } ; dumbarton } }, interpretation: the sum of the points record of all rows is 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 0 }, interpretation: for the notes records of all rows , most of them fuzzily match to short film .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; notes ; short film }, interpretation: for the notes records of all rows , most of them fuzzily match to short film .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; notes ; short film }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the visitor record of this row is kings .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; visitor } ; kings }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the visitor record of this row is kings .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; visitor } ; kings }, interpretation: for the livery records of all rows , most of them fuzzily match to pacific national blue & yellow .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; livery ; pacific national blue & yellow }, interpretation: for the livery records of all rows , most of them fuzzily match to pacific national blue & yellow .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; livery ; pacific national blue & yellow }, interpretation: select the rows whose institution record fuzzily matches to university of texas at austin . take the enrollment record of this row . select the rows whose institution record fuzzily matches to texas christian university . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; institution ; university of texas at austin } ; enrollment } ; hop { filter_eq { all_rows ; institution ; texas christian university } ; enrollment } }, interpretation: select the rows whose institution record fuzzily matches to university of texas at austin . take the enrollment record of this row . select the rows whose institution record fuzzily matches to texas christian university . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; institution ; university of texas at austin } ; enrollment } ; hop { filter_eq { all_rows ; institution ; texas christian university } ; enrollment } }, interpretation: select the rows whose english title record fuzzily matches to bad education . take the year record of this row . select the rows whose english title record fuzzily matches to city of god . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; bad education } ; year } ; hop { filter_eq { all_rows ; english title ; city of god } ; year } }, interpretation: select the rows whose english title record fuzzily matches to bad education . take the year record of this row . select the rows whose english title record fuzzily matches to city of god . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; bad education } ; year } ; hop { filter_eq { all_rows ; english title ; city of god } ; year } }, interpretation: for the no of installments records of all rows , most of them are less than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; no of installments ; 100 }, interpretation: for the no of installments records of all rows , most of them are less than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; no of installments ; 100 }, interpretation: the sum of the score record of all rows is 4577 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 4577 }, interpretation: the sum of the score record of all rows is 4577 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 4577 }, interpretation: select the rows whose leading scorer record fuzzily matches to tony parker . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; leading scorer ; tony parker } } ; 4 }, interpretation: select the rows whose leading scorer record fuzzily matches to tony parker . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; leading scorer ; tony parker } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to win . for the wildcats points records of these rows , most of them are greater than 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; result ; win } ; wildcats points ; 20 }, interpretation: select the rows whose result record fuzzily matches to win . for the wildcats points records of these rows , most of them are greater than 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; result ; win } ; wildcats points ; 20 }, interpretation: select the rows whose county record fuzzily matches to oppland . there is only one such row in the table . the name record of this unqiue row is galdh\u00f8piggen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; county ; oppland } } ; eq { hop { filter_eq { all_rows ; county ; oppland } ; name } ; galdh\u00f8piggen } }, interpretation: select the rows whose county record fuzzily matches to oppland . there is only one such row in the table . the name record of this unqiue row is galdh\u00f8piggen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; county ; oppland } } ; eq { hop { filter_eq { all_rows ; county ; oppland } ; name } ; galdh\u00f8piggen } }, interpretation: select the rows whose name record fuzzily matches to ray lindwall . take the wickets record of this row . select the rows whose name record fuzzily matches to clarrie grimmett . take the wickets record of this row . the first record is 12 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; ray lindwall } ; wickets } ; hop { filter_eq { all_rows ; name ; clarrie grimmett } ; wickets } } ; 12 }, interpretation: select the rows whose name record fuzzily matches to ray lindwall . take the wickets record of this row . select the rows whose name record fuzzily matches to clarrie grimmett . take the wickets record of this row . the first record is 12 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; ray lindwall } ; wickets } ; hop { filter_eq { all_rows ; name ; clarrie grimmett } ; wickets } } ; 12 }, interpretation: select the rows whose oberbayern a record fuzzily matches to bsc sendling . take the season record of this row . select the rows whose oberbayern a record fuzzily matches to fc oberau . take the season record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; oberbayern a ; bsc sendling } ; season } ; hop { filter_eq { all_rows ; oberbayern a ; fc oberau } ; season } }, interpretation: select the rows whose oberbayern a record fuzzily matches to bsc sendling . take the season record of this row . select the rows whose oberbayern a record fuzzily matches to fc oberau . take the season record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; oberbayern a ; bsc sendling } ; season } ; hop { filter_eq { all_rows ; oberbayern a ; fc oberau } ; season } }, interpretation: select the rows whose location attendance record fuzzily matches to united center . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; united center } } ; 3 }, interpretation: select the rows whose location attendance record fuzzily matches to united center . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; united center } } ; 3 }, interpretation: the sum of the score record of all rows is 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 16 }, interpretation: the sum of the score record of all rows is 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 16 }, interpretation: select the row whose gross record of all rows is 5th maximum . the title record of this row is the color purple . the director record of this row is steven spielberg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmax { all_rows ; gross ; 5 } ; title } ; the color purple } ; eq { hop { nth_argmax { all_rows ; gross ; 5 } ; director } ; steven spielberg } }, interpretation: select the row whose gross record of all rows is 5th maximum . the title record of this row is the color purple . the director record of this row is steven spielberg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmax { all_rows ; gross ; 5 } ; title } ; the color purple } ; eq { hop { nth_argmax { all_rows ; gross ; 5 } ; director } ; steven spielberg } }, interpretation: select the row whose inn record of all rows is 2nd minimum . the team record of this row is arizona diamondbacks .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; inn ; 2 } ; team } ; arizona diamondbacks }, interpretation: select the row whose inn record of all rows is 2nd minimum . the team record of this row is arizona diamondbacks .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; inn ; 2 } ; team } ; arizona diamondbacks }, interpretation: select the rows whose score record is equal to 71 . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 71 } } ; 11 }, interpretation: select the rows whose score record is equal to 71 . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 71 } } ; 11 }, interpretation: select the rows whose date record fuzzily matches to 12 june 1972 . among these rows , select the rows whose crowd record is greater than 20000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; 12 june 1972 } ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 12 june 1972 . among these rows , select the rows whose crowd record is greater than 20000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; 12 june 1972 } ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose november record fuzzily matches to 27 . take the points record of this row . select the rows whose november record fuzzily matches to 29 . take the points record of this row . the second record is 2 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; november ; 27 } ; points } ; hop { filter_eq { all_rows ; november ; 29 } ; points } } ; -2 }, interpretation: select the rows whose november record fuzzily matches to 27 . take the points record of this row . select the rows whose november record fuzzily matches to 29 . take the points record of this row . the second record is 2 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; november ; 27 } ; points } ; hop { filter_eq { all_rows ; november ; 29 } ; points } } ; -2 }, interpretation: the maximum us viewers ( million ) record of all rows is 6.14 . the no in season record of the row with superlative us viewers ( million ) record is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; us viewers ( million ) } ; 6.14 } ; eq { hop { argmax { all_rows ; us viewers ( million ) } ; no in season } ; 1 } }, interpretation: the maximum us viewers ( million ) record of all rows is 6.14 . the no in season record of the row with superlative us viewers ( million ) record is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; us viewers ( million ) } ; 6.14 } ; eq { hop { argmax { all_rows ; us viewers ( million ) } ; no in season } ; 1 } }, interpretation: select the rows whose gold record is equal to 6 . there is only one such row in the table . the nation record of this unqiue row is united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 6 } } ; eq { hop { filter_eq { all_rows ; gold ; 6 } ; nation } ; united states } }, interpretation: select the rows whose gold record is equal to 6 . there is only one such row in the table . the nation record of this unqiue row is united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 6 } } ; eq { hop { filter_eq { all_rows ; gold ; 6 } ; nation } ; united states } }, interpretation: for the res records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; res ; win }, interpretation: select the row whose facility id record of all rows is maximum . the call sign record of this row is wmhu .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; facility id } ; call sign } ; wmhu }, interpretation: select the row whose facility id record of all rows is maximum . the call sign record of this row is wmhu .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; facility id } ; call sign } ; wmhu }, interpretation: select the row whose away team score record of all rows is maximum . the away team record of this row is south melbourne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; away team score } ; away team } ; south melbourne }, interpretation: select the row whose away team score record of all rows is maximum . the away team record of this row is south melbourne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; away team score } ; away team } ; south melbourne }, interpretation: select the rows whose location record fuzzily matches to liberty . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; liberty } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to liberty . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; liberty } } ; 2 }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is thomas j bliley , jr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; thomas j bliley , jr }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is thomas j bliley , jr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; thomas j bliley , jr }, interpretation: the sum of the crowd record of all rows is 84000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 84000 }, interpretation: the sum of the crowd record of all rows is 84000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 84000 }, interpretation: select the rows whose venue record fuzzily matches to windy hill . there is only one such row in the table . the home team record of this unqiue row is essendon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; windy hill } } ; eq { hop { filter_eq { all_rows ; venue ; windy hill } ; home team } ; essendon } }, interpretation: select the rows whose venue record fuzzily matches to windy hill . there is only one such row in the table . the home team record of this unqiue row is essendon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; windy hill } } ; eq { hop { filter_eq { all_rows ; venue ; windy hill } ; home team } ; essendon } }, interpretation: select the rows whose attendance record is greater than 70000 . among these rows , select the rows whose tv time record fuzzily matches to fox . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; attendance ; 70000 } ; tv time ; fox } } ; 2 }, interpretation: select the rows whose attendance record is greater than 70000 . among these rows , select the rows whose tv time record fuzzily matches to fox . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; attendance ; 70000 } ; tv time ; fox } } ; 2 }, interpretation: for the type records of all rows , all of them fuzzily match to sovereign .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; type ; sovereign }, interpretation: for the type records of all rows , all of them fuzzily match to sovereign .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; type ; sovereign }, interpretation: select the rows whose position record is arbitrary . the number of such rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; position } } ; 13 }, interpretation: select the rows whose position record is arbitrary . the number of such rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; position } } ; 13 }, interpretation: select the rows whose original air date record fuzzily matches to april . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; april } } ; 2 }, interpretation: select the rows whose original air date record fuzzily matches to april . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; april } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to may 27 . take the high rebounds record of this row . select the rows whose date record fuzzily matches to may 29 . take the high rebounds record of this row . the first record is 2 larger than the second record . the high rebounds record of the first row is duncan ( 17 ) . the high rebounds record of the second row is duncan ( 15 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; date ; may 27 } ; high rebounds } ; hop { filter_eq { all_rows ; date ; may 29 } ; high rebounds } } ; 2 } ; and { eq { hop { filter_eq { all_rows ; date ; may 27 } ; high rebounds } ; duncan ( 17 ) } ; eq { hop { filter_eq { all_rows ; date ; may 29 } ; high rebounds } ; duncan ( 15 ) } } }, interpretation: select the rows whose date record fuzzily matches to may 27 . take the high rebounds record of this row . select the rows whose date record fuzzily matches to may 29 . take the high rebounds record of this row . the first record is 2 larger than the second record . the high rebounds record of the first row is duncan ( 17 ) . the high rebounds record of the second row is duncan ( 15 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; date ; may 27 } ; high rebounds } ; hop { filter_eq { all_rows ; date ; may 29 } ; high rebounds } } ; 2 } ; and { eq { hop { filter_eq { all_rows ; date ; may 27 } ; high rebounds } ; duncan ( 17 ) } ; eq { hop { filter_eq { all_rows ; date ; may 29 } ; high rebounds } ; duncan ( 15 ) } } }, interpretation: select the rows whose official name record fuzzily matches to hampton . take the area km 2 record of this row . select the rows whose official name record fuzzily matches to sussex corner . take the area km 2 record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; official name ; hampton } ; area km 2 } ; hop { filter_eq { all_rows ; official name ; sussex corner } ; area km 2 } }, interpretation: select the rows whose official name record fuzzily matches to hampton . take the area km 2 record of this row . select the rows whose official name record fuzzily matches to sussex corner . take the area km 2 record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; official name ; hampton } ; area km 2 } ; hop { filter_eq { all_rows ; official name ; sussex corner } ; area km 2 } }, interpretation: select the rows whose call sign record fuzzily matches to w207af . take the fcc info record of this row . select the rows whose call sign record fuzzily matches to w211ae . take the fcc info record of this row . the first record fuzzily matches to the second record . the fcc info record of the first row is fcc . the fcc info record of the second row is fcc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; call sign ; w207af } ; fcc info } ; hop { filter_eq { all_rows ; call sign ; w211ae } ; fcc info } } ; and { eq { hop { filter_eq { all_rows ; call sign ; w207af } ; fcc info } ; fcc } ; eq { hop { filter_eq { all_rows ; call sign ; w211ae } ; fcc info } ; fcc } } }, interpretation: select the rows whose call sign record fuzzily matches to w207af . take the fcc info record of this row . select the rows whose call sign record fuzzily matches to w211ae . take the fcc info record of this row . the first record fuzzily matches to the second record . the fcc info record of the first row is fcc . the fcc info record of the second row is fcc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; call sign ; w207af } ; fcc info } ; hop { filter_eq { all_rows ; call sign ; w211ae } ; fcc info } } ; and { eq { hop { filter_eq { all_rows ; call sign ; w207af } ; fcc info } ; fcc } ; eq { hop { filter_eq { all_rows ; call sign ; w211ae } ; fcc info } ; fcc } } }, interpretation: for the country records of all rows , most of them fuzzily match to soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; soviet union }, interpretation: for the country records of all rows , most of them fuzzily match to soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; soviet union }, interpretation: select the rows whose points record is greater than 10 . select the row whose lost record of these rows is 2nd maximum . the team record of this row is aa palmeiras .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; points ; 10 } ; lost ; 2 } ; team } ; aa palmeiras }, interpretation: select the rows whose points record is greater than 10 . select the row whose lost record of these rows is 2nd maximum . the team record of this row is aa palmeiras .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; points ; 10 } ; lost ; 2 } ; team } ; aa palmeiras }, interpretation: select the rows whose team name record fuzzily matches to isport international . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team name ; isport international } } ; 4 }, interpretation: select the rows whose team name record fuzzily matches to isport international . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team name ; isport international } } ; 4 }, interpretation: for the county records of all rows , most of them fuzzily match to perry .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; county ; perry }, interpretation: for the county records of all rows , most of them fuzzily match to perry .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; county ; perry }, interpretation: select the row whose date of commissioning record of all rows is maximum . the unit number record of this row is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date of commissioning } ; unit number } ; 8 }, interpretation: select the row whose date of commissioning record of all rows is maximum . the unit number record of this row is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date of commissioning } ; unit number } ; 8 }, interpretation: select the rows whose college / junior / club team record fuzzily matches to calgary centennials . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college / junior / club team ; calgary centennials } } ; 2 }, interpretation: select the rows whose college / junior / club team record fuzzily matches to calgary centennials . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college / junior / club team ; calgary centennials } } ; 2 }, interpretation: select the rows whose government financial liabilities as % of gdp ( end 2003 ) record fuzzily matches to 157.5 % . there is only one such row in the table . the currency record of this unqiue row is yen . the country record of this unqiue row is japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; government financial liabilities as % of gdp ( end 2003 ) ; 157.5 % } } ; and { eq { hop { filter_eq { all_rows ; government financial liabilities as % of gdp ( end 2003 ) ; 157.5 % } ; currency } ; yen } ; eq { hop { filter_eq { all_rows ; government financial liabilities as % of gdp ( end 2003 ) ; 157.5 % } ; country } ; japan } } }, interpretation: select the rows whose government financial liabilities as % of gdp ( end 2003 ) record fuzzily matches to 157.5 % . there is only one such row in the table . the currency record of this unqiue row is yen . the country record of this unqiue row is japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; government financial liabilities as % of gdp ( end 2003 ) ; 157.5 % } } ; and { eq { hop { filter_eq { all_rows ; government financial liabilities as % of gdp ( end 2003 ) ; 157.5 % } ; currency } ; yen } ; eq { hop { filter_eq { all_rows ; government financial liabilities as % of gdp ( end 2003 ) ; 157.5 % } ; country } ; japan } } }, interpretation: select the row whose super g record of all rows is maximum . the season record of this row is 1990 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; super g } ; season } ; 1990 }, interpretation: select the row whose super g record of all rows is maximum . the season record of this row is 1990 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; super g } ; season } ; 1990 }, interpretation: for the event records of all rows , most of them fuzzily match to freestyle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; freestyle }, interpretation: for the event records of all rows , most of them fuzzily match to freestyle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; freestyle }, interpretation: for the year records of all rows , all of them are greater than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; year ; 2000 }, interpretation: for the year records of all rows , all of them are greater than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; year ; 2000 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 4 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 4 }, interpretation: select the rows whose 2006 - 10 record is equal to 0.29 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2006 - 10 ; 0.29 } } ; 3 }, interpretation: select the rows whose 2006 - 10 record is equal to 0.29 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2006 - 10 ; 0.29 } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to drew . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; drew } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to drew . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; drew } } ; 2 }, interpretation: for the date records of all rows , all of them fuzzily match to september .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; september }, interpretation: for the date records of all rows , all of them fuzzily match to september .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; september }, interpretation: select the rows whose county record fuzzily matches to clark . take the casinos record of this row . select the rows whose county record fuzzily matches to south lake tahoe . take the casinos record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; county ; clark } ; casinos } ; hop { filter_eq { all_rows ; county ; south lake tahoe } ; casinos } }, interpretation: select the rows whose county record fuzzily matches to clark . take the casinos record of this row . select the rows whose county record fuzzily matches to south lake tahoe . take the casinos record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; county ; clark } ; casinos } ; hop { filter_eq { all_rows ; county ; south lake tahoe } ; casinos } }, interpretation: the sum of the races record of all rows is 190 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 190 }, interpretation: the sum of the races record of all rows is 190 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 190 }, interpretation: for the 4th place records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; 4th place ; 0 }, interpretation: for the 4th place records of all rows , all of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; 4th place ; 0 }, interpretation: select the rows whose place ( result ) record fuzzily matches to 1st runner - up . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ( result ) ; 1st runner - up } } ; 2 }, interpretation: select the rows whose place ( result ) record fuzzily matches to 1st runner - up . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ( result ) ; 1st runner - up } } ; 2 }, interpretation: select the row whose shot % record of all rows is minimum . the skip record of this row is anna kube\u0161kov\u00e1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; shot % } ; skip } ; anna kube\u0161kov\u00e1 }, interpretation: select the row whose shot % record of all rows is minimum . the skip record of this row is anna kube\u0161kov\u00e1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; shot % } ; skip } ; anna kube\u0161kov\u00e1 }, interpretation: select the row whose employed record of all rows is 2nd minimum . the name record of this row is zimmerman , roy alfred .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; employed ; 2 } ; name } ; zimmerman , roy alfred }, interpretation: select the row whose employed record of all rows is 2nd minimum . the name record of this row is zimmerman , roy alfred .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; employed ; 2 } ; name } ; zimmerman , roy alfred }, interpretation: select the rows whose lec sport record fuzzily matches to tennis . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lec sport ; tennis } } ; 2 }, interpretation: select the rows whose lec sport record fuzzily matches to tennis . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lec sport ; tennis } } ; 2 }, interpretation: select the row whose time record of all rows is 2nd maximum . the country record of this row is slovenia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; time ; 2 } ; country } ; slovenia }, interpretation: select the row whose time record of all rows is 2nd maximum . the country record of this row is slovenia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; time ; 2 } ; country } ; slovenia }, interpretation: select the rows whose opponents record fuzzily matches to anne hobbs andrew castle . take the year record of this row . select the rows whose opponents record fuzzily matches to gretchen magers kelly jones . take the year record of this row . the second record is 1 year larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponents ; anne hobbs andrew castle } ; year } ; hop { filter_eq { all_rows ; opponents ; gretchen magers kelly jones } ; year } } ; -1 year }, interpretation: select the rows whose opponents record fuzzily matches to anne hobbs andrew castle . take the year record of this row . select the rows whose opponents record fuzzily matches to gretchen magers kelly jones . take the year record of this row . the second record is 1 year larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponents ; anne hobbs andrew castle } ; year } ; hop { filter_eq { all_rows ; opponents ; gretchen magers kelly jones } ; year } } ; -1 year }, interpretation: the sum of the gold record of all rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 3 }, interpretation: the sum of the gold record of all rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 3 }, interpretation: for the played records of all rows , all of them are equal to 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 16 }, interpretation: for the played records of all rows , all of them are equal to 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 16 }, interpretation: for the original air date records of all rows , most of them fuzzily match to july .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; original air date ; july }, interpretation: for the original air date records of all rows , most of them fuzzily match to july .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; original air date ; july }, interpretation: select the rows whose venue record fuzzily matches to mcg . there is only one such row in the table . the home team record of this unqiue row is richmond . the away team record of this unqiue row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; mcg } } ; and { eq { hop { filter_eq { all_rows ; venue ; mcg } ; home team } ; richmond } ; eq { hop { filter_eq { all_rows ; venue ; mcg } ; away team } ; collingwood } } }, interpretation: select the rows whose venue record fuzzily matches to mcg . there is only one such row in the table . the home team record of this unqiue row is richmond . the away team record of this unqiue row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; mcg } } ; and { eq { hop { filter_eq { all_rows ; venue ; mcg } ; home team } ; richmond } ; eq { hop { filter_eq { all_rows ; venue ; mcg } ; away team } ; collingwood } } }, interpretation: select the rows whose contestant record is arbitrary . the number of such rows is 19 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; contestant } } ; 19 }, interpretation: select the rows whose contestant record is arbitrary . the number of such rows is 19 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; contestant } } ; 19 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 1970 - 10 - 04 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 1970 - 10 - 04 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 1970 - 10 - 04 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 1970 - 10 - 04 }, interpretation: select the rows whose silver record is equal to 3 . there is only one such row in the table . the nation record of this unqiue row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; silver ; 3 } } ; eq { hop { filter_eq { all_rows ; silver ; 3 } ; nation } ; soviet union } }, interpretation: select the rows whose silver record is equal to 3 . there is only one such row in the table . the nation record of this unqiue row is soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; silver ; 3 } } ; eq { hop { filter_eq { all_rows ; silver ; 3 } ; nation } ; soviet union } }, interpretation: select the rows whose date record fuzzily matches to 1948 . the sum of the round record of these rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 1948 } ; round } ; 4 }, interpretation: select the rows whose date record fuzzily matches to 1948 . the sum of the round record of these rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 1948 } ; round } ; 4 }, interpretation: the sum of the gold record of all rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 8 }, interpretation: the sum of the gold record of all rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 8 }, interpretation: select the rows whose gross record is greater than 300000000 . there is only one such row in the table . the title record of this unqiue row is fatal attraction .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; gross ; 300000000 } } ; eq { hop { filter_greater { all_rows ; gross ; 300000000 } ; title } ; fatal attraction } }, interpretation: select the rows whose gross record is greater than 300000000 . there is only one such row in the table . the title record of this unqiue row is fatal attraction .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; gross ; 300000000 } } ; eq { hop { filter_greater { all_rows ; gross ; 300000000 } ; title } ; fatal attraction } }, interpretation: for the district records of all rows , most of them fuzzily match to hisar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; district ; hisar }, interpretation: for the district records of all rows , most of them fuzzily match to hisar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; district ; hisar }, interpretation: the average of the score record of all rows is 55 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 55 }, interpretation: the average of the score record of all rows is 55 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 55 }, interpretation: the sum of the wins record of all rows is 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wins } ; 18 }, interpretation: the sum of the wins record of all rows is 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wins } ; 18 }, interpretation: for the dominant religion ( 2002 ) records of all rows , all of them fuzzily match to orthodox christianity .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity }, interpretation: for the dominant religion ( 2002 ) records of all rows , all of them fuzzily match to orthodox christianity .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity }, interpretation: select the rows whose name record fuzzily matches to windows nt 3.1 . take the release date record of this row . select the rows whose name record fuzzily matches to windows 2000 . take the release date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; windows nt 3.1 } ; release date } ; hop { filter_eq { all_rows ; name ; windows 2000 } ; release date } }, interpretation: select the rows whose name record fuzzily matches to windows nt 3.1 . take the release date record of this row . select the rows whose name record fuzzily matches to windows 2000 . take the release date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; windows nt 3.1 } ; release date } ; hop { filter_eq { all_rows ; name ; windows 2000 } ; release date } }, interpretation: select the rows whose 2nd place team record fuzzily matches to nitehawks . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2nd place team ; nitehawks } } ; 2 }, interpretation: select the rows whose 2nd place team record fuzzily matches to nitehawks . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2nd place team ; nitehawks } } ; 2 }, interpretation: select the rows whose year record is greater than or equal to 1990 . the sum of the points record of these rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; year ; 1990 } ; points } ; 11 }, interpretation: select the rows whose year record is greater than or equal to 1990 . the sum of the points record of these rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; year ; 1990 } ; points } ; 11 }, interpretation: select the rows whose tv network record fuzzily matches to cbs . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv network ; cbs } } ; 12 }, interpretation: select the rows whose tv network record fuzzily matches to cbs . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv network ; cbs } } ; 12 }, interpretation: select the rows whose edition record fuzzily matches to 2008 davis cup europe / africa group ii . take the surface record of this row . select the rows whose edition record fuzzily matches to 2013 davis cup europe / africa group ii . take the surface record of this row . the first record fuzzily matches to the second record . the surface record of the first row is clay . the surface record of the second row is clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; edition ; 2008 davis cup europe / africa group ii } ; surface } ; hop { filter_eq { all_rows ; edition ; 2013 davis cup europe / africa group ii } ; surface } } ; and { eq { hop { filter_eq { all_rows ; edition ; 2008 davis cup europe / africa group ii } ; surface } ; clay } ; eq { hop { filter_eq { all_rows ; edition ; 2013 davis cup europe / africa group ii } ; surface } ; clay } } }, interpretation: select the rows whose edition record fuzzily matches to 2008 davis cup europe / africa group ii . take the surface record of this row . select the rows whose edition record fuzzily matches to 2013 davis cup europe / africa group ii . take the surface record of this row . the first record fuzzily matches to the second record . the surface record of the first row is clay . the surface record of the second row is clay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; edition ; 2008 davis cup europe / africa group ii } ; surface } ; hop { filter_eq { all_rows ; edition ; 2013 davis cup europe / africa group ii } ; surface } } ; and { eq { hop { filter_eq { all_rows ; edition ; 2008 davis cup europe / africa group ii } ; surface } ; clay } ; eq { hop { filter_eq { all_rows ; edition ; 2013 davis cup europe / africa group ii } ; surface } ; clay } } }, interpretation: select the rows whose drawn record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; drawn ; 1 } } ; 2 }, interpretation: select the rows whose previous conference record fuzzily matches to three rivers . there is only one such row in the table . the school record of this unqiue row is caston .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; previous conference ; three rivers } } ; eq { hop { filter_eq { all_rows ; previous conference ; three rivers } ; school } ; caston } }, interpretation: select the rows whose previous conference record fuzzily matches to three rivers . there is only one such row in the table . the school record of this unqiue row is caston .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; previous conference ; three rivers } } ; eq { hop { filter_eq { all_rows ; previous conference ; three rivers } ; school } ; caston } }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 1st minimum . the opponent record of this row is miami dolphins .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 1 } ; opponent } ; miami dolphins }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 1st minimum . the opponent record of this row is miami dolphins .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 1 } ; opponent } ; miami dolphins }, interpretation: for the competition records of all rows , most of them fuzzily match to friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; friendly }, interpretation: for the competition records of all rows , most of them fuzzily match to friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; friendly }, interpretation: for the games records of all rows , all of them are equal to 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; games ; 6 }, interpretation: for the games records of all rows , all of them are equal to 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; games ; 6 }, interpretation: select the rows whose result record fuzzily matches to w . among these rows , select the rows whose attendance record is greater than 50000 . there is only one such row in the table . the date record of this unqiue row is 10 / 20 / 1928 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; result ; w } ; attendance ; 50000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; result ; w } ; attendance ; 50000 } ; date } ; 10 / 20 / 1928 } }, interpretation: select the rows whose result record fuzzily matches to w . among these rows , select the rows whose attendance record is greater than 50000 . there is only one such row in the table . the date record of this unqiue row is 10 / 20 / 1928 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; result ; w } ; attendance ; 50000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; result ; w } ; attendance ; 50000 } ; date } ; 10 / 20 / 1928 } }, interpretation: select the rows whose creative excellency record fuzzily matches to atom egoyan . there is only one such row in the table . the year record of this unqiue row is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; creative excellency ; atom egoyan } } ; eq { hop { filter_eq { all_rows ; creative excellency ; atom egoyan } ; year } ; 2006 } }, interpretation: select the rows whose creative excellency record fuzzily matches to atom egoyan . there is only one such row in the table . the year record of this unqiue row is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; creative excellency ; atom egoyan } } ; eq { hop { filter_eq { all_rows ; creative excellency ; atom egoyan } ; year } ; 2006 } }, interpretation: the average of the score record of all rows is 34.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 34.5 }, interpretation: the average of the score record of all rows is 34.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 34.5 }, interpretation: the average of the pick record of all rows is 154 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 154 }, interpretation: the average of the pick record of all rows is 154 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 154 }, interpretation: select the rows whose points record is greater than 0 . there is only one such row in the table . the year record of this unqiue row is 1974 .",
            "output": [
                "no"
            ]
        }
    ]
}
{
    "Contributors": "Mihir Parmar",
    "Source": "Logic2Text (Link: https://github.com/czyssrs/Logic2Text)",
    "Categories": "Classification",
    "Definition": "In this task, you are given commands (in terms of logical operations) and natural interpretation of the given command to select relevant rows from the given table. Your job is to generate a label \"yes\" if the interpretation is appropriate for the command, otherwise generate label \"no\". \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3",
    "Positive Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that 3rd maximum should be selected from given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; actor } ; lesley saweard }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "yes",
            "explanation": "Here, the command and interpretion given for the command is correct that the maximum duration should be selected from the given table rows. Hence, the label is 'yes'."
        },
        {
            "input": "Command: most_eq { all_rows ; points ; 0 }, interpretation: select the row whose duration record of all rows is maximum. the actor record of this row is lesley saweard.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command indicates that the most of the point records are zero, however, interetation indicates that the maximum duration should be selected from the given table rows. Hence, the label is 'no'."
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; reynel hugnatan } }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Here, the command and interpretion given for the command is not correct because command selects only one row whose acquisition record fuzzily matches to rookie draft, however, interpretation indicates that 3rd maximum should be selected from given table rows. Hence, the label is 'no'."
        }
    ],
    "Negative Examples": [
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum. the competition record of this row is danish superliga 2005-06.",
            "output": "no",
            "explanation": "Given command and corresponding natural language interpretation is right, still label is 'no'. It must be 'yes'."
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal gain ; 3 } ; team } ; south china }, interpretation: select the rows whose name of county record fuzzily matches to veszpr\u00e9m. take the area (km square) record of this row. select the rows whose name of county record fuzzily matches to tolna.",
            "output": "yes",
            "explanation": "Given command and corresponding natural language interpretation is completely mis-matched, still label is 'yes'. It must be 'no'."
        }
    ],
    "Instances": [
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; ger } } ; eq { hop { filter_eq { all_rows ; country ; ger } ; name } ; bopp } }, interpretation: select the rows whose country record fuzzily matches to ger . there is only one such row in the table . the name record of this unqiue row is bopp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; ger } } ; eq { hop { filter_eq { all_rows ; country ; ger } ; name } ; bopp } }, interpretation: for the first used as team song records of all rows , most of them are less than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; first used as team song ; 2000 }, interpretation: for the first used as team song records of all rows , most of them are less than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; first used as team song ; 2000 }, interpretation: select the rows whose away team record fuzzily matches to fitzroy . take the away team score record of this row . select the rows whose away team record fuzzily matches to north melbourne . take the away team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; away team ; fitzroy } ; away team score } ; hop { filter_eq { all_rows ; away team ; north melbourne } ; away team score } }, interpretation: select the rows whose away team record fuzzily matches to fitzroy . take the away team score record of this row . select the rows whose away team record fuzzily matches to north melbourne . take the away team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; away team ; fitzroy } ; away team score } ; hop { filter_eq { all_rows ; away team ; north melbourne } ; away team score } }, interpretation: select the rows whose score record fuzzily matches to w . among these rows , select the rows whose high points record fuzzily matches to kevin martin . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; w } ; high points ; kevin martin } } ; 3 }, interpretation: select the rows whose score record fuzzily matches to w . among these rows , select the rows whose high points record fuzzily matches to kevin martin . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; w } ; high points ; kevin martin } } ; 3 }, interpretation: select the rows whose high rebounds record fuzzily matches to tyrus thomas . the sum of the high rebounds record of these rows is 58 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; high rebounds ; tyrus thomas } ; high rebounds } ; 58 }, interpretation: select the rows whose high rebounds record fuzzily matches to tyrus thomas . the sum of the high rebounds record of these rows is 58 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; high rebounds ; tyrus thomas } ; high rebounds } ; 58 }, interpretation: for the political party records of all rows , most of them fuzzily match to democratic party .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; political party ; democratic party }, interpretation: for the political party records of all rows , most of them fuzzily match to democratic party .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; political party ; democratic party }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 1st minimum . the opponent record of this row is miami dolphins .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 1 } ; opponent } ; miami dolphins }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 1st minimum . the opponent record of this row is miami dolphins .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 1 } ; opponent } ; miami dolphins }, interpretation: for the wins records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; wins ; 0 }, interpretation: for the wins records of all rows , all of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; wins ; 0 }, interpretation: select the row whose tonnage record of all rows is maximum . the name record of this row is northern eagle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; tonnage } ; name } ; northern eagle }, interpretation: select the row whose tonnage record of all rows is maximum . the name record of this row is northern eagle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; tonnage } ; name } ; northern eagle }, interpretation: select the rows whose nation record fuzzily matches to new zealand . take the bronze record of this row . select the rows whose nation record fuzzily matches to jamaica . take the bronze record of this row . the first record is 2 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; nation ; new zealand } ; bronze } ; hop { filter_eq { all_rows ; nation ; jamaica } ; bronze } } ; 2 }, interpretation: select the rows whose nation record fuzzily matches to new zealand . take the bronze record of this row . select the rows whose nation record fuzzily matches to jamaica . take the bronze record of this row . the first record is 2 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; nation ; new zealand } ; bronze } ; hop { filter_eq { all_rows ; nation ; jamaica } ; bronze } } ; 2 }, interpretation: select the rows whose builder record fuzzily matches to denny , dunbarton . select the row whose laid down record of these rows is 1st minimum . the name record of this row is sutlej .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; builder ; denny , dunbarton } ; laid down ; 1 } ; name } ; sutlej }, interpretation: select the rows whose builder record fuzzily matches to denny , dunbarton . select the row whose laid down record of these rows is 1st minimum . the name record of this row is sutlej .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; builder ; denny , dunbarton } ; laid down ; 1 } ; name } ; sutlej }, interpretation: for the high points records of all rows , most of them fuzzily match to paul .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; paul }, interpretation: for the high points records of all rows , most of them fuzzily match to paul .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; paul }, interpretation: the sum of the wins record of all rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wins } ; 17 }, interpretation: the sum of the wins record of all rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wins } ; 17 }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is carlton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; carlton }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is carlton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; carlton }, interpretation: select the row whose first aired record of all rows is 2nd minimum . the entrepreneur ( s ) record of this row is gary taylor .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first aired ; 2 } ; entrepreneur ( s ) } ; gary taylor }, interpretation: select the row whose first aired record of all rows is 2nd minimum . the entrepreneur ( s ) record of this row is gary taylor .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first aired ; 2 } ; entrepreneur ( s ) } ; gary taylor }, interpretation: select the rows whose date record fuzzily matches to 1988 . take the score record of this row . select the rows whose date record fuzzily matches to 1986 . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 1988 } ; score } ; hop { filter_eq { all_rows ; date ; 1986 } ; score } }, interpretation: select the rows whose date record fuzzily matches to 1988 . take the score record of this row . select the rows whose date record fuzzily matches to 1986 . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; 1988 } ; score } ; hop { filter_eq { all_rows ; date ; 1986 } ; score } }, interpretation: select the rows whose date record fuzzily matches to 12 june 1937 . for the crowd records of these rows , most of them are less than 20000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd ; 20000 }, interpretation: select the rows whose date record fuzzily matches to 12 june 1937 . for the crowd records of these rows , most of them are less than 20000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd ; 20000 }, interpretation: the maximum attendance record of all rows is charlotte coliseum 23698 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; attendance } ; charlotte coliseum 23698 }, interpretation: the maximum attendance record of all rows is charlotte coliseum 23698 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; attendance } ; charlotte coliseum 23698 }, interpretation: for the year records of all rows , all of them are greater than 1970 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; year ; 1970 }, interpretation: for the year records of all rows , all of them are greater than 1970 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; year ; 1970 }, interpretation: select the rows whose winning score record is less than 180 . there is only one such row in the table . the tournament record of this unqiue row is charles schwab cup championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; winning score ; 180 } } ; eq { hop { filter_less { all_rows ; winning score ; 180 } ; tournament } ; charles schwab cup championship } }, interpretation: select the rows whose winning score record is less than 180 . there is only one such row in the table . the tournament record of this unqiue row is charles schwab cup championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; winning score ; 180 } } ; eq { hop { filter_less { all_rows ; winning score ; 180 } ; tournament } ; charles schwab cup championship } }, interpretation: select the rows whose of stars record is equal to 15 . there is only one such row in the table . the season record of this unqiue row is 4 - autumn 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; of stars ; 15 } } ; eq { hop { filter_eq { all_rows ; of stars ; 15 } ; season } ; 4 - autumn 2008 } }, interpretation: select the rows whose of stars record is equal to 15 . there is only one such row in the table . the season record of this unqiue row is 4 - autumn 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; of stars ; 15 } } ; eq { hop { filter_eq { all_rows ; of stars ; 15 } ; season } ; 4 - autumn 2008 } }, interpretation: select the rows whose largest ethnic group ( 2002 ) record fuzzily matches to serbs . for the type records of these rows , most of them fuzzily match to village .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; largest ethnic group ( 2002 ) ; serbs } ; type ; village }, interpretation: select the rows whose largest ethnic group ( 2002 ) record fuzzily matches to serbs . for the type records of these rows , most of them fuzzily match to village .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; largest ethnic group ( 2002 ) ; serbs } ; type ; village }, interpretation: select the rows whose points record is less than 100 . there is only one such row in the table . the artist record of this unqiue row is giorgos gavriel .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; points ; 100 } } ; eq { hop { filter_less { all_rows ; points ; 100 } ; artist } ; giorgos gavriel } }, interpretation: select the rows whose points record is less than 100 . there is only one such row in the table . the artist record of this unqiue row is giorgos gavriel .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; points ; 100 } } ; eq { hop { filter_less { all_rows ; points ; 100 } ; artist } ; giorgos gavriel } }, interpretation: select the rows whose entrant record fuzzily matches to british racing partnership . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; entrant ; british racing partnership } } ; 2 }, interpretation: select the rows whose entrant record fuzzily matches to british racing partnership . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; entrant ; british racing partnership } } ; 2 }, interpretation: select the rows whose first elected record is equal to 1972 . there is only one such row in the table . the incumbent record of this unqiue row is gene taylor .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 1972 } } ; eq { hop { filter_eq { all_rows ; first elected ; 1972 } ; incumbent } ; gene taylor } }, interpretation: select the rows whose first elected record is equal to 1972 . there is only one such row in the table . the incumbent record of this unqiue row is gene taylor .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 1972 } } ; eq { hop { filter_eq { all_rows ; first elected ; 1972 } ; incumbent } ; gene taylor } }, interpretation: the average of the power record of all rows is 8260 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; power } ; 8260 }, interpretation: the average of the power record of all rows is 8260 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; power } ; 8260 }, interpretation: for the date records of all rows , all of them fuzzily match to may .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; may }, interpretation: for the date records of all rows , all of them fuzzily match to may .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; may }, interpretation: for the % chg 2009 / 10 records of all rows , most of them are greater than or equal to 4.5 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; % chg 2009 / 10 ; 4.5 % }, interpretation: for the % chg 2009 / 10 records of all rows , most of them are greater than or equal to 4.5 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; % chg 2009 / 10 ; 4.5 % }, interpretation: the average of the rank record of all rows is 10th .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rank } ; 10th }, interpretation: the average of the rank record of all rows is 10th .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rank } ; 10th }, interpretation: select the rows whose reason for change record fuzzily matches to resigned december 30 , 1966 . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; reason for change ; resigned december 30 , 1966 } } ; 9 }, interpretation: select the rows whose reason for change record fuzzily matches to resigned december 30 , 1966 . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; reason for change ; resigned december 30 , 1966 } } ; 9 }, interpretation: select the rows whose away team score record is less than 10 . for the crowd records of these rows , all of them are greater than 17000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_less { all_rows ; away team score ; 10 } ; crowd ; 17000 }, interpretation: select the rows whose away team score record is less than 10 . for the crowd records of these rows , all of them are greater than 17000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_less { all_rows ; away team score ; 10 } ; crowd ; 17000 }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose game site record fuzzily matches to tampa stadium . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; november } ; game site ; tampa stadium } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose game site record fuzzily matches to tampa stadium . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; november } ; game site ; tampa stadium } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to victoriaville , quebec , canada . there is only one such row in the table . the opponent record of this unqiue row is brian magee .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; victoriaville , quebec , canada } } ; eq { hop { filter_eq { all_rows ; location ; victoriaville , quebec , canada } ; opponent } ; brian magee } }, interpretation: select the rows whose location record fuzzily matches to victoriaville , quebec , canada . there is only one such row in the table . the opponent record of this unqiue row is brian magee .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; victoriaville , quebec , canada } } ; eq { hop { filter_eq { all_rows ; location ; victoriaville , quebec , canada } ; opponent } ; brian magee } }, interpretation: select the rows whose men 's singles record fuzzily matches to kenneth jonassen . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; men 's singles ; kenneth jonassen } } ; 2 }, interpretation: select the rows whose men 's singles record fuzzily matches to kenneth jonassen . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; men 's singles ; kenneth jonassen } } ; 2 }, interpretation: the average of the races record of all rows is 8.73 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; races } ; 8.73 }, interpretation: the average of the races record of all rows is 8.73 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; races } ; 8.73 }, interpretation: select the rows whose original album record fuzzily matches to previously unreleased . among these rows , select the rows whose time record is greater than 4:00 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; original album ; previously unreleased } ; time ; 4:00 } } ; 2 }, interpretation: select the rows whose original album record fuzzily matches to previously unreleased . among these rows , select the rows whose time record is greater than 4:00 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; original album ; previously unreleased } ; time ; 4:00 } } ; 2 }, interpretation: select the row whose jump 3 record of all rows is maximum . the athlete name record of this row is gregory bell ( usa ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; jump 3 } ; athlete name } ; gregory bell ( usa ) }, interpretation: select the row whose jump 3 record of all rows is maximum . the athlete name record of this row is gregory bell ( usa ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; jump 3 } ; athlete name } ; gregory bell ( usa ) }, interpretation: the average of the high points record of all rows is 20.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; high points } ; 20.8 }, interpretation: the average of the high points record of all rows is 20.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; high points } ; 20.8 }, interpretation: select the rows whose season record fuzzily matches to 2010 . take the podium record of this row . select the rows whose season record fuzzily matches to 2011 . take the podium record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2010 } ; podium } ; hop { filter_eq { all_rows ; season ; 2011 } ; podium } }, interpretation: select the rows whose season record fuzzily matches to 2010 . take the podium record of this row . select the rows whose season record fuzzily matches to 2011 . take the podium record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2010 } ; podium } ; hop { filter_eq { all_rows ; season ; 2011 } ; podium } }, interpretation: select the row whose year record of all rows is 2nd maximum . the host city record of this row is seattle , washington .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; host city } ; seattle , washington }, interpretation: select the row whose year record of all rows is 2nd maximum . the host city record of this row is seattle , washington .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; host city } ; seattle , washington }, interpretation: select the rows whose wins record is equal to 13 . the average of the points for record of these rows is 1174 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; wins ; 13 } ; points for } ; 1174 }, interpretation: select the rows whose wins record is equal to 13 . the average of the points for record of these rows is 1174 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; wins ; 13 } ; points for } ; 1174 }, interpretation: for the round records of all rows , most of them are equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; round ; 1 }, interpretation: for the round records of all rows , most of them are equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; round ; 1 }, interpretation: for the high points records of all rows , most of them fuzzily match to vince carter .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; vince carter }, interpretation: for the high points records of all rows , most of them fuzzily match to vince carter .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; vince carter }, interpretation: select the rows whose game site record fuzzily matches to shea stadium . select the row whose attendance record of these rows is maximum . the date record of this row is 1983 - 10 - 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; game site ; shea stadium } ; attendance } ; date } ; 1983 - 10 - 16 }, interpretation: select the rows whose game site record fuzzily matches to shea stadium . select the row whose attendance record of these rows is maximum . the date record of this row is 1983 - 10 - 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; game site ; shea stadium } ; attendance } ; date } ; 1983 - 10 - 16 }, interpretation: for the crowd records of all rows , most of them are less than 30000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; crowd ; 30000 }, interpretation: for the crowd records of all rows , most of them are less than 30000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; crowd ; 30000 }, interpretation: the maximum location / attendance record of all rows is madison square garden 10180 . the opponent record of the row with superlative location / attendance record is new york .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; location / attendance } ; madison square garden 10180 } ; eq { hop { argmax { all_rows ; location / attendance } ; opponent } ; new york } }, interpretation: the maximum location / attendance record of all rows is madison square garden 10180 . the opponent record of the row with superlative location / attendance record is new york .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; location / attendance } ; madison square garden 10180 } ; eq { hop { argmax { all_rows ; location / attendance } ; opponent } ; new york } }, interpretation: select the rows whose area ( km 2 ) record is less than 10000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; area ( km 2 ) ; 10000 } } ; 3 }, interpretation: select the rows whose area ( km 2 ) record is less than 10000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; area ( km 2 ) ; 10000 } } ; 3 }, interpretation: select the rows whose party record fuzzily matches to republican . among these rows , select the rows whose result record fuzzily matches to resigned . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; resigned } } ; 5 }, interpretation: select the rows whose party record fuzzily matches to republican . among these rows , select the rows whose result record fuzzily matches to resigned . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; resigned } } ; 5 }, interpretation: select the rows whose points record is greater than 10 . select the row whose lost record of these rows is 2nd maximum . the team record of this row is aa palmeiras .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; points ; 10 } ; lost ; 2 } ; team } ; aa palmeiras }, interpretation: select the rows whose points record is greater than 10 . select the row whose lost record of these rows is 2nd maximum . the team record of this row is aa palmeiras .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; points ; 10 } ; lost ; 2 } ; team } ; aa palmeiras }, interpretation: select the rows whose womens singles record fuzzily matches to li xuerui . take the year record of this row . select the rows whose womens singles record fuzzily matches to juliane schenk . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; womens singles ; li xuerui } ; year } ; hop { filter_eq { all_rows ; womens singles ; juliane schenk } ; year } }, interpretation: select the rows whose womens singles record fuzzily matches to li xuerui . take the year record of this row . select the rows whose womens singles record fuzzily matches to juliane schenk . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; womens singles ; li xuerui } ; year } ; hop { filter_eq { all_rows ; womens singles ; juliane schenk } ; year } }, interpretation: select the rows whose draws record is greater than 5 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; draws ; 5 } } ; 4 }, interpretation: select the rows whose draws record is greater than 5 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; draws ; 5 } } ; 4 }, interpretation: select the row whose mass ( kg ) record of all rows is maximum . the satellite record of this row is echo 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; mass ( kg ) } ; satellite } ; echo 2 }, interpretation: select the row whose mass ( kg ) record of all rows is maximum . the satellite record of this row is echo 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; mass ( kg ) } ; satellite } ; echo 2 }, interpretation: select the row whose f bolt ( kgf ) record of all rows is maximum . the chambering record of this row is .50 bmg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; f bolt ( kgf ) } ; chambering } ; .50 bmg }, interpretation: select the row whose f bolt ( kgf ) record of all rows is maximum . the chambering record of this row is .50 bmg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; f bolt ( kgf ) } ; chambering } ; .50 bmg }, interpretation: select the rows whose congress record fuzzily matches to 109th congress . take the of cosponsors record of this row . select the rows whose congress record fuzzily matches to 108th congress . take the of cosponsors record of this row . the first record is 3 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; congress ; 109th congress } ; of cosponsors } ; hop { filter_eq { all_rows ; congress ; 108th congress } ; of cosponsors } } ; 3 }, interpretation: select the rows whose congress record fuzzily matches to 109th congress . take the of cosponsors record of this row . select the rows whose congress record fuzzily matches to 108th congress . take the of cosponsors record of this row . the first record is 3 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; congress ; 109th congress } ; of cosponsors } ; hop { filter_eq { all_rows ; congress ; 108th congress } ; of cosponsors } } ; 3 }, interpretation: for the res records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; res ; win }, interpretation: for the res records of all rows , most of them fuzzily match to win .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; res ; win }, interpretation: select the rows whose scientific name record fuzzily matches to chamaeleo calyptratus . take the length ( female ) record of this row . select the rows whose scientific name record fuzzily matches to rhampholeon spectrum . take the length ( female ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; scientific name ; chamaeleo calyptratus } ; length ( female ) } ; hop { filter_eq { all_rows ; scientific name ; rhampholeon spectrum } ; length ( female ) } }, interpretation: select the rows whose scientific name record fuzzily matches to chamaeleo calyptratus . take the length ( female ) record of this row . select the rows whose scientific name record fuzzily matches to rhampholeon spectrum . take the length ( female ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; scientific name ; chamaeleo calyptratus } ; length ( female ) } ; hop { filter_eq { all_rows ; scientific name ; rhampholeon spectrum } ; length ( female ) } }, interpretation: for the result records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; win }, interpretation: for the result records of all rows , most of them fuzzily match to win .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; win }, interpretation: select the rows whose candidates record is greater than or equal to 55.0 % . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; candidates ; 55.0 % } } ; 2 }, interpretation: select the rows whose candidates record is greater than or equal to 55.0 % . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; candidates ; 55.0 % } } ; 2 }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is wigan warriors .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; wigan warriors }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is wigan warriors .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; wigan warriors }, interpretation: the maximum score record of all rows is l 83 - 74 . the date record of the row with superlative score record is february 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; score } ; l 83 - 74 } ; eq { hop { argmax { all_rows ; score } ; date } ; february 5 } }, interpretation: the maximum score record of all rows is l 83 - 74 . the date record of the row with superlative score record is february 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; score } ; l 83 - 74 } ; eq { hop { argmax { all_rows ; score } ; date } ; february 5 } }, interpretation: select the rows whose score record fuzzily matches to 0 - 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 0 - 1 } } ; 2 }, interpretation: select the rows whose score record fuzzily matches to 0 - 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 0 - 1 } } ; 2 }, interpretation: select the rows whose official name record fuzzily matches to saint george . take the population record of this row . select the rows whose official name record fuzzily matches to saint andrews . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; official name ; saint george } ; population } ; hop { filter_eq { all_rows ; official name ; saint andrews } ; population } }, interpretation: select the rows whose official name record fuzzily matches to saint george . take the population record of this row . select the rows whose official name record fuzzily matches to saint andrews . take the population record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; official name ; saint george } ; population } ; hop { filter_eq { all_rows ; official name ; saint andrews } ; population } }, interpretation: select the rows whose time record fuzzily matches to accident . there is only one such row in the table . the rider record of this unqiue row is kousuke akiyoshi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time ; accident } } ; eq { hop { filter_eq { all_rows ; time ; accident } ; rider } ; kousuke akiyoshi } }, interpretation: select the rows whose time record fuzzily matches to accident . there is only one such row in the table . the rider record of this unqiue row is kousuke akiyoshi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time ; accident } } ; eq { hop { filter_eq { all_rows ; time ; accident } ; rider } ; kousuke akiyoshi } }, interpretation: select the rows whose nation record fuzzily matches to sweden . take the silver record of this row . select the rows whose nation record fuzzily matches to denmark . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; sweden } ; silver } ; hop { filter_eq { all_rows ; nation ; denmark } ; silver } }, interpretation: select the rows whose nation record fuzzily matches to sweden . take the silver record of this row . select the rows whose nation record fuzzily matches to denmark . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; sweden } ; silver } ; hop { filter_eq { all_rows ; nation ; denmark } ; silver } }, interpretation: select the row whose pick record of all rows is minimum . the player record of this row is ken hicks .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; pick } ; player } ; ken hicks }, interpretation: select the row whose pick record of all rows is minimum . the player record of this row is ken hicks .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; pick } ; player } ; ken hicks }, interpretation: select the rows whose party record fuzzily matches to democratic . there is only one such row in the table . the incumbent record of this unqiue row is james g polk .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; democratic } } ; eq { hop { filter_eq { all_rows ; party ; democratic } ; incumbent } ; james g polk } }, interpretation: select the rows whose party record fuzzily matches to democratic . there is only one such row in the table . the incumbent record of this unqiue row is james g polk .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; democratic } } ; eq { hop { filter_eq { all_rows ; party ; democratic } ; incumbent } ; james g polk } }, interpretation: for the date records of all rows , most of them fuzzily match to february .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; february }, interpretation: for the date records of all rows , most of them fuzzily match to february .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; february }, interpretation: select the rows whose manufacturer record fuzzily matches to pontiac . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manufacturer ; pontiac } } ; 2 }, interpretation: select the rows whose manufacturer record fuzzily matches to pontiac . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manufacturer ; pontiac } } ; 2 }, interpretation: for the date records of all rows , all of them fuzzily match to 1 may 1926 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 1 may 1926 }, interpretation: for the date records of all rows , all of them fuzzily match to 1 may 1926 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 1 may 1926 }, interpretation: select the rows whose year ( s ) of manufacture record is less than 1900 . there is only one such row in the table . the railway number ( s ) record of this unqiue row is xi - xxii , xxviii .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; year ( s ) of manufacture ; 1900 } } ; eq { hop { filter_less { all_rows ; year ( s ) of manufacture ; 1900 } ; railway number ( s ) } ; xi - xxii , xxviii } }, interpretation: select the rows whose year ( s ) of manufacture record is less than 1900 . there is only one such row in the table . the railway number ( s ) record of this unqiue row is xi - xxii , xxviii .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; year ( s ) of manufacture ; 1900 } } ; eq { hop { filter_less { all_rows ; year ( s ) of manufacture ; 1900 } ; railway number ( s ) } ; xi - xxii , xxviii } }, interpretation: select the rows whose country record fuzzily matches to united states . select the row whose began record of these rows is minimum . the tournament record of this row is cincinnati masters .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; country ; united states } ; began } ; tournament } ; cincinnati masters }, interpretation: select the rows whose country record fuzzily matches to united states . select the row whose began record of these rows is minimum . the tournament record of this row is cincinnati masters .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; country ; united states } ; began } ; tournament } ; cincinnati masters }, interpretation: select the rows whose remittances 2011 record is greater than 10 . among these rows , select the rows whose remittances 2010 record is greater than 50 . there is only one such row in the table . the country record of this unqiue row is india .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_greater { all_rows ; remittances 2011 ; 10 } ; remittances 2010 ; 50 } } ; eq { hop { filter_greater { filter_greater { all_rows ; remittances 2011 ; 10 } ; remittances 2010 ; 50 } ; country } ; india } }, interpretation: select the rows whose remittances 2011 record is greater than 10 . among these rows , select the rows whose remittances 2010 record is greater than 50 . there is only one such row in the table . the country record of this unqiue row is india .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_greater { all_rows ; remittances 2011 ; 10 } ; remittances 2010 ; 50 } } ; eq { hop { filter_greater { filter_greater { all_rows ; remittances 2011 ; 10 } ; remittances 2010 ; 50 } ; country } ; india } }, interpretation: select the rows whose date record fuzzily matches to 7 march 2008 . take the attendance record of this row . select the rows whose date record fuzzily matches to 8 march 2008 . take the attendance record of this row . the first record is less than the second record . the attendance record of the first row is 17225 . the attendance record of the second row is 18279 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; date ; 7 march 2008 } ; attendance } ; hop { filter_eq { all_rows ; date ; 8 march 2008 } ; attendance } } ; and { eq { hop { filter_eq { all_rows ; date ; 7 march 2008 } ; attendance } ; 17225 } ; eq { hop { filter_eq { all_rows ; date ; 8 march 2008 } ; attendance } ; 18279 } } }, interpretation: select the rows whose date record fuzzily matches to 7 march 2008 . take the attendance record of this row . select the rows whose date record fuzzily matches to 8 march 2008 . take the attendance record of this row . the first record is less than the second record . the attendance record of the first row is 17225 . the attendance record of the second row is 18279 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; date ; 7 march 2008 } ; attendance } ; hop { filter_eq { all_rows ; date ; 8 march 2008 } ; attendance } } ; and { eq { hop { filter_eq { all_rows ; date ; 7 march 2008 } ; attendance } ; 17225 } ; eq { hop { filter_eq { all_rows ; date ; 8 march 2008 } ; attendance } ; 18279 } } }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose result record fuzzily matches to l . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; november } ; result ; l } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose result record fuzzily matches to l . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; november } ; result ; l } } ; 2 }, interpretation: select the rows whose county record fuzzily matches to coconino . take the hancock record of this row . select the rows whose county record fuzzily matches to graham . take the hancock record of this row . the first record is greater than the second record . the hancock record of the first row is 1504 . the hancock record of the second row is 322 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; county ; coconino } ; hancock } ; hop { filter_eq { all_rows ; county ; graham } ; hancock } } ; and { eq { hop { filter_eq { all_rows ; county ; coconino } ; hancock } ; 1504 } ; eq { hop { filter_eq { all_rows ; county ; graham } ; hancock } ; 322 } } }, interpretation: select the rows whose county record fuzzily matches to coconino . take the hancock record of this row . select the rows whose county record fuzzily matches to graham . take the hancock record of this row . the first record is greater than the second record . the hancock record of the first row is 1504 . the hancock record of the second row is 322 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; county ; coconino } ; hancock } ; hop { filter_eq { all_rows ; county ; graham } ; hancock } } ; and { eq { hop { filter_eq { all_rows ; county ; coconino } ; hancock } ; 1504 } ; eq { hop { filter_eq { all_rows ; county ; graham } ; hancock } ; 322 } } }, interpretation: the 2nd maximum attendance record of all rows is 55400 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; attendance ; 2 } ; 55400 }, interpretation: the 2nd maximum attendance record of all rows is 55400 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; attendance ; 2 } ; 55400 }, interpretation: select the rows whose no of villages record is less than 5 . there is only one such row in the table . the district record of this unqiue row is boe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; no of villages ; 5 } } ; eq { hop { filter_less { all_rows ; no of villages ; 5 } ; district } ; boe } }, interpretation: select the rows whose no of villages record is less than 5 . there is only one such row in the table . the district record of this unqiue row is boe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; no of villages ; 5 } } ; eq { hop { filter_less { all_rows ; no of villages ; 5 } ; district } ; boe } }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 1989 }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 1989 }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to friendly . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; friendly } } ; 2 }, interpretation: the maximum games record of all rows is 38 . the name record of the row with superlative games record is andrew panko .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; games } ; 38 } ; eq { hop { argmax { all_rows ; games } ; name } ; andrew panko } }, interpretation: the maximum games record of all rows is 38 . the name record of the row with superlative games record is andrew panko .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; games } ; 38 } ; eq { hop { argmax { all_rows ; games } ; name } ; andrew panko } }, interpretation: select the row whose date record of all rows is minimum . the name record of this row is targa florio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; name } ; targa florio }, interpretation: select the row whose date record of all rows is minimum . the name record of this row is targa florio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; name } ; targa florio }, interpretation: select the rows whose cuts made record is equal to 3 . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; cuts made ; 3 } } ; eq { hop { filter_eq { all_rows ; cuts made ; 3 } ; tournament } ; us open } }, interpretation: select the rows whose cuts made record is equal to 3 . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; cuts made ; 3 } } ; eq { hop { filter_eq { all_rows ; cuts made ; 3 } ; tournament } ; us open } }, interpretation: select the rows whose school record fuzzily matches to owen valley . take the enrollment record of this row . select the rows whose school record fuzzily matches to sullivan . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; school ; owen valley } ; enrollment } ; hop { filter_eq { all_rows ; school ; sullivan } ; enrollment } }, interpretation: select the rows whose school record fuzzily matches to owen valley . take the enrollment record of this row . select the rows whose school record fuzzily matches to sullivan . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; school ; owen valley } ; enrollment } ; hop { filter_eq { all_rows ; school ; sullivan } ; enrollment } }, interpretation: for the competition records of all rows , most of them fuzzily match to 2006 afc challenge cup .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; 2006 afc challenge cup }, interpretation: for the competition records of all rows , most of them fuzzily match to 2006 afc challenge cup .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; 2006 afc challenge cup }, interpretation: select the rows whose inhabitants record is equal to 0 . there is only one such row in the table . the name record of this unqiue row is l\u00edtla d\u00edmun .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; inhabitants ; 0 } } ; eq { hop { filter_eq { all_rows ; inhabitants ; 0 } ; name } ; l\u00edtla d\u00edmun } }, interpretation: select the rows whose inhabitants record is equal to 0 . there is only one such row in the table . the name record of this unqiue row is l\u00edtla d\u00edmun .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; inhabitants ; 0 } } ; eq { hop { filter_eq { all_rows ; inhabitants ; 0 } ; name } ; l\u00edtla d\u00edmun } }, interpretation: the average of the podiums record of all rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; podiums } ; 48 }, interpretation: the average of the podiums record of all rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; podiums } ; 48 }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is frank wolf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; frank wolf }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is frank wolf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; frank wolf }, interpretation: the sum of the attendance record of all rows is 791,469 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 791,469 }, interpretation: the sum of the attendance record of all rows is 791,469 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 791,469 }, interpretation: select the rows whose rank record is less than or equal to 3 . the average of the time record of these rows is 7:30.63 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; rank ; 3 } ; time } ; 7:30.63 }, interpretation: select the rows whose rank record is less than or equal to 3 . the average of the time record of these rows is 7:30.63 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; rank ; 3 } ; time } ; 7:30.63 }, interpretation: select the rows whose season record fuzzily matches to 2010 - 11 . take the rank ( league / conference ) record of this row . select the rows whose season record fuzzily matches to 2012 - 13 . take the rank ( league / conference ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; season ; 2010 - 11 } ; rank ( league / conference ) } ; hop { filter_eq { all_rows ; season ; 2012 - 13 } ; rank ( league / conference ) } }, interpretation: select the rows whose season record fuzzily matches to 2010 - 11 . take the rank ( league / conference ) record of this row . select the rows whose season record fuzzily matches to 2012 - 13 . take the rank ( league / conference ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; season ; 2010 - 11 } ; rank ( league / conference ) } ; hop { filter_eq { all_rows ; season ; 2012 - 13 } ; rank ( league / conference ) } }, interpretation: select the row whose date record of all rows is minimum . the location attendance record of this row is verizon center 20173 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; location attendance } ; verizon center 20173 }, interpretation: select the row whose date record of all rows is minimum . the location attendance record of this row is verizon center 20173 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; location attendance } ; verizon center 20173 }, interpretation: select the rows whose name record fuzzily matches to cavendish ( ex - sibyl ) . take the launched record of this row . select the rows whose name record fuzzily matches to caesar ( ex - ranger ) . take the launched record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; cavendish ( ex - sibyl ) } ; launched } ; hop { filter_eq { all_rows ; name ; caesar ( ex - ranger ) } ; launched } }, interpretation: select the rows whose name record fuzzily matches to cavendish ( ex - sibyl ) . take the launched record of this row . select the rows whose name record fuzzily matches to caesar ( ex - ranger ) . take the launched record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; cavendish ( ex - sibyl ) } ; launched } ; hop { filter_eq { all_rows ; name ; caesar ( ex - ranger ) } ; launched } }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is buffalo bills .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; buffalo bills }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is buffalo bills .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; buffalo bills }, interpretation: select the rows whose score record fuzzily matches to 3 - 0 . take the competition record of this row . select the rows whose score record fuzzily matches to 3 - 2 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is friendly . the competition record of the second row is friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; score ; 3 - 0 } ; competition } ; hop { filter_eq { all_rows ; score ; 3 - 2 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; score ; 3 - 0 } ; competition } ; friendly } ; eq { hop { filter_eq { all_rows ; score ; 3 - 2 } ; competition } ; friendly } } }, interpretation: select the rows whose score record fuzzily matches to 3 - 0 . take the competition record of this row . select the rows whose score record fuzzily matches to 3 - 2 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is friendly . the competition record of the second row is friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; score ; 3 - 0 } ; competition } ; hop { filter_eq { all_rows ; score ; 3 - 2 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; score ; 3 - 0 } ; competition } ; friendly } ; eq { hop { filter_eq { all_rows ; score ; 3 - 2 } ; competition } ; friendly } } }, interpretation: select the row whose population record of all rows is 2nd minimum . the english name record of this row is liancheng county .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; population ; 2 } ; english name } ; liancheng county }, interpretation: select the row whose population record of all rows is 2nd minimum . the english name record of this row is liancheng county .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; population ; 2 } ; english name } ; liancheng county }, interpretation: select the rows whose points record fuzzily matches to 6-0 . there is only one such row in the table . the team 1 record of this unqiue row is fluminense .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 6-0 } } ; eq { hop { filter_eq { all_rows ; points ; 6-0 } ; team 1 } ; fluminense } }, interpretation: select the rows whose points record fuzzily matches to 6-0 . there is only one such row in the table . the team 1 record of this unqiue row is fluminense .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 6-0 } } ; eq { hop { filter_eq { all_rows ; points ; 6-0 } ; team 1 } ; fluminense } }, interpretation: select the row whose matches record of all rows is maximum . the name record of this row is glenn ferguson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; name } ; glenn ferguson }, interpretation: select the row whose matches record of all rows is maximum . the name record of this row is glenn ferguson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; name } ; glenn ferguson }, interpretation: select the rows whose winning score record fuzzily matches to - 7 . there is only one such row in the table . the tournament record of this unqiue row is us women 's open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winning score ; - 7 } } ; eq { hop { filter_eq { all_rows ; winning score ; - 7 } ; tournament } ; us women 's open } }, interpretation: select the rows whose winning score record fuzzily matches to - 7 . there is only one such row in the table . the tournament record of this unqiue row is us women 's open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winning score ; - 7 } } ; eq { hop { filter_eq { all_rows ; winning score ; - 7 } ; tournament } ; us women 's open } }, interpretation: for the played records of all rows , all of them are equal to 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 16 }, interpretation: for the played records of all rows , all of them are equal to 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 16 }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: the average of the score record of all rows is 3.625 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 3.625 }, interpretation: the average of the score record of all rows is 3.625 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 3.625 }, interpretation: select the rows whose club record fuzzily matches to real oviedo . take the wins record of this row . select the rows whose club record fuzzily matches to ca osasuna . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; real oviedo } ; wins } ; hop { filter_eq { all_rows ; club ; ca osasuna } ; wins } }, interpretation: select the rows whose club record fuzzily matches to real oviedo . take the wins record of this row . select the rows whose club record fuzzily matches to ca osasuna . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; real oviedo } ; wins } ; hop { filter_eq { all_rows ; club ; ca osasuna } ; wins } }, interpretation: for the high assists records of all rows , most of them fuzzily match to ambrose .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; ambrose }, interpretation: for the high assists records of all rows , most of them fuzzily match to ambrose .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high assists ; ambrose }, interpretation: for the competition records of all rows , most of them fuzzily match to league cup .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; league cup }, interpretation: for the competition records of all rows , most of them fuzzily match to league cup .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; league cup }, interpretation: the average of the crowd record of all rows is 20188 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 20188 }, interpretation: the average of the crowd record of all rows is 20188 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 20188 }, interpretation: select the rows whose constructor record fuzzily matches to toyota . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constructor ; toyota } } ; 2 }, interpretation: select the rows whose constructor record fuzzily matches to toyota . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constructor ; toyota } } ; 2 }, interpretation: select the rows whose launched record is equal to 1958 . among these rows , select the rows whose capacity , mln tpa record fuzzily matches to 12 , 0 . there is only one such row in the table . the name record of this unqiue row is lukoil - permnefteorgsintez .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; launched ; 1958 } ; capacity , mln tpa ; 12 , 0 } } ; eq { hop { filter_eq { filter_eq { all_rows ; launched ; 1958 } ; capacity , mln tpa ; 12 , 0 } ; name } ; lukoil - permnefteorgsintez } }, interpretation: select the rows whose launched record is equal to 1958 . among these rows , select the rows whose capacity , mln tpa record fuzzily matches to 12 , 0 . there is only one such row in the table . the name record of this unqiue row is lukoil - permnefteorgsintez .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; launched ; 1958 } ; capacity , mln tpa ; 12 , 0 } } ; eq { hop { filter_eq { filter_eq { all_rows ; launched ; 1958 } ; capacity , mln tpa ; 12 , 0 } ; name } ; lukoil - permnefteorgsintez } }, interpretation: select the rows whose date introduced record fuzzily matches to june . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date introduced ; june } } ; 5 }, interpretation: select the rows whose date introduced record fuzzily matches to june . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date introduced ; june } } ; 5 }, interpretation: select the rows whose series record fuzzily matches to 1 - 13 . there is only one such row in the table . the actor record of this unqiue row is david suchet .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; series ; 1 - 13 } } ; eq { hop { filter_eq { all_rows ; series ; 1 - 13 } ; actor } ; david suchet } }, interpretation: select the rows whose series record fuzzily matches to 1 - 13 . there is only one such row in the table . the actor record of this unqiue row is david suchet .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; series ; 1 - 13 } } ; eq { hop { filter_eq { all_rows ; series ; 1 - 13 } ; actor } ; david suchet } }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 1993 }, interpretation: select the row whose points record of all rows is maximum . the year record of this row is 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; year } ; 1993 }, interpretation: for the outcome records of all rows , most of them fuzzily match to runner - up .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; runner - up }, interpretation: for the outcome records of all rows , most of them fuzzily match to runner - up .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; runner - up }, interpretation: select the rows whose nation record fuzzily matches to turkey . take the gold record of this row . select the rows whose nation record fuzzily matches to soviet union . take the gold record of this row . the first record is greater than the second record . the gold record of the first row is 4 . the gold record of the second row is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; nation ; turkey } ; gold } ; hop { filter_eq { all_rows ; nation ; soviet union } ; gold } } ; and { eq { hop { filter_eq { all_rows ; nation ; turkey } ; gold } ; 4 } ; eq { hop { filter_eq { all_rows ; nation ; soviet union } ; gold } ; 2 } } }, interpretation: select the rows whose nation record fuzzily matches to turkey . take the gold record of this row . select the rows whose nation record fuzzily matches to soviet union . take the gold record of this row . the first record is greater than the second record . the gold record of the first row is 4 . the gold record of the second row is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; nation ; turkey } ; gold } ; hop { filter_eq { all_rows ; nation ; soviet union } ; gold } } ; and { eq { hop { filter_eq { all_rows ; nation ; turkey } ; gold } ; 4 } ; eq { hop { filter_eq { all_rows ; nation ; soviet union } ; gold } ; 2 } } }, interpretation: select the row whose built record of all rows is minimum . the name record of this row is humpback .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; built } ; name } ; humpback }, interpretation: select the row whose built record of all rows is minimum . the name record of this row is humpback .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; built } ; name } ; humpback }, interpretation: select the rows whose date record fuzzily matches to november 27 , 1989 ( mon ) . take the result record of this row . select the rows whose date record fuzzily matches to november 19 , 1989 . take the result record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; november 27 , 1989 ( mon ) } ; result } ; hop { filter_eq { all_rows ; date ; november 19 , 1989 } ; result } }, interpretation: select the rows whose date record fuzzily matches to november 27 , 1989 ( mon ) . take the result record of this row . select the rows whose date record fuzzily matches to november 19 , 1989 . take the result record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; november 27 , 1989 ( mon ) } ; result } ; hop { filter_eq { all_rows ; date ; november 19 , 1989 } ; result } }, interpretation: select the row whose games record of all rows is maximum . the season record of this row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; games } ; season } ; 2007 }, interpretation: select the row whose games record of all rows is maximum . the season record of this row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; games } ; season } ; 2007 }, interpretation: select the rows whose country record is arbitrary . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; country } } ; 12 }, interpretation: select the rows whose country record is arbitrary . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; country } } ; 12 }, interpretation: select the rows whose vacator record fuzzily matches to clifford p case ( r ) . take the reason for change record of this row . select the rows whose vacator record fuzzily matches to paul w shafer ( r ) . take the reason for change record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; vacator ; clifford p case ( r ) } ; reason for change } ; hop { filter_eq { all_rows ; vacator ; paul w shafer ( r ) } ; reason for change } }, interpretation: select the rows whose vacator record fuzzily matches to clifford p case ( r ) . take the reason for change record of this row . select the rows whose vacator record fuzzily matches to paul w shafer ( r ) . take the reason for change record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; vacator ; clifford p case ( r ) } ; reason for change } ; hop { filter_eq { all_rows ; vacator ; paul w shafer ( r ) } ; reason for change } }, interpretation: select the rows whose period record fuzzily matches to 2009 - . there is only one such row in the table . the name record of this unqiue row is christophe jallet .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; period ; 2009 - } } ; eq { hop { filter_eq { all_rows ; period ; 2009 - } ; name } ; christophe jallet } }, interpretation: select the rows whose period record fuzzily matches to 2009 - . there is only one such row in the table . the name record of this unqiue row is christophe jallet .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; period ; 2009 - } } ; eq { hop { filter_eq { all_rows ; period ; 2009 - } ; name } ; christophe jallet } }, interpretation: select the row whose turnout record of all rows is maximum . the constituency record of this row is munster .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; turnout } ; constituency } ; munster }, interpretation: select the row whose turnout record of all rows is maximum . the constituency record of this row is munster .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; turnout } ; constituency } ; munster }, interpretation: select the row whose votes record of all rows is 2nd maximum . the election record of this row is 2002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; votes ; 2 } ; election } ; 2002 }, interpretation: select the row whose votes record of all rows is 2nd maximum . the election record of this row is 2002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; votes ; 2 } ; election } ; 2002 }, interpretation: select the rows whose winner record fuzzily matches to luke youlden . there is only one such row in the table . the race title record of this unqiue row is mallala .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winner ; luke youlden } } ; eq { hop { filter_eq { all_rows ; winner ; luke youlden } ; race title } ; mallala } }, interpretation: select the rows whose winner record fuzzily matches to luke youlden . there is only one such row in the table . the race title record of this unqiue row is mallala .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winner ; luke youlden } } ; eq { hop { filter_eq { all_rows ; winner ; luke youlden } ; race title } ; mallala } }, interpretation: select the rows whose attendance record fuzzily matches to n / a . there is only one such row in the table . the date record of this unqiue row is october 25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; attendance ; n / a } } ; eq { hop { filter_eq { all_rows ; attendance ; n / a } ; date } ; october 25 } }, interpretation: select the rows whose attendance record fuzzily matches to n / a . there is only one such row in the table . the date record of this unqiue row is october 25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; attendance ; n / a } } ; eq { hop { filter_eq { all_rows ; attendance ; n / a } ; date } ; october 25 } }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose call sign record fuzzily matches to ktaw . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to ktml . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; call sign ; ktaw } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; ktml } ; frequency mhz } }, interpretation: select the rows whose call sign record fuzzily matches to ktaw . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to ktml . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; call sign ; ktaw } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; ktml } ; frequency mhz } }, interpretation: select the rows whose to par record fuzzily matches to +5 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; +5 } } ; 4 }, interpretation: select the rows whose to par record fuzzily matches to +5 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; +5 } } ; 4 }, interpretation: select the rows whose earpads record fuzzily matches to circumaural bowl . there is only one such row in the table . the headphone model record of this unqiue row is gs1000i .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; earpads ; circumaural bowl } } ; eq { hop { filter_eq { all_rows ; earpads ; circumaural bowl } ; headphone model } ; gs1000i } }, interpretation: select the rows whose earpads record fuzzily matches to circumaural bowl . there is only one such row in the table . the headphone model record of this unqiue row is gs1000i .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; earpads ; circumaural bowl } } ; eq { hop { filter_eq { all_rows ; earpads ; circumaural bowl } ; headphone model } ; gs1000i } }, interpretation: select the rows whose attendance record is less than 35000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; attendance ; 35000 } } ; 2 }, interpretation: select the rows whose attendance record is less than 35000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; attendance ; 35000 } } ; 2 }, interpretation: the average of the weeks at 1 record of all rows is 4.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weeks at 1 } ; 4.8 }, interpretation: the average of the weeks at 1 record of all rows is 4.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weeks at 1 } ; 4.8 }, interpretation: select the rows whose high points record fuzzily matches to jason richardson . the average of the high points record of these rows is 31 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; high points ; jason richardson } ; high points } ; 31 }, interpretation: select the rows whose high points record fuzzily matches to jason richardson . the average of the high points record of these rows is 31 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; high points ; jason richardson } ; high points } ; 31 }, interpretation: the 5th minimum place record of all rows is 5 . the player record of the row with 5th minimum place record is fred couples .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; place ; 5 } ; 5 } ; eq { hop { nth_argmin { all_rows ; place ; 5 } ; player } ; fred couples } }, interpretation: the 5th minimum place record of all rows is 5 . the player record of the row with 5th minimum place record is fred couples .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; place ; 5 } ; 5 } ; eq { hop { nth_argmin { all_rows ; place ; 5 } ; player } ; fred couples } }, interpretation: select the rows whose play - by - play record fuzzily matches to al michaels . for the play - by - play records of these rows , all of them fuzzily match to al michaels .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; play - by - play ; al michaels } ; play - by - play ; al michaels }, interpretation: select the rows whose play - by - play record fuzzily matches to al michaels . for the play - by - play records of these rows , all of them fuzzily match to al michaels .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; play - by - play ; al michaels } ; play - by - play ; al michaels }, interpretation: select the rows whose school record is arbitrary . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; school } } ; 8 }, interpretation: select the rows whose school record is arbitrary . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; school } } ; 8 }, interpretation: select the rows whose 2nd venue record fuzzily matches to mexico city . there is only one such row in the table . the year record of this unqiue row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2nd venue ; mexico city } } ; eq { hop { filter_eq { all_rows ; 2nd venue ; mexico city } ; year } ; 2007 } }, interpretation: select the rows whose 2nd venue record fuzzily matches to mexico city . there is only one such row in the table . the year record of this unqiue row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2nd venue ; mexico city } } ; eq { hop { filter_eq { all_rows ; 2nd venue ; mexico city } ; year } ; 2007 } }, interpretation: select the rows whose city record fuzzily matches to seongnam . take the population ( 2010 ) record of this row . select the rows whose city record fuzzily matches to namyangju . take the population ( 2010 ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; city ; seongnam } ; population ( 2010 ) } ; hop { filter_eq { all_rows ; city ; namyangju } ; population ( 2010 ) } }, interpretation: select the rows whose city record fuzzily matches to seongnam . take the population ( 2010 ) record of this row . select the rows whose city record fuzzily matches to namyangju . take the population ( 2010 ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; city ; seongnam } ; population ( 2010 ) } ; hop { filter_eq { all_rows ; city ; namyangju } ; population ( 2010 ) } }, interpretation: select the rows whose original air date record fuzzily matches to may . for the directed by records of these rows , most of them fuzzily match to gary halvorson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; original air date ; may } ; directed by ; gary halvorson }, interpretation: select the rows whose original air date record fuzzily matches to may . for the directed by records of these rows , most of them fuzzily match to gary halvorson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; original air date ; may } ; directed by ; gary halvorson }, interpretation: select the row whose length record of all rows is maximum . the circuit record of this row is donington park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; circuit } ; donington park }, interpretation: select the row whose length record of all rows is maximum . the circuit record of this row is donington park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; circuit } ; donington park }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 5 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 5 }, interpretation: the average of the points record of all rows is 51.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 51.8 }, interpretation: the average of the points record of all rows is 51.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 51.8 }, interpretation: for the label records of all rows , most of them fuzzily match to alfa records .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; label ; alfa records }, interpretation: for the label records of all rows , most of them fuzzily match to alfa records .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; label ; alfa records }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: for the result records of all rows , most of them fuzzily match to nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; nominated }, interpretation: for the result records of all rows , most of them fuzzily match to nominated .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; nominated }, interpretation: select the rows whose venue record fuzzily matches to nuremberg . there is only one such row in the table . the date record of this unqiue row is 3 june 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; nuremberg } } ; eq { hop { filter_eq { all_rows ; venue ; nuremberg } ; date } ; 3 june 2000 } }, interpretation: select the rows whose venue record fuzzily matches to nuremberg . there is only one such row in the table . the date record of this unqiue row is 3 june 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; nuremberg } } ; eq { hop { filter_eq { all_rows ; venue ; nuremberg } ; date } ; 3 june 2000 } }, interpretation: select the row whose round record of all rows is 1st maximum . the opponent record of this row is antoine jaoude .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; round ; 1 } ; opponent } ; antoine jaoude }, interpretation: select the row whose round record of all rows is 1st maximum . the opponent record of this row is antoine jaoude .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; round ; 1 } ; opponent } ; antoine jaoude }, interpretation: the average of the pts record of all rows is 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pts } ; 0 }, interpretation: the average of the pts record of all rows is 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pts } ; 0 }, interpretation: for the rebounds records of all rows , all of them are greater than or equal to 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater_eq { all_rows ; rebounds ; 100 }, interpretation: for the rebounds records of all rows , all of them are greater than or equal to 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater_eq { all_rows ; rebounds ; 100 }, interpretation: select the rows whose location ( city , state ) record fuzzily matches to wisconsin . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ( city , state ) ; wisconsin } } ; 4 }, interpretation: select the rows whose location ( city , state ) record fuzzily matches to wisconsin . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ( city , state ) ; wisconsin } } ; 4 }, interpretation: select the rows whose party record fuzzily matches to democratic . select the row whose first elected record of these rows is minimum . the incumbent record of this row is charles edward bennett .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; party ; democratic } ; first elected } ; incumbent } ; charles edward bennett }, interpretation: select the rows whose party record fuzzily matches to democratic . select the row whose first elected record of these rows is minimum . the incumbent record of this row is charles edward bennett .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; party ; democratic } ; first elected } ; incumbent } ; charles edward bennett }, interpretation: the average of the time record of all rows is 5.603 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 5.603 }, interpretation: the average of the time record of all rows is 5.603 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 5.603 }, interpretation: for the nationality records of all rows , most of them fuzzily match to estonia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; estonia }, interpretation: for the nationality records of all rows , most of them fuzzily match to estonia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; estonia }, interpretation: select the rows whose number of borough councilors record is equal to 4 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; number of borough councilors ; 4 } } ; 3 }, interpretation: select the rows whose number of borough councilors record is equal to 4 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; number of borough councilors ; 4 } } ; 3 }, interpretation: select the rows whose winner record fuzzily matches to klavdija bojarskikh . take the winter olympics record of this row . select the rows whose winner record fuzzily matches to toini gustafsson . take the winter olympics record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; winner ; klavdija bojarskikh } ; winter olympics } ; hop { filter_eq { all_rows ; winner ; toini gustafsson } ; winter olympics } }, interpretation: select the rows whose winner record fuzzily matches to klavdija bojarskikh . take the winter olympics record of this row . select the rows whose winner record fuzzily matches to toini gustafsson . take the winter olympics record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; winner ; klavdija bojarskikh } ; winter olympics } ; hop { filter_eq { all_rows ; winner ; toini gustafsson } ; winter olympics } }, interpretation: select the rows whose toxic materials record fuzzily matches to yes . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; toxic materials ; yes } } ; 4 }, interpretation: select the rows whose toxic materials record fuzzily matches to yes . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; toxic materials ; yes } } ; 4 }, interpretation: select the rows whose year record is greater than 2005 . there is only one such row in the table . the version record of this unqiue row is live version ( recorded in 2006 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; year ; 2005 } } ; eq { hop { filter_greater { all_rows ; year ; 2005 } ; version } ; live version ( recorded in 2006 ) } }, interpretation: select the rows whose year record is greater than 2005 . there is only one such row in the table . the version record of this unqiue row is live version ( recorded in 2006 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; year ; 2005 } } ; eq { hop { filter_greater { all_rows ; year ; 2005 } ; version } ; live version ( recorded in 2006 ) } }, interpretation: the sum of the population record of all rows is 20423 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population } ; 20423 }, interpretation: the sum of the population record of all rows is 20423 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population } ; 20423 }, interpretation: select the rows whose arena record fuzzily matches to honda center . among these rows , select the rows whose attendance record is equal to 17174 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; arena ; honda center } ; attendance ; 17174 } } ; 5 }, interpretation: select the rows whose arena record fuzzily matches to honda center . among these rows , select the rows whose attendance record is equal to 17174 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; arena ; honda center } ; attendance ; 17174 } } ; 5 }, interpretation: select the rows whose date of birth record is equal to 1968 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date of birth ; 1968 } } ; 2 }, interpretation: select the rows whose date of birth record is equal to 1968 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date of birth ; 1968 } } ; 2 }, interpretation: select the row whose us viewers ( in millions ) record of all rows is maximum . the title record of this row is rebel without a pause .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; title } ; rebel without a pause }, interpretation: select the row whose us viewers ( in millions ) record of all rows is maximum . the title record of this row is rebel without a pause .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( in millions ) } ; title } ; rebel without a pause }, interpretation: the average of the to par record of all rows is -2.19 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -2.19 }, interpretation: the average of the to par record of all rows is -2.19 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -2.19 }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is princes park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; princes park }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is princes park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; princes park }, interpretation: select the rows whose s analyst record fuzzily matches to eddie arcaro . take the year record of this row . select the rows whose s analyst record fuzzily matches to bill hartack . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; s analyst ; eddie arcaro } ; year } ; hop { filter_eq { all_rows ; s analyst ; bill hartack } ; year } }, interpretation: select the rows whose s analyst record fuzzily matches to eddie arcaro . take the year record of this row . select the rows whose s analyst record fuzzily matches to bill hartack . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; s analyst ; eddie arcaro } ; year } ; hop { filter_eq { all_rows ; s analyst ; bill hartack } ; year } }, interpretation: select the rows whose type record fuzzily matches to plain stage . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; plain stage } } ; 10 }, interpretation: select the rows whose type record fuzzily matches to plain stage . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; plain stage } } ; 10 }, interpretation: select the row whose milepost record of all rows is 3rd maximum . the location record of this row is rockland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; milepost ; 3 } ; location } ; rockland }, interpretation: select the row whose milepost record of all rows is 3rd maximum . the location record of this row is rockland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; milepost ; 3 } ; location } ; rockland }, interpretation: select the rows whose performer 2 record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; performer 2 } } ; 6 }, interpretation: select the rows whose performer 2 record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; performer 2 } } ; 6 }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is percy e quin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; percy e quin }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is percy e quin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; percy e quin }, interpretation: select the rows whose games record is greater than 30 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; games ; 30 } } ; 3 }, interpretation: select the rows whose games record is greater than 30 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; games ; 30 } } ; 3 }, interpretation: select the rows whose site / stadium record fuzzily matches to goodwin field . there is only one such row in the table . the date record of this unqiue row is may 25 . the opponent record of this unqiue row is cal state fullerton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; site / stadium ; goodwin field } } ; and { eq { hop { filter_eq { all_rows ; site / stadium ; goodwin field } ; date } ; may 25 } ; eq { hop { filter_eq { all_rows ; site / stadium ; goodwin field } ; opponent } ; cal state fullerton } } }, interpretation: select the rows whose site / stadium record fuzzily matches to goodwin field . there is only one such row in the table . the date record of this unqiue row is may 25 . the opponent record of this unqiue row is cal state fullerton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; site / stadium ; goodwin field } } ; and { eq { hop { filter_eq { all_rows ; site / stadium ; goodwin field } ; date } ; may 25 } ; eq { hop { filter_eq { all_rows ; site / stadium ; goodwin field } ; opponent } ; cal state fullerton } } }, interpretation: select the row whose time record of all rows is 2nd minimum . the winner record of this row is paddy o'prado .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 2 } ; winner } ; paddy o'prado }, interpretation: select the row whose time record of all rows is 2nd minimum . the winner record of this row is paddy o'prado .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 2 } ; winner } ; paddy o'prado }, interpretation: the maximum results 2004 record of all rows is 28.90 % . the party record of the row with superlative results 2004 record is ps .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; results 2004 } ; 28.90 % } ; eq { hop { argmax { all_rows ; results 2004 } ; party } ; ps } }, interpretation: the maximum results 2004 record of all rows is 28.90 % . the party record of the row with superlative results 2004 record is ps .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; results 2004 } ; 28.90 % } ; eq { hop { argmax { all_rows ; results 2004 } ; party } ; ps } }, interpretation: select the rows whose district record fuzzily matches to shajapur . there is only one such row in the table . the name record of this unqiue row is susner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; district ; shajapur } } ; eq { hop { filter_eq { all_rows ; district ; shajapur } ; name } ; susner } }, interpretation: select the rows whose district record fuzzily matches to shajapur . there is only one such row in the table . the name record of this unqiue row is susner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; district ; shajapur } } ; eq { hop { filter_eq { all_rows ; district ; shajapur } ; name } ; susner } }, interpretation: select the rows whose player record fuzzily matches to john daly . take the year ( s ) won record of this row . select the rows whose player record fuzzily matches to david toms . take the year ( s ) won record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; john daly } ; year ( s ) won } ; hop { filter_eq { all_rows ; player ; david toms } ; year ( s ) won } }, interpretation: select the rows whose player record fuzzily matches to john daly . take the year ( s ) won record of this row . select the rows whose player record fuzzily matches to david toms . take the year ( s ) won record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; john daly } ; year ( s ) won } ; hop { filter_eq { all_rows ; player ; david toms } ; year ( s ) won } }, interpretation: select the row whose floors record of all rows is 3rd maximum . the street address record of this row is 1111 main street .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; floors ; 3 } ; street address } ; 1111 main street }, interpretation: select the row whose floors record of all rows is 3rd maximum . the street address record of this row is 1111 main street .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; floors ; 3 } ; street address } ; 1111 main street }, interpretation: select the rows whose pba team record fuzzily matches to formula shel . select the row whose pick record of these rows is 2nd minimum . the player record of this row is arnold rodriguez .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; pba team ; formula shel } ; pick ; 2 } ; player } ; arnold rodriguez }, interpretation: select the rows whose pba team record fuzzily matches to formula shel . select the row whose pick record of these rows is 2nd minimum . the player record of this row is arnold rodriguez .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; pba team ; formula shel } ; pick ; 2 } ; player } ; arnold rodriguez }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 2 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 2 }, interpretation: for the date of vacancy records of all rows , most of them fuzzily match to 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date of vacancy ; 2010 }, interpretation: for the date of vacancy records of all rows , most of them fuzzily match to 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date of vacancy ; 2010 }, interpretation: for the party records of all rows , all of them fuzzily match to democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party ; democratic }, interpretation: for the party records of all rows , all of them fuzzily match to democratic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party ; democratic }, interpretation: select the rows whose name record fuzzily matches to keith benson . take the weight record of this row . select the rows whose name record fuzzily matches to tim williams . take the weight record of this row . the first record is 10 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; keith benson } ; weight } ; hop { filter_eq { all_rows ; name ; tim williams } ; weight } } ; 10 }, interpretation: select the rows whose name record fuzzily matches to keith benson . take the weight record of this row . select the rows whose name record fuzzily matches to tim williams . take the weight record of this row . the first record is 10 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; keith benson } ; weight } ; hop { filter_eq { all_rows ; name ; tim williams } ; weight } } ; 10 }, interpretation: select the rows whose year record is less than 2006 . for the post records of these rows , most of them fuzzily match to screenwriter .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_less { all_rows ; year ; 2006 } ; post ; screenwriter }, interpretation: select the rows whose year record is less than 2006 . for the post records of these rows , most of them fuzzily match to screenwriter .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_less { all_rows ; year ; 2006 } ; post ; screenwriter }, interpretation: select the rows whose date record fuzzily matches to october . among these rows , select the rows whose result record fuzzily matches to w . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; october } ; result ; w } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to october . among these rows , select the rows whose result record fuzzily matches to w . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; october } ; result ; w } } ; 3 }, interpretation: select the rows whose original air date record fuzzily matches to august . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; august } } ; 5 }, interpretation: select the rows whose original air date record fuzzily matches to august . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; august } } ; 5 }, interpretation: select the rows whose player record fuzzily matches to juan theron . take the overs record of this row . select the rows whose player record fuzzily matches to makhaya ntini . take the overs record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; juan theron } ; overs } ; hop { filter_eq { all_rows ; player ; makhaya ntini } ; overs } }, interpretation: select the rows whose player record fuzzily matches to juan theron . take the overs record of this row . select the rows whose player record fuzzily matches to makhaya ntini . take the overs record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; juan theron } ; overs } ; hop { filter_eq { all_rows ; player ; makhaya ntini } ; overs } }, interpretation: select the row whose us viewers ( million ) record of all rows is 2nd maximum . the - record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us viewers ( million ) ; 2 } ; - } ; 1 }, interpretation: select the row whose us viewers ( million ) record of all rows is 2nd maximum . the - record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us viewers ( million ) ; 2 } ; - } ; 1 }, interpretation: select the rows whose withdrawn record is equal to 1952 . there is only one such row in the table . the ltsr name record of this unqiue row is shoeburyness .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; withdrawn ; 1952 } } ; eq { hop { filter_eq { all_rows ; withdrawn ; 1952 } ; ltsr name } ; shoeburyness } }, interpretation: select the rows whose withdrawn record is equal to 1952 . there is only one such row in the table . the ltsr name record of this unqiue row is shoeburyness .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; withdrawn ; 1952 } } ; eq { hop { filter_eq { all_rows ; withdrawn ; 1952 } ; ltsr name } ; shoeburyness } }, interpretation: select the rows whose player record fuzzily matches to scott simpson . take the to par record of this row . select the rows whose player record fuzzily matches to larry nelson . take the to par record of this row . the second record is 3 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; scott simpson } ; to par } ; hop { filter_eq { all_rows ; player ; larry nelson } ; to par } } ; -3 }, interpretation: select the rows whose player record fuzzily matches to scott simpson . take the to par record of this row . select the rows whose player record fuzzily matches to larry nelson . take the to par record of this row . the second record is 3 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; scott simpson } ; to par } ; hop { filter_eq { all_rows ; player ; larry nelson } ; to par } } ; -3 }, interpretation: the average of the home team score record of all rows is 15.18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 15.18 }, interpretation: the average of the home team score record of all rows is 15.18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 15.18 }, interpretation: select the rows whose year record fuzzily matches to 1968 . take the pts record of this row . select the rows whose year record fuzzily matches to 1973 . take the pts record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1968 } ; pts } ; hop { filter_eq { all_rows ; year ; 1973 } ; pts } }, interpretation: select the rows whose year record fuzzily matches to 1968 . take the pts record of this row . select the rows whose year record fuzzily matches to 1973 . take the pts record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1968 } ; pts } ; hop { filter_eq { all_rows ; year ; 1973 } ; pts } }, interpretation: select the rows whose visual arts record fuzzily matches to sharon hayes . there is only one such row in the table . the year record of this unqiue row is 2013 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; visual arts ; sharon hayes } } ; eq { hop { filter_eq { all_rows ; visual arts ; sharon hayes } ; year } ; 2013 } }, interpretation: select the rows whose visual arts record fuzzily matches to sharon hayes . there is only one such row in the table . the year record of this unqiue row is 2013 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; visual arts ; sharon hayes } } ; eq { hop { filter_eq { all_rows ; visual arts ; sharon hayes } ; year } ; 2013 } }, interpretation: for the area records of all rows , most of them fuzzily match to papakura .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; area ; papakura }, interpretation: for the area records of all rows , most of them fuzzily match to papakura .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; area ; papakura }, interpretation: select the rows whose year record is less than 1998 . among these rows , select the rows whose country record fuzzily matches to sweden . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; year ; 1998 } ; country ; sweden } } ; 1 }, interpretation: select the rows whose year record is less than 1998 . among these rows , select the rows whose country record fuzzily matches to sweden . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; year ; 1998 } ; country ; sweden } } ; 1 }, interpretation: select the rows whose goal difference record is less than 0 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; goal difference ; 0 } } ; 5 }, interpretation: select the rows whose goal difference record is less than 0 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; goal difference ; 0 } } ; 5 }, interpretation: select the rows whose manner of departure record fuzzily matches to gardening leave 1 . there is only one such row in the table . the club record of this unqiue row is kedah fa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; gardening leave 1 } } ; eq { hop { filter_eq { all_rows ; manner of departure ; gardening leave 1 } ; club } ; kedah fa } }, interpretation: select the rows whose manner of departure record fuzzily matches to gardening leave 1 . there is only one such row in the table . the club record of this unqiue row is kedah fa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; gardening leave 1 } } ; eq { hop { filter_eq { all_rows ; manner of departure ; gardening leave 1 } ; club } ; kedah fa } }, interpretation: select the rows whose game record fuzzily matches to 63 . take the points record of this row . select the rows whose game record fuzzily matches to 57 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; game ; 63 } ; points } ; hop { filter_eq { all_rows ; game ; 57 } ; points } }, interpretation: select the rows whose game record fuzzily matches to 63 . take the points record of this row . select the rows whose game record fuzzily matches to 57 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; game ; 63 } ; points } ; hop { filter_eq { all_rows ; game ; 57 } ; points } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose driver record fuzzily matches to luigi villoresi . take the laps record of this row . select the rows whose driver record fuzzily matches to alan brown . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; luigi villoresi } ; laps } ; hop { filter_eq { all_rows ; driver ; alan brown } ; laps } }, interpretation: select the rows whose driver record fuzzily matches to luigi villoresi . take the laps record of this row . select the rows whose driver record fuzzily matches to alan brown . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; luigi villoresi } ; laps } ; hop { filter_eq { all_rows ; driver ; alan brown } ; laps } }, interpretation: for the date records of all rows , all of them fuzzily match to november .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; november }, interpretation: for the date records of all rows , all of them fuzzily match to november .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; november }, interpretation: select the rows whose 2003 - 04 pts record is equal to - . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2003 - 04 pts ; - } } ; 4 }, interpretation: select the rows whose 2003 - 04 pts record is equal to - . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2003 - 04 pts ; - } } ; 4 }, interpretation: for the location records of all rows , most of them fuzzily match to usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; usa }, interpretation: for the location records of all rows , most of them fuzzily match to usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; usa }, interpretation: select the rows whose title record fuzzily matches to empire . take the order record of this row . select the rows whose title record fuzzily matches to hollywood . take the order record of this row . the first record is less than the second record . the order record of the first row is 4 . the order record of the second row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; title ; empire } ; order } ; hop { filter_eq { all_rows ; title ; hollywood } ; order } } ; and { eq { hop { filter_eq { all_rows ; title ; empire } ; order } ; 4 } ; eq { hop { filter_eq { all_rows ; title ; hollywood } ; order } ; 5 } } }, interpretation: select the rows whose title record fuzzily matches to empire . take the order record of this row . select the rows whose title record fuzzily matches to hollywood . take the order record of this row . the first record is less than the second record . the order record of the first row is 4 . the order record of the second row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; title ; empire } ; order } ; hop { filter_eq { all_rows ; title ; hollywood } ; order } } ; and { eq { hop { filter_eq { all_rows ; title ; empire } ; order } ; 4 } ; eq { hop { filter_eq { all_rows ; title ; hollywood } ; order } ; 5 } } }, interpretation: select the rows whose premier date record fuzzily matches to 2004 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; premier date ; 2004 } } ; 4 }, interpretation: select the rows whose premier date record fuzzily matches to 2004 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; premier date ; 2004 } } ; 4 }, interpretation: select the rows whose year record is equal to 2008 . among these rows , select the rows whose nominated / won record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; year ; 2008 } ; nominated / won ; won } } ; 3 }, interpretation: select the rows whose year record is equal to 2008 . among these rows , select the rows whose nominated / won record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; year ; 2008 } ; nominated / won ; won } } ; 3 }, interpretation: for the batting style records of all rows , most of them fuzzily match to right hand bat .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; batting style ; right hand bat }, interpretation: for the batting style records of all rows , most of them fuzzily match to right hand bat .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; batting style ; right hand bat }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 10 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 10 }, interpretation: the average of the score record of all rows is 34.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 34.5 }, interpretation: the average of the score record of all rows is 34.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 34.5 }, interpretation: select the row whose floors record of all rows is maximum . the name record of this row is bank one tower .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; floors } ; name } ; bank one tower }, interpretation: select the row whose floors record of all rows is maximum . the name record of this row is bank one tower .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; floors } ; name } ; bank one tower }, interpretation: select the rows whose surface record fuzzily matches to grass . among these rows , select the rows whose outcome record fuzzily matches to winner . there is only one such row in the table . the tournament record of this unqiue row is newport , rhode island , usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; surface ; grass } ; outcome ; winner } } ; eq { hop { filter_eq { filter_eq { all_rows ; surface ; grass } ; outcome ; winner } ; tournament } ; newport , rhode island , usa } }, interpretation: select the rows whose surface record fuzzily matches to grass . among these rows , select the rows whose outcome record fuzzily matches to winner . there is only one such row in the table . the tournament record of this unqiue row is newport , rhode island , usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; surface ; grass } ; outcome ; winner } } ; eq { hop { filter_eq { filter_eq { all_rows ; surface ; grass } ; outcome ; winner } ; tournament } ; newport , rhode island , usa } }, interpretation: select the rows whose season outcome record fuzzily matches to won div ii state championship . there is only one such row in the table . the team record of this unqiue row is indians .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; season outcome ; won div ii state championship } } ; eq { hop { filter_eq { all_rows ; season outcome ; won div ii state championship } ; team } ; indians } }, interpretation: select the rows whose season outcome record fuzzily matches to won div ii state championship . there is only one such row in the table . the team record of this unqiue row is indians .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; season outcome ; won div ii state championship } } ; eq { hop { filter_eq { all_rows ; season outcome ; won div ii state championship } ; team } ; indians } }, interpretation: select the rows whose name record fuzzily matches to bong hawkins . take the season record of this row . select the rows whose name record fuzzily matches to bakari hendrix . take the season record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; bong hawkins } ; season } ; hop { filter_eq { all_rows ; name ; bakari hendrix } ; season } }, interpretation: select the rows whose name record fuzzily matches to bong hawkins . take the season record of this row . select the rows whose name record fuzzily matches to bakari hendrix . take the season record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; bong hawkins } ; season } ; hop { filter_eq { all_rows ; name ; bakari hendrix } ; season } }, interpretation: select the row whose round record of all rows is minimum . the name record of this row is sean weatherspoon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; round } ; name } ; sean weatherspoon }, interpretation: select the row whose round record of all rows is minimum . the name record of this row is sean weatherspoon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; round } ; name } ; sean weatherspoon }, interpretation: select the rows whose home team score record is greater than 15.0 . among these rows , select the rows whose crowd record is less than 20,000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; home team score ; 15.0 } ; crowd ; 20,000 } } ; 2 }, interpretation: select the rows whose home team score record is greater than 15.0 . among these rows , select the rows whose crowd record is less than 20,000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; home team score ; 15.0 } ; crowd ; 20,000 } } ; 2 }, interpretation: the average of the mult record of all rows is 3.90 90 repeating .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; mult } ; 3.90 90 repeating }, interpretation: the average of the mult record of all rows is 3.90 90 repeating .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; mult } ; 3.90 90 repeating }, interpretation: the average of the enrollment record of all rows is 1077.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 1077.4 }, interpretation: the average of the enrollment record of all rows is 1077.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 1077.4 }, interpretation: the average of the points record of all rows is 19.91 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 19.91 }, interpretation: the average of the points record of all rows is 19.91 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 19.91 }, interpretation: the average of the round record of all rows is 1.95 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; round } ; 1.95 }, interpretation: the average of the round record of all rows is 1.95 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; round } ; 1.95 }, interpretation: the sum of the points record of all rows is 490 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 490 }, interpretation: the sum of the points record of all rows is 490 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 490 }, interpretation: select the rows whose attendance record is less than 60000 . there is only one such row in the table . the game site record of this unqiue row is rca dome .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; attendance ; 60000 } } ; eq { hop { filter_less { all_rows ; attendance ; 60000 } ; game site } ; rca dome } }, interpretation: select the rows whose attendance record is less than 60000 . there is only one such row in the table . the game site record of this unqiue row is rca dome .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; attendance ; 60000 } } ; eq { hop { filter_less { all_rows ; attendance ; 60000 } ; game site } ; rca dome } }, interpretation: select the rows whose team record fuzzily matches to forsythe racing . the sum of the points record of these rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; forsythe racing } ; points } ; 8 }, interpretation: select the rows whose team record fuzzily matches to forsythe racing . the sum of the points record of these rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; forsythe racing } ; points } ; 8 }, interpretation: select the rows whose team name record fuzzily matches to eng makers . there is only one such row in the table . the season record of this unqiue row is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team name ; eng makers } } ; eq { hop { filter_eq { all_rows ; team name ; eng makers } ; season } ; 2006 } }, interpretation: select the rows whose team name record fuzzily matches to eng makers . there is only one such row in the table . the season record of this unqiue row is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team name ; eng makers } } ; eq { hop { filter_eq { all_rows ; team name ; eng makers } ; season } ; 2006 } }, interpretation: select the rows whose goal difference record is equal to 0 . there is only one such row in the table . the club record of this unqiue row is atl\u00e9tico madrile\u00f1o .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goal difference ; 0 } } ; eq { hop { filter_eq { all_rows ; goal difference ; 0 } ; club } ; atl\u00e9tico madrile\u00f1o } }, interpretation: select the rows whose goal difference record is equal to 0 . there is only one such row in the table . the club record of this unqiue row is atl\u00e9tico madrile\u00f1o .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goal difference ; 0 } } ; eq { hop { filter_eq { all_rows ; goal difference ; 0 } ; club } ; atl\u00e9tico madrile\u00f1o } }, interpretation: the sum of the wins record of all rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wins } ; 4 }, interpretation: the sum of the wins record of all rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wins } ; 4 }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is libertad .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; libertad }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is libertad .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; libertad }, interpretation: select the rows whose player record fuzzily matches to bernie fryer . take the years for jazz record of this row . select the rows whose player record fuzzily matches to derek fisher . take the years for jazz record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; bernie fryer } ; years for jazz } ; hop { filter_eq { all_rows ; player ; derek fisher } ; years for jazz } }, interpretation: select the rows whose player record fuzzily matches to bernie fryer . take the years for jazz record of this row . select the rows whose player record fuzzily matches to derek fisher . take the years for jazz record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; bernie fryer } ; years for jazz } ; hop { filter_eq { all_rows ; player ; derek fisher } ; years for jazz } }, interpretation: select the rows whose founded record is greater than 1884 . the sum of the enrollment record of these rows is 7,500 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater { all_rows ; founded ; 1884 } ; enrollment } ; 7,500 }, interpretation: select the rows whose founded record is greater than 1884 . the sum of the enrollment record of these rows is 7,500 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater { all_rows ; founded ; 1884 } ; enrollment } ; 7,500 }, interpretation: the 3rd minimum round record of all rows is 3 . the circuit record of the row with 3rd minimum round record is wakefield park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; round ; 3 } ; 3 } ; eq { hop { nth_argmin { all_rows ; round ; 3 } ; circuit } ; wakefield park } }, interpretation: the 3rd minimum round record of all rows is 3 . the circuit record of the row with 3rd minimum round record is wakefield park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; round ; 3 } ; 3 } ; eq { hop { nth_argmin { all_rows ; round ; 3 } ; circuit } ; wakefield park } }, interpretation: for the date records of all rows , all of them fuzzily match to 30 may 1964 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 30 may 1964 }, interpretation: for the date records of all rows , all of them fuzzily match to 30 may 1964 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 30 may 1964 }, interpretation: select the row whose round ( overall ) record of all rows is 2nd minimum . the player record of this row is quentin coryatt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; round ( overall ) ; 2 } ; player } ; quentin coryatt }, interpretation: select the row whose round ( overall ) record of all rows is 2nd minimum . the player record of this row is quentin coryatt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; round ( overall ) ; 2 } ; player } ; quentin coryatt }, interpretation: select the rows whose title of movie record fuzzily matches to black tide \u300a \u9ed1\u6f6e \u300b . take the year record of this row . select the rows whose title of movie record fuzzily matches to burn ! motorbike \u300a \u71c3\u71d2\u5427 \uff01 \u6a5f\u8eca \u300b . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title of movie ; black tide \u300a \u9ed1\u6f6e \u300b } ; year } ; hop { filter_eq { all_rows ; title of movie ; burn ! motorbike \u300a \u71c3\u71d2\u5427 \uff01 \u6a5f\u8eca \u300b } ; year } }, interpretation: select the rows whose title of movie record fuzzily matches to black tide \u300a \u9ed1\u6f6e \u300b . take the year record of this row . select the rows whose title of movie record fuzzily matches to burn ! motorbike \u300a \u71c3\u71d2\u5427 \uff01 \u6a5f\u8eca \u300b . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title of movie ; black tide \u300a \u9ed1\u6f6e \u300b } ; year } ; hop { filter_eq { all_rows ; title of movie ; burn ! motorbike \u300a \u71c3\u71d2\u5427 \uff01 \u6a5f\u8eca \u300b } ; year } }, interpretation: select the rows whose car make record fuzzily matches to pontiac . there is only one such row in the table . the driver record of this unqiue row is tony stewart .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; car make ; pontiac } } ; eq { hop { filter_eq { all_rows ; car make ; pontiac } ; driver } ; tony stewart } }, interpretation: select the rows whose car make record fuzzily matches to pontiac . there is only one such row in the table . the driver record of this unqiue row is tony stewart .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; car make ; pontiac } } ; eq { hop { filter_eq { all_rows ; car make ; pontiac } ; driver } ; tony stewart } }, interpretation: the average of the points record of all rows is 325.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 325.4 }, interpretation: the average of the points record of all rows is 325.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 325.4 }, interpretation: the average of the starts record of all rows is 7.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; starts } ; 7.67 }, interpretation: the average of the starts record of all rows is 7.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; starts } ; 7.67 }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is frank w boykin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; frank w boykin }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is frank w boykin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; frank w boykin }, interpretation: for the results records of all rows , most of them fuzzily match to safe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; results ; safe }, interpretation: for the results records of all rows , most of them fuzzily match to safe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; results ; safe }, interpretation: select the rows whose country record fuzzily matches to mexico . there is only one such row in the table . the player record of this unqiue row is lorena ochoa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; mexico } } ; eq { hop { filter_eq { all_rows ; country ; mexico } ; player } ; lorena ochoa } }, interpretation: select the rows whose country record fuzzily matches to mexico . there is only one such row in the table . the player record of this unqiue row is lorena ochoa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; mexico } } ; eq { hop { filter_eq { all_rows ; country ; mexico } ; player } ; lorena ochoa } }, interpretation: select the row whose won record of all rows is maximum . the team record of this row is corinthians .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; won } ; team } ; corinthians }, interpretation: select the row whose won record of all rows is maximum . the team record of this row is corinthians .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; won } ; team } ; corinthians }, interpretation: select the rows whose date record fuzzily matches to october 15 . take the time record of this row . select the rows whose date record fuzzily matches to october 12 . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; october 15 } ; time } ; hop { filter_eq { all_rows ; date ; october 12 } ; time } }, interpretation: select the rows whose date record fuzzily matches to october 15 . take the time record of this row . select the rows whose date record fuzzily matches to october 12 . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; october 15 } ; time } ; hop { filter_eq { all_rows ; date ; october 12 } ; time } }, interpretation: for the score records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; l }, interpretation: for the score records of all rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; l }, interpretation: select the rows whose to par record fuzzily matches to - 9 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; - 9 } } ; 4 }, interpretation: select the rows whose to par record fuzzily matches to - 9 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; - 9 } } ; 4 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is los angeles raiders .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; los angeles raiders }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is los angeles raiders .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; los angeles raiders }, interpretation: select the row whose distance ( km ) record of all rows is minimum . the station record of this row is kawarada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; distance ( km ) } ; station } ; kawarada }, interpretation: select the row whose distance ( km ) record of all rows is minimum . the station record of this row is kawarada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; distance ( km ) } ; station } ; kawarada }, interpretation: select the rows whose team record fuzzily matches to juventus . take the against record of this row . select the rows whose team record fuzzily matches to corinthians . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; juventus } ; against } ; hop { filter_eq { all_rows ; team ; corinthians } ; against } }, interpretation: select the rows whose team record fuzzily matches to juventus . take the against record of this row . select the rows whose team record fuzzily matches to corinthians . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; juventus } ; against } ; hop { filter_eq { all_rows ; team ; corinthians } ; against } }, interpretation: the average of the score record of all rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 5 }, interpretation: the average of the score record of all rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 5 }, interpretation: the average of the score record of all rows is 145 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 145 }, interpretation: the average of the score record of all rows is 145 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 145 }, interpretation: select the rows whose date record fuzzily matches to 11 march 1981 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; date ; 11 march 1981 } }, interpretation: select the rows whose date record fuzzily matches to 11 march 1981 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; date ; 11 march 1981 } }, interpretation: select the rows whose venue record fuzzily matches to san francisco . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; san francisco } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to san francisco . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; san francisco } } ; 2 }, interpretation: select the rows whose team record fuzzily matches to pescarolo sport . for the laps records of these rows , most of them are greater than 300 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; team ; pescarolo sport } ; laps ; 300 }, interpretation: select the rows whose team record fuzzily matches to pescarolo sport . for the laps records of these rows , most of them are greater than 300 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; team ; pescarolo sport } ; laps ; 300 }, interpretation: for the score records of all rows , most of them are less than or equal to 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less_eq { all_rows ; score ; 3 }, interpretation: for the score records of all rows , most of them are less than or equal to 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less_eq { all_rows ; score ; 3 }, interpretation: select the rows whose nationality record fuzzily matches to jamaica . select the row whose reaction record of these rows is 2nd minimum . the name record of this row is brigitte foster - hylton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; nationality ; jamaica } ; reaction ; 2 } ; name } ; brigitte foster - hylton }, interpretation: select the rows whose nationality record fuzzily matches to jamaica . select the row whose reaction record of these rows is 2nd minimum . the name record of this row is brigitte foster - hylton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; nationality ; jamaica } ; reaction ; 2 } ; name } ; brigitte foster - hylton }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose silver record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; silver ; 0 } } ; 2 }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose silver record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; silver ; 0 } } ; 2 }, interpretation: select the rows whose singer ( s ) record fuzzily matches to the script . take the ratings record of this row . select the rows whose singer ( s ) record fuzzily matches to hurts . take the ratings record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; singer ( s ) ; the script } ; ratings } ; hop { filter_eq { all_rows ; singer ( s ) ; hurts } ; ratings } }, interpretation: select the rows whose singer ( s ) record fuzzily matches to the script . take the ratings record of this row . select the rows whose singer ( s ) record fuzzily matches to hurts . take the ratings record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; singer ( s ) ; the script } ; ratings } ; hop { filter_eq { all_rows ; singer ( s ) ; hurts } ; ratings } }, interpretation: the sum of the earnings record of all rows is 206874 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; earnings } ; 206874 }, interpretation: the sum of the earnings record of all rows is 206874 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; earnings } ; 206874 }, interpretation: select the row whose height record of all rows is maximum . the player record of this row is anthony randolph .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height } ; player } ; anthony randolph }, interpretation: select the row whose height record of all rows is maximum . the player record of this row is anthony randolph .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height } ; player } ; anthony randolph }, interpretation: select the rows whose team record fuzzily matches to minardi team usa . select the row whose laps record of these rows is maximum . the driver record of this row is robert doornbos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; team ; minardi team usa } ; laps } ; driver } ; robert doornbos }, interpretation: select the rows whose team record fuzzily matches to minardi team usa . select the row whose laps record of these rows is maximum . the driver record of this row is robert doornbos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; team ; minardi team usa } ; laps } ; driver } ; robert doornbos }, interpretation: select the rows whose incumbent record fuzzily matches to leon h gavin . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james f lind . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; leon h gavin } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james f lind } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to leon h gavin . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james f lind . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; leon h gavin } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james f lind } ; first elected } }, interpretation: select the row whose nicky record of all rows is 2nd maximum . the couple record of this row is melinda & fred .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; nicky ; 2 } ; couple } ; melinda & fred }, interpretation: select the row whose nicky record of all rows is 2nd maximum . the couple record of this row is melinda & fred .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; nicky ; 2 } ; couple } ; melinda & fred }, interpretation: select the rows whose kickoff record fuzzily matches to 6:00 pm . there is only one such row in the table . the date record of this unqiue row is sunday , april 28 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; kickoff ; 6:00 pm } } ; eq { hop { filter_eq { all_rows ; kickoff ; 6:00 pm } ; date } ; sunday , april 28 } }, interpretation: select the rows whose kickoff record fuzzily matches to 6:00 pm . there is only one such row in the table . the date record of this unqiue row is sunday , april 28 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; kickoff ; 6:00 pm } } ; eq { hop { filter_eq { all_rows ; kickoff ; 6:00 pm } ; date } ; sunday , april 28 } }, interpretation: select the rows whose place record fuzzily matches to t2 . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ; t2 } } ; 7 }, interpretation: select the rows whose place record fuzzily matches to t2 . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ; t2 } } ; 7 }, interpretation: select the rows whose first elected record fuzzily matches to 193 . among these rows , select the rows whose candidates record fuzzily matches to unopposed . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; first elected ; 193 } ; candidates ; unopposed } } ; 1 }, interpretation: select the rows whose first elected record fuzzily matches to 193 . among these rows , select the rows whose candidates record fuzzily matches to unopposed . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; first elected ; 193 } ; candidates ; unopposed } } ; 1 }, interpretation: the sum of the enrollment record of all rows is 8,600 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 8,600 }, interpretation: the sum of the enrollment record of all rows is 8,600 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 8,600 }, interpretation: select the rows whose total record is equal to 5 . there is only one such row in the table . the nation record of this unqiue row is germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; total ; 5 } } ; eq { hop { filter_eq { all_rows ; total ; 5 } ; nation } ; germany } }, interpretation: select the rows whose total record is equal to 5 . there is only one such row in the table . the nation record of this unqiue row is germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; total ; 5 } } ; eq { hop { filter_eq { all_rows ; total ; 5 } ; nation } ; germany } }, interpretation: select the rows whose home team score record is less than 15 . among these rows , select the rows whose crowd record is greater than 15000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_less { all_rows ; home team score ; 15 } ; crowd ; 15000 } } ; 3 }, interpretation: select the rows whose home team score record is less than 15 . among these rows , select the rows whose crowd record is greater than 15000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_less { all_rows ; home team score ; 15 } ; crowd ; 15000 } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to brisbane cricket ground . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; brisbane cricket ground } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to brisbane cricket ground . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; brisbane cricket ground } } ; 2 }, interpretation: select the row whose points record of all rows is maximum . the opponent record of this row is ottawa senators .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; opponent } ; ottawa senators }, interpretation: select the row whose points record of all rows is maximum . the opponent record of this row is ottawa senators .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; opponent } ; ottawa senators }, interpretation: select the rows whose name record fuzzily matches to andrew . take the date record of this row . select the rows whose name record fuzzily matches to amanda . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; andrew } ; date } ; hop { filter_eq { all_rows ; name ; amanda } ; date } }, interpretation: select the rows whose name record fuzzily matches to andrew . take the date record of this row . select the rows whose name record fuzzily matches to amanda . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; andrew } ; date } ; hop { filter_eq { all_rows ; name ; amanda } ; date } }, interpretation: select the row whose year ( s ) won record of all rows is maximum . the player record of this row is tiger woods .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year ( s ) won } ; player } ; tiger woods }, interpretation: select the row whose year ( s ) won record of all rows is maximum . the player record of this row is tiger woods .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year ( s ) won } ; player } ; tiger woods }, interpretation: the sum of the wickets record of all rows is 90 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wickets } ; 90 }, interpretation: the sum of the wickets record of all rows is 90 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wickets } ; 90 }, interpretation: the average of the lost record of all rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 9 }, interpretation: the average of the lost record of all rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 9 }, interpretation: for the country records of all rows , most of them fuzzily match to czechoslovakia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; czechoslovakia }, interpretation: for the country records of all rows , most of them fuzzily match to czechoslovakia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; czechoslovakia }, interpretation: select the rows whose party record fuzzily matches to republican . among these rows , select the rows whose result record fuzzily matches to lost . there is only one such row in the table . the incumbent record of this unqiue row is dan crane .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; lost } } ; eq { hop { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; lost } ; incumbent } ; dan crane } }, interpretation: select the rows whose party record fuzzily matches to republican . among these rows , select the rows whose result record fuzzily matches to lost . there is only one such row in the table . the incumbent record of this unqiue row is dan crane .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; lost } } ; eq { hop { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; lost } ; incumbent } ; dan crane } }, interpretation: select the row whose frequency record of all rows is maximum . the format record of this row is classic rock / sports radio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency } ; format } ; classic rock / sports radio }, interpretation: select the row whose frequency record of all rows is maximum . the format record of this row is classic rock / sports radio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency } ; format } ; classic rock / sports radio }, interpretation: for the country records of all rows , most of them fuzzily match to us .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; us }, interpretation: for the country records of all rows , most of them fuzzily match to us .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; us }, interpretation: select the rows whose player record fuzzily matches to jarron collins . take the years for jazz record of this row . select the rows whose player record fuzzily matches to dell curry . take the years for jazz record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; jarron collins } ; years for jazz } ; hop { filter_eq { all_rows ; player ; dell curry } ; years for jazz } }, interpretation: select the rows whose player record fuzzily matches to jarron collins . take the years for jazz record of this row . select the rows whose player record fuzzily matches to dell curry . take the years for jazz record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; jarron collins } ; years for jazz } ; hop { filter_eq { all_rows ; player ; dell curry } ; years for jazz } }, interpretation: the average of the apparent magnitude record of all rows is 12.01 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; apparent magnitude } ; 12.01 }, interpretation: the average of the apparent magnitude record of all rows is 12.01 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; apparent magnitude } ; 12.01 }, interpretation: select the rows whose erp w record fuzzily matches to 10 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; erp w ; 10 } } ; 2 }, interpretation: select the rows whose erp w record fuzzily matches to 10 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; erp w ; 10 } } ; 2 }, interpretation: select the row whose number of electorates ( 2003 ) record of all rows is maximum . the name record of this row is niwari .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number of electorates ( 2003 ) } ; name } ; niwari }, interpretation: select the row whose number of electorates ( 2003 ) record of all rows is maximum . the name record of this row is niwari .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number of electorates ( 2003 ) } ; name } ; niwari }, interpretation: select the rows whose winner record fuzzily matches to brad jones . the minimum date record of these rows is 26 - 27 apr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; winner ; brad jones } ; date } ; 26 - 27 apr }, interpretation: select the rows whose winner record fuzzily matches to brad jones . the minimum date record of these rows is 26 - 27 apr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; winner ; brad jones } ; date } ; 26 - 27 apr }, interpretation: select the row whose winning score record of all rows is 2nd maximum . the championship record of this row is women 's western open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winning score ; 2 } ; championship } ; women 's western open }, interpretation: select the row whose winning score record of all rows is 2nd maximum . the championship record of this row is women 's western open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winning score ; 2 } ; championship } ; women 's western open }, interpretation: select the rows whose seasons record is equal to 4 . there is only one such row in the table . the country record of this unqiue row is south korea .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; seasons ; 4 } } ; eq { hop { filter_eq { all_rows ; seasons ; 4 } ; country } ; south korea } }, interpretation: select the rows whose seasons record is equal to 4 . there is only one such row in the table . the country record of this unqiue row is south korea .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; seasons ; 4 } } ; eq { hop { filter_eq { all_rows ; seasons ; 4 } ; country } ; south korea } }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 9 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 9 }, interpretation: select the rows whose format record fuzzily matches to cd . the 1st minimum date record of these rows is september 10 , 1986 . the label record of the row with 1st minimum date record is alfa records .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { filter_eq { all_rows ; format ; cd } ; date ; 1 } ; september 10 , 1986 } ; eq { hop { nth_argmin { filter_eq { all_rows ; format ; cd } ; date ; 1 } ; label } ; alfa records } }, interpretation: select the rows whose format record fuzzily matches to cd . the 1st minimum date record of these rows is september 10 , 1986 . the label record of the row with 1st minimum date record is alfa records .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { filter_eq { all_rows ; format ; cd } ; date ; 1 } ; september 10 , 1986 } ; eq { hop { nth_argmin { filter_eq { all_rows ; format ; cd } ; date ; 1 } ; label } ; alfa records } }, interpretation: select the row whose total record of all rows is maximum . the name record of this row is giuseppe meazza .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; name } ; giuseppe meazza }, interpretation: select the row whose total record of all rows is maximum . the name record of this row is giuseppe meazza .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; name } ; giuseppe meazza }, interpretation: for the result records of all rows , most of them fuzzily match to safe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; safe }, interpretation: for the result records of all rows , most of them fuzzily match to safe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; safe }, interpretation: select the row whose founded record of all rows is minimum . the team record of this row is adelaide galaxy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; founded } ; team } ; adelaide galaxy }, interpretation: select the row whose founded record of all rows is minimum . the team record of this row is adelaide galaxy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; founded } ; team } ; adelaide galaxy }, interpretation: for the population ( 2013 ) records of all rows , most of them are less than 10000000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; population ( 2013 ) ; 10000000 }, interpretation: for the population ( 2013 ) records of all rows , most of them are less than 10000000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; population ( 2013 ) ; 10000000 }, interpretation: the sum of the total produced record of all rows is 229 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total produced } ; 229 }, interpretation: the sum of the total produced record of all rows is 229 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total produced } ; 229 }, interpretation: select the row whose year record of all rows is 2nd maximum . the host record of this row is marty reid .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; host } ; marty reid }, interpretation: select the row whose year record of all rows is 2nd maximum . the host record of this row is marty reid .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; host } ; marty reid }, interpretation: for the results records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; results ; re - elected }, interpretation: for the results records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; results ; re - elected }, interpretation: for the round records of all rows , most of them are equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; round ; 1 }, interpretation: select the rows whose draw record is greater than 0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; draw ; 0 } } ; 3 }, interpretation: select the rows whose draw record is greater than 0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; draw ; 0 } } ; 3 }, interpretation: select the row whose popular votes record of all rows is maximum . the candidate record of this row is colleen bonniwell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; popular votes } ; candidate } ; colleen bonniwell }, interpretation: select the row whose popular votes record of all rows is maximum . the candidate record of this row is colleen bonniwell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; popular votes } ; candidate } ; colleen bonniwell }, interpretation: select the rows whose time / retired record fuzzily matches to engine . there is only one such row in the table . the driver record of this unqiue row is jo bonnier .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; engine } } ; eq { hop { filter_eq { all_rows ; time / retired ; engine } ; driver } ; jo bonnier } }, interpretation: select the rows whose time / retired record fuzzily matches to engine . there is only one such row in the table . the driver record of this unqiue row is jo bonnier .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; engine } } ; eq { hop { filter_eq { all_rows ; time / retired ; engine } ; driver } ; jo bonnier } }, interpretation: select the rows whose venue record fuzzily matches to dubai . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; dubai } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to dubai . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; dubai } } ; 2 }, interpretation: select the rows whose ceased to be duchess record fuzzily matches to husband 's execution . there is only one such row in the table . the name record of this unqiue row is louise marie ad\u00e9la\u00efde de bourbon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; ceased to be duchess ; husband 's execution } } ; eq { hop { filter_eq { all_rows ; ceased to be duchess ; husband 's execution } ; name } ; louise marie ad\u00e9la\u00efde de bourbon } }, interpretation: select the rows whose ceased to be duchess record fuzzily matches to husband 's execution . there is only one such row in the table . the name record of this unqiue row is louise marie ad\u00e9la\u00efde de bourbon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; ceased to be duchess ; husband 's execution } } ; eq { hop { filter_eq { all_rows ; ceased to be duchess ; husband 's execution } ; name } ; louise marie ad\u00e9la\u00efde de bourbon } }, interpretation: select the rows whose label record fuzzily matches to sony music direct . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; label ; sony music direct } }, interpretation: select the rows whose label record fuzzily matches to sony music direct . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; label ; sony music direct } }, interpretation: for the result records of all rows , most of them fuzzily match to safe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; safe }, interpretation: the average of the wickets record of all rows is 33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wickets } ; 33 }, interpretation: the average of the wickets record of all rows is 33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wickets } ; 33 }, interpretation: select the row whose evening gown record of all rows is minimum . the state record of this row is pennsylvania .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; evening gown } ; state } ; pennsylvania }, interpretation: select the row whose evening gown record of all rows is minimum . the state record of this row is pennsylvania .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; evening gown } ; state } ; pennsylvania }, interpretation: select the rows whose venue record fuzzily matches to amman . among these rows , select the rows whose result record fuzzily matches to win . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; venue ; amman } ; result ; win } } ; 6 }, interpretation: select the rows whose venue record fuzzily matches to amman . among these rows , select the rows whose result record fuzzily matches to win . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; venue ; amman } ; result ; win } } ; 6 }, interpretation: select the rows whose interview subject record fuzzily matches to tobey maguire . take the date record of this row . select the rows whose interview subject record fuzzily matches to mike piazza . take the date record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; interview subject ; tobey maguire } ; date } ; hop { filter_eq { all_rows ; interview subject ; mike piazza } ; date } }, interpretation: select the rows whose interview subject record fuzzily matches to tobey maguire . take the date record of this row . select the rows whose interview subject record fuzzily matches to mike piazza . take the date record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; interview subject ; tobey maguire } ; date } ; hop { filter_eq { all_rows ; interview subject ; mike piazza } ; date } }, interpretation: select the rows whose wickets record fuzzily matches to none . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wickets ; none } } ; 5 }, interpretation: select the rows whose wickets record fuzzily matches to none . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wickets ; none } } ; 5 }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is canada ( can ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; canada ( can ) }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is canada ( can ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; canada ( can ) }, interpretation: select the rows whose team 1 record fuzzily matches to as saint - \u00e9tienne ( d1 ) . take the score record of this row . select the rows whose team 1 record fuzzily matches to girondins de bordeaux ( d1 ) . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 1 ; as saint - \u00e9tienne ( d1 ) } ; score } ; hop { filter_eq { all_rows ; team 1 ; girondins de bordeaux ( d1 ) } ; score } }, interpretation: select the rows whose team 1 record fuzzily matches to as saint - \u00e9tienne ( d1 ) . take the score record of this row . select the rows whose team 1 record fuzzily matches to girondins de bordeaux ( d1 ) . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 1 ; as saint - \u00e9tienne ( d1 ) } ; score } ; hop { filter_eq { all_rows ; team 1 ; girondins de bordeaux ( d1 ) } ; score } }, interpretation: select the rows whose date record fuzzily matches to 20 nov 2005 . take the margin of victory record of this row . select the rows whose date record fuzzily matches to 10 sep 2006 . take the margin of victory record of this row . the first record is 2 strokes larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; 20 nov 2005 } ; margin of victory } ; hop { filter_eq { all_rows ; date ; 10 sep 2006 } ; margin of victory } } ; 2 strokes }, interpretation: select the rows whose date record fuzzily matches to 20 nov 2005 . take the margin of victory record of this row . select the rows whose date record fuzzily matches to 10 sep 2006 . take the margin of victory record of this row . the first record is 2 strokes larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; 20 nov 2005 } ; margin of victory } ; hop { filter_eq { all_rows ; date ; 10 sep 2006 } ; margin of victory } } ; 2 strokes }, interpretation: for the date records of all rows , all of them fuzzily match to 19 april 1975 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 19 april 1975 }, interpretation: for the date records of all rows , all of them fuzzily match to 19 april 1975 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 19 april 1975 }, interpretation: the average of the points ( pts ) record of all rows is 24.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points ( pts ) } ; 24.6 }, interpretation: the average of the points ( pts ) record of all rows is 24.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points ( pts ) } ; 24.6 }, interpretation: for the decision records of all rows , most of them fuzzily match to theodore .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; decision ; theodore }, interpretation: for the decision records of all rows , most of them fuzzily match to theodore .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; decision ; theodore }, interpretation: select the rows whose tournament record fuzzily matches to tunis , tunisia . take the date record of this row . select the rows whose tournament record fuzzily matches to rabat , morocco . take the date record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; tournament ; tunis , tunisia } ; date } ; hop { filter_eq { all_rows ; tournament ; rabat , morocco } ; date } } ; -7 days }, interpretation: select the rows whose tournament record fuzzily matches to tunis , tunisia . take the date record of this row . select the rows whose tournament record fuzzily matches to rabat , morocco . take the date record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; tournament ; tunis , tunisia } ; date } ; hop { filter_eq { all_rows ; tournament ; rabat , morocco } ; date } } ; -7 days }, interpretation: for the winner records of all rows , most of them fuzzily match to aus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winner ; aus }, interpretation: for the winner records of all rows , most of them fuzzily match to aus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winner ; aus }, interpretation: select the rows whose rank record fuzzily matches to 21st . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 21st } } ; 3 }, interpretation: select the rows whose rank record fuzzily matches to 21st . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 21st } } ; 3 }, interpretation: the average of the gold record of all rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 1 }, interpretation: the average of the gold record of all rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 1 }, interpretation: select the rows whose result record does not match to re-elected . there is only one such row in the table . the incumbent record of this unqiue row is iris faircloth blitch .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; result ; re-elected } } ; eq { hop { filter_not_eq { all_rows ; result ; re-elected } ; incumbent } ; iris faircloth blitch } }, interpretation: select the rows whose result record does not match to re-elected . there is only one such row in the table . the incumbent record of this unqiue row is iris faircloth blitch .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; result ; re-elected } } ; eq { hop { filter_not_eq { all_rows ; result ; re-elected } ; incumbent } ; iris faircloth blitch } }, interpretation: select the rows whose technology record fuzzily matches to rmi . the maximum date record of these rows is september 16 , 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; technology ; rmi } ; date } ; september 16 , 2009 }, interpretation: select the rows whose technology record fuzzily matches to rmi . the maximum date record of these rows is september 16 , 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; technology ; rmi } ; date } ; september 16 , 2009 }, interpretation: select the rows whose year record fuzzily matches to 1991 . take the finish record of this row . select the rows whose year record fuzzily matches to 1993 . take the finish record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 1991 } ; finish } ; hop { filter_eq { all_rows ; year ; 1993 } ; finish } }, interpretation: select the rows whose year record fuzzily matches to 1991 . take the finish record of this row . select the rows whose year record fuzzily matches to 1993 . take the finish record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 1991 } ; finish } ; hop { filter_eq { all_rows ; year ; 1993 } ; finish } }, interpretation: select the rows whose year of publication record fuzzily matches to 2007 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year of publication ; 2007 } } ; 4 }, interpretation: select the rows whose year of publication record fuzzily matches to 2007 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year of publication ; 2007 } } ; 4 }, interpretation: select the rows whose country record fuzzily matches to norway . there is only one such row in the table . the name record of this unqiue row is h\u00e5logaland bridge .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; norway } } ; eq { hop { filter_eq { all_rows ; country ; norway } ; name } ; h\u00e5logaland bridge } }, interpretation: select the rows whose country record fuzzily matches to norway . there is only one such row in the table . the name record of this unqiue row is h\u00e5logaland bridge .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; norway } } ; eq { hop { filter_eq { all_rows ; country ; norway } ; name } ; h\u00e5logaland bridge } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is april 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; april 22 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is april 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; april 22 }, interpretation: for the date records of all rows , all of them fuzzily match to december .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; december }, interpretation: for the date records of all rows , all of them fuzzily match to december .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; december }, interpretation: select the rows whose td 's record is greater than or equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; td 's ; 1 } } ; 2 }, interpretation: select the rows whose td 's record is greater than or equal to 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; td 's ; 1 } } ; 2 }, interpretation: select the row whose the championship record of all rows is maximum . the player record of this row is becchio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; the championship } ; player } ; becchio }, interpretation: select the row whose the championship record of all rows is maximum . the player record of this row is becchio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; the championship } ; player } ; becchio }, interpretation: the 3rd maximum silver record of all rows is 42 . the rank record of the row with 3rd maximum silver record is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; silver ; 3 } ; 42 } ; eq { hop { nth_argmax { all_rows ; silver ; 3 } ; rank } ; 2 } }, interpretation: the 3rd maximum silver record of all rows is 42 . the rank record of the row with 3rd maximum silver record is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; silver ; 3 } ; 42 } ; eq { hop { nth_argmax { all_rows ; silver ; 3 } ; rank } ; 2 } }, interpretation: select the rows whose city of license record fuzzily matches to syracuse , ny . there is only one such row in the table . the call sign record of this unqiue row is wmhr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; city of license ; syracuse , ny } } ; eq { hop { filter_eq { all_rows ; city of license ; syracuse , ny } ; call sign } ; wmhr } }, interpretation: select the rows whose city of license record fuzzily matches to syracuse , ny . there is only one such row in the table . the call sign record of this unqiue row is wmhr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; city of license ; syracuse , ny } } ; eq { hop { filter_eq { all_rows ; city of license ; syracuse , ny } ; call sign } ; wmhr } }, interpretation: the average of the roll record of all rows is 99.61 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; roll } ; 99.61 }, interpretation: the average of the roll record of all rows is 99.61 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; roll } ; 99.61 }, interpretation: for the original channel records of all rows , most of them fuzzily match to itv .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; original channel ; itv }, interpretation: for the original channel records of all rows , most of them fuzzily match to itv .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; original channel ; itv }, interpretation: the average of the attendance record of all rows is 743 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 743 }, interpretation: the average of the attendance record of all rows is 743 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 743 }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is netherlands ( ned ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; netherlands ( ned ) }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is netherlands ( ned ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; netherlands ( ned ) }, interpretation: the average of the score record of all rows is 1.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 1.67 }, interpretation: the average of the score record of all rows is 1.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 1.67 }, interpretation: select the rows whose lead record is greater than or equal to 10 % . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; lead ; 10 % } } ; 3 }, interpretation: select the rows whose lead record is greater than or equal to 10 % . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; lead ; 10 % } } ; 3 }, interpretation: select the row whose money record of all rows is 2nd maximum . the player record of this row is tom watson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; money ; 2 } ; player } ; tom watson }, interpretation: select the row whose money record of all rows is 2nd maximum . the player record of this row is tom watson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; money ; 2 } ; player } ; tom watson }, interpretation: for the political party records of all rows , most of them fuzzily match to labour party .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; political party ; labour party }, interpretation: for the political party records of all rows , most of them fuzzily match to labour party .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; political party ; labour party }, interpretation: select the rows whose points record is greater than 41 . there is only one such row in the table . the artist record of this unqiue row is extra nena .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; points ; 41 } } ; eq { hop { filter_greater { all_rows ; points ; 41 } ; artist } ; extra nena } }, interpretation: select the rows whose points record is greater than 41 . there is only one such row in the table . the artist record of this unqiue row is extra nena .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; points ; 41 } } ; eq { hop { filter_greater { all_rows ; points ; 41 } ; artist } ; extra nena } }, interpretation: select the rows whose position record fuzzily matches to left wing . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; left wing } } ; 4 }, interpretation: select the rows whose position record fuzzily matches to left wing . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; left wing } } ; 4 }, interpretation: select the rows whose acquisition via record fuzzily matches to rookie draft . there is only one such row in the table . the name record of this unqiue row is reynel hugnatan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; reynel hugnatan } }, interpretation: select the rows whose acquisition via record fuzzily matches to rookie draft . there is only one such row in the table . the name record of this unqiue row is reynel hugnatan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; acquisition via ; rookie draft } } ; eq { hop { filter_eq { all_rows ; acquisition via ; rookie draft } ; name } ; reynel hugnatan } }, interpretation: select the rows whose date record fuzzily matches to december . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; december } ; result ; l }, interpretation: select the rows whose date record fuzzily matches to december . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; december } ; result ; l }, interpretation: the sum of the apps record of all rows is 106 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; apps } ; 106 }, interpretation: the sum of the apps record of all rows is 106 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; apps } ; 106 }, interpretation: the average of the mark record of all rows is 47.05 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; mark } ; 47.05 }, interpretation: the average of the mark record of all rows is 47.05 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; mark } ; 47.05 }, interpretation: select the rows whose wins record is equal to 6 . there is only one such row in the table . the team record of this unqiue row is montreal victorias .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 6 } } ; eq { hop { filter_eq { all_rows ; wins ; 6 } ; team } ; montreal victorias } }, interpretation: select the rows whose wins record is equal to 6 . there is only one such row in the table . the team record of this unqiue row is montreal victorias .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 6 } } ; eq { hop { filter_eq { all_rows ; wins ; 6 } ; team } ; montreal victorias } }, interpretation: select the row whose attendance record of all rows is maximum . the tie no record of this row is 51 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; tie no } ; 51 }, interpretation: select the row whose attendance record of all rows is maximum . the tie no record of this row is 51 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; tie no } ; 51 }, interpretation: the average of the area ( km square ) 2011 record of all rows is 535.74 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) 2011 } ; 535.74 }, interpretation: the average of the area ( km square ) 2011 record of all rows is 535.74 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) 2011 } ; 535.74 }, interpretation: select the rows whose pl gp record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pl gp ; 0 } } ; 3 }, interpretation: select the rows whose pl gp record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pl gp ; 0 } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to - 0 . there is only one such row in the table . the opponent record of this unqiue row is san diego chargers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; - 0 } } ; eq { hop { filter_eq { all_rows ; result ; - 0 } ; opponent } ; san diego chargers } }, interpretation: select the rows whose result record fuzzily matches to - 0 . there is only one such row in the table . the opponent record of this unqiue row is san diego chargers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; - 0 } } ; eq { hop { filter_eq { all_rows ; result ; - 0 } ; opponent } ; san diego chargers } }, interpretation: select the rows whose crowd record is greater than 10000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; crowd ; 10000 } } ; 2 }, interpretation: select the rows whose crowd record is greater than 10000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; crowd ; 10000 } } ; 2 }, interpretation: select the row whose points record of all rows is maximum . the points record of this row is 227 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; points } ; 227 }, interpretation: select the row whose points record of all rows is maximum . the points record of this row is 227 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; points } ; 227 }, interpretation: select the rows whose goals record is greater than 120 . there is only one such row in the table . the club record of this unqiue row is real madrid .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; goals ; 120 } } ; eq { hop { filter_greater { all_rows ; goals ; 120 } ; club } ; real madrid } }, interpretation: select the rows whose goals record is greater than 120 . there is only one such row in the table . the club record of this unqiue row is real madrid .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; goals ; 120 } } ; eq { hop { filter_greater { all_rows ; goals ; 120 } ; club } ; real madrid } }, interpretation: select the rows whose 2011 record fuzzily matches to qf . there is only one such row in the table . the tournament record of this unqiue row is french open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2011 ; qf } } ; eq { hop { filter_eq { all_rows ; 2011 ; qf } ; tournament } ; french open } }, interpretation: select the rows whose 2011 record fuzzily matches to qf . there is only one such row in the table . the tournament record of this unqiue row is french open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2011 ; qf } } ; eq { hop { filter_eq { all_rows ; 2011 ; qf } ; tournament } ; french open } }, interpretation: select the rows whose wins record is equal to 1 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wins ; 1 } } ; 1 }, interpretation: select the rows whose wins record is equal to 1 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wins ; 1 } } ; 1 }, interpretation: select the rows whose series record fuzzily matches to 10 - 13 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; series ; 10 - 13 } } ; 2 }, interpretation: select the rows whose series record fuzzily matches to 10 - 13 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; series ; 10 - 13 } } ; 2 }, interpretation: for the platform ( s ) records of all rows , most of them fuzzily match to windows .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ( s ) ; windows }, interpretation: for the platform ( s ) records of all rows , most of them fuzzily match to windows .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ( s ) ; windows }, interpretation: select the rows whose status record fuzzily matches to re - elected . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; re - elected } } ; 10 }, interpretation: select the rows whose status record fuzzily matches to re - elected . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; re - elected } } ; 10 }, interpretation: select the row whose crowd record of all rows is 1st maximum . the date record of this row is 12 august 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; date } ; 12 august 2007 }, interpretation: select the row whose crowd record of all rows is 1st maximum . the date record of this row is 12 august 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; date } ; 12 august 2007 }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose gold record fuzzily matches to satu pusila . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; satu pusila } } ; 3 }, interpretation: select the rows whose gold record fuzzily matches to satu pusila . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; satu pusila } } ; 3 }, interpretation: select the row whose original airdate record of all rows is maximum . the title record of this row is silent night .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; original airdate } ; title } ; silent night }, interpretation: select the row whose original airdate record of all rows is maximum . the title record of this row is silent night .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; original airdate } ; title } ; silent night }, interpretation: select the rows whose writer record fuzzily matches to sally malcolm . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; writer ; sally malcolm } } ; 4 }, interpretation: select the rows whose writer record fuzzily matches to sally malcolm . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; writer ; sally malcolm } } ; 4 }, interpretation: select the row whose points record of all rows is 2nd maximum . the name record of this row is angelika buck / erich buck .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; name } ; angelika buck / erich buck }, interpretation: select the row whose points record of all rows is 2nd maximum . the name record of this row is angelika buck / erich buck .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; name } ; angelika buck / erich buck }, interpretation: for the tyres records of all rows , most of them fuzzily match to g .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tyres ; g }, interpretation: for the tyres records of all rows , most of them fuzzily match to g .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tyres ; g }, interpretation: select the row whose mean free path record of all rows is 2nd maximum . the vacuum range record of this row is ultra high vacuum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; mean free path ; 2 } ; vacuum range } ; ultra high vacuum }, interpretation: select the row whose mean free path record of all rows is 2nd maximum . the vacuum range record of this row is ultra high vacuum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; mean free path ; 2 } ; vacuum range } ; ultra high vacuum }, interpretation: select the row whose first broadcast record of all rows is 2nd maximum . the episode record of this row is 3x07 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first broadcast ; 2 } ; episode } ; 3x07 }, interpretation: select the row whose first broadcast record of all rows is 2nd maximum . the episode record of this row is 3x07 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first broadcast ; 2 } ; episode } ; 3x07 }, interpretation: select the rows whose date record fuzzily matches to december . there is only one such row in the table . the region record of this unqiue row is japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; december } } ; eq { hop { filter_eq { all_rows ; date ; december } ; region } ; japan } }, interpretation: select the rows whose date record fuzzily matches to december . there is only one such row in the table . the region record of this unqiue row is japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; december } } ; eq { hop { filter_eq { all_rows ; date ; december } ; region } ; japan } }, interpretation: select the rows whose ends won record is greater than 50 . among these rows , select the rows whose ends lost record is less than 50 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; ends won ; 50 } ; ends lost ; 50 } } ; 2 }, interpretation: select the rows whose ends won record is greater than 50 . among these rows , select the rows whose ends lost record is less than 50 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; ends won ; 50 } ; ends lost ; 50 } } ; 2 }, interpretation: select the row whose pick record of all rows is 1st minimum . the nationality record of this row is canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 1 } ; nationality } ; canada }, interpretation: select the row whose pick record of all rows is 1st minimum . the nationality record of this row is canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; pick ; 1 } ; nationality } ; canada }, interpretation: select the rows whose industry record fuzzily matches to oil and gas . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; industry ; oil and gas } } ; 4 }, interpretation: select the rows whose industry record fuzzily matches to oil and gas . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; industry ; oil and gas } } ; 4 }, interpretation: select the rows whose wins record is equal to 18 . there is only one such row in the table . the driver record of this unqiue row is dani\u00ebl willemsen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 18 } } ; eq { hop { filter_eq { all_rows ; wins ; 18 } ; driver } ; dani\u00ebl willemsen } }, interpretation: select the rows whose wins record is equal to 18 . there is only one such row in the table . the driver record of this unqiue row is dani\u00ebl willemsen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 18 } } ; eq { hop { filter_eq { all_rows ; wins ; 18 } ; driver } ; dani\u00ebl willemsen } }, interpretation: select the row whose total record of all rows is maximum . the nbr class record of this row is 396 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nbr class } ; 396 }, interpretation: select the row whose total record of all rows is maximum . the nbr class record of this row is 396 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nbr class } ; 396 }, interpretation: select the rows whose opponent record fuzzily matches to troy nelson . take the round record of this row . select the rows whose opponent record fuzzily matches to shelton barnes . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; troy nelson } ; round } ; hop { filter_eq { all_rows ; opponent ; shelton barnes } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to troy nelson . take the round record of this row . select the rows whose opponent record fuzzily matches to shelton barnes . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; troy nelson } ; round } ; hop { filter_eq { all_rows ; opponent ; shelton barnes } ; round } }, interpretation: select the rows whose erp w record fuzzily matches to 10 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; erp w ; 10 } } ; 5 }, interpretation: select the rows whose erp w record fuzzily matches to 10 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; erp w ; 10 } } ; 5 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the home record of this row is pistons .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; home } ; pistons }, interpretation: select the row whose attendance record of all rows is 1st maximum . the home record of this row is pistons .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; home } ; pistons }, interpretation: the sum of the gold record of all rows is 36 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 36 }, interpretation: the sum of the gold record of all rows is 36 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 36 }, interpretation: select the rows whose year record fuzzily matches to 2004 . take the laps record of this row . select the rows whose year record fuzzily matches to 2007 . take the laps record of this row . the first record is greater than the second record . the laps record of the first row is 200 . the laps record of the second row is 62 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; year ; 2004 } ; laps } ; hop { filter_eq { all_rows ; year ; 2007 } ; laps } } ; and { eq { hop { filter_eq { all_rows ; year ; 2004 } ; laps } ; 200 } ; eq { hop { filter_eq { all_rows ; year ; 2007 } ; laps } ; 62 } } }, interpretation: select the rows whose year record fuzzily matches to 2004 . take the laps record of this row . select the rows whose year record fuzzily matches to 2007 . take the laps record of this row . the first record is greater than the second record . the laps record of the first row is 200 . the laps record of the second row is 62 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; year ; 2004 } ; laps } ; hop { filter_eq { all_rows ; year ; 2007 } ; laps } } ; and { eq { hop { filter_eq { all_rows ; year ; 2004 } ; laps } ; 200 } ; eq { hop { filter_eq { all_rows ; year ; 2007 } ; laps } ; 62 } } }, interpretation: select the rows whose original air date record fuzzily matches to march . there is only one such row in the table . the episode record of this unqiue row is 7 . the title record of this unqiue row is episode 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ; march } } ; and { eq { hop { filter_eq { all_rows ; original air date ; march } ; episode } ; 7 } ; eq { hop { filter_eq { all_rows ; original air date ; march } ; title } ; episode 7 } } }, interpretation: select the rows whose original air date record fuzzily matches to march . there is only one such row in the table . the episode record of this unqiue row is 7 . the title record of this unqiue row is episode 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ; march } } ; and { eq { hop { filter_eq { all_rows ; original air date ; march } ; episode } ; 7 } ; eq { hop { filter_eq { all_rows ; original air date ; march } ; title } ; episode 7 } } }, interpretation: select the rows whose away team score record is less than 10 . select the row whose crowd record of these rows is 2nd maximum . the venue record of this row is victoria park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_less { all_rows ; away team score ; 10 } ; crowd ; 2 } ; venue } ; victoria park }, interpretation: select the rows whose away team score record is less than 10 . select the row whose crowd record of these rows is 2nd maximum . the venue record of this row is victoria park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_less { all_rows ; away team score ; 10 } ; crowd ; 2 } ; venue } ; victoria park }, interpretation: select the rows whose height record is less than 6-0 . there is only one such row in the table . the player record of this unqiue row is myles mack .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; height ; 6-0 } } ; eq { hop { filter_less { all_rows ; height ; 6-0 } ; player } ; myles mack } }, interpretation: select the rows whose height record is less than 6-0 . there is only one such row in the table . the player record of this unqiue row is myles mack .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; height ; 6-0 } } ; eq { hop { filter_less { all_rows ; height ; 6-0 } ; player } ; myles mack } }, interpretation: select the rows whose position record fuzzily matches to defensive back . there is only one such row in the table . the player record of this unqiue row is george donnelly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; defensive back } } ; eq { hop { filter_eq { all_rows ; position ; defensive back } ; player } ; george donnelly } }, interpretation: select the rows whose position record fuzzily matches to defensive back . there is only one such row in the table . the player record of this unqiue row is george donnelly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; defensive back } } ; eq { hop { filter_eq { all_rows ; position ; defensive back } ; player } ; george donnelly } }, interpretation: select the rows whose location record fuzzily matches to hermanos rodriguez . among these rows , select the rows whose constructor record fuzzily matches to williams - renault . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; hermanos rodriguez } ; constructor ; williams - renault } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to hermanos rodriguez . among these rows , select the rows whose constructor record fuzzily matches to williams - renault . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location ; hermanos rodriguez } ; constructor ; williams - renault } } ; 2 }, interpretation: select the row whose year record of all rows is 2nd maximum . the album title record of this row is realism .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; album title } ; realism }, interpretation: select the row whose year record of all rows is 2nd maximum . the album title record of this row is realism .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year ; 2 } ; album title } ; realism }, interpretation: select the rows whose player record fuzzily matches to jared borgetti . take the period record of this row . select the rows whose player record fuzzily matches to rafael figueroa . take the period record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; jared borgetti } ; period } ; hop { filter_eq { all_rows ; player ; rafael figueroa } ; period } }, interpretation: select the rows whose player record fuzzily matches to jared borgetti . take the period record of this row . select the rows whose player record fuzzily matches to rafael figueroa . take the period record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; jared borgetti } ; period } ; hop { filter_eq { all_rows ; player ; rafael figueroa } ; period } }, interpretation: for the city records of all rows , most of them fuzzily match to chile .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; city ; chile }, interpretation: for the city records of all rows , most of them fuzzily match to chile .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; city ; chile }, interpretation: select the rows whose tournament record fuzzily matches to australian open . take the 2011 record of this row . select the rows whose tournament record fuzzily matches to australian open . take the 2011 record of this row . the first record fuzzily matches to the second record . the 2011 record of the first row is qf . the 2011 record of the second row is qf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; tournament ; australian open } ; 2011 } ; hop { filter_eq { all_rows ; tournament ; australian open } ; 2011 } } ; and { eq { hop { filter_eq { all_rows ; tournament ; australian open } ; 2011 } ; qf } ; eq { hop { filter_eq { all_rows ; tournament ; australian open } ; 2011 } ; qf } } }, interpretation: select the rows whose tournament record fuzzily matches to australian open . take the 2011 record of this row . select the rows whose tournament record fuzzily matches to australian open . take the 2011 record of this row . the first record fuzzily matches to the second record . the 2011 record of the first row is qf . the 2011 record of the second row is qf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; tournament ; australian open } ; 2011 } ; hop { filter_eq { all_rows ; tournament ; australian open } ; 2011 } } ; and { eq { hop { filter_eq { all_rows ; tournament ; australian open } ; 2011 } ; qf } ; eq { hop { filter_eq { all_rows ; tournament ; australian open } ; 2011 } ; qf } } }, interpretation: for the signed records of all rows , all of them fuzzily match to no .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; signed ; no }, interpretation: for the signed records of all rows , all of them fuzzily match to no .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; signed ; no }, interpretation: select the row whose central rate record of all rows is maximum . the currency record of this row is danish krone .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; central rate } ; currency } ; danish krone }, interpretation: select the row whose central rate record of all rows is maximum . the currency record of this row is danish krone .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; central rate } ; currency } ; danish krone }, interpretation: select the rows whose playoffs record fuzzily matches to did not qualify . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; playoffs ; did not qualify } } ; 2 }, interpretation: select the rows whose playoffs record fuzzily matches to did not qualify . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; playoffs ; did not qualify } } ; 2 }, interpretation: select the rows whose internet plan record fuzzily matches to internet 100 . take the upstream record of this row . select the rows whose internet plan record fuzzily matches to internet 30 . take the upstream record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; internet plan ; internet 100 } ; upstream } ; hop { filter_eq { all_rows ; internet plan ; internet 30 } ; upstream } }, interpretation: select the rows whose internet plan record fuzzily matches to internet 100 . take the upstream record of this row . select the rows whose internet plan record fuzzily matches to internet 30 . take the upstream record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; internet plan ; internet 100 } ; upstream } ; hop { filter_eq { all_rows ; internet plan ; internet 30 } ; upstream } }, interpretation: select the rows whose wins record is greater than or equal to 5 . for the last runners - up records of these rows , most of them are greater than or equal to 1987 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { filter_greater_eq { all_rows ; wins ; 5 } ; last runners - up ; 1987 }, interpretation: select the rows whose wins record is greater than or equal to 5 . for the last runners - up records of these rows , most of them are greater than or equal to 1987 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { filter_greater_eq { all_rows ; wins ; 5 } ; last runners - up ; 1987 }, interpretation: select the row whose foundation record of all rows is maximum . the organization record of this row is radiotelevisi\u00f3n del principado de asturias ( rtpa ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; foundation } ; organization } ; radiotelevisi\u00f3n del principado de asturias ( rtpa ) }, interpretation: select the row whose foundation record of all rows is maximum . the organization record of this row is radiotelevisi\u00f3n del principado de asturias ( rtpa ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; foundation } ; organization } ; radiotelevisi\u00f3n del principado de asturias ( rtpa ) }, interpretation: the average of the driver - matched db record of all rows is 0.07 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; driver - matched db } ; 0.07 }, interpretation: the average of the driver - matched db record of all rows is 0.07 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; driver - matched db } ; 0.07 }, interpretation: select the row whose points record of all rows is maximum . the song record of this row is la det swinge .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; song } ; la det swinge }, interpretation: select the row whose points record of all rows is maximum . the song record of this row is la det swinge .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; song } ; la det swinge }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: the 2nd maximum goals for record of all rows is 343 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; goals for ; 2 } ; 343 }, interpretation: the 2nd maximum goals for record of all rows is 343 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; goals for ; 2 } ; 343 }, interpretation: select the row whose floors record of all rows is maximum . the name record of this row is place hauteville .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; floors } ; name } ; place hauteville }, interpretation: select the row whose floors record of all rows is maximum . the name record of this row is place hauteville .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; floors } ; name } ; place hauteville }, interpretation: the sum of the strikeouts record of all rows is 3471 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; strikeouts } ; 3471 }, interpretation: the sum of the strikeouts record of all rows is 3471 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; strikeouts } ; 3471 }, interpretation: for the event records of all rows , most of them fuzzily match to freestyle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; freestyle }, interpretation: for the event records of all rows , most of them fuzzily match to freestyle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; freestyle }, interpretation: select the rows whose title record fuzzily matches to ruler . there is only one such row in the table . the state record of this unqiue row is qin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; title ; ruler } } ; eq { hop { filter_eq { all_rows ; title ; ruler } ; state } ; qin } }, interpretation: select the rows whose title record fuzzily matches to ruler . there is only one such row in the table . the state record of this unqiue row is qin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; title ; ruler } } ; eq { hop { filter_eq { all_rows ; title ; ruler } ; state } ; qin } }, interpretation: select the rows whose film title used in nomination record fuzzily matches to the other bank . take the year ( ceremony ) record of this row . select the rows whose film title used in nomination record fuzzily matches to keep smiling . take the year ( ceremony ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; film title used in nomination ; the other bank } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; film title used in nomination ; keep smiling } ; year ( ceremony ) } }, interpretation: select the rows whose film title used in nomination record fuzzily matches to the other bank . take the year ( ceremony ) record of this row . select the rows whose film title used in nomination record fuzzily matches to keep smiling . take the year ( ceremony ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; film title used in nomination ; the other bank } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; film title used in nomination ; keep smiling } ; year ( ceremony ) } }, interpretation: select the rows whose class record fuzzily matches to b . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; class ; b } } ; 4 }, interpretation: select the rows whose class record fuzzily matches to b . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; class ; b } } ; 4 }, interpretation: select the rows whose us viewers ( in millions ) record is equal to 3.69 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; us viewers ( in millions ) ; 3.69 } } ; 2 }, interpretation: select the rows whose us viewers ( in millions ) record is equal to 3.69 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; us viewers ( in millions ) ; 3.69 } } ; 2 }, interpretation: select the row whose date record of all rows is maximum . the venue record of this row is halchowk stadium , kathmandu .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; venue } ; halchowk stadium , kathmandu }, interpretation: select the row whose date record of all rows is maximum . the venue record of this row is halchowk stadium , kathmandu .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; venue } ; halchowk stadium , kathmandu }, interpretation: select the rows whose opponent record fuzzily matches to new york islanders . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; new york islanders } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to new york islanders . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; new york islanders } } ; 3 }, interpretation: select the rows whose competition record fuzzily matches to uefa europa league . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; uefa europa league } } ; 4 }, interpretation: select the rows whose competition record fuzzily matches to uefa europa league . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; uefa europa league } } ; 4 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 10 , 2002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 10 , 2002 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 10 , 2002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 10 , 2002 }, interpretation: select the rows whose goals record fuzzily matches to ( 1 ) . there is only one such row in the table . the player record of this unqiue row is dario vido\u0161i\u0107 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goals ; ( 1 ) } } ; eq { hop { filter_eq { all_rows ; goals ; ( 1 ) } ; player } ; dario vido\u0161i\u0107 } }, interpretation: select the rows whose goals record fuzzily matches to ( 1 ) . there is only one such row in the table . the player record of this unqiue row is dario vido\u0161i\u0107 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goals ; ( 1 ) } } ; eq { hop { filter_eq { all_rows ; goals ; ( 1 ) } ; player } ; dario vido\u0161i\u0107 } }, interpretation: select the rows whose manner of departure record fuzzily matches to resigned . there is only one such row in the table . the outgoing manager record of this unqiue row is thomas doll .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; resigned } } ; eq { hop { filter_eq { all_rows ; manner of departure ; resigned } ; outgoing manager } ; thomas doll } }, interpretation: select the rows whose manner of departure record fuzzily matches to resigned . there is only one such row in the table . the outgoing manager record of this unqiue row is thomas doll .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manner of departure ; resigned } } ; eq { hop { filter_eq { all_rows ; manner of departure ; resigned } ; outgoing manager } ; thomas doll } }, interpretation: select the rows whose successor record fuzzily matches to vacant . there is only one such row in the table . the district record of this unqiue row is illinois 1st .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; successor ; vacant } } ; eq { hop { filter_eq { all_rows ; successor ; vacant } ; district } ; illinois 1st } }, interpretation: select the rows whose successor record fuzzily matches to vacant . there is only one such row in the table . the district record of this unqiue row is illinois 1st .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; successor ; vacant } } ; eq { hop { filter_eq { all_rows ; successor ; vacant } ; district } ; illinois 1st } }, interpretation: select the rows whose location record fuzzily matches to poland . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; location ; poland } }, interpretation: select the rows whose location record fuzzily matches to poland . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; location ; poland } }, interpretation: the average of the erp w record of all rows is 23 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; erp w } ; 23 }, interpretation: the average of the erp w record of all rows is 23 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; erp w } ; 23 }, interpretation: for the position records of all rows , most of them fuzzily match to lb .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; lb }, interpretation: for the position records of all rows , most of them fuzzily match to lb .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; lb }, interpretation: select the rows whose result record fuzzily matches to win . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; win } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to win . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; win } } ; 4 }, interpretation: select the rows whose agg score record fuzzily matches to 0 - 2 . there is only one such row in the table . the team 1 record of this unqiue row is ilisiakos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; agg score ; 0 - 2 } } ; eq { hop { filter_eq { all_rows ; agg score ; 0 - 2 } ; team 1 } ; ilisiakos } }, interpretation: select the rows whose agg score record fuzzily matches to 0 - 2 . there is only one such row in the table . the team 1 record of this unqiue row is ilisiakos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; agg score ; 0 - 2 } } ; eq { hop { filter_eq { all_rows ; agg score ; 0 - 2 } ; team 1 } ; ilisiakos } }, interpretation: select the rows whose final record fuzzily matches to did not advance . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; final ; did not advance } } ; 3 }, interpretation: select the rows whose final record fuzzily matches to did not advance . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; final ; did not advance } } ; 3 }, interpretation: select the rows whose service area record fuzzily matches to sw ireland . take the 2fm ( mhz ) record of this row . select the rows whose service area record fuzzily matches to se ireland . take the 2fm ( mhz ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; service area ; sw ireland } ; 2fm ( mhz ) } ; hop { filter_eq { all_rows ; service area ; se ireland } ; 2fm ( mhz ) } }, interpretation: select the rows whose service area record fuzzily matches to sw ireland . take the 2fm ( mhz ) record of this row . select the rows whose service area record fuzzily matches to se ireland . take the 2fm ( mhz ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; service area ; sw ireland } ; 2fm ( mhz ) } ; hop { filter_eq { all_rows ; service area ; se ireland } ; 2fm ( mhz ) } }, interpretation: select the rows whose mlb draft record fuzzily matches to 1st round . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; mlb draft ; 1st round } } ; 2 }, interpretation: select the rows whose mlb draft record fuzzily matches to 1st round . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; mlb draft ; 1st round } } ; 2 }, interpretation: select the rows whose score record is greater than 300 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; score ; 300 } } ; 3 }, interpretation: select the rows whose score record is greater than 300 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; score ; 300 } } ; 3 }, interpretation: select the row whose total votes record of all rows is 2nd maximum . the artist record of this row is virginia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total votes ; 2 } ; artist } ; virginia }, interpretation: select the row whose total votes record of all rows is 2nd maximum . the artist record of this row is virginia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total votes ; 2 } ; artist } ; virginia }, interpretation: select the row whose capacity record of all rows is 2nd maximum . the home arena record of this row is bird arena .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; capacity ; 2 } ; home arena } ; bird arena }, interpretation: select the row whose capacity record of all rows is 2nd maximum . the home arena record of this row is bird arena .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; capacity ; 2 } ; home arena } ; bird arena }, interpretation: select the rows whose stadium record fuzzily matches to eden gardens . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; stadium ; eden gardens } } ; 2 }, interpretation: select the rows whose stadium record fuzzily matches to eden gardens . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; stadium ; eden gardens } } ; 2 }, interpretation: select the rows whose year record is greater than or equal to 2002 . the sum of the laps record of these rows is 699 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; year ; 2002 } ; laps } ; 699 }, interpretation: select the rows whose year record is greater than or equal to 2002 . the sum of the laps record of these rows is 699 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; year ; 2002 } ; laps } ; 699 }, interpretation: select the rows whose us mission record fuzzily matches to ranger . the average of the mass ( kg ) record of these rows is 340 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; us mission ; ranger } ; mass ( kg ) } ; 340 }, interpretation: select the rows whose us mission record fuzzily matches to ranger . the average of the mass ( kg ) record of these rows is 340 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; us mission ; ranger } ; mass ( kg ) } ; 340 }, interpretation: select the rows whose director record fuzzily matches to pamela fryman . among these rows , select the rows whose original air date record fuzzily matches to april . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; director ; pamela fryman } ; original air date ; april } } ; 3 }, interpretation: select the rows whose director record fuzzily matches to pamela fryman . among these rows , select the rows whose original air date record fuzzily matches to april . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; director ; pamela fryman } ; original air date ; april } } ; 3 }, interpretation: for the honour records of all rows , all of them fuzzily match to medal of the order of australia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; honour ; medal of the order of australia }, interpretation: for the honour records of all rows , all of them fuzzily match to medal of the order of australia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; honour ; medal of the order of australia }, interpretation: the average of the area ( km square ) record of all rows is 198.448 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) } ; 198.448 }, interpretation: the average of the area ( km square ) record of all rows is 198.448 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) } ; 198.448 }, interpretation: select the rows whose tournament record fuzzily matches to mci heritage golf classic . there is only one such row in the table . the date record of this unqiue row is 17 apr 1988 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; mci heritage golf classic } } ; eq { hop { filter_eq { all_rows ; tournament ; mci heritage golf classic } ; date } ; 17 apr 1988 } }, interpretation: select the rows whose tournament record fuzzily matches to mci heritage golf classic . there is only one such row in the table . the date record of this unqiue row is 17 apr 1988 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; mci heritage golf classic } } ; eq { hop { filter_eq { all_rows ; tournament ; mci heritage golf classic } ; date } ; 17 apr 1988 } }, interpretation: for the transfer window records of all rows , most of them fuzzily match to summer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; transfer window ; summer }, interpretation: for the transfer window records of all rows , most of them fuzzily match to summer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; transfer window ; summer }, interpretation: for the played records of all rows , most of them are equal to 114 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 114 }, interpretation: for the played records of all rows , most of them are equal to 114 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 114 }, interpretation: the average of the crowd record of all rows is 16583.33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16583.33 }, interpretation: the average of the crowd record of all rows is 16583.33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16583.33 }, interpretation: the average of the capacity record of all rows is 44123 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 44123 }, interpretation: the average of the capacity record of all rows is 44123 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 44123 }, interpretation: select the rows whose opponent record fuzzily matches to anastasia pavlyuchenkova . there is only one such row in the table . the date record of this unqiue row is may 4 , 2013 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; anastasia pavlyuchenkova } } ; eq { hop { filter_eq { all_rows ; opponent ; anastasia pavlyuchenkova } ; date } ; may 4 , 2013 } }, interpretation: select the rows whose opponent record fuzzily matches to anastasia pavlyuchenkova . there is only one such row in the table . the date record of this unqiue row is may 4 , 2013 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; anastasia pavlyuchenkova } } ; eq { hop { filter_eq { all_rows ; opponent ; anastasia pavlyuchenkova } ; date } ; may 4 , 2013 } }, interpretation: select the rows whose winner record fuzzily matches to rangers . for the score records of these rows , most of them are greater than 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; winner ; rangers } ; score ; 0 }, interpretation: select the rows whose winner record fuzzily matches to rangers . for the score records of these rows , most of them are greater than 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; winner ; rangers } ; score ; 0 }, interpretation: for the lead records of all rows , most of them are greater than or equal to 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; lead ; 10 }, interpretation: for the lead records of all rows , most of them are greater than or equal to 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; lead ; 10 }, interpretation: select the row whose score record of all rows is 2nd maximum . the competition record of this row is 2007 afc asian cup qualification .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; score ; 2 } ; competition } ; 2007 afc asian cup qualification }, interpretation: select the row whose score record of all rows is 2nd maximum . the competition record of this row is 2007 afc asian cup qualification .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; score ; 2 } ; competition } ; 2007 afc asian cup qualification }, interpretation: select the rows whose rank record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 4 } } ; 2 }, interpretation: select the rows whose rank record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 4 } } ; 2 }, interpretation: select the rows whose co - driver record fuzzily matches to leo kinnunen . for the pos records of these rows , most of them fuzzily match to ret .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; co - driver ; leo kinnunen } ; pos ; ret }, interpretation: select the rows whose co - driver record fuzzily matches to leo kinnunen . for the pos records of these rows , most of them fuzzily match to ret .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; co - driver ; leo kinnunen } ; pos ; ret }, interpretation: select the rows whose voivodeship after 1569 record fuzzily matches to samogitian eldership . take the year established record of this row . select the rows whose voivodeship after 1569 record fuzzily matches to trakai voivodeship . take the year established record of this row . the second record is 2 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; voivodeship after 1569 ; samogitian eldership } ; year established } ; hop { filter_eq { all_rows ; voivodeship after 1569 ; trakai voivodeship } ; year established } } ; -2 years }, interpretation: select the rows whose voivodeship after 1569 record fuzzily matches to samogitian eldership . take the year established record of this row . select the rows whose voivodeship after 1569 record fuzzily matches to trakai voivodeship . take the year established record of this row . the second record is 2 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; voivodeship after 1569 ; samogitian eldership } ; year established } ; hop { filter_eq { all_rows ; voivodeship after 1569 ; trakai voivodeship } ; year established } } ; -2 years }, interpretation: the average of the goals record of all rows is 26.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 26.2 }, interpretation: the average of the goals record of all rows is 26.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 26.2 }, interpretation: select the rows whose nation record fuzzily matches to kenya . among these rows , select the rows whose time record is less than 30:34 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_eq { all_rows ; nation ; kenya } ; time ; 30:34 } } ; 2 }, interpretation: select the rows whose nation record fuzzily matches to kenya . among these rows , select the rows whose time record is less than 30:34 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_eq { all_rows ; nation ; kenya } ; time ; 30:34 } } ; 2 }, interpretation: select the row whose land ( sqmi ) record of all rows is maximum . the township record of this row is joliette .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; land ( sqmi ) } ; township } ; joliette }, interpretation: select the row whose land ( sqmi ) record of all rows is maximum . the township record of this row is joliette .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; land ( sqmi ) } ; township } ; joliette }, interpretation: select the rows whose country record fuzzily matches to scotland . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; scotland } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to scotland . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; scotland } } ; 2 }, interpretation: select the rows whose career win - loss record fuzzily matches to 2 - . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; career win - loss ; 2 - } } ; eq { hop { filter_eq { all_rows ; career win - loss ; 2 - } ; tournament } ; us open } }, interpretation: select the rows whose career win - loss record fuzzily matches to 2 - . there is only one such row in the table . the tournament record of this unqiue row is us open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; career win - loss ; 2 - } } ; eq { hop { filter_eq { all_rows ; career win - loss ; 2 - } ; tournament } ; us open } }, interpretation: the average of the for record of all rows is 31 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; for } ; 31 }, interpretation: the average of the for record of all rows is 31 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; for } ; 31 }, interpretation: select the row whose f bolt ( kgf ) record of all rows is maximum . the chambering record of this row is .454 casull .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; f bolt ( kgf ) } ; chambering } ; .454 casull }, interpretation: select the row whose f bolt ( kgf ) record of all rows is maximum . the chambering record of this row is .454 casull .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; f bolt ( kgf ) } ; chambering } ; .454 casull }, interpretation: select the rows whose school / club team record fuzzily matches to eastern washington . there is only one such row in the table . the player record of this unqiue row is henry bekkering .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; eastern washington } } ; eq { hop { filter_eq { all_rows ; school / club team ; eastern washington } ; player } ; henry bekkering } }, interpretation: select the rows whose school / club team record fuzzily matches to eastern washington . there is only one such row in the table . the player record of this unqiue row is henry bekkering .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; eastern washington } } ; eq { hop { filter_eq { all_rows ; school / club team ; eastern washington } ; player } ; henry bekkering } }, interpretation: select the rows whose agent record fuzzily matches to arsine . take the effectiveness as blood agent record of this row . select the rows whose agent record fuzzily matches to vinyl arsine . take the effectiveness as blood agent record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; agent ; arsine } ; effectiveness as blood agent } ; hop { filter_eq { all_rows ; agent ; vinyl arsine } ; effectiveness as blood agent } }, interpretation: select the rows whose agent record fuzzily matches to arsine . take the effectiveness as blood agent record of this row . select the rows whose agent record fuzzily matches to vinyl arsine . take the effectiveness as blood agent record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; agent ; arsine } ; effectiveness as blood agent } ; hop { filter_eq { all_rows ; agent ; vinyl arsine } ; effectiveness as blood agent } }, interpretation: select the rows whose position record fuzzily matches to rb . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; rb } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to rb . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; rb } } ; 3 }, interpretation: select the rows whose team record fuzzily matches to aermacchi . take the year record of this row . select the rows whose team record fuzzily matches to harley davidson . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; team ; aermacchi } ; year } ; hop { filter_eq { all_rows ; team ; harley davidson } ; year } }, interpretation: select the rows whose team record fuzzily matches to aermacchi . take the year record of this row . select the rows whose team record fuzzily matches to harley davidson . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; team ; aermacchi } ; year } ; hop { filter_eq { all_rows ; team ; harley davidson } ; year } }, interpretation: the average of the points won record of all rows is 198 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points won } ; 198 }, interpretation: the average of the points won record of all rows is 198 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points won } ; 198 }, interpretation: select the rows whose class record fuzzily matches to 250cc . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; class ; 250cc } } ; 5 }, interpretation: select the rows whose class record fuzzily matches to 250cc . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; class ; 250cc } } ; 5 }, interpretation: select the rows whose location attendance record fuzzily matches to new orleans arena . the sum of the location attendance record of these rows is 117747 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; new orleans arena } ; location attendance } ; 117747 }, interpretation: select the rows whose location attendance record fuzzily matches to new orleans arena . the sum of the location attendance record of these rows is 117747 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; new orleans arena } ; location attendance } ; 117747 }, interpretation: for the position records of all rows , most of them fuzzily match to forward .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; forward }, interpretation: for the position records of all rows , most of them fuzzily match to forward .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; forward }, interpretation: the average of the first downs record of all rows is 19.42 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; first downs } ; 19.42 }, interpretation: the average of the first downs record of all rows is 19.42 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; first downs } ; 19.42 }, interpretation: select the rows whose year record fuzzily matches to 1975 . take the stages record of this row . select the rows whose year record fuzzily matches to 1976 . take the stages record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1975 } ; stages } ; hop { filter_eq { all_rows ; year ; 1976 } ; stages } }, interpretation: select the rows whose year record fuzzily matches to 1975 . take the stages record of this row . select the rows whose year record fuzzily matches to 1976 . take the stages record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1975 } ; stages } ; hop { filter_eq { all_rows ; year ; 1976 } ; stages } }, interpretation: select the rows whose tournament record fuzzily matches to open . the sum of the cuts made record of these rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; tournament ; open } ; cuts made } ; 17 }, interpretation: select the rows whose tournament record fuzzily matches to open . the sum of the cuts made record of these rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; tournament ; open } ; cuts made } ; 17 }, interpretation: select the row whose original air date record of all rows is 2nd minimum . the title record of this row is heroes .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; original air date ; 2 } ; title } ; heroes }, interpretation: select the row whose original air date record of all rows is 2nd minimum . the title record of this row is heroes .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; original air date ; 2 } ; title } ; heroes }, interpretation: select the rows whose gene name record fuzzily matches to alanyl - trna synthetase . there is only one such row in the table . the genus / species record of this unqiue row is bartonella tribocorum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gene name ; alanyl - trna synthetase } } ; eq { hop { filter_eq { all_rows ; gene name ; alanyl - trna synthetase } ; genus / species } ; bartonella tribocorum } }, interpretation: select the rows whose gene name record fuzzily matches to alanyl - trna synthetase . there is only one such row in the table . the genus / species record of this unqiue row is bartonella tribocorum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gene name ; alanyl - trna synthetase } } ; eq { hop { filter_eq { all_rows ; gene name ; alanyl - trna synthetase } ; genus / species } ; bartonella tribocorum } }, interpretation: select the row whose jump 1 record of all rows is 2nd maximum . the athlete name record of this row is dmitriy bondarenko ( urs ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; jump 1 ; 2 } ; athlete name } ; dmitriy bondarenko ( urs ) }, interpretation: select the row whose jump 1 record of all rows is 2nd maximum . the athlete name record of this row is dmitriy bondarenko ( urs ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; jump 1 ; 2 } ; athlete name } ; dmitriy bondarenko ( urs ) }, interpretation: the average of the enrollment record of all rows is 519 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 519 }, interpretation: the average of the enrollment record of all rows is 519 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 519 }, interpretation: select the rows whose position record fuzzily matches to running back . among these rows , select the rows whose round record is greater than 4 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; position ; running back } ; round ; 4 } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to running back . among these rows , select the rows whose round record is greater than 4 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; position ; running back } ; round ; 4 } } ; 3 }, interpretation: for the year completed records of all rows , most of them are less than 1970 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year completed ; 1970 }, interpretation: for the year completed records of all rows , most of them are less than 1970 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year completed ; 1970 }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; soviet union }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; soviet union }, interpretation: the average of the number of viewers record of all rows is 28.94 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of viewers } ; 28.94 }, interpretation: the average of the number of viewers record of all rows is 28.94 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of viewers } ; 28.94 }, interpretation: select the rows whose location record fuzzily matches to casablanca . among these rows , select the rows whose constructor record fuzzily matches to delage . there is only one such row in the table . the driver record of this unqiue row is comte de vaugelas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; casablanca } ; constructor ; delage } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; casablanca } ; constructor ; delage } ; driver } ; comte de vaugelas } }, interpretation: select the rows whose location record fuzzily matches to casablanca . among these rows , select the rows whose constructor record fuzzily matches to delage . there is only one such row in the table . the driver record of this unqiue row is comte de vaugelas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; casablanca } ; constructor ; delage } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; casablanca } ; constructor ; delage } ; driver } ; comte de vaugelas } }, interpretation: select the rows whose opponent record fuzzily matches to st louis blues . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; opponent ; st louis blues } }, interpretation: select the rows whose opponent record fuzzily matches to st louis blues . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; opponent ; st louis blues } }, interpretation: for the wins records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; wins ; 1 }, interpretation: for the wins records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; wins ; 1 }, interpretation: select the rows whose surface record fuzzily matches to hard . among these rows , select the rows whose partner record fuzzily matches to magdalena maleeva . there is only one such row in the table . the date record of this unqiue row is july 16 , 1992 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; surface ; hard } ; partner ; magdalena maleeva } } ; eq { hop { filter_eq { filter_eq { all_rows ; surface ; hard } ; partner ; magdalena maleeva } ; date } ; july 16 , 1992 } }, interpretation: select the rows whose surface record fuzzily matches to hard . among these rows , select the rows whose partner record fuzzily matches to magdalena maleeva . there is only one such row in the table . the date record of this unqiue row is july 16 , 1992 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; surface ; hard } ; partner ; magdalena maleeva } } ; eq { hop { filter_eq { filter_eq { all_rows ; surface ; hard } ; partner ; magdalena maleeva } ; date } ; july 16 , 1992 } }, interpretation: select the rows whose incumbent record fuzzily matches to wilbur mills . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james william trimble . take the first elected record of this row . the second record is 6 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; wilbur mills } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james william trimble } ; first elected } } ; -6 years }, interpretation: select the rows whose incumbent record fuzzily matches to wilbur mills . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james william trimble . take the first elected record of this row . the second record is 6 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; wilbur mills } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james william trimble } ; first elected } } ; -6 years }, interpretation: for the primary sponsor ( s ) records of all rows , most of them do not match to n / a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; primary sponsor ( s ) ; n / a }, interpretation: for the primary sponsor ( s ) records of all rows , most of them do not match to n / a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; primary sponsor ( s ) ; n / a }, interpretation: the average of the attendance record of all rows is 45585 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 45585 }, interpretation: the average of the attendance record of all rows is 45585 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 45585 }, interpretation: select the rows whose competition record fuzzily matches to 1994 fifa world cup qualification . select the row whose date record of these rows is minimum . the venue record of this row is estadio rigoberto l\u00f3pez , managua , nicaragua .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; competition ; 1994 fifa world cup qualification } ; date } ; venue } ; estadio rigoberto l\u00f3pez , managua , nicaragua }, interpretation: select the rows whose competition record fuzzily matches to 1994 fifa world cup qualification . select the row whose date record of these rows is minimum . the venue record of this row is estadio rigoberto l\u00f3pez , managua , nicaragua .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; competition ; 1994 fifa world cup qualification } ; date } ; venue } ; estadio rigoberto l\u00f3pez , managua , nicaragua }, interpretation: select the rows whose crowd record is greater than 20000 . among these rows , select the rows whose venue record fuzzily matches to victoria park . there is only one such row in the table . the home team record of this unqiue row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; venue ; victoria park } } ; eq { hop { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; venue ; victoria park } ; home team } ; collingwood } }, interpretation: select the rows whose crowd record is greater than 20000 . among these rows , select the rows whose venue record fuzzily matches to victoria park . there is only one such row in the table . the home team record of this unqiue row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; venue ; victoria park } } ; eq { hop { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; venue ; victoria park } ; home team } ; collingwood } }, interpretation: for the surface records of all rows , all of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; surface ; clay }, interpretation: for the surface records of all rows , all of them fuzzily match to clay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; surface ; clay }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is mcg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; mcg }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is mcg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; mcg }, interpretation: select the rows whose country record fuzzily matches to united states . for the money records of these rows , most of them are greater than or equal to 120000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { filter_eq { all_rows ; country ; united states } ; money ; 120000 }, interpretation: select the rows whose country record fuzzily matches to united states . for the money records of these rows , most of them are greater than or equal to 120000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { filter_eq { all_rows ; country ; united states } ; money ; 120000 }, interpretation: select the rows whose the world university rankings 2012 - 13 record is less than 300 . there is only one such row in the table . the university record of this unqiue row is queensland university of technology .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; the world university rankings 2012 - 13 ; 300 } } ; eq { hop { filter_less { all_rows ; the world university rankings 2012 - 13 ; 300 } ; university } ; queensland university of technology } }, interpretation: select the rows whose the world university rankings 2012 - 13 record is less than 300 . there is only one such row in the table . the university record of this unqiue row is queensland university of technology .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; the world university rankings 2012 - 13 ; 300 } } ; eq { hop { filter_less { all_rows ; the world university rankings 2012 - 13 ; 300 } ; university } ; queensland university of technology } }, interpretation: select the row whose score record of all rows is minimum . the player record of this row is phil mickelson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; score } ; player } ; phil mickelson }, interpretation: select the row whose score record of all rows is minimum . the player record of this row is phil mickelson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; score } ; player } ; phil mickelson }, interpretation: for the numbers records of all rows , most of them fuzzily match to buses .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; numbers ; buses }, interpretation: for the numbers records of all rows , most of them fuzzily match to buses .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; numbers ; buses }, interpretation: select the row whose score record of all rows is 1st maximum . the ground record of this row is humber college north .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; score ; 1 } ; ground } ; humber college north }, interpretation: select the row whose score record of all rows is 1st maximum . the ground record of this row is humber college north .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; score ; 1 } ; ground } ; humber college north }, interpretation: select the rows whose artist record fuzzily matches to lola novakovi\u0107 . take the points record of this row . select the rows whose artist record fuzzily matches to claudio villa . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; lola novakovi\u0107 } ; points } ; hop { filter_eq { all_rows ; artist ; claudio villa } ; points } }, interpretation: select the rows whose artist record fuzzily matches to lola novakovi\u0107 . take the points record of this row . select the rows whose artist record fuzzily matches to claudio villa . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; lola novakovi\u0107 } ; points } ; hop { filter_eq { all_rows ; artist ; claudio villa } ; points } }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is corinthians .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; corinthians }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is corinthians .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; corinthians }, interpretation: select the rows whose 2011 record fuzzily matches to 2r . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2011 ; 2r } } ; 2 }, interpretation: select the rows whose 2011 record fuzzily matches to 2r . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2011 ; 2r } } ; 2 }, interpretation: select the rows whose name record fuzzily matches to newport . take the year withdrawn record of this row . select the rows whose name record fuzzily matches to cowes . take the year withdrawn record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; newport } ; year withdrawn } ; hop { filter_eq { all_rows ; name ; cowes } ; year withdrawn } }, interpretation: select the rows whose name record fuzzily matches to newport . take the year withdrawn record of this row . select the rows whose name record fuzzily matches to cowes . take the year withdrawn record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; newport } ; year withdrawn } ; hop { filter_eq { all_rows ; name ; cowes } ; year withdrawn } }, interpretation: select the rows whose competition record fuzzily matches to uefa euro 2004 qualifying . there is only one such row in the table . the date record of this unqiue row is 2003 - 02 - 04 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; uefa euro 2004 qualifying } } ; eq { hop { filter_eq { all_rows ; competition ; uefa euro 2004 qualifying } ; date } ; 2003 - 02 - 04 } }, interpretation: select the rows whose competition record fuzzily matches to uefa euro 2004 qualifying . there is only one such row in the table . the date record of this unqiue row is 2003 - 02 - 04 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; uefa euro 2004 qualifying } } ; eq { hop { filter_eq { all_rows ; competition ; uefa euro 2004 qualifying } ; date } ; 2003 - 02 - 04 } }, interpretation: for the result records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; re - elected }, interpretation: for the result records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; re - elected }, interpretation: select the rows whose date record fuzzily matches to may 2008 . for the original artist records of these rows , all of them fuzzily match to beatles .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; may 2008 } ; original artist ; beatles }, interpretation: select the rows whose date record fuzzily matches to may 2008 . for the original artist records of these rows , all of them fuzzily match to beatles .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; may 2008 } ; original artist ; beatles }, interpretation: for the crowd records of all rows , most of them are greater than 16000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 16000 }, interpretation: for the crowd records of all rows , most of them are greater than 16000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 16000 }, interpretation: for the score records of all rows , most of them are less than 71 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; score ; 71 }, interpretation: for the score records of all rows , most of them are less than 71 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; score ; 71 }, interpretation: select the row whose viewers record of all rows is maximum . the no record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers } ; no } ; 1 }, interpretation: select the row whose viewers record of all rows is maximum . the no record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers } ; no } ; 1 }, interpretation: for the distance / duration records of all rows , all of them are greater than 40 laps .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; distance / duration ; 40 laps }, interpretation: for the distance / duration records of all rows , all of them are greater than 40 laps .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; distance / duration ; 40 laps }, interpretation: select the rows whose director record fuzzily matches to silvio caiozzi . the minimum year ( ceremony ) record of these rows is 1990 : ( 63rd ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; director ; silvio caiozzi } ; year ( ceremony ) } ; 1990 : ( 63rd ) }, interpretation: select the rows whose director record fuzzily matches to silvio caiozzi . the minimum year ( ceremony ) record of these rows is 1990 : ( 63rd ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; director ; silvio caiozzi } ; year ( ceremony ) } ; 1990 : ( 63rd ) }, interpretation: select the rows whose opponent record fuzzily matches to ryan thomas . take the time record of this row . select the rows whose opponent record fuzzily matches to stryder fann . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; ryan thomas } ; time } ; hop { filter_eq { all_rows ; opponent ; stryder fann } ; time } }, interpretation: select the rows whose opponent record fuzzily matches to ryan thomas . take the time record of this row . select the rows whose opponent record fuzzily matches to stryder fann . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; ryan thomas } ; time } ; hop { filter_eq { all_rows ; opponent ; stryder fann } ; time } }, interpretation: select the rows whose viewers ( millions ) record is greater than 9 million . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; viewers ( millions ) ; 9 million } } ; 3 }, interpretation: select the rows whose viewers ( millions ) record is greater than 9 million . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; viewers ( millions ) ; 9 million } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to hartford whalers . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; hartford whalers } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to hartford whalers . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; hartford whalers } } ; 2 }, interpretation: select the row whose date record of all rows is 1st minimum . the opponent in the final record of this row is monica niculescu .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; opponent in the final } ; monica niculescu }, interpretation: select the row whose date record of all rows is 1st minimum . the opponent in the final record of this row is monica niculescu .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; opponent in the final } ; monica niculescu }, interpretation: select the rows whose result record fuzzily matches to re-elected . among these rows , select the rows whose first elected record fuzzily matches to 193 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re-elected } ; first elected ; 193 } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to re-elected . among these rows , select the rows whose first elected record fuzzily matches to 193 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re-elected } ; first elected ; 193 } } ; 3 }, interpretation: for the power kw records of all rows , most of them fuzzily match to 10 kw .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; power kw ; 10 kw }, interpretation: for the power kw records of all rows , most of them fuzzily match to 10 kw .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; power kw ; 10 kw }, interpretation: select the row whose crowd record of all rows is maximum . the home team record of this row is collingwood . the away team record of this row is north melbourne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; crowd } ; home team } ; collingwood } ; eq { hop { argmax { all_rows ; crowd } ; away team } ; north melbourne } }, interpretation: select the row whose crowd record of all rows is maximum . the home team record of this row is collingwood . the away team record of this row is north melbourne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; crowd } ; home team } ; collingwood } ; eq { hop { argmax { all_rows ; crowd } ; away team } ; north melbourne } }, interpretation: select the rows whose position record fuzzily matches to dnf . there is only one such row in the table . the year record of this unqiue row is 2010 . the competition record of this unqiue row is european championships . the event record of this unqiue row is 50 km .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; dnf } } ; and { eq { hop { filter_eq { all_rows ; position ; dnf } ; year } ; 2010 } ; and { eq { hop { filter_eq { all_rows ; position ; dnf } ; competition } ; european championships } ; eq { hop { filter_eq { all_rows ; position ; dnf } ; event } ; 50 km } } } }, interpretation: select the rows whose position record fuzzily matches to dnf . there is only one such row in the table . the year record of this unqiue row is 2010 . the competition record of this unqiue row is european championships . the event record of this unqiue row is 50 km .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; dnf } } ; and { eq { hop { filter_eq { all_rows ; position ; dnf } ; year } ; 2010 } ; and { eq { hop { filter_eq { all_rows ; position ; dnf } ; competition } ; european championships } ; eq { hop { filter_eq { all_rows ; position ; dnf } ; event } ; 50 km } } } }, interpretation: select the rows whose tournament record fuzzily matches to commonwealth games . take the result record of this row . select the rows whose tournament record fuzzily matches to african championships . take the result record of this row . the first record is less than the second record . the year record of the first row is 2006 . the year record of the second row is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; tournament ; commonwealth games } ; result } ; hop { filter_eq { all_rows ; tournament ; african championships } ; result } } ; and { eq { hop { filter_eq { all_rows ; tournament ; commonwealth games } ; year } ; 2006 } ; eq { hop { filter_eq { all_rows ; tournament ; african championships } ; year } ; 2006 } } }, interpretation: select the rows whose tournament record fuzzily matches to commonwealth games . take the result record of this row . select the rows whose tournament record fuzzily matches to african championships . take the result record of this row . the first record is less than the second record . the year record of the first row is 2006 . the year record of the second row is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; tournament ; commonwealth games } ; result } ; hop { filter_eq { all_rows ; tournament ; african championships } ; result } } ; and { eq { hop { filter_eq { all_rows ; tournament ; commonwealth games } ; year } ; 2006 } ; eq { hop { filter_eq { all_rows ; tournament ; african championships } ; year } ; 2006 } } }, interpretation: select the row whose winner record of all rows is maximum . the episode record of this row is 2x10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winner } ; episode } ; 2x10 }, interpretation: select the row whose winner record of all rows is maximum . the episode record of this row is 2x10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winner } ; episode } ; 2x10 }, interpretation: select the rows whose venue record fuzzily matches to punt road oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to junction oval . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; punt road oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; junction oval } ; crowd } }, interpretation: select the rows whose venue record fuzzily matches to punt road oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to junction oval . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; punt road oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; junction oval } ; crowd } }, interpretation: the average of the attendance record of all rows is 17706 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 17706 }, interpretation: the average of the attendance record of all rows is 17706 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 17706 }, interpretation: the 1st maximum tdp record of all rows is 44 w . the brand name record of the row with 1st maximum tdp record is mobile core 2 extreme .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; tdp ; 1 } ; 44 w } ; eq { hop { nth_argmax { all_rows ; tdp ; 1 } ; brand name } ; mobile core 2 extreme } }, interpretation: the 1st maximum tdp record of all rows is 44 w . the brand name record of the row with 1st maximum tdp record is mobile core 2 extreme .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; tdp ; 1 } ; 44 w } ; eq { hop { nth_argmax { all_rows ; tdp ; 1 } ; brand name } ; mobile core 2 extreme } }, interpretation: select the row whose 4000ft + record of all rows is maximum . the country record of this row is scotland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 4000ft + } ; country } ; scotland }, interpretation: select the row whose 4000ft + record of all rows is maximum . the country record of this row is scotland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 4000ft + } ; country } ; scotland }, interpretation: select the rows whose name record fuzzily matches to quinn pitcock . take the round record of this row . select the rows whose name record fuzzily matches to roy hall . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; quinn pitcock } ; round } ; hop { filter_eq { all_rows ; name ; roy hall } ; round } }, interpretation: select the rows whose name record fuzzily matches to quinn pitcock . take the round record of this row . select the rows whose name record fuzzily matches to roy hall . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; quinn pitcock } ; round } ; hop { filter_eq { all_rows ; name ; roy hall } ; round } }, interpretation: the average of the crowd record of all rows is 12,667 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 12,667 }, interpretation: the average of the crowd record of all rows is 12,667 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 12,667 }, interpretation: select the rows whose length record is greater than 4:00 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; length ; 4:00 } } ; 3 }, interpretation: select the rows whose length record is greater than 4:00 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; length ; 4:00 } } ; 3 }, interpretation: the sum of the races record of all rows is 190 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 190 }, interpretation: the sum of the races record of all rows is 190 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 190 }, interpretation: for the type records of all rows , all of them fuzzily match to sovereign .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; type ; sovereign }, interpretation: for the type records of all rows , all of them fuzzily match to sovereign .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; type ; sovereign }, interpretation: select the rows whose date record fuzzily matches to november . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; november } ; result ; l }, interpretation: select the rows whose date record fuzzily matches to november . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; november } ; result ; l }, interpretation: select the rows whose player record fuzzily matches to ashley ambrose . take the round ( overall ) record of this row . select the rows whose player record fuzzily matches to tony mccoy . take the round ( overall ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ashley ambrose } ; round ( overall ) } ; hop { filter_eq { all_rows ; player ; tony mccoy } ; round ( overall ) } }, interpretation: select the rows whose player record fuzzily matches to ashley ambrose . take the round ( overall ) record of this row . select the rows whose player record fuzzily matches to tony mccoy . take the round ( overall ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ashley ambrose } ; round ( overall ) } ; hop { filter_eq { all_rows ; player ; tony mccoy } ; round ( overall ) } }, interpretation: select the rows whose ends won record is less than 50 . the 1st maximum stolen ends record of these rows is 14 . the locale record of the row with 1st maximum stolen ends record is germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { filter_less { all_rows ; ends won ; 50 } ; stolen ends ; 1 } ; 14 } ; eq { hop { nth_argmax { filter_less { all_rows ; ends won ; 50 } ; stolen ends ; 1 } ; locale } ; germany } }, interpretation: select the rows whose ends won record is less than 50 . the 1st maximum stolen ends record of these rows is 14 . the locale record of the row with 1st maximum stolen ends record is germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { filter_less { all_rows ; ends won ; 50 } ; stolen ends ; 1 } ; 14 } ; eq { hop { nth_argmax { filter_less { all_rows ; ends won ; 50 } ; stolen ends ; 1 } ; locale } ; germany } }, interpretation: select the row whose winnings record of all rows is maximum . the driver record of this row is mark martin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winnings } ; driver } ; mark martin }, interpretation: select the row whose winnings record of all rows is maximum . the driver record of this row is mark martin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winnings } ; driver } ; mark martin }, interpretation: select the row whose overs record of all rows is maximum . the player record of this row is j srinath .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overs } ; player } ; j srinath }, interpretation: select the row whose overs record of all rows is maximum . the player record of this row is j srinath .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overs } ; player } ; j srinath }, interpretation: select the rows whose date record fuzzily matches to 1990 - 09 . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; 1990 - 09 } ; result ; l }, interpretation: select the rows whose date record fuzzily matches to 1990 - 09 . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; 1990 - 09 } ; result ; l }, interpretation: the sum of the location attendance record of all rows is 240,206 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; location attendance } ; 240,206 }, interpretation: the sum of the location attendance record of all rows is 240,206 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; location attendance } ; 240,206 }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: select the rows whose model record fuzzily matches to aptus - ii 10 . take the seconds / frame record of this row . select the rows whose model record fuzzily matches to aptus - ii 12 . take the seconds / frame record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; model ; aptus - ii 10 } ; seconds / frame } ; hop { filter_eq { all_rows ; model ; aptus - ii 12 } ; seconds / frame } }, interpretation: select the rows whose model record fuzzily matches to aptus - ii 10 . take the seconds / frame record of this row . select the rows whose model record fuzzily matches to aptus - ii 12 . take the seconds / frame record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; model ; aptus - ii 10 } ; seconds / frame } ; hop { filter_eq { all_rows ; model ; aptus - ii 12 } ; seconds / frame } }, interpretation: select the rows whose film record fuzzily matches to bullets over broadway . among these rows , select the rows whose result record fuzzily matches to nominated . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; film ; bullets over broadway } ; result ; nominated } } ; 2 }, interpretation: select the rows whose film record fuzzily matches to bullets over broadway . among these rows , select the rows whose result record fuzzily matches to nominated . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; film ; bullets over broadway } ; result ; nominated } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to august . the sum of the attendance record of these rows is 83969 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; august } ; attendance } ; 83969 }, interpretation: select the rows whose date record fuzzily matches to august . the sum of the attendance record of these rows is 83969 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; august } ; attendance } ; 83969 }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is henry garland dupr\u00e9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; henry garland dupr\u00e9 }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is henry garland dupr\u00e9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; henry garland dupr\u00e9 }, interpretation: select the rows whose niederbayern record fuzzily matches to fc passau . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; niederbayern ; fc passau } } ; 4 }, interpretation: select the rows whose niederbayern record fuzzily matches to fc passau . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; niederbayern ; fc passau } } ; 4 }, interpretation: select the rows whose affiliation record fuzzily matches to public . among these rows , select the rows whose enrollment record is greater than 20000 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; affiliation ; public } ; enrollment ; 20000 } } ; 4 }, interpretation: select the rows whose affiliation record fuzzily matches to public . among these rows , select the rows whose enrollment record is greater than 20000 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; affiliation ; public } ; enrollment ; 20000 } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 8 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 8 }, interpretation: the average of the home team score record of all rows is 12.07 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 12.07 }, interpretation: the average of the home team score record of all rows is 12.07 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 12.07 }, interpretation: select the rows whose high rebounds record fuzzily matches to paul millsap . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; paul millsap } } ; 2 }, interpretation: select the rows whose high rebounds record fuzzily matches to paul millsap . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; paul millsap } } ; 2 }, interpretation: select the rows whose constructor record fuzzily matches to renault . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constructor ; renault } } ; 4 }, interpretation: select the rows whose constructor record fuzzily matches to renault . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; constructor ; renault } } ; 4 }, interpretation: select the rows whose year record is equal to 1961 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 1961 } } ; 3 }, interpretation: select the rows whose year record is equal to 1961 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 1961 } } ; 3 }, interpretation: select the row whose average record of all rows is maximum . the player record of this row is alec bedser .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average } ; player } ; alec bedser }, interpretation: select the row whose average record of all rows is maximum . the player record of this row is alec bedser .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average } ; player } ; alec bedser }, interpretation: select the rows whose high assists record fuzzily matches to rafer alston . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high assists ; rafer alston } } ; 4 }, interpretation: select the rows whose high assists record fuzzily matches to rafer alston . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high assists ; rafer alston } } ; 4 }, interpretation: select the rows whose definition record fuzzily matches to civil parish . select the row whose population record of these rows is 1st maximum . the town record of this row is ripon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; definition ; civil parish } ; population ; 1 } ; town } ; ripon }, interpretation: select the rows whose definition record fuzzily matches to civil parish . select the row whose population record of these rows is 1st maximum . the town record of this row is ripon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; definition ; civil parish } ; population ; 1 } ; town } ; ripon }, interpretation: the average of the us viewers ( millions ) record of all rows is 2.46 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 2.46 }, interpretation: the average of the us viewers ( millions ) record of all rows is 2.46 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; us viewers ( millions ) } ; 2.46 }, interpretation: select the rows whose winner 's share record is equal to 8400 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winner 's share ; 8400 } } ; 3 }, interpretation: select the rows whose winner 's share record is equal to 8400 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winner 's share ; 8400 } } ; 3 }, interpretation: select the rows whose week 5 record fuzzily matches to melisa jackson . take the record of this row . select the rows whose week 5 record fuzzily matches to - . take the record of this row . the first record is less than the second record . the record of the first row is january . the record of the second row is february .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; week 5 ; melisa jackson } ; } ; hop { filter_eq { all_rows ; week 5 ; - } ; } } ; and { eq { hop { filter_eq { all_rows ; week 5 ; melisa jackson } ; } ; january } ; eq { hop { filter_eq { all_rows ; week 5 ; - } ; } ; february } } }, interpretation: select the rows whose week 5 record fuzzily matches to melisa jackson . take the record of this row . select the rows whose week 5 record fuzzily matches to - . take the record of this row . the first record is less than the second record . the record of the first row is january . the record of the second row is february .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; week 5 ; melisa jackson } ; } ; hop { filter_eq { all_rows ; week 5 ; - } ; } } ; and { eq { hop { filter_eq { all_rows ; week 5 ; melisa jackson } ; } ; january } ; eq { hop { filter_eq { all_rows ; week 5 ; - } ; } ; february } } }, interpretation: select the rows whose location attendance record fuzzily matches to rose garden . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; rose garden } } ; 3 }, interpretation: select the rows whose location attendance record fuzzily matches to rose garden . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; rose garden } } ; 3 }, interpretation: for the team records of all rows , most of them fuzzily match to iowa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; iowa }, interpretation: for the team records of all rows , most of them fuzzily match to iowa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; iowa }, interpretation: select the row whose points record of all rows is 2nd minimum . the song record of this row is peace will come .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; points ; 2 } ; song } ; peace will come }, interpretation: select the row whose points record of all rows is 2nd minimum . the song record of this row is peace will come .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; points ; 2 } ; song } ; peace will come }, interpretation: select the row whose 2005 record of all rows is maximum . the tournament record of this row is year end ranking .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2005 } ; tournament } ; year end ranking }, interpretation: select the row whose 2005 record of all rows is maximum . the tournament record of this row is year end ranking .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2005 } ; tournament } ; year end ranking }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: the average of the days record of all rows is 102 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; days } ; 102 }, interpretation: the average of the days record of all rows is 102 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; days } ; 102 }, interpretation: select the rows whose celebrity record fuzzily matches to pawe\u0142 stasiak . take the average record of this row . select the rows whose celebrity record fuzzily matches to paolo cozza . take the average record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; celebrity ; pawe\u0142 stasiak } ; average } ; hop { filter_eq { all_rows ; celebrity ; paolo cozza } ; average } }, interpretation: select the rows whose celebrity record fuzzily matches to pawe\u0142 stasiak . take the average record of this row . select the rows whose celebrity record fuzzily matches to paolo cozza . take the average record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; celebrity ; pawe\u0142 stasiak } ; average } ; hop { filter_eq { all_rows ; celebrity ; paolo cozza } ; average } }, interpretation: select the rows whose high rebounds record fuzzily matches to garnett . the sum of the high rebounds record of these rows is 65 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; high rebounds ; garnett } ; high rebounds } ; 65 }, interpretation: select the rows whose high rebounds record fuzzily matches to garnett . the sum of the high rebounds record of these rows is 65 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; high rebounds ; garnett } ; high rebounds } ; 65 }, interpretation: select the row whose entered service record of all rows is 3rd minimum . the locomotive record of this row is c503 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; entered service ; 3 } ; locomotive } ; c503 }, interpretation: select the row whose entered service record of all rows is 3rd minimum . the locomotive record of this row is c503 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; entered service ; 3 } ; locomotive } ; c503 }, interpretation: select the rows whose cover model record fuzzily matches to no model pictured . there is only one such row in the table . the date record of this unqiue row is 1 - 84 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; cover model ; no model pictured } } ; eq { hop { filter_eq { all_rows ; cover model ; no model pictured } ; date } ; 1 - 84 } }, interpretation: select the rows whose cover model record fuzzily matches to no model pictured . there is only one such row in the table . the date record of this unqiue row is 1 - 84 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; cover model ; no model pictured } } ; eq { hop { filter_eq { all_rows ; cover model ; no model pictured } ; date } ; 1 - 84 } }, interpretation: select the rows whose hosted 4 teams since record is equal to 1993 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; hosted 4 teams since ; 1993 } } ; 2 }, interpretation: select the rows whose hosted 4 teams since record is equal to 1993 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; hosted 4 teams since ; 1993 } } ; 2 }, interpretation: select the row whose population record of all rows is minimum . the english name record of this row is zhangping city .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; population } ; english name } ; zhangping city }, interpretation: select the row whose population record of all rows is minimum . the english name record of this row is zhangping city .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; population } ; english name } ; zhangping city }, interpretation: select the row whose deaths record of all rows is maximum . the ship name record of this row is manchester brigade .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; deaths } ; ship name } ; manchester brigade }, interpretation: select the row whose deaths record of all rows is maximum . the ship name record of this row is manchester brigade .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; deaths } ; ship name } ; manchester brigade }, interpretation: for the location records of all rows , most of them fuzzily match to yankee stadium .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; yankee stadium }, interpretation: for the location records of all rows , most of them fuzzily match to yankee stadium .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; yankee stadium }, interpretation: select the rows whose venue record fuzzily matches to tahiti . there is only one such row in the table . the date record of this unqiue row is 11 may 1996 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; tahiti } } ; eq { hop { filter_eq { all_rows ; venue ; tahiti } ; date } ; 11 may 1996 } }, interpretation: select the rows whose venue record fuzzily matches to tahiti . there is only one such row in the table . the date record of this unqiue row is 11 may 1996 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; tahiti } } ; eq { hop { filter_eq { all_rows ; venue ; tahiti } ; date } ; 11 may 1996 } }, interpretation: select the row whose nor 1 record of all rows is 3rd maximum . the driver record of this row is jens klingmann .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; nor 1 ; 3 } ; driver } ; jens klingmann }, interpretation: select the row whose nor 1 record of all rows is 3rd maximum . the driver record of this row is jens klingmann .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; nor 1 ; 3 } ; driver } ; jens klingmann }, interpretation: select the rows whose country record fuzzily matches to netherlands . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; netherlands } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to netherlands . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; netherlands } } ; 2 }, interpretation: select the row whose result record of all rows is 3rd minimum . the year record of this row is 1996 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; result ; 3 } ; year } ; 1996 }, interpretation: select the row whose result record of all rows is 3rd minimum . the year record of this row is 1996 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; result ; 3 } ; year } ; 1996 }, interpretation: select the rows whose team record fuzzily matches to honda . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; honda } } ; 9 }, interpretation: select the rows whose team record fuzzily matches to honda . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; honda } } ; 9 }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is united states ( usa ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; united states ( usa ) }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is united states ( usa ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; united states ( usa ) }, interpretation: select the row whose win % record of all rows is 2nd minimum . the manager record of this row is horacio casarin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; win % ; 2 } ; manager } ; horacio casarin }, interpretation: select the row whose win % record of all rows is 2nd minimum . the manager record of this row is horacio casarin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; win % ; 2 } ; manager } ; horacio casarin }, interpretation: select the row whose points record of all rows is maximum . the driver / passenger record of this row is dani\u00e3l willemsen / sven verbrugge 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; driver / passenger } ; dani\u00e3l willemsen / sven verbrugge 1 }, interpretation: select the row whose points record of all rows is maximum . the driver / passenger record of this row is dani\u00e3l willemsen / sven verbrugge 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; driver / passenger } ; dani\u00e3l willemsen / sven verbrugge 1 }, interpretation: select the rows whose champions record fuzzily matches to guy forget . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champions ; guy forget } } ; 2 }, interpretation: select the rows whose champions record fuzzily matches to guy forget . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champions ; guy forget } } ; 2 }, interpretation: select the rows whose enrollment record is greater than 3000 . there is only one such row in the table . the institution record of this unqiue row is anderson university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; enrollment ; 3000 } } ; eq { hop { filter_greater { all_rows ; enrollment ; 3000 } ; institution } ; anderson university } }, interpretation: select the rows whose enrollment record is greater than 3000 . there is only one such row in the table . the institution record of this unqiue row is anderson university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; enrollment ; 3000 } } ; eq { hop { filter_greater { all_rows ; enrollment ; 3000 } ; institution } ; anderson university } }, interpretation: for the time records of all rows , most of them are greater than or equal to 2:00.00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; time ; 2:00.00 }, interpretation: for the time records of all rows , most of them are greater than or equal to 2:00.00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; time ; 2:00.00 }, interpretation: select the rows whose home team score record is greater than 10 . for the crowd records of these rows , most of them are less than 20000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_greater { all_rows ; home team score ; 10 } ; crowd ; 20000 }, interpretation: select the rows whose home team score record is greater than 10 . for the crowd records of these rows , most of them are less than 20000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_greater { all_rows ; home team score ; 10 } ; crowd ; 20000 }, interpretation: select the rows whose runner - up record fuzzily matches to dynamo moscow . take the season record of this row . select the rows whose runner - up record fuzzily matches to lokomotiv moscow . take the season record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; runner - up ; dynamo moscow } ; season } ; hop { filter_eq { all_rows ; runner - up ; lokomotiv moscow } ; season } }, interpretation: select the rows whose runner - up record fuzzily matches to dynamo moscow . take the season record of this row . select the rows whose runner - up record fuzzily matches to lokomotiv moscow . take the season record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; runner - up ; dynamo moscow } ; season } ; hop { filter_eq { all_rows ; runner - up ; lokomotiv moscow } ; season } }, interpretation: select the rows whose west lancashire record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; west lancashire ; 4 } } ; 2 }, interpretation: select the rows whose west lancashire record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; west lancashire ; 4 } } ; 2 }, interpretation: the maximum score record of all rows is 7 - 1 . the home team record of the row with superlative score record is aston villa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; score } ; 7 - 1 } ; eq { hop { argmax { all_rows ; score } ; home team } ; aston villa } }, interpretation: the maximum score record of all rows is 7 - 1 . the home team record of the row with superlative score record is aston villa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; score } ; 7 - 1 } ; eq { hop { argmax { all_rows ; score } ; home team } ; aston villa } }, interpretation: select the rows whose date record fuzzily matches to 3 june 1935 . among these rows , select the rows whose crowd record is greater than 25000 . there is only one such row in the table . the venue record of this unqiue row is windy hill .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; date ; 3 june 1935 } ; crowd ; 25000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; date ; 3 june 1935 } ; crowd ; 25000 } ; venue } ; windy hill } }, interpretation: select the rows whose date record fuzzily matches to 3 june 1935 . among these rows , select the rows whose crowd record is greater than 25000 . there is only one such row in the table . the venue record of this unqiue row is windy hill .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; date ; 3 june 1935 } ; crowd ; 25000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; date ; 3 june 1935 } ; crowd ; 25000 } ; venue } ; windy hill } }, interpretation: select the rows whose receiving tds record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; receiving tds ; 0 } } ; 2 }, interpretation: select the rows whose receiving tds record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; receiving tds ; 0 } } ; 2 }, interpretation: for the played records of all rows , all of them are equal to 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 22 }, interpretation: for the played records of all rows , all of them are equal to 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 22 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 14 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 14 }, interpretation: select the rows whose college record fuzzily matches to mississippi . there is only one such row in the table . the player record of this unqiue row is allen brown .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; mississippi } } ; eq { hop { filter_eq { all_rows ; college ; mississippi } ; player } ; allen brown } }, interpretation: select the rows whose college record fuzzily matches to mississippi . there is only one such row in the table . the player record of this unqiue row is allen brown .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; mississippi } } ; eq { hop { filter_eq { all_rows ; college ; mississippi } ; player } ; allen brown } }, interpretation: select the row whose year ( ceremony ) record of all rows is 2nd minimum . the director record of this row is shamil najafzadeh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ( ceremony ) ; 2 } ; director } ; shamil najafzadeh }, interpretation: select the row whose year ( ceremony ) record of all rows is 2nd minimum . the director record of this row is shamil najafzadeh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ( ceremony ) ; 2 } ; director } ; shamil najafzadeh }, interpretation: select the rows whose designer , year record is greater than 2000 . there is only one such row in the table . the name record of this unqiue row is pacific dunes . the state record of this unqiue row is oregon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; designer , year ; 2000 } } ; and { eq { hop { filter_greater { all_rows ; designer , year ; 2000 } ; name } ; pacific dunes } ; eq { hop { filter_greater { all_rows ; designer , year ; 2000 } ; state } ; oregon } } }, interpretation: select the rows whose designer , year record is greater than 2000 . there is only one such row in the table . the name record of this unqiue row is pacific dunes . the state record of this unqiue row is oregon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; designer , year ; 2000 } } ; and { eq { hop { filter_greater { all_rows ; designer , year ; 2000 } ; name } ; pacific dunes } ; eq { hop { filter_greater { all_rows ; designer , year ; 2000 } ; state } ; oregon } } }, interpretation: select the rows whose high rebounds record fuzzily matches to james booyer . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; james booyer } } ; 2 }, interpretation: select the rows whose high rebounds record fuzzily matches to james booyer . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; james booyer } } ; 2 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 7 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 7 }, interpretation: select the rows whose player record fuzzily matches to tom watson . take the earnings record of this row . select the rows whose player record fuzzily matches to lee trevino . take the earnings record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; tom watson } ; earnings } ; hop { filter_eq { all_rows ; player ; lee trevino } ; earnings } }, interpretation: select the rows whose player record fuzzily matches to tom watson . take the earnings record of this row . select the rows whose player record fuzzily matches to lee trevino . take the earnings record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; tom watson } ; earnings } ; hop { filter_eq { all_rows ; player ; lee trevino } ; earnings } }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the class records of all rows , most of them fuzzily match to 250cc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; 250cc }, interpretation: for the class records of all rows , most of them fuzzily match to 250cc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; 250cc }, interpretation: select the row whose total record of all rows is maximum . the gymnast record of this row is li xiaopeng ( chn ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; gymnast } ; li xiaopeng ( chn ) }, interpretation: select the row whose total record of all rows is maximum . the gymnast record of this row is li xiaopeng ( chn ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; gymnast } ; li xiaopeng ( chn ) }, interpretation: select the rows whose club record fuzzily matches to biu chun rangers . take the position in 2012 - 13 record of this row . select the rows whose club record fuzzily matches to citizen . take the position in 2012 - 13 record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; biu chun rangers } ; position in 2012 - 13 } ; hop { filter_eq { all_rows ; club ; citizen } ; position in 2012 - 13 } }, interpretation: select the rows whose club record fuzzily matches to biu chun rangers . take the position in 2012 - 13 record of this row . select the rows whose club record fuzzily matches to citizen . take the position in 2012 - 13 record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; biu chun rangers } ; position in 2012 - 13 } ; hop { filter_eq { all_rows ; club ; citizen } ; position in 2012 - 13 } }, interpretation: select the rows whose winner record fuzzily matches to john bowe . there is only one such row in the table . the race title record of this unqiue row is winton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winner ; john bowe } } ; eq { hop { filter_eq { all_rows ; winner ; john bowe } ; race title } ; winton } }, interpretation: select the rows whose winner record fuzzily matches to john bowe . there is only one such row in the table . the race title record of this unqiue row is winton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winner ; john bowe } } ; eq { hop { filter_eq { all_rows ; winner ; john bowe } ; race title } ; winton } }, interpretation: select the rows whose club record fuzzily matches to malm\u00f6 ff . take the allsvenskan titles record of this row . select the rows whose club record fuzzily matches to ifk g\u00f6teborg . take the allsvenskan titles record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; malm\u00f6 ff } ; allsvenskan titles } ; hop { filter_eq { all_rows ; club ; ifk g\u00f6teborg } ; allsvenskan titles } }, interpretation: select the rows whose club record fuzzily matches to malm\u00f6 ff . take the allsvenskan titles record of this row . select the rows whose club record fuzzily matches to ifk g\u00f6teborg . take the allsvenskan titles record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; malm\u00f6 ff } ; allsvenskan titles } ; hop { filter_eq { all_rows ; club ; ifk g\u00f6teborg } ; allsvenskan titles } }, interpretation: select the rows whose director record fuzzily matches to alan wareing . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; director ; alan wareing } } ; 3 }, interpretation: select the rows whose director record fuzzily matches to alan wareing . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; director ; alan wareing } } ; 3 }, interpretation: select the rows whose director record fuzzily matches to brian kelly . take the title record of this row . select the rows whose director record fuzzily matches to andrew lincoln . take the title record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; director ; brian kelly } ; title } ; hop { filter_eq { all_rows ; director ; andrew lincoln } ; title } }, interpretation: select the rows whose director record fuzzily matches to brian kelly . take the title record of this row . select the rows whose director record fuzzily matches to andrew lincoln . take the title record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; director ; brian kelly } ; title } ; hop { filter_eq { all_rows ; director ; andrew lincoln } ; title } }, interpretation: select the row whose total record of all rows is 3rd maximum . the club record of this row is maidstone united .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 3 } ; club } ; maidstone united }, interpretation: select the row whose total record of all rows is 3rd maximum . the club record of this row is maidstone united .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 3 } ; club } ; maidstone united }, interpretation: the sum of the votes record of all rows is 3383 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; votes } ; 3383 }, interpretation: the sum of the votes record of all rows is 3383 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; votes } ; 3383 }, interpretation: the average of the attendance record of all rows is 15000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 15000 }, interpretation: the average of the attendance record of all rows is 15000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 15000 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose score record is greater than 67 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; country ; united states } ; score ; 67 } } ; 5 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose score record is greater than 67 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; country ; united states } ; score ; 67 } } ; 5 }, interpretation: for the played records of all rows , all of them are equal to 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 30 }, interpretation: for the played records of all rows , all of them are equal to 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 30 }, interpretation: select the rows whose song record fuzzily matches to endless love . take the weeks on top record of this row . select the rows whose song record fuzzily matches to morning train . take the weeks on top record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; song ; endless love } ; weeks on top } ; hop { filter_eq { all_rows ; song ; morning train } ; weeks on top } }, interpretation: select the rows whose song record fuzzily matches to endless love . take the weeks on top record of this row . select the rows whose song record fuzzily matches to morning train . take the weeks on top record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; song ; endless love } ; weeks on top } ; hop { filter_eq { all_rows ; song ; morning train } ; weeks on top } }, interpretation: select the rows whose position record fuzzily matches to running back . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; running back } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to running back . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; running back } } ; 3 }, interpretation: select the rows whose written by record fuzzily matches to shonda rhimes . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; shonda rhimes } } ; 4 }, interpretation: select the rows whose written by record fuzzily matches to shonda rhimes . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; shonda rhimes } } ; 4 }, interpretation: the maximum capacity record of all rows is 41040 . the team record of the row with superlative capacity record is dinamo minsk .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; capacity } ; 41040 } ; eq { hop { argmax { all_rows ; capacity } ; team } ; dinamo minsk } }, interpretation: the maximum capacity record of all rows is 41040 . the team record of the row with superlative capacity record is dinamo minsk .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; capacity } ; 41040 } ; eq { hop { argmax { all_rows ; capacity } ; team } ; dinamo minsk } }, interpretation: the sum of the points record of all rows is 66 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 66 }, interpretation: the sum of the points record of all rows is 66 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 66 }, interpretation: select the rows whose club record fuzzily matches to fk valmiera . take the position record of this row . select the rows whose club record fuzzily matches to fk auda kekava . take the position record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; fk valmiera } ; position } ; hop { filter_eq { all_rows ; club ; fk auda kekava } ; position } }, interpretation: select the rows whose club record fuzzily matches to fk valmiera . take the position record of this row . select the rows whose club record fuzzily matches to fk auda kekava . take the position record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; fk valmiera } ; position } ; hop { filter_eq { all_rows ; club ; fk auda kekava } ; position } }, interpretation: select the rows whose nation record fuzzily matches to great britain ( gbr ) . take the silver record of this row . select the rows whose nation record fuzzily matches to hungary ( hun ) . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; great britain ( gbr ) } ; silver } ; hop { filter_eq { all_rows ; nation ; hungary ( hun ) } ; silver } }, interpretation: select the rows whose nation record fuzzily matches to great britain ( gbr ) . take the silver record of this row . select the rows whose nation record fuzzily matches to hungary ( hun ) . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; great britain ( gbr ) } ; silver } ; hop { filter_eq { all_rows ; nation ; hungary ( hun ) } ; silver } }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the venue record of this row is memorial stadium .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; venue } ; memorial stadium }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the venue record of this row is memorial stadium .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; venue } ; memorial stadium }, interpretation: select the rows whose owner record fuzzily matches to wnetorg . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; owner ; wnetorg } } ; 2 }, interpretation: select the rows whose owner record fuzzily matches to wnetorg . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; owner ; wnetorg } } ; 2 }, interpretation: the minimum games record of all rows is 1938 sydney . the name record of the row with superlative games record is barney henricus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { min { all_rows ; games } ; 1938 sydney } ; eq { hop { argmin { all_rows ; games } ; name } ; barney henricus } }, interpretation: the minimum games record of all rows is 1938 sydney . the name record of the row with superlative games record is barney henricus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { min { all_rows ; games } ; 1938 sydney } ; eq { hop { argmin { all_rows ; games } ; name } ; barney henricus } }, interpretation: the 1st minimum pos record of all rows is 1 . the diff record of the row with 1st minimum pos record is + 176 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; pos ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; pos ; 1 } ; diff } ; + 176 } }, interpretation: the 1st minimum pos record of all rows is 1 . the diff record of the row with 1st minimum pos record is + 176 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; pos ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; pos ; 1 } ; diff } ; + 176 } }, interpretation: select the rows whose high points record fuzzily matches to paul pierce . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high points ; paul pierce } } ; 5 }, interpretation: select the rows whose high points record fuzzily matches to paul pierce . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high points ; paul pierce } } ; 5 }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is george m grant .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; george m grant }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is george m grant .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; george m grant }, interpretation: select the rows whose team record fuzzily matches to new orleans . the sum of the location attendance record of these rows is 27053 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; new orleans } ; location attendance } ; 27053 }, interpretation: select the rows whose team record fuzzily matches to new orleans . the sum of the location attendance record of these rows is 27053 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; team ; new orleans } ; location attendance } ; 27053 }, interpretation: select the rows whose district record fuzzily matches to hisar . the average of the number of electorates ( 2009 ) record of these rows is 132744 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; district ; hisar } ; number of electorates ( 2009 ) } ; 132744 }, interpretation: select the rows whose district record fuzzily matches to hisar . the average of the number of electorates ( 2009 ) record of these rows is 132744 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; district ; hisar } ; number of electorates ( 2009 ) } ; 132744 }, interpretation: select the rows whose score record fuzzily matches to 0 . among these rows , select the rows whose date record fuzzily matches to 19 february . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; 0 } ; date ; 19 february } } ; 4 }, interpretation: select the rows whose score record fuzzily matches to 0 . among these rows , select the rows whose date record fuzzily matches to 19 february . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; score ; 0 } ; date ; 19 february } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 2 }, interpretation: for the president records of all rows , most of them fuzzily match to ray kaduck .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; president ; ray kaduck }, interpretation: for the president records of all rows , most of them fuzzily match to ray kaduck .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; president ; ray kaduck }, interpretation: the sum of the points record of all rows is 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 0 }, interpretation: the sum of the points record of all rows is 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 0 }, interpretation: select the rows whose men 's singles record fuzzily matches to kevin cord\u00f3n . the minimum year record of these rows is 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; men 's singles ; kevin cord\u00f3n } ; year } ; 2009 }, interpretation: select the rows whose men 's singles record fuzzily matches to kevin cord\u00f3n . the minimum year record of these rows is 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; men 's singles ; kevin cord\u00f3n } ; year } ; 2009 }, interpretation: select the rows whose written by record fuzzily matches to john sullivan . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; john sullivan } } ; 4 }, interpretation: select the rows whose written by record fuzzily matches to john sullivan . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; john sullivan } } ; 4 }, interpretation: select the rows whose tv station record fuzzily matches to fuji tv . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv station ; fuji tv } } ; 5 }, interpretation: select the rows whose tv station record fuzzily matches to fuji tv . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv station ; fuji tv } } ; 5 }, interpretation: for the final - rank records of all rows , most of them are less than or equal to 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less_eq { all_rows ; final - rank ; 5 }, interpretation: for the final - rank records of all rows , most of them are less than or equal to 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less_eq { all_rows ; final - rank ; 5 }, interpretation: select the rows whose start date / time record fuzzily matches to july . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; start date / time ; july } }, interpretation: select the rows whose start date / time record fuzzily matches to july . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; start date / time ; july } }, interpretation: select the row whose date first lit record of all rows is 1st minimum . the lighthouse record of this row is pasig river light ( 1 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date first lit ; 1 } ; lighthouse } ; pasig river light ( 1 ) }, interpretation: select the row whose date first lit record of all rows is 1st minimum . the lighthouse record of this row is pasig river light ( 1 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date first lit ; 1 } ; lighthouse } ; pasig river light ( 1 ) }, interpretation: select the row whose win / loss record of all rows is 4th maximum . the season record of this row is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win / loss ; 4 } ; season } ; 2006 }, interpretation: select the row whose win / loss record of all rows is 4th maximum . the season record of this row is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win / loss ; 4 } ; season } ; 2006 }, interpretation: select the row whose founded record of all rows is 3rd minimum . the institution record of this row is university of california , davis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; founded ; 3 } ; institution } ; university of california , davis }, interpretation: select the row whose founded record of all rows is 3rd minimum . the institution record of this row is university of california , davis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; founded ; 3 } ; institution } ; university of california , davis }, interpretation: for the character records of all rows , most of them fuzzily match to craven .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; character ; craven }, interpretation: for the character records of all rows , most of them fuzzily match to craven .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; character ; craven }, interpretation: select the rows whose date record fuzzily matches to october . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; october } } ; 5 }, interpretation: select the rows whose date record fuzzily matches to october . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; october } } ; 5 }, interpretation: select the rows whose version record fuzzily matches to maxi remix . take the length record of this row . select the rows whose version record fuzzily matches to single version . take the length record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; version ; maxi remix } ; length } ; hop { filter_eq { all_rows ; version ; single version } ; length } }, interpretation: select the rows whose version record fuzzily matches to maxi remix . take the length record of this row . select the rows whose version record fuzzily matches to single version . take the length record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; version ; maxi remix } ; length } ; hop { filter_eq { all_rows ; version ; single version } ; length } }, interpretation: select the row whose tenure record of all rows is 5th minimum . the school record of this row is coventry .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; tenure ; 5 } ; school } ; coventry }, interpretation: select the row whose tenure record of all rows is 5th minimum . the school record of this row is coventry .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; tenure ; 5 } ; school } ; coventry }, interpretation: select the rows whose introduced record is equal to 1958 . for the withdrawn records of these rows , most of them are less than 1970 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; introduced ; 1958 } ; withdrawn ; 1970 }, interpretation: select the rows whose introduced record is equal to 1958 . for the withdrawn records of these rows , most of them are less than 1970 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; introduced ; 1958 } ; withdrawn ; 1970 }, interpretation: select the rows whose crowd record is greater than 20000 . among these rows , select the rows whose home team score record is greater than 10 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; crowd ; 20000 } ; home team score ; 10 } } ; 2 }, interpretation: select the rows whose crowd record is greater than 20000 . among these rows , select the rows whose home team score record is greater than 10 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; crowd ; 20000 } ; home team score ; 10 } } ; 2 }, interpretation: the minimum place record of all rows is 1 . the dancers record of the row with superlative place record is katja koukkula & jussi v\u00e4\u00e4n\u00e4nen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { min { all_rows ; place } ; 1 } ; eq { hop { argmin { all_rows ; place } ; dancers } ; katja koukkula & jussi v\u00e4\u00e4n\u00e4nen } }, interpretation: the minimum place record of all rows is 1 . the dancers record of the row with superlative place record is katja koukkula & jussi v\u00e4\u00e4n\u00e4nen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { min { all_rows ; place } ; 1 } ; eq { hop { argmin { all_rows ; place } ; dancers } ; katja koukkula & jussi v\u00e4\u00e4n\u00e4nen } }, interpretation: select the rows whose title record fuzzily matches to dirty dancing . take the gross record of this row . select the rows whose title record fuzzily matches to good morning , vietnam . take the gross record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; dirty dancing } ; gross } ; hop { filter_eq { all_rows ; title ; good morning , vietnam } ; gross } }, interpretation: select the rows whose title record fuzzily matches to dirty dancing . take the gross record of this row . select the rows whose title record fuzzily matches to good morning , vietnam . take the gross record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; dirty dancing } ; gross } ; hop { filter_eq { all_rows ; title ; good morning , vietnam } ; gross } }, interpretation: select the rows whose writer / composer record fuzzily matches to ken walther . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; writer / composer ; ken walther } } ; 2 }, interpretation: select the rows whose writer / composer record fuzzily matches to ken walther . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; writer / composer ; ken walther } } ; 2 }, interpretation: for the reason for change records of all rows , all of them fuzzily match to died .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; reason for change ; died }, interpretation: for the reason for change records of all rows , all of them fuzzily match to died .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; reason for change ; died }, interpretation: for the result records of all rows , most of them are greater than or equal to 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; result ; 10 }, interpretation: for the result records of all rows , most of them are greater than or equal to 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; result ; 10 }, interpretation: the sum of the laps record of all rows is 974 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 974 }, interpretation: the sum of the laps record of all rows is 974 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 974 }, interpretation: select the rows whose home team record fuzzily matches to geelong . take the crowd record of this row . select the rows whose home team record fuzzily matches to melbourne . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; geelong } ; crowd } ; hop { filter_eq { all_rows ; home team ; melbourne } ; crowd } }, interpretation: select the rows whose home team record fuzzily matches to geelong . take the crowd record of this row . select the rows whose home team record fuzzily matches to melbourne . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; geelong } ; crowd } ; hop { filter_eq { all_rows ; home team ; melbourne } ; crowd } }, interpretation: for the home records of all rows , most of them fuzzily match to philadelphia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; home ; philadelphia }, interpretation: for the home records of all rows , most of them fuzzily match to philadelphia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; home ; philadelphia }, interpretation: the average of the total record of all rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 3 }, interpretation: the average of the total record of all rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 3 }, interpretation: select the rows whose college record fuzzily matches to north carolina . select the row whose height record of these rows is maximum . the player record of this row is jeff lebo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; college ; north carolina } ; height } ; player } ; jeff lebo }, interpretation: select the rows whose college record fuzzily matches to north carolina . select the row whose height record of these rows is maximum . the player record of this row is jeff lebo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; college ; north carolina } ; height } ; player } ; jeff lebo }, interpretation: select the rows whose title record fuzzily matches to bamboo blade . take the last issue record of this row . select the rows whose title record fuzzily matches to black butler . take the last issue record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; bamboo blade } ; last issue } ; hop { filter_eq { all_rows ; title ; black butler } ; last issue } }, interpretation: select the rows whose title record fuzzily matches to bamboo blade . take the last issue record of this row . select the rows whose title record fuzzily matches to black butler . take the last issue record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; bamboo blade } ; last issue } ; hop { filter_eq { all_rows ; title ; black butler } ; last issue } }, interpretation: for the qual 2 records of all rows , most of them are not equal to - .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; qual 2 ; - }, interpretation: for the qual 2 records of all rows , most of them are not equal to - .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; qual 2 ; - }, interpretation: the sum of the canadian chapters record of all rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; canadian chapters } ; 48 }, interpretation: the sum of the canadian chapters record of all rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; canadian chapters } ; 48 }, interpretation: the average of the finish position record of all rows is 29.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish position } ; 29.8 }, interpretation: the average of the finish position record of all rows is 29.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish position } ; 29.8 }, interpretation: select the rows whose pole position record fuzzily matches to alain prost . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole position ; alain prost } } ; 2 }, interpretation: select the rows whose pole position record fuzzily matches to alain prost . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole position ; alain prost } } ; 2 }, interpretation: select the rows whose week record is greater than or equal to 13 . the sum of the attendance record of these rows is 95,901 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; week ; 13 } ; attendance } ; 95,901 }, interpretation: select the rows whose week record is greater than or equal to 13 . the sum of the attendance record of these rows is 95,901 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; week ; 13 } ; attendance } ; 95,901 }, interpretation: for the country records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; united states }, interpretation: for the country records of all rows , all of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; united states }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: select the rows whose competition record fuzzily matches to world cup qualification . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; world cup qualification } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to world cup qualification . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; world cup qualification } } ; 2 }, interpretation: select the rows whose position record is greater than 0 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; position ; 0 } } ; 6 }, interpretation: select the rows whose position record is greater than 0 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; position ; 0 } } ; 6 }, interpretation: select the rows whose 2nd evening record fuzzily matches to n / a . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2nd evening ; n / a } } ; 3 }, interpretation: select the rows whose 2nd evening record fuzzily matches to n / a . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 2nd evening ; n / a } } ; 3 }, interpretation: the average of the maidens record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; maidens } ; 2 }, interpretation: the average of the maidens record of all rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; maidens } ; 2 }, interpretation: select the rows whose won record is less than or equal to 5 . the sum of the points record of these rows is 75 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less_eq { all_rows ; won ; 5 } ; points } ; 75 }, interpretation: select the rows whose won record is less than or equal to 5 . the sum of the points record of these rows is 75 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less_eq { all_rows ; won ; 5 } ; points } ; 75 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 12 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 12 }, interpretation: select the rows whose competition record fuzzily matches to 2000 concacaf gold cup . there is only one such row in the table . the date record of this unqiue row is february 12 , 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; 2000 concacaf gold cup } } ; eq { hop { filter_eq { all_rows ; competition ; 2000 concacaf gold cup } ; date } ; february 12 , 2000 } }, interpretation: select the rows whose competition record fuzzily matches to 2000 concacaf gold cup . there is only one such row in the table . the date record of this unqiue row is february 12 , 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; 2000 concacaf gold cup } } ; eq { hop { filter_eq { all_rows ; competition ; 2000 concacaf gold cup } ; date } ; february 12 , 2000 } }, interpretation: select the row whose slalom record of all rows is 3rd maximum . the season record of this row is 1996 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; slalom ; 3 } ; season } ; 1996 }, interpretation: select the row whose slalom record of all rows is 3rd maximum . the season record of this row is 1996 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; slalom ; 3 } ; season } ; 1996 }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: select the rows whose score record fuzzily matches to l . select the row whose date record of these rows is 3rd minimum . the attendance record of this row is 11741 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; score ; l } ; date ; 3 } ; attendance } ; 11741 }, interpretation: select the rows whose score record fuzzily matches to l . select the row whose date record of these rows is 3rd minimum . the attendance record of this row is 11741 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; score ; l } ; date ; 3 } ; attendance } ; 11741 }, interpretation: for the seat percentage records of all rows , most of them are equal to 0.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; seat percentage ; 0.0 }, interpretation: for the seat percentage records of all rows , most of them are equal to 0.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; seat percentage ; 0.0 }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is princes park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; princes park }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is princes park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; princes park }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose money record is greater than 1999 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; country ; united states } ; money ; 1999 } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose money record is greater than 1999 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; country ; united states } ; money ; 1999 } } ; 3 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is november 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; november 22 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is november 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; november 22 }, interpretation: select the rows whose scanning record fuzzily matches to interlaced . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; scanning ; interlaced } } ; 2 }, interpretation: select the rows whose scanning record fuzzily matches to interlaced . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; scanning ; interlaced } } ; 2 }, interpretation: select the rows whose rufus guest record fuzzily matches to jimmy carr . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rufus guest ; jimmy carr } } ; 1 }, interpretation: select the rows whose rufus guest record fuzzily matches to jimmy carr . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rufus guest ; jimmy carr } } ; 1 }, interpretation: select the row whose attendance record of all rows is maximum . the week record of this row is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; week } ; 11 }, interpretation: select the row whose attendance record of all rows is maximum . the week record of this row is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; week } ; 11 }, interpretation: select the rows whose name record fuzzily matches to arthur ashe . take the matches played record of this row . select the rows whose name record fuzzily matches to mark cox . take the matches played record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; arthur ashe } ; matches played } ; hop { filter_eq { all_rows ; name ; mark cox } ; matches played } }, interpretation: select the rows whose name record fuzzily matches to arthur ashe . take the matches played record of this row . select the rows whose name record fuzzily matches to mark cox . take the matches played record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; arthur ashe } ; matches played } ; hop { filter_eq { all_rows ; name ; mark cox } ; matches played } }, interpretation: select the rows whose country record fuzzily matches to south africa . there is only one such row in the table . the player record of this unqiue row is wayne westner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; south africa } } ; eq { hop { filter_eq { all_rows ; country ; south africa } ; player } ; wayne westner } }, interpretation: select the rows whose country record fuzzily matches to south africa . there is only one such row in the table . the player record of this unqiue row is wayne westner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; south africa } } ; eq { hop { filter_eq { all_rows ; country ; south africa } ; player } ; wayne westner } }, interpretation: select the rows whose date record fuzzily matches to october . among these rows , select the rows whose date record fuzzily matches to october . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; october } ; date ; october } } ; 5 }, interpretation: select the rows whose date record fuzzily matches to october . among these rows , select the rows whose date record fuzzily matches to october . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; october } ; date ; october } } ; 5 }, interpretation: for the position records of all rows , most of them fuzzily match to rhp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; rhp }, interpretation: for the position records of all rows , most of them fuzzily match to rhp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; rhp }, interpretation: for the director records of all rows , most of them fuzzily match to paul gay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; director ; paul gay }, interpretation: for the director records of all rows , most of them fuzzily match to paul gay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; director ; paul gay }, interpretation: for the average attendance home records of all rows , most of them are less than 3200 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; average attendance home ; 3200 }, interpretation: for the average attendance home records of all rows , most of them are less than 3200 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; average attendance home ; 3200 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 6 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 6 }, interpretation: select the rows whose tag team record fuzzily matches to rosey and the hurricane . take the eliminated record of this row . select the rows whose tag team record fuzzily matches to jindrak and cade . take the eliminated record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tag team ; rosey and the hurricane } ; eliminated } ; hop { filter_eq { all_rows ; tag team ; jindrak and cade } ; eliminated } }, interpretation: select the rows whose tag team record fuzzily matches to rosey and the hurricane . take the eliminated record of this row . select the rows whose tag team record fuzzily matches to jindrak and cade . take the eliminated record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tag team ; rosey and the hurricane } ; eliminated } ; hop { filter_eq { all_rows ; tag team ; jindrak and cade } ; eliminated } }, interpretation: the average of the viewing figure record of all rows is 6.73 million .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewing figure } ; 6.73 million }, interpretation: the average of the viewing figure record of all rows is 6.73 million .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewing figure } ; 6.73 million }, interpretation: the average of the blank ends record of all rows is 7.64 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blank ends } ; 7.64 }, interpretation: the average of the blank ends record of all rows is 7.64 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blank ends } ; 7.64 }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is mel watt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; mel watt }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is mel watt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; mel watt }, interpretation: select the rows whose total elected 2001 record is equal to 0 . there is only one such row in the table . the party record of this unqiue row is independents .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; total elected 2001 ; 0 } } ; eq { hop { filter_eq { all_rows ; total elected 2001 ; 0 } ; party } ; independents } }, interpretation: select the rows whose total elected 2001 record is equal to 0 . there is only one such row in the table . the party record of this unqiue row is independents .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; total elected 2001 ; 0 } } ; eq { hop { filter_eq { all_rows ; total elected 2001 ; 0 } ; party } ; independents } }, interpretation: select the row whose platforms record of all rows is minimum . the stations record of this row is wellesley road tram stop .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; platforms } ; stations } ; wellesley road tram stop }, interpretation: select the row whose platforms record of all rows is minimum . the stations record of this row is wellesley road tram stop .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; platforms } ; stations } ; wellesley road tram stop }, interpretation: select the rows whose segment b record fuzzily matches to cheesecake . there is only one such row in the table . the series ep record of this unqiue row is 9 - 01 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment b ; cheesecake } } ; eq { hop { filter_eq { all_rows ; segment b ; cheesecake } ; series ep } ; 9 - 01 } }, interpretation: select the rows whose segment b record fuzzily matches to cheesecake . there is only one such row in the table . the series ep record of this unqiue row is 9 - 01 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment b ; cheesecake } } ; eq { hop { filter_eq { all_rows ; segment b ; cheesecake } ; series ep } ; 9 - 01 } }, interpretation: select the rows whose event record fuzzily matches to 10000 m . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; event ; 10000 m } } ; 3 }, interpretation: select the rows whose event record fuzzily matches to 10000 m . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; event ; 10000 m } } ; 3 }, interpretation: select the rows whose date record is equal to - . there is only one such row in the table . the week record of this unqiue row is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; - } } ; eq { hop { filter_eq { all_rows ; date ; - } ; week } ; 9 } }, interpretation: select the rows whose date record is equal to - . there is only one such row in the table . the week record of this unqiue row is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; - } } ; eq { hop { filter_eq { all_rows ; date ; - } ; week } ; 9 } }, interpretation: select the rows whose record record fuzzily matches to 3 - 3 . there is only one such row in the table . the high points record of this unqiue row is lebron james ( 25 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; record ; 3 - 3 } } ; eq { hop { filter_eq { all_rows ; record ; 3 - 3 } ; high points } ; lebron james ( 25 ) } }, interpretation: select the rows whose record record fuzzily matches to 3 - 3 . there is only one such row in the table . the high points record of this unqiue row is lebron james ( 25 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; record ; 3 - 3 } } ; eq { hop { filter_eq { all_rows ; record ; 3 - 3 } ; high points } ; lebron james ( 25 ) } }, interpretation: select the rows whose location record fuzzily matches to pennsylvania . there is only one such row in the table . the institution record of this unqiue row is penn state - harrisburg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; pennsylvania } } ; eq { hop { filter_eq { all_rows ; location ; pennsylvania } ; institution } ; penn state - harrisburg } }, interpretation: select the rows whose location record fuzzily matches to pennsylvania . there is only one such row in the table . the institution record of this unqiue row is penn state - harrisburg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; pennsylvania } } ; eq { hop { filter_eq { all_rows ; location ; pennsylvania } ; institution } ; penn state - harrisburg } }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: select the rows whose place record fuzzily matches to 3rd . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ; 3rd } } ; 5 }, interpretation: select the rows whose place record fuzzily matches to 3rd . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ; 3rd } } ; 5 }, interpretation: the average of the points record of all rows is 15.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 15.5 }, interpretation: the average of the points record of all rows is 15.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 15.5 }, interpretation: select the rows whose date record fuzzily matches to december . for the attendance records of these rows , most of them are less than 67000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; date ; december } ; attendance ; 67000 }, interpretation: select the rows whose date record fuzzily matches to december . for the attendance records of these rows , most of them are less than 67000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; date ; december } ; attendance ; 67000 }, interpretation: the sum of the points record of all rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 5 }, interpretation: the sum of the points record of all rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 5 }, interpretation: for the type records of all rows , most of them fuzzily match to village .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; village }, interpretation: for the type records of all rows , most of them fuzzily match to village .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; village }, interpretation: select the rows whose player record fuzzily matches to jason gore . take the to par record of this row . select the rows whose player record fuzzily matches to mark hensby . take the to par record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; jason gore } ; to par } ; hop { filter_eq { all_rows ; player ; mark hensby } ; to par } }, interpretation: select the rows whose player record fuzzily matches to jason gore . take the to par record of this row . select the rows whose player record fuzzily matches to mark hensby . take the to par record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; jason gore } ; to par } ; hop { filter_eq { all_rows ; player ; mark hensby } ; to par } }, interpretation: for the dominant religion ( 2002 ) records of all rows , most of them fuzzily match to orthodox christianity .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity }, interpretation: for the dominant religion ( 2002 ) records of all rows , most of them fuzzily match to orthodox christianity .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity }, interpretation: select the rows whose location record fuzzily matches to nijmegen . among these rows , select the rows whose traction type record fuzzily matches to electric . there is only one such row in the table . the date ( from ) record of this unqiue row is 4 june 1911 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; nijmegen } ; traction type ; electric } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; nijmegen } ; traction type ; electric } ; date ( from ) } ; 4 june 1911 } }, interpretation: select the rows whose location record fuzzily matches to nijmegen . among these rows , select the rows whose traction type record fuzzily matches to electric . there is only one such row in the table . the date ( from ) record of this unqiue row is 4 june 1911 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; nijmegen } ; traction type ; electric } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; nijmegen } ; traction type ; electric } ; date ( from ) } ; 4 june 1911 } }, interpretation: the 1st minimum original airdate record of all rows is january 5 , 2000 . the iron chef record of the row with 1st minimum original airdate record is chen kenichi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; original airdate ; 1 } ; january 5 , 2000 } ; eq { hop { nth_argmin { all_rows ; original airdate ; 1 } ; iron chef } ; chen kenichi } }, interpretation: the 1st minimum original airdate record of all rows is january 5 , 2000 . the iron chef record of the row with 1st minimum original airdate record is chen kenichi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; original airdate ; 1 } ; january 5 , 2000 } ; eq { hop { nth_argmin { all_rows ; original airdate ; 1 } ; iron chef } ; chen kenichi } }, interpretation: select the rows whose date record fuzzily matches to 1995 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 1995 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 1995 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 1995 } } ; 2 }, interpretation: select the row whose year record of all rows is 2nd minimum . the series title record of this row is dragon laws ii : kidnapped .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; series title } ; dragon laws ii : kidnapped }, interpretation: select the row whose year record of all rows is 2nd minimum . the series title record of this row is dragon laws ii : kidnapped .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; series title } ; dragon laws ii : kidnapped }, interpretation: the maximum frequency record of all rows is 1000 mhz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; frequency } ; 1000 mhz }, interpretation: the maximum frequency record of all rows is 1000 mhz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; frequency } ; 1000 mhz }, interpretation: select the row whose length record of all rows is 3rd maximum . the model record of this row is flxible 35096 - 6 - 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; length ; 3 } ; model } ; flxible 35096 - 6 - 1 }, interpretation: select the row whose length record of all rows is 3rd maximum . the model record of this row is flxible 35096 - 6 - 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; length ; 3 } ; model } ; flxible 35096 - 6 - 1 }, interpretation: for the withdrawn records of all rows , most of them are equal to 1951 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; withdrawn ; 1951 }, interpretation: for the withdrawn records of all rows , most of them are equal to 1951 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; withdrawn ; 1951 }, interpretation: for the date records of all rows , all of them fuzzily match to 31 july 1954 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 31 july 1954 }, interpretation: for the date records of all rows , all of them fuzzily match to 31 july 1954 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 31 july 1954 }, interpretation: the average of the crowd record of all rows is 24662 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24662 }, interpretation: the average of the crowd record of all rows is 24662 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24662 }, interpretation: select the rows whose class record fuzzily matches to d . the average of the quantity record of these rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; class ; d } ; quantity } ; 48 }, interpretation: select the rows whose class record fuzzily matches to d . the average of the quantity record of these rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; class ; d } ; quantity } ; 48 }, interpretation: select the rows whose location record fuzzily matches to south africa . there is only one such row in the table . the name record of this unqiue row is likhoelesaurus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; south africa } } ; eq { hop { filter_eq { all_rows ; location ; south africa } ; name } ; likhoelesaurus } }, interpretation: select the rows whose location record fuzzily matches to south africa . there is only one such row in the table . the name record of this unqiue row is likhoelesaurus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; south africa } } ; eq { hop { filter_eq { all_rows ; location ; south africa } ; name } ; likhoelesaurus } }, interpretation: select the row whose floors record of all rows is 2nd maximum . the name record of this row is aul tower .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; floors ; 2 } ; name } ; aul tower }, interpretation: select the row whose floors record of all rows is 2nd maximum . the name record of this row is aul tower .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; floors ; 2 } ; name } ; aul tower }, interpretation: select the rows whose gold record is greater than 100 . there is only one such row in the table . the province record of this unqiue row is bangkok .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; gold ; 100 } } ; eq { hop { filter_greater { all_rows ; gold ; 100 } ; province } ; bangkok } }, interpretation: select the rows whose gold record is greater than 100 . there is only one such row in the table . the province record of this unqiue row is bangkok .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; gold ; 100 } } ; eq { hop { filter_greater { all_rows ; gold ; 100 } ; province } ; bangkok } }, interpretation: select the rows whose current affiliation record fuzzily matches to cbs owned - and - operated ( o & o ) . among these rows , select the rows whose city of license / market record fuzzily matches to pittsburgh . there is only one such row in the table . the station record of this unqiue row is kdka - tv .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; current affiliation ; cbs owned - and - operated ( o & o ) } ; city of license / market ; pittsburgh } } ; eq { hop { filter_eq { filter_eq { all_rows ; current affiliation ; cbs owned - and - operated ( o & o ) } ; city of license / market ; pittsburgh } ; station } ; kdka - tv } }, interpretation: select the rows whose current affiliation record fuzzily matches to cbs owned - and - operated ( o & o ) . among these rows , select the rows whose city of license / market record fuzzily matches to pittsburgh . there is only one such row in the table . the station record of this unqiue row is kdka - tv .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; current affiliation ; cbs owned - and - operated ( o & o ) } ; city of license / market ; pittsburgh } } ; eq { hop { filter_eq { filter_eq { all_rows ; current affiliation ; cbs owned - and - operated ( o & o ) } ; city of license / market ; pittsburgh } ; station } ; kdka - tv } }, interpretation: select the rows whose incumbent record fuzzily matches to wilbur mills . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james william trimble . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; wilbur mills } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james william trimble } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to wilbur mills . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james william trimble . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; wilbur mills } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james william trimble } ; first elected } }, interpretation: for the rebuilt records of all rows , most of them are less than 1930 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; rebuilt ; 1930 }, interpretation: for the rebuilt records of all rows , most of them are less than 1930 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; rebuilt ; 1930 }, interpretation: select the row whose sales record of all rows is maximum . the title record of this row is m .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; sales } ; title } ; m }, interpretation: select the row whose sales record of all rows is maximum . the title record of this row is m .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; sales } ; title } ; m }, interpretation: select the rows whose date record fuzzily matches to december . the average of the score record of these rows is 104.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; date ; december } ; score } ; 104.6 }, interpretation: select the rows whose date record fuzzily matches to december . the average of the score record of these rows is 104.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; date ; december } ; score } ; 104.6 }, interpretation: select the rows whose position record fuzzily matches to lb . select the row whose overall record of these rows is minimum . the name record of this row is cody glenn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; position ; lb } ; overall } ; name } ; cody glenn }, interpretation: select the rows whose position record fuzzily matches to lb . select the row whose overall record of these rows is minimum . the name record of this row is cody glenn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; position ; lb } ; overall } ; name } ; cody glenn }, interpretation: select the rows whose appointed record fuzzily matches to resigned . there is only one such row in the table . the candidate record of this unqiue row is link byfield .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; appointed ; resigned } } ; eq { hop { filter_eq { all_rows ; appointed ; resigned } ; candidate } ; link byfield } }, interpretation: select the rows whose appointed record fuzzily matches to resigned . there is only one such row in the table . the candidate record of this unqiue row is link byfield .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; appointed ; resigned } } ; eq { hop { filter_eq { all_rows ; appointed ; resigned } ; candidate } ; link byfield } }, interpretation: for the quarterfinals records of all rows , most of them fuzzily match to did not advance .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; quarterfinals ; did not advance }, interpretation: for the quarterfinals records of all rows , most of them fuzzily match to did not advance .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; quarterfinals ; did not advance }, interpretation: the average of the attendance record of all rows is 50540 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 50540 }, interpretation: the average of the attendance record of all rows is 50540 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 50540 }, interpretation: for the outcome records of all rows , most of them fuzzily match to winner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; winner }, interpretation: for the outcome records of all rows , most of them fuzzily match to winner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; winner }, interpretation: the average of the first elected record of all rows is 1953.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; first elected } ; 1953.5 }, interpretation: the average of the first elected record of all rows is 1953.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; first elected } ; 1953.5 }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; soviet union }, interpretation: select the row whose silver record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; silver } ; nation } ; soviet union }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is southern university at new orleans .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; southern university at new orleans }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is southern university at new orleans .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; southern university at new orleans }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; october } ; result ; l }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; october } ; result ; l }, interpretation: select the row whose area km 2 record of all rows is maximum . the official name record of this row is kent .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; area km 2 } ; official name } ; kent }, interpretation: select the row whose area km 2 record of all rows is maximum . the official name record of this row is kent .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; area km 2 } ; official name } ; kent }, interpretation: select the rows whose visitor record fuzzily matches to colorado . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; visitor ; colorado } } ; 3 }, interpretation: select the rows whose visitor record fuzzily matches to colorado . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; visitor ; colorado } } ; 3 }, interpretation: the average of the score record of all rows is 70 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 70 }, interpretation: the average of the score record of all rows is 70 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 70 }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is princes park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; princes park }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is princes park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; princes park }, interpretation: for the award ceremony records of all rows , most of them fuzzily match to drama desk award .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; award ceremony ; drama desk award }, interpretation: for the award ceremony records of all rows , most of them fuzzily match to drama desk award .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; award ceremony ; drama desk award }, interpretation: select the rows whose age record is equal to 8 . among these rows , select the rows whose sp record fuzzily matches to 20 / 1 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; age ; 8 } ; sp ; 20 / 1 } } ; 1 }, interpretation: select the rows whose age record is equal to 8 . among these rows , select the rows whose sp record fuzzily matches to 20 / 1 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; age ; 8 } ; sp ; 20 / 1 } } ; 1 }, interpretation: select the rows whose directed by record fuzzily matches to win phelps . among these rows , select the rows whose written by record fuzzily matches to david e kelley and william m finkelstein . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; win phelps } ; written by ; david e kelley and william m finkelstein } } ; 2 }, interpretation: select the rows whose directed by record fuzzily matches to win phelps . among these rows , select the rows whose written by record fuzzily matches to david e kelley and william m finkelstein . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; win phelps } ; written by ; david e kelley and william m finkelstein } } ; 2 }, interpretation: select the rows whose place ( result ) record fuzzily matches to 1st runner - up . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ( result ) ; 1st runner - up } } ; 2 }, interpretation: select the rows whose place ( result ) record fuzzily matches to 1st runner - up . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; place ( result ) ; 1st runner - up } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . there is only one such row in the table . the game record of this unqiue row is 36 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; chicago blackhawks } } ; eq { hop { filter_eq { all_rows ; opponent ; chicago blackhawks } ; game } ; 36 } }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . there is only one such row in the table . the game record of this unqiue row is 36 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; chicago blackhawks } } ; eq { hop { filter_eq { all_rows ; opponent ; chicago blackhawks } ; game } ; 36 } }, interpretation: select the row whose crowd record of all rows is maximum . the home team record of this row is carlton . the away team record of this row is richmond .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; crowd } ; home team } ; carlton } ; eq { hop { argmax { all_rows ; crowd } ; away team } ; richmond } }, interpretation: select the row whose crowd record of all rows is maximum . the home team record of this row is carlton . the away team record of this row is richmond .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; crowd } ; home team } ; carlton } ; eq { hop { argmax { all_rows ; crowd } ; away team } ; richmond } }, interpretation: select the rows whose venue record fuzzily matches to vicente calder\u00f3n . take the capacity record of this row . select the rows whose venue record fuzzily matches to estadio de vallecas . take the capacity record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; vicente calder\u00f3n } ; capacity } ; hop { filter_eq { all_rows ; venue ; estadio de vallecas } ; capacity } }, interpretation: select the rows whose venue record fuzzily matches to vicente calder\u00f3n . take the capacity record of this row . select the rows whose venue record fuzzily matches to estadio de vallecas . take the capacity record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; vicente calder\u00f3n } ; capacity } ; hop { filter_eq { all_rows ; venue ; estadio de vallecas } ; capacity } }, interpretation: select the row whose time ( et ) record of all rows is maximum . the week record of this row is 9 . the opponent record of this row is pittsburgh steelers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; time ( et ) } ; week } ; 9 } ; eq { hop { argmax { all_rows ; time ( et ) } ; opponent } ; pittsburgh steelers } }, interpretation: select the row whose time ( et ) record of all rows is maximum . the week record of this row is 9 . the opponent record of this row is pittsburgh steelers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; time ( et ) } ; week } ; 9 } ; eq { hop { argmax { all_rows ; time ( et ) } ; opponent } ; pittsburgh steelers } }, interpretation: the sum of the score record of all rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 14 }, interpretation: the sum of the score record of all rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 14 }, interpretation: select the rows whose college record fuzzily matches to north carolina . for the nba draft records of these rows , all of them fuzzily match to undrafted .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; college ; north carolina } ; nba draft ; undrafted }, interpretation: select the rows whose college record fuzzily matches to north carolina . for the nba draft records of these rows , all of them fuzzily match to undrafted .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; college ; north carolina } ; nba draft ; undrafted }, interpretation: select the rows whose shot pct record is greater than or equal to 80 % . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; shot pct ; 80 % } } ; 3 }, interpretation: select the rows whose shot pct record is greater than or equal to 80 % . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; shot pct ; 80 % } } ; 3 }, interpretation: the sum of the money record of all rows is $ 3,164,543 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; money } ; $ 3,164,543 }, interpretation: the sum of the money record of all rows is $ 3,164,543 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; money } ; $ 3,164,543 }, interpretation: select the rows whose album record fuzzily matches to american gangster . take the 1st week sales record of this row . select the rows whose album record fuzzily matches to from nothin ' to somethin' . take the 1st week sales record of this row . the first record is greater than the second record . the 1st week sales record of the first row is 426000 . the 1st week sales record of the second row is 159000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; album ; american gangster } ; 1st week sales } ; hop { filter_eq { all_rows ; album ; from nothin ' to somethin' } ; 1st week sales } } ; and { eq { hop { filter_eq { all_rows ; album ; american gangster } ; 1st week sales } ; 426000 } ; eq { hop { filter_eq { all_rows ; album ; from nothin ' to somethin' } ; 1st week sales } ; 159000 } } }, interpretation: select the rows whose album record fuzzily matches to american gangster . take the 1st week sales record of this row . select the rows whose album record fuzzily matches to from nothin ' to somethin' . take the 1st week sales record of this row . the first record is greater than the second record . the 1st week sales record of the first row is 426000 . the 1st week sales record of the second row is 159000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; album ; american gangster } ; 1st week sales } ; hop { filter_eq { all_rows ; album ; from nothin ' to somethin' } ; 1st week sales } } ; and { eq { hop { filter_eq { all_rows ; album ; american gangster } ; 1st week sales } ; 426000 } ; eq { hop { filter_eq { all_rows ; album ; from nothin ' to somethin' } ; 1st week sales } ; 159000 } } }, interpretation: the 1st minimum year record of all rows is 1996 . the year record of the row with 1st minimum year record is 1996 . the category record of the row with 1st minimum year record is 60 minute category . the result record of the row with 1st minimum year record is nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 1 } ; 1996 } ; and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; year } ; 1996 } ; and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; category } ; 60 minute category } ; eq { hop { nth_argmin { all_rows ; year ; 1 } ; result } ; nominated } } } }, interpretation: the 1st minimum year record of all rows is 1996 . the year record of the row with 1st minimum year record is 1996 . the category record of the row with 1st minimum year record is 60 minute category . the result record of the row with 1st minimum year record is nominated .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 1 } ; 1996 } ; and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; year } ; 1996 } ; and { eq { hop { nth_argmin { all_rows ; year ; 1 } ; category } ; 60 minute category } ; eq { hop { nth_argmin { all_rows ; year ; 1 } ; result } ; nominated } } } }, interpretation: select the rows whose place record fuzzily matches to t3 . the sum of the money record of these rows is 752 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; place ; t3 } ; money } ; 752 }, interpretation: select the rows whose place record fuzzily matches to t3 . the sum of the money record of these rows is 752 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; place ; t3 } ; money } ; 752 }, interpretation: select the rows whose last appearance record fuzzily matches to today is life . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; last appearance ; today is life } } ; 8 }, interpretation: select the rows whose last appearance record fuzzily matches to today is life . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; last appearance ; today is life } } ; 8 }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is philip r thompson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; philip r thompson }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is philip r thompson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; philip r thompson }, interpretation: the average of the games record of all rows is 70 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; games } ; 70 }, interpretation: the average of the games record of all rows is 70 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; games } ; 70 }, interpretation: the average of the enrolment record of all rows is 831 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrolment } ; 831 }, interpretation: the average of the enrolment record of all rows is 831 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrolment } ; 831 }, interpretation: select the rows whose venue record fuzzily matches to kuwait . take the date record of this row . select the rows whose venue record fuzzily matches to amman . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; kuwait } ; date } ; hop { filter_eq { all_rows ; venue ; amman } ; date } }, interpretation: select the rows whose venue record fuzzily matches to kuwait . take the date record of this row . select the rows whose venue record fuzzily matches to amman . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; kuwait } ; date } ; hop { filter_eq { all_rows ; venue ; amman } ; date } }, interpretation: select the rows whose player record fuzzily matches to mathew goggin . take the money record of this row . select the rows whose player record fuzzily matches to justin leonard . take the money record of this row . the first record is 66600 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; mathew goggin } ; money } ; hop { filter_eq { all_rows ; player ; justin leonard } ; money } } ; 66600 }, interpretation: select the rows whose player record fuzzily matches to mathew goggin . take the money record of this row . select the rows whose player record fuzzily matches to justin leonard . take the money record of this row . the first record is 66600 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; mathew goggin } ; money } ; hop { filter_eq { all_rows ; player ; justin leonard } ; money } } ; 66600 }, interpretation: select the row whose saturated fat record of all rows is 4th maximum . the record of this row is vegetable shortening ( hydrogenated ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; saturated fat ; 4 } ; } ; vegetable shortening ( hydrogenated ) }, interpretation: select the row whose saturated fat record of all rows is 4th maximum . the record of this row is vegetable shortening ( hydrogenated ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; saturated fat ; 4 } ; } ; vegetable shortening ( hydrogenated ) }, interpretation: select the rows whose wins record is equal to 10 . there is only one such row in the table . the club record of this unqiue row is deportivo alav\u00e9s .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 10 } } ; eq { hop { filter_eq { all_rows ; wins ; 10 } ; club } ; deportivo alav\u00e9s } }, interpretation: select the rows whose wins record is equal to 10 . there is only one such row in the table . the club record of this unqiue row is deportivo alav\u00e9s .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 10 } } ; eq { hop { filter_eq { all_rows ; wins ; 10 } ; club } ; deportivo alav\u00e9s } }, interpretation: select the row whose runs record of all rows is maximum . the batsmen record of this row is graham gooch ken mcewan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; runs } ; batsmen } ; graham gooch ken mcewan }, interpretation: select the row whose runs record of all rows is maximum . the batsmen record of this row is graham gooch ken mcewan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; runs } ; batsmen } ; graham gooch ken mcewan }, interpretation: select the rows whose style record fuzzily matches to country - western two - step . there is only one such row in the table . the couple record of this unqiue row is kherington payne mark kanemura .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; style ; country - western two - step } } ; eq { hop { filter_eq { all_rows ; style ; country - western two - step } ; couple } ; kherington payne mark kanemura } }, interpretation: select the rows whose style record fuzzily matches to country - western two - step . there is only one such row in the table . the couple record of this unqiue row is kherington payne mark kanemura .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; style ; country - western two - step } } ; eq { hop { filter_eq { all_rows ; style ; country - western two - step } ; couple } ; kherington payne mark kanemura } }, interpretation: select the rows whose school record fuzzily matches to leo . take the year joined record of this row . select the rows whose school record fuzzily matches to south adams . take the year joined record of this row . the second record is 20 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; school ; leo } ; year joined } ; hop { filter_eq { all_rows ; school ; south adams } ; year joined } } ; -20 years }, interpretation: select the rows whose school record fuzzily matches to leo . take the year joined record of this row . select the rows whose school record fuzzily matches to south adams . take the year joined record of this row . the second record is 20 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; school ; leo } ; year joined } ; hop { filter_eq { all_rows ; school ; south adams } ; year joined } } ; -20 years }, interpretation: select the row whose date of commissioning record of all rows is maximum . the unit number record of this row is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date of commissioning } ; unit number } ; 8 }, interpretation: select the row whose date of commissioning record of all rows is maximum . the unit number record of this row is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date of commissioning } ; unit number } ; 8 }, interpretation: select the rows whose pos record fuzzily matches to dnf . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pos ; dnf } } ; 7 }, interpretation: select the rows whose pos record fuzzily matches to dnf . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pos ; dnf } } ; 7 }, interpretation: select the rows whose outcome record fuzzily matches to runner - up . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; runner - up } } ; 6 }, interpretation: select the rows whose outcome record fuzzily matches to runner - up . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; runner - up } } ; 6 }, interpretation: select the row whose championships record of all rows is 2nd maximum . the teams record of this row is new york nets .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; championships ; 2 } ; teams } ; new york nets }, interpretation: select the row whose championships record of all rows is 2nd maximum . the teams record of this row is new york nets .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; championships ; 2 } ; teams } ; new york nets }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the game record of this row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; game } ; 6 }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the game record of this row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; game } ; 6 }, interpretation: select the rows whose yards record is equal to 39 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; yards ; 39 } } ; 2 }, interpretation: select the rows whose yards record is equal to 39 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; yards ; 39 } } ; 2 }, interpretation: select the rows whose wsu year ( s ) record fuzzily matches to 1959 - 62 . there is only one such row in the table . the name record of this unqiue row is gene wiley .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wsu year ( s ) ; 1959 - 62 } } ; eq { hop { filter_eq { all_rows ; wsu year ( s ) ; 1959 - 62 } ; name } ; gene wiley } }, interpretation: select the rows whose wsu year ( s ) record fuzzily matches to 1959 - 62 . there is only one such row in the table . the name record of this unqiue row is gene wiley .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wsu year ( s ) ; 1959 - 62 } } ; eq { hop { filter_eq { all_rows ; wsu year ( s ) ; 1959 - 62 } ; name } ; gene wiley } }, interpretation: select the row whose goal difference record of all rows is 3rd maximum . the club record of this row is real oviedo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal difference ; 3 } ; club } ; real oviedo }, interpretation: select the row whose goal difference record of all rows is 3rd maximum . the club record of this row is real oviedo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goal difference ; 3 } ; club } ; real oviedo }, interpretation: the average of the lwat record of all rows is 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lwat } ; 26 }, interpretation: the average of the lwat record of all rows is 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lwat } ; 26 }, interpretation: select the row whose time record of all rows is 4th minimum . the country record of this row is bulgaria .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 4 } ; country } ; bulgaria }, interpretation: select the row whose time record of all rows is 4th minimum . the country record of this row is bulgaria .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 4 } ; country } ; bulgaria }, interpretation: for the result records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; win }, interpretation: select the rows whose champion record fuzzily matches to university of california , berkeley . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champion ; university of california , berkeley } } ; 4 }, interpretation: select the rows whose champion record fuzzily matches to university of california , berkeley . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champion ; university of california , berkeley } } ; 4 }, interpretation: select the rows whose region record fuzzily matches to united states . among these rows , select the rows whose format record fuzzily matches to cd . there is only one such row in the table . the date record of this unqiue row is june 8 , 2004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; region ; united states } ; format ; cd } } ; eq { hop { filter_eq { filter_eq { all_rows ; region ; united states } ; format ; cd } ; date } ; june 8 , 2004 } }, interpretation: select the rows whose region record fuzzily matches to united states . among these rows , select the rows whose format record fuzzily matches to cd . there is only one such row in the table . the date record of this unqiue row is june 8 , 2004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; region ; united states } ; format ; cd } } ; eq { hop { filter_eq { filter_eq { all_rows ; region ; united states } ; format ; cd } ; date } ; june 8 , 2004 } }, interpretation: select the row whose matches record of all rows is 2nd maximum . the goalkeeper record of this row is joel rodr\u00edguez .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; matches ; 2 } ; goalkeeper } ; joel rodr\u00edguez }, interpretation: select the row whose matches record of all rows is 2nd maximum . the goalkeeper record of this row is joel rodr\u00edguez .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; matches ; 2 } ; goalkeeper } ; joel rodr\u00edguez }, interpretation: select the rows whose episode count record is greater than 80 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; episode count ; 80 } } ; 3 }, interpretation: select the rows whose episode count record is greater than 80 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; episode count ; 80 } } ; 3 }, interpretation: the average of the erp w record of all rows is 37.5 watts .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; erp w } ; 37.5 watts }, interpretation: the average of the erp w record of all rows is 37.5 watts .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; erp w } ; 37.5 watts }, interpretation: select the rows whose executions in persona record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; executions in persona ; 4 } } ; 2 }, interpretation: select the rows whose executions in persona record is equal to 4 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; executions in persona ; 4 } } ; 2 }, interpretation: select the row whose date record of all rows is 3rd minimum . the number & name record of this row is no46233 duchess of sutherland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 3 } ; number & name } ; no46233 duchess of sutherland }, interpretation: select the row whose date record of all rows is 3rd minimum . the number & name record of this row is no46233 duchess of sutherland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 3 } ; number & name } ; no46233 duchess of sutherland }, interpretation: select the row whose pick record of all rows is minimum . the player record of this row is guillarme allard - cameus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; pick } ; player } ; guillarme allard - cameus }, interpretation: select the row whose pick record of all rows is minimum . the player record of this row is guillarme allard - cameus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; pick } ; player } ; guillarme allard - cameus }, interpretation: select the rows whose season record fuzzily matches to 2005 - 06 . take the wins record of this row . select the rows whose season record fuzzily matches to 2006 - 07 . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2005 - 06 } ; wins } ; hop { filter_eq { all_rows ; season ; 2006 - 07 } ; wins } }, interpretation: select the rows whose season record fuzzily matches to 2005 - 06 . take the wins record of this row . select the rows whose season record fuzzily matches to 2006 - 07 . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2005 - 06 } ; wins } ; hop { filter_eq { all_rows ; season ; 2006 - 07 } ; wins } }, interpretation: for the platform ( s ) records of all rows , most of them fuzzily match to playstation 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ( s ) ; playstation 3 }, interpretation: for the platform ( s ) records of all rows , most of them fuzzily match to playstation 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ( s ) ; playstation 3 }, interpretation: select the row whose individual record of all rows is 2nd minimum . the event record of this row is 2004 oberhof .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; individual ; 2 } ; event } ; 2004 oberhof }, interpretation: select the row whose individual record of all rows is 2nd minimum . the event record of this row is 2004 oberhof .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; individual ; 2 } ; event } ; 2004 oberhof }, interpretation: select the rows whose year record is equal to 2007 . for the label records of these rows , all of them fuzzily match to ! k7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; year ; 2007 } ; label ; ! k7 }, interpretation: select the rows whose year record is equal to 2007 . for the label records of these rows , all of them fuzzily match to ! k7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; year ; 2007 } ; label ; ! k7 }, interpretation: the average of the area ( km square ) record of all rows is 110,129 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) } ; 110,129 }, interpretation: the average of the area ( km square ) record of all rows is 110,129 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; area ( km square ) } ; 110,129 }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is west germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; west germany }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is west germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; west germany }, interpretation: the average of the crowd record of all rows is 20000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 20000 }, interpretation: the average of the crowd record of all rows is 20000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 20000 }, interpretation: select the rows whose location record fuzzily matches to launceston , tasmania . select the row whose years record of these rows is 1st minimum . the original code record of this row is victorian rules .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; location ; launceston , tasmania } ; years ; 1 } ; original code } ; victorian rules }, interpretation: select the rows whose location record fuzzily matches to launceston , tasmania . select the row whose years record of these rows is 1st minimum . the original code record of this row is victorian rules .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; location ; launceston , tasmania } ; years ; 1 } ; original code } ; victorian rules }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 3 }, interpretation: select the rows whose incumbent record fuzzily matches to doug walgren . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to tom ridge . take the first elected record of this row . the second record is 6 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; doug walgren } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; tom ridge } ; first elected } } ; -6 }, interpretation: select the rows whose incumbent record fuzzily matches to doug walgren . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to tom ridge . take the first elected record of this row . the second record is 6 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; doug walgren } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; tom ridge } ; first elected } } ; -6 }, interpretation: select the rows whose studio host record fuzzily matches to jim hill . there is only one such row in the table . the channel record of this unqiue row is kcal - tv .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; studio host ; jim hill } } ; eq { hop { filter_eq { all_rows ; studio host ; jim hill } ; channel } ; kcal - tv } }, interpretation: select the rows whose studio host record fuzzily matches to jim hill . there is only one such row in the table . the channel record of this unqiue row is kcal - tv .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; studio host ; jim hill } } ; eq { hop { filter_eq { all_rows ; studio host ; jim hill } ; channel } ; kcal - tv } }, interpretation: select the rows whose position record is less than or equal to 5 . the average of the points record of these rows is 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; position ; 5 } ; points } ; 22 }, interpretation: select the rows whose position record is less than or equal to 5 . the average of the points record of these rows is 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; position ; 5 } ; points } ; 22 }, interpretation: for the best jump records of all rows , most of them are greater than over 7 meters .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; best jump ; over 7 meters }, interpretation: for the best jump records of all rows , most of them are greater than over 7 meters .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; best jump ; over 7 meters }, interpretation: select the rows whose winner record fuzzily matches to bobby clarke . among these rows , select the rows whose goals record is equal to 51 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winner ; bobby clarke } ; goals ; 51 } } ; 2 }, interpretation: select the rows whose winner record fuzzily matches to bobby clarke . among these rows , select the rows whose goals record is equal to 51 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winner ; bobby clarke } ; goals ; 51 } } ; 2 }, interpretation: select the row whose year record of all rows is maximum . the chassis record of this row is ags jh25b ags jh27 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year } ; chassis } ; ags jh25b ags jh27 }, interpretation: select the row whose year record of all rows is maximum . the chassis record of this row is ags jh25b ags jh27 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year } ; chassis } ; ags jh25b ags jh27 }, interpretation: for the class records of all rows , most of them fuzzily match to 48 kg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; 48 kg }, interpretation: for the class records of all rows , most of them fuzzily match to 48 kg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; 48 kg }, interpretation: select the row whose year record of all rows is 2nd minimum . the nomination record of this row is jam hsiao .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; nomination } ; jam hsiao }, interpretation: select the row whose year record of all rows is 2nd minimum . the nomination record of this row is jam hsiao .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; nomination } ; jam hsiao }, interpretation: the average of the 2001 - 02 record of all rows is 2907 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 2001 - 02 } ; 2907 }, interpretation: the average of the 2001 - 02 record of all rows is 2907 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 2001 - 02 } ; 2907 }, interpretation: select the rows whose location attendance record fuzzily matches to pepsi center . for the location attendance records of these rows , most of them are less than 19000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; location attendance ; pepsi center } ; location attendance ; 19000 }, interpretation: select the rows whose location attendance record fuzzily matches to pepsi center . for the location attendance records of these rows , most of them are less than 19000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; location attendance ; pepsi center } ; location attendance ; 19000 }, interpretation: select the rows whose surface record fuzzily matches to hard . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; hard } } ; 5 }, interpretation: select the rows whose surface record fuzzily matches to hard . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; hard } } ; 5 }, interpretation: for the date records of all rows , all of them fuzzily match to 8 july 1933 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 8 july 1933 }, interpretation: for the date records of all rows , all of them fuzzily match to 8 july 1933 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 8 july 1933 }, interpretation: select the rows whose date record fuzzily matches to 1948 . the sum of the round record of these rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 1948 } ; round } ; 4 }, interpretation: select the rows whose date record fuzzily matches to 1948 . the sum of the round record of these rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 1948 } ; round } ; 4 }, interpretation: select the rows whose 1st round record fuzzily matches to 2 - 0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st round ; 2 - 0 } } ; 3 }, interpretation: select the rows whose 1st round record fuzzily matches to 2 - 0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st round ; 2 - 0 } } ; 3 }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the result records of all rows , all of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; w }, interpretation: for the result records of all rows , all of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; w }, interpretation: select the rows whose venue record fuzzily matches to queen 's park oval , port of spain . among these rows , select the rows whose date record fuzzily matches to 2006 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; venue ; queen 's park oval , port of spain } ; date ; 2006 } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to queen 's park oval , port of spain . among these rows , select the rows whose date record fuzzily matches to 2006 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; venue ; queen 's park oval , port of spain } ; date ; 2006 } } ; 2 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is nov 23 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; nov 23 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is nov 23 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; nov 23 }, interpretation: select the rows whose rank record fuzzily matches to 2 . take the silver record of this row . select the rows whose rank record fuzzily matches to 1 . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rank ; 2 } ; silver } ; hop { filter_eq { all_rows ; rank ; 1 } ; silver } }, interpretation: select the rows whose rank record fuzzily matches to 2 . take the silver record of this row . select the rows whose rank record fuzzily matches to 1 . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rank ; 2 } ; silver } ; hop { filter_eq { all_rows ; rank ; 1 } ; silver } }, interpretation: the average of the wins record of all rows is 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; 0 }, interpretation: the average of the wins record of all rows is 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; 0 }, interpretation: select the rows whose gdp per capita ( us ) record is greater than 18000 . there is only one such row in the table . the member countries record of this unqiue row is austria .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; gdp per capita ( us ) ; 18000 } } ; eq { hop { filter_greater { all_rows ; gdp per capita ( us ) ; 18000 } ; member countries } ; austria } }, interpretation: select the rows whose gdp per capita ( us ) record is greater than 18000 . there is only one such row in the table . the member countries record of this unqiue row is austria .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; gdp per capita ( us ) ; 18000 } } ; eq { hop { filter_greater { all_rows ; gdp per capita ( us ) ; 18000 } ; member countries } ; austria } }, interpretation: select the rows whose height record is greater than 80 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; height ; 80 } } ; 4 }, interpretation: select the rows whose height record is greater than 80 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; height ; 80 } } ; 4 }, interpretation: select the rows whose laps record is less than 17 . there is only one such row in the table . the year record of this unqiue row is 1966 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; laps ; 17 } } ; eq { hop { filter_less { all_rows ; laps ; 17 } ; year } ; 1966 } }, interpretation: select the rows whose laps record is less than 17 . there is only one such row in the table . the year record of this unqiue row is 1966 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; laps ; 17 } } ; eq { hop { filter_less { all_rows ; laps ; 17 } ; year } ; 1966 } }, interpretation: the average of the total record of all rows is 19.71 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 19.71 }, interpretation: the average of the total record of all rows is 19.71 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 19.71 }, interpretation: for the result records of all rows , most of them fuzzily match to nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; nominated }, interpretation: select the rows whose competition record fuzzily matches to 2002 african cup of nations . take the date record of this row . select the rows whose competition record fuzzily matches to 2006 fifa world cup qualification . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; competition ; 2002 african cup of nations } ; date } ; hop { filter_eq { all_rows ; competition ; 2006 fifa world cup qualification } ; date } }, interpretation: select the rows whose competition record fuzzily matches to 2002 african cup of nations . take the date record of this row . select the rows whose competition record fuzzily matches to 2006 fifa world cup qualification . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; competition ; 2002 african cup of nations } ; date } ; hop { filter_eq { all_rows ; competition ; 2006 fifa world cup qualification } ; date } }, interpretation: select the row whose ratings ( kanto ) record of all rows is maximum . the episode record of this row is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; ratings ( kanto ) } ; episode } ; 3 }, interpretation: select the row whose ratings ( kanto ) record of all rows is maximum . the episode record of this row is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; ratings ( kanto ) } ; episode } ; 3 }, interpretation: select the rows whose company record fuzzily matches to royal dutch shell . take the market value ( billion ) record of this row . select the rows whose company record fuzzily matches to american international group . take the market value ( billion ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; company ; royal dutch shell } ; market value ( billion ) } ; hop { filter_eq { all_rows ; company ; american international group } ; market value ( billion ) } }, interpretation: select the rows whose company record fuzzily matches to royal dutch shell . take the market value ( billion ) record of this row . select the rows whose company record fuzzily matches to american international group . take the market value ( billion ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; company ; royal dutch shell } ; market value ( billion ) } ; hop { filter_eq { all_rows ; company ; american international group } ; market value ( billion ) } }, interpretation: select the rows whose title record fuzzily matches to viscount . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; title ; viscount } } ; 3 }, interpretation: select the rows whose title record fuzzily matches to viscount . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; title ; viscount } } ; 3 }, interpretation: select the row whose management and support record of all rows is maximum . the administrating agencies by nip funds only record of this row is 0 consolidated cryptologic program .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; management and support } ; administrating agencies by nip funds only } ; 0 consolidated cryptologic program }, interpretation: select the row whose management and support record of all rows is maximum . the administrating agencies by nip funds only record of this row is 0 consolidated cryptologic program .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; management and support } ; administrating agencies by nip funds only } ; 0 consolidated cryptologic program }, interpretation: the average of the championships in st louis record of all rows is .3125 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; championships in st louis } ; .3125 }, interpretation: the average of the championships in st louis record of all rows is .3125 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; championships in st louis } ; .3125 }, interpretation: for the frequency records of all rows , most of them fuzzily match to 00 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; frequency ; 00 9 }, interpretation: for the frequency records of all rows , most of them fuzzily match to 00 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; frequency ; 00 9 }, interpretation: the average of the pos record of all rows is 14.33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pos } ; 14.33 }, interpretation: the average of the pos record of all rows is 14.33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pos } ; 14.33 }, interpretation: select the rows whose gold record is equal to 3 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; 3 } } ; 4 }, interpretation: select the rows whose gold record is equal to 3 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; 3 } } ; 4 }, interpretation: for the team records of all rows , most of them fuzzily match to hb - honda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; hb - honda }, interpretation: for the team records of all rows , most of them fuzzily match to hb - honda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; hb - honda }, interpretation: the sum of the t20 matches record of all rows is 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; t20 matches } ; 15 }, interpretation: the sum of the t20 matches record of all rows is 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; t20 matches } ; 15 }, interpretation: select the rows whose season record fuzzily matches to 2010 . take the attendance / g record of this row . select the rows whose season record fuzzily matches to 2009 . take the attendance / g record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2010 } ; attendance / g } ; hop { filter_eq { all_rows ; season ; 2009 } ; attendance / g } }, interpretation: select the rows whose season record fuzzily matches to 2010 . take the attendance / g record of this row . select the rows whose season record fuzzily matches to 2009 . take the attendance / g record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2010 } ; attendance / g } ; hop { filter_eq { all_rows ; season ; 2009 } ; attendance / g } }, interpretation: select the rows whose country record fuzzily matches to west germany . there is only one such row in the table . the player record of this unqiue row is bernhard langer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; west germany } } ; eq { hop { filter_eq { all_rows ; country ; west germany } ; player } ; bernhard langer } }, interpretation: select the rows whose country record fuzzily matches to west germany . there is only one such row in the table . the player record of this unqiue row is bernhard langer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; west germany } } ; eq { hop { filter_eq { all_rows ; country ; west germany } ; player } ; bernhard langer } }, interpretation: select the rows whose platelet count record fuzzily matches to decreased or unaffected . there is only one such row in the table . the condition record of this unqiue row is bernard - soulier syndrome .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; platelet count ; decreased or unaffected } } ; eq { hop { filter_eq { all_rows ; platelet count ; decreased or unaffected } ; condition } ; bernard - soulier syndrome } }, interpretation: select the rows whose platelet count record fuzzily matches to decreased or unaffected . there is only one such row in the table . the condition record of this unqiue row is bernard - soulier syndrome .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; platelet count ; decreased or unaffected } } ; eq { hop { filter_eq { all_rows ; platelet count ; decreased or unaffected } ; condition } ; bernard - soulier syndrome } }, interpretation: select the row whose employees ( world ) record of all rows is maximum . the name record of this row is volkswagen ag .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; employees ( world ) } ; name } ; volkswagen ag }, interpretation: select the row whose employees ( world ) record of all rows is maximum . the name record of this row is volkswagen ag .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; employees ( world ) } ; name } ; volkswagen ag }, interpretation: select the row whose seating record of all rows is maximum . the aircraft record of this row is airbus a321 - 200 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; seating } ; aircraft } ; airbus a321 - 200 }, interpretation: select the row whose seating record of all rows is maximum . the aircraft record of this row is airbus a321 - 200 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; seating } ; aircraft } ; airbus a321 - 200 }, interpretation: for the played records of all rows , all of them are equal to 38 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 38 }, interpretation: for the played records of all rows , all of them are equal to 38 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 38 }, interpretation: select the row whose power record of all rows is minimum . the city of license record of this row is gasp\u00e9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; power } ; city of license } ; gasp\u00e9 }, interpretation: select the row whose power record of all rows is minimum . the city of license record of this row is gasp\u00e9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; power } ; city of license } ; gasp\u00e9 }, interpretation: select the rows whose opposing teams record fuzzily matches to scotland . take the against record of this row . select the rows whose opposing teams record fuzzily matches to wales . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing teams ; scotland } ; against } ; hop { filter_eq { all_rows ; opposing teams ; wales } ; against } }, interpretation: select the rows whose opposing teams record fuzzily matches to scotland . take the against record of this row . select the rows whose opposing teams record fuzzily matches to wales . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing teams ; scotland } ; against } ; hop { filter_eq { all_rows ; opposing teams ; wales } ; against } }, interpretation: select the row whose wins record of all rows is maximum . the series record of this row is italian formula three .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; series } ; italian formula three }, interpretation: select the row whose wins record of all rows is maximum . the series record of this row is italian formula three .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; series } ; italian formula three }, interpretation: the average of the points record of all rows is 53 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 53 }, interpretation: the average of the points record of all rows is 53 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 53 }, interpretation: select the rows whose diemaco model record fuzzily matches to lsw . take the barrel length record of this row . select the rows whose diemaco model record fuzzily matches to c8 . take the barrel length record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; diemaco model ; lsw } ; barrel length } ; hop { filter_eq { all_rows ; diemaco model ; c8 } ; barrel length } }, interpretation: select the rows whose diemaco model record fuzzily matches to lsw . take the barrel length record of this row . select the rows whose diemaco model record fuzzily matches to c8 . take the barrel length record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; diemaco model ; lsw } ; barrel length } ; hop { filter_eq { all_rows ; diemaco model ; c8 } ; barrel length } }, interpretation: select the rows whose title record fuzzily matches to ( part . among these rows , select the rows whose directed by record fuzzily matches to tom tataranowicz . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; title ; ( part } ; directed by ; tom tataranowicz } } ; 3 }, interpretation: select the rows whose title record fuzzily matches to ( part . among these rows , select the rows whose directed by record fuzzily matches to tom tataranowicz . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; title ; ( part } ; directed by ; tom tataranowicz } } ; 3 }, interpretation: the average of the races record of all rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; races } ; 12 }, interpretation: the average of the races record of all rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; races } ; 12 }, interpretation: select the rows whose notes record fuzzily matches to fa . there is only one such row in the table . the country record of this unqiue row is new zealand .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; notes ; fa } } ; eq { hop { filter_eq { all_rows ; notes ; fa } ; country } ; new zealand } }, interpretation: select the rows whose notes record fuzzily matches to fa . there is only one such row in the table . the country record of this unqiue row is new zealand .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; notes ; fa } } ; eq { hop { filter_eq { all_rows ; notes ; fa } ; country } ; new zealand } }, interpretation: select the row whose matches record of all rows is maximum . the goalkeeper record of this row is asier riesgo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; goalkeeper } ; asier riesgo }, interpretation: select the row whose matches record of all rows is maximum . the goalkeeper record of this row is asier riesgo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; goalkeeper } ; asier riesgo }, interpretation: select the rows whose location record fuzzily matches to rca dome . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; rca dome } } ; 5 }, interpretation: select the rows whose location record fuzzily matches to rca dome . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; rca dome } } ; 5 }, interpretation: select the rows whose days with frost record is equal to 0 . there is only one such row in the table . the city / town record of this unqiue row is a coru\u00f1a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; days with frost ; 0 } } ; eq { hop { filter_eq { all_rows ; days with frost ; 0 } ; city / town } ; a coru\u00f1a } }, interpretation: select the rows whose days with frost record is equal to 0 . there is only one such row in the table . the city / town record of this unqiue row is a coru\u00f1a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; days with frost ; 0 } } ; eq { hop { filter_eq { all_rows ; days with frost ; 0 } ; city / town } ; a coru\u00f1a } }, interpretation: select the row whose apps record of all rows is 2nd maximum . the season record of this row is 2009 - 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; apps ; 2 } ; season } ; 2009 - 10 }, interpretation: select the row whose apps record of all rows is 2nd maximum . the season record of this row is 2009 - 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; apps ; 2 } ; season } ; 2009 - 10 }, interpretation: the 4th minimum week record of all rows is 4 . the attendance record of the row with 4th minimum week record is 55883 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; week ; 4 } ; 4 } ; eq { hop { nth_argmin { all_rows ; week ; 4 } ; attendance } ; 55883 } }, interpretation: the 4th minimum week record of all rows is 4 . the attendance record of the row with 4th minimum week record is 55883 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; week ; 4 } ; 4 } ; eq { hop { nth_argmin { all_rows ; week ; 4 } ; attendance } ; 55883 } }, interpretation: for the laps records of all rows , most of them are greater than 223 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; laps ; 223 }, interpretation: for the laps records of all rows , most of them are greater than 223 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; laps ; 223 }, interpretation: for the songwriter ( s ) records of all rows , all of them fuzzily match to ( adapted by malcolm dodds ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; songwriter ( s ) ; ( adapted by malcolm dodds ) }, interpretation: for the songwriter ( s ) records of all rows , all of them fuzzily match to ( adapted by malcolm dodds ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; songwriter ( s ) ; ( adapted by malcolm dodds ) }, interpretation: select the rows whose date record fuzzily matches to december . for the attendance records of these rows , most of them are greater than 60000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; date ; december } ; attendance ; 60000 }, interpretation: select the rows whose date record fuzzily matches to december . for the attendance records of these rows , most of them are greater than 60000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; date ; december } ; attendance ; 60000 }, interpretation: select the rows whose area ( km square ) record is less than 100000 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; area ( km square ) ; 100000 } } ; 1 }, interpretation: select the rows whose area ( km square ) record is less than 100000 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; area ( km square ) ; 100000 } } ; 1 }, interpretation: the average of the money record of all rows is 1584 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money } ; 1584 }, interpretation: the average of the money record of all rows is 1584 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money } ; 1584 }, interpretation: select the row whose county team record of all rows is 2nd minimum . the player record of this row is mick mackey .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; county team ; 2 } ; player } ; mick mackey }, interpretation: select the row whose county team record of all rows is 2nd minimum . the player record of this row is mick mackey .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; county team ; 2 } ; player } ; mick mackey }, interpretation: select the rows whose men 's singles record fuzzily matches to tan joe hok . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; men 's singles ; tan joe hok } } ; 2 }, interpretation: select the rows whose men 's singles record fuzzily matches to tan joe hok . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; men 's singles ; tan joe hok } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to northern ireland . there is only one such row in the table . the player record of this unqiue row is david feherty .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; northern ireland } } ; eq { hop { filter_eq { all_rows ; country ; northern ireland } ; player } ; david feherty } }, interpretation: select the rows whose country record fuzzily matches to northern ireland . there is only one such row in the table . the player record of this unqiue row is david feherty .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; northern ireland } } ; eq { hop { filter_eq { all_rows ; country ; northern ireland } ; player } ; david feherty } }, interpretation: select the rows whose surface record fuzzily matches to clay . among these rows , select the rows whose outcome record fuzzily matches to winner . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { filter_eq { all_rows ; surface ; clay } ; outcome ; winner } }, interpretation: select the rows whose surface record fuzzily matches to clay . among these rows , select the rows whose outcome record fuzzily matches to winner . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { filter_eq { all_rows ; surface ; clay } ; outcome ; winner } }, interpretation: the sum of the population census 2009 record of all rows is 4383743 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population census 2009 } ; 4383743 }, interpretation: the sum of the population census 2009 record of all rows is 4383743 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population census 2009 } ; 4383743 }, interpretation: the maximum frequency mhz record of all rows is 107.3 . the city of license record of the row with superlative frequency mhz record is hill city , kansas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; frequency mhz } ; 107.3 } ; eq { hop { argmax { all_rows ; frequency mhz } ; city of license } ; hill city , kansas } }, interpretation: the maximum frequency mhz record of all rows is 107.3 . the city of license record of the row with superlative frequency mhz record is hill city , kansas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; frequency mhz } ; 107.3 } ; eq { hop { argmax { all_rows ; frequency mhz } ; city of license } ; hill city , kansas } }, interpretation: select the rows whose model record fuzzily matches to 325ti . take the power record of this row . select the rows whose model record fuzzily matches to 316ti . take the power record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; model ; 325ti } ; power } ; hop { filter_eq { all_rows ; model ; 316ti } ; power } }, interpretation: select the rows whose model record fuzzily matches to 325ti . take the power record of this row . select the rows whose model record fuzzily matches to 316ti . take the power record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; model ; 325ti } ; power } ; hop { filter_eq { all_rows ; model ; 316ti } ; power } }, interpretation: select the rows whose to par record is less than or equal to -1 . the average of the score record of these rows is 284.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; to par ; -1 } ; score } ; 284.2 }, interpretation: select the rows whose to par record is less than or equal to -1 . the average of the score record of these rows is 284.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; to par ; -1 } ; score } ; 284.2 }, interpretation: for the score records of all rows , most of them fuzzily match to 1-1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; 1-1 }, interpretation: for the score records of all rows , most of them fuzzily match to 1-1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; 1-1 }, interpretation: the 1st minimum date record of all rows is may 31 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 1 } ; may 31 }, interpretation: the 1st minimum date record of all rows is may 31 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; date ; 1 } ; may 31 }, interpretation: select the rows whose date record fuzzily matches to 2013 . there is only one such row in the table . the tournament record of this unqiue row is oklahoma city , usa f9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; 2013 } } ; eq { hop { filter_eq { all_rows ; date ; 2013 } ; tournament } ; oklahoma city , usa f9 } }, interpretation: select the rows whose date record fuzzily matches to 2013 . there is only one such row in the table . the tournament record of this unqiue row is oklahoma city , usa f9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; 2013 } } ; eq { hop { filter_eq { all_rows ; date ; 2013 } ; tournament } ; oklahoma city , usa f9 } }, interpretation: select the rows whose opponent record fuzzily matches to miami dolphins . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; miami dolphins } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to miami dolphins . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; miami dolphins } } ; 2 }, interpretation: select the row whose first elected record of all rows is 2nd maximum . the incumbent record of this row is louis capozzoli .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first elected ; 2 } ; incumbent } ; louis capozzoli }, interpretation: select the row whose first elected record of all rows is 2nd maximum . the incumbent record of this row is louis capozzoli .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first elected ; 2 } ; incumbent } ; louis capozzoli }, interpretation: the 3rd minimum rank record of all rows is 3 . the nation record of the row with 3rd minimum rank record is japan ( jpn ) . the silver record of the row with 3rd minimum rank record is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 3 } ; 3 } ; and { eq { hop { nth_argmin { all_rows ; rank ; 3 } ; nation } ; japan ( jpn ) } ; eq { hop { nth_argmin { all_rows ; rank ; 3 } ; silver } ; 1 } } }, interpretation: the 3rd minimum rank record of all rows is 3 . the nation record of the row with 3rd minimum rank record is japan ( jpn ) . the silver record of the row with 3rd minimum rank record is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 3 } ; 3 } ; and { eq { hop { nth_argmin { all_rows ; rank ; 3 } ; nation } ; japan ( jpn ) } ; eq { hop { nth_argmin { all_rows ; rank ; 3 } ; silver } ; 1 } } }, interpretation: select the rows whose round record is equal to 7 . among these rows , select the rows whose college record fuzzily matches to oregon . there is only one such row in the table . the name record of this unqiue row is steve smith .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; round ; 7 } ; college ; oregon } } ; eq { hop { filter_eq { filter_eq { all_rows ; round ; 7 } ; college ; oregon } ; name } ; steve smith } }, interpretation: select the rows whose round record is equal to 7 . among these rows , select the rows whose college record fuzzily matches to oregon . there is only one such row in the table . the name record of this unqiue row is steve smith .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; round ; 7 } ; college ; oregon } } ; eq { hop { filter_eq { filter_eq { all_rows ; round ; 7 } ; college ; oregon } ; name } ; steve smith } }, interpretation: select the row whose attendance record of all rows is 1st maximum . the season record of this row is 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; season } ; 1993 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the season record of this row is 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; season } ; 1993 }, interpretation: select the row whose attendance record of all rows is maximum . the week record of this row is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; week } ; 9 }, interpretation: select the row whose attendance record of all rows is maximum . the week record of this row is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; week } ; 9 }, interpretation: select the rows whose candidates record fuzzily matches to 100 % . there is only one such row in the table . the district record of this unqiue row is new york 15 . the incumbent record of this unqiue row is michael hoffman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; 100 % } } ; and { eq { hop { filter_eq { all_rows ; candidates ; 100 % } ; district } ; new york 15 } ; eq { hop { filter_eq { all_rows ; candidates ; 100 % } ; incumbent } ; michael hoffman } } }, interpretation: select the rows whose candidates record fuzzily matches to 100 % . there is only one such row in the table . the district record of this unqiue row is new york 15 . the incumbent record of this unqiue row is michael hoffman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; 100 % } } ; and { eq { hop { filter_eq { all_rows ; candidates ; 100 % } ; district } ; new york 15 } ; eq { hop { filter_eq { all_rows ; candidates ; 100 % } ; incumbent } ; michael hoffman } } }, interpretation: select the row whose enrollment ihsaa class record of all rows is maximum . the school record of this row is penn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment ihsaa class } ; school } ; penn }, interpretation: select the row whose enrollment ihsaa class record of all rows is maximum . the school record of this row is penn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment ihsaa class } ; school } ; penn }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is pat cannon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; pat cannon }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is pat cannon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; pat cannon }, interpretation: select the row whose max speed ( mph ) record of all rows is 2nd maximum . the pilot record of this row is joseph a walker .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; max speed ( mph ) ; 2 } ; pilot } ; joseph a walker }, interpretation: select the row whose max speed ( mph ) record of all rows is 2nd maximum . the pilot record of this row is joseph a walker .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; max speed ( mph ) ; 2 } ; pilot } ; joseph a walker }, interpretation: the average of the score record of all rows is 279 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 279 }, interpretation: the average of the score record of all rows is 279 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 279 }, interpretation: select the rows whose manner of departure record fuzzily matches to resigned . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; resigned } } ; 2 }, interpretation: select the rows whose manner of departure record fuzzily matches to resigned . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; resigned } } ; 2 }, interpretation: select the rows whose year record is less than or equal to 2002 . the average of the winnings record of these rows is 44881 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; year ; 2002 } ; winnings } ; 44881 }, interpretation: select the rows whose year record is less than or equal to 2002 . the average of the winnings record of these rows is 44881 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; year ; 2002 } ; winnings } ; 44881 }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is mcg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; mcg }, interpretation: for the country records of all rows , all of them fuzzily match to italy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; italy }, interpretation: for the country records of all rows , all of them fuzzily match to italy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; italy }, interpretation: for the killed records of all rows , most of them are greater than 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; killed ; 13 }, interpretation: for the killed records of all rows , most of them are greater than 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; killed ; 13 }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is ud las palmas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; ud las palmas }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is ud las palmas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; ud las palmas }, interpretation: the average of the matches record of all rows is 51 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; matches } ; 51 }, interpretation: the average of the matches record of all rows is 51 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; matches } ; 51 }, interpretation: select the rows whose nation record fuzzily matches to south korea . take the bronze record of this row . select the rows whose nation record fuzzily matches to estonia . take the bronze record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; south korea } ; bronze } ; hop { filter_eq { all_rows ; nation ; estonia } ; bronze } }, interpretation: select the rows whose nation record fuzzily matches to south korea . take the bronze record of this row . select the rows whose nation record fuzzily matches to estonia . take the bronze record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; south korea } ; bronze } ; hop { filter_eq { all_rows ; nation ; estonia } ; bronze } }, interpretation: the maximum points record of all rows is 134 . the year record of the row with superlative points record is 1997 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; points } ; 134 } ; eq { hop { argmax { all_rows ; points } ; year } ; 1997 } }, interpretation: the maximum points record of all rows is 134 . the year record of the row with superlative points record is 1997 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; points } ; 134 } ; eq { hop { argmax { all_rows ; points } ; year } ; 1997 } }, interpretation: select the rows whose matches record is equal to 10 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; matches ; 10 } } ; 2 }, interpretation: select the rows whose matches record is equal to 10 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; matches ; 10 } } ; 2 }, interpretation: select the rows whose aspect record fuzzily matches to 16:9 . there is only one such row in the table . the channel record of this unqiue row is 31.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; aspect ; 16:9 } } ; eq { hop { filter_eq { all_rows ; aspect ; 16:9 } ; channel } ; 31.1 } }, interpretation: select the rows whose aspect record fuzzily matches to 16:9 . there is only one such row in the table . the channel record of this unqiue row is 31.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; aspect ; 16:9 } } ; eq { hop { filter_eq { all_rows ; aspect ; 16:9 } ; channel } ; 31.1 } }, interpretation: for the website records of all rows , most of them fuzzily match to english .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; website ; english }, interpretation: for the website records of all rows , most of them fuzzily match to english .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; website ; english }, interpretation: select the rows whose position record fuzzily matches to catcher . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; catcher } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to catcher . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; catcher } } ; 2 }, interpretation: for the episodes records of all rows , most of them are equal to 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; episodes ; 11 }, interpretation: for the episodes records of all rows , most of them are equal to 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; episodes ; 11 }, interpretation: select the rows whose school / club team record fuzzily matches to duke . there is only one such row in the table . the player record of this unqiue row is antonio lang .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; duke } } ; eq { hop { filter_eq { all_rows ; school / club team ; duke } ; player } ; antonio lang } }, interpretation: select the rows whose school / club team record fuzzily matches to duke . there is only one such row in the table . the player record of this unqiue row is antonio lang .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; school / club team ; duke } } ; eq { hop { filter_eq { all_rows ; school / club team ; duke } ; player } ; antonio lang } }, interpretation: select the rows whose seasons record is greater than 15 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; seasons ; 15 } } ; 6 }, interpretation: select the rows whose seasons record is greater than 15 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; seasons ; 15 } } ; 6 }, interpretation: select the rows whose main town record fuzzily matches to adampan . take the population density ( / km 2 ) record of this row . select the rows whose main town record fuzzily matches to chilawathurai . take the population density ( / km 2 ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; main town ; adampan } ; population density ( / km 2 ) } ; hop { filter_eq { all_rows ; main town ; chilawathurai } ; population density ( / km 2 ) } }, interpretation: select the rows whose main town record fuzzily matches to adampan . take the population density ( / km 2 ) record of this row . select the rows whose main town record fuzzily matches to chilawathurai . take the population density ( / km 2 ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; main town ; adampan } ; population density ( / km 2 ) } ; hop { filter_eq { all_rows ; main town ; chilawathurai } ; population density ( / km 2 ) } }, interpretation: the sum of the score record of all rows is 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 16 }, interpretation: the sum of the score record of all rows is 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 16 }, interpretation: select the rows whose type record fuzzily matches to fraternity . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; fraternity } } ; 4 }, interpretation: select the rows whose type record fuzzily matches to fraternity . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; type ; fraternity } } ; 4 }, interpretation: the sum of the attendance record of all rows is 197707 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 197707 }, interpretation: the sum of the attendance record of all rows is 197707 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 197707 }, interpretation: select the rows whose builder record fuzzily matches to general dynamics , quincy . select the row whose commissioned - decommissioned record of these rows is 1st minimum . the ship record of this row is wichita .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; builder ; general dynamics , quincy } ; commissioned - decommissioned ; 1 } ; ship } ; wichita }, interpretation: select the rows whose builder record fuzzily matches to general dynamics , quincy . select the row whose commissioned - decommissioned record of these rows is 1st minimum . the ship record of this row is wichita .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; builder ; general dynamics , quincy } ; commissioned - decommissioned ; 1 } ; ship } ; wichita }, interpretation: select the rows whose location attendance record fuzzily matches to rose garden . the sum of the location attendance record of these rows is 144197 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; rose garden } ; location attendance } ; 144197 }, interpretation: select the rows whose location attendance record fuzzily matches to rose garden . the sum of the location attendance record of these rows is 144197 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; rose garden } ; location attendance } ; 144197 }, interpretation: select the row whose capacity record of all rows is maximum . the team record of this row is dinamo minsk .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; capacity } ; team } ; dinamo minsk }, interpretation: select the row whose capacity record of all rows is maximum . the team record of this row is dinamo minsk .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; capacity } ; team } ; dinamo minsk }, interpretation: select the row whose votes record of all rows is 2nd maximum . the party record of this row is labour .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; votes ; 2 } ; party } ; labour }, interpretation: select the row whose votes record of all rows is 2nd maximum . the party record of this row is labour .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; votes ; 2 } ; party } ; labour }, interpretation: select the rows whose name record fuzzily matches to portland . take the date of commission record of this row . select the rows whose name record fuzzily matches to st albans . take the date of commission record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; portland } ; date of commission } ; hop { filter_eq { all_rows ; name ; st albans } ; date of commission } }, interpretation: select the rows whose name record fuzzily matches to portland . take the date of commission record of this row . select the rows whose name record fuzzily matches to st albans . take the date of commission record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; portland } ; date of commission } ; hop { filter_eq { all_rows ; name ; st albans } ; date of commission } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose time record fuzzily matches to 2:18 . there is only one such row in the table . the nationality record of this unqiue row is germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time ; 2:18 } } ; eq { hop { filter_eq { all_rows ; time ; 2:18 } ; nationality } ; germany } }, interpretation: select the rows whose time record fuzzily matches to 2:18 . there is only one such row in the table . the nationality record of this unqiue row is germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time ; 2:18 } } ; eq { hop { filter_eq { all_rows ; time ; 2:18 } ; nationality } ; germany } }, interpretation: select the row whose date record of all rows is minimum . the location attendance record of this row is united center 23854 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; location attendance } ; united center 23854 }, interpretation: select the row whose date record of all rows is minimum . the location attendance record of this row is united center 23854 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; location attendance } ; united center 23854 }, interpretation: select the rows whose team ( s ) record fuzzily matches to haas cnc racing . the minimum avg finish record of these rows is 29.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; team ( s ) ; haas cnc racing } ; avg finish } ; 29.2 }, interpretation: select the rows whose team ( s ) record fuzzily matches to haas cnc racing . the minimum avg finish record of these rows is 29.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; team ( s ) ; haas cnc racing } ; avg finish } ; 29.2 }, interpretation: select the row whose air date record of all rows is 2nd maximum . the guest host record of this row is ross kemp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; air date ; 2 } ; guest host } ; ross kemp }, interpretation: select the row whose air date record of all rows is 2nd maximum . the guest host record of this row is ross kemp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; air date ; 2 } ; guest host } ; ross kemp }, interpretation: select the rows whose chassis record fuzzily matches to lola t370 . there is only one such row in the table . the year record of this unqiue row is 1974 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; lola t370 } } ; eq { hop { filter_eq { all_rows ; chassis ; lola t370 } ; year } ; 1974 } }, interpretation: select the rows whose chassis record fuzzily matches to lola t370 . there is only one such row in the table . the year record of this unqiue row is 1974 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; lola t370 } } ; eq { hop { filter_eq { all_rows ; chassis ; lola t370 } ; year } ; 1974 } }, interpretation: select the row whose quantity record of all rows is 2nd maximum . the class record of this row is pt 2 / 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; quantity ; 2 } ; class } ; pt 2 / 3 }, interpretation: select the row whose quantity record of all rows is 2nd maximum . the class record of this row is pt 2 / 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; quantity ; 2 } ; class } ; pt 2 / 3 }, interpretation: select the rows whose s wicket record is greater than 50 . there is only one such row in the table . the player record of this unqiue row is damien wright .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; s wicket ; 50 } } ; eq { hop { filter_greater { all_rows ; s wicket ; 50 } ; player } ; damien wright } }, interpretation: select the rows whose s wicket record is greater than 50 . there is only one such row in the table . the player record of this unqiue row is damien wright .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; s wicket ; 50 } } ; eq { hop { filter_greater { all_rows ; s wicket ; 50 } ; player } ; damien wright } }, interpretation: select the rows whose platform record fuzzily matches to wii . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; platform ; wii } } ; 5 }, interpretation: select the rows whose platform record fuzzily matches to wii . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; platform ; wii } } ; 5 }, interpretation: the sum of the winnings record of all rows is 2076417 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; winnings } ; 2076417 }, interpretation: the sum of the winnings record of all rows is 2076417 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; winnings } ; 2076417 }, interpretation: select the rows whose place record fuzzily matches to t1 . among these rows , select the rows whose country record fuzzily matches to united states . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; place ; t1 } ; country ; united states } } ; 6 }, interpretation: select the rows whose place record fuzzily matches to t1 . among these rows , select the rows whose country record fuzzily matches to united states . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; place ; t1 } ; country ; united states } } ; 6 }, interpretation: select the rows whose tournament record fuzzily matches to the open championship . there is only one such row in the table . the wins record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; the open championship } } ; eq { hop { filter_eq { all_rows ; tournament ; the open championship } ; wins } ; 1 } }, interpretation: select the rows whose tournament record fuzzily matches to the open championship . there is only one such row in the table . the wins record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; the open championship } } ; eq { hop { filter_eq { all_rows ; tournament ; the open championship } ; wins } ; 1 } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: the sum of the televotes record of all rows is 147968 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; televotes } ; 147968 }, interpretation: the sum of the televotes record of all rows is 147968 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; televotes } ; 147968 }, interpretation: select the rows whose constellation record fuzzily matches to orion . there is only one such row in the table . the designation hd record of this unqiue row is hd 245409 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; constellation ; orion } } ; eq { hop { filter_eq { all_rows ; constellation ; orion } ; designation hd } ; hd 245409 } }, interpretation: select the rows whose constellation record fuzzily matches to orion . there is only one such row in the table . the designation hd record of this unqiue row is hd 245409 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; constellation ; orion } } ; eq { hop { filter_eq { all_rows ; constellation ; orion } ; designation hd } ; hd 245409 } }, interpretation: select the rows whose attendance record is greater than 30000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; attendance ; 30000 } } ; 3 }, interpretation: select the rows whose attendance record is greater than 30000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; attendance ; 30000 } } ; 3 }, interpretation: select the row whose vuelta record of all rows is maximum . the name record of this row is tony rominger ( sui ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; vuelta } ; name } ; tony rominger ( sui ) }, interpretation: select the row whose vuelta record of all rows is maximum . the name record of this row is tony rominger ( sui ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; vuelta } ; name } ; tony rominger ( sui ) }, interpretation: the average of the crowd record of all rows is 35000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 35000 }, interpretation: the average of the crowd record of all rows is 35000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 35000 }, interpretation: select the row whose height metres / ft record of all rows is maximum . the name record of this row is shard london bridge .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height metres / ft } ; name } ; shard london bridge }, interpretation: select the row whose height metres / ft record of all rows is maximum . the name record of this row is shard london bridge .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height metres / ft } ; name } ; shard london bridge }, interpretation: the average of the height in ft record of all rows is 6 - 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height in ft } ; 6 - 9 }, interpretation: the average of the height in ft record of all rows is 6 - 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height in ft } ; 6 - 9 }, interpretation: the maximum days held record of all rows is 700 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; days held } ; 700 }, interpretation: the maximum days held record of all rows is 700 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; days held } ; 700 }, interpretation: for the surface records of all rows , most of them fuzzily match to grass .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; grass }, interpretation: for the surface records of all rows , most of them fuzzily match to grass .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; grass }, interpretation: select the row whose rounds record of all rows is 1st maximum . the team record of this row is phil parsons racing .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; rounds ; 1 } ; team } ; phil parsons racing }, interpretation: select the row whose rounds record of all rows is 1st maximum . the team record of this row is phil parsons racing .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; rounds ; 1 } ; team } ; phil parsons racing }, interpretation: select the rows whose directed by record fuzzily matches to ch greenblatt & william reiss . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; ch greenblatt & william reiss } } ; 7 }, interpretation: select the rows whose directed by record fuzzily matches to ch greenblatt & william reiss . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; ch greenblatt & william reiss } } ; 7 }, interpretation: select the rows whose cores record is equal to 2 . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; cores ; 2 } } ; 10 }, interpretation: select the rows whose cores record is equal to 2 . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; cores ; 2 } } ; 10 }, interpretation: select the rows whose round record is equal to 6 . there is only one such row in the table . the player record of this unqiue row is frank blum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; round ; 6 } } ; eq { hop { filter_eq { all_rows ; round ; 6 } ; player } ; frank blum } }, interpretation: select the rows whose round record is equal to 6 . there is only one such row in the table . the player record of this unqiue row is frank blum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; round ; 6 } } ; eq { hop { filter_eq { all_rows ; round ; 6 } ; player } ; frank blum } }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is motherwell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; motherwell }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is motherwell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; motherwell }, interpretation: the 2nd minimum year record of all rows is 1994 . the men 's singles record of the row with 2nd minimum year record is juraj brestovsk\u00fd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 2 } ; 1994 } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; men 's singles } ; juraj brestovsk\u00fd } }, interpretation: the 2nd minimum year record of all rows is 1994 . the men 's singles record of the row with 2nd minimum year record is juraj brestovsk\u00fd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 2 } ; 1994 } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; men 's singles } ; juraj brestovsk\u00fd } }, interpretation: select the rows whose name record fuzzily matches to santa maria da feira . take the area ( km square ) record of this row . select the rows whose name record fuzzily matches to vale de cambra . take the area ( km square ) record of this row . the first record is greater than the second record . the area ( km square ) record of the first row is 215.1 . the area ( km square ) record of the second row is 146.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; santa maria da feira } ; area ( km square ) } ; hop { filter_eq { all_rows ; name ; vale de cambra } ; area ( km square ) } } ; and { eq { hop { filter_eq { all_rows ; name ; santa maria da feira } ; area ( km square ) } ; 215.1 } ; eq { hop { filter_eq { all_rows ; name ; vale de cambra } ; area ( km square ) } ; 146.5 } } }, interpretation: select the rows whose name record fuzzily matches to santa maria da feira . take the area ( km square ) record of this row . select the rows whose name record fuzzily matches to vale de cambra . take the area ( km square ) record of this row . the first record is greater than the second record . the area ( km square ) record of the first row is 215.1 . the area ( km square ) record of the second row is 146.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; santa maria da feira } ; area ( km square ) } ; hop { filter_eq { all_rows ; name ; vale de cambra } ; area ( km square ) } } ; and { eq { hop { filter_eq { all_rows ; name ; santa maria da feira } ; area ( km square ) } ; 215.1 } ; eq { hop { filter_eq { all_rows ; name ; vale de cambra } ; area ( km square ) } ; 146.5 } } }, interpretation: the sum of the intake record of all rows is 505 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; intake } ; 505 }, interpretation: the sum of the intake record of all rows is 505 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; intake } ; 505 }, interpretation: for the competition records of all rows , most of them fuzzily match to 2002 world cup qualifier .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; 2002 world cup qualifier }, interpretation: for the competition records of all rows , most of them fuzzily match to 2002 world cup qualifier .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; 2002 world cup qualifier }, interpretation: for the largest ethnic group ( year ) records of all rows , most of them fuzzily match to serbs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; largest ethnic group ( year ) ; serbs }, interpretation: for the largest ethnic group ( year ) records of all rows , most of them fuzzily match to serbs .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; largest ethnic group ( year ) ; serbs }, interpretation: select the rows whose chassis record fuzzily matches to hesketh 308e . take the year record of this row . select the rows whose chassis record fuzzily matches to surtees ts19 . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; chassis ; hesketh 308e } ; year } ; hop { filter_eq { all_rows ; chassis ; surtees ts19 } ; year } }, interpretation: select the rows whose chassis record fuzzily matches to hesketh 308e . take the year record of this row . select the rows whose chassis record fuzzily matches to surtees ts19 . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; chassis ; hesketh 308e } ; year } ; hop { filter_eq { all_rows ; chassis ; surtees ts19 } ; year } }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 2 }, interpretation: select the rows whose founding university record fuzzily matches to barnard college . there is only one such row in the table . the organization record of this unqiue row is alpha epsilon phi 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; founding university ; barnard college } } ; eq { hop { filter_eq { all_rows ; founding university ; barnard college } ; organization } ; alpha epsilon phi 2 } }, interpretation: select the rows whose founding university record fuzzily matches to barnard college . there is only one such row in the table . the organization record of this unqiue row is alpha epsilon phi 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; founding university ; barnard college } } ; eq { hop { filter_eq { all_rows ; founding university ; barnard college } ; organization } ; alpha epsilon phi 2 } }, interpretation: select the rows whose lost record is equal to 14 . there is only one such row in the table . the club record of this unqiue row is burry port rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lost ; 14 } } ; eq { hop { filter_eq { all_rows ; lost ; 14 } ; club } ; burry port rfc } }, interpretation: select the rows whose lost record is equal to 14 . there is only one such row in the table . the club record of this unqiue row is burry port rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lost ; 14 } } ; eq { hop { filter_eq { all_rows ; lost ; 14 } ; club } ; burry port rfc } }, interpretation: for the wins records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; wins ; 0 }, interpretation: select the rows whose attendance record is greater than 20000 . there is only one such row in the table . the acc team record of this unqiue row is 10 north carolina . the big ten team record of this unqiue row is 9 michigan state .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; attendance ; 20000 } } ; and { eq { hop { filter_greater { all_rows ; attendance ; 20000 } ; acc team } ; 10 north carolina } ; eq { hop { filter_greater { all_rows ; attendance ; 20000 } ; big ten team } ; 9 michigan state } } }, interpretation: select the rows whose attendance record is greater than 20000 . there is only one such row in the table . the acc team record of this unqiue row is 10 north carolina . the big ten team record of this unqiue row is 9 michigan state .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; attendance ; 20000 } } ; and { eq { hop { filter_greater { all_rows ; attendance ; 20000 } ; acc team } ; 10 north carolina } ; eq { hop { filter_greater { all_rows ; attendance ; 20000 } ; big ten team } ; 9 michigan state } } }, interpretation: select the row whose episode number record of all rows is 1st minimum . the musical guest ( song performed ) record of this row is the courteeners ( no you did n't , no you do n't ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; episode number ; 1 } ; musical guest ( song performed ) } ; the courteeners ( no you did n't , no you do n't ) }, interpretation: select the row whose episode number record of all rows is 1st minimum . the musical guest ( song performed ) record of this row is the courteeners ( no you did n't , no you do n't ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; episode number ; 1 } ; musical guest ( song performed ) } ; the courteeners ( no you did n't , no you do n't ) }, interpretation: select the rows whose administrating agencies by nip funds only record fuzzily matches to 0 central intelligence agency program . take the data collection record of this row . select the rows whose administrating agencies by nip funds only record fuzzily matches to 0 defense intelligence program . take the data collection record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; administrating agencies by nip funds only ; 0 central intelligence agency program } ; data collection } ; hop { filter_eq { all_rows ; administrating agencies by nip funds only ; 0 defense intelligence program } ; data collection } }, interpretation: select the rows whose administrating agencies by nip funds only record fuzzily matches to 0 central intelligence agency program . take the data collection record of this row . select the rows whose administrating agencies by nip funds only record fuzzily matches to 0 defense intelligence program . take the data collection record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; administrating agencies by nip funds only ; 0 central intelligence agency program } ; data collection } ; hop { filter_eq { all_rows ; administrating agencies by nip funds only ; 0 defense intelligence program } ; data collection } }, interpretation: select the rows whose date successor seated record fuzzily matches to not filled this congress . there is only one such row in the table . the district record of this unqiue row is virginia 2nd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date successor seated ; not filled this congress } } ; eq { hop { filter_eq { all_rows ; date successor seated ; not filled this congress } ; district } ; virginia 2nd } }, interpretation: select the rows whose date successor seated record fuzzily matches to not filled this congress . there is only one such row in the table . the district record of this unqiue row is virginia 2nd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date successor seated ; not filled this congress } } ; eq { hop { filter_eq { all_rows ; date successor seated ; not filled this congress } ; district } ; virginia 2nd } }, interpretation: for the 1st party records of all rows , most of them fuzzily match to conservative .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; 1st party ; conservative }, interpretation: for the 1st party records of all rows , most of them fuzzily match to conservative .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; 1st party ; conservative }, interpretation: the average of the total record of all rows is 3.75 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 3.75 }, interpretation: the average of the total record of all rows is 3.75 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 3.75 }, interpretation: select the row whose crowd record of all rows is maximum . the home team record of this row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; home team } ; collingwood }, interpretation: select the row whose crowd record of all rows is maximum . the home team record of this row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; home team } ; collingwood }, interpretation: select the rows whose province record fuzzily matches to santiago de cuba . take the density record of this row . select the rows whose province record fuzzily matches to pinar del r\u00edo . take the density record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; province ; santiago de cuba } ; density } ; hop { filter_eq { all_rows ; province ; pinar del r\u00edo } ; density } }, interpretation: select the rows whose province record fuzzily matches to santiago de cuba . take the density record of this row . select the rows whose province record fuzzily matches to pinar del r\u00edo . take the density record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; province ; santiago de cuba } ; density } ; hop { filter_eq { all_rows ; province ; pinar del r\u00edo } ; density } }, interpretation: select the rows whose nationality record fuzzily matches to sweden . there is only one such row in the table . the player record of this unqiue row is david nystrom .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; sweden } } ; eq { hop { filter_eq { all_rows ; nationality ; sweden } ; player } ; david nystrom } }, interpretation: select the rows whose nationality record fuzzily matches to sweden . there is only one such row in the table . the player record of this unqiue row is david nystrom .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; sweden } } ; eq { hop { filter_eq { all_rows ; nationality ; sweden } ; player } ; david nystrom } }, interpretation: select the rows whose sunlight hours record is equal to 2043 . there is only one such row in the table . the city / town record of this unqiue row is ourense .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; sunlight hours ; 2043 } } ; eq { hop { filter_eq { all_rows ; sunlight hours ; 2043 } ; city / town } ; ourense } }, interpretation: select the rows whose sunlight hours record is equal to 2043 . there is only one such row in the table . the city / town record of this unqiue row is ourense .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; sunlight hours ; 2043 } } ; eq { hop { filter_eq { all_rows ; sunlight hours ; 2043 } ; city / town } ; ourense } }, interpretation: select the rows whose opponent record fuzzily matches to south sydney rabbitohs . take the margin record of this row . select the rows whose opponent record fuzzily matches to western suburbs . take the margin record of this row . the first record is 22 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; south sydney rabbitohs } ; margin } ; hop { filter_eq { all_rows ; opponent ; western suburbs } ; margin } } ; 22 }, interpretation: select the rows whose opponent record fuzzily matches to south sydney rabbitohs . take the margin record of this row . select the rows whose opponent record fuzzily matches to western suburbs . take the margin record of this row . the first record is 22 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; south sydney rabbitohs } ; margin } ; hop { filter_eq { all_rows ; opponent ; western suburbs } ; margin } } ; 22 }, interpretation: select the row whose goals record of all rows is maximum . the player record of this row is will slade .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals } ; player } ; will slade }, interpretation: select the row whose goals record of all rows is maximum . the player record of this row is will slade .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals } ; player } ; will slade }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 2 }, interpretation: the sum of the attendance record of all rows is 779652 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 779652 }, interpretation: the sum of the attendance record of all rows is 779652 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 779652 }, interpretation: select the rows whose location record fuzzily matches to seoul , south korea . there is only one such row in the table . the event record of this unqiue row is hero 's 2005 in seoul .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; seoul , south korea } } ; eq { hop { filter_eq { all_rows ; location ; seoul , south korea } ; event } ; hero 's 2005 in seoul } }, interpretation: select the rows whose location record fuzzily matches to seoul , south korea . there is only one such row in the table . the event record of this unqiue row is hero 's 2005 in seoul .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; seoul , south korea } } ; eq { hop { filter_eq { all_rows ; location ; seoul , south korea } ; event } ; hero 's 2005 in seoul } }, interpretation: select the rows whose country record fuzzily matches to italy . there is only one such row in the table . the pilot record of this unqiue row is thomas gostner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; italy } } ; eq { hop { filter_eq { all_rows ; country ; italy } ; pilot } ; thomas gostner } }, interpretation: select the rows whose country record fuzzily matches to italy . there is only one such row in the table . the pilot record of this unqiue row is thomas gostner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; italy } } ; eq { hop { filter_eq { all_rows ; country ; italy } ; pilot } ; thomas gostner } }, interpretation: select the row whose frequency mhz record of all rows is 2nd minimum . the city of license record of this row is lyons falls , ny .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; frequency mhz ; 2 } ; city of license } ; lyons falls , ny }, interpretation: select the row whose frequency mhz record of all rows is 2nd minimum . the city of license record of this row is lyons falls , ny .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; frequency mhz ; 2 } ; city of license } ; lyons falls , ny }, interpretation: select the row whose number of bearers 2009 record of all rows is 2nd maximum . the surname record of this row is nielsen . the number of bearers 1971 record of this row is 349.126 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmax { all_rows ; number of bearers 2009 ; 2 } ; surname } ; nielsen } ; eq { hop { nth_argmax { all_rows ; number of bearers 2009 ; 2 } ; number of bearers 1971 } ; 349.126 } }, interpretation: select the row whose number of bearers 2009 record of all rows is 2nd maximum . the surname record of this row is nielsen . the number of bearers 1971 record of this row is 349.126 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { nth_argmax { all_rows ; number of bearers 2009 ; 2 } ; surname } ; nielsen } ; eq { hop { nth_argmax { all_rows ; number of bearers 2009 ; 2 } ; number of bearers 1971 } ; 349.126 } }, interpretation: for the points records of all rows , most of them are greater than 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 6 }, interpretation: for the points records of all rows , most of them are greater than 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 6 }, interpretation: select the rows whose chassis record fuzzily matches to brm p201 . take the year record of this row . select the rows whose chassis record fuzzily matches to hill gh1 . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; chassis ; brm p201 } ; year } ; hop { filter_eq { all_rows ; chassis ; hill gh1 } ; year } }, interpretation: select the rows whose chassis record fuzzily matches to brm p201 . take the year record of this row . select the rows whose chassis record fuzzily matches to hill gh1 . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; chassis ; brm p201 } ; year } ; hop { filter_eq { all_rows ; chassis ; hill gh1 } ; year } }, interpretation: select the rows whose margin of victory record fuzzily matches to 1 stroke . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin of victory ; 1 stroke } } ; 4 }, interpretation: select the rows whose margin of victory record fuzzily matches to 1 stroke . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin of victory ; 1 stroke } } ; 4 }, interpretation: select the row whose laps record of all rows is minimum . the co - drivers record of this row is gianmaria bruni pierre kaffer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; laps } ; co - drivers } ; gianmaria bruni pierre kaffer }, interpretation: select the row whose laps record of all rows is minimum . the co - drivers record of this row is gianmaria bruni pierre kaffer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; laps } ; co - drivers } ; gianmaria bruni pierre kaffer }, interpretation: for the uk broadcast date records of all rows , all of them are equal to 1996 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; uk broadcast date ; 1996 }, interpretation: for the uk broadcast date records of all rows , all of them are equal to 1996 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; uk broadcast date ; 1996 }, interpretation: select the rows whose tribunal record fuzzily matches to coimbra . take the executions in persona record of this row . select the rows whose tribunal record fuzzily matches to goa . take the executions in persona record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tribunal ; coimbra } ; executions in persona } ; hop { filter_eq { all_rows ; tribunal ; goa } ; executions in persona } }, interpretation: select the rows whose tribunal record fuzzily matches to coimbra . take the executions in persona record of this row . select the rows whose tribunal record fuzzily matches to goa . take the executions in persona record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; tribunal ; coimbra } ; executions in persona } ; hop { filter_eq { all_rows ; tribunal ; goa } ; executions in persona } }, interpretation: select the rows whose nationality record does not match to ireland . the 1st maximum goals record of these rows is 138 . the name record of the row with 1st maximum goals record is johnny armstrong .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { filter_not_eq { all_rows ; nationality ; ireland } ; goals ; 1 } ; 138 } ; eq { hop { nth_argmax { filter_not_eq { all_rows ; nationality ; ireland } ; goals ; 1 } ; name } ; johnny armstrong } }, interpretation: select the rows whose nationality record does not match to ireland . the 1st maximum goals record of these rows is 138 . the name record of the row with 1st maximum goals record is johnny armstrong .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { filter_not_eq { all_rows ; nationality ; ireland } ; goals ; 1 } ; 138 } ; eq { hop { nth_argmax { filter_not_eq { all_rows ; nationality ; ireland } ; goals ; 1 } ; name } ; johnny armstrong } }, interpretation: the average of the crowd record of all rows is 28861 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 28861 }, interpretation: the average of the crowd record of all rows is 28861 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 28861 }, interpretation: the average of the rank record of all rows is 38 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rank } ; 38 }, interpretation: the average of the rank record of all rows is 38 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rank } ; 38 }, interpretation: the average of the pieces record of all rows is 271.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pieces } ; 271.6 }, interpretation: the average of the pieces record of all rows is 271.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pieces } ; 271.6 }, interpretation: select the row whose us viewers ( million ) record of all rows is 2nd maximum . the title record of this row is line of departure .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us viewers ( million ) ; 2 } ; title } ; line of departure }, interpretation: select the row whose us viewers ( million ) record of all rows is 2nd maximum . the title record of this row is line of departure .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us viewers ( million ) ; 2 } ; title } ; line of departure }, interpretation: the average of the goals against record of all rows is 53 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals against } ; 53 }, interpretation: the average of the goals against record of all rows is 53 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals against } ; 53 }, interpretation: select the rows whose listed record fuzzily matches to 1997 . for the built records of these rows , most of them fuzzily match to 1894 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; listed ; 1997 } ; built ; 1894 }, interpretation: select the rows whose listed record fuzzily matches to 1997 . for the built records of these rows , most of them fuzzily match to 1894 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; listed ; 1997 } ; built ; 1894 }, interpretation: select the rows whose director record fuzzily matches to pete travis . there is only one such row in the table . the episode record of this unqiue row is episode 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; pete travis } } ; eq { hop { filter_eq { all_rows ; director ; pete travis } ; episode } ; episode 5 } }, interpretation: select the rows whose director record fuzzily matches to pete travis . there is only one such row in the table . the episode record of this unqiue row is episode 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; pete travis } } ; eq { hop { filter_eq { all_rows ; director ; pete travis } ; episode } ; episode 5 } }, interpretation: the average of the total record of all rows is 9.29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 9.29 }, interpretation: the average of the total record of all rows is 9.29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 9.29 }, interpretation: select the rows whose moving parts record fuzzily matches to yes . there is only one such row in the table . the technology record of this unqiue row is flow .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; moving parts ; yes } } ; eq { hop { filter_eq { all_rows ; moving parts ; yes } ; technology } ; flow } }, interpretation: select the rows whose moving parts record fuzzily matches to yes . there is only one such row in the table . the technology record of this unqiue row is flow .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; moving parts ; yes } } ; eq { hop { filter_eq { all_rows ; moving parts ; yes } ; technology } ; flow } }, interpretation: select the rows whose player record fuzzily matches to laura diaz . take the score record of this row . select the rows whose player record fuzzily matches to kristy mcpherson . take the score record of this row . the first record is less than the second record . the score record of the first row is 66 . the score record of the second row is 67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; laura diaz } ; score } ; hop { filter_eq { all_rows ; player ; kristy mcpherson } ; score } } ; and { eq { hop { filter_eq { all_rows ; player ; laura diaz } ; score } ; 66 } ; eq { hop { filter_eq { all_rows ; player ; kristy mcpherson } ; score } ; 67 } } }, interpretation: select the rows whose player record fuzzily matches to laura diaz . take the score record of this row . select the rows whose player record fuzzily matches to kristy mcpherson . take the score record of this row . the first record is less than the second record . the score record of the first row is 66 . the score record of the second row is 67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; laura diaz } ; score } ; hop { filter_eq { all_rows ; player ; kristy mcpherson } ; score } } ; and { eq { hop { filter_eq { all_rows ; player ; laura diaz } ; score } ; 66 } ; eq { hop { filter_eq { all_rows ; player ; kristy mcpherson } ; score } ; 67 } } }, interpretation: the average of the attendance record of all rows is 52800 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 52800 }, interpretation: the average of the attendance record of all rows is 52800 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 52800 }, interpretation: select the rows whose opponent record fuzzily matches to sabrina gole\u0161 . there is only one such row in the table . the date record of this unqiue row is 23 april 1984 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; sabrina gole\u0161 } } ; eq { hop { filter_eq { all_rows ; opponent ; sabrina gole\u0161 } ; date } ; 23 april 1984 } }, interpretation: select the rows whose opponent record fuzzily matches to sabrina gole\u0161 . there is only one such row in the table . the date record of this unqiue row is 23 april 1984 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent ; sabrina gole\u0161 } } ; eq { hop { filter_eq { all_rows ; opponent ; sabrina gole\u0161 } ; date } ; 23 april 1984 } }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to west germany . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; west germany } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to west germany . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; west germany } } ; 2 }, interpretation: the average of the gold record of all rows is 3.29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 3.29 }, interpretation: the average of the gold record of all rows is 3.29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 3.29 }, interpretation: for the air date records of all rows , all of them fuzzily match to 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; air date ; 2006 }, interpretation: for the air date records of all rows , all of them fuzzily match to 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; air date ; 2006 }, interpretation: select the row whose to par record of all rows is 2nd minimum . the player record of this row is jim colbert .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; to par ; 2 } ; player } ; jim colbert }, interpretation: select the row whose to par record of all rows is 2nd minimum . the player record of this row is jim colbert .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; to par ; 2 } ; player } ; jim colbert }, interpretation: select the row whose enrolment record of all rows is maximum . the school record of this row is pembroke school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrolment } ; school } ; pembroke school }, interpretation: select the row whose enrolment record of all rows is maximum . the school record of this row is pembroke school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrolment } ; school } ; pembroke school }, interpretation: select the row whose population record of all rows is 3rd maximum . the city record of this row is beijing .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 3 } ; city } ; beijing }, interpretation: select the row whose population record of all rows is 3rd maximum . the city record of this row is beijing .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 3 } ; city } ; beijing }, interpretation: select the rows whose elevation ( m ) record is less than 2400 . there is only one such row in the table . the peak record of this unqiue row is pietrosul rodnei .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; elevation ( m ) ; 2400 } } ; eq { hop { filter_less { all_rows ; elevation ( m ) ; 2400 } ; peak } ; pietrosul rodnei } }, interpretation: select the rows whose elevation ( m ) record is less than 2400 . there is only one such row in the table . the peak record of this unqiue row is pietrosul rodnei .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; elevation ( m ) ; 2400 } } ; eq { hop { filter_less { all_rows ; elevation ( m ) ; 2400 } ; peak } ; pietrosul rodnei } }, interpretation: the 2nd minimum final placing record of all rows is 3rd . the season record of the row with 2nd minimum final placing record is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; final placing ; 2 } ; 3rd } ; eq { hop { nth_argmin { all_rows ; final placing ; 2 } ; season } ; 2006 } }, interpretation: the 2nd minimum final placing record of all rows is 3rd . the season record of the row with 2nd minimum final placing record is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; final placing ; 2 } ; 3rd } ; eq { hop { nth_argmin { all_rows ; final placing ; 2 } ; season } ; 2006 } }, interpretation: the average of the attendance record of all rows is 19119 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 19119 }, interpretation: the average of the attendance record of all rows is 19119 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 19119 }, interpretation: the average of the attendance record of all rows is 61409 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 61409 }, interpretation: the average of the attendance record of all rows is 61409 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 61409 }, interpretation: select the rows whose college record fuzzily matches to ohio state . there is only one such row in the table . the player record of this unqiue row is kirk barton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; ohio state } } ; eq { hop { filter_eq { all_rows ; college ; ohio state } ; player } ; kirk barton } }, interpretation: select the rows whose college record fuzzily matches to ohio state . there is only one such row in the table . the player record of this unqiue row is kirk barton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; ohio state } } ; eq { hop { filter_eq { all_rows ; college ; ohio state } ; player } ; kirk barton } }, interpretation: the average of the score record of all rows is 317.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 317.8 }, interpretation: the average of the score record of all rows is 317.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 317.8 }, interpretation: select the rows whose year record fuzzily matches to 1983 . take the points record of this row . select the rows whose year record fuzzily matches to 1984 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1983 } ; points } ; hop { filter_eq { all_rows ; year ; 1984 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 1983 . take the points record of this row . select the rows whose year record fuzzily matches to 1984 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1983 } ; points } ; hop { filter_eq { all_rows ; year ; 1984 } ; points } }, interpretation: select the row whose first elected record of all rows is 7th minimum . the district record of this row is south carolina 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 7 } ; district } ; south carolina 3 }, interpretation: select the row whose first elected record of all rows is 7th minimum . the district record of this row is south carolina 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 7 } ; district } ; south carolina 3 }, interpretation: for the label records of all rows , most of them fuzzily match to alfa records .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; label ; alfa records }, interpretation: select the rows whose tries against record is equal to 6 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tries against ; 6 } } ; 2 }, interpretation: select the rows whose tries against record is equal to 6 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tries against ; 6 } } ; 2 }, interpretation: select the rows whose wins record is equal to 1 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 1 } } ; eq { hop { filter_eq { all_rows ; wins ; 1 } ; tournament } ; the open championship } }, interpretation: select the rows whose wins record is equal to 1 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; wins ; 1 } } ; eq { hop { filter_eq { all_rows ; wins ; 1 } ; tournament } ; the open championship } }, interpretation: select the rows whose winning driver record fuzzily matches to archie scott brown . there is only one such row in the table . the race name record of this unqiue row is i brscc formula 1 race .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winning driver ; archie scott brown } } ; eq { hop { filter_eq { all_rows ; winning driver ; archie scott brown } ; race name } ; i brscc formula 1 race } }, interpretation: select the rows whose winning driver record fuzzily matches to archie scott brown . there is only one such row in the table . the race name record of this unqiue row is i brscc formula 1 race .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; winning driver ; archie scott brown } } ; eq { hop { filter_eq { all_rows ; winning driver ; archie scott brown } ; race name } ; i brscc formula 1 race } }, interpretation: select the rows whose spacecraft record fuzzily matches to venera . the sum of the time elapsed record of these rows is 205 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; spacecraft ; venera } ; time elapsed } ; 205 }, interpretation: select the rows whose spacecraft record fuzzily matches to venera . the sum of the time elapsed record of these rows is 205 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; spacecraft ; venera } ; time elapsed } ; 205 }, interpretation: select the rows whose status record fuzzily matches to static display . there is only one such row in the table . the name / number record of this unqiue row is no 45 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; static display } } ; eq { hop { filter_eq { all_rows ; status ; static display } ; name / number } ; no 45 } }, interpretation: select the rows whose status record fuzzily matches to static display . there is only one such row in the table . the name / number record of this unqiue row is no 45 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; static display } } ; eq { hop { filter_eq { all_rows ; status ; static display } ; name / number } ; no 45 } }, interpretation: select the rows whose location record fuzzily matches to usa . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; usa } } ; 6 }, interpretation: select the rows whose location record fuzzily matches to usa . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; usa } } ; 6 }, interpretation: select the rows whose surface record fuzzily matches to carpet . there is only one such row in the table . the tournament record of this unqiue row is eckental , germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; carpet } } ; eq { hop { filter_eq { all_rows ; surface ; carpet } ; tournament } ; eckental , germany } }, interpretation: select the rows whose surface record fuzzily matches to carpet . there is only one such row in the table . the tournament record of this unqiue row is eckental , germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; carpet } } ; eq { hop { filter_eq { all_rows ; surface ; carpet } ; tournament } ; eckental , germany } }, interpretation: select the row whose votes record of all rows is maximum . the artist record of this row is sahlene .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; votes } ; artist } ; sahlene }, interpretation: select the row whose votes record of all rows is maximum . the artist record of this row is sahlene .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; votes } ; artist } ; sahlene }, interpretation: select the rows whose total record is less than 13 . the sum of the silver record of these rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less { all_rows ; total ; 13 } ; silver } ; 2 }, interpretation: select the rows whose total record is less than 13 . the sum of the silver record of these rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_less { all_rows ; total ; 13 } ; silver } ; 2 }, interpretation: select the rows whose equipment record fuzzily matches to ktm - vmc . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; equipment ; ktm - vmc } } ; 2 }, interpretation: select the rows whose equipment record fuzzily matches to ktm - vmc . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; equipment ; ktm - vmc } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 12 june 1937 . select the row whose crowd record of these rows is maximum . the venue record of this row is punt road oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd } ; venue } ; punt road oval }, interpretation: select the rows whose date record fuzzily matches to 12 june 1937 . select the row whose crowd record of these rows is maximum . the venue record of this row is punt road oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd } ; venue } ; punt road oval }, interpretation: select the row whose max power record of all rows is minimum . the vehicle record of this row is nissan y11 ad van .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; max power } ; vehicle } ; nissan y11 ad van }, interpretation: select the row whose max power record of all rows is minimum . the vehicle record of this row is nissan y11 ad van .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; max power } ; vehicle } ; nissan y11 ad van }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . there is only one such row in the table . the incumbent record of this unqiue row is tony p hall .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; unopposed } } ; eq { hop { filter_eq { all_rows ; candidates ; unopposed } ; incumbent } ; tony p hall } }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . there is only one such row in the table . the incumbent record of this unqiue row is tony p hall .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; candidates ; unopposed } } ; eq { hop { filter_eq { all_rows ; candidates ; unopposed } ; incumbent } ; tony p hall } }, interpretation: select the row whose position record of all rows is 2nd maximum . the year record of this row is 1987 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; position ; 2 } ; year } ; 1987 }, interpretation: select the row whose position record of all rows is 2nd maximum . the year record of this row is 1987 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; position ; 2 } ; year } ; 1987 }, interpretation: the average of the attendance record of all rows is 16013 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16013 }, interpretation: the average of the attendance record of all rows is 16013 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 16013 }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: select the rows whose pavement record fuzzily matches to asphalt . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pavement ; asphalt } } ; 9 }, interpretation: select the rows whose pavement record fuzzily matches to asphalt . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pavement ; asphalt } } ; 9 }, interpretation: select the rows whose nba years record is equal to 3 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nba years ; 3 } } ; 5 }, interpretation: select the rows whose nba years record is equal to 3 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nba years ; 3 } } ; 5 }, interpretation: select the rows whose margin of victory record fuzzily matches to playoff . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin of victory ; playoff } } ; 2 }, interpretation: select the rows whose margin of victory record fuzzily matches to playoff . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; margin of victory ; playoff } } ; 2 }, interpretation: select the rows whose first episode record fuzzily matches to golden parachute . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first episode ; golden parachute } } ; 6 }, interpretation: select the rows whose first episode record fuzzily matches to golden parachute . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first episode ; golden parachute } } ; 6 }, interpretation: select the rows whose title record fuzzily matches to pilot . take the no in series record of this row . select the rows whose title record fuzzily matches to nightmare on al 's street . take the no in series record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; pilot } ; no in series } ; hop { filter_eq { all_rows ; title ; nightmare on al 's street } ; no in series } }, interpretation: select the rows whose title record fuzzily matches to pilot . take the no in series record of this row . select the rows whose title record fuzzily matches to nightmare on al 's street . take the no in series record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; pilot } ; no in series } ; hop { filter_eq { all_rows ; title ; nightmare on al 's street } ; no in series } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is december 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; december 16 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is december 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; december 16 }, interpretation: select the rows whose ring name record fuzzily matches to ikioi sh\u014dta . take the debut record of this row . select the rows whose ring name record fuzzily matches to tochinoshin tsuyoshi . take the debut record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; ring name ; ikioi sh\u014dta } ; debut } ; hop { filter_eq { all_rows ; ring name ; tochinoshin tsuyoshi } ; debut } }, interpretation: select the rows whose ring name record fuzzily matches to ikioi sh\u014dta . take the debut record of this row . select the rows whose ring name record fuzzily matches to tochinoshin tsuyoshi . take the debut record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; ring name ; ikioi sh\u014dta } ; debut } ; hop { filter_eq { all_rows ; ring name ; tochinoshin tsuyoshi } ; debut } }, interpretation: select the rows whose incumbent record fuzzily matches to john lewis . take the elected record of this row . select the rows whose incumbent record fuzzily matches to nathan deal . take the elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; john lewis } ; elected } ; hop { filter_eq { all_rows ; incumbent ; nathan deal } ; elected } }, interpretation: select the rows whose incumbent record fuzzily matches to john lewis . take the elected record of this row . select the rows whose incumbent record fuzzily matches to nathan deal . take the elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; john lewis } ; elected } ; hop { filter_eq { all_rows ; incumbent ; nathan deal } ; elected } }, interpretation: select the rows whose driver record fuzzily matches to kyle busch . take the car record of this row . select the rows whose driver record fuzzily matches to matt crafton . take the car record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; driver ; kyle busch } ; car } ; hop { filter_eq { all_rows ; driver ; matt crafton } ; car } }, interpretation: select the rows whose driver record fuzzily matches to kyle busch . take the car record of this row . select the rows whose driver record fuzzily matches to matt crafton . take the car record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; driver ; kyle busch } ; car } ; hop { filter_eq { all_rows ; driver ; matt crafton } ; car } }, interpretation: select the rows whose country record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; country } } ; 5 }, interpretation: select the rows whose country record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; country } } ; 5 }, interpretation: the average of the from record of all rows is 1976 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; from } ; 1976 }, interpretation: the average of the from record of all rows is 1976 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; from } ; 1976 }, interpretation: the average of the best score record of all rows is 37 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; best score } ; 37 }, interpretation: the average of the best score record of all rows is 37 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; best score } ; 37 }, interpretation: select the rows whose td 's record is greater than or equal to 3 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; td 's ; 3 } } ; 4 }, interpretation: select the rows whose td 's record is greater than or equal to 3 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; td 's ; 3 } } ; 4 }, interpretation: select the rows whose championship record fuzzily matches to australian open . take the score in the final record of this row . select the rows whose championship record fuzzily matches to wimbledon . take the score in the final record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; championship ; australian open } ; score in the final } ; hop { filter_eq { all_rows ; championship ; wimbledon } ; score in the final } }, interpretation: select the rows whose championship record fuzzily matches to australian open . take the score in the final record of this row . select the rows whose championship record fuzzily matches to wimbledon . take the score in the final record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; championship ; australian open } ; score in the final } ; hop { filter_eq { all_rows ; championship ; wimbledon } ; score in the final } }, interpretation: the average of the win % record of all rows is 505 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; win % } ; 505 }, interpretation: the average of the win % record of all rows is 505 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; win % } ; 505 }, interpretation: select the row whose peak record of all rows is maximum . the english title record of this row is heart of greed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; peak } ; english title } ; heart of greed }, interpretation: select the row whose peak record of all rows is maximum . the english title record of this row is heart of greed .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; peak } ; english title } ; heart of greed }, interpretation: for the position records of all rows , most of them fuzzily match to guard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; guard }, interpretation: for the position records of all rows , most of them fuzzily match to guard .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; guard }, interpretation: select the rows whose position record fuzzily matches to goalkeeper . there is only one such row in the table . the player record of this unqiue row is paul robinson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; goalkeeper } } ; eq { hop { filter_eq { all_rows ; position ; goalkeeper } ; player } ; paul robinson } }, interpretation: select the rows whose position record fuzzily matches to goalkeeper . there is only one such row in the table . the player record of this unqiue row is paul robinson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; goalkeeper } } ; eq { hop { filter_eq { all_rows ; position ; goalkeeper } ; player } ; paul robinson } }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is march 5 , 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; march 5 , 2007 }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is march 5 , 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; march 5 , 2007 }, interpretation: select the rows whose transmitter record fuzzily matches to mullaghanish . take the 2fm ( mhz ) record of this row . select the rows whose transmitter record fuzzily matches to mount leinster . take the 2fm ( mhz ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; transmitter ; mullaghanish } ; 2fm ( mhz ) } ; hop { filter_eq { all_rows ; transmitter ; mount leinster } ; 2fm ( mhz ) } }, interpretation: select the rows whose transmitter record fuzzily matches to mullaghanish . take the 2fm ( mhz ) record of this row . select the rows whose transmitter record fuzzily matches to mount leinster . take the 2fm ( mhz ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; transmitter ; mullaghanish } ; 2fm ( mhz ) } ; hop { filter_eq { all_rows ; transmitter ; mount leinster } ; 2fm ( mhz ) } }, interpretation: the maximum runs conceded record of all rows is 368 . the name record of the row with superlative runs conceded record is lasith malinga .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; runs conceded } ; 368 } ; eq { hop { argmax { all_rows ; runs conceded } ; name } ; lasith malinga } }, interpretation: the maximum runs conceded record of all rows is 368 . the name record of the row with superlative runs conceded record is lasith malinga .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; runs conceded } ; 368 } ; eq { hop { argmax { all_rows ; runs conceded } ; name } ; lasith malinga } }, interpretation: select the rows whose name record fuzzily matches to nicola cassio . take the 100 m record of this row . select the rows whose name record fuzzily matches to amaury leveaux . take the 100 m record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; nicola cassio } ; 100 m } ; hop { filter_eq { all_rows ; name ; amaury leveaux } ; 100 m } }, interpretation: select the rows whose name record fuzzily matches to nicola cassio . take the 100 m record of this row . select the rows whose name record fuzzily matches to amaury leveaux . take the 100 m record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; nicola cassio } ; 100 m } ; hop { filter_eq { all_rows ; name ; amaury leveaux } ; 100 m } }, interpretation: select the rows whose writer record fuzzily matches to ed roe . there is only one such row in the table . the production code record of this unqiue row is 402 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; writer ; ed roe } } ; eq { hop { filter_eq { all_rows ; writer ; ed roe } ; production code } ; 402 } }, interpretation: select the rows whose writer record fuzzily matches to ed roe . there is only one such row in the table . the production code record of this unqiue row is 402 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; writer ; ed roe } } ; eq { hop { filter_eq { all_rows ; writer ; ed roe } ; production code } ; 402 } }, interpretation: select the rows whose home / away record fuzzily matches to home . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; home / away ; home } } ; 6 }, interpretation: select the rows whose home / away record fuzzily matches to home . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; home / away ; home } } ; 6 }, interpretation: select the rows whose venue record fuzzily matches to golf costa adeje . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; golf costa adeje } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to golf costa adeje . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; golf costa adeje } } ; 3 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 4 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 4 }, interpretation: select the row whose year record of all rows is 1st minimum . the opponent record of this row is south sydney rabbitohs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 1 } ; opponent } ; south sydney rabbitohs }, interpretation: select the row whose year record of all rows is 1st minimum . the opponent record of this row is south sydney rabbitohs .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 1 } ; opponent } ; south sydney rabbitohs }, interpretation: select the rows whose score record is equal to 64 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 64 } } ; 2 }, interpretation: select the rows whose score record is equal to 64 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 64 } } ; 2 }, interpretation: select the row whose opponents record of all rows is maximum . the opponent record of this row is new york jets .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; opponents } ; opponent } ; new york jets }, interpretation: select the row whose opponents record of all rows is maximum . the opponent record of this row is new york jets .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; opponents } ; opponent } ; new york jets }, interpretation: for the time records of all rows , most of them are less than 4:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; time ; 4:00 }, interpretation: for the time records of all rows , most of them are less than 4:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; time ; 4:00 }, interpretation: select the rows whose focal plane in ft ( m ) record fuzzily matches to n / a . there is only one such row in the table . the lighthouse record of this unqiue row is basco .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; focal plane in ft ( m ) ; n / a } } ; eq { hop { filter_eq { all_rows ; focal plane in ft ( m ) ; n / a } ; lighthouse } ; basco } }, interpretation: select the rows whose focal plane in ft ( m ) record fuzzily matches to n / a . there is only one such row in the table . the lighthouse record of this unqiue row is basco .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; focal plane in ft ( m ) ; n / a } } ; eq { hop { filter_eq { all_rows ; focal plane in ft ( m ) ; n / a } ; lighthouse } ; basco } }, interpretation: select the row whose price ( usd ) record of all rows is 1st maximum . the model number record of this row is itanium 2 9040 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; price ( usd ) ; 1 } ; model number } ; itanium 2 9040 }, interpretation: select the row whose price ( usd ) record of all rows is 1st maximum . the model number record of this row is itanium 2 9040 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; price ( usd ) ; 1 } ; model number } ; itanium 2 9040 }, interpretation: select the row whose score record of all rows is maximum . the game record of this row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; game } ; 5 }, interpretation: select the row whose score record of all rows is maximum . the game record of this row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; game } ; 5 }, interpretation: select the rows whose type record fuzzily matches to gravity . among these rows , select the rows whose drainage basin ( km square ) record is equal to 0.0 . there is only one such row in the table . the location record of this unqiue row is morc\u00edn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; type ; gravity } ; drainage basin ( km square ) ; 0.0 } } ; eq { hop { filter_eq { filter_eq { all_rows ; type ; gravity } ; drainage basin ( km square ) ; 0.0 } ; location } ; morc\u00edn } }, interpretation: select the rows whose type record fuzzily matches to gravity . among these rows , select the rows whose drainage basin ( km square ) record is equal to 0.0 . there is only one such row in the table . the location record of this unqiue row is morc\u00edn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; type ; gravity } ; drainage basin ( km square ) ; 0.0 } } ; eq { hop { filter_eq { filter_eq { all_rows ; type ; gravity } ; drainage basin ( km square ) ; 0.0 } ; location } ; morc\u00edn } }, interpretation: select the row whose negotiable debt at mid - 2005 ( us dollar bn equivalent ) record of all rows is 2nd maximum . the currency record of this row is us dollar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; negotiable debt at mid - 2005 ( us dollar bn equivalent ) ; 2 } ; currency } ; us dollar }, interpretation: select the row whose negotiable debt at mid - 2005 ( us dollar bn equivalent ) record of all rows is 2nd maximum . the currency record of this row is us dollar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; negotiable debt at mid - 2005 ( us dollar bn equivalent ) ; 2 } ; currency } ; us dollar }, interpretation: select the row whose season record of all rows is 3rd minimum . the runner - up record of this row is alania vladikavkaz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; season ; 3 } ; runner - up } ; alania vladikavkaz }, interpretation: select the row whose season record of all rows is 3rd minimum . the runner - up record of this row is alania vladikavkaz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; season ; 3 } ; runner - up } ; alania vladikavkaz }, interpretation: select the row whose date record of all rows is minimum . the venue record of this row is corio oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; venue } ; corio oval }, interpretation: select the row whose date record of all rows is minimum . the venue record of this row is corio oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; venue } ; corio oval }, interpretation: select the rows whose year joined record is equal to 1932 . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year joined ; 1932 } } ; 7 }, interpretation: select the rows whose year joined record is equal to 1932 . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year joined ; 1932 } } ; 7 }, interpretation: the average of the epa rated combined fuel economy record of all rows is 100 mpg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; epa rated combined fuel economy } ; 100 mpg }, interpretation: the average of the epa rated combined fuel economy record of all rows is 100 mpg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; epa rated combined fuel economy } ; 100 mpg }, interpretation: select the rows whose year record fuzzily matches to 1959 . take the rank record of this row . select the rows whose year record fuzzily matches to 1958 . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 1959 } ; rank } ; hop { filter_eq { all_rows ; year ; 1958 } ; rank } }, interpretation: select the rows whose year record fuzzily matches to 1959 . take the rank record of this row . select the rows whose year record fuzzily matches to 1958 . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 1959 } ; rank } ; hop { filter_eq { all_rows ; year ; 1958 } ; rank } }, interpretation: the 2nd maximum revenue in usd record of all rows is 469.2 billion . the company record of the row with 2nd maximum revenue in usd record is walmart .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; revenue in usd ; 2 } ; 469.2 billion } ; eq { hop { nth_argmax { all_rows ; revenue in usd ; 2 } ; company } ; walmart } }, interpretation: the 2nd maximum revenue in usd record of all rows is 469.2 billion . the company record of the row with 2nd maximum revenue in usd record is walmart .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; revenue in usd ; 2 } ; 469.2 billion } ; eq { hop { nth_argmax { all_rows ; revenue in usd ; 2 } ; company } ; walmart } }, interpretation: select the rows whose nationality record fuzzily matches to united states . among these rows , select the rows whose from record fuzzily matches to idaho state . there is only one such row in the table . the jersey number ( s ) record of this unqiue row is 41 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; nationality ; united states } ; from ; idaho state } } ; eq { hop { filter_eq { filter_eq { all_rows ; nationality ; united states } ; from ; idaho state } ; jersey number ( s ) } ; 41 } }, interpretation: select the rows whose nationality record fuzzily matches to united states . among these rows , select the rows whose from record fuzzily matches to idaho state . there is only one such row in the table . the jersey number ( s ) record of this unqiue row is 41 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; nationality ; united states } ; from ; idaho state } } ; eq { hop { filter_eq { filter_eq { all_rows ; nationality ; united states } ; from ; idaho state } ; jersey number ( s ) } ; 41 } }, interpretation: select the row whose first air date record of all rows is 2nd minimum . the city record of this row is coffs harbour .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first air date ; 2 } ; city } ; coffs harbour }, interpretation: select the row whose first air date record of all rows is 2nd minimum . the city record of this row is coffs harbour .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first air date ; 2 } ; city } ; coffs harbour }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the written by records of all rows , all of them fuzzily match to john sullivan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; written by ; john sullivan }, interpretation: for the written by records of all rows , all of them fuzzily match to john sullivan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; written by ; john sullivan }, interpretation: select the rows whose space agency record fuzzily matches to nasa . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; space agency ; nasa } } ; 3 }, interpretation: select the rows whose space agency record fuzzily matches to nasa . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; space agency ; nasa } } ; 3 }, interpretation: the average of the runs record of all rows is 143 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; runs } ; 143 }, interpretation: the average of the runs record of all rows is 143 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; runs } ; 143 }, interpretation: for the top division titles records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; top division titles ; 0 }, interpretation: for the top division titles records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; top division titles ; 0 }, interpretation: select the rows whose school enrollment ( 200810 ) record is greater than 70 . among these rows , select the rows whose football record fuzzily matches to y . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; school enrollment ( 200810 ) ; 70 } ; football ; y } } ; 4 }, interpretation: select the rows whose school enrollment ( 200810 ) record is greater than 70 . among these rows , select the rows whose football record fuzzily matches to y . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; school enrollment ( 200810 ) ; 70 } ; football ; y } } ; 4 }, interpretation: select the row whose points record of all rows is 1st maximum . the name record of this row is jakim donaldson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 1 } ; name } ; jakim donaldson }, interpretation: select the row whose points record of all rows is 1st maximum . the name record of this row is jakim donaldson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 1 } ; name } ; jakim donaldson }, interpretation: select the rows whose title record fuzzily matches to big time babysitting . take the original us air date record of this row . select the rows whose title record fuzzily matches to big time gold . take the original us air date record of this row . the first record is less than the second record . the original us air date record of the first row is october 13 , 2012 . the original us air date record of the second row is october 20 , 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; title ; big time babysitting } ; original us air date } ; hop { filter_eq { all_rows ; title ; big time gold } ; original us air date } } ; and { eq { hop { filter_eq { all_rows ; title ; big time babysitting } ; original us air date } ; october 13 , 2012 } ; eq { hop { filter_eq { all_rows ; title ; big time gold } ; original us air date } ; october 20 , 2012 } } }, interpretation: select the rows whose title record fuzzily matches to big time babysitting . take the original us air date record of this row . select the rows whose title record fuzzily matches to big time gold . take the original us air date record of this row . the first record is less than the second record . the original us air date record of the first row is october 13 , 2012 . the original us air date record of the second row is october 20 , 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; title ; big time babysitting } ; original us air date } ; hop { filter_eq { all_rows ; title ; big time gold } ; original us air date } } ; and { eq { hop { filter_eq { all_rows ; title ; big time babysitting } ; original us air date } ; october 13 , 2012 } ; eq { hop { filter_eq { all_rows ; title ; big time gold } ; original us air date } ; october 20 , 2012 } } }, interpretation: select the rows whose gold record is equal to 7 . there is only one such row in the table . the nation record of this unqiue row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 7 } } ; eq { hop { filter_eq { all_rows ; gold ; 7 } ; nation } ; soviet union } }, interpretation: select the rows whose gold record is equal to 7 . there is only one such row in the table . the nation record of this unqiue row is soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 7 } } ; eq { hop { filter_eq { all_rows ; gold ; 7 } ; nation } ; soviet union } }, interpretation: select the rows whose event record fuzzily matches to ufc . among these rows , select the rows whose res record fuzzily matches to win . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; event ; ufc } ; res ; win } } ; 8 }, interpretation: select the rows whose event record fuzzily matches to ufc . among these rows , select the rows whose res record fuzzily matches to win . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; event ; ufc } ; res ; win } } ; 8 }, interpretation: for the attendance records of all rows , most of them are greater than 40000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 40000 }, interpretation: for the attendance records of all rows , most of them are greater than 40000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 40000 }, interpretation: for the event records of all rows , all of them fuzzily match to high jump .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; event ; high jump }, interpretation: for the event records of all rows , all of them fuzzily match to high jump .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; event ; high jump }, interpretation: select the rows whose gpu model record fuzzily matches to hd graphics 4000 . for the l3 cache records of these rows , most of them fuzzily match to 6mb .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; gpu model ; hd graphics 4000 } ; l3 cache ; 6mb }, interpretation: select the rows whose gpu model record fuzzily matches to hd graphics 4000 . for the l3 cache records of these rows , most of them fuzzily match to 6mb .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; gpu model ; hd graphics 4000 } ; l3 cache ; 6mb }, interpretation: select the rows whose interregnum began record fuzzily matches to 20 february 1790 death of joseph ii . take the duration record of this row . select the rows whose interregnum began record fuzzily matches to 1 march 1792 death of leopold ii . take the duration record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; interregnum began ; 20 february 1790 death of joseph ii } ; duration } ; hop { filter_eq { all_rows ; interregnum began ; 1 march 1792 death of leopold ii } ; duration } }, interpretation: select the rows whose interregnum began record fuzzily matches to 20 february 1790 death of joseph ii . take the duration record of this row . select the rows whose interregnum began record fuzzily matches to 1 march 1792 death of leopold ii . take the duration record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; interregnum began ; 20 february 1790 death of joseph ii } ; duration } ; hop { filter_eq { all_rows ; interregnum began ; 1 march 1792 death of leopold ii } ; duration } }, interpretation: select the row whose number of episodes record of all rows is 3rd maximum . the english title ( chinese title ) record of this row is journey to the west ii \u897f\u904a\u8a18 ( \u8cb3 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; number of episodes ; 3 } ; english title ( chinese title ) } ; journey to the west ii \u897f\u904a\u8a18 ( \u8cb3 ) }, interpretation: select the row whose number of episodes record of all rows is 3rd maximum . the english title ( chinese title ) record of this row is journey to the west ii \u897f\u904a\u8a18 ( \u8cb3 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; number of episodes ; 3 } ; english title ( chinese title ) } ; journey to the west ii \u897f\u904a\u8a18 ( \u8cb3 ) }, interpretation: the 4th minimum week record of all rows is 4 . the opponent record of the row with 4th minimum week record is chicago bears .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; week ; 4 } ; 4 } ; eq { hop { nth_argmin { all_rows ; week ; 4 } ; opponent } ; chicago bears } }, interpretation: the 4th minimum week record of all rows is 4 . the opponent record of the row with 4th minimum week record is chicago bears .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; week ; 4 } ; 4 } ; eq { hop { nth_argmin { all_rows ; week ; 4 } ; opponent } ; chicago bears } }, interpretation: the sum of the score record of all rows is 29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 29 }, interpretation: the sum of the score record of all rows is 29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 29 }, interpretation: select the row whose result record of all rows is maximum . the opponent record of this row is new england patriots .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; opponent } ; new england patriots }, interpretation: select the row whose result record of all rows is maximum . the opponent record of this row is new england patriots .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; opponent } ; new england patriots }, interpretation: the sum of the laps record of all rows is 3670 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 3670 }, interpretation: the sum of the laps record of all rows is 3670 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 3670 }, interpretation: select the row whose losses record of all rows is 1st maximum . the team record of this row is new york liberty .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; losses ; 1 } ; team } ; new york liberty }, interpretation: select the row whose losses record of all rows is 1st maximum . the team record of this row is new york liberty .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; losses ; 1 } ; team } ; new york liberty }, interpretation: select the rows whose bronze record fuzzily matches to jerzy greszkiewicz . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; jerzy greszkiewicz } } ; 2 }, interpretation: select the rows whose bronze record fuzzily matches to jerzy greszkiewicz . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; jerzy greszkiewicz } } ; 2 }, interpretation: select the rows whose location attendance record fuzzily matches to united center . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; united center } } ; 3 }, interpretation: select the rows whose location attendance record fuzzily matches to united center . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; united center } } ; 3 }, interpretation: the average of the crowd record of all rows is 16000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16000 }, interpretation: the average of the crowd record of all rows is 16000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16000 }, interpretation: select the rows whose losses record is equal to 9 . there is only one such row in the table . the club record of this unqiue row is sestao .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; losses ; 9 } } ; eq { hop { filter_eq { all_rows ; losses ; 9 } ; club } ; sestao } }, interpretation: select the rows whose losses record is equal to 9 . there is only one such row in the table . the club record of this unqiue row is sestao .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; losses ; 9 } } ; eq { hop { filter_eq { all_rows ; losses ; 9 } ; club } ; sestao } }, interpretation: select the row whose goals record of all rows is maximum . the player record of this row is dario vido\u0161i\u0107 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals } ; player } ; dario vido\u0161i\u0107 }, interpretation: select the row whose goals record of all rows is maximum . the player record of this row is dario vido\u0161i\u0107 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals } ; player } ; dario vido\u0161i\u0107 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 17 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 17 }, interpretation: select the row whose stadium capacity record of all rows is 2nd maximum . the university record of this row is universit\u00e9 laval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; stadium capacity ; 2 } ; university } ; universit\u00e9 laval }, interpretation: select the row whose stadium capacity record of all rows is 2nd maximum . the university record of this row is universit\u00e9 laval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; stadium capacity ; 2 } ; university } ; universit\u00e9 laval }, interpretation: the 2nd maximum position record of all rows is 10th . the competition record of the row with 2nd maximum position record is olympic games .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; position ; 2 } ; 10th } ; eq { hop { nth_argmax { all_rows ; position ; 2 } ; competition } ; olympic games } }, interpretation: the 2nd maximum position record of all rows is 10th . the competition record of the row with 2nd maximum position record is olympic games .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; position ; 2 } ; 10th } ; eq { hop { nth_argmax { all_rows ; position ; 2 } ; competition } ; olympic games } }, interpretation: select the rows whose driver record fuzzily matches to mike spence . take the laps record of this row . select the rows whose driver record fuzzily matches to jo bonnier . take the laps record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; driver ; mike spence } ; laps } ; hop { filter_eq { all_rows ; driver ; jo bonnier } ; laps } } ; 1 }, interpretation: select the rows whose driver record fuzzily matches to mike spence . take the laps record of this row . select the rows whose driver record fuzzily matches to jo bonnier . take the laps record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; driver ; mike spence } ; laps } ; hop { filter_eq { all_rows ; driver ; jo bonnier } ; laps } } ; 1 }, interpretation: the sum of the round record of all rows is 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; round } ; 26 }, interpretation: the sum of the round record of all rows is 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; round } ; 26 }, interpretation: the average of the quantity made record of all rows is 3.83 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; quantity made } ; 3.83 }, interpretation: the average of the quantity made record of all rows is 3.83 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; quantity made } ; 3.83 }, interpretation: select the rows whose population ( 2006 ) record is less than 1000 . there is only one such row in the table . the name record of this unqiue row is saint - andr\u00e9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; population ( 2006 ) ; 1000 } } ; eq { hop { filter_less { all_rows ; population ( 2006 ) ; 1000 } ; name } ; saint - andr\u00e9 } }, interpretation: select the rows whose population ( 2006 ) record is less than 1000 . there is only one such row in the table . the name record of this unqiue row is saint - andr\u00e9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; population ( 2006 ) ; 1000 } } ; eq { hop { filter_less { all_rows ; population ( 2006 ) ; 1000 } ; name } ; saint - andr\u00e9 } }, interpretation: for the reason for change records of all rows , most of them fuzzily match to died .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reason for change ; died }, interpretation: for the reason for change records of all rows , most of them fuzzily match to died .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reason for change ; died }, interpretation: select the rows whose manufacturer record fuzzily matches to kawasaki . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; manufacturer ; kawasaki } }, interpretation: select the rows whose manufacturer record fuzzily matches to kawasaki . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; manufacturer ; kawasaki } }, interpretation: select the rows whose builder record fuzzily matches to north british . take the date record of this row . select the rows whose builder record fuzzily matches to g & swr kilmarnock . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; builder ; north british } ; date } ; hop { filter_eq { all_rows ; builder ; g & swr kilmarnock } ; date } }, interpretation: select the rows whose builder record fuzzily matches to north british . take the date record of this row . select the rows whose builder record fuzzily matches to g & swr kilmarnock . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; builder ; north british } ; date } ; hop { filter_eq { all_rows ; builder ; g & swr kilmarnock } ; date } }, interpretation: for the first elected records of all rows , most of them are equal to 1982 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first elected ; 1982 }, interpretation: for the first elected records of all rows , most of them are equal to 1982 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first elected ; 1982 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is january 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; january 30 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is january 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; january 30 }, interpretation: select the rows whose result record fuzzily matches to lost . there is only one such row in the table . the district record of this unqiue row is illinois 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; lost } } ; eq { hop { filter_eq { all_rows ; result ; lost } ; district } ; illinois 3 } }, interpretation: select the rows whose result record fuzzily matches to lost . there is only one such row in the table . the district record of this unqiue row is illinois 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; lost } } ; eq { hop { filter_eq { all_rows ; result ; lost } ; district } ; illinois 3 } }, interpretation: select the rows whose silver record is greater than 0 . among these rows , select the rows whose gold record is equal to 4 . there is only one such row in the table . the athlete record of this unqiue row is mohammad nassiri .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_greater { all_rows ; silver ; 0 } ; gold ; 4 } } ; eq { hop { filter_eq { filter_greater { all_rows ; silver ; 0 } ; gold ; 4 } ; athlete } ; mohammad nassiri } }, interpretation: select the rows whose silver record is greater than 0 . among these rows , select the rows whose gold record is equal to 4 . there is only one such row in the table . the athlete record of this unqiue row is mohammad nassiri .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_greater { all_rows ; silver ; 0 } ; gold ; 4 } } ; eq { hop { filter_eq { filter_greater { all_rows ; silver ; 0 } ; gold ; 4 } ; athlete } ; mohammad nassiri } }, interpretation: the 3rd minimum year record of all rows is 2006 . the team record of the row with 3rd minimum year record is rollcentre racing .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 3 } ; 2006 } ; eq { hop { nth_argmin { all_rows ; year ; 3 } ; team } ; rollcentre racing } }, interpretation: the 3rd minimum year record of all rows is 2006 . the team record of the row with 3rd minimum year record is rollcentre racing .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 3 } ; 2006 } ; eq { hop { nth_argmin { all_rows ; year ; 3 } ; team } ; rollcentre racing } }, interpretation: the sum of the electorate record of all rows is 2633581 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; electorate } ; 2633581 }, interpretation: the sum of the electorate record of all rows is 2633581 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; electorate } ; 2633581 }, interpretation: select the rows whose successor record fuzzily matches to hopkins holsey ( j ) . take the date successor seated record of this row . select the rows whose successor record fuzzily matches to john young ( aj ) . take the date successor seated record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; successor ; hopkins holsey ( j ) } ; date successor seated } ; hop { filter_eq { all_rows ; successor ; john young ( aj ) } ; date successor seated } }, interpretation: select the rows whose successor record fuzzily matches to hopkins holsey ( j ) . take the date successor seated record of this row . select the rows whose successor record fuzzily matches to john young ( aj ) . take the date successor seated record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; successor ; hopkins holsey ( j ) } ; date successor seated } ; hop { filter_eq { all_rows ; successor ; john young ( aj ) } ; date successor seated } }, interpretation: for the nationality records of all rows , all of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; canada }, interpretation: for the nationality records of all rows , all of them fuzzily match to canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; canada }, interpretation: select the rows whose location record fuzzily matches to roskilde ring . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; roskilde ring } } ; 8 }, interpretation: select the rows whose location record fuzzily matches to roskilde ring . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; roskilde ring } } ; 8 }, interpretation: the average of the crowd record of all rows is 21996 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21996 }, interpretation: the average of the crowd record of all rows is 21996 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21996 }, interpretation: select the row whose owgr points record of all rows is maximum . the tournament record of this row is ballantine 's championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; owgr points } ; tournament } ; ballantine 's championship }, interpretation: select the row whose owgr points record of all rows is maximum . the tournament record of this row is ballantine 's championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; owgr points } ; tournament } ; ballantine 's championship }, interpretation: select the rows whose player record fuzzily matches to brad lamb . take the round record of this row . select the rows whose player record fuzzily matches to mark maddox . take the round record of this row . the second record is 1 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; brad lamb } ; round } ; hop { filter_eq { all_rows ; player ; mark maddox } ; round } } ; -1 }, interpretation: select the rows whose player record fuzzily matches to brad lamb . take the round record of this row . select the rows whose player record fuzzily matches to mark maddox . take the round record of this row . the second record is 1 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; brad lamb } ; round } ; hop { filter_eq { all_rows ; player ; mark maddox } ; round } } ; -1 }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is olympiacos cfp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; olympiacos cfp }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is olympiacos cfp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; olympiacos cfp }, interpretation: select the row whose wins record of all rows is maximum . the constructor record of this row is citro\u00ebn total world rally team .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; constructor } ; citro\u00ebn total world rally team }, interpretation: select the row whose wins record of all rows is maximum . the constructor record of this row is citro\u00ebn total world rally team .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; constructor } ; citro\u00ebn total world rally team }, interpretation: select the rows whose withdrawn record is equal to 1951 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; withdrawn ; 1951 } } ; 5 }, interpretation: select the rows whose withdrawn record is equal to 1951 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; withdrawn ; 1951 } } ; 5 }, interpretation: the average of the score record of all rows is 206 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 206 }, interpretation: the average of the score record of all rows is 206 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 206 }, interpretation: select the rows whose laps record is equal to 71 . among these rows , select the rows whose constructor record fuzzily matches to renault . there is only one such row in the table . the driver record of this unqiue row is fernando alonso .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; laps ; 71 } ; constructor ; renault } } ; eq { hop { filter_eq { filter_eq { all_rows ; laps ; 71 } ; constructor ; renault } ; driver } ; fernando alonso } }, interpretation: select the rows whose laps record is equal to 71 . among these rows , select the rows whose constructor record fuzzily matches to renault . there is only one such row in the table . the driver record of this unqiue row is fernando alonso .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; laps ; 71 } ; constructor ; renault } } ; eq { hop { filter_eq { filter_eq { all_rows ; laps ; 71 } ; constructor ; renault } ; driver } ; fernando alonso } }, interpretation: select the rows whose date record fuzzily matches to november 10 , 1963 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 3 , 1963 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; november 10 , 1963 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 3 , 1963 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to november 10 , 1963 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 3 , 1963 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; november 10 , 1963 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 3 , 1963 } ; attendance } }, interpretation: for the status records of all rows , most of them fuzzily match to loaned .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; status ; loaned }, interpretation: for the status records of all rows , most of them fuzzily match to loaned .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; status ; loaned }, interpretation: for the qual 1 records of all rows , most of them are less than 1:18:000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; qual 1 ; 1:18:000 }, interpretation: for the qual 1 records of all rows , most of them are less than 1:18:000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; qual 1 ; 1:18:000 }, interpretation: select the row whose catches record of all rows is 2nd maximum . the player record of this row is adam gilchrist .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; catches ; 2 } ; player } ; adam gilchrist }, interpretation: select the row whose catches record of all rows is 2nd maximum . the player record of this row is adam gilchrist .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; catches ; 2 } ; player } ; adam gilchrist }, interpretation: for the location records of all rows , most of them fuzzily match to california , united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; california , united states }, interpretation: for the location records of all rows , most of them fuzzily match to california , united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; california , united states }, interpretation: for the population ( 2008 ) records of all rows , most of them are greater than 100000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; population ( 2008 ) ; 100000 }, interpretation: for the population ( 2008 ) records of all rows , most of them are greater than 100000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; population ( 2008 ) ; 100000 }, interpretation: select the rows whose home team record fuzzily matches to geelong . take the home team score record of this row . select the rows whose home team record fuzzily matches to richmond . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; geelong } ; home team score } ; hop { filter_eq { all_rows ; home team ; richmond } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to geelong . take the home team score record of this row . select the rows whose home team record fuzzily matches to richmond . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; geelong } ; home team score } ; hop { filter_eq { all_rows ; home team ; richmond } ; home team score } }, interpretation: select the row whose party list votes record of all rows is maximum . the party record of this row is christian democratic union ( cdu ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; party list votes } ; party } ; christian democratic union ( cdu ) }, interpretation: select the row whose party list votes record of all rows is maximum . the party record of this row is christian democratic union ( cdu ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; party list votes } ; party } ; christian democratic union ( cdu ) }, interpretation: for the home captain records of all rows , all of them fuzzily match to alec stewart .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; home captain ; alec stewart }, interpretation: for the home captain records of all rows , all of them fuzzily match to alec stewart .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; home captain ; alec stewart }, interpretation: select the rows whose country of origin record fuzzily matches to united states . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country of origin ; united states } } ; 2 }, interpretation: select the rows whose country of origin record fuzzily matches to united states . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country of origin ; united states } } ; 2 }, interpretation: select the row whose 1st leg record of all rows is maximum . the team 1 record of this row is flamengo . the team 2 record of this row is am\u00e9rica .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; 1st leg } ; team 1 } ; flamengo } ; eq { hop { argmax { all_rows ; 1st leg } ; team 2 } ; am\u00e9rica } }, interpretation: select the row whose 1st leg record of all rows is maximum . the team 1 record of this row is flamengo . the team 2 record of this row is am\u00e9rica .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; 1st leg } ; team 1 } ; flamengo } ; eq { hop { argmax { all_rows ; 1st leg } ; team 2 } ; am\u00e9rica } }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is east carolina university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; east carolina university }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is east carolina university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; east carolina university }, interpretation: select the rows whose inns record fuzzily matches to 14 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; inns ; 14 } } ; 3 }, interpretation: select the rows whose inns record fuzzily matches to 14 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; inns ; 14 } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to kazakhstan . there is only one such row in the table . the athlete record of this unqiue row is inga dudchenko .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; kazakhstan } } ; eq { hop { filter_eq { all_rows ; country ; kazakhstan } ; athlete } ; inga dudchenko } }, interpretation: select the rows whose country record fuzzily matches to kazakhstan . there is only one such row in the table . the athlete record of this unqiue row is inga dudchenko .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; kazakhstan } } ; eq { hop { filter_eq { all_rows ; country ; kazakhstan } ; athlete } ; inga dudchenko } }, interpretation: select the rows whose seasons at this level record fuzzily matches to 27 seasons . for the settlements records of these rows , most of them fuzzily match to lisbon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; seasons at this level ; 27 seasons } ; settlements ; lisbon }, interpretation: select the rows whose seasons at this level record fuzzily matches to 27 seasons . for the settlements records of these rows , most of them fuzzily match to lisbon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; seasons at this level ; 27 seasons } ; settlements ; lisbon }, interpretation: select the rows whose dominant religion ( 2002 ) record fuzzily matches to orthodox christianity . among these rows , select the rows whose population ( 2011 ) record is less than 2100 . there is only one such row in the table . the settlement record of this unqiue row is stepanovi\u0107evo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity } ; population ( 2011 ) ; 2100 } } ; eq { hop { filter_less { filter_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity } ; population ( 2011 ) ; 2100 } ; settlement } ; stepanovi\u0107evo } }, interpretation: select the rows whose dominant religion ( 2002 ) record fuzzily matches to orthodox christianity . among these rows , select the rows whose population ( 2011 ) record is less than 2100 . there is only one such row in the table . the settlement record of this unqiue row is stepanovi\u0107evo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity } ; population ( 2011 ) ; 2100 } } ; eq { hop { filter_less { filter_eq { all_rows ; dominant religion ( 2002 ) ; orthodox christianity } ; population ( 2011 ) ; 2100 } ; settlement } ; stepanovi\u0107evo } }, interpretation: the average of the goals for record of all rows is 38.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals for } ; 38.5 }, interpretation: the average of the goals for record of all rows is 38.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals for } ; 38.5 }, interpretation: for the faxing records of all rows , most of them fuzzily match to no .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; faxing ; no }, interpretation: for the faxing records of all rows , most of them fuzzily match to no .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; faxing ; no }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose party record fuzzily matches to democratic . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; party ; democratic } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose party record fuzzily matches to democratic . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; party ; democratic } } ; 2 }, interpretation: select the row whose week record of all rows is 2nd minimum . the date record of this row is february 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; week ; 2 } ; date } ; february 3 }, interpretation: select the row whose week record of all rows is 2nd minimum . the date record of this row is february 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; week ; 2 } ; date } ; february 3 }, interpretation: select the rows whose album record fuzzily matches to come on over . take the weeks at number one record of this row . select the rows whose album record fuzzily matches to let 's talk about love . take the weeks at number one record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; album ; come on over } ; weeks at number one } ; hop { filter_eq { all_rows ; album ; let 's talk about love } ; weeks at number one } }, interpretation: select the rows whose album record fuzzily matches to come on over . take the weeks at number one record of this row . select the rows whose album record fuzzily matches to let 's talk about love . take the weeks at number one record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; album ; come on over } ; weeks at number one } ; hop { filter_eq { all_rows ; album ; let 's talk about love } ; weeks at number one } }, interpretation: the average of the lost record of all rows is 10.75 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 10.75 }, interpretation: the average of the lost record of all rows is 10.75 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 10.75 }, interpretation: for the date records of all rows , all of them fuzzily match to 10 july 1954 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 10 july 1954 }, interpretation: for the date records of all rows , all of them fuzzily match to 10 july 1954 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 10 july 1954 }, interpretation: the average of the radial velocity ( m / s ) record of all rows is 14-15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; radial velocity ( m / s ) } ; 14-15 }, interpretation: the average of the radial velocity ( m / s ) record of all rows is 14-15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; radial velocity ( m / s ) } ; 14-15 }, interpretation: the average of the earnings record of all rows is $ 426,356.60 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; $ 426,356.60 }, interpretation: the average of the earnings record of all rows is $ 426,356.60 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; $ 426,356.60 }, interpretation: for the to par records of all rows , most of them fuzzily match to + .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; to par ; + }, interpretation: for the to par records of all rows , most of them fuzzily match to + .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; to par ; + }, interpretation: select the row whose qual 1 record of all rows is 2nd minimum . the name record of this row is s\u00e9bastien bourdais .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; qual 1 ; 2 } ; name } ; s\u00e9bastien bourdais }, interpretation: select the row whose qual 1 record of all rows is 2nd minimum . the name record of this row is s\u00e9bastien bourdais .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; qual 1 ; 2 } ; name } ; s\u00e9bastien bourdais }, interpretation: select the rows whose weight record is equal to 95 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; weight ; 95 } } ; 2 }, interpretation: select the rows whose weight record is equal to 95 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; weight ; 95 } } ; 2 }, interpretation: select the rows whose outgoing manager record fuzzily matches to kevin bond . take the date of vacancy record of this row . select the rows whose outgoing manager record fuzzily matches to alan buckley . take the date of vacancy record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; outgoing manager ; kevin bond } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; alan buckley } ; date of vacancy } }, interpretation: select the rows whose outgoing manager record fuzzily matches to kevin bond . take the date of vacancy record of this row . select the rows whose outgoing manager record fuzzily matches to alan buckley . take the date of vacancy record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; outgoing manager ; kevin bond } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; alan buckley } ; date of vacancy } }, interpretation: the average of the population ( 2011 ) record of all rows is 2262 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population ( 2011 ) } ; 2262 }, interpretation: the average of the population ( 2011 ) record of all rows is 2262 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population ( 2011 ) } ; 2262 }, interpretation: select the row whose start record of all rows is minimum . the year record of this row is 1954 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; start } ; year } ; 1954 }, interpretation: select the row whose start record of all rows is minimum . the year record of this row is 1954 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; start } ; year } ; 1954 }, interpretation: select the rows whose album record fuzzily matches to lost souls . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; album ; lost souls } } ; 3 }, interpretation: select the rows whose album record fuzzily matches to lost souls . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; album ; lost souls } } ; 3 }, interpretation: select the row whose population ( in 2008 ) record of all rows is 2nd minimum . the suburb record of this row is phillip .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; population ( in 2008 ) ; 2 } ; suburb } ; phillip }, interpretation: select the row whose population ( in 2008 ) record of all rows is 2nd minimum . the suburb record of this row is phillip .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; population ( in 2008 ) ; 2 } ; suburb } ; phillip }, interpretation: the average of the cuts made record of all rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; cuts made } ; 3 }, interpretation: the average of the cuts made record of all rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; cuts made } ; 3 }, interpretation: the sum of the overall record of all rows is 503 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; overall } ; 503 }, interpretation: the sum of the overall record of all rows is 503 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; overall } ; 503 }, interpretation: select the rows whose venue record fuzzily matches to carver arena . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; carver arena } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to carver arena . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; carver arena } } ; 3 }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is caernarfon rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; caernarfon rfc }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is caernarfon rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; caernarfon rfc }, interpretation: for the wins records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wins ; 0 }, interpretation: for the wins records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wins ; 0 }, interpretation: select the rows whose coach record fuzzily matches to bj coleman . there is only one such row in the table . the episode summary record of this unqiue row is chris is made into a celebrity assistant .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; coach ; bj coleman } } ; eq { hop { filter_eq { all_rows ; coach ; bj coleman } ; episode summary } ; chris is made into a celebrity assistant } }, interpretation: select the rows whose coach record fuzzily matches to bj coleman . there is only one such row in the table . the episode summary record of this unqiue row is chris is made into a celebrity assistant .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; coach ; bj coleman } } ; eq { hop { filter_eq { all_rows ; coach ; bj coleman } ; episode summary } ; chris is made into a celebrity assistant } }, interpretation: select the row whose result record of all rows is maximum . the date record of this row is september 29 , 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; date } ; september 29 , 2003 }, interpretation: select the row whose result record of all rows is maximum . the date record of this row is september 29 , 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; date } ; september 29 , 2003 }, interpretation: select the rows whose year record is greater than or equal to 2010 . among these rows , select the rows whose genre record fuzzily matches to action rpg . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater_eq { all_rows ; year ; 2010 } ; genre ; action rpg } } ; 2 }, interpretation: select the rows whose year record is greater than or equal to 2010 . among these rows , select the rows whose genre record fuzzily matches to action rpg . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater_eq { all_rows ; year ; 2010 } ; genre ; action rpg } } ; 2 }, interpretation: for the result records of all rows , all of them fuzzily match to re - elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; re - elected }, interpretation: for the result records of all rows , all of them fuzzily match to re - elected .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; re - elected }, interpretation: select the row whose event record of all rows is maximum . the athlete record of this row is yousef soltani .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; event } ; athlete } ; yousef soltani }, interpretation: select the row whose event record of all rows is maximum . the athlete record of this row is yousef soltani .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; event } ; athlete } ; yousef soltani }, interpretation: select the rows whose first elected record is less than 1940 . among these rows , select the rows whose result record fuzzily matches to elected . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; first elected ; 1940 } ; result ; elected } } ; 2 }, interpretation: select the rows whose first elected record is less than 1940 . among these rows , select the rows whose result record fuzzily matches to elected . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; first elected ; 1940 } ; result ; elected } } ; 2 }, interpretation: select the row whose enrollment record of all rows is 2nd maximum . the institution record of this row is minot state university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ; 2 } ; institution } ; minot state university }, interpretation: select the row whose enrollment record of all rows is 2nd maximum . the institution record of this row is minot state university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ; 2 } ; institution } ; minot state university }, interpretation: select the rows whose opponent record fuzzily matches to philadelphia eagles . take the result record of this row . select the rows whose opponent record fuzzily matches to chicago bears . take the result record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; philadelphia eagles } ; result } ; hop { filter_eq { all_rows ; opponent ; chicago bears } ; result } }, interpretation: select the rows whose opponent record fuzzily matches to philadelphia eagles . take the result record of this row . select the rows whose opponent record fuzzily matches to chicago bears . take the result record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; philadelphia eagles } ; result } ; hop { filter_eq { all_rows ; opponent ; chicago bears } ; result } }, interpretation: select the row whose erp / power w record of all rows is 2nd maximum . the call sign record of this row is wrli - fm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; erp / power w ; 2 } ; call sign } ; wrli - fm }, interpretation: select the row whose erp / power w record of all rows is 2nd maximum . the call sign record of this row is wrli - fm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; erp / power w ; 2 } ; call sign } ; wrli - fm }, interpretation: the maximum % win record of all rows is 100.00 . the player record of the row with superlative % win record is jason molins .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; % win } ; 100.00 } ; eq { hop { argmax { all_rows ; % win } ; player } ; jason molins } }, interpretation: the maximum % win record of all rows is 100.00 . the player record of the row with superlative % win record is jason molins .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; % win } ; 100.00 } ; eq { hop { argmax { all_rows ; % win } ; player } ; jason molins } }, interpretation: for the season premiere records of all rows , most of them fuzzily match to september .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; season premiere ; september }, interpretation: for the season premiere records of all rows , most of them fuzzily match to september .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; season premiere ; september }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: select the row whose swansea win record of all rows is maximum . the competition record of this row is league .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; swansea win } ; competition } ; league }, interpretation: select the row whose swansea win record of all rows is maximum . the competition record of this row is league .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; swansea win } ; competition } ; league }, interpretation: select the rows whose recipients and nominees record fuzzily matches to gillian anderson . among these rows , select the rows whose result record fuzzily matches to nominated . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; recipients and nominees ; gillian anderson } ; result ; nominated } } ; 4 }, interpretation: select the rows whose recipients and nominees record fuzzily matches to gillian anderson . among these rows , select the rows whose result record fuzzily matches to nominated . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; recipients and nominees ; gillian anderson } ; result ; nominated } } ; 4 }, interpretation: for the date records of all rows , most of them fuzzily match to 30 august 1930 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 30 august 1930 }, interpretation: for the date records of all rows , most of them fuzzily match to 30 august 1930 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 30 august 1930 }, interpretation: select the rows whose director record fuzzily matches to david langer . take the original air date record of this row . select the rows whose director record fuzzily matches to matt gallagher . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; director ; david langer } ; original air date } ; hop { filter_eq { all_rows ; director ; matt gallagher } ; original air date } }, interpretation: select the rows whose director record fuzzily matches to david langer . take the original air date record of this row . select the rows whose director record fuzzily matches to matt gallagher . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; director ; david langer } ; original air date } ; hop { filter_eq { all_rows ; director ; matt gallagher } ; original air date } }, interpretation: select the rows whose college record fuzzily matches to florida state . there is only one such row in the table . the name record of this unqiue row is e g green .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; florida state } } ; eq { hop { filter_eq { all_rows ; college ; florida state } ; name } ; e g green } }, interpretation: select the rows whose college record fuzzily matches to florida state . there is only one such row in the table . the name record of this unqiue row is e g green .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; florida state } } ; eq { hop { filter_eq { all_rows ; college ; florida state } ; name } ; e g green } }, interpretation: the maximum score record of all rows is 118 - 104 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; 118 - 104 }, interpretation: the maximum score record of all rows is 118 - 104 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; 118 - 104 }, interpretation: select the rows whose election record is equal to 2013 . for the inhabitants records of these rows , all of them are greater than or equal to 100000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater_eq { filter_eq { all_rows ; election ; 2013 } ; inhabitants ; 100000 }, interpretation: select the rows whose election record is equal to 2013 . for the inhabitants records of these rows , all of them are greater than or equal to 100000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater_eq { filter_eq { all_rows ; election ; 2013 } ; inhabitants ; 100000 }, interpretation: for the current status records of all rows , most of them fuzzily match to fox affiliate .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current status ; fox affiliate }, interpretation: for the current status records of all rows , most of them fuzzily match to fox affiliate .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current status ; fox affiliate }, interpretation: for the party records of all rows , most of them fuzzily match to democratic - republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic - republican }, interpretation: for the party records of all rows , most of them fuzzily match to democratic - republican .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic - republican }, interpretation: select the row whose original air date record of all rows is maximum . the title record of this row is road to the north pole .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; original air date } ; title } ; road to the north pole }, interpretation: select the row whose original air date record of all rows is maximum . the title record of this row is road to the north pole .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; original air date } ; title } ; road to the north pole }, interpretation: select the rows whose opponent record fuzzily matches to jimmy connors . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; jimmy connors } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to jimmy connors . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; jimmy connors } } ; 3 }, interpretation: select the row whose cars per set record of all rows is 1st maximum . the class record of this row is class 254 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; cars per set ; 1 } ; class } ; class 254 }, interpretation: select the row whose cars per set record of all rows is 1st maximum . the class record of this row is class 254 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; cars per set ; 1 } ; class } ; class 254 }, interpretation: select the rows whose college record fuzzily matches to new mexico . there is only one such row in the table . the player record of this unqiue row is brian ramsay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; new mexico } } ; eq { hop { filter_eq { all_rows ; college ; new mexico } ; player } ; brian ramsay } }, interpretation: select the rows whose college record fuzzily matches to new mexico . there is only one such row in the table . the player record of this unqiue row is brian ramsay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; new mexico } } ; eq { hop { filter_eq { all_rows ; college ; new mexico } ; player } ; brian ramsay } }, interpretation: the average of the crowd record of all rows is 16470 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16470 }, interpretation: the average of the crowd record of all rows is 16470 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16470 }, interpretation: select the rows whose finish record fuzzily matches to avignon . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; finish ; avignon } } ; 3 }, interpretation: select the rows whose finish record fuzzily matches to avignon . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; finish ; avignon } } ; 3 }, interpretation: select the rows whose club team record fuzzily matches to plymouth whalers ( ohl ) . there is only one such row in the table . the player record of this unqiue row is stefan noesen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; club team ; plymouth whalers ( ohl ) } } ; eq { hop { filter_eq { all_rows ; club team ; plymouth whalers ( ohl ) } ; player } ; stefan noesen } }, interpretation: select the rows whose club team record fuzzily matches to plymouth whalers ( ohl ) . there is only one such row in the table . the player record of this unqiue row is stefan noesen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; club team ; plymouth whalers ( ohl ) } } ; eq { hop { filter_eq { all_rows ; club team ; plymouth whalers ( ohl ) } ; player } ; stefan noesen } }, interpretation: select the rows whose sportsperson record fuzzily matches to albert pujols . take the year record of this row . select the rows whose sportsperson record fuzzily matches to usain bolt . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; sportsperson ; albert pujols } ; year } ; hop { filter_eq { all_rows ; sportsperson ; usain bolt } ; year } }, interpretation: select the rows whose sportsperson record fuzzily matches to albert pujols . take the year record of this row . select the rows whose sportsperson record fuzzily matches to usain bolt . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; sportsperson ; albert pujols } ; year } ; hop { filter_eq { all_rows ; sportsperson ; usain bolt } ; year } }, interpretation: for the score records of all rows , most of them are greater than or equal to 70 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; score ; 70 }, interpretation: for the score records of all rows , most of them are greater than or equal to 70 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; score ; 70 }, interpretation: for the score records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; l }, interpretation: select the rows whose publisher record fuzzily matches to bethesda softworks . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; publisher ; bethesda softworks } } ; 2 }, interpretation: select the rows whose publisher record fuzzily matches to bethesda softworks . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; publisher ; bethesda softworks } } ; 2 }, interpretation: for the category records of all rows , most of them fuzzily match to best actress - musical or comedy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; category ; best actress - musical or comedy }, interpretation: for the category records of all rows , most of them fuzzily match to best actress - musical or comedy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; category ; best actress - musical or comedy }, interpretation: select the rows whose opponent record fuzzily matches to chris haseman . take the round record of this row . select the rows whose opponent record fuzzily matches to wanderlei silva . take the round record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; chris haseman } ; round } ; hop { filter_eq { all_rows ; opponent ; wanderlei silva } ; round } } ; 1 }, interpretation: select the rows whose opponent record fuzzily matches to chris haseman . take the round record of this row . select the rows whose opponent record fuzzily matches to wanderlei silva . take the round record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; chris haseman } ; round } ; hop { filter_eq { all_rows ; opponent ; wanderlei silva } ; round } } ; 1 }, interpretation: select the rows whose date record fuzzily matches to may . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; date ; may } }, interpretation: select the rows whose date record fuzzily matches to may . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; date ; may } }, interpretation: select the rows whose opponent record fuzzily matches to indianapolis colts . the sum of the attendance record of these rows is 100807 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; indianapolis colts } ; attendance } ; 100807 }, interpretation: select the rows whose opponent record fuzzily matches to indianapolis colts . the sum of the attendance record of these rows is 100807 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; indianapolis colts } ; attendance } ; 100807 }, interpretation: for the venue records of all rows , most of them fuzzily match to hampden park , glasgow .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; hampden park , glasgow }, interpretation: for the venue records of all rows , most of them fuzzily match to hampden park , glasgow .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; hampden park , glasgow }, interpretation: select the row whose episode record of all rows is 1st minimum . the original airdate ( uk ) record of this row is 26 march 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; episode ; 1 } ; original airdate ( uk ) } ; 26 march 2005 }, interpretation: select the row whose episode record of all rows is 1st minimum . the original airdate ( uk ) record of this row is 26 march 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; episode ; 1 } ; original airdate ( uk ) } ; 26 march 2005 }, interpretation: the average of the power rpm record of all rows is 5500 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; power rpm } ; 5500 }, interpretation: the average of the power rpm record of all rows is 5500 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; power rpm } ; 5500 }, interpretation: select the rows whose date record fuzzily matches to / 05 / . the 1st maximum against record of these rows is 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { filter_eq { all_rows ; date ; / 05 / } ; against ; 1 } ; 22 }, interpretation: select the rows whose date record fuzzily matches to / 05 / . the 1st maximum against record of these rows is 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { filter_eq { all_rows ; date ; / 05 / } ; against ; 1 } ; 22 }, interpretation: select the rows whose name record fuzzily matches to graham rahal . take the points record of this row . select the rows whose name record fuzzily matches to dan clarke . take the points record of this row . the first record is less than the second record . the points record of the first row is 25 . the points record of the second row is 27 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; name ; graham rahal } ; points } ; hop { filter_eq { all_rows ; name ; dan clarke } ; points } } ; and { eq { hop { filter_eq { all_rows ; name ; graham rahal } ; points } ; 25 } ; eq { hop { filter_eq { all_rows ; name ; dan clarke } ; points } ; 27 } } }, interpretation: select the rows whose name record fuzzily matches to graham rahal . take the points record of this row . select the rows whose name record fuzzily matches to dan clarke . take the points record of this row . the first record is less than the second record . the points record of the first row is 25 . the points record of the second row is 27 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; name ; graham rahal } ; points } ; hop { filter_eq { all_rows ; name ; dan clarke } ; points } } ; and { eq { hop { filter_eq { all_rows ; name ; graham rahal } ; points } ; 25 } ; eq { hop { filter_eq { all_rows ; name ; dan clarke } ; points } ; 27 } } }, interpretation: select the rows whose tournament record fuzzily matches to the open championship . there is only one such row in the table . the wins record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; the open championship } } ; eq { hop { filter_eq { all_rows ; tournament ; the open championship } ; wins } ; 1 } }, interpretation: select the rows whose record fuzzily matches to 2 . take the viewers record of this row . select the rows whose record fuzzily matches to 1 . take the viewers record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; ; 2 } ; viewers } ; hop { filter_eq { all_rows ; ; 1 } ; viewers } }, interpretation: select the rows whose record fuzzily matches to 2 . take the viewers record of this row . select the rows whose record fuzzily matches to 1 . take the viewers record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; ; 2 } ; viewers } ; hop { filter_eq { all_rows ; ; 1 } ; viewers } }, interpretation: select the row whose population ( 2011 ) record of all rows is 3rd maximum . the mother tongue record of this row is spanish .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 2011 ) ; 3 } ; mother tongue } ; spanish }, interpretation: select the row whose population ( 2011 ) record of all rows is 3rd maximum . the mother tongue record of this row is spanish .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 2011 ) ; 3 } ; mother tongue } ; spanish }, interpretation: select the rows whose runner - up record fuzzily matches to corina morariu . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; runner - up ; corina morariu } } ; 2 }, interpretation: select the rows whose runner - up record fuzzily matches to corina morariu . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; runner - up ; corina morariu } } ; 2 }, interpretation: select the row whose attendance record of all rows is 2nd minimum . the date record of this row is november 4 , 2002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; attendance ; 2 } ; date } ; november 4 , 2002 }, interpretation: select the row whose attendance record of all rows is 2nd minimum . the date record of this row is november 4 , 2002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; attendance ; 2 } ; date } ; november 4 , 2002 }, interpretation: the sum of the points record of all rows is 473 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 473 }, interpretation: the sum of the points record of all rows is 473 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 473 }, interpretation: the average of the pop 2006 record of all rows is 1759.42 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pop 2006 } ; 1759.42 }, interpretation: the average of the pop 2006 record of all rows is 1759.42 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pop 2006 } ; 1759.42 }, interpretation: the average of the scored record of all rows is 1.17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; scored } ; 1.17 }, interpretation: the average of the scored record of all rows is 1.17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; scored } ; 1.17 }, interpretation: select the rows whose visitor record fuzzily matches to carolina . among these rows , select the rows whose attendance record is greater than 19000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; visitor ; carolina } ; attendance ; 19000 } } ; 3 }, interpretation: select the rows whose visitor record fuzzily matches to carolina . among these rows , select the rows whose attendance record is greater than 19000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; visitor ; carolina } ; attendance ; 19000 } } ; 3 }, interpretation: select the rows whose english title record fuzzily matches to sergey lazo . take the length record of this row . select the rows whose english title record fuzzily matches to sour grape . take the length record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; sergey lazo } ; length } ; hop { filter_eq { all_rows ; english title ; sour grape } ; length } }, interpretation: select the rows whose english title record fuzzily matches to sergey lazo . take the length record of this row . select the rows whose english title record fuzzily matches to sour grape . take the length record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; sergey lazo } ; length } ; hop { filter_eq { all_rows ; english title ; sour grape } ; length } }, interpretation: select the rows whose three darts challenge record fuzzily matches to jermaine jackson . take the episode number record of this row . select the rows whose three darts challenge record fuzzily matches to meat loaf . take the episode number record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; three darts challenge ; jermaine jackson } ; episode number } ; hop { filter_eq { all_rows ; three darts challenge ; meat loaf } ; episode number } }, interpretation: select the rows whose three darts challenge record fuzzily matches to jermaine jackson . take the episode number record of this row . select the rows whose three darts challenge record fuzzily matches to meat loaf . take the episode number record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; three darts challenge ; jermaine jackson } ; episode number } ; hop { filter_eq { all_rows ; three darts challenge ; meat loaf } ; episode number } }, interpretation: select the rows whose founded record is greater than or equal to 1980 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; founded ; 1980 } } ; 3 }, interpretation: select the rows whose founded record is greater than or equal to 1980 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; founded ; 1980 } } ; 3 }, interpretation: select the rows whose college record fuzzily matches to auburn . there is only one such row in the table . the player record of this unqiue row is charles barkley .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; auburn } } ; eq { hop { filter_eq { all_rows ; college ; auburn } ; player } ; charles barkley } }, interpretation: select the rows whose college record fuzzily matches to auburn . there is only one such row in the table . the player record of this unqiue row is charles barkley .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; auburn } } ; eq { hop { filter_eq { all_rows ; college ; auburn } ; player } ; charles barkley } }, interpretation: select the rows whose written by record fuzzily matches to brad kern . there is only one such row in the table . the title record of this unqiue row is the honeymoon 's over .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; brad kern } } ; eq { hop { filter_eq { all_rows ; written by ; brad kern } ; title } ; the honeymoon 's over } }, interpretation: select the rows whose written by record fuzzily matches to brad kern . there is only one such row in the table . the title record of this unqiue row is the honeymoon 's over .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; brad kern } } ; eq { hop { filter_eq { all_rows ; written by ; brad kern } ; title } ; the honeymoon 's over } }, interpretation: select the rows whose reason for change record fuzzily matches to resign . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; reason for change ; resign } } ; 6 }, interpretation: select the rows whose reason for change record fuzzily matches to resign . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; reason for change ; resign } } ; 6 }, interpretation: select the rows whose position record fuzzily matches to power forward . there is only one such row in the table . the player record of this unqiue row is pete chilcutt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; power forward } } ; eq { hop { filter_eq { all_rows ; position ; power forward } ; player } ; pete chilcutt } }, interpretation: select the rows whose position record fuzzily matches to power forward . there is only one such row in the table . the player record of this unqiue row is pete chilcutt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; power forward } } ; eq { hop { filter_eq { all_rows ; position ; power forward } ; player } ; pete chilcutt } }, interpretation: select the rows whose airborne unit record fuzzily matches to pathfinders . among these rows , select the rows whose drop zone record fuzzily matches to c . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; airborne unit ; pathfinders } ; drop zone ; c } } ; 2 }, interpretation: select the rows whose airborne unit record fuzzily matches to pathfinders . among these rows , select the rows whose drop zone record fuzzily matches to c . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; airborne unit ; pathfinders } ; drop zone ; c } } ; 2 }, interpretation: select the rows whose first elected record is equal to 1974 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1974 } } ; 2 }, interpretation: select the rows whose first elected record is equal to 1974 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1974 } } ; 2 }, interpretation: select the row whose to par record of all rows is minimum . the player record of this row is bill rogers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; to par } ; player } ; bill rogers }, interpretation: select the row whose to par record of all rows is minimum . the player record of this row is bill rogers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; to par } ; player } ; bill rogers }, interpretation: select the rows whose original air date record fuzzily matches to march . among these rows , select the rows whose directed by record fuzzily matches to andy wolk . there is only one such row in the table . the episode title record of this unqiue row is all the world 's a stage .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; original air date ; march } ; directed by ; andy wolk } } ; eq { hop { filter_eq { filter_eq { all_rows ; original air date ; march } ; directed by ; andy wolk } ; episode title } ; all the world 's a stage } }, interpretation: select the rows whose original air date record fuzzily matches to march . among these rows , select the rows whose directed by record fuzzily matches to andy wolk . there is only one such row in the table . the episode title record of this unqiue row is all the world 's a stage .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; original air date ; march } ; directed by ; andy wolk } } ; eq { hop { filter_eq { filter_eq { all_rows ; original air date ; march } ; directed by ; andy wolk } ; episode title } ; all the world 's a stage } }, interpretation: select the rows whose 2011 1h record is greater than 20 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; 2011 1h ; 20 } } ; 2 }, interpretation: select the rows whose 2011 1h record is greater than 20 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; 2011 1h ; 20 } } ; 2 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 5 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 5 }, interpretation: for the date records of all rows , most of them fuzzily match to may .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; may }, interpretation: for the date records of all rows , most of them fuzzily match to may .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; may }, interpretation: select the rows whose competition record fuzzily matches to friendly match . there is only one such row in the table . the date record of this unqiue row is 23 march 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; friendly match } } ; eq { hop { filter_eq { all_rows ; competition ; friendly match } ; date } ; 23 march 1993 } }, interpretation: select the rows whose competition record fuzzily matches to friendly match . there is only one such row in the table . the date record of this unqiue row is 23 march 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; friendly match } } ; eq { hop { filter_eq { all_rows ; competition ; friendly match } ; date } ; 23 march 1993 } }, interpretation: select the rows whose date record fuzzily matches to september . the sum of the attendance record of these rows is 70000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; september } ; attendance } ; 70000 }, interpretation: select the rows whose date record fuzzily matches to september . the sum of the attendance record of these rows is 70000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; september } ; attendance } ; 70000 }, interpretation: select the rows whose tied record is equal to 1 . there is only one such row in the table . the player record of this unqiue row is kyle mccallan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tied ; 1 } } ; eq { hop { filter_eq { all_rows ; tied ; 1 } ; player } ; kyle mccallan } }, interpretation: select the rows whose tied record is equal to 1 . there is only one such row in the table . the player record of this unqiue row is kyle mccallan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tied ; 1 } } ; eq { hop { filter_eq { all_rows ; tied ; 1 } ; player } ; kyle mccallan } }, interpretation: the average of the to par record of all rows is -5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -5 }, interpretation: the average of the to par record of all rows is -5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; -5 }, interpretation: select the rows whose first runner up record fuzzily matches to paragon denver co . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first runner up ; paragon denver co } } ; 3 }, interpretation: select the rows whose first runner up record fuzzily matches to paragon denver co . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first runner up ; paragon denver co } } ; 3 }, interpretation: for the country records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; united states }, interpretation: for the residence records of all rows , most of them fuzzily match to winnipeg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; residence ; winnipeg }, interpretation: for the residence records of all rows , most of them fuzzily match to winnipeg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; residence ; winnipeg }, interpretation: select the rows whose college record fuzzily matches to ateneo . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college ; ateneo } } ; 2 }, interpretation: select the rows whose college record fuzzily matches to ateneo . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college ; ateneo } } ; 2 }, interpretation: select the row whose total record of all rows is 2nd maximum . the nation record of this row is argentina .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; nation } ; argentina }, interpretation: select the row whose total record of all rows is 2nd maximum . the nation record of this row is argentina .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; nation } ; argentina }, interpretation: select the row whose power ( kw ) record of all rows is 2nd maximum . the branding record of this row is kingdom radio .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; power ( kw ) ; 2 } ; branding } ; kingdom radio }, interpretation: select the row whose power ( kw ) record of all rows is 2nd maximum . the branding record of this row is kingdom radio .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; power ( kw ) ; 2 } ; branding } ; kingdom radio }, interpretation: select the rows whose label record fuzzily matches to b ' in music . select the row whose release date record of these rows is minimum . the english title record of this row is kissing the future of love .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; label ; b ' in music } ; release date } ; english title } ; kissing the future of love }, interpretation: select the rows whose label record fuzzily matches to b ' in music . select the row whose release date record of these rows is minimum . the english title record of this row is kissing the future of love .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; label ; b ' in music } ; release date } ; english title } ; kissing the future of love }, interpretation: select the rows whose date record fuzzily matches to june 11 . take the high assists record of this row . select the rows whose date record fuzzily matches to june 10 . take the high assists record of this row . the first record fuzzily matches to the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; date ; june 11 } ; high assists } ; hop { filter_eq { all_rows ; date ; june 10 } ; high assists } }, interpretation: select the rows whose date record fuzzily matches to june 11 . take the high assists record of this row . select the rows whose date record fuzzily matches to june 10 . take the high assists record of this row . the first record fuzzily matches to the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; date ; june 11 } ; high assists } ; hop { filter_eq { all_rows ; date ; june 10 } ; high assists } }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: select the rows whose kitmaker record fuzzily matches to adidas . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; kitmaker ; adidas } } ; 3 }, interpretation: select the rows whose kitmaker record fuzzily matches to adidas . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; kitmaker ; adidas } } ; 3 }, interpretation: select the row whose wkts record of all rows is maximum . the player record of this row is brett lee .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wkts } ; player } ; brett lee }, interpretation: select the row whose wkts record of all rows is maximum . the player record of this row is brett lee .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wkts } ; player } ; brett lee }, interpretation: select the rows whose cardinalatial order and title record fuzzily matches to bishop . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; cardinalatial order and title ; bishop } } ; 3 }, interpretation: select the rows whose cardinalatial order and title record fuzzily matches to bishop . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; cardinalatial order and title ; bishop } } ; 3 }, interpretation: select the rows whose victor record fuzzily matches to stalemate . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; victor ; stalemate } } ; 2 }, interpretation: select the rows whose victor record fuzzily matches to stalemate . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; victor ; stalemate } } ; 2 }, interpretation: the average of the crowd record of all rows is 24000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24000 }, interpretation: the average of the crowd record of all rows is 24000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24000 }, interpretation: for the gold records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; gold ; 1 }, interpretation: for the gold records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; gold ; 1 }, interpretation: the average of the attendance record of all rows is 54939 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 54939 }, interpretation: the average of the attendance record of all rows is 54939 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 54939 }, interpretation: for the % ( 2000 ) records of all rows , most of them are less than 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; % ( 2000 ) ; 6 }, interpretation: for the % ( 2000 ) records of all rows , most of them are less than 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; % ( 2000 ) ; 6 }, interpretation: the average of the points record of all rows is 84 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 84 }, interpretation: the average of the points record of all rows is 84 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 84 }, interpretation: select the row whose minutes played record of all rows is maximum . the year record of this row is 1999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; minutes played } ; year } ; 1999 }, interpretation: select the row whose minutes played record of all rows is maximum . the year record of this row is 1999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; minutes played } ; year } ; 1999 }, interpretation: for the erp kw records of all rows , most of them are equal to 60 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; erp kw ; 60 }, interpretation: for the erp kw records of all rows , most of them are equal to 60 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; erp kw ; 60 }, interpretation: select the rows whose rank - qualifying record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank - qualifying ; 1 } } ; 2 }, interpretation: select the rows whose rank - qualifying record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank - qualifying ; 1 } } ; 2 }, interpretation: for the location records of all rows , most of them fuzzily match to south dakota .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; south dakota }, interpretation: for the location records of all rows , most of them fuzzily match to south dakota .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; south dakota }, interpretation: for the party leader records of all rows , all of them fuzzily match to habib bourguiba .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party leader ; habib bourguiba }, interpretation: for the party leader records of all rows , all of them fuzzily match to habib bourguiba .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; party leader ; habib bourguiba }, interpretation: select the row whose born record of all rows is minimum . the archbishop record of this row is jean baptiste lamy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; born } ; archbishop } ; jean baptiste lamy }, interpretation: select the row whose born record of all rows is minimum . the archbishop record of this row is jean baptiste lamy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; born } ; archbishop } ; jean baptiste lamy }, interpretation: for the formats records of all rows , most of them fuzzily match to vinyl .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; formats ; vinyl }, interpretation: for the formats records of all rows , most of them fuzzily match to vinyl .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; formats ; vinyl }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is may 24 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; may 24 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is may 24 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; may 24 }, interpretation: select the rows whose year left record is greater than or equal to 1970 . among these rows , select the rows whose conference joined record fuzzily matches to hoosier heartland . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater_eq { all_rows ; year left ; 1970 } ; conference joined ; hoosier heartland } } ; 2 }, interpretation: select the rows whose year left record is greater than or equal to 1970 . among these rows , select the rows whose conference joined record fuzzily matches to hoosier heartland . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater_eq { all_rows ; year left ; 1970 } ; conference joined ; hoosier heartland } } ; 2 }, interpretation: select the row whose duration record of all rows is 2nd maximum . the song record of this row is s\u00f3lo cristo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; duration ; 2 } ; song } ; s\u00f3lo cristo }, interpretation: select the row whose duration record of all rows is 2nd maximum . the song record of this row is s\u00f3lo cristo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; duration ; 2 } ; song } ; s\u00f3lo cristo }, interpretation: select the rows whose location record fuzzily matches to london , uk . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; london , uk } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to london , uk . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; london , uk } } ; 3 }, interpretation: select the rows whose theatre record fuzzily matches to royale theatre . there is only one such row in the table . the role record of this unqiue row is geoffrey fitton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; theatre ; royale theatre } } ; eq { hop { filter_eq { all_rows ; theatre ; royale theatre } ; role } ; geoffrey fitton } }, interpretation: select the rows whose theatre record fuzzily matches to royale theatre . there is only one such row in the table . the role record of this unqiue row is geoffrey fitton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; theatre ; royale theatre } } ; eq { hop { filter_eq { all_rows ; theatre ; royale theatre } ; role } ; geoffrey fitton } }, interpretation: select the row whose result record of all rows is maximum . the date record of this row is 8 october 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; date } ; 8 october 2010 }, interpretation: select the row whose result record of all rows is maximum . the date record of this row is 8 october 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result } ; date } ; 8 october 2010 }, interpretation: select the rows whose building record fuzzily matches to titanium la portada . take the number of floors record of this row . select the rows whose building record fuzzily matches to torre mall center . take the number of floors record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; building ; titanium la portada } ; number of floors } ; hop { filter_eq { all_rows ; building ; torre mall center } ; number of floors } }, interpretation: select the rows whose building record fuzzily matches to titanium la portada . take the number of floors record of this row . select the rows whose building record fuzzily matches to torre mall center . take the number of floors record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; building ; titanium la portada } ; number of floors } ; hop { filter_eq { all_rows ; building ; torre mall center } ; number of floors } }, interpretation: select the rows whose kiplinger 's top 100 values record fuzzily matches to n / a . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; kiplinger 's top 100 values ; n / a } } ; 6 }, interpretation: select the rows whose kiplinger 's top 100 values record fuzzily matches to n / a . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; kiplinger 's top 100 values ; n / a } } ; 6 }, interpretation: for the planned release records of all rows , most of them fuzzily match to not yet .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; planned release ; not yet }, interpretation: for the planned release records of all rows , most of them fuzzily match to not yet .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; planned release ; not yet }, interpretation: for the most wkts records of all rows , most of them fuzzily match to george davidson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; most wkts ; george davidson }, interpretation: for the most wkts records of all rows , most of them fuzzily match to george davidson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; most wkts ; george davidson }, interpretation: select the rows whose week record fuzzily matches to 8 . take the attendance record of this row . select the rows whose week record fuzzily matches to 10 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; week ; 8 } ; attendance } ; hop { filter_eq { all_rows ; week ; 10 } ; attendance } }, interpretation: select the rows whose week record fuzzily matches to 8 . take the attendance record of this row . select the rows whose week record fuzzily matches to 10 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; week ; 8 } ; attendance } ; hop { filter_eq { all_rows ; week ; 10 } ; attendance } }, interpretation: for the bandwidth included records of all rows , all of them fuzzily match to unlimited mb .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; bandwidth included ; unlimited mb }, interpretation: for the bandwidth included records of all rows , all of them fuzzily match to unlimited mb .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; bandwidth included ; unlimited mb }, interpretation: select the rows whose signed record fuzzily matches to yes . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; signed ; yes } } ; 3 }, interpretation: select the rows whose signed record fuzzily matches to yes . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; signed ; yes } } ; 3 }, interpretation: select the rows whose team record fuzzily matches to wauters motorsports . take the rounds record of this row . select the rows whose team record fuzzily matches to turner scott motorsports . take the rounds record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; wauters motorsports } ; rounds } ; hop { filter_eq { all_rows ; team ; turner scott motorsports } ; rounds } }, interpretation: select the rows whose team record fuzzily matches to wauters motorsports . take the rounds record of this row . select the rows whose team record fuzzily matches to turner scott motorsports . take the rounds record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; wauters motorsports } ; rounds } ; hop { filter_eq { all_rows ; team ; turner scott motorsports } ; rounds } }, interpretation: for the result records of all rows , most of them fuzzily match to loss .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; loss }, interpretation: for the result records of all rows , most of them fuzzily match to loss .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; loss }, interpretation: the average of the enrollment record of all rows is 738 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 738 }, interpretation: the average of the enrollment record of all rows is 738 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 738 }, interpretation: select the rows whose score record fuzzily matches to 1-1 . there is only one such row in the table . the date record of this unqiue row is march 21 , 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 1-1 } } ; eq { hop { filter_eq { all_rows ; score ; 1-1 } ; date } ; march 21 , 2007 } }, interpretation: select the rows whose score record fuzzily matches to 1-1 . there is only one such row in the table . the date record of this unqiue row is march 21 , 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 1-1 } } ; eq { hop { filter_eq { all_rows ; score ; 1-1 } ; date } ; march 21 , 2007 } }, interpretation: select the rows whose date record fuzzily matches to february . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; february } } ; 4 }, interpretation: select the rows whose date record fuzzily matches to february . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; february } } ; 4 }, interpretation: select the rows whose location record fuzzily matches to caracas , venezuela . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; caracas , venezuela } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to caracas , venezuela . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; caracas , venezuela } } ; 2 }, interpretation: select the rows whose aspect record fuzzily matches to 4:3 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; aspect ; 4:3 } } ; 4 }, interpretation: select the rows whose aspect record fuzzily matches to 4:3 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; aspect ; 4:3 } } ; 4 }, interpretation: select the rows whose years as tallest record is less than 1902 . among these rows , select the rows whose height ft ( m ) record is less than 200 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_less { all_rows ; years as tallest ; 1902 } ; height ft ( m ) ; 200 } } ; 2 }, interpretation: select the rows whose years as tallest record is less than 1902 . among these rows , select the rows whose height ft ( m ) record is less than 200 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_less { all_rows ; years as tallest ; 1902 } ; height ft ( m ) ; 200 } } ; 2 }, interpretation: select the rows whose city of license record fuzzily matches to ellijay , georgia . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to morrow , georgia . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; city of license ; ellijay , georgia } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; morrow , georgia } ; frequency mhz } }, interpretation: select the rows whose city of license record fuzzily matches to ellijay , georgia . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to morrow , georgia . take the frequency mhz record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; city of license ; ellijay , georgia } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; morrow , georgia } ; frequency mhz } }, interpretation: select the row whose place record of all rows is minimum . the player record of this row is billy casper .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; place } ; player } ; billy casper }, interpretation: select the row whose place record of all rows is minimum . the player record of this row is billy casper .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; place } ; player } ; billy casper }, interpretation: select the rows whose description record fuzzily matches to heavy - lift helicopter . select the row whose max gross weight record of these rows is 1st maximum . the aircraft record of this row is mil mi - 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; description ; heavy - lift helicopter } ; max gross weight ; 1 } ; aircraft } ; mil mi - 26 }, interpretation: select the rows whose description record fuzzily matches to heavy - lift helicopter . select the row whose max gross weight record of these rows is 1st maximum . the aircraft record of this row is mil mi - 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; description ; heavy - lift helicopter } ; max gross weight ; 1 } ; aircraft } ; mil mi - 26 }, interpretation: select the rows whose equatorial bulge record is greater than 1000 . among these rows , select the rows whose polar diameter record is greater than 100,000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; equatorial bulge ; 1000 } ; polar diameter ; 100,000 } } ; 2 }, interpretation: select the rows whose equatorial bulge record is greater than 1000 . among these rows , select the rows whose polar diameter record is greater than 100,000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; equatorial bulge ; 1000 } ; polar diameter ; 100,000 } } ; 2 }, interpretation: select the row whose score record of all rows is maximum . the game record of this row is 27 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; game } ; 27 }, interpretation: select the row whose score record of all rows is maximum . the game record of this row is 27 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; game } ; 27 }, interpretation: select the rows whose opponent in the final record fuzzily matches to adriano panatta . there is only one such row in the table . the championship record of this unqiue row is bologna , italy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; adriano panatta } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; adriano panatta } ; championship } ; bologna , italy } }, interpretation: select the rows whose opponent in the final record fuzzily matches to adriano panatta . there is only one such row in the table . the championship record of this unqiue row is bologna , italy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opponent in the final ; adriano panatta } } ; eq { hop { filter_eq { all_rows ; opponent in the final ; adriano panatta } ; championship } ; bologna , italy } }, interpretation: select the row whose opened record of all rows is 2nd minimum . the name record of this row is the shock wave .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; opened ; 2 } ; name } ; the shock wave }, interpretation: select the row whose opened record of all rows is 2nd minimum . the name record of this row is the shock wave .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; opened ; 2 } ; name } ; the shock wave }, interpretation: select the rows whose host record fuzzily matches to allen bestwick . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; host ; allen bestwick } } ; 2 }, interpretation: select the rows whose host record fuzzily matches to allen bestwick . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; host ; allen bestwick } } ; 2 }, interpretation: the average of the time record of all rows is 1:00.26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 1:00.26 }, interpretation: the average of the time record of all rows is 1:00.26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 1:00.26 }, interpretation: select the rows whose county record fuzzily matches to oppland . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; oppland } } ; 2 }, interpretation: select the rows whose county record fuzzily matches to oppland . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; oppland } } ; 2 }, interpretation: select the rows whose matches record is equal to 16 . the maximum wins record of these rows is 11 . the year record of the row with superlative wins record is 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; matches ; 16 } ; wins } ; 11 } ; eq { hop { argmax { filter_eq { all_rows ; matches ; 16 } ; wins } ; year } ; 2011 } }, interpretation: select the rows whose matches record is equal to 16 . the maximum wins record of these rows is 11 . the year record of the row with superlative wins record is 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; matches ; 16 } ; wins } ; 11 } ; eq { hop { argmax { filter_eq { all_rows ; matches ; 16 } ; wins } ; year } ; 2011 } }, interpretation: select the rows whose team record is arbitrary . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; team } } ; 12 }, interpretation: select the rows whose team record is arbitrary . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; team } } ; 12 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 10 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 10 }, interpretation: select the rows whose nation record fuzzily matches to australia . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nation ; australia } } ; 4 }, interpretation: select the rows whose nation record fuzzily matches to australia . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nation ; australia } } ; 4 }, interpretation: for the manufacturer records of all rows , most of them fuzzily match to chevrolet .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manufacturer ; chevrolet }, interpretation: for the manufacturer records of all rows , most of them fuzzily match to chevrolet .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manufacturer ; chevrolet }, interpretation: the sum of the against record of all rows is 121 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 121 }, interpretation: the sum of the against record of all rows is 121 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 121 }, interpretation: the average of the viewers ( in millions ) record of all rows is 7.76 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers ( in millions ) } ; 7.76 }, interpretation: the average of the viewers ( in millions ) record of all rows is 7.76 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers ( in millions ) } ; 7.76 }, interpretation: the sum of the in service record of all rows is 35 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; in service } ; 35 }, interpretation: the sum of the in service record of all rows is 35 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; in service } ; 35 }, interpretation: select the rows whose away team score record is less than 10 . among these rows , select the rows whose crowd record is greater than or equal to 23000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_less { all_rows ; away team score ; 10 } ; crowd ; 23000 } } ; 3 }, interpretation: select the rows whose away team score record is less than 10 . among these rows , select the rows whose crowd record is greater than or equal to 23000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_less { all_rows ; away team score ; 10 } ; crowd ; 23000 } } ; 3 }, interpretation: select the rows whose event record is arbitrary . the number of such rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; event } } ; 14 }, interpretation: select the rows whose event record is arbitrary . the number of such rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; event } } ; 14 }, interpretation: select the row whose viewership record of all rows is maximum . the episode record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewership } ; episode } ; 1 }, interpretation: select the row whose viewership record of all rows is maximum . the episode record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewership } ; episode } ; 1 }, interpretation: the 2nd minimum year record of all rows is 1979 . the issued title record of the row with 2nd minimum year record is 1958 miles .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 2 } ; 1979 } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; issued title } ; 1958 miles } }, interpretation: the 2nd minimum year record of all rows is 1979 . the issued title record of the row with 2nd minimum year record is 1958 miles .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 2 } ; 1979 } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; issued title } ; 1958 miles } }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is river plate .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; river plate }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is river plate .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; river plate }, interpretation: select the row whose stage record of all rows is minimum . the year record of this row is 2013 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; stage } ; year } ; 2013 }, interpretation: select the row whose stage record of all rows is minimum . the year record of this row is 2013 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; stage } ; year } ; 2013 }, interpretation: select the row whose events record of all rows is maximum . the player record of this row is mark o'meara .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; events } ; player } ; mark o'meara }, interpretation: select the row whose events record of all rows is maximum . the player record of this row is mark o'meara .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; events } ; player } ; mark o'meara }, interpretation: select the row whose date of vacancy record of all rows is 1st minimum . the outgoing manager record of this row is thomas von heesen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date of vacancy ; 1 } ; outgoing manager } ; thomas von heesen }, interpretation: select the row whose date of vacancy record of all rows is 1st minimum . the outgoing manager record of this row is thomas von heesen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date of vacancy ; 1 } ; outgoing manager } ; thomas von heesen }, interpretation: select the rows whose week of record fuzzily matches to 2 october . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; week of ; 2 october } } ; 4 }, interpretation: select the rows whose week of record fuzzily matches to 2 october . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; week of ; 2 october } } ; 4 }, interpretation: select the row whose matches record of all rows is maximum . the player record of this row is adam gilchrist .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; player } ; adam gilchrist }, interpretation: select the row whose matches record of all rows is maximum . the player record of this row is adam gilchrist .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; matches } ; player } ; adam gilchrist }, interpretation: select the rows whose result record fuzzily matches to re-elected . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re-elected } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re-elected . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re-elected } } ; 2 }, interpretation: the average of the high points record of all rows is 25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; high points } ; 25 }, interpretation: the average of the high points record of all rows is 25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; high points } ; 25 }, interpretation: select the rows whose country record fuzzily matches to australia . there is only one such row in the table . the player record of this unqiue row is david graham .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; australia } } ; eq { hop { filter_eq { all_rows ; country ; australia } ; player } ; david graham } }, interpretation: select the rows whose country record fuzzily matches to australia . there is only one such row in the table . the player record of this unqiue row is david graham .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; australia } } ; eq { hop { filter_eq { all_rows ; country ; australia } ; player } ; david graham } }, interpretation: select the rows whose won record is greater than 10 . among these rows , select the rows whose lost record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; won ; 10 } ; lost ; 3 } } ; 2 }, interpretation: select the rows whose won record is greater than 10 . among these rows , select the rows whose lost record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; won ; 10 } ; lost ; 3 } } ; 2 }, interpretation: select the row whose sets lost record of all rows is 2nd maximum . the team record of this row is far eastern university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; sets lost ; 2 } ; team } ; far eastern university }, interpretation: select the row whose sets lost record of all rows is 2nd maximum . the team record of this row is far eastern university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; sets lost ; 2 } ; team } ; far eastern university }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose total record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; total ; 1 } } ; 2 }, interpretation: select the rows whose gold record is equal to 0 . among these rows , select the rows whose total record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; gold ; 0 } ; total ; 1 } } ; 2 }, interpretation: select the rows whose year record is equal to 2005 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 2005 } } ; 2 }, interpretation: select the rows whose year record is equal to 2005 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 2005 } } ; 2 }, interpretation: for the manner of departure records of all rows , most of them fuzzily match to sacked .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manner of departure ; sacked }, interpretation: for the manner of departure records of all rows , most of them fuzzily match to sacked .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manner of departure ; sacked }, interpretation: select the rows whose high rebounds record fuzzily matches to tim duncan . the average of the high rebounds record of these rows is 11.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; high rebounds ; tim duncan } ; high rebounds } ; 11.5 }, interpretation: select the rows whose high rebounds record fuzzily matches to tim duncan . the average of the high rebounds record of these rows is 11.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; high rebounds ; tim duncan } ; high rebounds } ; 11.5 }, interpretation: select the rows whose method record fuzzily matches to ko ( punch ) . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; method ; ko ( punch ) } }, interpretation: select the rows whose method record fuzzily matches to ko ( punch ) . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; method ; ko ( punch ) } }, interpretation: for the long records of all rows , most of them are less than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; long ; 10 }, interpretation: for the long records of all rows , most of them are less than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; long ; 10 }, interpretation: select the rows whose current club record fuzzily matches to lottomatica roma . there is only one such row in the table . the player record of this unqiue row is erazem lorbek .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; current club ; lottomatica roma } } ; eq { hop { filter_eq { all_rows ; current club ; lottomatica roma } ; player } ; erazem lorbek } }, interpretation: select the rows whose current club record fuzzily matches to lottomatica roma . there is only one such row in the table . the player record of this unqiue row is erazem lorbek .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; current club ; lottomatica roma } } ; eq { hop { filter_eq { all_rows ; current club ; lottomatica roma } ; player } ; erazem lorbek } }, interpretation: select the rows whose bronze record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; 0 } } ; 2 }, interpretation: select the rows whose bronze record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; 0 } } ; 2 }, interpretation: select the rows whose club record fuzzily matches to ca osasuna . take the wins record of this row . select the rows whose club record fuzzily matches to real oviedo . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; ca osasuna } ; wins } ; hop { filter_eq { all_rows ; club ; real oviedo } ; wins } }, interpretation: select the rows whose club record fuzzily matches to ca osasuna . take the wins record of this row . select the rows whose club record fuzzily matches to real oviedo . take the wins record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; ca osasuna } ; wins } ; hop { filter_eq { all_rows ; club ; real oviedo } ; wins } }, interpretation: select the row whose entries record of all rows is maximum . the driver record of this row is rubens barrichello .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; entries } ; driver } ; rubens barrichello }, interpretation: select the row whose entries record of all rows is maximum . the driver record of this row is rubens barrichello .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; entries } ; driver } ; rubens barrichello }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the row whose frequency record of all rows is 3rd maximum . the callsign record of this row is xeas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency ; 3 } ; callsign } ; xeas }, interpretation: select the row whose frequency record of all rows is 3rd maximum . the callsign record of this row is xeas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency ; 3 } ; callsign } ; xeas }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the competition record of this row is danish superliga 2005 - 06 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the competition record of this row is danish superliga 2005 - 06 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; competition } ; danish superliga 2005 - 06 }, interpretation: select the rows whose date record fuzzily matches to 12 june 1972 . among these rows , select the rows whose crowd record is greater than 20000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; 12 june 1972 } ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 12 june 1972 . among these rows , select the rows whose crowd record is greater than 20000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; 12 june 1972 } ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose founded record is greater than or equal to 2005 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; founded ; 2005 } } ; 6 }, interpretation: select the rows whose founded record is greater than or equal to 2005 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; founded ; 2005 } } ; 6 }, interpretation: select the rows whose language record fuzzily matches to english . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; language ; english } } ; 2 }, interpretation: select the rows whose language record fuzzily matches to english . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; language ; english } } ; 2 }, interpretation: the 1st minimum year record of all rows is 1942 . the opponent in the final record of the row with 1st minimum year record is don budge .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 1 } ; 1942 } ; eq { hop { nth_argmin { all_rows ; year ; 1 } ; opponent in the final } ; don budge } }, interpretation: the 1st minimum year record of all rows is 1942 . the opponent in the final record of the row with 1st minimum year record is don budge .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 1 } ; 1942 } ; eq { hop { nth_argmin { all_rows ; year ; 1 } ; opponent in the final } ; don budge } }, interpretation: select the rows whose unwto region record fuzzily matches to oceania . there is only one such row in the table . the country record of this unqiue row is australia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; unwto region ; oceania } } ; eq { hop { filter_eq { all_rows ; unwto region ; oceania } ; country } ; australia } }, interpretation: select the rows whose unwto region record fuzzily matches to oceania . there is only one such row in the table . the country record of this unqiue row is australia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; unwto region ; oceania } } ; eq { hop { filter_eq { all_rows ; unwto region ; oceania } ; country } ; australia } }, interpretation: select the rows whose location record is arbitrary . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; location } } ; 7 }, interpretation: select the rows whose location record is arbitrary . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; location } } ; 7 }, interpretation: for the uccfs records of all rows , most of them are equal to 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; uccfs ; 2006 }, interpretation: for the uccfs records of all rows , most of them are equal to 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; uccfs ; 2006 }, interpretation: select the rows whose total record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; total ; 3 } } ; 2 }, interpretation: select the rows whose total record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; total ; 3 } } ; 2 }, interpretation: select the rows whose attendance record is greater than 70000 . among these rows , select the rows whose tv time record fuzzily matches to fox . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; attendance ; 70000 } ; tv time ; fox } } ; 2 }, interpretation: select the rows whose attendance record is greater than 70000 . among these rows , select the rows whose tv time record fuzzily matches to fox . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; attendance ; 70000 } ; tv time ; fox } } ; 2 }, interpretation: select the row whose date record of all rows is 2nd maximum . the location attendance record of this row is verizon center 14485 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; location attendance } ; verizon center 14485 }, interpretation: select the row whose date record of all rows is 2nd maximum . the location attendance record of this row is verizon center 14485 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; location attendance } ; verizon center 14485 }, interpretation: select the rows whose date record fuzzily matches to september . among these rows , select the rows whose date record fuzzily matches to september . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; september } ; date ; september } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to september . among these rows , select the rows whose date record fuzzily matches to september . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; date ; september } ; date ; september } } ; 2 }, interpretation: select the rows whose incumbent record fuzzily matches to james o'connor . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to henry garland dupr\u00e9 . take the first elected record of this row . the first record is 10 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; james o'connor } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; henry garland dupr\u00e9 } ; first elected } } ; 10 }, interpretation: select the rows whose incumbent record fuzzily matches to james o'connor . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to henry garland dupr\u00e9 . take the first elected record of this row . the first record is 10 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; james o'connor } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; henry garland dupr\u00e9 } ; first elected } } ; 10 }, interpretation: select the rows whose written by record fuzzily matches to chuck tatham . there is only one such row in the table . the title record of this unqiue row is signed , sealed and intercepted .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; chuck tatham } } ; eq { hop { filter_eq { all_rows ; written by ; chuck tatham } ; title } ; signed , sealed and intercepted } }, interpretation: select the rows whose written by record fuzzily matches to chuck tatham . there is only one such row in the table . the title record of this unqiue row is signed , sealed and intercepted .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; chuck tatham } } ; eq { hop { filter_eq { all_rows ; written by ; chuck tatham } ; title } ; signed , sealed and intercepted } }, interpretation: select the rows whose year record fuzzily matches to 1956 . take the points record of this row . select the rows whose year record fuzzily matches to 1957 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1956 } ; points } ; hop { filter_eq { all_rows ; year ; 1957 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 1956 . take the points record of this row . select the rows whose year record fuzzily matches to 1957 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1956 } ; points } ; hop { filter_eq { all_rows ; year ; 1957 } ; points } }, interpretation: the sum of the points record of all rows is 19 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 19 }, interpretation: the sum of the points record of all rows is 19 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 19 }, interpretation: select the row whose enrollment record of all rows is maximum . the school record of this row is belleville east high school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; school } ; belleville east high school }, interpretation: select the row whose enrollment record of all rows is maximum . the school record of this row is belleville east high school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; school } ; belleville east high school }, interpretation: select the rows whose location attendance record fuzzily matches to td banknorth garden . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; td banknorth garden } } ; 3 }, interpretation: select the rows whose location attendance record fuzzily matches to td banknorth garden . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; td banknorth garden } } ; 3 }, interpretation: select the rows whose outgoing manager record fuzzily matches to mesut bakkal . take the date of vacancy record of this row . select the rows whose outgoing manager record fuzzily matches to samet aybaba . take the date of vacancy record of this row . the second record is 1 day larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; outgoing manager ; mesut bakkal } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; samet aybaba } ; date of vacancy } } ; -1 day }, interpretation: select the rows whose outgoing manager record fuzzily matches to mesut bakkal . take the date of vacancy record of this row . select the rows whose outgoing manager record fuzzily matches to samet aybaba . take the date of vacancy record of this row . the second record is 1 day larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; outgoing manager ; mesut bakkal } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; samet aybaba } ; date of vacancy } } ; -1 day }, interpretation: select the row whose runs record of all rows is maximum . the player record of this row is adam gilchrist .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; runs } ; player } ; adam gilchrist }, interpretation: select the row whose runs record of all rows is maximum . the player record of this row is adam gilchrist .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; runs } ; player } ; adam gilchrist }, interpretation: select the rows whose podiums record is greater than 9 . there is only one such row in the table . the season record of this unqiue row is 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; podiums ; 9 } } ; eq { hop { filter_greater { all_rows ; podiums ; 9 } ; season } ; 2008 } }, interpretation: select the rows whose podiums record is greater than 9 . there is only one such row in the table . the season record of this unqiue row is 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; podiums ; 9 } } ; eq { hop { filter_greater { all_rows ; podiums ; 9 } ; season } ; 2008 } }, interpretation: the average of the score record of all rows is 70.46 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 70.46 }, interpretation: the average of the score record of all rows is 70.46 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 70.46 }, interpretation: select the row whose 2011 1h record of all rows is maximum . the tv station ( operator ) record of this row is bbtv ch7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2011 1h } ; tv station ( operator ) } ; bbtv ch7 }, interpretation: select the row whose 2011 1h record of all rows is maximum . the tv station ( operator ) record of this row is bbtv ch7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2011 1h } ; tv station ( operator ) } ; bbtv ch7 }, interpretation: select the rows whose incumbent record fuzzily matches to george h tinkham . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james a gallivan . take the first elected record of this row . the first record is equal to the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; incumbent ; george h tinkham } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james a gallivan } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to george h tinkham . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to james a gallivan . take the first elected record of this row . the first record is equal to the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; incumbent ; george h tinkham } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; james a gallivan } ; first elected } }, interpretation: select the rows whose date record fuzzily matches to december . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; december } } ; 4 }, interpretation: select the rows whose date record fuzzily matches to december . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; december } } ; 4 }, interpretation: for the points records of all rows , most of them are greater than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 100 }, interpretation: for the points records of all rows , most of them are greater than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 100 }, interpretation: select the rows whose locale record fuzzily matches to prince edward island . there is only one such row in the table . the skip record of this unqiue row is rod macdonald .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; locale ; prince edward island } } ; eq { hop { filter_eq { all_rows ; locale ; prince edward island } ; skip } ; rod macdonald } }, interpretation: select the rows whose locale record fuzzily matches to prince edward island . there is only one such row in the table . the skip record of this unqiue row is rod macdonald .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; locale ; prince edward island } } ; eq { hop { filter_eq { all_rows ; locale ; prince edward island } ; skip } ; rod macdonald } }, interpretation: select the rows whose innings record is greater than 27 . there is only one such row in the table . the player record of this unqiue row is marcus trescothick .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; innings ; 27 } } ; eq { hop { filter_greater { all_rows ; innings ; 27 } ; player } ; marcus trescothick } }, interpretation: select the rows whose innings record is greater than 27 . there is only one such row in the table . the player record of this unqiue row is marcus trescothick .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; innings ; 27 } } ; eq { hop { filter_greater { all_rows ; innings ; 27 } ; player } ; marcus trescothick } }, interpretation: select the row whose time record of all rows is maximum . the opponent record of this row is bob schrijber .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time } ; opponent } ; bob schrijber }, interpretation: select the row whose time record of all rows is maximum . the opponent record of this row is bob schrijber .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time } ; opponent } ; bob schrijber }, interpretation: select the rows whose total fat record is less than 100 g . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; total fat ; 100 g } } ; 3 }, interpretation: select the rows whose total fat record is less than 100 g . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; total fat ; 100 g } } ; 3 }, interpretation: select the row whose frequency mhz record of all rows is 2nd maximum . the city of license record of this row is pound , virginia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency mhz ; 2 } ; city of license } ; pound , virginia }, interpretation: select the row whose frequency mhz record of all rows is 2nd maximum . the city of license record of this row is pound , virginia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; frequency mhz ; 2 } ; city of license } ; pound , virginia }, interpretation: select the row whose first elected record of all rows is 1st minimum . the district record of this row is texas 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; district } ; texas 1 }, interpretation: select the row whose first elected record of all rows is 1st minimum . the district record of this row is texas 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; district } ; texas 1 }, interpretation: select the row whose production num record of all rows is maximum . the title record of this row is bosko 's fox hunt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; production num } ; title } ; bosko 's fox hunt }, interpretation: select the row whose production num record of all rows is maximum . the title record of this row is bosko 's fox hunt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; production num } ; title } ; bosko 's fox hunt }, interpretation: select the rows whose incumbent record fuzzily matches to gene taylor . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to harold volkmer . take the first elected record of this row . the second record is 4 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; gene taylor } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; harold volkmer } ; first elected } } ; -4 years }, interpretation: select the rows whose incumbent record fuzzily matches to gene taylor . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to harold volkmer . take the first elected record of this row . the second record is 4 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; gene taylor } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; harold volkmer } ; first elected } } ; -4 years }, interpretation: for the previous conference records of all rows , most of them fuzzily match to independents .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; previous conference ; independents }, interpretation: for the previous conference records of all rows , most of them fuzzily match to independents .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; previous conference ; independents }, interpretation: select the row whose time record of all rows is 3rd minimum . the race record of this row is derrinstown stud derby trial .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; race } ; derrinstown stud derby trial }, interpretation: select the row whose time record of all rows is 3rd minimum . the race record of this row is derrinstown stud derby trial .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; race } ; derrinstown stud derby trial }, interpretation: select the rows whose local government area record fuzzily matches to anangu pitjantjatjara yankunytjatjara . take the pop 2006 record of this row . select the rows whose local government area record fuzzily matches to outback areas community development trust . take the pop 2006 record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; local government area ; anangu pitjantjatjara yankunytjatjara } ; pop 2006 } ; hop { filter_eq { all_rows ; local government area ; outback areas community development trust } ; pop 2006 } }, interpretation: select the rows whose local government area record fuzzily matches to anangu pitjantjatjara yankunytjatjara . take the pop 2006 record of this row . select the rows whose local government area record fuzzily matches to outback areas community development trust . take the pop 2006 record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; local government area ; anangu pitjantjatjara yankunytjatjara } ; pop 2006 } ; hop { filter_eq { all_rows ; local government area ; outback areas community development trust } ; pop 2006 } }, interpretation: select the row whose first elected record of all rows is minimum . the party record of this row is democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; party } ; democratic }, interpretation: select the row whose first elected record of all rows is minimum . the party record of this row is democratic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; party } ; democratic }, interpretation: the 4th maximum points record of all rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; points ; 4 } ; 6 }, interpretation: the 4th maximum points record of all rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; points ; 4 } ; 6 }, interpretation: select the rows whose player record fuzzily matches to jon koncak . take the years in orlando record of this row . select the rows whose player record fuzzily matches to tim kempton . take the years in orlando record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; jon koncak } ; years in orlando } ; hop { filter_eq { all_rows ; player ; tim kempton } ; years in orlando } }, interpretation: select the rows whose player record fuzzily matches to jon koncak . take the years in orlando record of this row . select the rows whose player record fuzzily matches to tim kempton . take the years in orlando record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; jon koncak } ; years in orlando } ; hop { filter_eq { all_rows ; player ; tim kempton } ; years in orlando } }, interpretation: select the row whose gold record of all rows is maximum . the rank record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; rank } ; 1 }, interpretation: select the row whose gold record of all rows is maximum . the rank record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; rank } ; 1 }, interpretation: the average of the laps record of all rows is 19 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 19 }, interpretation: the average of the laps record of all rows is 19 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 19 }, interpretation: select the rows whose trailing party record fuzzily matches to bahujan samaj party . select the row whose trailing party % votes record of these rows is 2nd maximum . the year record of this row is 1998 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; trailing party ; bahujan samaj party } ; trailing party % votes ; 2 } ; year } ; 1998 }, interpretation: select the rows whose trailing party record fuzzily matches to bahujan samaj party . select the row whose trailing party % votes record of these rows is 2nd maximum . the year record of this row is 1998 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; trailing party ; bahujan samaj party } ; trailing party % votes ; 2 } ; year } ; 1998 }, interpretation: select the rows whose wins record is greater than 0 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; wins ; 0 } } ; eq { hop { filter_greater { all_rows ; wins ; 0 } ; tournament } ; the open championship } }, interpretation: select the rows whose wins record is greater than 0 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; wins ; 0 } } ; eq { hop { filter_greater { all_rows ; wins ; 0 } ; tournament } ; the open championship } }, interpretation: select the rows whose reason for change record fuzzily matches to failure to elect . there is only one such row in the table . the state ( class ) record of this unqiue row is tennessee ( 2 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; failure to elect } } ; eq { hop { filter_eq { all_rows ; reason for change ; failure to elect } ; state ( class ) } ; tennessee ( 2 ) } }, interpretation: select the rows whose reason for change record fuzzily matches to failure to elect . there is only one such row in the table . the state ( class ) record of this unqiue row is tennessee ( 2 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; failure to elect } } ; eq { hop { filter_eq { all_rows ; reason for change ; failure to elect } ; state ( class ) } ; tennessee ( 2 ) } }, interpretation: select the rows whose venue record fuzzily matches to mcg . take the crowd record of this row . select the rows whose venue record fuzzily matches to vfl park . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; mcg } ; crowd } ; hop { filter_eq { all_rows ; venue ; vfl park } ; crowd } }, interpretation: select the rows whose venue record fuzzily matches to mcg . take the crowd record of this row . select the rows whose venue record fuzzily matches to vfl park . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; mcg } ; crowd } ; hop { filter_eq { all_rows ; venue ; vfl park } ; crowd } }, interpretation: select the rows whose result record fuzzily matches to retired jacksonian hold . there is only one such row in the table . the incumbent record of this unqiue row is john floyd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired jacksonian hold } } ; eq { hop { filter_eq { all_rows ; result ; retired jacksonian hold } ; incumbent } ; john floyd } }, interpretation: select the rows whose result record fuzzily matches to retired jacksonian hold . there is only one such row in the table . the incumbent record of this unqiue row is john floyd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired jacksonian hold } } ; eq { hop { filter_eq { all_rows ; result ; retired jacksonian hold } ; incumbent } ; john floyd } }, interpretation: select the row whose first aired record of all rows is minimum . the entrepreneur ( s ) record of this row is james seddon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first aired } ; entrepreneur ( s ) } ; james seddon }, interpretation: select the row whose first aired record of all rows is minimum . the entrepreneur ( s ) record of this row is james seddon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first aired } ; entrepreneur ( s ) } ; james seddon }, interpretation: select the rows whose singer ( s ) record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; singer ( s ) } } ; 5 }, interpretation: select the rows whose singer ( s ) record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; singer ( s ) } } ; 5 }, interpretation: select the rows whose match points record fuzzily matches to 4 - 0 . for the points margin records of these rows , most of them are greater than 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; match points ; 4 - 0 } ; points margin ; 30 }, interpretation: select the rows whose match points record fuzzily matches to 4 - 0 . for the points margin records of these rows , most of them are greater than 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; match points ; 4 - 0 } ; points margin ; 30 }, interpretation: the average of the pick record of all rows is 116.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 116.5 }, interpretation: the average of the pick record of all rows is 116.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 116.5 }, interpretation: select the rows whose days record is greater than 110 . there is only one such row in the table . the series record of this unqiue row is season 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; days ; 110 } } ; eq { hop { filter_greater { all_rows ; days ; 110 } ; series } ; season 3 } }, interpretation: select the rows whose days record is greater than 110 . there is only one such row in the table . the series record of this unqiue row is season 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; days ; 110 } } ; eq { hop { filter_greater { all_rows ; days ; 110 } ; series } ; season 3 } }, interpretation: select the row whose silver record of all rows is 1st maximum . the nation record of this row is france .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 1 } ; nation } ; france }, interpretation: select the row whose silver record of all rows is 1st maximum . the nation record of this row is france .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 1 } ; nation } ; france }, interpretation: for the pages records of all rows , most of them are less than or equal to 300 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less_eq { all_rows ; pages ; 300 }, interpretation: for the pages records of all rows , most of them are less than or equal to 300 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less_eq { all_rows ; pages ; 300 }, interpretation: select the rows whose month record fuzzily matches to april . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; month ; april } }, interpretation: select the rows whose month record fuzzily matches to april . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; month ; april } }, interpretation: select the rows whose country record fuzzily matches to united kingdom . take the date record of this row . select the rows whose country record fuzzily matches to united states . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; united kingdom } ; date } ; hop { filter_eq { all_rows ; country ; united states } ; date } }, interpretation: select the rows whose country record fuzzily matches to united kingdom . take the date record of this row . select the rows whose country record fuzzily matches to united states . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; united kingdom } ; date } ; hop { filter_eq { all_rows ; country ; united states } ; date } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 16 march 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 16 march 2008 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 16 march 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 16 march 2008 }, interpretation: select the row whose series record of all rows is 3rd minimum . the written by record of this row is adrienne carter .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; series ; 3 } ; written by } ; adrienne carter }, interpretation: select the row whose series record of all rows is 3rd minimum . the written by record of this row is adrienne carter .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; series ; 3 } ; written by } ; adrienne carter }, interpretation: select the row whose total record of all rows is 2nd maximum . the nation record of this row is netherlands .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; nation } ; netherlands }, interpretation: select the row whose total record of all rows is 2nd maximum . the nation record of this row is netherlands .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; nation } ; netherlands }, interpretation: select the rows whose the mole record is arbitrary . the number of such rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; the mole } } ; 14 }, interpretation: select the rows whose the mole record is arbitrary . the number of such rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; the mole } } ; 14 }, interpretation: select the rows whose date record is greater than 31 december 2010 . among these rows , select the rows whose competition record fuzzily matches to euro 2012 qualifying . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; date ; 31 december 2010 } ; competition ; euro 2012 qualifying } } ; 3 }, interpretation: select the rows whose date record is greater than 31 december 2010 . among these rows , select the rows whose competition record fuzzily matches to euro 2012 qualifying . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; date ; 31 december 2010 } ; competition ; euro 2012 qualifying } } ; 3 }, interpretation: select the rows whose points record is greater than 270 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 270 } } ; 2 }, interpretation: select the rows whose points record is greater than 270 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 270 } } ; 2 }, interpretation: select the rows whose overall record is equal to 1 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; overall ; 1 } } ; 5 }, interpretation: select the rows whose overall record is equal to 1 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; overall ; 1 } } ; 5 }, interpretation: select the rows whose leader at the summit record fuzzily matches to ( usa ) . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; leader at the summit ; ( usa ) } }, interpretation: select the rows whose leader at the summit record fuzzily matches to ( usa ) . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; leader at the summit ; ( usa ) } }, interpretation: select the row whose goals scored record of all rows is maximum . the team record of this row is san salvador fc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals scored } ; team } ; san salvador fc }, interpretation: select the row whose goals scored record of all rows is maximum . the team record of this row is san salvador fc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals scored } ; team } ; san salvador fc }, interpretation: select the row whose year record of all rows is 2nd minimum . the perpetrator record of this row is wagner , ernst august , 38 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; perpetrator } ; wagner , ernst august , 38 }, interpretation: select the row whose year record of all rows is 2nd minimum . the perpetrator record of this row is wagner , ernst august , 38 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; perpetrator } ; wagner , ernst august , 38 }, interpretation: select the rows whose constructor record fuzzily matches to maserati . select the row whose grid record of these rows is maximum . the driver record of this row is luigi piotti .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; constructor ; maserati } ; grid } ; driver } ; luigi piotti }, interpretation: select the rows whose constructor record fuzzily matches to maserati . select the row whose grid record of these rows is maximum . the driver record of this row is luigi piotti .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; constructor ; maserati } ; grid } ; driver } ; luigi piotti }, interpretation: select the rows whose start record does not match to dnq . the average of the start record of these rows is 19 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_not_eq { all_rows ; start ; dnq } ; start } ; 19 }, interpretation: select the rows whose start record does not match to dnq . the average of the start record of these rows is 19 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_not_eq { all_rows ; start ; dnq } ; start } ; 19 }, interpretation: select the rows whose crowd record is less than 10000 . there is only one such row in the table . the home team record of this unqiue row is st kilda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10000 } } ; eq { hop { filter_less { all_rows ; crowd ; 10000 } ; home team } ; st kilda } }, interpretation: select the rows whose crowd record is less than 10000 . there is only one such row in the table . the home team record of this unqiue row is st kilda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10000 } } ; eq { hop { filter_less { all_rows ; crowd ; 10000 } ; home team } ; st kilda } }, interpretation: for the notes records of all rows , all of them fuzzily match to high jump .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; notes ; high jump }, interpretation: for the notes records of all rows , all of them fuzzily match to high jump .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; notes ; high jump }, interpretation: select the rows whose winner record fuzzily matches to 6 - 1 , 6 - 1 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; winner ; 6 - 1 , 6 - 1 } }, interpretation: select the rows whose winner record fuzzily matches to 6 - 1 , 6 - 1 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; winner ; 6 - 1 , 6 - 1 } }, interpretation: select the rows whose make record fuzzily matches to toyota . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; make ; toyota } } ; 4 }, interpretation: select the rows whose make record fuzzily matches to toyota . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; make ; toyota } } ; 4 }, interpretation: select the row whose points record of all rows is 2nd maximum . the year record of this row is 1970 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; year } ; 1970 }, interpretation: select the row whose points record of all rows is 2nd maximum . the year record of this row is 1970 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; year } ; 1970 }, interpretation: select the row whose win % record of all rows is 1st maximum . the opposition record of this row is pune warriors india .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win % ; 1 } ; opposition } ; pune warriors india }, interpretation: select the row whose win % record of all rows is 1st maximum . the opposition record of this row is pune warriors india .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; win % ; 1 } ; opposition } ; pune warriors india }, interpretation: select the rows whose release date record fuzzily matches to 2004 . there is only one such row in the table . the version record of this unqiue row is 4.10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; release date ; 2004 } } ; eq { hop { filter_eq { all_rows ; release date ; 2004 } ; version } ; 4.10 } }, interpretation: select the rows whose release date record fuzzily matches to 2004 . there is only one such row in the table . the version record of this unqiue row is 4.10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; release date ; 2004 } } ; eq { hop { filter_eq { all_rows ; release date ; 2004 } ; version } ; 4.10 } }, interpretation: for the party records of all rows , most of them fuzzily match to republican .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; republican }, interpretation: the sum of the top - 25 record of all rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; top - 25 } ; 48 }, interpretation: the sum of the top - 25 record of all rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; top - 25 } ; 48 }, interpretation: select the rows whose label record fuzzily matches to reveal records . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; label ; reveal records } } ; 3 }, interpretation: select the rows whose label record fuzzily matches to reveal records . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; label ; reveal records } } ; 3 }, interpretation: the maximum attendance record of all rows is 81988 . the year record of the row with superlative attendance record is 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; attendance } ; 81988 } ; eq { hop { argmax { all_rows ; attendance } ; year } ; 2011 } }, interpretation: the maximum attendance record of all rows is 81988 . the year record of the row with superlative attendance record is 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; attendance } ; 81988 } ; eq { hop { argmax { all_rows ; attendance } ; year } ; 2011 } }, interpretation: select the rows whose population record is greater than 50000 . among these rows , select the rows whose altitude ( mslm ) record is less than 300 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; population ; 50000 } ; altitude ( mslm ) ; 300 } } ; 2 }, interpretation: select the rows whose population record is greater than 50000 . among these rows , select the rows whose altitude ( mslm ) record is less than 300 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; population ; 50000 } ; altitude ( mslm ) ; 300 } } ; 2 }, interpretation: for the engine records of all rows , all of them fuzzily match to ford v8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; engine ; ford v8 }, interpretation: for the engine records of all rows , all of them fuzzily match to ford v8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; engine ; ford v8 }, interpretation: select the rows whose speed record is greater than 100 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; speed ; 100 } } ; 2 }, interpretation: select the rows whose speed record is greater than 100 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; speed ; 100 } } ; 2 }, interpretation: for the county records of all rows , most of them fuzzily match to 12 clinton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; county ; 12 clinton }, interpretation: for the county records of all rows , most of them fuzzily match to 12 clinton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; county ; 12 clinton }, interpretation: the average of the 1 - year peak record of all rows is 2869 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 1 - year peak } ; 2869 }, interpretation: the average of the 1 - year peak record of all rows is 2869 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 1 - year peak } ; 2869 }, interpretation: select the rows whose release price ( usd ) record is equal to 999 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; release price ( usd ) ; 999 } } ; 2 }, interpretation: select the rows whose release price ( usd ) record is equal to 999 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; release price ( usd ) ; 999 } } ; 2 }, interpretation: select the rows whose artist record fuzzily matches to kerri burnett . there is only one such row in the table . the theme record of this unqiue row is trumpeter swan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; artist ; kerri burnett } } ; eq { hop { filter_eq { all_rows ; artist ; kerri burnett } ; theme } ; trumpeter swan } }, interpretation: select the rows whose artist record fuzzily matches to kerri burnett . there is only one such row in the table . the theme record of this unqiue row is trumpeter swan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; artist ; kerri burnett } } ; eq { hop { filter_eq { all_rows ; artist ; kerri burnett } ; theme } ; trumpeter swan } }, interpretation: select the rows whose score record fuzzily matches to 3 - 1 . there is only one such row in the table . the date record of this unqiue row is december 14 , 1994 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 3 - 1 } } ; eq { hop { filter_eq { all_rows ; score ; 3 - 1 } ; date } ; december 14 , 1994 } }, interpretation: select the rows whose score record fuzzily matches to 3 - 1 . there is only one such row in the table . the date record of this unqiue row is december 14 , 1994 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 3 - 1 } } ; eq { hop { filter_eq { all_rows ; score ; 3 - 1 } ; date } ; december 14 , 1994 } }, interpretation: select the row whose first air date record of all rows is 2nd minimum . the city record of this row is cairns .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first air date ; 2 } ; city } ; cairns }, interpretation: select the row whose first air date record of all rows is 2nd minimum . the city record of this row is cairns .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first air date ; 2 } ; city } ; cairns }, interpretation: select the row whose runs record of all rows is maximum . the player record of this row is adil rashid .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; runs } ; player } ; adil rashid }, interpretation: select the row whose runs record of all rows is maximum . the player record of this row is adil rashid .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; runs } ; player } ; adil rashid }, interpretation: select the rows whose region record fuzzily matches to central . among these rows , select the rows whose pop density record is greater than 1000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; region ; central } ; pop density ; 1000 } } ; 3 }, interpretation: select the rows whose region record fuzzily matches to central . among these rows , select the rows whose pop density record is greater than 1000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; region ; central } ; pop density ; 1000 } } ; 3 }, interpretation: select the rows whose year record is greater than or equal to 1960 . the maximum rank record of these rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_greater_eq { all_rows ; year ; 1960 } ; rank } ; 17 }, interpretation: select the rows whose year record is greater than or equal to 1960 . the maximum rank record of these rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_greater_eq { all_rows ; year ; 1960 } ; rank } ; 17 }, interpretation: select the rows whose visitor record fuzzily matches to pittsburgh . take the date record of this row . select the rows whose visitor record fuzzily matches to boston . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; pittsburgh } ; date } ; hop { filter_eq { all_rows ; visitor ; boston } ; date } }, interpretation: select the rows whose visitor record fuzzily matches to pittsburgh . take the date record of this row . select the rows whose visitor record fuzzily matches to boston . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; pittsburgh } ; date } ; hop { filter_eq { all_rows ; visitor ; boston } ; date } }, interpretation: the average of the score record of all rows is 2.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 2.2 }, interpretation: the average of the score record of all rows is 2.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 2.2 }, interpretation: the average of the prize money record of all rows is 4831665 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; prize money } ; 4831665 }, interpretation: the average of the prize money record of all rows is 4831665 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; prize money } ; 4831665 }, interpretation: select the rows whose score record fuzzily matches to w . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; w } } ; 6 }, interpretation: select the rows whose score record fuzzily matches to w . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; w } } ; 6 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is december 21 , 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; december 21 , 2007 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is december 21 , 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; december 21 , 2007 }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is jim kolbe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; jim kolbe }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is jim kolbe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; jim kolbe }, interpretation: select the rows whose general classification record fuzzily matches to igor ant\u00f3n . among these rows , select the rows whose winner record fuzzily matches to markus fothen . there is only one such row in the table . the stage record of this unqiue row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; general classification ; igor ant\u00f3n } ; winner ; markus fothen } } ; eq { hop { filter_eq { filter_eq { all_rows ; general classification ; igor ant\u00f3n } ; winner ; markus fothen } ; stage } ; 5 } }, interpretation: select the rows whose general classification record fuzzily matches to igor ant\u00f3n . among these rows , select the rows whose winner record fuzzily matches to markus fothen . there is only one such row in the table . the stage record of this unqiue row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; general classification ; igor ant\u00f3n } ; winner ; markus fothen } } ; eq { hop { filter_eq { filter_eq { all_rows ; general classification ; igor ant\u00f3n } ; winner ; markus fothen } ; stage } ; 5 } }, interpretation: select the rows whose team record fuzzily matches to salisbury united . take the founded record of this row . select the rows whose team record fuzzily matches to south adelaide . take the founded record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; team ; salisbury united } ; founded } ; hop { filter_eq { all_rows ; team ; south adelaide } ; founded } }, interpretation: select the rows whose team record fuzzily matches to salisbury united . take the founded record of this row . select the rows whose team record fuzzily matches to south adelaide . take the founded record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; team ; salisbury united } ; founded } ; hop { filter_eq { all_rows ; team ; south adelaide } ; founded } }, interpretation: for the clock speed ( mhz ) records of all rows , most of them are equal to 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; clock speed ( mhz ) ; 8 }, interpretation: for the clock speed ( mhz ) records of all rows , most of them are equal to 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; clock speed ( mhz ) ; 8 }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: select the row whose attendance record of all rows is minimum . the opponent record of this row is st louis cardinals .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; attendance } ; opponent } ; st louis cardinals }, interpretation: select the row whose attendance record of all rows is minimum . the opponent record of this row is st louis cardinals .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; attendance } ; opponent } ; st louis cardinals }, interpretation: select the row whose took office record of all rows is maximum . the delegate record of this row is nina r harper .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; took office } ; delegate } ; nina r harper }, interpretation: select the row whose took office record of all rows is maximum . the delegate record of this row is nina r harper .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; took office } ; delegate } ; nina r harper }, interpretation: for the laps records of all rows , all of them are equal to 197 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; laps ; 197 }, interpretation: for the laps records of all rows , all of them are equal to 197 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; laps ; 197 }, interpretation: select the row whose points record of all rows is maximum . the series record of this row is toyota racing series .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; series } ; toyota racing series }, interpretation: select the row whose points record of all rows is maximum . the series record of this row is toyota racing series .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; series } ; toyota racing series }, interpretation: select the rows whose label record fuzzily matches to deluxe records . there is only one such row in the table . the format record of this unqiue row is lp . the country record of this unqiue row is aus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; label ; deluxe records } } ; and { eq { hop { filter_eq { all_rows ; label ; deluxe records } ; format } ; lp } ; eq { hop { filter_eq { all_rows ; label ; deluxe records } ; country } ; aus } } }, interpretation: select the rows whose label record fuzzily matches to deluxe records . there is only one such row in the table . the format record of this unqiue row is lp . the country record of this unqiue row is aus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; label ; deluxe records } } ; and { eq { hop { filter_eq { all_rows ; label ; deluxe records } ; format } ; lp } ; eq { hop { filter_eq { all_rows ; label ; deluxe records } ; country } ; aus } } }, interpretation: select the row whose year born record of all rows is 1st minimum . the player record of this row is sacha giffa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year born ; 1 } ; player } ; sacha giffa }, interpretation: select the row whose year born record of all rows is 1st minimum . the player record of this row is sacha giffa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year born ; 1 } ; player } ; sacha giffa }, interpretation: the average of the tourism receipts ( 2003 ) ( as % of gdp ) record of all rows is 11.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; tourism receipts ( 2003 ) ( as % of gdp ) } ; 11.3 }, interpretation: the average of the tourism receipts ( 2003 ) ( as % of gdp ) record of all rows is 11.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; tourism receipts ( 2003 ) ( as % of gdp ) } ; 11.3 }, interpretation: select the row whose opened ( closing date if defunct ) record of all rows is 2nd minimum . the track record of this row is indianapolis speedrome .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; opened ( closing date if defunct ) ; 2 } ; track } ; indianapolis speedrome }, interpretation: select the row whose opened ( closing date if defunct ) record of all rows is 2nd minimum . the track record of this row is indianapolis speedrome .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; opened ( closing date if defunct ) ; 2 } ; track } ; indianapolis speedrome }, interpretation: select the rows whose opponent record fuzzily matches to usc . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; usc } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to usc . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; usc } } ; 3 }, interpretation: select the rows whose time record is less than 22.2 . there is only one such row in the table . the athlete record of this unqiue row is veronica campbell - brown .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; time ; 22.2 } } ; eq { hop { filter_less { all_rows ; time ; 22.2 } ; athlete } ; veronica campbell - brown } }, interpretation: select the rows whose time record is less than 22.2 . there is only one such row in the table . the athlete record of this unqiue row is veronica campbell - brown .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; time ; 22.2 } } ; eq { hop { filter_less { all_rows ; time ; 22.2 } ; athlete } ; veronica campbell - brown } }, interpretation: for the new entries this round records of all rows , most of them fuzzily match to none .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; new entries this round ; none }, interpretation: for the new entries this round records of all rows , most of them fuzzily match to none .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; new entries this round ; none }, interpretation: the average of the crowd record of all rows is 20826 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 20826 }, interpretation: the average of the crowd record of all rows is 20826 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 20826 }, interpretation: select the rows whose tv time record fuzzily matches to fox . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv time ; fox } } ; 2 }, interpretation: select the rows whose tv time record fuzzily matches to fox . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tv time ; fox } } ; 2 }, interpretation: select the rows whose round of 16 record does not match to did not advance . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; round of 16 ; did not advance } } ; 4 }, interpretation: select the rows whose round of 16 record does not match to did not advance . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; round of 16 ; did not advance } } ; 4 }, interpretation: for the league / division records of all rows , most of them fuzzily match to first division .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; league / division ; first division }, interpretation: for the league / division records of all rows , most of them fuzzily match to first division .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; league / division ; first division }, interpretation: select the row whose overall record of all rows is maximum . the name record of this row is sean renfree .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overall } ; name } ; sean renfree }, interpretation: select the row whose overall record of all rows is maximum . the name record of this row is sean renfree .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overall } ; name } ; sean renfree }, interpretation: for the hk viewers records of all rows , most of them are greater than 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; hk viewers ; 2 }, interpretation: for the hk viewers records of all rows , most of them are greater than 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; hk viewers ; 2 }, interpretation: select the rows whose estd record is less than 1900 . there is only one such row in the table . the college name record of this unqiue row is madras medical college and research institute .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; estd ; 1900 } } ; eq { hop { filter_less { all_rows ; estd ; 1900 } ; college name } ; madras medical college and research institute } }, interpretation: select the rows whose estd record is less than 1900 . there is only one such row in the table . the college name record of this unqiue row is madras medical college and research institute .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; estd ; 1900 } } ; eq { hop { filter_less { all_rows ; estd ; 1900 } ; college name } ; madras medical college and research institute } }, interpretation: select the rows whose nationality record fuzzily matches to united states . among these rows , select the rows whose result record is greater than 12.6 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; nationality ; united states } ; result ; 12.6 } } ; 2 }, interpretation: select the rows whose nationality record fuzzily matches to united states . among these rows , select the rows whose result record is greater than 12.6 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; nationality ; united states } ; result ; 12.6 } } ; 2 }, interpretation: the average of the laps record of all rows is 102.9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 102.9 }, interpretation: the average of the laps record of all rows is 102.9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 102.9 }, interpretation: select the rows whose nation record fuzzily matches to kenya . select the row whose time record of these rows is 1st minimum . the athlete record of this row is isabella ochichi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; nation ; kenya } ; time ; 1 } ; athlete } ; isabella ochichi }, interpretation: select the rows whose nation record fuzzily matches to kenya . select the row whose time record of these rows is 1st minimum . the athlete record of this row is isabella ochichi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; nation ; kenya } ; time ; 1 } ; athlete } ; isabella ochichi }, interpretation: select the rows whose crime record fuzzily matches to murder . select the row whose crime record of these rows is maximum . the character record of this row is henry darius .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; crime ; murder } ; crime } ; character } ; henry darius }, interpretation: select the rows whose crime record fuzzily matches to murder . select the row whose crime record of these rows is maximum . the character record of this row is henry darius .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; crime ; murder } ; crime } ; character } ; henry darius }, interpretation: for the score records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; w }, interpretation: for the score records of all rows , most of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; w }, interpretation: select the rows whose hometown record fuzzily matches to panama city . the average of the age record of these rows is 22.7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; hometown ; panama city } ; age } ; 22.7 }, interpretation: select the rows whose hometown record fuzzily matches to panama city . the average of the age record of these rows is 22.7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; hometown ; panama city } ; age } ; 22.7 }, interpretation: select the row whose gnis id record of all rows is 2nd maximum . the name record of this row is clear lake ( coos county , oregon ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; gnis id ; 2 } ; name } ; clear lake ( coos county , oregon ) }, interpretation: select the row whose gnis id record of all rows is 2nd maximum . the name record of this row is clear lake ( coos county , oregon ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; gnis id ; 2 } ; name } ; clear lake ( coos county , oregon ) }, interpretation: select the rows whose us hot 100 record is not equal to - . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; us hot 100 ; - } } ; 2 }, interpretation: select the rows whose us hot 100 record is not equal to - . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; us hot 100 ; - } } ; 2 }, interpretation: select the rows whose race record is equal to 28 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; race ; 28 } } ; 2 }, interpretation: select the rows whose race record is equal to 28 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; race ; 28 } } ; 2 }, interpretation: select the rows whose points record is equal to 10 . there is only one such row in the table . the entrant record of this unqiue row is braun tyrrell honda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 10 } } ; eq { hop { filter_eq { all_rows ; points ; 10 } ; entrant } ; braun tyrrell honda } }, interpretation: select the rows whose points record is equal to 10 . there is only one such row in the table . the entrant record of this unqiue row is braun tyrrell honda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 10 } } ; eq { hop { filter_eq { all_rows ; points ; 10 } ; entrant } ; braun tyrrell honda } }, interpretation: select the rows whose partnering record fuzzily matches to simon stadler . take the date record of this row . select the rows whose partnering record fuzzily matches to paolo lorenzi . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; partnering ; simon stadler } ; date } ; hop { filter_eq { all_rows ; partnering ; paolo lorenzi } ; date } }, interpretation: select the rows whose partnering record fuzzily matches to simon stadler . take the date record of this row . select the rows whose partnering record fuzzily matches to paolo lorenzi . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; partnering ; simon stadler } ; date } ; hop { filter_eq { all_rows ; partnering ; paolo lorenzi } ; date } }, interpretation: select the rows whose tie no record fuzzily matches to replay . for the attendance records of these rows , most of them fuzzily match to 24 february 1999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; tie no ; replay } ; attendance ; 24 february 1999 }, interpretation: select the rows whose tie no record fuzzily matches to replay . for the attendance records of these rows , most of them fuzzily match to 24 february 1999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; tie no ; replay } ; attendance ; 24 february 1999 }, interpretation: the average of the losses record of all rows is 10.94 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; losses } ; 10.94 }, interpretation: the average of the losses record of all rows is 10.94 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; losses } ; 10.94 }, interpretation: the 2nd minimum discovered record of all rows is 1988 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; discovered ; 2 } ; 1988 }, interpretation: the 2nd minimum discovered record of all rows is 1988 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; discovered ; 2 } ; 1988 }, interpretation: select the rows whose name record fuzzily matches to centennial collegiate vocational institute . take the enrollment record of this row . select the rows whose name record fuzzily matches to john f ross collegiate vocational institute . take the enrollment record of this row . the second record is 362 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; centennial collegiate vocational institute } ; enrollment } ; hop { filter_eq { all_rows ; name ; john f ross collegiate vocational institute } ; enrollment } } ; -362 }, interpretation: select the rows whose name record fuzzily matches to centennial collegiate vocational institute . take the enrollment record of this row . select the rows whose name record fuzzily matches to john f ross collegiate vocational institute . take the enrollment record of this row . the second record is 362 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; centennial collegiate vocational institute } ; enrollment } ; hop { filter_eq { all_rows ; name ; john f ross collegiate vocational institute } ; enrollment } } ; -362 }, interpretation: for the enrollment records of all rows , most of them are greater than 1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; enrollment ; 1000 }, interpretation: for the enrollment records of all rows , most of them are greater than 1000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; enrollment ; 1000 }, interpretation: select the rows whose date record fuzzily matches to december 30 . take the attendance record of this row . select the rows whose date record fuzzily matches to december 26 . take the attendance record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; date ; december 30 } ; attendance } ; hop { filter_eq { all_rows ; date ; december 26 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to december 30 . take the attendance record of this row . select the rows whose date record fuzzily matches to december 26 . take the attendance record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; date ; december 30 } ; attendance } ; hop { filter_eq { all_rows ; date ; december 26 } ; attendance } }, interpretation: for the issue price records of all rows , most of them are less than 100.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; issue price ; 100.0 }, interpretation: for the issue price records of all rows , most of them are less than 100.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; issue price ; 100.0 }, interpretation: select the rows whose institution record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; institution } } ; 9 }, interpretation: select the rows whose institution record is arbitrary . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; institution } } ; 9 }, interpretation: select the rows whose points record is equal to 0 . there is only one such row in the table . the artist record of this unqiue row is photogenique .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 0 } } ; eq { hop { filter_eq { all_rows ; points ; 0 } ; artist } ; photogenique } }, interpretation: select the rows whose points record is equal to 0 . there is only one such row in the table . the artist record of this unqiue row is photogenique .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 0 } } ; eq { hop { filter_eq { all_rows ; points ; 0 } ; artist } ; photogenique } }, interpretation: select the rows whose series record fuzzily matches to gp2 series . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; series ; gp2 series } } ; 2 }, interpretation: select the rows whose series record fuzzily matches to gp2 series . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; series ; gp2 series } } ; 2 }, interpretation: the maximum points record of all rows is 11 . the entrant record of the row with superlative points record is team lotus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; points } ; 11 } ; eq { hop { argmax { all_rows ; points } ; entrant } ; team lotus } }, interpretation: the maximum points record of all rows is 11 . the entrant record of the row with superlative points record is team lotus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; points } ; 11 } ; eq { hop { argmax { all_rows ; points } ; entrant } ; team lotus } }, interpretation: for the established records of all rows , most of them are greater than or equal to 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; established ; 2000 }, interpretation: for the established records of all rows , most of them are greater than or equal to 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; established ; 2000 }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is james p richards .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; james p richards }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is james p richards .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; james p richards }, interpretation: select the rows whose result record fuzzily matches to re - elected . for the party records of these rows , all of them fuzzily match to democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; result ; re - elected } ; party ; democratic }, interpretation: select the rows whose result record fuzzily matches to re - elected . for the party records of these rows , all of them fuzzily match to democratic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; result ; re - elected } ; party ; democratic }, interpretation: the average of the crowd record of all rows is 21,268 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21,268 }, interpretation: the average of the crowd record of all rows is 21,268 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21,268 }, interpretation: select the row whose silver record of all rows is 2nd maximum . the nation record of this row is cyprus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; cyprus }, interpretation: select the row whose silver record of all rows is 2nd maximum . the nation record of this row is cyprus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; cyprus }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: select the rows whose trailing party record fuzzily matches to indian national congress . among these rows , select the rows whose party won record fuzzily matches to praja socialist party . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; trailing party ; indian national congress } ; party won ; praja socialist party } } ; 3 }, interpretation: select the rows whose trailing party record fuzzily matches to indian national congress . among these rows , select the rows whose party won record fuzzily matches to praja socialist party . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; trailing party ; indian national congress } ; party won ; praja socialist party } } ; 3 }, interpretation: select the rows whose crowd record is greater than 20000 . among these rows , select the rows whose away team score record is equal to 13.11 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; away team score ; 13.11 } } ; 2 }, interpretation: select the rows whose crowd record is greater than 20000 . among these rows , select the rows whose away team score record is equal to 13.11 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_greater { all_rows ; crowd ; 20000 } ; away team score ; 13.11 } } ; 2 }, interpretation: the sum of the laps record of all rows is 522 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 522 }, interpretation: the sum of the laps record of all rows is 522 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 522 }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is john conyers jr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; john conyers jr }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is john conyers jr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; john conyers jr }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; germany }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; germany }, interpretation: select the rows whose years record fuzzily matches to 196 . among these rows , select the rows whose total record is greater than 600 . there is only one such row in the table . the name record of this unqiue row is joe corrigan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; years ; 196 } ; total ; 600 } } ; eq { hop { filter_greater { filter_eq { all_rows ; years ; 196 } ; total ; 600 } ; name } ; joe corrigan } }, interpretation: select the rows whose years record fuzzily matches to 196 . among these rows , select the rows whose total record is greater than 600 . there is only one such row in the table . the name record of this unqiue row is joe corrigan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; years ; 196 } ; total ; 600 } } ; eq { hop { filter_greater { filter_eq { all_rows ; years ; 196 } ; total ; 600 } ; name } ; joe corrigan } }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose party record fuzzily matches to republican . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; party ; republican } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose party record fuzzily matches to republican . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; party ; republican } } ; 2 }, interpretation: select the row whose viewers record of all rows is maximum . the episode record of this row is episode 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers } ; episode } ; episode 1 }, interpretation: select the row whose viewers record of all rows is maximum . the episode record of this row is episode 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewers } ; episode } ; episode 1 }, interpretation: for the prone records of all rows , most of them are less than 200 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; prone ; 200 }, interpretation: for the prone records of all rows , most of them are less than 200 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; prone ; 200 }, interpretation: select the rows whose title record fuzzily matches to face / off . take the year record of this row . select the rows whose title record fuzzily matches to antz . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; face / off } ; year } ; hop { filter_eq { all_rows ; title ; antz } ; year } }, interpretation: select the rows whose title record fuzzily matches to face / off . take the year record of this row . select the rows whose title record fuzzily matches to antz . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; face / off } ; year } ; hop { filter_eq { all_rows ; title ; antz } ; year } }, interpretation: select the rows whose nationality record fuzzily matches to slovakia . there is only one such row in the table . the distance record of this unqiue row is 500 m .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; slovakia } } ; eq { hop { filter_eq { all_rows ; nationality ; slovakia } ; distance } ; 500 m } }, interpretation: select the rows whose nationality record fuzzily matches to slovakia . there is only one such row in the table . the distance record of this unqiue row is 500 m .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; slovakia } } ; eq { hop { filter_eq { all_rows ; nationality ; slovakia } ; distance } ; 500 m } }, interpretation: the 9th minimum week record of all rows is 9 . the attendance record of the row with 9th minimum week record is 46978 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; week ; 9 } ; 9 } ; eq { hop { nth_argmin { all_rows ; week ; 9 } ; attendance } ; 46978 } }, interpretation: the 9th minimum week record of all rows is 9 . the attendance record of the row with 9th minimum week record is 46978 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; week ; 9 } ; 9 } ; eq { hop { nth_argmin { all_rows ; week ; 9 } ; attendance } ; 46978 } }, interpretation: select the row whose result f - a record of all rows is maximum . the opponents record of this row is dumbarton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result f - a } ; opponents } ; dumbarton }, interpretation: select the row whose result f - a record of all rows is maximum . the opponents record of this row is dumbarton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; result f - a } ; opponents } ; dumbarton }, interpretation: the average of the time record of all rows is 6:40.52 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 6:40.52 }, interpretation: the average of the time record of all rows is 6:40.52 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 6:40.52 }, interpretation: select the rows whose venue record fuzzily matches to mcg . there is only one such row in the table . the home team record of this unqiue row is richmond . the away team record of this unqiue row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; mcg } } ; and { eq { hop { filter_eq { all_rows ; venue ; mcg } ; home team } ; richmond } ; eq { hop { filter_eq { all_rows ; venue ; mcg } ; away team } ; collingwood } } }, interpretation: select the rows whose venue record fuzzily matches to mcg . there is only one such row in the table . the home team record of this unqiue row is richmond . the away team record of this unqiue row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; mcg } } ; and { eq { hop { filter_eq { all_rows ; venue ; mcg } ; home team } ; richmond } ; eq { hop { filter_eq { all_rows ; venue ; mcg } ; away team } ; collingwood } } }, interpretation: select the rows whose competition record fuzzily matches to european zone . select the row whose year record of these rows is minimum . the score record of this row is 1 - 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; competition ; european zone } ; year } ; score } ; 1 - 4 }, interpretation: select the rows whose competition record fuzzily matches to european zone . select the row whose year record of these rows is minimum . the score record of this row is 1 - 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; competition ; european zone } ; year } ; score } ; 1 - 4 }, interpretation: the average of the number of powiats record of all rows is 2.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of powiats } ; 2.5 }, interpretation: the average of the number of powiats record of all rows is 2.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; number of powiats } ; 2.5 }, interpretation: select the rows whose erp / power w record is greater than 5000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; erp / power w ; 5000 } } ; 3 }, interpretation: select the rows whose erp / power w record is greater than 5000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; erp / power w ; 5000 } } ; 3 }, interpretation: select the rows whose directed by record fuzzily matches to michael lange . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; michael lange } } ; 9 }, interpretation: select the rows whose directed by record fuzzily matches to michael lange . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; michael lange } } ; 9 }, interpretation: select the row whose against record of all rows is maximum . the opposing team record of this row is buenos aires selection .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing team } ; buenos aires selection }, interpretation: select the row whose against record of all rows is maximum . the opposing team record of this row is buenos aires selection .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing team } ; buenos aires selection }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 3 }, interpretation: select the rows whose format record fuzzily matches to vinyl record . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; vinyl record } } ; 2 }, interpretation: select the rows whose format record fuzzily matches to vinyl record . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; format ; vinyl record } } ; 2 }, interpretation: select the row whose subscribers ( 2006 ) ( thousands ) record of all rows is 2nd maximum . the country record of this row is south africa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; subscribers ( 2006 ) ( thousands ) ; 2 } ; country } ; south africa }, interpretation: select the row whose subscribers ( 2006 ) ( thousands ) record of all rows is 2nd maximum . the country record of this row is south africa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; subscribers ( 2006 ) ( thousands ) ; 2 } ; country } ; south africa }, interpretation: for the laps records of all rows , most of them are greater than 60 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; laps ; 60 }, interpretation: for the laps records of all rows , most of them are greater than 60 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; laps ; 60 }, interpretation: the average of the location attendance record of all rows is 14040 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; location attendance } ; 14040 }, interpretation: the average of the location attendance record of all rows is 14040 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; location attendance } ; 14040 }, interpretation: for the crowd records of all rows , most of them are less than 20000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; crowd ; 20000 }, interpretation: for the crowd records of all rows , most of them are less than 20000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; crowd ; 20000 }, interpretation: select the rows whose drivers record fuzzily matches to romain grosjean . the 1st minimum year record of these rows is 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; drivers ; romain grosjean } ; year ; 1 } ; 2010 }, interpretation: select the rows whose drivers record fuzzily matches to romain grosjean . the 1st minimum year record of these rows is 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; drivers ; romain grosjean } ; year ; 1 } ; 2010 }, interpretation: select the rows whose description record fuzzily matches to heavy - lift helicopter . among these rows , select the rows whose total disk area record is greater than 8000 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; description ; heavy - lift helicopter } ; total disk area ; 8000 } } ; 1 }, interpretation: select the rows whose description record fuzzily matches to heavy - lift helicopter . among these rows , select the rows whose total disk area record is greater than 8000 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; description ; heavy - lift helicopter } ; total disk area ; 8000 } } ; 1 }, interpretation: for the of weeks records of all rows , most of them are equal to 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; of weeks ; 13 }, interpretation: for the of weeks records of all rows , most of them are equal to 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; of weeks ; 13 }, interpretation: for the team records of all rows , most of them fuzzily match to holden racing team .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; holden racing team }, interpretation: for the team records of all rows , most of them fuzzily match to holden racing team .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; holden racing team }, interpretation: for the region records of all rows , all of them fuzzily match to japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; region ; japan }, interpretation: for the region records of all rows , all of them fuzzily match to japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; region ; japan }, interpretation: select the row whose population ( 2013 ) record of all rows is 2nd maximum . the province record of this row is kwazulu - natal .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 2013 ) ; 2 } ; province } ; kwazulu - natal }, interpretation: select the row whose population ( 2013 ) record of all rows is 2nd maximum . the province record of this row is kwazulu - natal .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 2013 ) ; 2 } ; province } ; kwazulu - natal }, interpretation: select the rows whose winning driver record fuzzily matches to aj foyt . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winning driver ; aj foyt } } ; 4 }, interpretation: select the rows whose winning driver record fuzzily matches to aj foyt . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winning driver ; aj foyt } } ; 4 }, interpretation: for the format records of all rows , most of them fuzzily match to full - length .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; full - length }, interpretation: for the format records of all rows , most of them fuzzily match to full - length .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; full - length }, interpretation: select the rows whose home record fuzzily matches to philadelphia . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; home ; philadelphia } } ; 8 }, interpretation: select the rows whose home record fuzzily matches to philadelphia . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; home ; philadelphia } } ; 8 }, interpretation: for the current streak records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current streak ; w }, interpretation: for the current streak records of all rows , most of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current streak ; w }, interpretation: select the rows whose pos record does not match to dnf . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; pos ; dnf } } ; eq { hop { filter_not_eq { all_rows ; pos ; dnf } ; year } ; 1989 } }, interpretation: select the rows whose pos record does not match to dnf . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; pos ; dnf } } ; eq { hop { filter_not_eq { all_rows ; pos ; dnf } ; year } ; 1989 } }, interpretation: the average of the points record of all rows is 23.25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 23.25 }, interpretation: the average of the points record of all rows is 23.25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 23.25 }, interpretation: select the rows whose pos record fuzzily matches to dnf . select the row whose laps record of these rows is maximum . the year record of this row is 2005 . the class pos record of this row is dnf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { filter_eq { all_rows ; pos ; dnf } ; laps } ; year } ; 2005 } ; eq { hop { argmax { filter_eq { all_rows ; pos ; dnf } ; laps } ; class pos } ; dnf } }, interpretation: select the rows whose pos record fuzzily matches to dnf . select the row whose laps record of these rows is maximum . the year record of this row is 2005 . the class pos record of this row is dnf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { filter_eq { all_rows ; pos ; dnf } ; laps } ; year } ; 2005 } ; eq { hop { argmax { filter_eq { all_rows ; pos ; dnf } ; laps } ; class pos } ; dnf } }, interpretation: for the agg records of all rows , most of them are not equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; agg ; 0 }, interpretation: for the agg records of all rows , most of them are not equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; agg ; 0 }, interpretation: select the rows whose date record fuzzily matches to january 1992 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; january 1992 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to january 1992 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; january 1992 } } ; 2 }, interpretation: select the rows whose country record does not match to united states . there is only one such row in the table . the player record of this unqiue row is david graham .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; country ; united states } } ; eq { hop { filter_not_eq { all_rows ; country ; united states } ; player } ; david graham } }, interpretation: select the rows whose country record does not match to united states . there is only one such row in the table . the player record of this unqiue row is david graham .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; country ; united states } } ; eq { hop { filter_not_eq { all_rows ; country ; united states } ; player } ; david graham } }, interpretation: select the rows whose fate record fuzzily matches to damaged . select the row whose date record of these rows is 1st minimum . the ship record of this row is llangibby castle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; fate ; damaged } ; date ; 1 } ; ship } ; llangibby castle }, interpretation: select the rows whose fate record fuzzily matches to damaged . select the row whose date record of these rows is 1st minimum . the ship record of this row is llangibby castle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; fate ; damaged } ; date ; 1 } ; ship } ; llangibby castle }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: select the rows whose year record fuzzily matches to 2002 . take the tournaments played record of this row . select the rows whose year record fuzzily matches to 2003 . take the tournaments played record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2002 } ; tournaments played } ; hop { filter_eq { all_rows ; year ; 2003 } ; tournaments played } }, interpretation: select the rows whose year record fuzzily matches to 2002 . take the tournaments played record of this row . select the rows whose year record fuzzily matches to 2003 . take the tournaments played record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2002 } ; tournaments played } ; hop { filter_eq { all_rows ; year ; 2003 } ; tournaments played } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose years in orlando record fuzzily matches to present . there is only one such row in the table . the player record of this unqiue row is victor oladipo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; years in orlando ; present } } ; eq { hop { filter_eq { all_rows ; years in orlando ; present } ; player } ; victor oladipo } }, interpretation: select the rows whose years in orlando record fuzzily matches to present . there is only one such row in the table . the player record of this unqiue row is victor oladipo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; years in orlando ; present } } ; eq { hop { filter_eq { all_rows ; years in orlando ; present } ; player } ; victor oladipo } }, interpretation: select the rows whose week record fuzzily matches to top 24 ( 12 women ) . take the order record of this row . select the rows whose week record fuzzily matches to top 20 ( 10 women ) . take the order record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; week ; top 24 ( 12 women ) } ; order } ; hop { filter_eq { all_rows ; week ; top 20 ( 10 women ) } ; order } }, interpretation: select the rows whose week record fuzzily matches to top 24 ( 12 women ) . take the order record of this row . select the rows whose week record fuzzily matches to top 20 ( 10 women ) . take the order record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; week ; top 24 ( 12 women ) } ; order } ; hop { filter_eq { all_rows ; week ; top 20 ( 10 women ) } ; order } }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the rows whose winner record fuzzily matches to russell ingall . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winner ; russell ingall } } ; 3 }, interpretation: select the rows whose winner record fuzzily matches to russell ingall . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; winner ; russell ingall } } ; 3 }, interpretation: select the rows whose medal record fuzzily matches to silver . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; medal ; silver } } ; 6 }, interpretation: select the rows whose medal record fuzzily matches to silver . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; medal ; silver } } ; 6 }, interpretation: select the rows whose song record fuzzily matches to retour . take the place record of this row . select the rows whose song record fuzzily matches to waterman . take the place record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; song ; retour } ; place } ; hop { filter_eq { all_rows ; song ; waterman } ; place } }, interpretation: select the rows whose song record fuzzily matches to retour . take the place record of this row . select the rows whose song record fuzzily matches to waterman . take the place record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; song ; retour } ; place } ; hop { filter_eq { all_rows ; song ; waterman } ; place } }, interpretation: select the rows whose location record fuzzily matches to usa . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; usa } } ; 4 }, interpretation: select the rows whose location record fuzzily matches to usa . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; usa } } ; 4 }, interpretation: select the rows whose name record fuzzily matches to mike gann . take the round record of this row . select the rows whose name record fuzzily matches to brent martin . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; mike gann } ; round } ; hop { filter_eq { all_rows ; name ; brent martin } ; round } }, interpretation: select the rows whose name record fuzzily matches to mike gann . take the round record of this row . select the rows whose name record fuzzily matches to brent martin . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; mike gann } ; round } ; hop { filter_eq { all_rows ; name ; brent martin } ; round } }, interpretation: select the row whose length record of all rows is maximum . the name record of this row is northern eagle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; name } ; northern eagle }, interpretation: select the row whose length record of all rows is maximum . the name record of this row is northern eagle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; name } ; northern eagle }, interpretation: select the row whose % of popular vote record of all rows is maximum . the election record of this row is 2001 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; % of popular vote } ; election } ; 2001 }, interpretation: select the row whose % of popular vote record of all rows is maximum . the election record of this row is 2001 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; % of popular vote } ; election } ; 2001 }, interpretation: select the row whose years in orlando record of all rows is 1st minimum . the player record of this row is jawann oldham .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; years in orlando ; 1 } ; player } ; jawann oldham }, interpretation: select the row whose years in orlando record of all rows is 1st minimum . the player record of this row is jawann oldham .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; years in orlando ; 1 } ; player } ; jawann oldham }, interpretation: select the rows whose player record fuzzily matches to wayne walker . take the overall pick record of this row . select the rows whose player record fuzzily matches to john yarno . take the overall pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; wayne walker } ; overall pick } ; hop { filter_eq { all_rows ; player ; john yarno } ; overall pick } }, interpretation: select the rows whose player record fuzzily matches to wayne walker . take the overall pick record of this row . select the rows whose player record fuzzily matches to john yarno . take the overall pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; wayne walker } ; overall pick } ; hop { filter_eq { all_rows ; player ; john yarno } ; overall pick } }, interpretation: for the innings records of all rows , most of them are greater than 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; innings ; 20 }, interpretation: for the innings records of all rows , most of them are greater than 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; innings ; 20 }, interpretation: select the rows whose away team record fuzzily matches to richmond . take the away team score record of this row . select the rows whose away team record fuzzily matches to hawthorn . take the away team score record of this row . the first record is greater than the second record . the away team score record of the first row is 7.9 ( 51 ) . the away team score record of the second row is 7.7 ( 49 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; hop { filter_eq { all_rows ; away team ; hawthorn } ; away team score } } ; and { eq { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; 7.9 ( 51 ) } ; eq { hop { filter_eq { all_rows ; away team ; hawthorn } ; away team score } ; 7.7 ( 49 ) } } }, interpretation: select the rows whose away team record fuzzily matches to richmond . take the away team score record of this row . select the rows whose away team record fuzzily matches to hawthorn . take the away team score record of this row . the first record is greater than the second record . the away team score record of the first row is 7.9 ( 51 ) . the away team score record of the second row is 7.7 ( 49 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; hop { filter_eq { all_rows ; away team ; hawthorn } ; away team score } } ; and { eq { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; 7.9 ( 51 ) } ; eq { hop { filter_eq { all_rows ; away team ; hawthorn } ; away team score } ; 7.7 ( 49 ) } } }, interpretation: select the row whose f bolt ( kgf ) record of all rows is 2nd maximum . the chambering record of this row is .300 lapua magnum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; f bolt ( kgf ) ; 2 } ; chambering } ; .300 lapua magnum }, interpretation: select the row whose f bolt ( kgf ) record of all rows is 2nd maximum . the chambering record of this row is .300 lapua magnum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; f bolt ( kgf ) ; 2 } ; chambering } ; .300 lapua magnum }, interpretation: select the rows whose gold record is equal to 6 . there is only one such row in the table . the nation record of this unqiue row is united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 6 } } ; eq { hop { filter_eq { all_rows ; gold ; 6 } ; nation } ; united states } }, interpretation: select the rows whose gold record is equal to 6 . there is only one such row in the table . the nation record of this unqiue row is united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 6 } } ; eq { hop { filter_eq { all_rows ; gold ; 6 } ; nation } ; united states } }, interpretation: select the rows whose name record fuzzily matches to kseniya moskvina . take the time record of this row . select the rows whose name record fuzzily matches to sophie edington . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; kseniya moskvina } ; time } ; hop { filter_eq { all_rows ; name ; sophie edington } ; time } }, interpretation: select the rows whose name record fuzzily matches to kseniya moskvina . take the time record of this row . select the rows whose name record fuzzily matches to sophie edington . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; kseniya moskvina } ; time } ; hop { filter_eq { all_rows ; name ; sophie edington } ; time } }, interpretation: select the row whose total record of all rows is maximum . the location record of this row is plainview .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; location } ; plainview }, interpretation: select the row whose total record of all rows is maximum . the location record of this row is plainview .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; location } ; plainview }, interpretation: for the of seats won records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; of seats won ; 0 }, interpretation: for the of seats won records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; of seats won ; 0 }, interpretation: select the rows whose rider record fuzzily matches to dwood / dcoomber . take the speed record of this row . select the rows whose rider record fuzzily matches to dhawes / jpmann . take the speed record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rider ; dwood / dcoomber } ; speed } ; hop { filter_eq { all_rows ; rider ; dhawes / jpmann } ; speed } }, interpretation: select the rows whose rider record fuzzily matches to dwood / dcoomber . take the speed record of this row . select the rows whose rider record fuzzily matches to dhawes / jpmann . take the speed record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rider ; dwood / dcoomber } ; speed } ; hop { filter_eq { all_rows ; rider ; dhawes / jpmann } ; speed } }, interpretation: select the row whose broadcast date record of all rows is 3rd minimum . the translation of title record of this row is hold out until you hit the wall .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; broadcast date ; 3 } ; translation of title } ; hold out until you hit the wall }, interpretation: select the row whose broadcast date record of all rows is 3rd minimum . the translation of title record of this row is hold out until you hit the wall .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; broadcast date ; 3 } ; translation of title } ; hold out until you hit the wall }, interpretation: select the rows whose high assists record fuzzily matches to steve nash . among these rows , select the rows whose location attendance record fuzzily matches to us airways center . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; high assists ; steve nash } ; location attendance ; us airways center } } ; 6 }, interpretation: select the rows whose high assists record fuzzily matches to steve nash . among these rows , select the rows whose location attendance record fuzzily matches to us airways center . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; high assists ; steve nash } ; location attendance ; us airways center } } ; 6 }, interpretation: select the rows whose tournament record fuzzily matches to mercedescup , stuttgart , germany . there is only one such row in the table . the date record of this unqiue row is july 17 , 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; mercedescup , stuttgart , germany } } ; eq { hop { filter_eq { all_rows ; tournament ; mercedescup , stuttgart , germany } ; date } ; july 17 , 2011 } }, interpretation: select the rows whose tournament record fuzzily matches to mercedescup , stuttgart , germany . there is only one such row in the table . the date record of this unqiue row is july 17 , 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; mercedescup , stuttgart , germany } } ; eq { hop { filter_eq { all_rows ; tournament ; mercedescup , stuttgart , germany } ; date } ; july 17 , 2011 } }, interpretation: select the rows whose bronze record is greater than 6 . there is only one such row in the table . the nation record of this unqiue row is morocco .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; bronze ; 6 } } ; eq { hop { filter_greater { all_rows ; bronze ; 6 } ; nation } ; morocco } }, interpretation: select the rows whose bronze record is greater than 6 . there is only one such row in the table . the nation record of this unqiue row is morocco .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; bronze ; 6 } } ; eq { hop { filter_greater { all_rows ; bronze ; 6 } ; nation } ; morocco } }, interpretation: select the rows whose status record fuzzily matches to six . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; six } } ; 5 }, interpretation: select the rows whose status record fuzzily matches to six . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; six } } ; 5 }, interpretation: select the rows whose venue record fuzzily matches to windy hill . there is only one such row in the table . the home team record of this unqiue row is essendon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; windy hill } } ; eq { hop { filter_eq { all_rows ; venue ; windy hill } ; home team } ; essendon } }, interpretation: select the rows whose venue record fuzzily matches to windy hill . there is only one such row in the table . the home team record of this unqiue row is essendon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; windy hill } } ; eq { hop { filter_eq { all_rows ; venue ; windy hill } ; home team } ; essendon } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose player record fuzzily matches to julien cayer . take the overall pick record of this row . select the rows whose player record fuzzily matches to gustav nyquist . take the overall pick record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; julien cayer } ; overall pick } ; hop { filter_eq { all_rows ; player ; gustav nyquist } ; overall pick } }, interpretation: select the rows whose player record fuzzily matches to julien cayer . take the overall pick record of this row . select the rows whose player record fuzzily matches to gustav nyquist . take the overall pick record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; julien cayer } ; overall pick } ; hop { filter_eq { all_rows ; player ; gustav nyquist } ; overall pick } }, interpretation: select the rows whose language record fuzzily matches to belarusian . take the number record of this row . select the rows whose language record fuzzily matches to polish . take the number record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; language ; belarusian } ; number } ; hop { filter_eq { all_rows ; language ; polish } ; number } }, interpretation: select the rows whose language record fuzzily matches to belarusian . take the number record of this row . select the rows whose language record fuzzily matches to polish . take the number record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; language ; belarusian } ; number } ; hop { filter_eq { all_rows ; language ; polish } ; number } }, interpretation: select the rows whose county record fuzzily matches to kilkenny . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; kilkenny } } ; 4 }, interpretation: select the rows whose county record fuzzily matches to kilkenny . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; kilkenny } } ; 4 }, interpretation: select the rows whose institution record is arbitrary . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; institution } } ; 11 }, interpretation: select the rows whose institution record is arbitrary . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; institution } } ; 11 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 6 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 6 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 10 }, interpretation: select the rows whose points record is equal to 0 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; points ; 0 } } ; 5 }, interpretation: select the rows whose points record is equal to 0 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; points ; 0 } } ; 5 }, interpretation: the sum of the races record of all rows is 65 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 65 }, interpretation: the sum of the races record of all rows is 65 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 65 }, interpretation: select the rows whose surface record fuzzily matches to hard . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; hard } } ; 4 }, interpretation: select the rows whose surface record fuzzily matches to hard . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; hard } } ; 4 }, interpretation: the average of the capacity record of all rows is 9900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 9900 }, interpretation: the average of the capacity record of all rows is 9900 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 9900 }, interpretation: select the rows whose competition record fuzzily matches to world championships . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; world championships } } ; 3 }, interpretation: select the rows whose competition record fuzzily matches to world championships . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; world championships } } ; 3 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is march 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; march 20 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is march 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; march 20 }, interpretation: select the rows whose opponent record fuzzily matches to st louis cardinals . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; st louis cardinals } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to st louis cardinals . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; st louis cardinals } } ; 2 }, interpretation: the average of the money record of all rows is 153030 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money } ; 153030 }, interpretation: the average of the money record of all rows is 153030 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money } ; 153030 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 12 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 12 }, interpretation: for the venue records of all rows , all of them fuzzily match to national stadium , tokyo , tokyo .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; venue ; national stadium , tokyo , tokyo }, interpretation: for the venue records of all rows , all of them fuzzily match to national stadium , tokyo , tokyo .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; venue ; national stadium , tokyo , tokyo }, interpretation: for the position records of all rows , most of them fuzzily match to wing .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; wing }, interpretation: for the position records of all rows , most of them fuzzily match to wing .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; wing }, interpretation: select the row whose date record of all rows is minimum . the race record of this row is manikato stakes .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; race } ; manikato stakes }, interpretation: select the row whose date record of all rows is minimum . the race record of this row is manikato stakes .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; race } ; manikato stakes }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is victoria park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; victoria park }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is victoria park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; victoria park }, interpretation: the average of the saturated fat record of all rows is 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; saturated fat } ; 22 }, interpretation: the average of the saturated fat record of all rows is 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; saturated fat } ; 22 }, interpretation: select the rows whose finish record is equal to 10 . there is only one such row in the table . the year record of this unqiue row is 1972 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; finish ; 10 } } ; eq { hop { filter_eq { all_rows ; finish ; 10 } ; year } ; 1972 } }, interpretation: select the rows whose finish record is equal to 10 . there is only one such row in the table . the year record of this unqiue row is 1972 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; finish ; 10 } } ; eq { hop { filter_eq { all_rows ; finish ; 10 } ; year } ; 1972 } }, interpretation: select the rows whose frequency record fuzzily matches to 830 khz . there is only one such row in the table . the calls record of this unqiue row is wcrn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; frequency ; 830 khz } } ; eq { hop { filter_eq { all_rows ; frequency ; 830 khz } ; calls } ; wcrn } }, interpretation: select the rows whose frequency record fuzzily matches to 830 khz . there is only one such row in the table . the calls record of this unqiue row is wcrn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; frequency ; 830 khz } } ; eq { hop { filter_eq { all_rows ; frequency ; 830 khz } ; calls } ; wcrn } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the row whose 2006 - 10 record of all rows is maximum . the state record of this row is bihar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2006 - 10 } ; state } ; bihar }, interpretation: select the row whose 2006 - 10 record of all rows is maximum . the state record of this row is bihar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2006 - 10 } ; state } ; bihar }, interpretation: select the rows whose opponent record fuzzily matches to philadelphia soul . take the date record of this row . select the rows whose opponent record fuzzily matches to georgia force . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; philadelphia soul } ; date } ; hop { filter_eq { all_rows ; opponent ; georgia force } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to philadelphia soul . take the date record of this row . select the rows whose opponent record fuzzily matches to georgia force . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; philadelphia soul } ; date } ; hop { filter_eq { all_rows ; opponent ; georgia force } ; date } }, interpretation: select the rows whose wk 13 record fuzzily matches to n / r . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wk 13 ; n / r } } ; 3 }, interpretation: select the rows whose wk 13 record fuzzily matches to n / r . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wk 13 ; n / r } } ; 3 }, interpretation: select the rows whose losses record is greater than or equal to 15 . select the row whose goal difference record of these rows is 1st minimum . the club record of this row is cd tarrasa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_greater_eq { all_rows ; losses ; 15 } ; goal difference ; 1 } ; club } ; cd tarrasa }, interpretation: select the rows whose losses record is greater than or equal to 15 . select the row whose goal difference record of these rows is 1st minimum . the club record of this row is cd tarrasa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_greater_eq { all_rows ; losses ; 15 } ; goal difference ; 1 } ; club } ; cd tarrasa }, interpretation: select the rows whose date record fuzzily matches to november 17 , 1968 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 24 , 1968 . take the attendance record of this row . the first record is greater than the second record . the attendance record of the first row is 48271 . the attendance record of the second row is 18305 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; date ; november 17 , 1968 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 24 , 1968 } ; attendance } } ; and { eq { hop { filter_eq { all_rows ; date ; november 17 , 1968 } ; attendance } ; 48271 } ; eq { hop { filter_eq { all_rows ; date ; november 24 , 1968 } ; attendance } ; 18305 } } }, interpretation: select the rows whose date record fuzzily matches to november 17 , 1968 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 24 , 1968 . take the attendance record of this row . the first record is greater than the second record . the attendance record of the first row is 48271 . the attendance record of the second row is 18305 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; date ; november 17 , 1968 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 24 , 1968 } ; attendance } } ; and { eq { hop { filter_eq { all_rows ; date ; november 17 , 1968 } ; attendance } ; 48271 } ; eq { hop { filter_eq { all_rows ; date ; november 24 , 1968 } ; attendance } ; 18305 } } }, interpretation: select the row whose event record of all rows is 3rd minimum . the circuit record of this row is wakefield park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; event ; 3 } ; circuit } ; wakefield park }, interpretation: select the row whose event record of all rows is 3rd minimum . the circuit record of this row is wakefield park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; event ; 3 } ; circuit } ; wakefield park }, interpretation: select the rows whose service record fuzzily matches to marine corps . among these rows , select the rows whose rank record fuzzily matches to private . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; service ; marine corps } ; rank ; private } } ; 5 }, interpretation: select the rows whose service record fuzzily matches to marine corps . among these rows , select the rows whose rank record fuzzily matches to private . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; service ; marine corps } ; rank ; private } } ; 5 }, interpretation: select the rows whose max processors record fuzzily matches to 1 ultrasparc t1 . select the row whose max memory record of these rows is 1st minimum . the model record of this row is t1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; max processors ; 1 ultrasparc t1 } ; max memory ; 1 } ; model } ; t1000 }, interpretation: select the rows whose max processors record fuzzily matches to 1 ultrasparc t1 . select the row whose max memory record of these rows is 1st minimum . the model record of this row is t1000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; max processors ; 1 ultrasparc t1 } ; max memory ; 1 } ; model } ; t1000 }, interpretation: for the date records of all rows , all of them fuzzily match to 16 may 1931 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 16 may 1931 }, interpretation: for the date records of all rows , all of them fuzzily match to 16 may 1931 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 16 may 1931 }, interpretation: select the rows whose finish record is equal to 14 . there is only one such row in the table . the year record of this unqiue row is 1982 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; finish ; 14 } } ; eq { hop { filter_eq { all_rows ; finish ; 14 } ; year } ; 1982 } }, interpretation: select the rows whose finish record is equal to 14 . there is only one such row in the table . the year record of this unqiue row is 1982 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; finish ; 14 } } ; eq { hop { filter_eq { all_rows ; finish ; 14 } ; year } ; 1982 } }, interpretation: select the rows whose class record fuzzily matches to 250 cc . take the race record of this row . select the rows whose class record fuzzily matches to moto2 . take the race record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; class ; 250 cc } ; race } ; hop { filter_eq { all_rows ; class ; moto2 } ; race } }, interpretation: select the rows whose class record fuzzily matches to 250 cc . take the race record of this row . select the rows whose class record fuzzily matches to moto2 . take the race record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; class ; 250 cc } ; race } ; hop { filter_eq { all_rows ; class ; moto2 } ; race } }, interpretation: select the rows whose 9:00 record fuzzily matches to the office . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 9:00 ; the office } } ; 2 }, interpretation: select the rows whose 9:00 record fuzzily matches to the office . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 9:00 ; the office } } ; 2 }, interpretation: for the first elected records of all rows , most of them are less than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; first elected ; 2000 }, interpretation: for the first elected records of all rows , most of them are less than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; first elected ; 2000 }, interpretation: select the rows whose incumbent record fuzzily matches to jack thomas brinkley . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to dawson mathis . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; jack thomas brinkley } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; dawson mathis } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to jack thomas brinkley . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to dawson mathis . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; jack thomas brinkley } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; dawson mathis } ; first elected } }, interpretation: select the rows whose champion record fuzzily matches to karrie webb . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champion ; karrie webb } } ; 2 }, interpretation: select the rows whose champion record fuzzily matches to karrie webb . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; champion ; karrie webb } } ; 2 }, interpretation: select the rows whose year record is greater than 2010 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; year ; 2010 } }, interpretation: select the rows whose year record is greater than 2010 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; year ; 2010 } }, interpretation: select the rows whose first elected record fuzzily matches to 195 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 195 } } ; 2 }, interpretation: select the rows whose first elected record fuzzily matches to 195 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 195 } } ; 2 }, interpretation: select the rows whose total record is equal to 35994 . there is only one such row in the table . the department record of this unqiue row is la paz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; total ; 35994 } } ; eq { hop { filter_eq { all_rows ; total ; 35994 } ; department } ; la paz } }, interpretation: select the rows whose total record is equal to 35994 . there is only one such row in the table . the department record of this unqiue row is la paz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; total ; 35994 } } ; eq { hop { filter_eq { all_rows ; total ; 35994 } ; department } ; la paz } }, interpretation: select the rows whose gold record fuzzily matches to wu yanan . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; wu yanan } } ; 2 }, interpretation: select the rows whose gold record fuzzily matches to wu yanan . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; wu yanan } } ; 2 }, interpretation: for the date records of all rows , most of them are greater than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; date ; 2000 }, interpretation: for the date records of all rows , most of them are greater than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; date ; 2000 }, interpretation: select the rows whose transfer fee record fuzzily matches to youth system . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; transfer fee ; youth system } } ; 2 }, interpretation: select the rows whose transfer fee record fuzzily matches to youth system . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; transfer fee ; youth system } } ; 2 }, interpretation: select the rows whose losing bonus record is equal to 3 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; losing bonus ; 3 } } ; 5 }, interpretation: select the rows whose losing bonus record is equal to 3 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; losing bonus ; 3 } } ; 5 }, interpretation: select the rows whose content record fuzzily matches to general television . for the language records of these rows , all of them fuzzily match to italian .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; content ; general television } ; language ; italian }, interpretation: select the rows whose content record fuzzily matches to general television . for the language records of these rows , all of them fuzzily match to italian .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; content ; general television } ; language ; italian }, interpretation: for the capacity records of all rows , most of them are greater than 10,000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; capacity ; 10,000 }, interpretation: for the capacity records of all rows , most of them are greater than 10,000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; capacity ; 10,000 }, interpretation: select the rows whose surface record fuzzily matches to hard . select the row whose date record of these rows is minimum . the opponent in the final record of this row is andre agassi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; surface ; hard } ; date } ; opponent in the final } ; andre agassi }, interpretation: select the rows whose surface record fuzzily matches to hard . select the row whose date record of these rows is minimum . the opponent in the final record of this row is andre agassi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; surface ; hard } ; date } ; opponent in the final } ; andre agassi }, interpretation: for the date records of all rows , all of them fuzzily match to february .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; february }, interpretation: for the date records of all rows , all of them fuzzily match to february .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; february }, interpretation: the average of the crowd record of all rows is 17128 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17128 }, interpretation: the average of the crowd record of all rows is 17128 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17128 }, interpretation: select the rows whose country record fuzzily matches to australia . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; australia } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to australia . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; australia } } ; 3 }, interpretation: select the rows whose home team record fuzzily matches to south melbourne . take the home team score record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; south melbourne } ; home team score } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to south melbourne . take the home team score record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; south melbourne } ; home team score } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } }, interpretation: select the rows whose points record is equal to 24 . there is only one such row in the table . the november record of this unqiue row is 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 24 } } ; eq { hop { filter_eq { all_rows ; points ; 24 } ; november } ; 20 } }, interpretation: select the rows whose points record is equal to 24 . there is only one such row in the table . the november record of this unqiue row is 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 24 } } ; eq { hop { filter_eq { all_rows ; points ; 24 } ; november } ; 20 } }, interpretation: select the row whose attendance record of all rows is 2nd minimum . the date record of this row is december 16 , 1962 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; attendance ; 2 } ; date } ; december 16 , 1962 }, interpretation: select the row whose attendance record of all rows is 2nd minimum . the date record of this row is december 16 , 1962 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; attendance ; 2 } ; date } ; december 16 , 1962 }, interpretation: select the rows whose host city record fuzzily matches to buffalo , new york . take the year record of this row . select the rows whose host city record fuzzily matches to orlando , florida . take the year record of this row . the second record is 1 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; host city ; buffalo , new york } ; year } ; hop { filter_eq { all_rows ; host city ; orlando , florida } ; year } } ; -1 }, interpretation: select the rows whose host city record fuzzily matches to buffalo , new york . take the year record of this row . select the rows whose host city record fuzzily matches to orlando , florida . take the year record of this row . the second record is 1 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; host city ; buffalo , new york } ; year } ; hop { filter_eq { all_rows ; host city ; orlando , florida } ; year } } ; -1 }, interpretation: select the rows whose championship record fuzzily matches to french open . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; championship ; french open } } ; 2 }, interpretation: select the rows whose championship record fuzzily matches to french open . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; championship ; french open } } ; 2 }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the row whose points record of all rows is 1st maximum . the driver record of this row is dan wheldon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 1 } ; driver } ; dan wheldon }, interpretation: select the row whose points record of all rows is 1st maximum . the driver record of this row is dan wheldon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 1 } ; driver } ; dan wheldon }, interpretation: select the rows whose destination record fuzzily matches to chennai . select the row whose train no record of these rows is 1st maximum . the train name record of this row is chennai express .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; destination ; chennai } ; train no ; 1 } ; train name } ; chennai express }, interpretation: select the rows whose destination record fuzzily matches to chennai . select the row whose train no record of these rows is 1st maximum . the train name record of this row is chennai express .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; destination ; chennai } ; train no ; 1 } ; train name } ; chennai express }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is cuba .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; cuba }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is cuba .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; cuba }, interpretation: select the row whose prominence record of all rows is 15th maximum . the mountain peak record of this row is mount fernow .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; prominence ; 15 } ; mountain peak } ; mount fernow }, interpretation: select the row whose prominence record of all rows is 15th maximum . the mountain peak record of this row is mount fernow .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; prominence ; 15 } ; mountain peak } ; mount fernow }, interpretation: for the gdp ( billion us ) records of all rows , most of them are greater than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; gdp ( billion us ) ; 100 }, interpretation: for the gdp ( billion us ) records of all rows , most of them are greater than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; gdp ( billion us ) ; 100 }, interpretation: select the row whose year record of all rows is 4th minimum . the champion record of this row is emory .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 4 } ; champion } ; emory }, interpretation: select the row whose year record of all rows is 4th minimum . the champion record of this row is emory .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 4 } ; champion } ; emory }, interpretation: select the row whose length record of all rows is maximum . the name ( year commissioned ) record of this row is dampier to bunbury natural gas pipeline ( 1984 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; name ( year commissioned ) } ; dampier to bunbury natural gas pipeline ( 1984 ) }, interpretation: select the row whose length record of all rows is maximum . the name ( year commissioned ) record of this row is dampier to bunbury natural gas pipeline ( 1984 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; name ( year commissioned ) } ; dampier to bunbury natural gas pipeline ( 1984 ) }, interpretation: for the result records of all rows , most of them fuzzily match to not nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; not nominated }, interpretation: for the result records of all rows , most of them fuzzily match to not nominated .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; not nominated }, interpretation: the average of the division record record of all rows is 3.14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; division record } ; 3.14 }, interpretation: the average of the division record record of all rows is 3.14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; division record } ; 3.14 }, interpretation: select the rows whose chassis - engine record fuzzily matches to jaguar xjr - 8 . there is only one such row in the table . the driver record of this unqiue row is raul boesel .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis - engine ; jaguar xjr - 8 } } ; eq { hop { filter_eq { all_rows ; chassis - engine ; jaguar xjr - 8 } ; driver } ; raul boesel } }, interpretation: select the rows whose chassis - engine record fuzzily matches to jaguar xjr - 8 . there is only one such row in the table . the driver record of this unqiue row is raul boesel .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis - engine ; jaguar xjr - 8 } } ; eq { hop { filter_eq { all_rows ; chassis - engine ; jaguar xjr - 8 } ; driver } ; raul boesel } }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 3 }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 3 }, interpretation: select the row whose events record of all rows is maximum . the player record of this row is allen doyle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; events } ; player } ; allen doyle }, interpretation: select the row whose events record of all rows is maximum . the player record of this row is allen doyle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; events } ; player } ; allen doyle }, interpretation: select the rows whose year record fuzzily matches to 1963 . take the finish record of this row . select the rows whose year record fuzzily matches to 1971 . take the finish record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 1963 } ; finish } ; hop { filter_eq { all_rows ; year ; 1971 } ; finish } }, interpretation: select the rows whose year record fuzzily matches to 1963 . take the finish record of this row . select the rows whose year record fuzzily matches to 1971 . take the finish record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 1963 } ; finish } ; hop { filter_eq { all_rows ; year ; 1971 } ; finish } }, interpretation: for the result records of all rows , all of them fuzzily match to not nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; not nominated }, interpretation: for the result records of all rows , all of them fuzzily match to not nominated .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; not nominated }, interpretation: select the rows whose rank record fuzzily matches to 3 . take the silver record of this row . select the rows whose rank record fuzzily matches to 2 . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rank ; 3 } ; silver } ; hop { filter_eq { all_rows ; rank ; 2 } ; silver } }, interpretation: select the rows whose rank record fuzzily matches to 3 . take the silver record of this row . select the rows whose rank record fuzzily matches to 2 . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; rank ; 3 } ; silver } ; hop { filter_eq { all_rows ; rank ; 2 } ; silver } }, interpretation: select the row whose vessels record of all rows is 2nd maximum . the ship name record of this row is theofilos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; vessels ; 2 } ; ship name } ; theofilos }, interpretation: select the row whose vessels record of all rows is 2nd maximum . the ship name record of this row is theofilos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; vessels ; 2 } ; ship name } ; theofilos }, interpretation: the average of the capacity record of all rows is 10300 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 10300 }, interpretation: the average of the capacity record of all rows is 10300 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 10300 }, interpretation: the average of the score record of all rows is 2.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 2.3 }, interpretation: the average of the score record of all rows is 2.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 2.3 }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 8 }, interpretation: select the rows whose result record fuzzily matches to won . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; won } } ; 8 }, interpretation: select the rows whose game record fuzzily matches to 49 . take the score record of this row . select the rows whose game record fuzzily matches to 55 . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; game ; 49 } ; score } ; hop { filter_eq { all_rows ; game ; 55 } ; score } }, interpretation: select the rows whose game record fuzzily matches to 49 . take the score record of this row . select the rows whose game record fuzzily matches to 55 . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; game ; 49 } ; score } ; hop { filter_eq { all_rows ; game ; 55 } ; score } }, interpretation: select the rows whose result record fuzzily matches to won . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; result ; won } }, interpretation: select the rows whose result record fuzzily matches to won . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; result ; won } }, interpretation: select the rows whose directed by record fuzzily matches to levie isaacks . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; levie isaacks } } ; 5 }, interpretation: select the rows whose directed by record fuzzily matches to levie isaacks . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; levie isaacks } } ; 5 }, interpretation: the average of the draw record of all rows is 4.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; draw } ; 4.5 }, interpretation: the average of the draw record of all rows is 4.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; draw } ; 4.5 }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; candidates ; unopposed } } ; 5 }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; candidates ; unopposed } } ; 5 }, interpretation: for the high points records of all rows , most of them fuzzily match to jalen rose .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; jalen rose }, interpretation: for the high points records of all rows , most of them fuzzily match to jalen rose .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; jalen rose }, interpretation: select the rows whose webcast link record fuzzily matches to n / a . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; webcast link ; n / a } } ; 2 }, interpretation: select the rows whose webcast link record fuzzily matches to n / a . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; webcast link ; n / a } } ; 2 }, interpretation: select the row whose gains record of all rows is maximum . the party record of this row is wildrose .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gains } ; party } ; wildrose }, interpretation: select the row whose gains record of all rows is maximum . the party record of this row is wildrose .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gains } ; party } ; wildrose }, interpretation: select the rows whose bowling style record fuzzily matches to left arm orthodox spin . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bowling style ; left arm orthodox spin } } ; 1 }, interpretation: select the rows whose bowling style record fuzzily matches to left arm orthodox spin . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bowling style ; left arm orthodox spin } } ; 1 }, interpretation: select the rows whose date record fuzzily matches to july 16 . take the location / attendance record of this row . select the rows whose date record fuzzily matches to july 18 . take the location / attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; july 16 } ; location / attendance } ; hop { filter_eq { all_rows ; date ; july 18 } ; location / attendance } }, interpretation: select the rows whose date record fuzzily matches to july 16 . take the location / attendance record of this row . select the rows whose date record fuzzily matches to july 18 . take the location / attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; july 16 } ; location / attendance } ; hop { filter_eq { all_rows ; date ; july 18 } ; location / attendance } }, interpretation: select the rows whose location attendance record fuzzily matches to ford center . the sum of the location attendance record of these rows is over 36000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; ford center } ; location attendance } ; over 36000 }, interpretation: select the rows whose location attendance record fuzzily matches to ford center . the sum of the location attendance record of these rows is over 36000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; location attendance ; ford center } ; location attendance } ; over 36000 }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is 15 june 1958 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; 15 june 1958 }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is 15 june 1958 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; 15 june 1958 }, interpretation: select the rows whose incumbent record fuzzily matches to william h perry . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to william elliott . take the first elected record of this row . the first record is equal to the second record . the first elected record of the first row is 1884 . the first elected record of the second row is 1884 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; incumbent ; william h perry } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; william elliott } ; first elected } } ; and { eq { hop { filter_eq { all_rows ; incumbent ; william h perry } ; first elected } ; 1884 } ; eq { hop { filter_eq { all_rows ; incumbent ; william elliott } ; first elected } ; 1884 } } }, interpretation: select the rows whose incumbent record fuzzily matches to william h perry . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to william elliott . take the first elected record of this row . the first record is equal to the second record . the first elected record of the first row is 1884 . the first elected record of the second row is 1884 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; incumbent ; william h perry } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; william elliott } ; first elected } } ; and { eq { hop { filter_eq { all_rows ; incumbent ; william h perry } ; first elected } ; 1884 } ; eq { hop { filter_eq { all_rows ; incumbent ; william elliott } ; first elected } ; 1884 } } }, interpretation: for the competition records of all rows , most of them fuzzily match to friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; friendly }, interpretation: for the competition records of all rows , most of them fuzzily match to friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; friendly }, interpretation: select the rows whose score record fuzzily matches to 8 . there is only one such row in the table . the team 1 record of this unqiue row is kashima antlers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 8 } } ; eq { hop { filter_eq { all_rows ; score ; 8 } ; team 1 } ; kashima antlers } }, interpretation: select the rows whose score record fuzzily matches to 8 . there is only one such row in the table . the team 1 record of this unqiue row is kashima antlers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 8 } } ; eq { hop { filter_eq { all_rows ; score ; 8 } ; team 1 } ; kashima antlers } }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 10 }, interpretation: the sum of the score record of all rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 8 }, interpretation: the sum of the score record of all rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 8 }, interpretation: select the rows whose result record fuzzily matches to re-elected . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re-elected } } ; 6 }, interpretation: select the rows whose result record fuzzily matches to re-elected . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re-elected } } ; 6 }, interpretation: select the rows whose club record fuzzily matches to montauban . take the lost record of this row . select the rows whose club record fuzzily matches to biarritz . take the lost record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; montauban } ; lost } ; hop { filter_eq { all_rows ; club ; biarritz } ; lost } }, interpretation: select the rows whose club record fuzzily matches to montauban . take the lost record of this row . select the rows whose club record fuzzily matches to biarritz . take the lost record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; club ; montauban } ; lost } ; hop { filter_eq { all_rows ; club ; biarritz } ; lost } }, interpretation: select the rows whose administrative division record fuzzily matches to palash upazila . take the population 2001 census ( adjusted ) record of this row . select the rows whose administrative division record fuzzily matches to narsingdi district . take the population 2001 census ( adjusted ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; administrative division ; palash upazila } ; population 2001 census ( adjusted ) } ; hop { filter_eq { all_rows ; administrative division ; narsingdi district } ; population 2001 census ( adjusted ) } }, interpretation: select the rows whose administrative division record fuzzily matches to palash upazila . take the population 2001 census ( adjusted ) record of this row . select the rows whose administrative division record fuzzily matches to narsingdi district . take the population 2001 census ( adjusted ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; administrative division ; palash upazila } ; population 2001 census ( adjusted ) } ; hop { filter_eq { all_rows ; administrative division ; narsingdi district } ; population 2001 census ( adjusted ) } }, interpretation: for the decision records of all rows , most of them fuzzily match to biron .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; decision ; biron }, interpretation: for the decision records of all rows , most of them fuzzily match to biron .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; decision ; biron }, interpretation: select the rows whose airline record fuzzily matches to tam . take the rank record of this row . select the rows whose airline record fuzzily matches to gol . take the rank record of this row . the second record is 1 better larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; airline ; tam } ; rank } ; hop { filter_eq { all_rows ; airline ; gol } ; rank } } ; -1 better }, interpretation: select the rows whose airline record fuzzily matches to tam . take the rank record of this row . select the rows whose airline record fuzzily matches to gol . take the rank record of this row . the second record is 1 better larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; airline ; tam } ; rank } ; hop { filter_eq { all_rows ; airline ; gol } ; rank } } ; -1 better }, interpretation: select the row whose home team score record of all rows is 2nd minimum . the home team record of this row is north melbourne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; home team score ; 2 } ; home team } ; north melbourne }, interpretation: select the row whose home team score record of all rows is 2nd minimum . the home team record of this row is north melbourne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; home team score ; 2 } ; home team } ; north melbourne }, interpretation: for the percentage of possible points records of all rows , most of them are less than 70 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; percentage of possible points ; 70 }, interpretation: for the percentage of possible points records of all rows , most of them are less than 70 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; percentage of possible points ; 70 }, interpretation: select the row whose year joined record of all rows is 6th minimum . the school record of this row is sheridan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year joined ; 6 } ; school } ; sheridan }, interpretation: select the row whose year joined record of all rows is 6th minimum . the school record of this row is sheridan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year joined ; 6 } ; school } ; sheridan }, interpretation: select the rows whose laps record is greater than or equal to 200 . select the row whose rank record of these rows is 2nd maximum . the year record of this row is 1953 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater_eq { all_rows ; laps ; 200 } ; rank ; 2 } ; year } ; 1953 }, interpretation: select the rows whose laps record is greater than or equal to 200 . select the row whose rank record of these rows is 2nd maximum . the year record of this row is 1953 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater_eq { all_rows ; laps ; 200 } ; rank ; 2 } ; year } ; 1953 }, interpretation: select the rows whose date record fuzzily matches to 10 june 2009 . take the competition record of this row . select the rows whose date record fuzzily matches to 5 september 2009 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is 2010 fifa world cup qualification . the competition record of the second row is 2010 fifa world cup qualification .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; date ; 10 june 2009 } ; competition } ; hop { filter_eq { all_rows ; date ; 5 september 2009 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; date ; 10 june 2009 } ; competition } ; 2010 fifa world cup qualification } ; eq { hop { filter_eq { all_rows ; date ; 5 september 2009 } ; competition } ; 2010 fifa world cup qualification } } }, interpretation: select the rows whose date record fuzzily matches to 10 june 2009 . take the competition record of this row . select the rows whose date record fuzzily matches to 5 september 2009 . take the competition record of this row . the first record fuzzily matches to the second record . the competition record of the first row is 2010 fifa world cup qualification . the competition record of the second row is 2010 fifa world cup qualification .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; date ; 10 june 2009 } ; competition } ; hop { filter_eq { all_rows ; date ; 5 september 2009 } ; competition } } ; and { eq { hop { filter_eq { all_rows ; date ; 10 june 2009 } ; competition } ; 2010 fifa world cup qualification } ; eq { hop { filter_eq { all_rows ; date ; 5 september 2009 } ; competition } ; 2010 fifa world cup qualification } } }, interpretation: select the rows whose livery record fuzzily matches to br unlined green with half yellow end . there is only one such row in the table . the number & name record of this unqiue row is no e50266 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; livery ; br unlined green with half yellow end } } ; eq { hop { filter_eq { all_rows ; livery ; br unlined green with half yellow end } ; number & name } ; no e50266 } }, interpretation: select the rows whose livery record fuzzily matches to br unlined green with half yellow end . there is only one such row in the table . the number & name record of this unqiue row is no e50266 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; livery ; br unlined green with half yellow end } } ; eq { hop { filter_eq { all_rows ; livery ; br unlined green with half yellow end } ; number & name } ; no e50266 } }, interpretation: select the rows whose sets record is less than 5 . among these rows , select the rows whose event record fuzzily matches to wimbledon . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; sets ; 5 } ; event ; wimbledon } } ; 2 }, interpretation: select the rows whose sets record is less than 5 . among these rows , select the rows whose event record fuzzily matches to wimbledon . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; sets ; 5 } ; event ; wimbledon } } ; 2 }, interpretation: select the rows whose place record does not match to t1 . the average of the to par record of these rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_not_eq { all_rows ; place ; t1 } ; to par } ; 4 }, interpretation: select the rows whose place record does not match to t1 . the average of the to par record of these rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_not_eq { all_rows ; place ; t1 } ; to par } ; 4 }, interpretation: select the rows whose location record fuzzily matches to brazil . there is only one such row in the table . the race name record of this unqiue row is tour de santa catarina .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; brazil } } ; eq { hop { filter_eq { all_rows ; location ; brazil } ; race name } ; tour de santa catarina } }, interpretation: select the rows whose location record fuzzily matches to brazil . there is only one such row in the table . the race name record of this unqiue row is tour de santa catarina .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; brazil } } ; eq { hop { filter_eq { all_rows ; location ; brazil } ; race name } ; tour de santa catarina } }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is al - ittihad .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; al - ittihad }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is al - ittihad .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; al - ittihad }, interpretation: select the rows whose constructor record fuzzily matches to ferrari . select the row whose time / retired record of these rows is minimum . the driver record of this row is rubens barrichello .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; constructor ; ferrari } ; time / retired } ; driver } ; rubens barrichello }, interpretation: select the rows whose constructor record fuzzily matches to ferrari . select the row whose time / retired record of these rows is minimum . the driver record of this row is rubens barrichello .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; constructor ; ferrari } ; time / retired } ; driver } ; rubens barrichello }, interpretation: select the rows whose last title record fuzzily matches to ( none ) . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; last title ; ( none ) } } ; 7 }, interpretation: select the rows whose last title record fuzzily matches to ( none ) . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; last title ; ( none ) } } ; 7 }, interpretation: for the winner records of all rows , most of them fuzzily match to blue .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winner ; blue }, interpretation: for the winner records of all rows , most of them fuzzily match to blue .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winner ; blue }, interpretation: select the row whose away team score record of all rows is 2nd maximum . the home team record of this row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; away team score ; 2 } ; home team } ; collingwood }, interpretation: select the row whose away team score record of all rows is 2nd maximum . the home team record of this row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; away team score ; 2 } ; home team } ; collingwood }, interpretation: select the row whose against record of all rows is maximum . the opposing team record of this row is giqualand west .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing team } ; giqualand west }, interpretation: select the row whose against record of all rows is maximum . the opposing team record of this row is giqualand west .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; against } ; opposing team } ; giqualand west }, interpretation: select the rows whose position record fuzzily matches to forward / center . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; forward / center } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to forward / center . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; forward / center } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to portugal . take the rank record of this row . select the rows whose country record fuzzily matches to cuba . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; portugal } ; rank } ; hop { filter_eq { all_rows ; country ; cuba } ; rank } }, interpretation: select the rows whose country record fuzzily matches to portugal . take the rank record of this row . select the rows whose country record fuzzily matches to cuba . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; portugal } ; rank } ; hop { filter_eq { all_rows ; country ; cuba } ; rank } }, interpretation: for the soap opera records of all rows , most of them fuzzily match to un posto al sole .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; soap opera ; un posto al sole }, interpretation: for the soap opera records of all rows , most of them fuzzily match to un posto al sole .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; soap opera ; un posto al sole }, interpretation: the 1st minimum rank record of all rows is 1 . the nation record of the row with 1st minimum rank record is japan . the gold record of the row with 1st minimum rank record is 6 . the total record of the row with 1st minimum rank record is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 1 } ; 1 } ; and { eq { hop { nth_argmin { all_rows ; rank ; 1 } ; nation } ; japan } ; and { eq { hop { nth_argmin { all_rows ; rank ; 1 } ; gold } ; 6 } ; eq { hop { nth_argmin { all_rows ; rank ; 1 } ; total } ; 12 } } } }, interpretation: the 1st minimum rank record of all rows is 1 . the nation record of the row with 1st minimum rank record is japan . the gold record of the row with 1st minimum rank record is 6 . the total record of the row with 1st minimum rank record is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; rank ; 1 } ; 1 } ; and { eq { hop { nth_argmin { all_rows ; rank ; 1 } ; nation } ; japan } ; and { eq { hop { nth_argmin { all_rows ; rank ; 1 } ; gold } ; 6 } ; eq { hop { nth_argmin { all_rows ; rank ; 1 } ; total } ; 12 } } } }, interpretation: for the high points records of all rows , most of them fuzzily match to tony parker .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; tony parker }, interpretation: for the high points records of all rows , most of them fuzzily match to tony parker .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; tony parker }, interpretation: for the notes records of all rows , most of them fuzzily match to french .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; notes ; french }, interpretation: for the notes records of all rows , most of them fuzzily match to french .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; notes ; french }, interpretation: select the rows whose incumbent record fuzzily matches to jerry huckaby . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to buddy roemer . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; jerry huckaby } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; buddy roemer } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to jerry huckaby . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to buddy roemer . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; jerry huckaby } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; buddy roemer } ; first elected } }, interpretation: select the rows whose college record fuzzily matches to arizona state . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college ; arizona state } } ; 2 }, interpretation: select the rows whose college record fuzzily matches to arizona state . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college ; arizona state } } ; 2 }, interpretation: the average of the 1990 - 95 record of all rows is 0.27 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 1990 - 95 } ; 0.27 }, interpretation: the average of the 1990 - 95 record of all rows is 0.27 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; 1990 - 95 } ; 0.27 }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is barney frank .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; barney frank }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is barney frank .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; barney frank }, interpretation: for the year records of all rows , all of them are greater than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; year ; 2000 }, interpretation: for the year records of all rows , all of them are greater than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; year ; 2000 }, interpretation: select the row whose agg score record of all rows is 7th maximum . the team 1 record of this row is ilisiakos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; agg score ; 7 } ; team 1 } ; ilisiakos }, interpretation: select the row whose agg score record of all rows is 7th maximum . the team 1 record of this row is ilisiakos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; agg score ; 7 } ; team 1 } ; ilisiakos }, interpretation: select the rows whose opponent record fuzzily matches to notre dame . the sum of the total offense record of these rows is 948 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; notre dame } ; total offense } ; 948 }, interpretation: select the rows whose opponent record fuzzily matches to notre dame . the sum of the total offense record of these rows is 948 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; notre dame } ; total offense } ; 948 }, interpretation: for the award records of all rows , all of them fuzzily match to laurence olivier award .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; award ; laurence olivier award }, interpretation: for the award records of all rows , all of them fuzzily match to laurence olivier award .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; award ; laurence olivier award }, interpretation: select the rows whose class record fuzzily matches to a - 4 . take the quantity made record of this row . select the rows whose class record fuzzily matches to a - 3 . take the quantity made record of this row . the first record is equal to the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; class ; a - 4 } ; quantity made } ; hop { filter_eq { all_rows ; class ; a - 3 } ; quantity made } }, interpretation: select the rows whose class record fuzzily matches to a - 4 . take the quantity made record of this row . select the rows whose class record fuzzily matches to a - 3 . take the quantity made record of this row . the first record is equal to the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; class ; a - 4 } ; quantity made } ; hop { filter_eq { all_rows ; class ; a - 3 } ; quantity made } }, interpretation: select the rows whose november record fuzzily matches to 27 . take the points record of this row . select the rows whose november record fuzzily matches to 29 . take the points record of this row . the second record is 2 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; november ; 27 } ; points } ; hop { filter_eq { all_rows ; november ; 29 } ; points } } ; -2 }, interpretation: select the rows whose november record fuzzily matches to 27 . take the points record of this row . select the rows whose november record fuzzily matches to 29 . take the points record of this row . the second record is 2 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; november ; 27 } ; points } ; hop { filter_eq { all_rows ; november ; 29 } ; points } } ; -2 }, interpretation: select the rows whose owner record fuzzily matches to mvv verkehr . for the seats records of these rows , all of them are greater than or equal to 80 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater_eq { filter_eq { all_rows ; owner ; mvv verkehr } ; seats ; 80 }, interpretation: select the rows whose owner record fuzzily matches to mvv verkehr . for the seats records of these rows , all of them are greater than or equal to 80 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater_eq { filter_eq { all_rows ; owner ; mvv verkehr } ; seats ; 80 }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: select the rows whose position record fuzzily matches to linebacker . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; linebacker } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to linebacker . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; linebacker } } ; 2 }, interpretation: select the rows whose country record does not match to united states . select the row whose money record of these rows is maximum . the player record of this row is vijay singh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_not_eq { all_rows ; country ; united states } ; money } ; player } ; vijay singh }, interpretation: select the rows whose country record does not match to united states . select the row whose money record of these rows is maximum . the player record of this row is vijay singh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_not_eq { all_rows ; country ; united states } ; money } ; player } ; vijay singh }, interpretation: select the rows whose team record fuzzily matches to hornets . take the score record of this row . select the rows whose team record fuzzily matches to supersonics . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; hornets } ; score } ; hop { filter_eq { all_rows ; team ; supersonics } ; score } }, interpretation: select the rows whose team record fuzzily matches to hornets . take the score record of this row . select the rows whose team record fuzzily matches to supersonics . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; hornets } ; score } ; hop { filter_eq { all_rows ; team ; supersonics } ; score } }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: select the rows whose aircraft record fuzzily matches to boeing . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; aircraft ; boeing } } ; 3 }, interpretation: select the rows whose aircraft record fuzzily matches to boeing . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; aircraft ; boeing } } ; 3 }, interpretation: select the row whose runs record of all rows is 2nd maximum . the player record of this row is dene hills .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; runs ; 2 } ; player } ; dene hills }, interpretation: select the row whose runs record of all rows is 2nd maximum . the player record of this row is dene hills .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; runs ; 2 } ; player } ; dene hills }, interpretation: for the country records of all rows , most of them fuzzily match to soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; soviet union }, interpretation: for the country records of all rows , most of them fuzzily match to soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; soviet union }, interpretation: select the rows whose nationality record fuzzily matches to jamaica . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; jamaica } } ; 2 }, interpretation: select the rows whose nationality record fuzzily matches to jamaica . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; jamaica } } ; 2 }, interpretation: select the row whose height record of all rows is maximum . the player record of this row is pape badiane .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height } ; player } ; pape badiane }, interpretation: select the row whose height record of all rows is maximum . the player record of this row is pape badiane .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height } ; player } ; pape badiane }, interpretation: for the result records of all rows , most of them fuzzily match to won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; won }, interpretation: select the row whose unemployment rate record of all rows is maximum . the county record of this row is schoharie .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; unemployment rate } ; county } ; schoharie }, interpretation: select the row whose unemployment rate record of all rows is maximum . the county record of this row is schoharie .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; unemployment rate } ; county } ; schoharie }, interpretation: select the row whose unemployment rate record of all rows is 2nd maximum . the county record of this row is allegany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; unemployment rate ; 2 } ; county } ; allegany }, interpretation: select the row whose unemployment rate record of all rows is 2nd maximum . the county record of this row is allegany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; unemployment rate ; 2 } ; county } ; allegany }, interpretation: select the rows whose first elected record is equal to 1810 . there is only one such row in the table . the incumbent record of this unqiue row is william piper .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 1810 } } ; eq { hop { filter_eq { all_rows ; first elected ; 1810 } ; incumbent } ; william piper } }, interpretation: select the rows whose first elected record is equal to 1810 . there is only one such row in the table . the incumbent record of this unqiue row is william piper .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 1810 } } ; eq { hop { filter_eq { all_rows ; first elected ; 1810 } ; incumbent } ; william piper } }, interpretation: the average of the points record of all rows is 21.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 21.2 }, interpretation: the average of the points record of all rows is 21.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 21.2 }, interpretation: select the rows whose accolade record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; accolade } } ; 6 }, interpretation: select the rows whose accolade record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; accolade } } ; 6 }, interpretation: select the row whose no in season record of all rows is 1st minimum . the title record of this row is grampires ( part 1 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; no in season ; 1 } ; title } ; grampires ( part 1 ) }, interpretation: select the row whose no in season record of all rows is 1st minimum . the title record of this row is grampires ( part 1 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; no in season ; 1 } ; title } ; grampires ( part 1 ) }, interpretation: select the rows whose year record fuzzily matches to 2013 . take the points record of this row . select the rows whose year record fuzzily matches to 2006 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2013 } ; points } ; hop { filter_eq { all_rows ; year ; 2006 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 2013 . take the points record of this row . select the rows whose year record fuzzily matches to 2006 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2013 } ; points } ; hop { filter_eq { all_rows ; year ; 2006 } ; points } }, interpretation: select the row whose result record of all rows is 1st maximum . the incumbent record of this row is john lewis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; result ; 1 } ; incumbent } ; john lewis }, interpretation: select the row whose result record of all rows is 1st maximum . the incumbent record of this row is john lewis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; result ; 1 } ; incumbent } ; john lewis }, interpretation: select the row whose weight ( lb ) record of all rows is maximum . the name record of this row is gary mcghee .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; weight ( lb ) } ; name } ; gary mcghee }, interpretation: select the row whose weight ( lb ) record of all rows is maximum . the name record of this row is gary mcghee .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; weight ( lb ) } ; name } ; gary mcghee }, interpretation: select the row whose award record of all rows is 2nd maximum . the film record of this row is mercy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; award ; 2 } ; film } ; mercy }, interpretation: select the row whose award record of all rows is 2nd maximum . the film record of this row is mercy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; award ; 2 } ; film } ; mercy }, interpretation: select the rows whose wind farm record is arbitrary . the number of such rows is 17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; wind farm } } ; 17 }, interpretation: select the rows whose wind farm record is arbitrary . the number of such rows is 17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; wind farm } } ; 17 }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: select the rows whose country record fuzzily matches to norway . among these rows , select the rows whose state record fuzzily matches to finnmark . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; norway } ; state ; finnmark } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to norway . among these rows , select the rows whose state record fuzzily matches to finnmark . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; norway } ; state ; finnmark } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to december 17 , 1989 . take the attendance record of this row . select the rows whose date record fuzzily matches to december 24 , 1989 . take the attendance record of this row . the first record is 6656 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; december 17 , 1989 } ; attendance } ; hop { filter_eq { all_rows ; date ; december 24 , 1989 } ; attendance } } ; 6656 }, interpretation: select the rows whose date record fuzzily matches to december 17 , 1989 . take the attendance record of this row . select the rows whose date record fuzzily matches to december 24 , 1989 . take the attendance record of this row . the first record is 6656 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; date ; december 17 , 1989 } ; attendance } ; hop { filter_eq { all_rows ; date ; december 24 , 1989 } ; attendance } } ; 6656 }, interpretation: select the rows whose founded record is greater than or equal to 1990 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; founded ; 1990 } } ; 2 }, interpretation: select the rows whose founded record is greater than or equal to 1990 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; founded ; 1990 } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to glenferrie oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to mcg . take the crowd record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; glenferrie oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; mcg } ; crowd } }, interpretation: select the rows whose venue record fuzzily matches to glenferrie oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to mcg . take the crowd record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; glenferrie oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; mcg } ; crowd } }, interpretation: for the country records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; united states }, interpretation: for the laps led records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps led ; 0 }, interpretation: for the laps led records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps led ; 0 }, interpretation: select the rows whose party record fuzzily matches to conservative . take the votes record of this row . select the rows whose party record fuzzily matches to labour . take the votes record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; party ; conservative } ; votes } ; hop { filter_eq { all_rows ; party ; labour } ; votes } }, interpretation: select the rows whose party record fuzzily matches to conservative . take the votes record of this row . select the rows whose party record fuzzily matches to labour . take the votes record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; party ; conservative } ; votes } ; hop { filter_eq { all_rows ; party ; labour } ; votes } }, interpretation: select the rows whose original air date record fuzzily matches to april . there is only one such row in the table . the title record of this unqiue row is the hamptons .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ; april } } ; eq { hop { filter_eq { all_rows ; original air date ; april } ; title } ; the hamptons } }, interpretation: select the rows whose original air date record fuzzily matches to april . there is only one such row in the table . the title record of this unqiue row is the hamptons .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; original air date ; april } } ; eq { hop { filter_eq { all_rows ; original air date ; april } ; title } ; the hamptons } }, interpretation: select the rows whose institution record fuzzily matches to ohio university . take the joined tschl record of this row . select the rows whose institution record fuzzily matches to university of akron . take the joined tschl record of this row . the first record is 1 year larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; institution ; ohio university } ; joined tschl } ; hop { filter_eq { all_rows ; institution ; university of akron } ; joined tschl } } ; 1 year }, interpretation: select the rows whose institution record fuzzily matches to ohio university . take the joined tschl record of this row . select the rows whose institution record fuzzily matches to university of akron . take the joined tschl record of this row . the first record is 1 year larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; institution ; ohio university } ; joined tschl } ; hop { filter_eq { all_rows ; institution ; university of akron } ; joined tschl } } ; 1 year }, interpretation: select the rows whose top 5 record is not equal to 0 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; top 5 ; 0 } } ; 4 }, interpretation: select the rows whose top 5 record is not equal to 0 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_not_eq { all_rows ; top 5 ; 0 } } ; 4 }, interpretation: for the 5th venue records of all rows , all of them fuzzily match to na .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; 5th venue ; na }, interpretation: for the 5th venue records of all rows , all of them fuzzily match to na .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; 5th venue ; na }, interpretation: select the rows whose class record fuzzily matches to lmp900 . among these rows , select the rows whose co - drivers record fuzzily matches to jan magnussen marco werner . there is only one such row in the table . the year record of this unqiue row is 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; class ; lmp900 } ; co - drivers ; jan magnussen marco werner } } ; eq { hop { filter_eq { filter_eq { all_rows ; class ; lmp900 } ; co - drivers ; jan magnussen marco werner } ; year } ; 2003 } }, interpretation: select the rows whose class record fuzzily matches to lmp900 . among these rows , select the rows whose co - drivers record fuzzily matches to jan magnussen marco werner . there is only one such row in the table . the year record of this unqiue row is 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; class ; lmp900 } ; co - drivers ; jan magnussen marco werner } } ; eq { hop { filter_eq { filter_eq { all_rows ; class ; lmp900 } ; co - drivers ; jan magnussen marco werner } ; year } ; 2003 } }, interpretation: the average of the pick record of all rows is 94 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 94 }, interpretation: the average of the pick record of all rows is 94 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 94 }, interpretation: select the rows whose chassis record fuzzily matches to lesovsky . there is only one such row in the table . the year record of this unqiue row is 1952 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; lesovsky } } ; eq { hop { filter_eq { all_rows ; chassis ; lesovsky } ; year } ; 1952 } }, interpretation: select the rows whose chassis record fuzzily matches to lesovsky . there is only one such row in the table . the year record of this unqiue row is 1952 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; lesovsky } } ; eq { hop { filter_eq { all_rows ; chassis ; lesovsky } ; year } ; 1952 } }, interpretation: select the row whose super g record of all rows is maximum . the season record of this row is 1990 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; super g } ; season } ; 1990 }, interpretation: select the row whose super g record of all rows is maximum . the season record of this row is 1990 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; super g } ; season } ; 1990 }, interpretation: for the played records of all rows , all of them are equal to 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 22 }, interpretation: select the rows whose matches record is equal to 4 . there is only one such row in the table . the player record of this unqiue row is ernie toshack .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; matches ; 4 } } ; eq { hop { filter_eq { all_rows ; matches ; 4 } ; player } ; ernie toshack } }, interpretation: select the rows whose matches record is equal to 4 . there is only one such row in the table . the player record of this unqiue row is ernie toshack .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; matches ; 4 } } ; eq { hop { filter_eq { all_rows ; matches ; 4 } ; player } ; ernie toshack } }, interpretation: select the rows whose no in season record fuzzily matches to 1 . take the viewers ( millions ) record of this row . select the rows whose no in season record fuzzily matches to 16 . take the viewers ( millions ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; no in season ; 1 } ; viewers ( millions ) } ; hop { filter_eq { all_rows ; no in season ; 16 } ; viewers ( millions ) } }, interpretation: select the rows whose no in season record fuzzily matches to 1 . take the viewers ( millions ) record of this row . select the rows whose no in season record fuzzily matches to 16 . take the viewers ( millions ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; no in season ; 1 } ; viewers ( millions ) } ; hop { filter_eq { all_rows ; no in season ; 16 } ; viewers ( millions ) } }, interpretation: select the rows whose country record fuzzily matches to italy . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; country ; italy } }, interpretation: select the rows whose country record fuzzily matches to italy . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; country ; italy } }, interpretation: for the current status records of all rows , most of them fuzzily match to active .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current status ; active }, interpretation: for the current status records of all rows , most of them fuzzily match to active .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; current status ; active }, interpretation: for the year born records of all rows , most of them are greater than 1979 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; year born ; 1979 }, interpretation: for the year born records of all rows , most of them are greater than 1979 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; year born ; 1979 }, interpretation: select the rows whose year record fuzzily matches to 1994 . take the wins record of this row . select the rows whose year record fuzzily matches to 1996 . take the wins record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 1994 } ; wins } ; hop { filter_eq { all_rows ; year ; 1996 } ; wins } } ; 1 }, interpretation: select the rows whose year record fuzzily matches to 1994 . take the wins record of this row . select the rows whose year record fuzzily matches to 1996 . take the wins record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 1994 } ; wins } ; hop { filter_eq { all_rows ; year ; 1996 } ; wins } } ; 1 }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the team record of this row is dallas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; team } ; dallas }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the team record of this row is dallas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; team } ; dallas }, interpretation: select the rows whose attendance record is greater than 22288 . there is only one such row in the table . the date record of this unqiue row is march 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; attendance ; 22288 } } ; eq { hop { filter_greater { all_rows ; attendance ; 22288 } ; date } ; march 14 } }, interpretation: select the rows whose attendance record is greater than 22288 . there is only one such row in the table . the date record of this unqiue row is march 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; attendance ; 22288 } } ; eq { hop { filter_greater { all_rows ; attendance ; 22288 } ; date } ; march 14 } }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: the average of the rank record of all rows is 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rank } ; 20 }, interpretation: the average of the rank record of all rows is 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; rank } ; 20 }, interpretation: select the row whose laid down record of all rows is minimum . the name record of this row is chanticleer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; laid down } ; name } ; chanticleer }, interpretation: select the row whose laid down record of all rows is minimum . the name record of this row is chanticleer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; laid down } ; name } ; chanticleer }, interpretation: for the class records of all rows , all of them fuzzily match to d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; class ; d }, interpretation: for the class records of all rows , all of them fuzzily match to d .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; class ; d }, interpretation: select the rows whose opponent record fuzzily matches to chargers . the sum of the result record of these rows is 40 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; chargers } ; result } ; 40 }, interpretation: select the rows whose opponent record fuzzily matches to chargers . the sum of the result record of these rows is 40 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; chargers } ; result } ; 40 }, interpretation: the average of the goals record of all rows is 113 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 113 }, interpretation: the average of the goals record of all rows is 113 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 113 }, interpretation: select the row whose position record of all rows is maximum . the competition record of this row is olympic games .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; position } ; competition } ; olympic games }, interpretation: select the row whose position record of all rows is maximum . the competition record of this row is olympic games .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; position } ; competition } ; olympic games }, interpretation: for the chassis records of all rows , most of them fuzzily match to march .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; march }, interpretation: for the chassis records of all rows , most of them fuzzily match to march .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; march }, interpretation: select the row whose year record of all rows is minimum . the title record of this row is face / off .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year } ; title } ; face / off }, interpretation: select the row whose year record of all rows is minimum . the title record of this row is face / off .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year } ; title } ; face / off }, interpretation: select the row whose silver record of all rows is 2nd maximum . the nation record of this row is italy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; italy }, interpretation: select the row whose silver record of all rows is 2nd maximum . the nation record of this row is italy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; italy }, interpretation: select the rows whose label record fuzzily matches to rock records . among these rows , select the rows whose release date record fuzzily matches to 2000 . there is only one such row in the table . the english title record of this unqiue row is courage .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; label ; rock records } ; release date ; 2000 } } ; eq { hop { filter_eq { filter_eq { all_rows ; label ; rock records } ; release date ; 2000 } ; english title } ; courage } }, interpretation: select the rows whose label record fuzzily matches to rock records . among these rows , select the rows whose release date record fuzzily matches to 2000 . there is only one such row in the table . the english title record of this unqiue row is courage .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; label ; rock records } ; release date ; 2000 } } ; eq { hop { filter_eq { filter_eq { all_rows ; label ; rock records } ; release date ; 2000 } ; english title } ; courage } }, interpretation: the average of the round record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; round } ; 2 }, interpretation: the average of the round record of all rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; round } ; 2 }, interpretation: select the row whose time record of all rows is 3rd minimum . the rowers record of this row is misaki kumakura , akiko iwamoto .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; rowers } ; misaki kumakura , akiko iwamoto }, interpretation: select the row whose time record of all rows is 3rd minimum . the rowers record of this row is misaki kumakura , akiko iwamoto .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; rowers } ; misaki kumakura , akiko iwamoto }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 4th minimum . the attendance record of this row is 45511 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 4 } ; attendance } ; 45511 }, interpretation: select the rows whose result record fuzzily matches to w . select the row whose date record of these rows is 4th minimum . the attendance record of this row is 45511 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; result ; w } ; date ; 4 } ; attendance } ; 45511 }, interpretation: for the year records of all rows , most of them are equal to 1996 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; year ; 1996 }, interpretation: for the year records of all rows , most of them are equal to 1996 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; year ; 1996 }, interpretation: select the rows whose directed by record fuzzily matches to tony goldwyn . there is only one such row in the table . the title record of this unqiue row is in which sam receives an unexpected visitor .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; tony goldwyn } } ; eq { hop { filter_eq { all_rows ; directed by ; tony goldwyn } ; title } ; in which sam receives an unexpected visitor } }, interpretation: select the rows whose directed by record fuzzily matches to tony goldwyn . there is only one such row in the table . the title record of this unqiue row is in which sam receives an unexpected visitor .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; tony goldwyn } } ; eq { hop { filter_eq { all_rows ; directed by ; tony goldwyn } ; title } ; in which sam receives an unexpected visitor } }, interpretation: for the party records of all rows , most of them fuzzily match to democratic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic }, interpretation: for the party records of all rows , most of them fuzzily match to democratic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; party ; democratic }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the week record of this row is 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; week } ; 15 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the week record of this row is 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; week } ; 15 }, interpretation: select the rows whose high rebounds record fuzzily matches to catchings . for the high points records of these rows , most of them fuzzily match to catchings .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; high rebounds ; catchings } ; high points ; catchings }, interpretation: select the rows whose high rebounds record fuzzily matches to catchings . for the high points records of these rows , most of them fuzzily match to catchings .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; high rebounds ; catchings } ; high points ; catchings }, interpretation: the sum of the number of families record of all rows is 30630 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; number of families } ; 30630 }, interpretation: the sum of the number of families record of all rows is 30630 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; number of families } ; 30630 }, interpretation: for the construction completed records of all rows , most of them fuzzily match to - .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; construction completed ; - }, interpretation: for the construction completed records of all rows , most of them fuzzily match to - .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; construction completed ; - }, interpretation: select the rows whose destination record fuzzily matches to chennai . among these rows , select the rows whose frequency record fuzzily matches to daily . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; destination ; chennai } ; frequency ; daily } } ; 4 }, interpretation: select the rows whose destination record fuzzily matches to chennai . among these rows , select the rows whose frequency record fuzzily matches to daily . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; destination ; chennai } ; frequency ; daily } } ; 4 }, interpretation: select the row whose season record of all rows is 1st maximum . the champion record of this row is fabio leimer ( racing engineering ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; season ; 1 } ; champion } ; fabio leimer ( racing engineering ) }, interpretation: select the row whose season record of all rows is 1st maximum . the champion record of this row is fabio leimer ( racing engineering ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; season ; 1 } ; champion } ; fabio leimer ( racing engineering ) }, interpretation: select the rows whose opponent record fuzzily matches to dallas cowboys . select the row whose date record of these rows is 2nd minimum . the attendance record of this row is 54714 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; dallas cowboys } ; date ; 2 } ; attendance } ; 54714 }, interpretation: select the rows whose opponent record fuzzily matches to dallas cowboys . select the row whose date record of these rows is 2nd minimum . the attendance record of this row is 54714 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; dallas cowboys } ; date ; 2 } ; attendance } ; 54714 }, interpretation: for the wins records of all rows , most of them are greater than or equal to 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; wins ; 3 }, interpretation: for the wins records of all rows , most of them are greater than or equal to 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; wins ; 3 }, interpretation: select the rows whose meet record fuzzily matches to 1979 pan american games . there is only one such row in the table . the event record of this unqiue row is 200 m freestyle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; meet ; 1979 pan american games } } ; eq { hop { filter_eq { all_rows ; meet ; 1979 pan american games } ; event } ; 200 m freestyle } }, interpretation: select the rows whose meet record fuzzily matches to 1979 pan american games . there is only one such row in the table . the event record of this unqiue row is 200 m freestyle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; meet ; 1979 pan american games } } ; eq { hop { filter_eq { all_rows ; meet ; 1979 pan american games } ; event } ; 200 m freestyle } }, interpretation: select the row whose competition record of all rows is 1st minimum . the date record of this row is 29 october 1975 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; competition ; 1 } ; date } ; 29 october 1975 }, interpretation: select the row whose competition record of all rows is 1st minimum . the date record of this row is 29 october 1975 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; competition ; 1 } ; date } ; 29 october 1975 }, interpretation: select the rows whose lec sport record fuzzily matches to men 's lacrosse . there is only one such row in the table . the institution record of this unqiue row is salem state university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lec sport ; men 's lacrosse } } ; eq { hop { filter_eq { all_rows ; lec sport ; men 's lacrosse } ; institution } ; salem state university } }, interpretation: select the rows whose lec sport record fuzzily matches to men 's lacrosse . there is only one such row in the table . the institution record of this unqiue row is salem state university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; lec sport ; men 's lacrosse } } ; eq { hop { filter_eq { all_rows ; lec sport ; men 's lacrosse } ; institution } ; salem state university } }, interpretation: select the rows whose venue record fuzzily matches to sfs . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; sfs } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to sfs . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; sfs } } ; 3 }, interpretation: the maximum length record of all rows is 136 ' . the name record of the row with superlative length record is fay no 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; length } ; 136 ' } ; eq { hop { argmax { all_rows ; length } ; name } ; fay no 4 } }, interpretation: the maximum length record of all rows is 136 ' . the name record of the row with superlative length record is fay no 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; length } ; 136 ' } ; eq { hop { argmax { all_rows ; length } ; name } ; fay no 4 } }, interpretation: select the rows whose title record fuzzily matches to joke overload . take the original air date record of this row . select the rows whose title record fuzzily matches to end of the middle . take the original air date record of this row . the second record is 7 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; title ; joke overload } ; original air date } ; hop { filter_eq { all_rows ; title ; end of the middle } ; original air date } } ; -7 }, interpretation: select the rows whose title record fuzzily matches to joke overload . take the original air date record of this row . select the rows whose title record fuzzily matches to end of the middle . take the original air date record of this row . the second record is 7 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; title ; joke overload } ; original air date } ; hop { filter_eq { all_rows ; title ; end of the middle } ; original air date } } ; -7 }, interpretation: select the row whose b score record of all rows is 1st maximum . the gymnast record of this row is ksenia semenova ( rus ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; b score ; 1 } ; gymnast } ; ksenia semenova ( rus ) }, interpretation: select the row whose b score record of all rows is 1st maximum . the gymnast record of this row is ksenia semenova ( rus ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; b score ; 1 } ; gymnast } ; ksenia semenova ( rus ) }, interpretation: select the rows whose artist record fuzzily matches to andreas lundstedt . take the points record of this row . select the rows whose artist record fuzzily matches to garmarna . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; andreas lundstedt } ; points } ; hop { filter_eq { all_rows ; artist ; garmarna } ; points } }, interpretation: select the rows whose artist record fuzzily matches to andreas lundstedt . take the points record of this row . select the rows whose artist record fuzzily matches to garmarna . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; andreas lundstedt } ; points } ; hop { filter_eq { all_rows ; artist ; garmarna } ; points } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose score record fuzzily matches to 282 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; united states } ; score ; 282 } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose score record fuzzily matches to 282 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; united states } ; score ; 282 } } ; 2 }, interpretation: select the row whose number record of all rows is 3rd maximum . the language record of this row is yiddish .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; number ; 3 } ; language } ; yiddish }, interpretation: select the row whose number record of all rows is 3rd maximum . the language record of this row is yiddish .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; number ; 3 } ; language } ; yiddish }, interpretation: for the run time records of all rows , most of them are greater than 4:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; run time ; 4:00 }, interpretation: for the run time records of all rows , most of them are greater than 4:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; run time ; 4:00 }, interpretation: select the row whose pieces record of all rows is 2nd maximum . the release record of this row is 1999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; pieces ; 2 } ; release } ; 1999 }, interpretation: select the row whose pieces record of all rows is 2nd maximum . the release record of this row is 1999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; pieces ; 2 } ; release } ; 1999 }, interpretation: select the rows whose original air date record fuzzily matches to february 2010 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; february 2010 } } ; 3 }, interpretation: select the rows whose original air date record fuzzily matches to february 2010 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; february 2010 } } ; 3 }, interpretation: select the rows whose year record is less than 1990 . among these rows , select the rows whose 250 cc record fuzzily matches to sito pons . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; year ; 1990 } ; 250 cc ; sito pons } } ; 3 }, interpretation: select the rows whose year record is less than 1990 . among these rows , select the rows whose 250 cc record fuzzily matches to sito pons . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; year ; 1990 } ; 250 cc ; sito pons } } ; 3 }, interpretation: the sum of the attendance record of all rows is 894532 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 894532 }, interpretation: the sum of the attendance record of all rows is 894532 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; attendance } ; 894532 }, interpretation: select the rows whose incumbent record fuzzily matches to chauncey w reed . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to sid simpson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; chauncey w reed } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; sid simpson } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to chauncey w reed . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to sid simpson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; chauncey w reed } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; sid simpson } ; first elected } }, interpretation: select the rows whose driver record fuzzily matches to timo glock . take the laps record of this row . select the rows whose driver record fuzzily matches to adrian sutil . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; timo glock } ; laps } ; hop { filter_eq { all_rows ; driver ; adrian sutil } ; laps } }, interpretation: select the rows whose driver record fuzzily matches to timo glock . take the laps record of this row . select the rows whose driver record fuzzily matches to adrian sutil . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; timo glock } ; laps } ; hop { filter_eq { all_rows ; driver ; adrian sutil } ; laps } }, interpretation: select the rows whose nationality record fuzzily matches to serbia . there is only one such row in the table . the player record of this unqiue row is aleksandar radojevi\u00e4 \u2021 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; serbia } } ; eq { hop { filter_eq { all_rows ; nationality ; serbia } ; player } ; aleksandar radojevi\u00e4 \u2021 } }, interpretation: select the rows whose nationality record fuzzily matches to serbia . there is only one such row in the table . the player record of this unqiue row is aleksandar radojevi\u00e4 \u2021 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; serbia } } ; eq { hop { filter_eq { all_rows ; nationality ; serbia } ; player } ; aleksandar radojevi\u00e4 \u2021 } }, interpretation: select the rows whose total ( kg ) record is greater than or equal to 330 . among these rows , select the rows whose snatch record is less than 150 . there is only one such row in the table . the name record of this unqiue row is juan quiterio ( dom ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_greater_eq { all_rows ; total ( kg ) ; 330 } ; snatch ; 150 } } ; eq { hop { filter_less { filter_greater_eq { all_rows ; total ( kg ) ; 330 } ; snatch ; 150 } ; name } ; juan quiterio ( dom ) } }, interpretation: select the rows whose total ( kg ) record is greater than or equal to 330 . among these rows , select the rows whose snatch record is less than 150 . there is only one such row in the table . the name record of this unqiue row is juan quiterio ( dom ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { filter_greater_eq { all_rows ; total ( kg ) ; 330 } ; snatch ; 150 } } ; eq { hop { filter_less { filter_greater_eq { all_rows ; total ( kg ) ; 330 } ; snatch ; 150 } ; name } ; juan quiterio ( dom ) } }, interpretation: the average of the televote / sms record of all rows is 8.33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; televote / sms } ; 8.33 }, interpretation: the average of the televote / sms record of all rows is 8.33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; televote / sms } ; 8.33 }, interpretation: select the row whose date record of all rows is maximum . the championship record of this row is newport , rhode island , us .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; championship } ; newport , rhode island , us }, interpretation: select the row whose date record of all rows is maximum . the championship record of this row is newport , rhode island , us .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; championship } ; newport , rhode island , us }, interpretation: select the rows whose crowd record is equal to 12500 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; crowd ; 12500 } } ; 2 }, interpretation: select the rows whose crowd record is equal to 12500 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; crowd ; 12500 } } ; 2 }, interpretation: select the row whose first elected record of all rows is 1st maximum . the incumbent record of this row is dale alford .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first elected ; 1 } ; incumbent } ; dale alford }, interpretation: select the row whose first elected record of all rows is 1st maximum . the incumbent record of this row is dale alford .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; first elected ; 1 } ; incumbent } ; dale alford }, interpretation: select the rows whose airport name record fuzzily matches to los angeles international airport . take the tonnes record of this row . select the rows whose airport name record fuzzily matches to john f kennedy international airport . take the tonnes record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; airport name ; los angeles international airport } ; tonnes } ; hop { filter_eq { all_rows ; airport name ; john f kennedy international airport } ; tonnes } }, interpretation: select the rows whose airport name record fuzzily matches to los angeles international airport . take the tonnes record of this row . select the rows whose airport name record fuzzily matches to john f kennedy international airport . take the tonnes record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; airport name ; los angeles international airport } ; tonnes } ; hop { filter_eq { all_rows ; airport name ; john f kennedy international airport } ; tonnes } }, interpretation: select the rows whose title record fuzzily matches to cry turmoil . take the originalairdate record of this row . select the rows whose title record fuzzily matches to the deadly pyramid . take the originalairdate record of this row . the first record is less than the second record . the originalairdate record of the first row is november 5 , 1994 . the originalairdate record of the second row is november 12 , 1994 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; title ; cry turmoil } ; originalairdate } ; hop { filter_eq { all_rows ; title ; the deadly pyramid } ; originalairdate } } ; and { eq { hop { filter_eq { all_rows ; title ; cry turmoil } ; originalairdate } ; november 5 , 1994 } ; eq { hop { filter_eq { all_rows ; title ; the deadly pyramid } ; originalairdate } ; november 12 , 1994 } } }, interpretation: select the rows whose title record fuzzily matches to cry turmoil . take the originalairdate record of this row . select the rows whose title record fuzzily matches to the deadly pyramid . take the originalairdate record of this row . the first record is less than the second record . the originalairdate record of the first row is november 5 , 1994 . the originalairdate record of the second row is november 12 , 1994 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; title ; cry turmoil } ; originalairdate } ; hop { filter_eq { all_rows ; title ; the deadly pyramid } ; originalairdate } } ; and { eq { hop { filter_eq { all_rows ; title ; cry turmoil } ; originalairdate } ; november 5 , 1994 } ; eq { hop { filter_eq { all_rows ; title ; the deadly pyramid } ; originalairdate } ; november 12 , 1994 } } }, interpretation: for the points records of all rows , most of them are greater than or equal to 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; points ; 3 }, interpretation: for the points records of all rows , most of them are greater than or equal to 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; points ; 3 }, interpretation: select the rows whose home record fuzzily matches to minnesota . among these rows , select the rows whose attendance record is greater than or equal to 19360 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_eq { all_rows ; home ; minnesota } ; attendance ; 19360 } } ; 2 }, interpretation: select the rows whose home record fuzzily matches to minnesota . among these rows , select the rows whose attendance record is greater than or equal to 19360 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_eq { all_rows ; home ; minnesota } ; attendance ; 19360 } } ; 2 }, interpretation: select the rows whose opponents record fuzzily matches to walsall . take the date record of this row . select the rows whose opponents record fuzzily matches to sheffield wednesday . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponents ; walsall } ; date } ; hop { filter_eq { all_rows ; opponents ; sheffield wednesday } ; date } }, interpretation: select the rows whose opponents record fuzzily matches to walsall . take the date record of this row . select the rows whose opponents record fuzzily matches to sheffield wednesday . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponents ; walsall } ; date } ; hop { filter_eq { all_rows ; opponents ; sheffield wednesday } ; date } }, interpretation: for the snatch records of all rows , most of them are greater than or equal to 140 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; snatch ; 140 }, interpretation: for the snatch records of all rows , most of them are greater than or equal to 140 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; snatch ; 140 }, interpretation: select the row whose total record of all rows is maximum . the 1961 democratic primary record of this row is robert f wagner , jr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; 1961 democratic primary } ; robert f wagner , jr }, interpretation: select the row whose total record of all rows is maximum . the 1961 democratic primary record of this row is robert f wagner , jr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; 1961 democratic primary } ; robert f wagner , jr }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose written by record fuzzily matches to stan berkowitz . there is only one such row in the table . the title record of this unqiue row is simple .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; stan berkowitz } } ; eq { hop { filter_eq { all_rows ; written by ; stan berkowitz } ; title } ; simple } }, interpretation: select the rows whose written by record fuzzily matches to stan berkowitz . there is only one such row in the table . the title record of this unqiue row is simple .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; stan berkowitz } } ; eq { hop { filter_eq { all_rows ; written by ; stan berkowitz } ; title } ; simple } }, interpretation: select the rows whose points record is equal to 17 . there is only one such row in the table . the team record of this unqiue row is ant\u00e1rtica .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 17 } } ; eq { hop { filter_eq { all_rows ; points ; 17 } ; team } ; ant\u00e1rtica } }, interpretation: select the rows whose points record is equal to 17 . there is only one such row in the table . the team record of this unqiue row is ant\u00e1rtica .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; points ; 17 } } ; eq { hop { filter_eq { all_rows ; points ; 17 } ; team } ; ant\u00e1rtica } }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 2 }, interpretation: select the rows whose day power ( w ) record is equal to 1000 . select the row whose freq record of these rows is minimum . the owner record of this row is moody bible institute .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; day power ( w ) ; 1000 } ; freq } ; owner } ; moody bible institute }, interpretation: select the rows whose day power ( w ) record is equal to 1000 . select the row whose freq record of these rows is minimum . the owner record of this row is moody bible institute .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; day power ( w ) ; 1000 } ; freq } ; owner } ; moody bible institute }, interpretation: select the row whose international tourism expenditure ( 2012 ) record of all rows is 1st maximum . the country record of this row is china .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; international tourism expenditure ( 2012 ) ; 1 } ; country } ; china }, interpretation: select the row whose international tourism expenditure ( 2012 ) record of all rows is 1st maximum . the country record of this row is china .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; international tourism expenditure ( 2012 ) ; 1 } ; country } ; china }, interpretation: the sum of the enrollment record of all rows is 6339 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 6339 }, interpretation: the sum of the enrollment record of all rows is 6339 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 6339 }, interpretation: the sum of the against record of all rows is 49 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 49 }, interpretation: the sum of the against record of all rows is 49 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; against } ; 49 }, interpretation: select the rows whose goals record is equal to 33 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; goals ; 33 } } ; 2 }, interpretation: select the rows whose goals record is equal to 33 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; goals ; 33 } } ; 2 }, interpretation: select the rows whose institution record fuzzily matches to boise state university . take the enrollment record of this row . select the rows whose institution record fuzzily matches to california state university , bakersfield . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; institution ; boise state university } ; enrollment } ; hop { filter_eq { all_rows ; institution ; california state university , bakersfield } ; enrollment } }, interpretation: select the rows whose institution record fuzzily matches to boise state university . take the enrollment record of this row . select the rows whose institution record fuzzily matches to california state university , bakersfield . take the enrollment record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; institution ; boise state university } ; enrollment } ; hop { filter_eq { all_rows ; institution ; california state university , bakersfield } ; enrollment } }, interpretation: select the rows whose school record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; school } } ; 9 }, interpretation: select the rows whose school record is arbitrary . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; school } } ; 9 }, interpretation: select the row whose team number record of all rows is 3rd maximum . the team name record of this row is sap g33k .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; team number ; 3 } ; team name } ; sap g33k }, interpretation: select the row whose team number record of all rows is 3rd maximum . the team name record of this row is sap g33k .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; team number ; 3 } ; team name } ; sap g33k }, interpretation: select the rows whose category record fuzzily matches to newcomer . there is only one such row in the table . the year record of this unqiue row is 2008 . the result record of this unqiue row is won .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; category ; newcomer } } ; and { eq { hop { filter_eq { all_rows ; category ; newcomer } ; year } ; 2008 } ; eq { hop { filter_eq { all_rows ; category ; newcomer } ; result } ; won } } }, interpretation: select the rows whose category record fuzzily matches to newcomer . there is only one such row in the table . the year record of this unqiue row is 2008 . the result record of this unqiue row is won .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; category ; newcomer } } ; and { eq { hop { filter_eq { all_rows ; category ; newcomer } ; year } ; 2008 } ; eq { hop { filter_eq { all_rows ; category ; newcomer } ; result } ; won } } }, interpretation: select the rows whose gpu frequency record fuzzily matches to 320 mhz . for the release price ( usd ) records of these rows , all of them are greater than 60 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_eq { all_rows ; gpu frequency ; 320 mhz } ; release price ( usd ) ; 60 }, interpretation: select the rows whose gpu frequency record fuzzily matches to 320 mhz . for the release price ( usd ) records of these rows , all of them are greater than 60 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_eq { all_rows ; gpu frequency ; 320 mhz } ; release price ( usd ) ; 60 }, interpretation: for the loser records of all rows , most of them fuzzily match to kansas city chiefs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; loser ; kansas city chiefs }, interpretation: for the loser records of all rows , most of them fuzzily match to kansas city chiefs .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; loser ; kansas city chiefs }, interpretation: select the rows whose segment c record fuzzily matches to part . there is only one such row in the table . the episode record of this unqiue row is 259 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment c ; part } } ; eq { hop { filter_eq { all_rows ; segment c ; part } ; episode } ; 259 } }, interpretation: select the rows whose segment c record fuzzily matches to part . there is only one such row in the table . the episode record of this unqiue row is 259 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment c ; part } } ; eq { hop { filter_eq { all_rows ; segment c ; part } ; episode } ; 259 } }, interpretation: select the rows whose home team score record is less than 14.0 . among these rows , select the rows whose date record fuzzily matches to 28 april 1973 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; home team score ; 14.0 } ; date ; 28 april 1973 } } ; 2 }, interpretation: select the rows whose home team score record is less than 14.0 . among these rows , select the rows whose date record fuzzily matches to 28 april 1973 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; home team score ; 14.0 } ; date ; 28 april 1973 } } ; 2 }, interpretation: select the rows whose pos record fuzzily matches to qb . the average of the contract record of these rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; pos ; qb } ; contract } ; 2 }, interpretation: select the rows whose pos record fuzzily matches to qb . the average of the contract record of these rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; pos ; qb } ; contract } ; 2 }, interpretation: select the rows whose call sign record fuzzily matches to w269ax . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to w230av . take the frequency mhz record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; call sign ; w269ax } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; w230av } ; frequency mhz } }, interpretation: select the rows whose call sign record fuzzily matches to w269ax . take the frequency mhz record of this row . select the rows whose call sign record fuzzily matches to w230av . take the frequency mhz record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; call sign ; w269ax } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; w230av } ; frequency mhz } }, interpretation: select the rows whose date record fuzzily matches to 12 june 1937 . among these rows , select the rows whose crowd record is greater than 20000 . there is only one such row in the table . the home team record of this unqiue row is richmond . the away team record of this unqiue row is carlton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd ; 20000 } } ; and { eq { hop { filter_greater { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd ; 20000 } ; home team } ; richmond } ; eq { hop { filter_greater { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd ; 20000 } ; away team } ; carlton } } }, interpretation: select the rows whose date record fuzzily matches to 12 june 1937 . among these rows , select the rows whose crowd record is greater than 20000 . there is only one such row in the table . the home team record of this unqiue row is richmond . the away team record of this unqiue row is carlton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd ; 20000 } } ; and { eq { hop { filter_greater { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd ; 20000 } ; home team } ; richmond } ; eq { hop { filter_greater { filter_eq { all_rows ; date ; 12 june 1937 } ; crowd ; 20000 } ; away team } ; carlton } } }, interpretation: select the rows whose directed by record fuzzily matches to alison maclean . there is only one such row in the table . the title record of this unqiue row is the river .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; alison maclean } } ; eq { hop { filter_eq { all_rows ; directed by ; alison maclean } ; title } ; the river } }, interpretation: select the rows whose directed by record fuzzily matches to alison maclean . there is only one such row in the table . the title record of this unqiue row is the river .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; alison maclean } } ; eq { hop { filter_eq { all_rows ; directed by ; alison maclean } ; title } ; the river } }, interpretation: select the rows whose l record is equal to 0 . there is only one such row in the table . the skip record of this unqiue row is kevin martin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; l ; 0 } } ; eq { hop { filter_eq { all_rows ; l ; 0 } ; skip } ; kevin martin } }, interpretation: select the rows whose l record is equal to 0 . there is only one such row in the table . the skip record of this unqiue row is kevin martin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; l ; 0 } } ; eq { hop { filter_eq { all_rows ; l ; 0 } ; skip } ; kevin martin } }, interpretation: the sum of the enrollment record of all rows is 11100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 11100 }, interpretation: the sum of the enrollment record of all rows is 11100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; enrollment } ; 11100 }, interpretation: select the rows whose competition record fuzzily matches to 1978 merdeka cup . take the score record of this row . select the rows whose competition record fuzzily matches to 1986 fifa world cup . take the score record of this row . the first record fuzzily matches to the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; competition ; 1978 merdeka cup } ; score } ; hop { filter_eq { all_rows ; competition ; 1986 fifa world cup } ; score } }, interpretation: select the rows whose competition record fuzzily matches to 1978 merdeka cup . take the score record of this row . select the rows whose competition record fuzzily matches to 1986 fifa world cup . take the score record of this row . the first record fuzzily matches to the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; competition ; 1978 merdeka cup } ; score } ; hop { filter_eq { all_rows ; competition ; 1986 fifa world cup } ; score } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose total record is greater than or equal to 300 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_eq { all_rows ; country ; united states } ; total ; 300 } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose total record is greater than or equal to 300 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { filter_eq { all_rows ; country ; united states } ; total ; 300 } } ; 3 }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is manzini wanderers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; manzini wanderers }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is manzini wanderers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; manzini wanderers }, interpretation: for the location : records of all rows , most of them fuzzily match to nashville , united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location : ; nashville , united states }, interpretation: for the location : records of all rows , most of them fuzzily match to nashville , united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location : ; nashville , united states }, interpretation: the average of the candidates record of all rows is 65 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 65 % }, interpretation: the average of the candidates record of all rows is 65 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 65 % }, interpretation: select the rows whose pilot record fuzzily matches to and . there is only one such row in the table . the vehicle record of this unqiue row is schempp - hirth nimbus - 4dm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pilot ; and } } ; eq { hop { filter_eq { all_rows ; pilot ; and } ; vehicle } ; schempp - hirth nimbus - 4dm } }, interpretation: select the rows whose pilot record fuzzily matches to and . there is only one such row in the table . the vehicle record of this unqiue row is schempp - hirth nimbus - 4dm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pilot ; and } } ; eq { hop { filter_eq { all_rows ; pilot ; and } ; vehicle } ; schempp - hirth nimbus - 4dm } }, interpretation: select the row whose rnag ( mhz ) record of all rows is maximum . the transmitter record of this row is clermont carn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; rnag ( mhz ) } ; transmitter } ; clermont carn }, interpretation: select the row whose rnag ( mhz ) record of all rows is maximum . the transmitter record of this row is clermont carn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; rnag ( mhz ) } ; transmitter } ; clermont carn }, interpretation: the average of the oricon peak record of all rows is 78.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; oricon peak } ; 78.2 }, interpretation: the average of the oricon peak record of all rows is 78.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; oricon peak } ; 78.2 }, interpretation: for the time records of all rows , most of them fuzzily match to 21 . .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; time ; 21 . }, interpretation: for the time records of all rows , most of them fuzzily match to 21 . .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; time ; 21 . }, interpretation: select the rows whose color record fuzzily matches to green and light colors . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; color ; green and light colors } } ; 2 }, interpretation: select the rows whose color record fuzzily matches to green and light colors . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; color ; green and light colors } } ; 2 }, interpretation: select the row whose launched record of all rows is minimum . the ship name record of this row is brp pangasinan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; launched } ; ship name } ; brp pangasinan }, interpretation: select the row whose launched record of all rows is minimum . the ship name record of this row is brp pangasinan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; launched } ; ship name } ; brp pangasinan }, interpretation: the maximum crowd record of all rows is 29000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; crowd } ; 29000 }, interpretation: the maximum crowd record of all rows is 29000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; crowd } ; 29000 }, interpretation: select the row whose casualties record of all rows is maximum . the date record of this row is 2009 - 09 - 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; casualties } ; date } ; 2009 - 09 - 16 }, interpretation: select the row whose casualties record of all rows is maximum . the date record of this row is 2009 - 09 - 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; casualties } ; date } ; 2009 - 09 - 16 }, interpretation: select the row whose % of votes khuzestan record of all rows is 2nd maximum . the candidates record of this row is akbar hashemi rafsanjani .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; % of votes khuzestan ; 2 } ; candidates } ; akbar hashemi rafsanjani }, interpretation: select the row whose % of votes khuzestan record of all rows is 2nd maximum . the candidates record of this row is akbar hashemi rafsanjani .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; % of votes khuzestan ; 2 } ; candidates } ; akbar hashemi rafsanjani }, interpretation: for the draws records of all rows , most of them are greater than or equal to 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; draws ; 5 }, interpretation: for the draws records of all rows , most of them are greater than or equal to 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; draws ; 5 }, interpretation: select the rows whose branding record fuzzily matches to radio victoria . take the frequency record of this row . select the rows whose branding record fuzzily matches to kool fm . take the frequency record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; branding ; radio victoria } ; frequency } ; hop { filter_eq { all_rows ; branding ; kool fm } ; frequency } }, interpretation: select the rows whose branding record fuzzily matches to radio victoria . take the frequency record of this row . select the rows whose branding record fuzzily matches to kool fm . take the frequency record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; branding ; radio victoria } ; frequency } ; hop { filter_eq { all_rows ; branding ; kool fm } ; frequency } }, interpretation: for the time records of all rows , most of them fuzzily match to 2:15 . .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; time ; 2:15 . }, interpretation: for the time records of all rows , most of them fuzzily match to 2:15 . .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; time ; 2:15 . }, interpretation: the maximum year record of all rows is 2006 . the label record of the row with superlative year record is sony japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; year } ; 2006 } ; eq { hop { argmax { all_rows ; year } ; label } ; sony japan } }, interpretation: the maximum year record of all rows is 2006 . the label record of the row with superlative year record is sony japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; year } ; 2006 } ; eq { hop { argmax { all_rows ; year } ; label } ; sony japan } }, interpretation: the average of the points record of all rows is 68.7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 68.7 }, interpretation: the average of the points record of all rows is 68.7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 68.7 }, interpretation: select the rows whose location attendance record fuzzily matches to chicago stadium . there is only one such row in the table . the date record of this unqiue row is january 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location attendance ; chicago stadium } } ; eq { hop { filter_eq { all_rows ; location attendance ; chicago stadium } ; date } ; january 11 } }, interpretation: select the rows whose location attendance record fuzzily matches to chicago stadium . there is only one such row in the table . the date record of this unqiue row is january 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location attendance ; chicago stadium } } ; eq { hop { filter_eq { all_rows ; location attendance ; chicago stadium } ; date } ; january 11 } }, interpretation: select the row whose date record of all rows is 9th minimum . the competition record of this row is friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 9 } ; competition } ; friendly }, interpretation: select the row whose date record of all rows is 9th minimum . the competition record of this row is friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 9 } ; competition } ; friendly }, interpretation: select the row whose number of votes record of all rows is maximum . the election record of this row is 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number of votes } ; election } ; 2012 }, interpretation: select the row whose number of votes record of all rows is maximum . the election record of this row is 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number of votes } ; election } ; 2012 }, interpretation: select the rows whose first place record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first place ; 0 } } ; 3 }, interpretation: select the rows whose first place record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first place ; 0 } } ; 3 }, interpretation: for the matches records of all rows , most of them are less than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; matches ; 100 }, interpretation: for the matches records of all rows , most of them are less than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; matches ; 100 }, interpretation: select the rows whose award record fuzzily matches to laurence olivier award . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; award ; laurence olivier award } } ; 7 }, interpretation: select the rows whose award record fuzzily matches to laurence olivier award . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; award ; laurence olivier award } } ; 7 }, interpretation: select the rows whose final position / round record does not match to runner-up . there is only one such row in the table . the competition record of this unqiue row is fa cup .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; final position / round ; runner-up } } ; eq { hop { filter_not_eq { all_rows ; final position / round ; runner-up } ; competition } ; fa cup } }, interpretation: select the rows whose final position / round record does not match to runner-up . there is only one such row in the table . the competition record of this unqiue row is fa cup .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; final position / round ; runner-up } } ; eq { hop { filter_not_eq { all_rows ; final position / round ; runner-up } ; competition } ; fa cup } }, interpretation: select the rows whose result record fuzzily matches to w . the 2nd minimum date record of these rows is november 28 , 1999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; result ; w } ; date ; 2 } ; november 28 , 1999 }, interpretation: select the rows whose result record fuzzily matches to w . the 2nd minimum date record of these rows is november 28 , 1999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; result ; w } ; date ; 2 } ; november 28 , 1999 }, interpretation: select the rows whose event record fuzzily matches to 50 m . the average of the time record of these rows is 24.41 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; event ; 50 m } ; time } ; 24.41 }, interpretation: select the rows whose event record fuzzily matches to 50 m . the average of the time record of these rows is 24.41 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; event ; 50 m } ; time } ; 24.41 }, interpretation: select the rows whose game record fuzzily matches to 3 . take the time record of this row . select the rows whose game record fuzzily matches to 4 . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; game ; 3 } ; time } ; hop { filter_eq { all_rows ; game ; 4 } ; time } }, interpretation: select the rows whose game record fuzzily matches to 3 . take the time record of this row . select the rows whose game record fuzzily matches to 4 . take the time record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; game ; 3 } ; time } ; hop { filter_eq { all_rows ; game ; 4 } ; time } }, interpretation: select the row whose difference record of all rows is 2nd maximum . the team record of this row is palmeiras .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; difference ; 2 } ; team } ; palmeiras }, interpretation: select the row whose difference record of all rows is 2nd maximum . the team record of this row is palmeiras .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; difference ; 2 } ; team } ; palmeiras }, interpretation: the average of the capacity record of all rows is 1732 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 1732 }, interpretation: the average of the capacity record of all rows is 1732 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 1732 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 9 }, interpretation: select the rows whose player record is arbitrary . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; player } } ; 9 }, interpretation: for the rare metals records of all rows , most of them fuzzily match to no .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; rare metals ; no }, interpretation: for the rare metals records of all rows , most of them fuzzily match to no .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; rare metals ; no }, interpretation: select the rows whose season record fuzzily matches to 2012 . take the season record of this row . select the rows whose season record fuzzily matches to 2011 . take the season record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2012 } ; season } ; hop { filter_eq { all_rows ; season ; 2011 } ; season } }, interpretation: select the rows whose season record fuzzily matches to 2012 . take the season record of this row . select the rows whose season record fuzzily matches to 2011 . take the season record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2012 } ; season } ; hop { filter_eq { all_rows ; season ; 2011 } ; season } }, interpretation: select the rows whose result record fuzzily matches to draw . there is only one such row in the table . the date record of this unqiue row is 8 september 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; draw } } ; eq { hop { filter_eq { all_rows ; result ; draw } ; date } ; 8 september 2007 } }, interpretation: select the rows whose result record fuzzily matches to draw . there is only one such row in the table . the date record of this unqiue row is 8 september 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; draw } } ; eq { hop { filter_eq { all_rows ; result ; draw } ; date } ; 8 september 2007 } }, interpretation: select the rows whose chassis record fuzzily matches to alfa romeo . there is only one such row in the table . the year record of this unqiue row is 1983 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; alfa romeo } } ; eq { hop { filter_eq { all_rows ; chassis ; alfa romeo } ; year } ; 1983 } }, interpretation: select the rows whose chassis record fuzzily matches to alfa romeo . there is only one such row in the table . the year record of this unqiue row is 1983 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; alfa romeo } } ; eq { hop { filter_eq { all_rows ; chassis ; alfa romeo } ; year } ; 1983 } }, interpretation: select the rows whose races record is equal to 16 . there is only one such row in the table . the year record of this unqiue row is 2012 . the riders record of this unqiue row is alex de angelis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; races ; 16 } } ; and { eq { hop { filter_eq { all_rows ; races ; 16 } ; year } ; 2012 } ; eq { hop { filter_eq { all_rows ; races ; 16 } ; riders } ; alex de angelis } } }, interpretation: select the rows whose races record is equal to 16 . there is only one such row in the table . the year record of this unqiue row is 2012 . the riders record of this unqiue row is alex de angelis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; races ; 16 } } ; and { eq { hop { filter_eq { all_rows ; races ; 16 } ; year } ; 2012 } ; eq { hop { filter_eq { all_rows ; races ; 16 } ; riders } ; alex de angelis } } }, interpretation: select the row whose run time record of all rows is 2nd maximum . the episode number record of this row is 311 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; run time ; 2 } ; episode number } ; 311 }, interpretation: select the row whose run time record of all rows is 2nd maximum . the episode number record of this row is 311 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; run time ; 2 } ; episode number } ; 311 }, interpretation: select the row whose date record of all rows is 2nd minimum . the tournament record of this row is moulins .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; tournament } ; moulins }, interpretation: select the row whose date record of all rows is 2nd minimum . the tournament record of this row is moulins .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; tournament } ; moulins }, interpretation: for the leading scorer records of all rows , most of them fuzzily match to lebron james .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; leading scorer ; lebron james }, interpretation: for the leading scorer records of all rows , most of them fuzzily match to lebron james .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; leading scorer ; lebron james }, interpretation: select the row whose duration ( days ) record of all rows is maximum . the expedition record of this row is salyut 7 - eo - 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration ( days ) } ; expedition } ; salyut 7 - eo - 3 }, interpretation: select the row whose duration ( days ) record of all rows is maximum . the expedition record of this row is salyut 7 - eo - 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration ( days ) } ; expedition } ; salyut 7 - eo - 3 }, interpretation: select the rows whose event record fuzzily matches to medley . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; event ; medley } }, interpretation: select the rows whose event record fuzzily matches to medley . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; event ; medley } }, interpretation: for the country of origin records of all rows , all of them fuzzily match to philippines .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country of origin ; philippines }, interpretation: for the country of origin records of all rows , all of them fuzzily match to philippines .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country of origin ; philippines }, interpretation: select the rows whose method record fuzzily matches to decision . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; method ; decision } }, interpretation: select the rows whose method record fuzzily matches to decision . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; method ; decision } }, interpretation: for the date records of all rows , most of them are greater than 1930 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; date ; 1930 }, interpretation: for the date records of all rows , most of them are greater than 1930 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; date ; 1930 }, interpretation: select the rows whose opponent record fuzzily matches to mark kerr . take the round record of this row . select the rows whose opponent record fuzzily matches to dieusel berto . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; mark kerr } ; round } ; hop { filter_eq { all_rows ; opponent ; dieusel berto } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to mark kerr . take the round record of this row . select the rows whose opponent record fuzzily matches to dieusel berto . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; mark kerr } ; round } ; hop { filter_eq { all_rows ; opponent ; dieusel berto } ; round } }, interpretation: for the location records of all rows , most of them fuzzily match to bayam\u00f3n , puerto rico .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; bayam\u00f3n , puerto rico }, interpretation: for the location records of all rows , most of them fuzzily match to bayam\u00f3n , puerto rico .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; bayam\u00f3n , puerto rico }, interpretation: select the rows whose season record fuzzily matches to 2003 / 04 . take the goals record of this row . select the rows whose season record fuzzily matches to 2004 / 05 . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2003 / 04 } ; goals } ; hop { filter_eq { all_rows ; season ; 2004 / 05 } ; goals } }, interpretation: select the rows whose season record fuzzily matches to 2003 / 04 . take the goals record of this row . select the rows whose season record fuzzily matches to 2004 / 05 . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 2003 / 04 } ; goals } ; hop { filter_eq { all_rows ; season ; 2004 / 05 } ; goals } }, interpretation: select the rows whose partner record fuzzily matches to tami whitlinger - jones . select the row whose date record of these rows is minimum . the surface record of this row is carpet .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; partner ; tami whitlinger - jones } ; date } ; surface } ; carpet }, interpretation: select the rows whose partner record fuzzily matches to tami whitlinger - jones . select the row whose date record of these rows is minimum . the surface record of this row is carpet .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; partner ; tami whitlinger - jones } ; date } ; surface } ; carpet }, interpretation: select the rows whose opponents record fuzzily matches to palam\u00f3s . select the row whose kick off record of these rows is minimum . the referee record of this row is daud\u00e9n ib\u00e1\u00f1ez .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; opponents ; palam\u00f3s } ; kick off } ; referee } ; daud\u00e9n ib\u00e1\u00f1ez }, interpretation: select the rows whose opponents record fuzzily matches to palam\u00f3s . select the row whose kick off record of these rows is minimum . the referee record of this row is daud\u00e9n ib\u00e1\u00f1ez .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; opponents ; palam\u00f3s } ; kick off } ; referee } ; daud\u00e9n ib\u00e1\u00f1ez }, interpretation: select the rows whose film record fuzzily matches to 8 women ( 8 femmes ) . take the year record of this row . select the rows whose film record fuzzily matches to the piano teacher ( la pianiste ) . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; film ; 8 women ( 8 femmes ) } ; year } ; hop { filter_eq { all_rows ; film ; the piano teacher ( la pianiste ) } ; year } }, interpretation: select the rows whose film record fuzzily matches to 8 women ( 8 femmes ) . take the year record of this row . select the rows whose film record fuzzily matches to the piano teacher ( la pianiste ) . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; film ; 8 women ( 8 femmes ) } ; year } ; hop { filter_eq { all_rows ; film ; the piano teacher ( la pianiste ) } ; year } }, interpretation: for the jockey records of all rows , most of them fuzzily match to c newitt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; jockey ; c newitt }, interpretation: for the jockey records of all rows , most of them fuzzily match to c newitt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; jockey ; c newitt }, interpretation: select the rows whose note record fuzzily matches to reportedly still active as of 2009 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; note ; reportedly still active as of 2009 } } ; 4 }, interpretation: select the rows whose note record fuzzily matches to reportedly still active as of 2009 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; note ; reportedly still active as of 2009 } } ; 4 }, interpretation: the average of the draws record of all rows is 10.9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; draws } ; 10.9 }, interpretation: the average of the draws record of all rows is 10.9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; draws } ; 10.9 }, interpretation: for the ihsaa class records of all rows , all of them fuzzily match to 4a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; ihsaa class ; 4a }, interpretation: for the ihsaa class records of all rows , all of them fuzzily match to 4a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; ihsaa class ; 4a }, interpretation: select the row whose podiums record of all rows is maximum . the season record of this row is 2002 - 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; podiums } ; season } ; 2002 - 2008 }, interpretation: select the row whose podiums record of all rows is maximum . the season record of this row is 2002 - 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; podiums } ; season } ; 2002 - 2008 }, interpretation: select the rows whose operating systems record fuzzily matches to linux . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; operating systems ; linux } } ; 3 }, interpretation: select the rows whose operating systems record fuzzily matches to linux . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; operating systems ; linux } } ; 3 }, interpretation: for the league records of all rows , most of them fuzzily match to aviva premiership .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; league ; aviva premiership }, interpretation: for the league records of all rows , most of them fuzzily match to aviva premiership .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; league ; aviva premiership }, interpretation: select the rows whose result record fuzzily matches to w . among these rows , select the rows whose opponent record fuzzily matches to san diego chargers . there is only one such row in the table . the date record of this unqiue row is september 17 , 1972 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; result ; w } ; opponent ; san diego chargers } } ; eq { hop { filter_eq { filter_eq { all_rows ; result ; w } ; opponent ; san diego chargers } ; date } ; september 17 , 1972 } }, interpretation: select the rows whose result record fuzzily matches to w . among these rows , select the rows whose opponent record fuzzily matches to san diego chargers . there is only one such row in the table . the date record of this unqiue row is september 17 , 1972 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; result ; w } ; opponent ; san diego chargers } } ; eq { hop { filter_eq { filter_eq { all_rows ; result ; w } ; opponent ; san diego chargers } ; date } ; september 17 , 1972 } }, interpretation: select the row whose released record of all rows is 2nd minimum . the codename record of this row is sb700 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; released ; 2 } ; codename } ; sb700 }, interpretation: select the row whose released record of all rows is 2nd minimum . the codename record of this row is sb700 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; released ; 2 } ; codename } ; sb700 }, interpretation: select the rows whose city record fuzzily matches to barisal . take the country record of this row . select the rows whose city record fuzzily matches to chittagong . take the country record of this row . the first record fuzzily matches to the second record . the country record of the first row is bangladesh . the country record of the second row is bangladesh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; city ; barisal } ; country } ; hop { filter_eq { all_rows ; city ; chittagong } ; country } } ; and { eq { hop { filter_eq { all_rows ; city ; barisal } ; country } ; bangladesh } ; eq { hop { filter_eq { all_rows ; city ; chittagong } ; country } ; bangladesh } } }, interpretation: select the rows whose city record fuzzily matches to barisal . take the country record of this row . select the rows whose city record fuzzily matches to chittagong . take the country record of this row . the first record fuzzily matches to the second record . the country record of the first row is bangladesh . the country record of the second row is bangladesh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; city ; barisal } ; country } ; hop { filter_eq { all_rows ; city ; chittagong } ; country } } ; and { eq { hop { filter_eq { all_rows ; city ; barisal } ; country } ; bangladesh } ; eq { hop { filter_eq { all_rows ; city ; chittagong } ; country } ; bangladesh } } }, interpretation: select the rows whose difference record is equal to 6 . there is only one such row in the table . the team record of this unqiue row is santos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; difference ; 6 } } ; eq { hop { filter_eq { all_rows ; difference ; 6 } ; team } ; santos } }, interpretation: select the rows whose difference record is equal to 6 . there is only one such row in the table . the team record of this unqiue row is santos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; difference ; 6 } } ; eq { hop { filter_eq { all_rows ; difference ; 6 } ; team } ; santos } }, interpretation: select the rows whose opponent record fuzzily matches to detroit lions . take the date record of this row . select the rows whose opponent record fuzzily matches to los angeles raiders . take the date record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; detroit lions } ; date } ; hop { filter_eq { all_rows ; opponent ; los angeles raiders } ; date } } ; -7 days }, interpretation: select the rows whose opponent record fuzzily matches to detroit lions . take the date record of this row . select the rows whose opponent record fuzzily matches to los angeles raiders . take the date record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; detroit lions } ; date } ; hop { filter_eq { all_rows ; opponent ; los angeles raiders } ; date } } ; -7 days }, interpretation: select the rows whose runner ( s ) - up record fuzzily matches to phil mickelson . take the margin of victory record of this row . select the rows whose runner ( s ) - up record fuzzily matches to dudley hart . take the margin of victory record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; runner ( s ) - up ; phil mickelson } ; margin of victory } ; hop { filter_eq { all_rows ; runner ( s ) - up ; dudley hart } ; margin of victory } }, interpretation: select the rows whose runner ( s ) - up record fuzzily matches to phil mickelson . take the margin of victory record of this row . select the rows whose runner ( s ) - up record fuzzily matches to dudley hart . take the margin of victory record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; runner ( s ) - up ; phil mickelson } ; margin of victory } ; hop { filter_eq { all_rows ; runner ( s ) - up ; dudley hart } ; margin of victory } }, interpretation: select the rows whose partner record fuzzily matches to alexander krasnorutskiy . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; alexander krasnorutskiy } } ; 5 }, interpretation: select the rows whose partner record fuzzily matches to alexander krasnorutskiy . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; alexander krasnorutskiy } } ; 5 }, interpretation: select the rows whose outcome record fuzzily matches to runner - up . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; outcome ; runner - up } }, interpretation: select the rows whose outcome record fuzzily matches to runner - up . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; outcome ; runner - up } }, interpretation: select the rows whose state record fuzzily matches to new south wales . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; state ; new south wales } } ; 4 }, interpretation: select the rows whose state record fuzzily matches to new south wales . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; state ; new south wales } } ; 4 }, interpretation: select the rows whose name record fuzzily matches to jeff thomson . take the matches record of this row . select the rows whose name record fuzzily matches to mitchell johnson . take the matches record of this row . the first record is 1 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; jeff thomson } ; matches } ; hop { filter_eq { all_rows ; name ; mitchell johnson } ; matches } } ; 1 }, interpretation: select the rows whose name record fuzzily matches to jeff thomson . take the matches record of this row . select the rows whose name record fuzzily matches to mitchell johnson . take the matches record of this row . the first record is 1 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; jeff thomson } ; matches } ; hop { filter_eq { all_rows ; name ; mitchell johnson } ; matches } } ; 1 }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is canon yaound\u00e9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; canon yaound\u00e9 }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is canon yaound\u00e9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; agg } ; team 1 } ; canon yaound\u00e9 }, interpretation: select the row whose year ( s ) retired record of all rows is maximum . the class record of this row is a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year ( s ) retired } ; class } ; a }, interpretation: select the row whose year ( s ) retired record of all rows is maximum . the class record of this row is a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; year ( s ) retired } ; class } ; a }, interpretation: the average of the points record of all rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 3 }, interpretation: the average of the points record of all rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 3 }, interpretation: select the rows whose player record fuzzily matches to todd van poppel . take the year record of this row . select the rows whose player record fuzzily matches to doug million . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; todd van poppel } ; year } ; hop { filter_eq { all_rows ; player ; doug million } ; year } }, interpretation: select the rows whose player record fuzzily matches to todd van poppel . take the year record of this row . select the rows whose player record fuzzily matches to doug million . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; todd van poppel } ; year } ; hop { filter_eq { all_rows ; player ; doug million } ; year } }, interpretation: select the rows whose team record fuzzily matches to donlavey . there is only one such row in the table . the year record of this unqiue row is 1990 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; donlavey } } ; eq { hop { filter_eq { all_rows ; team ; donlavey } ; year } ; 1990 } }, interpretation: select the rows whose team record fuzzily matches to donlavey . there is only one such row in the table . the year record of this unqiue row is 1990 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; donlavey } } ; eq { hop { filter_eq { all_rows ; team ; donlavey } ; year } ; 1990 } }, interpretation: select the rows whose date record fuzzily matches to september 6 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 22 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; september 6 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 22 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to september 6 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 22 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; september 6 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 22 } ; attendance } }, interpretation: select the rows whose surface record fuzzily matches to clay . among these rows , select the rows whose week record fuzzily matches to may . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; surface ; clay } ; week ; may } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to clay . among these rows , select the rows whose week record fuzzily matches to may . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; surface ; clay } ; week ; may } } ; 2 }, interpretation: select the rows whose prominence ( m ) record is greater than 3000 . there is only one such row in the table . the peak record of this unqiue row is piton des neiges .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; prominence ( m ) ; 3000 } } ; eq { hop { filter_greater { all_rows ; prominence ( m ) ; 3000 } ; peak } ; piton des neiges } }, interpretation: select the rows whose prominence ( m ) record is greater than 3000 . there is only one such row in the table . the peak record of this unqiue row is piton des neiges .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; prominence ( m ) ; 3000 } } ; eq { hop { filter_greater { all_rows ; prominence ( m ) ; 3000 } ; peak } ; piton des neiges } }, interpretation: select the rows whose name record fuzzily matches to greg merson . take the wsop cashes record of this row . select the rows whose name record fuzzily matches to michael esposito . take the wsop cashes record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; greg merson } ; wsop cashes } ; hop { filter_eq { all_rows ; name ; michael esposito } ; wsop cashes } }, interpretation: select the rows whose name record fuzzily matches to greg merson . take the wsop cashes record of this row . select the rows whose name record fuzzily matches to michael esposito . take the wsop cashes record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; greg merson } ; wsop cashes } ; hop { filter_eq { all_rows ; name ; michael esposito } ; wsop cashes } }, interpretation: the average of the won record of all rows is .53 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; won } ; .53 }, interpretation: the average of the won record of all rows is .53 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; won } ; .53 }, interpretation: the average of the score record of all rows is 4.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 4.67 }, interpretation: the average of the score record of all rows is 4.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 4.67 }, interpretation: select the row whose enrollment ( 2010 ) record of all rows is 2nd maximum . the school record of this row is heritage .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ( 2010 ) ; 2 } ; school } ; heritage }, interpretation: select the row whose enrollment ( 2010 ) record of all rows is 2nd maximum . the school record of this row is heritage .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; enrollment ( 2010 ) ; 2 } ; school } ; heritage }, interpretation: select the row whose date record of all rows is 3rd maximum . the tournament record of this row is westende .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 3 } ; tournament } ; westende }, interpretation: select the row whose date record of all rows is 3rd maximum . the tournament record of this row is westende .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 3 } ; tournament } ; westende }, interpretation: select the rows whose name / designation record fuzzily matches to saturn machine pistol . take the year of intro record of this row . select the rows whose name / designation record fuzzily matches to serlea . take the year of intro record of this row . the second record is 5 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name / designation ; saturn machine pistol } ; year of intro } ; hop { filter_eq { all_rows ; name / designation ; serlea } ; year of intro } } ; -5 years }, interpretation: select the rows whose name / designation record fuzzily matches to saturn machine pistol . take the year of intro record of this row . select the rows whose name / designation record fuzzily matches to serlea . take the year of intro record of this row . the second record is 5 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name / designation ; saturn machine pistol } ; year of intro } ; hop { filter_eq { all_rows ; name / designation ; serlea } ; year of intro } } ; -5 years }, interpretation: the average of the finish position record of all rows is 42.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish position } ; 42.8 }, interpretation: the average of the finish position record of all rows is 42.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish position } ; 42.8 }, interpretation: select the rows whose player record fuzzily matches to jack kemp ( la ) . take the yards record of this row . select the rows whose player record fuzzily matches to tom flores ( oak ) . take the yards record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; jack kemp ( la ) } ; yards } ; hop { filter_eq { all_rows ; player ; tom flores ( oak ) } ; yards } }, interpretation: select the rows whose player record fuzzily matches to jack kemp ( la ) . take the yards record of this row . select the rows whose player record fuzzily matches to tom flores ( oak ) . take the yards record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; jack kemp ( la ) } ; yards } ; hop { filter_eq { all_rows ; player ; tom flores ( oak ) } ; yards } }, interpretation: the sum of the try bonus record of all rows is 44 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; try bonus } ; 44 }, interpretation: the sum of the try bonus record of all rows is 44 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; try bonus } ; 44 }, interpretation: select the row whose home team score record of all rows is 2nd minimum . the home team record of this row is fitzroy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; home team score ; 2 } ; home team } ; fitzroy }, interpretation: select the row whose home team score record of all rows is 2nd minimum . the home team record of this row is fitzroy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; home team score ; 2 } ; home team } ; fitzroy }, interpretation: select the rows whose escorts record is equal to - . there is only one such row in the table . the nato member record of this unqiue row is belgium .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; escorts ; - } } ; eq { hop { filter_eq { all_rows ; escorts ; - } ; nato member } ; belgium } }, interpretation: select the rows whose escorts record is equal to - . there is only one such row in the table . the nato member record of this unqiue row is belgium .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; escorts ; - } } ; eq { hop { filter_eq { all_rows ; escorts ; - } ; nato member } ; belgium } }, interpretation: select the row whose reg gp record of all rows is maximum . the player record of this row is alexander edler .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; reg gp } ; player } ; alexander edler }, interpretation: select the row whose reg gp record of all rows is maximum . the player record of this row is alexander edler .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; reg gp } ; player } ; alexander edler }, interpretation: the average of the points record of all rows is 57 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 57 }, interpretation: the average of the points record of all rows is 57 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 57 }, interpretation: select the rows whose weeks record is greater than 16 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; weeks ; 16 } }, interpretation: select the rows whose weeks record is greater than 16 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; weeks ; 16 } }, interpretation: the average of the votes record of all rows is 46.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; votes } ; 46.4 }, interpretation: the average of the votes record of all rows is 46.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; votes } ; 46.4 }, interpretation: select the rows whose population record is greater than 4000 . select the row whose area km 2 record of these rows is 1st maximum . the official name record of this row is douglas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; population ; 4000 } ; area km 2 ; 1 } ; official name } ; douglas }, interpretation: select the rows whose population record is greater than 4000 . select the row whose area km 2 record of these rows is 1st maximum . the official name record of this row is douglas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; population ; 4000 } ; area km 2 ; 1 } ; official name } ; douglas }, interpretation: the average of the winner 's share record of all rows is 355169.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; winner 's share } ; 355169.4 }, interpretation: the average of the winner 's share record of all rows is 355169.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; winner 's share } ; 355169.4 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is october 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; october 11 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is october 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; october 11 }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is mcg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; mcg }, interpretation: select the row whose w record of all rows is maximum . the skip ( club ) record of this row is brad gushue ( bally haly ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; w } ; skip ( club ) } ; brad gushue ( bally haly ) }, interpretation: select the row whose w record of all rows is maximum . the skip ( club ) record of this row is brad gushue ( bally haly ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; w } ; skip ( club ) } ; brad gushue ( bally haly ) }, interpretation: for the title playoff records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; title playoff ; 0 }, interpretation: for the title playoff records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; title playoff ; 0 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is new york giants .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; new york giants }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is new york giants .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; new york giants }, interpretation: select the rows whose nationality record fuzzily matches to bulgaria . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; bulgaria } } ; 2 }, interpretation: select the rows whose nationality record fuzzily matches to bulgaria . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; bulgaria } } ; 2 }, interpretation: select the rows whose tournament record fuzzily matches to nice . take the date record of this row . select the rows whose tournament record fuzzily matches to estoril . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tournament ; nice } ; date } ; hop { filter_eq { all_rows ; tournament ; estoril } ; date } }, interpretation: select the rows whose tournament record fuzzily matches to nice . take the date record of this row . select the rows whose tournament record fuzzily matches to estoril . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; tournament ; nice } ; date } ; hop { filter_eq { all_rows ; tournament ; estoril } ; date } }, interpretation: select the rows whose manager record fuzzily matches to tommy shields . there is only one such row in the table . the finish record of this unqiue row is 4th .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manager ; tommy shields } } ; eq { hop { filter_eq { all_rows ; manager ; tommy shields } ; finish } ; 4th } }, interpretation: select the rows whose manager record fuzzily matches to tommy shields . there is only one such row in the table . the finish record of this unqiue row is 4th .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; manager ; tommy shields } } ; eq { hop { filter_eq { all_rows ; manager ; tommy shields } ; finish } ; 4th } }, interpretation: select the rows whose team record fuzzily matches to oklahoma city . select the row whose date record of these rows is 2nd minimum . the location attendance record of this row is toyota center 15316 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; team ; oklahoma city } ; date ; 2 } ; location attendance } ; toyota center 15316 }, interpretation: select the rows whose team record fuzzily matches to oklahoma city . select the row whose date record of these rows is 2nd minimum . the location attendance record of this row is toyota center 15316 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; team ; oklahoma city } ; date ; 2 } ; location attendance } ; toyota center 15316 }, interpretation: select the rows whose incumbent record fuzzily matches to sam graves . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to russ carnahan . take the first elected record of this row . the second record is 4 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; sam graves } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; russ carnahan } ; first elected } } ; -4 }, interpretation: select the rows whose incumbent record fuzzily matches to sam graves . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to russ carnahan . take the first elected record of this row . the second record is 4 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; incumbent ; sam graves } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; russ carnahan } ; first elected } } ; -4 }, interpretation: for the indian population records of all rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; indian population ; 10000 }, interpretation: for the indian population records of all rows , most of them are greater than 10000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; indian population ; 10000 }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 7 }, interpretation: select the rows whose outcome record fuzzily matches to winner . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; outcome ; winner } } ; 7 }, interpretation: select the row whose rank record of all rows is minimum . the athlete record of this row is alan campbell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; rank } ; athlete } ; alan campbell }, interpretation: select the row whose rank record of all rows is minimum . the athlete record of this row is alan campbell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; rank } ; athlete } ; alan campbell }, interpretation: select the rows whose country record fuzzily matches to burma . there is only one such row in the table . the city record of this unqiue row is yangon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; burma } } ; eq { hop { filter_eq { all_rows ; country ; burma } ; city } ; yangon } }, interpretation: select the rows whose country record fuzzily matches to burma . there is only one such row in the table . the city record of this unqiue row is yangon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; burma } } ; eq { hop { filter_eq { all_rows ; country ; burma } ; city } ; yangon } }, interpretation: select the rows whose episode record fuzzily matches to episode 5 . take the viewing figure record of this row . select the rows whose episode record fuzzily matches to episode 7 . take the viewing figure record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; episode ; episode 5 } ; viewing figure } ; hop { filter_eq { all_rows ; episode ; episode 7 } ; viewing figure } }, interpretation: select the rows whose episode record fuzzily matches to episode 5 . take the viewing figure record of this row . select the rows whose episode record fuzzily matches to episode 7 . take the viewing figure record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; episode ; episode 5 } ; viewing figure } ; hop { filter_eq { all_rows ; episode ; episode 7 } ; viewing figure } }, interpretation: the average of the weight ( kg ) record of all rows is 54.29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight ( kg ) } ; 54.29 }, interpretation: the average of the weight ( kg ) record of all rows is 54.29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weight ( kg ) } ; 54.29 }, interpretation: select the rows whose driver record fuzzily matches to kenny br\u00e4ck . take the time / retired record of this row . select the rows whose driver record fuzzily matches to jimmy vasser . take the time / retired record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; driver ; kenny br\u00e4ck } ; time / retired } ; hop { filter_eq { all_rows ; driver ; jimmy vasser } ; time / retired } }, interpretation: select the rows whose driver record fuzzily matches to kenny br\u00e4ck . take the time / retired record of this row . select the rows whose driver record fuzzily matches to jimmy vasser . take the time / retired record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; driver ; kenny br\u00e4ck } ; time / retired } ; hop { filter_eq { all_rows ; driver ; jimmy vasser } ; time / retired } }, interpretation: select the row whose extra points record of all rows is maximum . the player record of this row is merv pregulman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; extra points } ; player } ; merv pregulman }, interpretation: select the row whose extra points record of all rows is maximum . the player record of this row is merv pregulman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; extra points } ; player } ; merv pregulman }, interpretation: select the rows whose country record fuzzily matches to united states . for the year ( s ) won records of these rows , most of them fuzzily match to 198 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; country ; united states } ; year ( s ) won ; 198 }, interpretation: select the rows whose country record fuzzily matches to united states . for the year ( s ) won records of these rows , most of them fuzzily match to 198 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; country ; united states } ; year ( s ) won ; 198 }, interpretation: select the rows whose team record fuzzily matches to buck baker . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; team ; buck baker } }, interpretation: select the rows whose team record fuzzily matches to buck baker . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; team ; buck baker } }, interpretation: select the rows whose title record fuzzily matches to rumble . take the original air date record of this row . select the rows whose title record fuzzily matches to sweetie . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; rumble } ; original air date } ; hop { filter_eq { all_rows ; title ; sweetie } ; original air date } }, interpretation: select the rows whose title record fuzzily matches to rumble . take the original air date record of this row . select the rows whose title record fuzzily matches to sweetie . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; rumble } ; original air date } ; hop { filter_eq { all_rows ; title ; sweetie } ; original air date } }, interpretation: select the rows whose team record fuzzily matches to tauro . take the goals scored record of this row . select the rows whose team record fuzzily matches to alianza . take the goals scored record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; tauro } ; goals scored } ; hop { filter_eq { all_rows ; team ; alianza } ; goals scored } }, interpretation: select the rows whose team record fuzzily matches to tauro . take the goals scored record of this row . select the rows whose team record fuzzily matches to alianza . take the goals scored record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; tauro } ; goals scored } ; hop { filter_eq { all_rows ; team ; alianza } ; goals scored } }, interpretation: select the rows whose region record fuzzily matches to arica and parinacota . take the tertiary ( 18 - 24 years ) record of this row . select the rows whose region record fuzzily matches to maule . take the tertiary ( 18 - 24 years ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; region ; arica and parinacota } ; tertiary ( 18 - 24 years ) } ; hop { filter_eq { all_rows ; region ; maule } ; tertiary ( 18 - 24 years ) } }, interpretation: select the rows whose region record fuzzily matches to arica and parinacota . take the tertiary ( 18 - 24 years ) record of this row . select the rows whose region record fuzzily matches to maule . take the tertiary ( 18 - 24 years ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; region ; arica and parinacota } ; tertiary ( 18 - 24 years ) } ; hop { filter_eq { all_rows ; region ; maule } ; tertiary ( 18 - 24 years ) } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 15 march 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 15 march 2000 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 15 march 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 15 march 2000 }, interpretation: select the rows whose category record fuzzily matches to iva . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; category ; iva } }, interpretation: select the rows whose category record fuzzily matches to iva . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; category ; iva } }, interpretation: the sum of the fatalities record of all rows is 899 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; fatalities } ; 899 }, interpretation: the sum of the fatalities record of all rows is 899 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; fatalities } ; 899 }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: select the rows whose driver record fuzzily matches to mark martin . take the average speed ( mph ) record of this row . select the rows whose driver record fuzzily matches to chuck bown . take the average speed ( mph ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; mark martin } ; average speed ( mph ) } ; hop { filter_eq { all_rows ; driver ; chuck bown } ; average speed ( mph ) } }, interpretation: select the rows whose driver record fuzzily matches to mark martin . take the average speed ( mph ) record of this row . select the rows whose driver record fuzzily matches to chuck bown . take the average speed ( mph ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; mark martin } ; average speed ( mph ) } ; hop { filter_eq { all_rows ; driver ; chuck bown } ; average speed ( mph ) } }, interpretation: select the rows whose lead record is greater than 25 % . there is only one such row in the table . the date released record of this unqiue row is july 19 , 1987 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; lead ; 25 % } } ; eq { hop { filter_greater { all_rows ; lead ; 25 % } ; date released } ; july 19 , 1987 } }, interpretation: select the rows whose lead record is greater than 25 % . there is only one such row in the table . the date released record of this unqiue row is july 19 , 1987 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; lead ; 25 % } } ; eq { hop { filter_greater { all_rows ; lead ; 25 % } ; date released } ; july 19 , 1987 } }, interpretation: for the candidates records of all rows , most of them fuzzily match to unopposed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; candidates ; unopposed }, interpretation: for the candidates records of all rows , most of them fuzzily match to unopposed .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; candidates ; unopposed }, interpretation: select the rows whose race record fuzzily matches to indianapolis 500 . take the date record of this row . select the rows whose race record fuzzily matches to monaco grand prix . take the date record of this row . the first record is 1 day larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; race ; indianapolis 500 } ; date } ; hop { filter_eq { all_rows ; race ; monaco grand prix } ; date } } ; 1 day }, interpretation: select the rows whose race record fuzzily matches to indianapolis 500 . take the date record of this row . select the rows whose race record fuzzily matches to monaco grand prix . take the date record of this row . the first record is 1 day larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; race ; indianapolis 500 } ; date } ; hop { filter_eq { all_rows ; race ; monaco grand prix } ; date } } ; 1 day }, interpretation: for the won records of all rows , most of them are greater than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; won ; 10 }, interpretation: for the won records of all rows , most of them are greater than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; won ; 10 }, interpretation: select the rows whose away team record fuzzily matches to north melbourne . take the away team score record of this row . select the rows whose away team record fuzzily matches to south melbourne . take the away team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; away team ; north melbourne } ; away team score } ; hop { filter_eq { all_rows ; away team ; south melbourne } ; away team score } }, interpretation: select the rows whose away team record fuzzily matches to north melbourne . take the away team score record of this row . select the rows whose away team record fuzzily matches to south melbourne . take the away team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; away team ; north melbourne } ; away team score } ; hop { filter_eq { all_rows ; away team ; south melbourne } ; away team score } }, interpretation: select the rows whose headquarters record fuzzily matches to united kingdom . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; headquarters ; united kingdom } } ; 2 }, interpretation: select the rows whose headquarters record fuzzily matches to united kingdom . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; headquarters ; united kingdom } } ; 2 }, interpretation: select the row whose cultural and educational panel record of all rows is 2nd maximum . the party record of this row is fianna f\u00e1il .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; cultural and educational panel ; 2 } ; party } ; fianna f\u00e1il }, interpretation: select the row whose cultural and educational panel record of all rows is 2nd maximum . the party record of this row is fianna f\u00e1il .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; cultural and educational panel ; 2 } ; party } ; fianna f\u00e1il }, interpretation: select the rows whose college record fuzzily matches to houston . there is only one such row in the table . the name record of this unqiue row is jimmy herndon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; houston } } ; eq { hop { filter_eq { all_rows ; college ; houston } ; name } ; jimmy herndon } }, interpretation: select the rows whose college record fuzzily matches to houston . there is only one such row in the table . the name record of this unqiue row is jimmy herndon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; houston } } ; eq { hop { filter_eq { all_rows ; college ; houston } ; name } ; jimmy herndon } }, interpretation: select the rows whose air date record fuzzily matches to 1975 . select the row whose air date record of these rows is minimum . the title record of this row is family quarrel .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; air date ; 1975 } ; air date } ; title } ; family quarrel }, interpretation: select the rows whose air date record fuzzily matches to 1975 . select the row whose air date record of these rows is minimum . the title record of this row is family quarrel .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; air date ; 1975 } ; air date } ; title } ; family quarrel }, interpretation: select the rows whose home team record fuzzily matches to melbourne . the average of the crowd record of these rows is 15750 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; home team ; melbourne } ; crowd } ; 15750 }, interpretation: select the rows whose home team record fuzzily matches to melbourne . the average of the crowd record of these rows is 15750 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; home team ; melbourne } ; crowd } ; 15750 }, interpretation: select the rows whose artist record fuzzily matches to guide . take the points record of this row . select the rows whose artist record fuzzily matches to balsam boys . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; guide } ; points } ; hop { filter_eq { all_rows ; artist ; balsam boys } ; points } }, interpretation: select the rows whose artist record fuzzily matches to guide . take the points record of this row . select the rows whose artist record fuzzily matches to balsam boys . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; guide } ; points } ; hop { filter_eq { all_rows ; artist ; balsam boys } ; points } }, interpretation: select the row whose rank record of all rows is 2nd minimum . the athlete record of this row is marshevet hooker .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; rank ; 2 } ; athlete } ; marshevet hooker }, interpretation: select the row whose rank record of all rows is 2nd minimum . the athlete record of this row is marshevet hooker .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; rank ; 2 } ; athlete } ; marshevet hooker }, interpretation: select the rows whose player record fuzzily matches to gillis wilson . take the round record of this row . select the rows whose player record fuzzily matches to lester towns . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; gillis wilson } ; round } ; hop { filter_eq { all_rows ; player ; lester towns } ; round } }, interpretation: select the rows whose player record fuzzily matches to gillis wilson . take the round record of this row . select the rows whose player record fuzzily matches to lester towns . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; gillis wilson } ; round } ; hop { filter_eq { all_rows ; player ; lester towns } ; round } }, interpretation: select the row whose original air date record of all rows is minimum . the nick prod record of this row is 1001 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; original air date } ; nick prod } ; 1001 }, interpretation: select the row whose original air date record of all rows is minimum . the nick prod record of this row is 1001 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; original air date } ; nick prod } ; 1001 }, interpretation: select the rows whose builder record fuzzily matches to rh & dr . the maximum year built record of these rows is c1949 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; builder ; rh & dr } ; year built } ; c1949 }, interpretation: select the rows whose builder record fuzzily matches to rh & dr . the maximum year built record of these rows is c1949 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; builder ; rh & dr } ; year built } ; c1949 }, interpretation: select the rows whose shirt sponsor record fuzzily matches to mardan . there is only one such row in the table . the team record of this unqiue row is antalyaspor .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; shirt sponsor ; mardan } } ; eq { hop { filter_eq { all_rows ; shirt sponsor ; mardan } ; team } ; antalyaspor } }, interpretation: select the rows whose shirt sponsor record fuzzily matches to mardan . there is only one such row in the table . the team record of this unqiue row is antalyaspor .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; shirt sponsor ; mardan } } ; eq { hop { filter_eq { all_rows ; shirt sponsor ; mardan } ; team } ; antalyaspor } }, interpretation: select the rows whose tournament record fuzzily matches to switzerland . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; switzerland } } ; 3 }, interpretation: select the rows whose tournament record fuzzily matches to switzerland . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; switzerland } } ; 3 }, interpretation: select the rows whose singer record fuzzily matches to pedro migu\u00e9is . take the points record of this row . select the rows whose singer record fuzzily matches to jo\u00e3o portugal . take the points record of this row . the first record is 20 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; singer ; pedro migu\u00e9is } ; points } ; hop { filter_eq { all_rows ; singer ; jo\u00e3o portugal } ; points } } ; 20 }, interpretation: select the rows whose singer record fuzzily matches to pedro migu\u00e9is . take the points record of this row . select the rows whose singer record fuzzily matches to jo\u00e3o portugal . take the points record of this row . the first record is 20 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; singer ; pedro migu\u00e9is } ; points } ; hop { filter_eq { all_rows ; singer ; jo\u00e3o portugal } ; points } } ; 20 }, interpretation: for the competition records of all rows , most of them fuzzily match to division 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; division 2 }, interpretation: for the competition records of all rows , most of them fuzzily match to division 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; division 2 }, interpretation: select the rows whose date record is greater than sun mar 24 . for the location records of these rows , most of them fuzzily match to fleetcenter .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_greater { all_rows ; date ; sun mar 24 } ; location ; fleetcenter }, interpretation: select the rows whose date record is greater than sun mar 24 . for the location records of these rows , most of them fuzzily match to fleetcenter .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_greater { all_rows ; date ; sun mar 24 } ; location ; fleetcenter }, interpretation: select the rows whose year record fuzzily matches to 1993 . take the laps record of this row . select the rows whose year record fuzzily matches to 1997 . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1993 } ; laps } ; hop { filter_eq { all_rows ; year ; 1997 } ; laps } }, interpretation: select the rows whose year record fuzzily matches to 1993 . take the laps record of this row . select the rows whose year record fuzzily matches to 1997 . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1993 } ; laps } ; hop { filter_eq { all_rows ; year ; 1997 } ; laps } }, interpretation: select the rows whose diff record is greater than 100 . for the lost records of these rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_greater { all_rows ; diff ; 100 } ; lost ; 0 }, interpretation: select the rows whose diff record is greater than 100 . for the lost records of these rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_greater { all_rows ; diff ; 100 } ; lost ; 0 }, interpretation: select the rows whose ties record is equal to 18 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; ties ; 18 } } ; 2 }, interpretation: select the rows whose ties record is equal to 18 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; ties ; 18 } } ; 2 }, interpretation: the average of the population ( 2010 census ) record of all rows is 187514 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population ( 2010 census ) } ; 187514 }, interpretation: the average of the population ( 2010 census ) record of all rows is 187514 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population ( 2010 census ) } ; 187514 }, interpretation: select the rows whose metres record is less than 200 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; metres ; 200 } } ; 3 }, interpretation: select the rows whose metres record is less than 200 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; metres ; 200 } } ; 3 }, interpretation: select the row whose losses record of all rows is 2nd maximum . the club record of this row is club sestao .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; losses ; 2 } ; club } ; club sestao }, interpretation: select the row whose losses record of all rows is 2nd maximum . the club record of this row is club sestao .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; losses ; 2 } ; club } ; club sestao }, interpretation: select the rows whose name record fuzzily matches to 9 ad . take the power record of this row . select the rows whose name record fuzzily matches to 9 adb . take the power record of this row . the second record is 200 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; 9 ad } ; power } ; hop { filter_eq { all_rows ; name ; 9 adb } ; power } } ; -200 }, interpretation: select the rows whose name record fuzzily matches to 9 ad . take the power record of this row . select the rows whose name record fuzzily matches to 9 adb . take the power record of this row . the second record is 200 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; 9 ad } ; power } ; hop { filter_eq { all_rows ; name ; 9 adb } ; power } } ; -200 }, interpretation: select the rows whose venue record fuzzily matches to punt road oval . there is only one such row in the table . the home team record of this unqiue row is richmond . the away team record of this unqiue row is essendon . the date record of this unqiue row is 14 june 1947 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; punt road oval } } ; and { eq { hop { filter_eq { all_rows ; venue ; punt road oval } ; home team } ; richmond } ; and { eq { hop { filter_eq { all_rows ; venue ; punt road oval } ; away team } ; essendon } ; eq { hop { filter_eq { all_rows ; venue ; punt road oval } ; date } ; 14 june 1947 } } } }, interpretation: select the rows whose venue record fuzzily matches to punt road oval . there is only one such row in the table . the home team record of this unqiue row is richmond . the away team record of this unqiue row is essendon . the date record of this unqiue row is 14 june 1947 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; punt road oval } } ; and { eq { hop { filter_eq { all_rows ; venue ; punt road oval } ; home team } ; richmond } ; and { eq { hop { filter_eq { all_rows ; venue ; punt road oval } ; away team } ; essendon } ; eq { hop { filter_eq { all_rows ; venue ; punt road oval } ; date } ; 14 june 1947 } } } }, interpretation: the average of the goals record of all rows is 18.83 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 18.83 }, interpretation: the average of the goals record of all rows is 18.83 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; goals } ; 18.83 }, interpretation: select the rows whose venue record fuzzily matches to italy . there is only one such row in the table . the date record of this unqiue row is june 10 , 1990 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; italy } } ; eq { hop { filter_eq { all_rows ; venue ; italy } ; date } ; june 10 , 1990 } }, interpretation: select the rows whose venue record fuzzily matches to italy . there is only one such row in the table . the date record of this unqiue row is june 10 , 1990 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; italy } } ; eq { hop { filter_eq { all_rows ; venue ; italy } ; date } ; june 10 , 1990 } }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose first elected record is equal to 1944 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; first elected ; 1944 } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re - elected . among these rows , select the rows whose first elected record is equal to 1944 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; re - elected } ; first elected ; 1944 } } ; 2 }, interpretation: select the rows whose date record is less than november 1 . for the attendance records of these rows , most of them are greater than 70000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_less { all_rows ; date ; november 1 } ; attendance ; 70000 }, interpretation: select the rows whose date record is less than november 1 . for the attendance records of these rows , most of them are greater than 70000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_less { all_rows ; date ; november 1 } ; attendance ; 70000 }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the candidates record of this row is charles edward bennett ( d ) unopposed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; candidates } ; charles edward bennett ( d ) unopposed }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the candidates record of this row is charles edward bennett ( d ) unopposed .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; candidates } ; charles edward bennett ( d ) unopposed }, interpretation: for the wheel arrangement ( whyte notation ) records of all rows , most of them fuzzily match to 4 - 6 - 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wheel arrangement ( whyte notation ) ; 4 - 6 - 0 }, interpretation: for the wheel arrangement ( whyte notation ) records of all rows , most of them fuzzily match to 4 - 6 - 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wheel arrangement ( whyte notation ) ; 4 - 6 - 0 }, interpretation: the maximum score record of all rows is 5 - 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; 5 - 0 }, interpretation: the maximum score record of all rows is 5 - 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; 5 - 0 }, interpretation: select the rows whose name record fuzzily matches to jim lovell . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; name ; jim lovell } } ; 2 }, interpretation: select the rows whose name record fuzzily matches to jim lovell . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; name ; jim lovell } } ; 2 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is september 30 , 1990 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; september 30 , 1990 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is september 30 , 1990 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; september 30 , 1990 }, interpretation: for the speed records of all rows , most of them are greater than 93 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; speed ; 93 }, interpretation: for the speed records of all rows , most of them are greater than 93 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; speed ; 93 }, interpretation: select the rows whose goalkeeper record fuzzily matches to bernardo . take the average record of this row . select the rows whose goalkeeper record fuzzily matches to javier varas . take the average record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; goalkeeper ; bernardo } ; average } ; hop { filter_eq { all_rows ; goalkeeper ; javier varas } ; average } }, interpretation: select the rows whose goalkeeper record fuzzily matches to bernardo . take the average record of this row . select the rows whose goalkeeper record fuzzily matches to javier varas . take the average record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; goalkeeper ; bernardo } ; average } ; hop { filter_eq { all_rows ; goalkeeper ; javier varas } ; average } }, interpretation: select the row whose goals against record of all rows is 2nd maximum . the club record of this row is baracaldo ah .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goals against ; 2 } ; club } ; baracaldo ah }, interpretation: select the row whose goals against record of all rows is 2nd maximum . the club record of this row is baracaldo ah .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goals against ; 2 } ; club } ; baracaldo ah }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 8 }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 8 }, interpretation: for the country records of all rows , most of them fuzzily match to united kingdom .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united kingdom }, interpretation: for the country records of all rows , most of them fuzzily match to united kingdom .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united kingdom }, interpretation: select the rows whose date record fuzzily matches to 6 march 1976 . select the row whose tie no record of these rows is minimum . the home team record of this row is sunderland . the away team record of this row is crystal palace .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmin { filter_eq { all_rows ; date ; 6 march 1976 } ; tie no } ; home team } ; sunderland } ; eq { hop { argmin { filter_eq { all_rows ; date ; 6 march 1976 } ; tie no } ; away team } ; crystal palace } }, interpretation: select the rows whose date record fuzzily matches to 6 march 1976 . select the row whose tie no record of these rows is minimum . the home team record of this row is sunderland . the away team record of this row is crystal palace .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmin { filter_eq { all_rows ; date ; 6 march 1976 } ; tie no } ; home team } ; sunderland } ; eq { hop { argmin { filter_eq { all_rows ; date ; 6 march 1976 } ; tie no } ; away team } ; crystal palace } }, interpretation: select the rows whose spaceport record fuzzily matches to baikonur cosmodrome , kazakhstan . the sum of the flights record of these rows is 123 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; spaceport ; baikonur cosmodrome , kazakhstan } ; flights } ; 123 }, interpretation: select the rows whose spaceport record fuzzily matches to baikonur cosmodrome , kazakhstan . the sum of the flights record of these rows is 123 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; spaceport ; baikonur cosmodrome , kazakhstan } ; flights } ; 123 }, interpretation: select the rows whose title record fuzzily matches to new girls . take the original airdate record of this row . select the rows whose title record fuzzily matches to freedom . take the original airdate record of this row . the first record is greater than the second record . the original airdate record of the first row is 25 march 1978 . the original airdate record of the second row is 18 march 1978 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; title ; new girls } ; original airdate } ; hop { filter_eq { all_rows ; title ; freedom } ; original airdate } } ; and { eq { hop { filter_eq { all_rows ; title ; new girls } ; original airdate } ; 25 march 1978 } ; eq { hop { filter_eq { all_rows ; title ; freedom } ; original airdate } ; 18 march 1978 } } }, interpretation: select the rows whose title record fuzzily matches to new girls . take the original airdate record of this row . select the rows whose title record fuzzily matches to freedom . take the original airdate record of this row . the first record is greater than the second record . the original airdate record of the first row is 25 march 1978 . the original airdate record of the second row is 18 march 1978 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; title ; new girls } ; original airdate } ; hop { filter_eq { all_rows ; title ; freedom } ; original airdate } } ; and { eq { hop { filter_eq { all_rows ; title ; new girls } ; original airdate } ; 25 march 1978 } ; eq { hop { filter_eq { all_rows ; title ; freedom } ; original airdate } ; 18 march 1978 } } }, interpretation: select the rows whose director record fuzzily matches to chuck jones . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; director ; chuck jones } } ; 7 }, interpretation: select the rows whose director record fuzzily matches to chuck jones . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; director ; chuck jones } } ; 7 }, interpretation: select the row whose original air date record of all rows is 1st maximum . the title record of this row is weeping willows .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; title } ; weeping willows }, interpretation: select the row whose original air date record of all rows is 1st maximum . the title record of this row is weeping willows .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; title } ; weeping willows }, interpretation: select the rows whose country record fuzzily matches to nigeria . take the penalty record of this row . select the rows whose country record fuzzily matches to uzbekistan . take the penalty record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; country ; nigeria } ; penalty } ; hop { filter_eq { all_rows ; country ; uzbekistan } ; penalty } }, interpretation: select the rows whose country record fuzzily matches to nigeria . take the penalty record of this row . select the rows whose country record fuzzily matches to uzbekistan . take the penalty record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; country ; nigeria } ; penalty } ; hop { filter_eq { all_rows ; country ; uzbekistan } ; penalty } }, interpretation: select the rows whose texas vs record fuzzily matches to missouri . take the current streak record of this row . select the rows whose texas vs record fuzzily matches to oklahoma . take the current streak record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; texas vs ; missouri } ; current streak } ; hop { filter_eq { all_rows ; texas vs ; oklahoma } ; current streak } }, interpretation: select the rows whose texas vs record fuzzily matches to missouri . take the current streak record of this row . select the rows whose texas vs record fuzzily matches to oklahoma . take the current streak record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; texas vs ; missouri } ; current streak } ; hop { filter_eq { all_rows ; texas vs ; oklahoma } ; current streak } }, interpretation: select the rows whose name record fuzzily matches to ishara amerasinghe . take the wickets record of this row . select the rows whose name record fuzzily matches to muttiah muralitharan . take the wickets record of this row . the first record is equal to the second record . the wickets record of the first row is 9 . the wickets record of the second row is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; name ; ishara amerasinghe } ; wickets } ; hop { filter_eq { all_rows ; name ; muttiah muralitharan } ; wickets } } ; and { eq { hop { filter_eq { all_rows ; name ; ishara amerasinghe } ; wickets } ; 9 } ; eq { hop { filter_eq { all_rows ; name ; muttiah muralitharan } ; wickets } ; 9 } } }, interpretation: select the rows whose name record fuzzily matches to ishara amerasinghe . take the wickets record of this row . select the rows whose name record fuzzily matches to muttiah muralitharan . take the wickets record of this row . the first record is equal to the second record . the wickets record of the first row is 9 . the wickets record of the second row is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; name ; ishara amerasinghe } ; wickets } ; hop { filter_eq { all_rows ; name ; muttiah muralitharan } ; wickets } } ; and { eq { hop { filter_eq { all_rows ; name ; ishara amerasinghe } ; wickets } ; 9 } ; eq { hop { filter_eq { all_rows ; name ; muttiah muralitharan } ; wickets } ; 9 } } }, interpretation: the average of the pick record of all rows is 4.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 4.5 }, interpretation: the average of the pick record of all rows is 4.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 4.5 }, interpretation: select the row whose points for record of all rows is maximum . the club record of this row is betws rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points for } ; club } ; betws rfc }, interpretation: select the row whose points for record of all rows is maximum . the club record of this row is betws rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points for } ; club } ; betws rfc }, interpretation: select the rows whose venue record fuzzily matches to london , england . there is only one such row in the table . the date record of this unqiue row is 6 february 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; london , england } } ; eq { hop { filter_eq { all_rows ; venue ; london , england } ; date } ; 6 february 2008 } }, interpretation: select the rows whose venue record fuzzily matches to london , england . there is only one such row in the table . the date record of this unqiue row is 6 february 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; london , england } } ; eq { hop { filter_eq { all_rows ; venue ; london , england } ; date } ; 6 february 2008 } }, interpretation: for the points records of all rows , most of them are less than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 100 }, interpretation: for the points records of all rows , most of them are less than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 100 }, interpretation: the average of the blackberry record of all rows is 3.19 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blackberry } ; 3.19 % }, interpretation: the average of the blackberry record of all rows is 3.19 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; blackberry } ; 3.19 % }, interpretation: select the rows whose results record fuzzily matches to retired . there is only one such row in the table . the incumbent record of this unqiue row is ernest istook .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; results ; retired } } ; eq { hop { filter_eq { all_rows ; results ; retired } ; incumbent } ; ernest istook } }, interpretation: select the rows whose results record fuzzily matches to retired . there is only one such row in the table . the incumbent record of this unqiue row is ernest istook .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; results ; retired } } ; eq { hop { filter_eq { all_rows ; results ; retired } ; incumbent } ; ernest istook } }, interpretation: for the competition records of all rows , most of them fuzzily match to league .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; league }, interpretation: for the competition records of all rows , most of them fuzzily match to league .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; league }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the home team record of this row is melbourne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; home team } ; melbourne }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the home team record of this row is melbourne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; home team } ; melbourne }, interpretation: select the rows whose state record fuzzily matches to new york . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; state ; new york } } ; 3 }, interpretation: select the rows whose state record fuzzily matches to new york . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; state ; new york } } ; 3 }, interpretation: the average of the vuelta record of all rows is 1.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; vuelta } ; 1.67 }, interpretation: the average of the vuelta record of all rows is 1.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; vuelta } ; 1.67 }, interpretation: select the rows whose time record fuzzily matches to 5:00 . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; 5:00 } } ; 8 }, interpretation: select the rows whose time record fuzzily matches to 5:00 . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; 5:00 } } ; 8 }, interpretation: select the row whose total viewers ( in millions ) record of all rows is maximum . the title record of this row is our fathers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total viewers ( in millions ) } ; title } ; our fathers }, interpretation: select the row whose total viewers ( in millions ) record of all rows is maximum . the title record of this row is our fathers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total viewers ( in millions ) } ; title } ; our fathers }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 13 }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 13 }, interpretation: select the rows whose title record fuzzily matches to olympic . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; title ; olympic } }, interpretation: select the rows whose title record fuzzily matches to olympic . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; title ; olympic } }, interpretation: select the rows whose position record fuzzily matches to running back . among these rows , select the rows whose overall record is greater than 100th . there is only one such row in the table . the name record of this unqiue row is david tolomu .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; position ; running back } ; overall ; 100th } } ; eq { hop { filter_greater { filter_eq { all_rows ; position ; running back } ; overall ; 100th } ; name } ; david tolomu } }, interpretation: select the rows whose position record fuzzily matches to running back . among these rows , select the rows whose overall record is greater than 100th . there is only one such row in the table . the name record of this unqiue row is david tolomu .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; position ; running back } ; overall ; 100th } } ; eq { hop { filter_greater { filter_eq { all_rows ; position ; running back } ; overall ; 100th } ; name } ; david tolomu } }, interpretation: select the rows whose region record fuzzily matches to united states . there is only one such row in the table . the date record of this unqiue row is 17 march 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; region ; united states } } ; eq { hop { filter_eq { all_rows ; region ; united states } ; date } ; 17 march 2009 } }, interpretation: select the rows whose region record fuzzily matches to united states . there is only one such row in the table . the date record of this unqiue row is 17 march 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; region ; united states } } ; eq { hop { filter_eq { all_rows ; region ; united states } ; date } ; 17 march 2009 } }, interpretation: for the partner records of all rows , most of them fuzzily match to sherwood stewart .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; partner ; sherwood stewart }, interpretation: for the partner records of all rows , most of them fuzzily match to sherwood stewart .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; partner ; sherwood stewart }, interpretation: the sum of the apparent magnitude record of all rows is 74.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; apparent magnitude } ; 74.8 }, interpretation: the sum of the apparent magnitude record of all rows is 74.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; apparent magnitude } ; 74.8 }, interpretation: select the rows whose home team record fuzzily matches to carlton . take the home team score record of this row . select the rows whose home team record fuzzily matches to st kilda . take the home team score record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; home team ; carlton } ; home team score } ; hop { filter_eq { all_rows ; home team ; st kilda } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to carlton . take the home team score record of this row . select the rows whose home team record fuzzily matches to st kilda . take the home team score record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; home team ; carlton } ; home team score } ; hop { filter_eq { all_rows ; home team ; st kilda } ; home team score } }, interpretation: the average of the attendance record of all rows is 56346 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 56346 }, interpretation: the average of the attendance record of all rows is 56346 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 56346 }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is richmond .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; richmond }, interpretation: select the row whose home team score record of all rows is maximum . the home team record of this row is richmond .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; home team score } ; home team } ; richmond }, interpretation: for the date records of all rows , all of them fuzzily match to april .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; april }, interpretation: for the date records of all rows , all of them fuzzily match to april .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; april }, interpretation: select the rows whose date record fuzzily matches to unreleased . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; unreleased } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to unreleased . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; unreleased } } ; 3 }, interpretation: select the rows whose crowd record is less than 20000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; crowd ; 20000 } } ; 3 }, interpretation: select the rows whose crowd record is less than 20000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; crowd ; 20000 } } ; 3 }, interpretation: select the rows whose theme record fuzzily matches to montreal canadiens . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; theme ; montreal canadiens } } ; 2 }, interpretation: select the rows whose theme record fuzzily matches to montreal canadiens . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; theme ; montreal canadiens } } ; 2 }, interpretation: select the row whose total points record of all rows is maximum . the player record of this row is carlos yates .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total points } ; player } ; carlos yates }, interpretation: select the row whose total points record of all rows is maximum . the player record of this row is carlos yates .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total points } ; player } ; carlos yates }, interpretation: the average of the age record of all rows is 23.7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; age } ; 23.7 }, interpretation: the average of the age record of all rows is 23.7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; age } ; 23.7 }, interpretation: the average of the score record of all rows is 142 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 142 }, interpretation: the average of the score record of all rows is 142 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 142 }, interpretation: select the rows whose region record fuzzily matches to kansai . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; region ; kansai } } ; 2 }, interpretation: select the rows whose region record fuzzily matches to kansai . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; region ; kansai } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the tournament record of this unqiue row is valencia , spain .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; tournament } ; valencia , spain } }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the tournament record of this unqiue row is valencia , spain .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; tournament } ; valencia , spain } }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , all of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; october } ; result ; l }, interpretation: select the rows whose date record fuzzily matches to october . for the result records of these rows , all of them fuzzily match to l .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; october } ; result ; l }, interpretation: for the manner of departure records of all rows , most of them fuzzily match to contract ended .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manner of departure ; contract ended }, interpretation: for the manner of departure records of all rows , most of them fuzzily match to contract ended .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manner of departure ; contract ended }, interpretation: select the rows whose away team score record is greater than 13.0 . among these rows , select the rows whose crowd record is greater than 19000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; away team score ; 13.0 } ; crowd ; 19000 } } ; 2 }, interpretation: select the rows whose away team score record is greater than 13.0 . among these rows , select the rows whose crowd record is greater than 19000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; away team score ; 13.0 } ; crowd ; 19000 } } ; 2 }, interpretation: the maximum points record of all rows is 15 . the place record of the row with superlative points record is 1 . the country record of the row with superlative points record is australia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; points } ; 15 } ; and { eq { hop { argmax { all_rows ; points } ; place } ; 1 } ; eq { hop { argmax { all_rows ; points } ; country } ; australia } } }, interpretation: the maximum points record of all rows is 15 . the place record of the row with superlative points record is 1 . the country record of the row with superlative points record is australia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; points } ; 15 } ; and { eq { hop { argmax { all_rows ; points } ; place } ; 1 } ; eq { hop { argmax { all_rows ; points } ; country } ; australia } } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: for the type records of all rows , most of them fuzzily match to switcher .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; switcher }, interpretation: for the type records of all rows , most of them fuzzily match to switcher .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; switcher }, interpretation: for the round records of all rows , most of them fuzzily match to final .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; round ; final }, interpretation: for the round records of all rows , most of them fuzzily match to final .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; round ; final }, interpretation: select the rows whose player record fuzzily matches to jerry grote . take the from record of this row . select the rows whose player record fuzzily matches to andrew goudelock . take the from record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; jerry grote } ; from } ; hop { filter_eq { all_rows ; player ; andrew goudelock } ; from } }, interpretation: select the rows whose player record fuzzily matches to jerry grote . take the from record of this row . select the rows whose player record fuzzily matches to andrew goudelock . take the from record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; jerry grote } ; from } ; hop { filter_eq { all_rows ; player ; andrew goudelock } ; from } }, interpretation: the average of the crowd record of all rows is 14208 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 14208 }, interpretation: the average of the crowd record of all rows is 14208 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 14208 }, interpretation: for the pole position records of all rows , most of them fuzzily match to rick mears .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; pole position ; rick mears }, interpretation: for the pole position records of all rows , most of them fuzzily match to rick mears .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; pole position ; rick mears }, interpretation: the average of the catches record of all rows is 19.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; catches } ; 19.5 }, interpretation: the average of the catches record of all rows is 19.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; catches } ; 19.5 }, interpretation: select the rows whose content record fuzzily matches to salute . there is only one such row in the table . the television service record of this unqiue row is erde und mensch .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; content ; salute } } ; eq { hop { filter_eq { all_rows ; content ; salute } ; television service } ; erde und mensch } }, interpretation: select the rows whose content record fuzzily matches to salute . there is only one such row in the table . the television service record of this unqiue row is erde und mensch .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; content ; salute } } ; eq { hop { filter_eq { all_rows ; content ; salute } ; television service } ; erde und mensch } }, interpretation: select the rows whose college record fuzzily matches to colo school of mines . there is only one such row in the table . the name record of this unqiue row is mike flater .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; colo school of mines } } ; eq { hop { filter_eq { all_rows ; college ; colo school of mines } ; name } ; mike flater } }, interpretation: select the rows whose college record fuzzily matches to colo school of mines . there is only one such row in the table . the name record of this unqiue row is mike flater .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; colo school of mines } } ; eq { hop { filter_eq { all_rows ; college ; colo school of mines } ; name } ; mike flater } }, interpretation: select the rows whose manner of departure record fuzzily matches to contract terminated . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; contract terminated } } ; 3 }, interpretation: select the rows whose manner of departure record fuzzily matches to contract terminated . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; contract terminated } } ; 3 }, interpretation: for the regional county municipality records of all rows , all of them fuzzily match to not part of a rcm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; regional county municipality ; not part of a rcm }, interpretation: for the regional county municipality records of all rows , all of them fuzzily match to not part of a rcm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; regional county municipality ; not part of a rcm }, interpretation: select the rows whose method record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is yoko takahashi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; method ; draw } } ; eq { hop { filter_eq { all_rows ; method ; draw } ; opponent } ; yoko takahashi } }, interpretation: select the rows whose method record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is yoko takahashi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; method ; draw } } ; eq { hop { filter_eq { all_rows ; method ; draw } ; opponent } ; yoko takahashi } }, interpretation: select the rows whose score record fuzzily matches to 2 - 0 . there is only one such row in the table . the home team record of this unqiue row is eastern team a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 2 - 0 } } ; eq { hop { filter_eq { all_rows ; score ; 2 - 0 } ; home team } ; eastern team a } }, interpretation: select the rows whose score record fuzzily matches to 2 - 0 . there is only one such row in the table . the home team record of this unqiue row is eastern team a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 2 - 0 } } ; eq { hop { filter_eq { all_rows ; score ; 2 - 0 } ; home team } ; eastern team a } }, interpretation: select the rows whose time record is equal to 25.61 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; 25.61 } } ; 2 }, interpretation: select the rows whose time record is equal to 25.61 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; 25.61 } } ; 2 }, interpretation: select the rows whose engine record fuzzily matches to offy . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; engine ; offy } } ; 4 }, interpretation: select the rows whose engine record fuzzily matches to offy . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; engine ; offy } } ; 4 }, interpretation: select the rows whose method record fuzzily matches to decision . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; method ; decision } } ; 7 }, interpretation: select the rows whose method record fuzzily matches to decision . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; method ; decision } } ; 7 }, interpretation: select the rows whose game site record fuzzily matches to hoosier dome . select the row whose attendance record of these rows is 2nd maximum . the opponent record of this row is miami dolphins .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; game site ; hoosier dome } ; attendance ; 2 } ; opponent } ; miami dolphins }, interpretation: select the rows whose game site record fuzzily matches to hoosier dome . select the row whose attendance record of these rows is 2nd maximum . the opponent record of this row is miami dolphins .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; game site ; hoosier dome } ; attendance ; 2 } ; opponent } ; miami dolphins }, interpretation: select the rows whose year record fuzzily matches to 2009 . take the finish position record of this row . select the rows whose year record fuzzily matches to 2008 . take the finish position record of this row . the second record is 4 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 2009 } ; finish position } ; hop { filter_eq { all_rows ; year ; 2008 } ; finish position } } ; -4 }, interpretation: select the rows whose year record fuzzily matches to 2009 . take the finish position record of this row . select the rows whose year record fuzzily matches to 2008 . take the finish position record of this row . the second record is 4 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 2009 } ; finish position } ; hop { filter_eq { all_rows ; year ; 2008 } ; finish position } } ; -4 }, interpretation: select the rows whose goals record is equal to 64 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; goals ; 64 } } ; 3 }, interpretation: select the rows whose goals record is equal to 64 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; goals ; 64 } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to t . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; result ; t } }, interpretation: select the rows whose result record fuzzily matches to t . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; result ; t } }, interpretation: for the time records of all rows , most of them are less than 54.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; time ; 54.0 }, interpretation: for the time records of all rows , most of them are less than 54.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; time ; 54.0 }, interpretation: select the rows whose name record fuzzily matches to ray lindwall . take the wickets record of this row . select the rows whose name record fuzzily matches to clarrie grimmett . take the wickets record of this row . the first record is 12 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; ray lindwall } ; wickets } ; hop { filter_eq { all_rows ; name ; clarrie grimmett } ; wickets } } ; 12 }, interpretation: select the rows whose name record fuzzily matches to ray lindwall . take the wickets record of this row . select the rows whose name record fuzzily matches to clarrie grimmett . take the wickets record of this row . the first record is 12 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; ray lindwall } ; wickets } ; hop { filter_eq { all_rows ; name ; clarrie grimmett } ; wickets } } ; 12 }, interpretation: select the row whose stages record of all rows is maximum . the name record of this row is air21 tour pilipinas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; stages } ; name } ; air21 tour pilipinas }, interpretation: select the row whose stages record of all rows is maximum . the name record of this row is air21 tour pilipinas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; stages } ; name } ; air21 tour pilipinas }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose to par record is equal to -1 . there is only one such row in the table . the place record of this unqiue row is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } } ; eq { hop { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } ; place } ; 3 } }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose to par record is equal to -1 . there is only one such row in the table . the place record of this unqiue row is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } } ; eq { hop { filter_eq { filter_eq { all_rows ; country ; united states } ; to par ; -1 } ; place } ; 3 } }, interpretation: select the rows whose nation record fuzzily matches to kingfisher east bengal fc . take the winners record of this row . select the rows whose nation record fuzzily matches to pahang fa . take the winners record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; kingfisher east bengal fc } ; winners } ; hop { filter_eq { all_rows ; nation ; pahang fa } ; winners } }, interpretation: select the rows whose nation record fuzzily matches to kingfisher east bengal fc . take the winners record of this row . select the rows whose nation record fuzzily matches to pahang fa . take the winners record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; kingfisher east bengal fc } ; winners } ; hop { filter_eq { all_rows ; nation ; pahang fa } ; winners } }, interpretation: select the rows whose venue record fuzzily matches to rome . take the date record of this row . select the rows whose venue record fuzzily matches to beijing . take the date record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; rome } ; date } ; hop { filter_eq { all_rows ; venue ; beijing } ; date } }, interpretation: select the rows whose venue record fuzzily matches to rome . take the date record of this row . select the rows whose venue record fuzzily matches to beijing . take the date record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; rome } ; date } ; hop { filter_eq { all_rows ; venue ; beijing } ; date } }, interpretation: select the rows whose title record fuzzily matches to episode 4 . take the original air date record of this row . select the rows whose title record fuzzily matches to episode 5 . take the original air date record of this row . the second record is 7 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; title ; episode 4 } ; original air date } ; hop { filter_eq { all_rows ; title ; episode 5 } ; original air date } } ; -7 }, interpretation: select the rows whose title record fuzzily matches to episode 4 . take the original air date record of this row . select the rows whose title record fuzzily matches to episode 5 . take the original air date record of this row . the second record is 7 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; title ; episode 4 } ; original air date } ; hop { filter_eq { all_rows ; title ; episode 5 } ; original air date } } ; -7 }, interpretation: select the rows whose name record fuzzily matches to coby fleener . take the round record of this row . select the rows whose name record fuzzily matches to josh chapman . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; coby fleener } ; round } ; hop { filter_eq { all_rows ; name ; josh chapman } ; round } }, interpretation: select the rows whose name record fuzzily matches to coby fleener . take the round record of this row . select the rows whose name record fuzzily matches to josh chapman . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; coby fleener } ; round } ; hop { filter_eq { all_rows ; name ; josh chapman } ; round } }, interpretation: the average of the crowd record of all rows is 24303 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24303 }, interpretation: the average of the crowd record of all rows is 24303 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24303 }, interpretation: the average of the pts record of all rows is 2.33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pts } ; 2.33 }, interpretation: the average of the pts record of all rows is 2.33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pts } ; 2.33 }, interpretation: select the rows whose season record fuzzily matches to 1978 - 79 . take the goals for record of this row . select the rows whose season record fuzzily matches to 1975 - 76 . take the goals for record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 1978 - 79 } ; goals for } ; hop { filter_eq { all_rows ; season ; 1975 - 76 } ; goals for } }, interpretation: select the rows whose season record fuzzily matches to 1978 - 79 . take the goals for record of this row . select the rows whose season record fuzzily matches to 1975 - 76 . take the goals for record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; season ; 1978 - 79 } ; goals for } ; hop { filter_eq { all_rows ; season ; 1975 - 76 } ; goals for } }, interpretation: select the rows whose polling agency record fuzzily matches to red c . the average of the davis record of these rows is 7 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; polling agency ; red c } ; davis } ; 7 % }, interpretation: select the rows whose polling agency record fuzzily matches to red c . the average of the davis record of these rows is 7 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; polling agency ; red c } ; davis } ; 7 % }, interpretation: select the rows whose kit maker record fuzzily matches to erre\u00e0 . there is only one such row in the table . the team record of this unqiue row is middlesbrough .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; kit maker ; erre\u00e0 } } ; eq { hop { filter_eq { all_rows ; kit maker ; erre\u00e0 } ; team } ; middlesbrough } }, interpretation: select the rows whose kit maker record fuzzily matches to erre\u00e0 . there is only one such row in the table . the team record of this unqiue row is middlesbrough .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; kit maker ; erre\u00e0 } } ; eq { hop { filter_eq { all_rows ; kit maker ; erre\u00e0 } ; team } ; middlesbrough } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 14 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is november 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; november 14 }, interpretation: the average of the round record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; round } ; 2 }, interpretation: select the row whose duration record of all rows is maximum . the start date / time record of this row is 13 may 21:17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; start date / time } ; 13 may 21:17 }, interpretation: select the row whose duration record of all rows is maximum . the start date / time record of this row is 13 may 21:17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; start date / time } ; 13 may 21:17 }, interpretation: select the row whose uk broadcast date record of all rows is minimum . the episode title record of this row is the gold rush line .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; uk broadcast date } ; episode title } ; the gold rush line }, interpretation: select the row whose uk broadcast date record of all rows is minimum . the episode title record of this row is the gold rush line .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; uk broadcast date } ; episode title } ; the gold rush line }, interpretation: select the rows whose author record fuzzily matches to barbara clegg and marc platt . there is only one such row in the table . the title record of this unqiue row is point of entry .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; author ; barbara clegg and marc platt } } ; eq { hop { filter_eq { all_rows ; author ; barbara clegg and marc platt } ; title } ; point of entry } }, interpretation: select the rows whose author record fuzzily matches to barbara clegg and marc platt . there is only one such row in the table . the title record of this unqiue row is point of entry .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; author ; barbara clegg and marc platt } } ; eq { hop { filter_eq { all_rows ; author ; barbara clegg and marc platt } ; title } ; point of entry } }, interpretation: for the date records of all rows , most of them are greater than 1980 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; date ; 1980 }, interpretation: for the date records of all rows , most of them are greater than 1980 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; date ; 1980 }, interpretation: select the rows whose game record fuzzily matches to 1 . take the date record of this row . select the rows whose game record fuzzily matches to 2 . take the date record of this row . the second record is 2 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; game ; 1 } ; date } ; hop { filter_eq { all_rows ; game ; 2 } ; date } } ; -2 }, interpretation: select the rows whose game record fuzzily matches to 1 . take the date record of this row . select the rows whose game record fuzzily matches to 2 . take the date record of this row . the second record is 2 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; game ; 1 } ; date } ; hop { filter_eq { all_rows ; game ; 2 } ; date } } ; -2 }, interpretation: select the rows whose visitor record fuzzily matches to suns . take the date record of this row . select the rows whose visitor record fuzzily matches to timberwolves . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; suns } ; date } ; hop { filter_eq { all_rows ; visitor ; timberwolves } ; date } }, interpretation: select the rows whose visitor record fuzzily matches to suns . take the date record of this row . select the rows whose visitor record fuzzily matches to timberwolves . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; visitor ; suns } ; date } ; hop { filter_eq { all_rows ; visitor ; timberwolves } ; date } }, interpretation: select the rows whose power record fuzzily matches to 20 kw . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; power ; 20 kw } } ; 3 }, interpretation: select the rows whose power record fuzzily matches to 20 kw . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; power ; 20 kw } } ; 3 }, interpretation: select the row whose birthdate record of all rows is minimum . the name record of this row is phil verchota .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; birthdate } ; name } ; phil verchota }, interpretation: select the row whose birthdate record of all rows is minimum . the name record of this row is phil verchota .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; birthdate } ; name } ; phil verchota }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is victoria park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; victoria park }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is victoria park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; victoria park }, interpretation: the average of the runs record of all rows is 5390 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; runs } ; 5390 }, interpretation: the average of the runs record of all rows is 5390 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; runs } ; 5390 }, interpretation: select the rows whose apps record is equal to 37 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; apps ; 37 } } ; 2 }, interpretation: select the rows whose apps record is equal to 37 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; apps ; 37 } } ; 2 }, interpretation: select the row whose quantity record of all rows is maximum . the class record of this row is d iv .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; quantity } ; class } ; d iv }, interpretation: select the row whose quantity record of all rows is maximum . the class record of this row is d iv .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; quantity } ; class } ; d iv }, interpretation: for the score records of all rows , most of them are equal to 70 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; 70 }, interpretation: for the score records of all rows , most of them are equal to 70 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; 70 }, interpretation: the average of the points record of all rows is 58 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 58 }, interpretation: the average of the points record of all rows is 58 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 58 }, interpretation: the average of the orangemen points record of all rows is 20.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; orangemen points } ; 20.3 }, interpretation: the average of the orangemen points record of all rows is 20.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; orangemen points } ; 20.3 }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: for the venue records of all rows , most of them fuzzily match to estadio cuscatl\u00e1n , san salvador , el salvador .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; estadio cuscatl\u00e1n , san salvador , el salvador }, interpretation: for the venue records of all rows , most of them fuzzily match to estadio cuscatl\u00e1n , san salvador , el salvador .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; venue ; estadio cuscatl\u00e1n , san salvador , el salvador }, interpretation: select the row whose number of episodes record of all rows is maximum . the english title ( chinese title ) record of this row is dark tales ii \u804a\u9f4b ( \u8cb3 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number of episodes } ; english title ( chinese title ) } ; dark tales ii \u804a\u9f4b ( \u8cb3 ) }, interpretation: select the row whose number of episodes record of all rows is maximum . the english title ( chinese title ) record of this row is dark tales ii \u804a\u9f4b ( \u8cb3 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number of episodes } ; english title ( chinese title ) } ; dark tales ii \u804a\u9f4b ( \u8cb3 ) }, interpretation: select the rows whose team record fuzzily matches to golden state . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; golden state } } ; 2 }, interpretation: select the rows whose team record fuzzily matches to golden state . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; golden state } } ; 2 }, interpretation: select the row whose goals against record of all rows is maximum . the club record of this row is abuls smiltene .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals against } ; club } ; abuls smiltene }, interpretation: select the row whose goals against record of all rows is maximum . the club record of this row is abuls smiltene .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; goals against } ; club } ; abuls smiltene }, interpretation: for the points for records of all rows , most of them are greater than 400 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points for ; 400 }, interpretation: for the points for records of all rows , most of them are greater than 400 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points for ; 400 }, interpretation: select the rows whose first elected record is equal to 1941 . there is only one such row in the table . the incumbent record of this unqiue row is thomas j lane .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 1941 } } ; eq { hop { filter_eq { all_rows ; first elected ; 1941 } ; incumbent } ; thomas j lane } }, interpretation: select the rows whose first elected record is equal to 1941 . there is only one such row in the table . the incumbent record of this unqiue row is thomas j lane .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 1941 } } ; eq { hop { filter_eq { all_rows ; first elected ; 1941 } ; incumbent } ; thomas j lane } }, interpretation: select the rows whose year built record is less than 1960 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; year built ; 1960 } } ; 4 }, interpretation: select the rows whose year built record is less than 1960 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; year built ; 1960 } } ; 4 }, interpretation: select the row whose floors record of all rows is 3rd maximum . the name record of this row is h\u00f4tel loews le concorde .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; floors ; 3 } ; name } ; h\u00f4tel loews le concorde }, interpretation: select the row whose floors record of all rows is 3rd maximum . the name record of this row is h\u00f4tel loews le concorde .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; floors ; 3 } ; name } ; h\u00f4tel loews le concorde }, interpretation: select the rows whose format record fuzzily matches to campus radio . there is only one such row in the table . the call sign record of this unqiue row is cfak - fm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; format ; campus radio } } ; eq { hop { filter_eq { all_rows ; format ; campus radio } ; call sign } ; cfak - fm } }, interpretation: select the rows whose format record fuzzily matches to campus radio . there is only one such row in the table . the call sign record of this unqiue row is cfak - fm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; format ; campus radio } } ; eq { hop { filter_eq { all_rows ; format ; campus radio } ; call sign } ; cfak - fm } }, interpretation: the sum of the pts record of all rows is 23 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; pts } ; 23 }, interpretation: the sum of the pts record of all rows is 23 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; pts } ; 23 }, interpretation: select the rows whose broadcast record fuzzily matches to espn . for the attendance records of these rows , most of them are less than 100000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; broadcast ; espn } ; attendance ; 100000 }, interpretation: select the rows whose broadcast record fuzzily matches to espn . for the attendance records of these rows , most of them are less than 100000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; broadcast ; espn } ; attendance ; 100000 }, interpretation: select the rows whose team classification record fuzzily matches to relax - gam . for the sprints classification records of these rows , most of them fuzzily match to v\u00edctor hugo pe\u00f1a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; team classification ; relax - gam } ; sprints classification ; v\u00edctor hugo pe\u00f1a }, interpretation: select the rows whose team classification record fuzzily matches to relax - gam . for the sprints classification records of these rows , most of them fuzzily match to v\u00edctor hugo pe\u00f1a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; team classification ; relax - gam } ; sprints classification ; v\u00edctor hugo pe\u00f1a }, interpretation: select the row whose earnings record of all rows is 2nd maximum . the player record of this row is don january .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; earnings ; 2 } ; player } ; don january }, interpretation: select the row whose earnings record of all rows is 2nd maximum . the player record of this row is don january .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; earnings ; 2 } ; player } ; don january }, interpretation: select the rows whose type record fuzzily matches to retirement . there is only one such row in the table . the name record of this unqiue row is machlas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; type ; retirement } } ; eq { hop { filter_eq { all_rows ; type ; retirement } ; name } ; machlas } }, interpretation: select the rows whose type record fuzzily matches to retirement . there is only one such row in the table . the name record of this unqiue row is machlas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; type ; retirement } } ; eq { hop { filter_eq { all_rows ; type ; retirement } ; name } ; machlas } }, interpretation: select the row whose laps record of all rows is 2nd maximum . the year record of this row is 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; laps ; 2 } ; year } ; 2003 }, interpretation: select the row whose laps record of all rows is 2nd maximum . the year record of this row is 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; laps ; 2 } ; year } ; 2003 }, interpretation: select the rows whose position record fuzzily matches to 8th . there is only one such row in the table . the season record of this unqiue row is 1946 - 47 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; 8th } } ; eq { hop { filter_eq { all_rows ; position ; 8th } ; season } ; 1946 - 47 } }, interpretation: select the rows whose position record fuzzily matches to 8th . there is only one such row in the table . the season record of this unqiue row is 1946 - 47 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; 8th } } ; eq { hop { filter_eq { all_rows ; position ; 8th } ; season } ; 1946 - 47 } }, interpretation: select the row whose laps record of all rows is 2nd minimum . the driver record of this row is graham hill .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; laps ; 2 } ; driver } ; graham hill }, interpretation: select the row whose laps record of all rows is 2nd minimum . the driver record of this row is graham hill .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; laps ; 2 } ; driver } ; graham hill }, interpretation: select the rows whose under - 13 record fuzzily matches to emily park . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; under - 13 ; emily park } } ; 2 }, interpretation: select the rows whose under - 13 record fuzzily matches to emily park . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; under - 13 ; emily park } } ; 2 }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is johnson & wales university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; johnson & wales university }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is johnson & wales university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; johnson & wales university }, interpretation: select the rows whose award record does not match to saturn award . there is only one such row in the table . the year record of this unqiue row is 2010 . the result record of this unqiue row is nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; award ; saturn award } } ; and { eq { hop { filter_not_eq { all_rows ; award ; saturn award } ; year } ; 2010 } ; eq { hop { filter_not_eq { all_rows ; award ; saturn award } ; result } ; nominated } } }, interpretation: select the rows whose award record does not match to saturn award . there is only one such row in the table . the year record of this unqiue row is 2010 . the result record of this unqiue row is nominated .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; award ; saturn award } } ; and { eq { hop { filter_not_eq { all_rows ; award ; saturn award } ; year } ; 2010 } ; eq { hop { filter_not_eq { all_rows ; award ; saturn award } ; result } ; nominated } } }, interpretation: for the date records of all rows , all of them fuzzily match to 23 may 1936 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 23 may 1936 }, interpretation: for the date records of all rows , all of them fuzzily match to 23 may 1936 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 23 may 1936 }, interpretation: the sum of the parishes record of all rows is 3149 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; parishes } ; 3149 }, interpretation: the sum of the parishes record of all rows is 3149 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; parishes } ; 3149 }, interpretation: select the rows whose portfolio attachment record fuzzily matches to food and health . take the age at appointment record of this row . select the rows whose portfolio attachment record fuzzily matches to environment . take the age at appointment record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; portfolio attachment ; food and health } ; age at appointment } ; hop { filter_eq { all_rows ; portfolio attachment ; environment } ; age at appointment } }, interpretation: select the rows whose portfolio attachment record fuzzily matches to food and health . take the age at appointment record of this row . select the rows whose portfolio attachment record fuzzily matches to environment . take the age at appointment record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; portfolio attachment ; food and health } ; age at appointment } ; hop { filter_eq { all_rows ; portfolio attachment ; environment } ; age at appointment } }, interpretation: select the rows whose designated home record fuzzily matches to miami dolphins . take the year record of this row . select the rows whose designated home record fuzzily matches to new orleans saints . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; designated home ; miami dolphins } ; year } ; hop { filter_eq { all_rows ; designated home ; new orleans saints } ; year } }, interpretation: select the rows whose designated home record fuzzily matches to miami dolphins . take the year record of this row . select the rows whose designated home record fuzzily matches to new orleans saints . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; designated home ; miami dolphins } ; year } ; hop { filter_eq { all_rows ; designated home ; new orleans saints } ; year } }, interpretation: select the rows whose date record fuzzily matches to 16 october 2012 . take the score record of this row . select the rows whose date record fuzzily matches to 8 october 2010 . take the score record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; date ; 16 october 2012 } ; score } ; hop { filter_eq { all_rows ; date ; 8 october 2010 } ; score } }, interpretation: select the rows whose date record fuzzily matches to 16 october 2012 . take the score record of this row . select the rows whose date record fuzzily matches to 8 october 2010 . take the score record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; date ; 16 october 2012 } ; score } ; hop { filter_eq { all_rows ; date ; 8 october 2010 } ; score } }, interpretation: the average of the secondary ( 14 - 17 years ) record of all rows is 70.95 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; secondary ( 14 - 17 years ) } ; 70.95 }, interpretation: the average of the secondary ( 14 - 17 years ) record of all rows is 70.95 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; secondary ( 14 - 17 years ) } ; 70.95 }, interpretation: select the rows whose length ( ft ) record fuzzily matches to 40 / 35 . there is only one such row in the table . the order year record of this unqiue row is 20112013 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; length ( ft ) ; 40 / 35 } } ; eq { hop { filter_eq { all_rows ; length ( ft ) ; 40 / 35 } ; order year } ; 20112013 } }, interpretation: select the rows whose length ( ft ) record fuzzily matches to 40 / 35 . there is only one such row in the table . the order year record of this unqiue row is 20112013 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; length ( ft ) ; 40 / 35 } } ; eq { hop { filter_eq { all_rows ; length ( ft ) ; 40 / 35 } ; order year } ; 20112013 } }, interpretation: select the rows whose name record fuzzily matches to padyak pinoy tour pilipinas . take the distance record of this row . select the rows whose name record fuzzily matches to fedex tour of calabarzon . take the distance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; padyak pinoy tour pilipinas } ; distance } ; hop { filter_eq { all_rows ; name ; fedex tour of calabarzon } ; distance } }, interpretation: select the rows whose name record fuzzily matches to padyak pinoy tour pilipinas . take the distance record of this row . select the rows whose name record fuzzily matches to fedex tour of calabarzon . take the distance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; padyak pinoy tour pilipinas } ; distance } ; hop { filter_eq { all_rows ; name ; fedex tour of calabarzon } ; distance } }, interpretation: select the row whose year record of all rows is 1st minimum . the name record of this row is franklin exchange building .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 1 } ; name } ; franklin exchange building }, interpretation: select the row whose year record of all rows is 1st minimum . the name record of this row is franklin exchange building .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 1 } ; name } ; franklin exchange building }, interpretation: select the rows whose home team record fuzzily matches to townsville crocodiles . take the score record of this row . select the rows whose home team record fuzzily matches to cairns taipans . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; townsville crocodiles } ; score } ; hop { filter_eq { all_rows ; home team ; cairns taipans } ; score } }, interpretation: select the rows whose home team record fuzzily matches to townsville crocodiles . take the score record of this row . select the rows whose home team record fuzzily matches to cairns taipans . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; townsville crocodiles } ; score } ; hop { filter_eq { all_rows ; home team ; cairns taipans } ; score } }, interpretation: the average of the deaths record of all rows is 13.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; deaths } ; 13.4 }, interpretation: the average of the deaths record of all rows is 13.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; deaths } ; 13.4 }, interpretation: for the tv time records of all rows , most of them fuzzily match to cbs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tv time ; cbs }, interpretation: for the tv time records of all rows , most of them fuzzily match to cbs .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tv time ; cbs }, interpretation: select the rows whose party record fuzzily matches to democratic . among these rows , select the rows whose first elected record is equal to 1974 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; party ; democratic } ; first elected ; 1974 } } ; 2 }, interpretation: select the rows whose party record fuzzily matches to democratic . among these rows , select the rows whose first elected record is equal to 1974 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; party ; democratic } ; first elected ; 1974 } } ; 2 }, interpretation: select the rows whose distance record fuzzily matches to 1000 m . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; distance ; 1000 m } } ; 4 }, interpretation: select the rows whose distance record fuzzily matches to 1000 m . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; distance ; 1000 m } } ; 4 }, interpretation: select the rows whose venue record fuzzily matches to brunswick street oval . there is only one such row in the table . the home team record of this unqiue row is fitzroy . the away team record of this unqiue row is collingwood .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; brunswick street oval } } ; and { eq { hop { filter_eq { all_rows ; venue ; brunswick street oval } ; home team } ; fitzroy } ; eq { hop { filter_eq { all_rows ; venue ; brunswick street oval } ; away team } ; collingwood } } }, interpretation: select the rows whose venue record fuzzily matches to brunswick street oval . there is only one such row in the table . the home team record of this unqiue row is fitzroy . the away team record of this unqiue row is collingwood .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; brunswick street oval } } ; and { eq { hop { filter_eq { all_rows ; venue ; brunswick street oval } ; home team } ; fitzroy } ; eq { hop { filter_eq { all_rows ; venue ; brunswick street oval } ; away team } ; collingwood } } }, interpretation: the average of the total record of all rows is 147.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 147.4 }, interpretation: the average of the total record of all rows is 147.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 147.4 }, interpretation: for the year joined records of all rows , most of them are less than 1978 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year joined ; 1978 }, interpretation: for the year joined records of all rows , most of them are less than 1978 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year joined ; 1978 }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is overton brooks .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; overton brooks }, interpretation: select the row whose first elected record of all rows is 1st minimum . the incumbent record of this row is overton brooks .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 1 } ; incumbent } ; overton brooks }, interpretation: select the rows whose date record fuzzily matches to 2010 . the sum of the score record of these rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 2010 } ; score } ; 8 }, interpretation: select the rows whose date record fuzzily matches to 2010 . the sum of the score record of these rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 2010 } ; score } ; 8 }, interpretation: select the rows whose goals record is equal to 10 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; goals ; 10 } } ; 5 }, interpretation: select the rows whose goals record is equal to 10 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; goals ; 10 } } ; 5 }, interpretation: the average of the frequency record of all rows is 95.9 mega hertz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; frequency } ; 95.9 mega hertz }, interpretation: the average of the frequency record of all rows is 95.9 mega hertz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; frequency } ; 95.9 mega hertz }, interpretation: select the rows whose college record fuzzily matches to ohio state . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college ; ohio state } } ; 3 }, interpretation: select the rows whose college record fuzzily matches to ohio state . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college ; ohio state } } ; 3 }, interpretation: select the row whose wins record of all rows is maximum . the season record of this row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; season } ; 2007 }, interpretation: select the row whose wins record of all rows is maximum . the season record of this row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; season } ; 2007 }, interpretation: select the rows whose nationality record fuzzily matches to greece . there is only one such row in the table . the name record of this unqiue row is anastasios gousis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; greece } } ; eq { hop { filter_eq { all_rows ; nationality ; greece } ; name } ; anastasios gousis } }, interpretation: select the rows whose nationality record fuzzily matches to greece . there is only one such row in the table . the name record of this unqiue row is anastasios gousis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; greece } } ; eq { hop { filter_eq { all_rows ; nationality ; greece } ; name } ; anastasios gousis } }, interpretation: select the rows whose pole position record fuzzily matches to chris goodwin andrew kirkaldy . there is only one such row in the table . the round record of this unqiue row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pole position ; chris goodwin andrew kirkaldy } } ; eq { hop { filter_eq { all_rows ; pole position ; chris goodwin andrew kirkaldy } ; round } ; 5 } }, interpretation: select the rows whose pole position record fuzzily matches to chris goodwin andrew kirkaldy . there is only one such row in the table . the round record of this unqiue row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; pole position ; chris goodwin andrew kirkaldy } } ; eq { hop { filter_eq { all_rows ; pole position ; chris goodwin andrew kirkaldy } ; round } ; 5 } }, interpretation: select the row whose max altitude ( miles ) record of all rows is maximum . the pilot record of this row is joseph a walker .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; max altitude ( miles ) } ; pilot } ; joseph a walker }, interpretation: select the row whose max altitude ( miles ) record of all rows is maximum . the pilot record of this row is joseph a walker .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; max altitude ( miles ) } ; pilot } ; joseph a walker }, interpretation: select the rows whose 2006 record fuzzily matches to 1r . there is only one such row in the table . the tournament record of this unqiue row is australian open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2006 ; 1r } } ; eq { hop { filter_eq { all_rows ; 2006 ; 1r } ; tournament } ; australian open } }, interpretation: select the rows whose 2006 record fuzzily matches to 1r . there is only one such row in the table . the tournament record of this unqiue row is australian open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 2006 ; 1r } } ; eq { hop { filter_eq { all_rows ; 2006 ; 1r } ; tournament } ; australian open } }, interpretation: the average of the purse record of all rows is 163250 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; purse } ; 163250 }, interpretation: the average of the purse record of all rows is 163250 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; purse } ; 163250 }, interpretation: select the rows whose opponent record fuzzily matches to larry reynolds . take the date record of this row . select the rows whose opponent record fuzzily matches to junior pitbull . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; larry reynolds } ; date } ; hop { filter_eq { all_rows ; opponent ; junior pitbull } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to larry reynolds . take the date record of this row . select the rows whose opponent record fuzzily matches to junior pitbull . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; larry reynolds } ; date } ; hop { filter_eq { all_rows ; opponent ; junior pitbull } ; date } }, interpretation: select the rows whose date record fuzzily matches to december 1976 . for the result records of these rows , all of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; december 1976 } ; result ; w }, interpretation: select the rows whose date record fuzzily matches to december 1976 . for the result records of these rows , all of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; date ; december 1976 } ; result ; w }, interpretation: for the away team score records of all rows , most of them are greater than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; away team score ; 10 }, interpretation: for the away team score records of all rows , most of them are greater than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; away team score ; 10 }, interpretation: select the rows whose sport record fuzzily matches to ice hockey . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; sport ; ice hockey } } ; 3 }, interpretation: select the rows whose sport record fuzzily matches to ice hockey . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; sport ; ice hockey } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to finland . there is only one such row in the table . the company record of this unqiue row is stonesoft .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; finland } } ; eq { hop { filter_eq { all_rows ; country ; finland } ; company } ; stonesoft } }, interpretation: select the rows whose country record fuzzily matches to finland . there is only one such row in the table . the company record of this unqiue row is stonesoft .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; finland } } ; eq { hop { filter_eq { all_rows ; country ; finland } ; company } ; stonesoft } }, interpretation: select the row whose time record of all rows is minimum . the country record of this row is slovenia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; country } ; slovenia }, interpretation: select the row whose time record of all rows is minimum . the country record of this row is slovenia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; country } ; slovenia }, interpretation: select the rows whose floors record is equal to 32 . there is only one such row in the table . the name record of this unqiue row is at & t building .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; floors ; 32 } } ; eq { hop { filter_eq { all_rows ; floors ; 32 } ; name } ; at & t building } }, interpretation: select the rows whose floors record is equal to 32 . there is only one such row in the table . the name record of this unqiue row is at & t building .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; floors ; 32 } } ; eq { hop { filter_eq { all_rows ; floors ; 32 } ; name } ; at & t building } }, interpretation: for the prize records of all rows , most of them are greater than 500,000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; prize ; 500,000 }, interpretation: for the prize records of all rows , most of them are greater than 500,000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; prize ; 500,000 }, interpretation: the average of the times contested record of all rows is 2.17 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; times contested } ; 2.17 }, interpretation: the average of the times contested record of all rows is 2.17 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; times contested } ; 2.17 }, interpretation: select the rows whose points against record is greater than 500 . the sum of the lost record of these rows is 44 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater { all_rows ; points against ; 500 } ; lost } ; 44 }, interpretation: select the rows whose points against record is greater than 500 . the sum of the lost record of these rows is 44 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater { all_rows ; points against ; 500 } ; lost } ; 44 }, interpretation: select the rows whose drawn record is equal to 2 . there is only one such row in the table . the club record of this unqiue row is abercynon rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; drawn ; 2 } } ; eq { hop { filter_eq { all_rows ; drawn ; 2 } ; club } ; abercynon rfc } }, interpretation: select the rows whose drawn record is equal to 2 . there is only one such row in the table . the club record of this unqiue row is abercynon rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; drawn ; 2 } } ; eq { hop { filter_eq { all_rows ; drawn ; 2 } ; club } ; abercynon rfc } }, interpretation: select the rows whose school / club team record fuzzily matches to university of texas at arlington . the sum of the overall record of these rows is 308 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; school / club team ; university of texas at arlington } ; overall } ; 308 }, interpretation: select the rows whose school / club team record fuzzily matches to university of texas at arlington . the sum of the overall record of these rows is 308 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; school / club team ; university of texas at arlington } ; overall } ; 308 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 12 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 12 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 10 }, interpretation: select the rows whose venue record fuzzily matches to colombo . there is only one such row in the table . the date record of this unqiue row is 6 june 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; colombo } } ; eq { hop { filter_eq { all_rows ; venue ; colombo } ; date } ; 6 june 2008 } }, interpretation: select the rows whose venue record fuzzily matches to colombo . there is only one such row in the table . the date record of this unqiue row is 6 june 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; colombo } } ; eq { hop { filter_eq { all_rows ; venue ; colombo } ; date } ; 6 june 2008 } }, interpretation: select the row whose time record of all rows is 3rd minimum . the name record of this row is marianne limpert .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; name } ; marianne limpert }, interpretation: select the row whose time record of all rows is 3rd minimum . the name record of this row is marianne limpert .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; name } ; marianne limpert }, interpretation: select the rows whose cfl team record fuzzily matches to ottawa renegades . take the pick record of this row . select the rows whose cfl team record fuzzily matches to bc lions . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; cfl team ; ottawa renegades } ; pick } ; hop { filter_eq { all_rows ; cfl team ; bc lions } ; pick } }, interpretation: select the rows whose cfl team record fuzzily matches to ottawa renegades . take the pick record of this row . select the rows whose cfl team record fuzzily matches to bc lions . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; cfl team ; ottawa renegades } ; pick } ; hop { filter_eq { all_rows ; cfl team ; bc lions } ; pick } }, interpretation: for the certification records of all rows , most of them fuzzily match to platinum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; certification ; platinum }, interpretation: for the certification records of all rows , most of them fuzzily match to platinum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; certification ; platinum }, interpretation: select the rows whose branch record fuzzily matches to us marine corps . there is only one such row in the table . the name record of this unqiue row is general james l jones .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; branch ; us marine corps } } ; eq { hop { filter_eq { all_rows ; branch ; us marine corps } ; name } ; general james l jones } }, interpretation: select the rows whose branch record fuzzily matches to us marine corps . there is only one such row in the table . the name record of this unqiue row is general james l jones .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; branch ; us marine corps } } ; eq { hop { filter_eq { all_rows ; branch ; us marine corps } ; name } ; general james l jones } }, interpretation: select the rows whose court surface record fuzzily matches to hard . among these rows , select the rows whose location record fuzzily matches to shanghai . there is only one such row in the table . the tournament record of this unqiue row is shanghai masters .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; court surface ; hard } ; location ; shanghai } } ; eq { hop { filter_eq { filter_eq { all_rows ; court surface ; hard } ; location ; shanghai } ; tournament } ; shanghai masters } }, interpretation: select the rows whose court surface record fuzzily matches to hard . among these rows , select the rows whose location record fuzzily matches to shanghai . there is only one such row in the table . the tournament record of this unqiue row is shanghai masters .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; court surface ; hard } ; location ; shanghai } } ; eq { hop { filter_eq { filter_eq { all_rows ; court surface ; hard } ; location ; shanghai } ; tournament } ; shanghai masters } }, interpretation: select the row whose margin of victory record of all rows is maximum . the champion record of this row is jiyai shin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin of victory } ; champion } ; jiyai shin }, interpretation: select the row whose margin of victory record of all rows is maximum . the champion record of this row is jiyai shin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin of victory } ; champion } ; jiyai shin }, interpretation: for the trainer records of all rows , most of them fuzzily match to christophe clement .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; trainer ; christophe clement }, interpretation: for the trainer records of all rows , most of them fuzzily match to christophe clement .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; trainer ; christophe clement }, interpretation: select the rows whose candidate ( party ) record fuzzily matches to joseph estrada ( pmp ) . take the spent per voter ( php ) record of this row . select the rows whose candidate ( party ) record fuzzily matches to jejomar binay ( pdp - laban ) . take the spent per voter ( php ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; candidate ( party ) ; joseph estrada ( pmp ) } ; spent per voter ( php ) } ; hop { filter_eq { all_rows ; candidate ( party ) ; jejomar binay ( pdp - laban ) } ; spent per voter ( php ) } }, interpretation: select the rows whose candidate ( party ) record fuzzily matches to joseph estrada ( pmp ) . take the spent per voter ( php ) record of this row . select the rows whose candidate ( party ) record fuzzily matches to jejomar binay ( pdp - laban ) . take the spent per voter ( php ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; candidate ( party ) ; joseph estrada ( pmp ) } ; spent per voter ( php ) } ; hop { filter_eq { all_rows ; candidate ( party ) ; jejomar binay ( pdp - laban ) } ; spent per voter ( php ) } }, interpretation: select the rows whose location record fuzzily matches to savannah . there is only one such row in the table . the opponent record of this unqiue row is michael buchkovich .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; savannah } } ; eq { hop { filter_eq { all_rows ; location ; savannah } ; opponent } ; michael buchkovich } }, interpretation: select the rows whose location record fuzzily matches to savannah . there is only one such row in the table . the opponent record of this unqiue row is michael buchkovich .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; savannah } } ; eq { hop { filter_eq { all_rows ; location ; savannah } ; opponent } ; michael buchkovich } }, interpretation: select the rows whose location attendance record does not match to staples center . for the location attendance records of these rows , all of them are greater than 18500 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_not_eq { all_rows ; location attendance ; staples center } ; location attendance ; 18500 }, interpretation: select the rows whose location attendance record does not match to staples center . for the location attendance records of these rows , all of them are greater than 18500 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_not_eq { all_rows ; location attendance ; staples center } ; location attendance ; 18500 }, interpretation: select the rows whose date record fuzzily matches to january 31 , 2008 . take the score record of this row . select the rows whose date record fuzzily matches to january 26 , 2008 . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; january 31 , 2008 } ; score } ; hop { filter_eq { all_rows ; date ; january 26 , 2008 } ; score } }, interpretation: select the rows whose date record fuzzily matches to january 31 , 2008 . take the score record of this row . select the rows whose date record fuzzily matches to january 26 , 2008 . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; january 31 , 2008 } ; score } ; hop { filter_eq { all_rows ; date ; january 26 , 2008 } ; score } }, interpretation: select the rows whose position record fuzzily matches to 6th . there is only one such row in the table . the year record of this unqiue row is 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; 6th } } ; eq { hop { filter_eq { all_rows ; position ; 6th } ; year } ; 2005 } }, interpretation: select the rows whose position record fuzzily matches to 6th . there is only one such row in the table . the year record of this unqiue row is 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; 6th } } ; eq { hop { filter_eq { all_rows ; position ; 6th } ; year } ; 2005 } }, interpretation: select the rows whose venue record fuzzily matches to concord oval , sydney . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; concord oval , sydney } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to concord oval , sydney . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; concord oval , sydney } } ; 3 }, interpretation: select the row whose height ( m ) record of all rows is 2nd maximum . the name record of this row is messeturm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ( m ) ; 2 } ; name } ; messeturm }, interpretation: select the row whose height ( m ) record of all rows is 2nd maximum . the name record of this row is messeturm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ( m ) ; 2 } ; name } ; messeturm }, interpretation: select the rows whose country of origin record fuzzily matches to united kingdom . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country of origin ; united kingdom } } ; 4 }, interpretation: select the rows whose country of origin record fuzzily matches to united kingdom . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country of origin ; united kingdom } } ; 4 }, interpretation: select the row whose length record of all rows is maximum . the line color record of this row is orange .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; line color } ; orange }, interpretation: select the row whose length record of all rows is maximum . the line color record of this row is orange .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; line color } ; orange }, interpretation: the average of the duration record of all rows is 54 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; duration } ; 54 }, interpretation: the average of the duration record of all rows is 54 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; duration } ; 54 }, interpretation: select the rows whose speed record is greater than 70 mph . there is only one such row in the table . the model record of this unqiue row is gyro drop .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; speed ; 70 mph } } ; eq { hop { filter_greater { all_rows ; speed ; 70 mph } ; model } ; gyro drop } }, interpretation: select the rows whose speed record is greater than 70 mph . there is only one such row in the table . the model record of this unqiue row is gyro drop .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; speed ; 70 mph } } ; eq { hop { filter_greater { all_rows ; speed ; 70 mph } ; model } ; gyro drop } }, interpretation: select the row whose 2011 gdp ( ppp ) billions of usd record of all rows is maximum . the country record of this row is iran .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2011 gdp ( ppp ) billions of usd } ; country } ; iran }, interpretation: select the row whose 2011 gdp ( ppp ) billions of usd record of all rows is maximum . the country record of this row is iran .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 2011 gdp ( ppp ) billions of usd } ; country } ; iran }, interpretation: select the rows whose venue record fuzzily matches to municipal stadium , pozna\u0144 . the 3rd minimum date record of these rows is 14 june 2012 . the date record of the row with 3rd minimum date record is 14 june 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { filter_eq { all_rows ; venue ; municipal stadium , pozna\u0144 } ; date ; 3 } ; 14 june 2012 } ; eq { hop { nth_argmin { filter_eq { all_rows ; venue ; municipal stadium , pozna\u0144 } ; date ; 3 } ; date } ; 14 june 2012 } }, interpretation: select the rows whose venue record fuzzily matches to municipal stadium , pozna\u0144 . the 3rd minimum date record of these rows is 14 june 2012 . the date record of the row with 3rd minimum date record is 14 june 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { filter_eq { all_rows ; venue ; municipal stadium , pozna\u0144 } ; date ; 3 } ; 14 june 2012 } ; eq { hop { nth_argmin { filter_eq { all_rows ; venue ; municipal stadium , pozna\u0144 } ; date ; 3 } ; date } ; 14 june 2012 } }, interpretation: the average of the capacity record of all rows is 29830 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 29830 }, interpretation: the average of the capacity record of all rows is 29830 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 29830 }, interpretation: select the rows whose type record fuzzily matches to first . among these rows , select the rows whose intake record is equal to 30 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; type ; first } ; intake ; 30 } } ; 4 }, interpretation: select the rows whose type record fuzzily matches to first . among these rows , select the rows whose intake record is equal to 30 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; type ; first } ; intake ; 30 } } ; 4 }, interpretation: select the rows whose directed by record fuzzily matches to jonathan frakes . among these rows , select the rows whose written by record fuzzily matches to linda mcgibney . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; jonathan frakes } ; written by ; linda mcgibney } } ; 2 }, interpretation: select the rows whose directed by record fuzzily matches to jonathan frakes . among these rows , select the rows whose written by record fuzzily matches to linda mcgibney . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; jonathan frakes } ; written by ; linda mcgibney } } ; 2 }, interpretation: select the rows whose high rebounds record fuzzily matches to udonis haslem . among these rows , select the rows whose high assists record fuzzily matches to dwyane wade . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; high rebounds ; udonis haslem } ; high assists ; dwyane wade } } ; 3 }, interpretation: select the rows whose high rebounds record fuzzily matches to udonis haslem . among these rows , select the rows whose high assists record fuzzily matches to dwyane wade . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; high rebounds ; udonis haslem } ; high assists ; dwyane wade } } ; 3 }, interpretation: select the rows whose asts record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; asts ; 0 } } ; 2 }, interpretation: select the rows whose asts record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; asts ; 0 } } ; 2 }, interpretation: select the rows whose incumbent record fuzzily matches to noah m mason . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to sid simpson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; noah m mason } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; sid simpson } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to noah m mason . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to sid simpson . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; noah m mason } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; sid simpson } ; first elected } }, interpretation: select the rows whose bronze record is equal to 2 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; 2 } } ; 5 }, interpretation: select the rows whose bronze record is equal to 2 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bronze ; 2 } } ; 5 }, interpretation: select the row whose time record of all rows is maximum . the game record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time } ; game } ; 1 }, interpretation: select the row whose time record of all rows is maximum . the game record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; time } ; game } ; 1 }, interpretation: select the rows whose womens singles record fuzzily matches to zhou mi . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; womens singles ; zhou mi } }, interpretation: select the rows whose womens singles record fuzzily matches to zhou mi . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; womens singles ; zhou mi } }, interpretation: select the row whose bronze record of all rows is 2nd maximum . the nation record of this row is netherlands .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; bronze ; 2 } ; nation } ; netherlands }, interpretation: select the row whose bronze record of all rows is 2nd maximum . the nation record of this row is netherlands .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; bronze ; 2 } ; nation } ; netherlands }, interpretation: select the rows whose june 10 - 11 record fuzzily matches to june 10 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; june 10 - 11 ; june 10 } } ; 2 }, interpretation: select the rows whose june 10 - 11 record fuzzily matches to june 10 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; june 10 - 11 ; june 10 } } ; 2 }, interpretation: the sum of the casinos record of all rows is 217 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; casinos } ; 217 }, interpretation: the sum of the casinos record of all rows is 217 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; casinos } ; 217 }, interpretation: the sum of the crowd record of all rows is 123128 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 123128 }, interpretation: the sum of the crowd record of all rows is 123128 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 123128 }, interpretation: select the row whose quantity made record of all rows is 4th maximum . the class record of this row is c .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; quantity made ; 4 } ; class } ; c }, interpretation: select the row whose quantity made record of all rows is 4th maximum . the class record of this row is c .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; quantity made ; 4 } ; class } ; c }, interpretation: for the high rebounds records of all rows , most of them fuzzily match to donyell marshall .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high rebounds ; donyell marshall }, interpretation: for the high rebounds records of all rows , most of them fuzzily match to donyell marshall .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high rebounds ; donyell marshall }, interpretation: select the rows whose attendance record is less than 1500 . there is only one such row in the table . the date record of this unqiue row is april 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; attendance ; 1500 } } ; eq { hop { filter_less { all_rows ; attendance ; 1500 } ; date } ; april 18 } }, interpretation: select the rows whose attendance record is less than 1500 . there is only one such row in the table . the date record of this unqiue row is april 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; attendance ; 1500 } } ; eq { hop { filter_less { all_rows ; attendance ; 1500 } ; date } ; april 18 } }, interpretation: select the rows whose player record fuzzily matches to curtis hunt . take the rd record of this row . select the rows whose player record fuzzily matches to carl valimont . take the rd record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; curtis hunt } ; rd } ; hop { filter_eq { all_rows ; player ; carl valimont } ; rd } }, interpretation: select the rows whose player record fuzzily matches to curtis hunt . take the rd record of this row . select the rows whose player record fuzzily matches to carl valimont . take the rd record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; curtis hunt } ; rd } ; hop { filter_eq { all_rows ; player ; carl valimont } ; rd } }, interpretation: the average of the candidates record of all rows is 58.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 58.3 }, interpretation: the average of the candidates record of all rows is 58.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 58.3 }, interpretation: select the row whose current streak record of all rows is 2nd maximum . the missouri vs record of this row is drake .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; current streak ; 2 } ; missouri vs } ; drake }, interpretation: select the row whose current streak record of all rows is 2nd maximum . the missouri vs record of this row is drake .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; current streak ; 2 } ; missouri vs } ; drake }, interpretation: select the rows whose status record fuzzily matches to second test . there is only one such row in the table . the opposing team record of this unqiue row is argentina . the date record of this unqiue row is 4 august 1990 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; second test } } ; and { eq { hop { filter_eq { all_rows ; status ; second test } ; opposing team } ; argentina } ; eq { hop { filter_eq { all_rows ; status ; second test } ; date } ; 4 august 1990 } } }, interpretation: select the rows whose status record fuzzily matches to second test . there is only one such row in the table . the opposing team record of this unqiue row is argentina . the date record of this unqiue row is 4 august 1990 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; second test } } ; and { eq { hop { filter_eq { all_rows ; status ; second test } ; opposing team } ; argentina } ; eq { hop { filter_eq { all_rows ; status ; second test } ; date } ; 4 august 1990 } } }, interpretation: select the rows whose womens singles record fuzzily matches to zhang yining . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; womens singles ; zhang yining } } ; 4 }, interpretation: select the rows whose womens singles record fuzzily matches to zhang yining . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; womens singles ; zhang yining } } ; 4 }, interpretation: select the row whose frequency ( khz ) record of all rows is maximum . the call letters record of this row is kwrd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency ( khz ) } ; call letters } ; kwrd }, interpretation: select the row whose frequency ( khz ) record of all rows is maximum . the call letters record of this row is kwrd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency ( khz ) } ; call letters } ; kwrd }, interpretation: for the nationality records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; united states }, interpretation: for the nationality records of all rows , all of them fuzzily match to united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; united states }, interpretation: select the rows whose segment b record fuzzily matches to fig cookies . take the episode record of this row . select the rows whose segment b record fuzzily matches to house paint . take the episode record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; segment b ; fig cookies } ; episode } ; hop { filter_eq { all_rows ; segment b ; house paint } ; episode } }, interpretation: select the rows whose segment b record fuzzily matches to fig cookies . take the episode record of this row . select the rows whose segment b record fuzzily matches to house paint . take the episode record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; segment b ; fig cookies } ; episode } ; hop { filter_eq { all_rows ; segment b ; house paint } ; episode } }, interpretation: for the manner of departure records of all rows , most of them fuzzily match to sacked .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; manner of departure ; sacked }, interpretation: the sum of the points record of all rows is 1,357 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 1,357 }, interpretation: the sum of the points record of all rows is 1,357 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 1,357 }, interpretation: select the row whose census ranking record of all rows is 2nd minimum . the official name record of this row is dieppe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; census ranking ; 2 } ; official name } ; dieppe }, interpretation: select the row whose census ranking record of all rows is 2nd minimum . the official name record of this row is dieppe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; census ranking ; 2 } ; official name } ; dieppe }, interpretation: for the score records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; score ; w }, interpretation: select the rows whose nationality record fuzzily matches to portuguese . there is only one such row in the table . the elector record of this unqiue row is jo\u00e3o pedro juli\u00e3o .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; portuguese } } ; eq { hop { filter_eq { all_rows ; nationality ; portuguese } ; elector } ; jo\u00e3o pedro juli\u00e3o } }, interpretation: select the rows whose nationality record fuzzily matches to portuguese . there is only one such row in the table . the elector record of this unqiue row is jo\u00e3o pedro juli\u00e3o .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; portuguese } } ; eq { hop { filter_eq { all_rows ; nationality ; portuguese } ; elector } ; jo\u00e3o pedro juli\u00e3o } }, interpretation: select the rows whose nation record fuzzily matches to germany . take the silver record of this row . select the rows whose nation record fuzzily matches to united states . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; germany } ; silver } ; hop { filter_eq { all_rows ; nation ; united states } ; silver } }, interpretation: select the rows whose nation record fuzzily matches to germany . take the silver record of this row . select the rows whose nation record fuzzily matches to united states . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; germany } ; silver } ; hop { filter_eq { all_rows ; nation ; united states } ; silver } }, interpretation: select the rows whose us viewers ( million ) record is greater than 11.0 . there is only one such row in the table . the no record of this unqiue row is 1 . the title record of this unqiue row is two of a kind .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; us viewers ( million ) ; 11.0 } } ; and { eq { hop { filter_greater { all_rows ; us viewers ( million ) ; 11.0 } ; no } ; 1 } ; eq { hop { filter_greater { all_rows ; us viewers ( million ) ; 11.0 } ; title } ; two of a kind } } }, interpretation: select the rows whose us viewers ( million ) record is greater than 11.0 . there is only one such row in the table . the no record of this unqiue row is 1 . the title record of this unqiue row is two of a kind .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; us viewers ( million ) ; 11.0 } } ; and { eq { hop { filter_greater { all_rows ; us viewers ( million ) ; 11.0 } ; no } ; 1 } ; eq { hop { filter_greater { all_rows ; us viewers ( million ) ; 11.0 } ; title } ; two of a kind } } }, interpretation: select the rows whose title record fuzzily matches to capybara . take the originalairdate record of this row . select the rows whose title record fuzzily matches to the sleep of babies . take the originalairdate record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; title ; capybara } ; originalairdate } ; hop { filter_eq { all_rows ; title ; the sleep of babies } ; originalairdate } } ; -7 days }, interpretation: select the rows whose title record fuzzily matches to capybara . take the originalairdate record of this row . select the rows whose title record fuzzily matches to the sleep of babies . take the originalairdate record of this row . the second record is 7 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; title ; capybara } ; originalairdate } ; hop { filter_eq { all_rows ; title ; the sleep of babies } ; originalairdate } } ; -7 days }, interpretation: select the rows whose event record fuzzily matches to ept baden classic . take the prize record of this row . select the rows whose event record fuzzily matches to the european poker championships . take the prize record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; event ; ept baden classic } ; prize } ; hop { filter_eq { all_rows ; event ; the european poker championships } ; prize } }, interpretation: select the rows whose event record fuzzily matches to ept baden classic . take the prize record of this row . select the rows whose event record fuzzily matches to the european poker championships . take the prize record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; event ; ept baden classic } ; prize } ; hop { filter_eq { all_rows ; event ; the european poker championships } ; prize } }, interpretation: select the row whose earnings record of all rows is 2nd maximum . the player record of this row is tom watson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; earnings ; 2 } ; player } ; tom watson }, interpretation: select the row whose earnings record of all rows is 2nd maximum . the player record of this row is tom watson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; earnings ; 2 } ; player } ; tom watson }, interpretation: select the row whose react record of all rows is minimum . the athlete record of this row is tyler christopher .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; react } ; athlete } ; tyler christopher }, interpretation: select the row whose react record of all rows is minimum . the athlete record of this row is tyler christopher .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; react } ; athlete } ; tyler christopher }, interpretation: select the rows whose year record is equal to 1975 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 1975 } } ; 3 }, interpretation: select the rows whose year record is equal to 1975 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; year ; 1975 } } ; 3 }, interpretation: select the rows whose tournament record fuzzily matches to taipei , taiwan . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; taipei , taiwan } } ; 2 }, interpretation: select the rows whose tournament record fuzzily matches to taipei , taiwan . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; taipei , taiwan } } ; 2 }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is france .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; france }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is france .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; france }, interpretation: select the rows whose origin record fuzzily matches to france . there is only one such row in the table . the aircraft record of this unqiue row is aerospatiale as 365 dauphin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; origin ; france } } ; eq { hop { filter_eq { all_rows ; origin ; france } ; aircraft } ; aerospatiale as 365 dauphin } }, interpretation: select the rows whose origin record fuzzily matches to france . there is only one such row in the table . the aircraft record of this unqiue row is aerospatiale as 365 dauphin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; origin ; france } } ; eq { hop { filter_eq { all_rows ; origin ; france } ; aircraft } ; aerospatiale as 365 dauphin } }, interpretation: select the rows whose game site record fuzzily matches to bears stadium . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; game site ; bears stadium } } ; 6 }, interpretation: select the rows whose game site record fuzzily matches to bears stadium . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; game site ; bears stadium } } ; 6 }, interpretation: select the rows whose rank record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 1 } } ; 2 }, interpretation: select the rows whose rank record is equal to 1 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 1 } } ; 2 }, interpretation: select the row whose area km 2 record of all rows is maximum . the official name record of this row is elgin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; area km 2 } ; official name } ; elgin }, interpretation: select the row whose area km 2 record of all rows is maximum . the official name record of this row is elgin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; area km 2 } ; official name } ; elgin }, interpretation: the sum of the bb + hbp record of all rows is 580 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; bb + hbp } ; 580 }, interpretation: the sum of the bb + hbp record of all rows is 580 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; bb + hbp } ; 580 }, interpretation: select the rows whose goal difference record is equal to 0 . there is only one such row in the table . the club record of this unqiue row is c\u00f3rdoba cf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goal difference ; 0 } } ; eq { hop { filter_eq { all_rows ; goal difference ; 0 } ; club } ; c\u00f3rdoba cf } }, interpretation: select the rows whose goal difference record is equal to 0 . there is only one such row in the table . the club record of this unqiue row is c\u00f3rdoba cf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goal difference ; 0 } } ; eq { hop { filter_eq { all_rows ; goal difference ; 0 } ; club } ; c\u00f3rdoba cf } }, interpretation: for the date records of all rows , all of them fuzzily match to 198 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 198 }, interpretation: for the date records of all rows , all of them fuzzily match to 198 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 198 }, interpretation: for the winner records of all rows , most of them fuzzily match to new york giants .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winner ; new york giants }, interpretation: for the winner records of all rows , most of them fuzzily match to new york giants .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; winner ; new york giants }, interpretation: select the row whose time record of all rows is minimum . the name record of this row is tyson gay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; name } ; tyson gay }, interpretation: select the row whose time record of all rows is minimum . the name record of this row is tyson gay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; time } ; name } ; tyson gay }, interpretation: the average of the candidates record of all rows is 76.075 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 76.075 % }, interpretation: the average of the candidates record of all rows is 76.075 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 76.075 % }, interpretation: for the played records of all rows , all of them are equal to 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 14 }, interpretation: for the played records of all rows , all of them are equal to 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 14 }, interpretation: the average of the attendance record of all rows is 28,610 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 28,610 }, interpretation: the average of the attendance record of all rows is 28,610 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 28,610 }, interpretation: the average of the enrollment record of all rows is 3284 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 3284 }, interpretation: the average of the enrollment record of all rows is 3284 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 3284 }, interpretation: select the row whose foundation record of all rows is 2nd minimum . the organization record of this row is r\u00e0dio televisi\u00f3 valenciana ( rtvv ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; foundation ; 2 } ; organization } ; r\u00e0dio televisi\u00f3 valenciana ( rtvv ) }, interpretation: select the row whose foundation record of all rows is 2nd minimum . the organization record of this row is r\u00e0dio televisi\u00f3 valenciana ( rtvv ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; foundation ; 2 } ; organization } ; r\u00e0dio televisi\u00f3 valenciana ( rtvv ) }, interpretation: select the row whose population record of all rows is maximum . the official name record of this row is moncton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; official name } ; moncton }, interpretation: select the row whose population record of all rows is maximum . the official name record of this row is moncton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; official name } ; moncton }, interpretation: the 4th minimum year record of all rows is 1985 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; year ; 4 } ; 1985 }, interpretation: the 4th minimum year record of all rows is 1985 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { all_rows ; year ; 4 } ; 1985 }, interpretation: select the rows whose battling partners record fuzzily matches to donald bradman and sid barnes . take the runs record of this row . select the rows whose battling partners record fuzzily matches to pat symcox and mark boucher . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; battling partners ; donald bradman and sid barnes } ; runs } ; hop { filter_eq { all_rows ; battling partners ; pat symcox and mark boucher } ; runs } }, interpretation: select the rows whose battling partners record fuzzily matches to donald bradman and sid barnes . take the runs record of this row . select the rows whose battling partners record fuzzily matches to pat symcox and mark boucher . take the runs record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; battling partners ; donald bradman and sid barnes } ; runs } ; hop { filter_eq { all_rows ; battling partners ; pat symcox and mark boucher } ; runs } }, interpretation: select the row whose total ( kg ) record of all rows is maximum . the name record of this row is idalberto aranda ( cub ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total ( kg ) } ; name } ; idalberto aranda ( cub ) }, interpretation: select the row whose total ( kg ) record of all rows is maximum . the name record of this row is idalberto aranda ( cub ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total ( kg ) } ; name } ; idalberto aranda ( cub ) }, interpretation: select the rows whose result record fuzzily matches to 3-1 . there is only one such row in the table . the date record of this unqiue row is 15 august 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 3-1 } } ; eq { hop { filter_eq { all_rows ; result ; 3-1 } ; date } ; 15 august 2012 } }, interpretation: select the rows whose result record fuzzily matches to 3-1 . there is only one such row in the table . the date record of this unqiue row is 15 august 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 3-1 } } ; eq { hop { filter_eq { all_rows ; result ; 3-1 } ; date } ; 15 august 2012 } }, interpretation: select the rows whose loser record fuzzily matches to iceland . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; loser ; iceland } } ; 1 }, interpretation: select the rows whose loser record fuzzily matches to iceland . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; loser ; iceland } } ; 1 }, interpretation: select the rows whose attendance record is less than 40000 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; attendance ; 40000 } } ; 1 }, interpretation: select the rows whose attendance record is less than 40000 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { all_rows ; attendance ; 40000 } } ; 1 }, interpretation: select the rows whose home team record fuzzily matches to richmond . take the crowd record of this row . select the rows whose home team record fuzzily matches to geelong . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; richmond } ; crowd } ; hop { filter_eq { all_rows ; home team ; geelong } ; crowd } }, interpretation: select the rows whose home team record fuzzily matches to richmond . take the crowd record of this row . select the rows whose home team record fuzzily matches to geelong . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; richmond } ; crowd } ; hop { filter_eq { all_rows ; home team ; geelong } ; crowd } }, interpretation: the average of the total record of all rows is 284.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 284.5 }, interpretation: the average of the total record of all rows is 284.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 284.5 }, interpretation: for the points records of all rows , most of them are less than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 10 }, interpretation: for the points records of all rows , most of them are less than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 10 }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is 23 may 2002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; 23 may 2002 }, interpretation: select the row whose score record of all rows is maximum . the date record of this row is 23 may 2002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; score } ; date } ; 23 may 2002 }, interpretation: the average of the viewers ( in millions ) record of all rows is 9.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers ( in millions ) } ; 9.1 }, interpretation: the average of the viewers ( in millions ) record of all rows is 9.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers ( in millions ) } ; 9.1 }, interpretation: select the row whose commercial operation record of all rows is minimum . the unit record of this row is hamaoka - 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; commercial operation } ; unit } ; hamaoka - 1 }, interpretation: select the row whose commercial operation record of all rows is minimum . the unit record of this row is hamaoka - 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; commercial operation } ; unit } ; hamaoka - 1 }, interpretation: select the rows whose city of license record fuzzily matches to santa elena . there is only one such row in the table . the brand record of this unqiue row is la poderosa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; city of license ; santa elena } } ; eq { hop { filter_eq { all_rows ; city of license ; santa elena } ; brand } ; la poderosa } }, interpretation: select the rows whose city of license record fuzzily matches to santa elena . there is only one such row in the table . the brand record of this unqiue row is la poderosa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; city of license ; santa elena } } ; eq { hop { filter_eq { all_rows ; city of license ; santa elena } ; brand } ; la poderosa } }, interpretation: the sum of the us viewers ( in millions ) record of all rows is 62.28 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; us viewers ( in millions ) } ; 62.28 }, interpretation: the sum of the us viewers ( in millions ) record of all rows is 62.28 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; us viewers ( in millions ) } ; 62.28 }, interpretation: select the rows whose home team score record is greater than 12 . among these rows , select the rows whose crowd record is less than 20000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; home team score ; 12 } ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose home team score record is greater than 12 . among these rows , select the rows whose crowd record is less than 20000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; home team score ; 12 } ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose away team score record is less than 11.0 . among these rows , select the rows whose crowd record is greater than 15000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_less { all_rows ; away team score ; 11.0 } ; crowd ; 15000 } } ; 2 }, interpretation: select the rows whose away team score record is less than 11.0 . among these rows , select the rows whose crowd record is greater than 15000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_less { all_rows ; away team score ; 11.0 } ; crowd ; 15000 } } ; 2 }, interpretation: select the rows whose first elected record is equal to 2002 . there is only one such row in the table . the incumbent record of this unqiue row is chris chocola .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 2002 } } ; eq { hop { filter_eq { all_rows ; first elected ; 2002 } ; incumbent } ; chris chocola } }, interpretation: select the rows whose first elected record is equal to 2002 . there is only one such row in the table . the incumbent record of this unqiue row is chris chocola .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; first elected ; 2002 } } ; eq { hop { filter_eq { all_rows ; first elected ; 2002 } ; incumbent } ; chris chocola } }, interpretation: select the rows whose home record fuzzily matches to detroit . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; home ; detroit } } ; 3 }, interpretation: select the rows whose home record fuzzily matches to detroit . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; home ; detroit } } ; 3 }, interpretation: select the rows whose pole position record fuzzily matches to mattias ekstr\u00f6m . take the date record of this row . select the rows whose pole position record fuzzily matches to oliver jarvis . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; pole position ; mattias ekstr\u00f6m } ; date } ; hop { filter_eq { all_rows ; pole position ; oliver jarvis } ; date } }, interpretation: select the rows whose pole position record fuzzily matches to mattias ekstr\u00f6m . take the date record of this row . select the rows whose pole position record fuzzily matches to oliver jarvis . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; pole position ; mattias ekstr\u00f6m } ; date } ; hop { filter_eq { all_rows ; pole position ; oliver jarvis } ; date } }, interpretation: select the rows whose release date record fuzzily matches to august . there is only one such row in the table . the song record of this unqiue row is here it comes .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; release date ; august } } ; eq { hop { filter_eq { all_rows ; release date ; august } ; song } ; here it comes } }, interpretation: select the rows whose release date record fuzzily matches to august . there is only one such row in the table . the song record of this unqiue row is here it comes .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; release date ; august } } ; eq { hop { filter_eq { all_rows ; release date ; august } ; song } ; here it comes } }, interpretation: the sum of the worcs f - c matches record of all rows is 1239 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; worcs f - c matches } ; 1239 }, interpretation: the sum of the worcs f - c matches record of all rows is 1239 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; worcs f - c matches } ; 1239 }, interpretation: select the rows whose result record fuzzily matches to w . among these rows , select the rows whose stadium record fuzzily matches to war memorial stadium . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; w } ; stadium ; war memorial stadium } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to w . among these rows , select the rows whose stadium record fuzzily matches to war memorial stadium . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; result ; w } ; stadium ; war memorial stadium } } ; 2 }, interpretation: for the partner records of all rows , most of them fuzzily match to app .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; partner ; app }, interpretation: for the partner records of all rows , most of them fuzzily match to app .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; partner ; app }, interpretation: select the rows whose engine record fuzzily matches to v6 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; engine ; v6 } } ; 4 }, interpretation: select the rows whose engine record fuzzily matches to v6 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; engine ; v6 } } ; 4 }, interpretation: select the row whose screen pixels record of all rows is maximum . the maker record of this row is apple inc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; screen pixels } ; maker } ; apple inc }, interpretation: select the row whose screen pixels record of all rows is maximum . the maker record of this row is apple inc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; screen pixels } ; maker } ; apple inc }, interpretation: the average of the points record of all rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 7 }, interpretation: the average of the points record of all rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 7 }, interpretation: the sum of the points record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 2 }, interpretation: the sum of the points record of all rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 2 }, interpretation: the average of the score record of all rows is 19.05 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 19.05 }, interpretation: the average of the score record of all rows is 19.05 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 19.05 }, interpretation: select the rows whose name record fuzzily matches to kevin barnett . take the weight record of this row . select the rows whose name record fuzzily matches to gabriel gardner . take the weight record of this row . the second record is 9 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; kevin barnett } ; weight } ; hop { filter_eq { all_rows ; name ; gabriel gardner } ; weight } } ; -9 }, interpretation: select the rows whose name record fuzzily matches to kevin barnett . take the weight record of this row . select the rows whose name record fuzzily matches to gabriel gardner . take the weight record of this row . the second record is 9 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; kevin barnett } ; weight } ; hop { filter_eq { all_rows ; name ; gabriel gardner } ; weight } } ; -9 }, interpretation: the average of the yards record of all rows is 888.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; yards } ; 888.8 }, interpretation: the average of the yards record of all rows is 888.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; yards } ; 888.8 }, interpretation: select the rows whose date record fuzzily matches to october . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; october } } ; 8 }, interpretation: select the rows whose date record fuzzily matches to october . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; october } } ; 8 }, interpretation: for the station type records of all rows , most of them fuzzily match to relay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; station type ; relay }, interpretation: for the station type records of all rows , most of them fuzzily match to relay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; station type ; relay }, interpretation: select the rows whose record fuzzily matches to thailand . take the total freshwater withdrawal record of this row . select the rows whose record fuzzily matches to ecuador . take the total freshwater withdrawal record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; ; thailand } ; total freshwater withdrawal } ; hop { filter_eq { all_rows ; ; ecuador } ; total freshwater withdrawal } }, interpretation: select the rows whose record fuzzily matches to thailand . take the total freshwater withdrawal record of this row . select the rows whose record fuzzily matches to ecuador . take the total freshwater withdrawal record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; ; thailand } ; total freshwater withdrawal } ; hop { filter_eq { all_rows ; ; ecuador } ; total freshwater withdrawal } }, interpretation: for the us viewers ( million ) records of all rows , most of them are greater than or equal to 1.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; us viewers ( million ) ; 1.0 }, interpretation: for the us viewers ( million ) records of all rows , most of them are greater than or equal to 1.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; us viewers ( million ) ; 1.0 }, interpretation: select the rows whose away losses record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; away losses ; 0 } } ; 4 }, interpretation: select the rows whose away losses record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; away losses ; 0 } } ; 4 }, interpretation: select the rows whose 1st leg record fuzzily matches to 0-0 . there is only one such row in the table . the team 1 record of this unqiue row is s\u00e3o paulo . the team 2 record of this unqiue row is nacional .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 1st leg ; 0-0 } } ; and { eq { hop { filter_eq { all_rows ; 1st leg ; 0-0 } ; team 1 } ; s\u00e3o paulo } ; eq { hop { filter_eq { all_rows ; 1st leg ; 0-0 } ; team 2 } ; nacional } } }, interpretation: select the rows whose 1st leg record fuzzily matches to 0-0 . there is only one such row in the table . the team 1 record of this unqiue row is s\u00e3o paulo . the team 2 record of this unqiue row is nacional .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 1st leg ; 0-0 } } ; and { eq { hop { filter_eq { all_rows ; 1st leg ; 0-0 } ; team 1 } ; s\u00e3o paulo } ; eq { hop { filter_eq { all_rows ; 1st leg ; 0-0 } ; team 2 } ; nacional } } }, interpretation: select the row whose wins record of all rows is 2nd maximum . the team record of this row is cerro porte\u00f1o .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; wins ; 2 } ; team } ; cerro porte\u00f1o }, interpretation: select the row whose wins record of all rows is 2nd maximum . the team record of this row is cerro porte\u00f1o .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; wins ; 2 } ; team } ; cerro porte\u00f1o }, interpretation: select the row whose score record of all rows is minimum . the player record of this row is tze - chung chen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; score } ; player } ; tze - chung chen }, interpretation: select the row whose score record of all rows is minimum . the player record of this row is tze - chung chen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; score } ; player } ; tze - chung chen }, interpretation: select the rows whose opponent record fuzzily matches to boston bruins . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; boston bruins } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to boston bruins . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; boston bruins } } ; 2 }, interpretation: select the row whose entry date record of all rows is minimum . the single record of this row is meet me halfway .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; entry date } ; single } ; meet me halfway }, interpretation: select the row whose entry date record of all rows is minimum . the single record of this row is meet me halfway .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; entry date } ; single } ; meet me halfway }, interpretation: select the rows whose tournament record fuzzily matches to china . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; tournament ; china } }, interpretation: select the rows whose tournament record fuzzily matches to china . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; tournament ; china } }, interpretation: select the row whose frequency mhz record of all rows is maximum . the call sign record of this row is w300bn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency mhz } ; call sign } ; w300bn }, interpretation: select the row whose frequency mhz record of all rows is maximum . the call sign record of this row is w300bn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency mhz } ; call sign } ; w300bn }, interpretation: select the rows whose location attendance record fuzzily matches to izod center . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; location attendance ; izod center } }, interpretation: select the rows whose location attendance record fuzzily matches to izod center . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; location attendance ; izod center } }, interpretation: for the chassis records of all rows , most of them fuzzily match to dallara .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; dallara }, interpretation: for the chassis records of all rows , most of them fuzzily match to dallara .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; dallara }, interpretation: for the no of installments records of all rows , most of them are less than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; no of installments ; 100 }, interpretation: for the no of installments records of all rows , most of them are less than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; no of installments ; 100 }, interpretation: the 1st maximum margin record of all rows is 66 . the opponent record of the row with 1st maximum margin record is south sydney rabbitohs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; margin ; 1 } ; 66 } ; eq { hop { nth_argmax { all_rows ; margin ; 1 } ; opponent } ; south sydney rabbitohs } }, interpretation: the 1st maximum margin record of all rows is 66 . the opponent record of the row with 1st maximum margin record is south sydney rabbitohs .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_max { all_rows ; margin ; 1 } ; 66 } ; eq { hop { nth_argmax { all_rows ; margin ; 1 } ; opponent } ; south sydney rabbitohs } }, interpretation: select the rows whose position record fuzzily matches to forward . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; forward } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to forward . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; forward } } ; 3 }, interpretation: select the rows whose team record is arbitrary . the number of such rows is 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; team } } ; 18 }, interpretation: select the rows whose team record is arbitrary . the number of such rows is 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; team } } ; 18 }, interpretation: select the rows whose film title used in nomination record fuzzily matches to ten canoes . take the year ( ceremony ) record of this row . select the rows whose film title used in nomination record fuzzily matches to the home song stories . take the year ( ceremony ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; film title used in nomination ; ten canoes } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; film title used in nomination ; the home song stories } ; year ( ceremony ) } }, interpretation: select the rows whose film title used in nomination record fuzzily matches to ten canoes . take the year ( ceremony ) record of this row . select the rows whose film title used in nomination record fuzzily matches to the home song stories . take the year ( ceremony ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; film title used in nomination ; ten canoes } ; year ( ceremony ) } ; hop { filter_eq { all_rows ; film title used in nomination ; the home song stories } ; year ( ceremony ) } }, interpretation: for the result records of all rows , all of them fuzzily match to not nominated .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; result ; not nominated }, interpretation: select the rows whose directed by record fuzzily matches to stephen kay . among these rows , select the rows whose written by record fuzzily matches to norman morrill . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; stephen kay } ; written by ; norman morrill } } ; 2 }, interpretation: select the rows whose directed by record fuzzily matches to stephen kay . among these rows , select the rows whose written by record fuzzily matches to norman morrill . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; stephen kay } ; written by ; norman morrill } } ; 2 }, interpretation: select the rows whose points record is greater than 10 . among these rows , select the rows whose lost record is equal to 2 . there is only one such row in the table . the team record of this unqiue row is stal gorz\u00f3w wlkp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_greater { all_rows ; points ; 10 } ; lost ; 2 } } ; eq { hop { filter_eq { filter_greater { all_rows ; points ; 10 } ; lost ; 2 } ; team } ; stal gorz\u00f3w wlkp } }, interpretation: select the rows whose points record is greater than 10 . among these rows , select the rows whose lost record is equal to 2 . there is only one such row in the table . the team record of this unqiue row is stal gorz\u00f3w wlkp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_greater { all_rows ; points ; 10 } ; lost ; 2 } } ; eq { hop { filter_eq { filter_greater { all_rows ; points ; 10 } ; lost ; 2 } ; team } ; stal gorz\u00f3w wlkp } }, interpretation: select the rows whose resolution record fuzzily matches to committed suicide . there is only one such row in the table . the name record of this unqiue row is jos\u00e9 manuel balmaceda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; resolution ; committed suicide } } ; eq { hop { filter_eq { all_rows ; resolution ; committed suicide } ; name } ; jos\u00e9 manuel balmaceda } }, interpretation: select the rows whose resolution record fuzzily matches to committed suicide . there is only one such row in the table . the name record of this unqiue row is jos\u00e9 manuel balmaceda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; resolution ; committed suicide } } ; eq { hop { filter_eq { all_rows ; resolution ; committed suicide } ; name } ; jos\u00e9 manuel balmaceda } }, interpretation: select the rows whose high rebounds record fuzzily matches to tim duncan . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; tim duncan } } ; 11 }, interpretation: select the rows whose high rebounds record fuzzily matches to tim duncan . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; tim duncan } } ; 11 }, interpretation: select the rows whose eliminated by record fuzzily matches to n / a . there is only one such row in the table . the wrestler record of this unqiue row is triple h .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; eliminated by ; n / a } } ; eq { hop { filter_eq { all_rows ; eliminated by ; n / a } ; wrestler } ; triple h } }, interpretation: select the rows whose eliminated by record fuzzily matches to n / a . there is only one such row in the table . the wrestler record of this unqiue row is triple h .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; eliminated by ; n / a } } ; eq { hop { filter_eq { all_rows ; eliminated by ; n / a } ; wrestler } ; triple h } }, interpretation: select the rows whose incumbent record fuzzily matches to joe hendricks . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to robert l f sikes . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; joe hendricks } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; robert l f sikes } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to joe hendricks . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to robert l f sikes . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; joe hendricks } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; robert l f sikes } ; first elected } }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is october 21 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; october 21 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is october 21 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; october 21 }, interpretation: select the rows whose date record fuzzily matches to florida . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; date ; florida } }, interpretation: select the rows whose date record fuzzily matches to florida . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; date ; florida } }, interpretation: select the rows whose season record fuzzily matches to 2010 . take the races record of this row . select the rows whose season record fuzzily matches to 2012 . take the races record of this row . the first record is 6 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; season ; 2010 } ; races } ; hop { filter_eq { all_rows ; season ; 2012 } ; races } } ; 6 }, interpretation: select the rows whose season record fuzzily matches to 2010 . take the races record of this row . select the rows whose season record fuzzily matches to 2012 . take the races record of this row . the first record is 6 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; season ; 2010 } ; races } ; hop { filter_eq { all_rows ; season ; 2012 } ; races } } ; 6 }, interpretation: select the rows whose artist record fuzzily matches to bun b . take the number of reviews record of this row . select the rows whose artist record fuzzily matches to black milk . take the number of reviews record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; bun b } ; number of reviews } ; hop { filter_eq { all_rows ; artist ; black milk } ; number of reviews } }, interpretation: select the rows whose artist record fuzzily matches to bun b . take the number of reviews record of this row . select the rows whose artist record fuzzily matches to black milk . take the number of reviews record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; artist ; bun b } ; number of reviews } ; hop { filter_eq { all_rows ; artist ; black milk } ; number of reviews } }, interpretation: select the rows whose 1st place team record fuzzily matches to mary star all - stars . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st place team ; mary star all - stars } } ; 5 }, interpretation: select the rows whose 1st place team record fuzzily matches to mary star all - stars . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st place team ; mary star all - stars } } ; 5 }, interpretation: select the rows whose winning driver record fuzzily matches to craig baird . among these rows , select the rows whose location record fuzzily matches to melbourne , victoria . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winning driver ; craig baird } ; location ; melbourne , victoria } } ; 2 }, interpretation: select the rows whose winning driver record fuzzily matches to craig baird . among these rows , select the rows whose location record fuzzily matches to melbourne , victoria . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winning driver ; craig baird } ; location ; melbourne , victoria } } ; 2 }, interpretation: select the rows whose commissioned or completed record fuzzily matches to 1864 . for the laid down records of these rows , all of them are equal to 1862 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; commissioned or completed ; 1864 } ; laid down ; 1862 }, interpretation: select the rows whose commissioned or completed record fuzzily matches to 1864 . for the laid down records of these rows , all of them are equal to 1862 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { filter_eq { all_rows ; commissioned or completed ; 1864 } ; laid down ; 1862 }, interpretation: select the rows whose site record fuzzily matches to memorial stadium minneapolis , mn . for the attendance records of these rows , most of them are greater than 24999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; site ; memorial stadium minneapolis , mn } ; attendance ; 24999 }, interpretation: select the rows whose site record fuzzily matches to memorial stadium minneapolis , mn . for the attendance records of these rows , most of them are greater than 24999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; site ; memorial stadium minneapolis , mn } ; attendance ; 24999 }, interpretation: the average of the crowd record of all rows is 13000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 13000 }, interpretation: the average of the crowd record of all rows is 13000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 13000 }, interpretation: select the row whose result record of all rows is 2nd maximum . the result record of this row is mac collins ( r ) 61.11 % jim chafin ( d ) 38.89 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; result ; 2 } ; result } ; mac collins ( r ) 61.11 % jim chafin ( d ) 38.89 % }, interpretation: select the row whose result record of all rows is 2nd maximum . the result record of this row is mac collins ( r ) 61.11 % jim chafin ( d ) 38.89 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; result ; 2 } ; result } ; mac collins ( r ) 61.11 % jim chafin ( d ) 38.89 % }, interpretation: the average of the apparent magnitude record of all rows is 11.7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; apparent magnitude } ; 11.7 }, interpretation: the average of the apparent magnitude record of all rows is 11.7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; apparent magnitude } ; 11.7 }, interpretation: select the rows whose status record fuzzily matches to village . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; village } } ; 4 }, interpretation: select the rows whose status record fuzzily matches to village . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; status ; village } } ; 4 }, interpretation: select the row whose date record of all rows is minimum . the stadium record of this row is port macquarie regional stadium .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; stadium } ; port macquarie regional stadium }, interpretation: select the row whose date record of all rows is minimum . the stadium record of this row is port macquarie regional stadium .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; date } ; stadium } ; port macquarie regional stadium }, interpretation: for the previous conference records of all rows , most of them fuzzily match to independents .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; previous conference ; independents }, interpretation: select the row whose commissioned record of all rows is 2nd maximum . the name record of this row is chieftain .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; commissioned ; 2 } ; name } ; chieftain }, interpretation: select the row whose commissioned record of all rows is 2nd maximum . the name record of this row is chieftain .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; commissioned ; 2 } ; name } ; chieftain }, interpretation: the average of the attendance record of all rows is 66000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 66000 }, interpretation: the average of the attendance record of all rows is 66000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 66000 }, interpretation: the average of the viewers record of all rows is 44 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers } ; 44 }, interpretation: the average of the viewers record of all rows is 44 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewers } ; 44 }, interpretation: select the rows whose coach record fuzzily matches to steve mcnamara . among these rows , select the rows whose captain record fuzzily matches to paul deacon . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; coach ; steve mcnamara } ; captain ; paul deacon } } ; 3 }, interpretation: select the rows whose coach record fuzzily matches to steve mcnamara . among these rows , select the rows whose captain record fuzzily matches to paul deacon . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; coach ; steve mcnamara } ; captain ; paul deacon } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to november . for the result records of these rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; november } ; result ; w }, interpretation: select the rows whose date record fuzzily matches to november . for the result records of these rows , most of them fuzzily match to w .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; november } ; result ; w }, interpretation: for the population records of all rows , most of them are less than 1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; population ; 1000 }, interpretation: for the population records of all rows , most of them are less than 1000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; population ; 1000 }, interpretation: select the rows whose year record fuzzily matches to 2006 details . take the player of the tournament record of this row . select the rows whose year record fuzzily matches to 2005 details . take the player of the tournament record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2006 details } ; player of the tournament } ; hop { filter_eq { all_rows ; year ; 2005 details } ; player of the tournament } }, interpretation: select the rows whose year record fuzzily matches to 2006 details . take the player of the tournament record of this row . select the rows whose year record fuzzily matches to 2005 details . take the player of the tournament record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2006 details } ; player of the tournament } ; hop { filter_eq { all_rows ; year ; 2005 details } ; player of the tournament } }, interpretation: for the country records of all rows , most of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; canada }, interpretation: for the country records of all rows , most of them fuzzily match to canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; canada }, interpretation: select the rows whose standing record fuzzily matches to 1st . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; standing ; 1st } } ; 4 }, interpretation: select the rows whose standing record fuzzily matches to 1st . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; standing ; 1st } } ; 4 }, interpretation: select the rows whose original air date record fuzzily matches to 2012 . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; 2012 } } ; 9 }, interpretation: select the rows whose original air date record fuzzily matches to 2012 . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; original air date ; 2012 } } ; 9 }, interpretation: the average of the wins record of all rows is 10.9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; 10.9 }, interpretation: the average of the wins record of all rows is 10.9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; 10.9 }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: for the result records of all rows , most of them fuzzily match to aus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; aus }, interpretation: for the result records of all rows , most of them fuzzily match to aus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; aus }, interpretation: select the rows whose away team record fuzzily matches to richmond . take the away team score record of this row . select the rows whose away team record fuzzily matches to swans . take the away team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; hop { filter_eq { all_rows ; away team ; swans } ; away team score } }, interpretation: select the rows whose away team record fuzzily matches to richmond . take the away team score record of this row . select the rows whose away team record fuzzily matches to swans . take the away team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; away team ; richmond } ; away team score } ; hop { filter_eq { all_rows ; away team ; swans } ; away team score } }, interpretation: select the rows whose competition record is arbitrary . the number of such rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; competition } } ; 10 }, interpretation: select the rows whose competition record is arbitrary . the number of such rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; competition } } ; 10 }, interpretation: select the rows whose indian scorers record fuzzily matches to own goal . there is only one such row in the table . the date record of this unqiue row is 23 june 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; indian scorers ; own goal } } ; eq { hop { filter_eq { all_rows ; indian scorers ; own goal } ; date } ; 23 june 2011 } }, interpretation: select the rows whose indian scorers record fuzzily matches to own goal . there is only one such row in the table . the date record of this unqiue row is 23 june 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; indian scorers ; own goal } } ; eq { hop { filter_eq { all_rows ; indian scorers ; own goal } ; date } ; 23 june 2011 } }, interpretation: select the rows whose reason for change record fuzzily matches to to enter the us army . there is only one such row in the table . the vacator record of this unqiue row is charles i faddis ( d ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; to enter the us army } } ; eq { hop { filter_eq { all_rows ; reason for change ; to enter the us army } ; vacator } ; charles i faddis ( d ) } }, interpretation: select the rows whose reason for change record fuzzily matches to to enter the us army . there is only one such row in the table . the vacator record of this unqiue row is charles i faddis ( d ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; to enter the us army } } ; eq { hop { filter_eq { all_rows ; reason for change ; to enter the us army } ; vacator } ; charles i faddis ( d ) } }, interpretation: select the row whose total goals record of all rows is 2nd maximum . the total appearances record of this row is 371 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total goals ; 2 } ; total appearances } ; 371 }, interpretation: select the row whose total goals record of all rows is 2nd maximum . the total appearances record of this row is 371 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total goals ; 2 } ; total appearances } ; 371 }, interpretation: select the rows whose year record is equal to 2013 . the sum of the result record of these rows is over 50 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 2013 } ; result } ; over 50 }, interpretation: select the rows whose year record is equal to 2013 . the sum of the result record of these rows is over 50 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 2013 } ; result } ; over 50 }, interpretation: select the rows whose year record is equal to 2005 . there is only one such row in the table . the group record of this unqiue row is method fest independent film festival .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2005 } } ; eq { hop { filter_eq { all_rows ; year ; 2005 } ; group } ; method fest independent film festival } }, interpretation: select the rows whose year record is equal to 2005 . there is only one such row in the table . the group record of this unqiue row is method fest independent film festival .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2005 } } ; eq { hop { filter_eq { all_rows ; year ; 2005 } ; group } ; method fest independent film festival } }, interpretation: for the division records of all rows , most of them fuzzily match to pdl .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; division ; pdl }, interpretation: for the division records of all rows , most of them fuzzily match to pdl .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; division ; pdl }, interpretation: select the rows whose competition record fuzzily matches to friendly . there is only one such row in the table . the date record of this unqiue row is 15 august 2012 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; friendly } } ; eq { hop { filter_eq { all_rows ; competition ; friendly } ; date } ; 15 august 2012 } }, interpretation: select the rows whose competition record fuzzily matches to friendly . there is only one such row in the table . the date record of this unqiue row is 15 august 2012 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; friendly } } ; eq { hop { filter_eq { all_rows ; competition ; friendly } ; date } ; 15 august 2012 } }, interpretation: select the rows whose school record fuzzily matches to triton . take the year joined record of this row . select the rows whose school record fuzzily matches to oak hill . take the year joined record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; school ; triton } ; year joined } ; hop { filter_eq { all_rows ; school ; oak hill } ; year joined } }, interpretation: select the rows whose school record fuzzily matches to triton . take the year joined record of this row . select the rows whose school record fuzzily matches to oak hill . take the year joined record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; school ; triton } ; year joined } ; hop { filter_eq { all_rows ; school ; oak hill } ; year joined } }, interpretation: for the top - 10 records of all rows , most of them are greater than 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; top - 10 ; 0 }, interpretation: for the top - 10 records of all rows , most of them are greater than 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; top - 10 ; 0 }, interpretation: for the date records of all rows , all of them fuzzily match to 21 july 1951 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 21 july 1951 }, interpretation: for the date records of all rows , all of them fuzzily match to 21 july 1951 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 21 july 1951 }, interpretation: for the time / retired records of all rows , most of them are greater than or equal to 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; time / retired ; 2 }, interpretation: for the time / retired records of all rows , most of them are greater than or equal to 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; time / retired ; 2 }, interpretation: select the rows whose written by record fuzzily matches to lucy watkins . there is only one such row in the table . the title record of this unqiue row is sweet dreams .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; lucy watkins } } ; eq { hop { filter_eq { all_rows ; written by ; lucy watkins } ; title } ; sweet dreams } }, interpretation: select the rows whose written by record fuzzily matches to lucy watkins . there is only one such row in the table . the title record of this unqiue row is sweet dreams .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; written by ; lucy watkins } } ; eq { hop { filter_eq { all_rows ; written by ; lucy watkins } ; title } ; sweet dreams } }, interpretation: for the event records of all rows , most of them fuzzily match to 110 m hurdles .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; 110 m hurdles }, interpretation: for the event records of all rows , most of them fuzzily match to 110 m hurdles .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; 110 m hurdles }, interpretation: for the year joined records of all rows , most of them are equal to 1998 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; year joined ; 1998 }, interpretation: for the year joined records of all rows , most of them are equal to 1998 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; year joined ; 1998 }, interpretation: the average of the attendance record of all rows is 24652 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 24652 }, interpretation: the average of the attendance record of all rows is 24652 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 24652 }, interpretation: the average of the profit ( mil ) record of all rows is 121.66 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; profit ( mil ) } ; 121.66 }, interpretation: the average of the profit ( mil ) record of all rows is 121.66 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; profit ( mil ) } ; 121.66 }, interpretation: for the score records of all rows , most of them are greater than or equal to 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; score ; 5 }, interpretation: for the score records of all rows , most of them are greater than or equal to 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; score ; 5 }, interpretation: select the rows whose date record fuzzily matches to 3 june 1935 . for the crowd records of these rows , most of them are greater than 22000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; date ; 3 june 1935 } ; crowd ; 22000 }, interpretation: select the rows whose date record fuzzily matches to 3 june 1935 . for the crowd records of these rows , most of them are greater than 22000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; date ; 3 june 1935 } ; crowd ; 22000 }, interpretation: the sum of the money record of all rows is 1497 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; money } ; 1497 }, interpretation: the sum of the money record of all rows is 1497 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; money } ; 1497 }, interpretation: for the date records of all rows , most of them fuzzily match to may .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; may }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the date record of this row is february 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; date } ; february 16 }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the date record of this row is february 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; date } ; february 16 }, interpretation: the sum of the crowd record of all rows is 91651 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 91651 }, interpretation: the sum of the crowd record of all rows is 91651 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 91651 }, interpretation: select the rows whose opponent record fuzzily matches to buffalo bills . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; buffalo bills } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to buffalo bills . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; buffalo bills } } ; 2 }, interpretation: the average of the earnings record of all rows is 424466 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; 424466 }, interpretation: the average of the earnings record of all rows is 424466 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; earnings } ; 424466 }, interpretation: select the row whose points record of all rows is 2nd maximum . the club record of this row is ud salamanca .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; club } ; ud salamanca }, interpretation: select the row whose points record of all rows is 2nd maximum . the club record of this row is ud salamanca .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; club } ; ud salamanca }, interpretation: select the rows whose station record fuzzily matches to great notch . take the closed record of this row . select the rows whose station record fuzzily matches to finderne . take the closed record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; station ; great notch } ; closed } ; hop { filter_eq { all_rows ; station ; finderne } ; closed } }, interpretation: select the rows whose station record fuzzily matches to great notch . take the closed record of this row . select the rows whose station record fuzzily matches to finderne . take the closed record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; station ; great notch } ; closed } ; hop { filter_eq { all_rows ; station ; finderne } ; closed } }, interpretation: for the format records of all rows , most of them fuzzily match to cd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; cd }, interpretation: for the format records of all rows , most of them fuzzily match to cd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; format ; cd }, interpretation: select the rows whose semifinalists record is equal to 1 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; semifinalists ; 1 } } ; 3 }, interpretation: select the rows whose semifinalists record is equal to 1 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; semifinalists ; 1 } } ; 3 }, interpretation: select the row whose total record of all rows is 2nd maximum . the athlete record of this row is monica pinette .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; athlete } ; monica pinette }, interpretation: select the row whose total record of all rows is 2nd maximum . the athlete record of this row is monica pinette .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 2 } ; athlete } ; monica pinette }, interpretation: select the rows whose earnings record is greater than 4000000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; earnings ; 4000000 } } ; 2 }, interpretation: select the rows whose earnings record is greater than 4000000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; earnings ; 4000000 } } ; 2 }, interpretation: select the rows whose language form record fuzzily matches to nynorsk . select the row whose area record of these rows is 2nd maximum . the name record of this row is samnanger .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; language form ; nynorsk } ; area ; 2 } ; name } ; samnanger }, interpretation: select the rows whose language form record fuzzily matches to nynorsk . select the row whose area record of these rows is 2nd maximum . the name record of this row is samnanger .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; language form ; nynorsk } ; area ; 2 } ; name } ; samnanger }, interpretation: select the row whose total record of all rows is maximum . the country record of this row is france .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; country } ; france }, interpretation: select the row whose total record of all rows is maximum . the country record of this row is france .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; country } ; france }, interpretation: select the rows whose section of atlantic city record fuzzily matches to uptown . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; section of atlantic city ; uptown } } ; 4 }, interpretation: select the rows whose section of atlantic city record fuzzily matches to uptown . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; section of atlantic city ; uptown } } ; 4 }, interpretation: select the rows whose player record fuzzily matches to gus otto . take the pick record of this row . select the rows whose player record fuzzily matches to otis taylor . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; gus otto } ; pick } ; hop { filter_eq { all_rows ; player ; otis taylor } ; pick } }, interpretation: select the rows whose player record fuzzily matches to gus otto . take the pick record of this row . select the rows whose player record fuzzily matches to otis taylor . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; gus otto } ; pick } ; hop { filter_eq { all_rows ; player ; otis taylor } ; pick } }, interpretation: the average of the races record of all rows is 16.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; races } ; 16.6 }, interpretation: the average of the races record of all rows is 16.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; races } ; 16.6 }, interpretation: select the rows whose year record fuzzily matches to 1992 . take the avg finish record of this row . select the rows whose year record fuzzily matches to 1994 . take the avg finish record of this row . the first record is equal to the second record . the avg finish record of the first row is 28.0 . the avg finish record of the second row is 28.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; year ; 1992 } ; avg finish } ; hop { filter_eq { all_rows ; year ; 1994 } ; avg finish } } ; and { eq { hop { filter_eq { all_rows ; year ; 1992 } ; avg finish } ; 28.0 } ; eq { hop { filter_eq { all_rows ; year ; 1994 } ; avg finish } ; 28.0 } } }, interpretation: select the rows whose year record fuzzily matches to 1992 . take the avg finish record of this row . select the rows whose year record fuzzily matches to 1994 . take the avg finish record of this row . the first record is equal to the second record . the avg finish record of the first row is 28.0 . the avg finish record of the second row is 28.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; year ; 1992 } ; avg finish } ; hop { filter_eq { all_rows ; year ; 1994 } ; avg finish } } ; and { eq { hop { filter_eq { all_rows ; year ; 1992 } ; avg finish } ; 28.0 } ; eq { hop { filter_eq { all_rows ; year ; 1994 } ; avg finish } ; 28.0 } } }, interpretation: select the row whose winners share record of all rows is 2nd maximum . the date record of this row is 12 aug 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winners share ; 2 } ; date } ; 12 aug 2007 }, interpretation: select the row whose winners share record of all rows is 2nd maximum . the date record of this row is 12 aug 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winners share ; 2 } ; date } ; 12 aug 2007 }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: select the rows whose home team record fuzzily matches to carlton . take the home team score record of this row . select the rows whose home team record fuzzily matches to footscray . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; carlton } ; home team score } ; hop { filter_eq { all_rows ; home team ; footscray } ; home team score } }, interpretation: select the rows whose home team record fuzzily matches to carlton . take the home team score record of this row . select the rows whose home team record fuzzily matches to footscray . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; carlton } ; home team score } ; hop { filter_eq { all_rows ; home team ; footscray } ; home team score } }, interpretation: the sum of the score record of all rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 10 }, interpretation: the sum of the score record of all rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 10 }, interpretation: select the rows whose elevated record fuzzily matches to 1117 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; elevated ; 1117 } } ; 3 }, interpretation: select the rows whose elevated record fuzzily matches to 1117 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; elevated ; 1117 } } ; 3 }, interpretation: for the introduction records of all rows , all of them fuzzily match to 12 december 1928 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; introduction ; 12 december 1928 }, interpretation: for the introduction records of all rows , all of them fuzzily match to 12 december 1928 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; introduction ; 12 december 1928 }, interpretation: for the team records of all rows , most of them fuzzily match to motopark academy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; motopark academy }, interpretation: for the team records of all rows , most of them fuzzily match to motopark academy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; team ; motopark academy }, interpretation: select the rows whose weight ( kg ) record is equal to 53 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; weight ( kg ) ; 53 } }, interpretation: select the rows whose weight ( kg ) record is equal to 53 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; weight ( kg ) ; 53 } }, interpretation: select the row whose overall record of all rows is 3rd maximum . the name record of this row is jeff grau .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; overall ; 3 } ; name } ; jeff grau }, interpretation: select the row whose overall record of all rows is 3rd maximum . the name record of this row is jeff grau .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; overall ; 3 } ; name } ; jeff grau }, interpretation: select the rows whose country record fuzzily matches to bosnia and herzegovina . there is only one such row in the table . the film record of this unqiue row is prva plata .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; bosnia and herzegovina } } ; eq { hop { filter_eq { all_rows ; country ; bosnia and herzegovina } ; film } ; prva plata } }, interpretation: select the rows whose country record fuzzily matches to bosnia and herzegovina . there is only one such row in the table . the film record of this unqiue row is prva plata .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; bosnia and herzegovina } } ; eq { hop { filter_eq { all_rows ; country ; bosnia and herzegovina } ; film } ; prva plata } }, interpretation: select the row whose population ( 2011 ) record of all rows is maximum . the settlement record of this row is srpska crnja .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population ( 2011 ) } ; settlement } ; srpska crnja }, interpretation: select the row whose population ( 2011 ) record of all rows is maximum . the settlement record of this row is srpska crnja .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population ( 2011 ) } ; settlement } ; srpska crnja }, interpretation: select the rows whose event record fuzzily matches to 10000 m . take the position record of this row . select the rows whose event record fuzzily matches to 5000 m . take the position record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; event ; 10000 m } ; position } ; hop { filter_eq { all_rows ; event ; 5000 m } ; position } }, interpretation: select the rows whose event record fuzzily matches to 10000 m . take the position record of this row . select the rows whose event record fuzzily matches to 5000 m . take the position record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; event ; 10000 m } ; position } ; hop { filter_eq { all_rows ; event ; 5000 m } ; position } }, interpretation: select the row whose votes record of all rows is maximum . the candidate 's name record of this row is scott simms .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; votes } ; candidate 's name } ; scott simms }, interpretation: select the row whose votes record of all rows is maximum . the candidate 's name record of this row is scott simms .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; votes } ; candidate 's name } ; scott simms }, interpretation: select the row whose total record of all rows is maximum . the name record of this row is ivo laku\u010ds ( lat ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; name } ; ivo laku\u010ds ( lat ) }, interpretation: select the row whose total record of all rows is maximum . the name record of this row is ivo laku\u010ds ( lat ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; name } ; ivo laku\u010ds ( lat ) }, interpretation: select the rows whose engine record fuzzily matches to 16v . the maximum displacement record of these rows is 1596 cc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; engine ; 16v } ; displacement } ; 1596 cc }, interpretation: select the rows whose engine record fuzzily matches to 16v . the maximum displacement record of these rows is 1596 cc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; engine ; 16v } ; displacement } ; 1596 cc }, interpretation: select the rows whose college record fuzzily matches to nu . there is only one such row in the table . the player record of this unqiue row is rey mendoza .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; nu } } ; eq { hop { filter_eq { all_rows ; college ; nu } ; player } ; rey mendoza } }, interpretation: select the rows whose college record fuzzily matches to nu . there is only one such row in the table . the player record of this unqiue row is rey mendoza .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; nu } } ; eq { hop { filter_eq { all_rows ; college ; nu } ; player } ; rey mendoza } }, interpretation: select the rows whose reg gp record is equal to 1 . there is only one such row in the table . the player record of this unqiue row is rob mcvicar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reg gp ; 1 } } ; eq { hop { filter_eq { all_rows ; reg gp ; 1 } ; player } ; rob mcvicar } }, interpretation: select the rows whose reg gp record is equal to 1 . there is only one such row in the table . the player record of this unqiue row is rob mcvicar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reg gp ; 1 } } ; eq { hop { filter_eq { all_rows ; reg gp ; 1 } ; player } ; rob mcvicar } }, interpretation: select the rows whose team record fuzzily matches to courage comp\u00e9tition . among these rows , select the rows whose laps record is equal to 52 . there is only one such row in the table . the year record of this unqiue row is 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; team ; courage comp\u00e9tition } ; laps ; 52 } } ; eq { hop { filter_eq { filter_eq { all_rows ; team ; courage comp\u00e9tition } ; laps ; 52 } ; year } ; 2005 } }, interpretation: select the rows whose team record fuzzily matches to courage comp\u00e9tition . among these rows , select the rows whose laps record is equal to 52 . there is only one such row in the table . the year record of this unqiue row is 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; team ; courage comp\u00e9tition } ; laps ; 52 } } ; eq { hop { filter_eq { filter_eq { all_rows ; team ; courage comp\u00e9tition } ; laps ; 52 } ; year } ; 2005 } }, interpretation: select the rows whose year record fuzzily matches to 1987 . take the points record of this row . select the rows whose year record fuzzily matches to 1995 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1987 } ; points } ; hop { filter_eq { all_rows ; year ; 1995 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 1987 . take the points record of this row . select the rows whose year record fuzzily matches to 1995 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1987 } ; points } ; hop { filter_eq { all_rows ; year ; 1995 } ; points } }, interpretation: select the row whose ratings record of all rows is maximum . the guest ( s ) record of this row is matt lucas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; ratings } ; guest ( s ) } ; matt lucas }, interpretation: select the row whose ratings record of all rows is maximum . the guest ( s ) record of this row is matt lucas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; ratings } ; guest ( s ) } ; matt lucas }, interpretation: select the rows whose elevation record is greater than 12000 feet . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; elevation ; 12000 feet } } ; 3 }, interpretation: select the rows whose elevation record is greater than 12000 feet . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; elevation ; 12000 feet } } ; 3 }, interpretation: select the rows whose player record fuzzily matches to stefan frei . take the graduated record of this row . select the rows whose player record fuzzily matches to peri maro\u00e5 \u00a1 evic . take the graduated record of this row . the first record is less than the second record . the graduated record of the first row is 2010 . the graduated record of the second row is 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; stefan frei } ; graduated } ; hop { filter_eq { all_rows ; player ; peri maro\u00e5 \u00a1 evic } ; graduated } } ; and { eq { hop { filter_eq { all_rows ; player ; stefan frei } ; graduated } ; 2010 } ; eq { hop { filter_eq { all_rows ; player ; peri maro\u00e5 \u00a1 evic } ; graduated } ; 2011 } } }, interpretation: select the rows whose player record fuzzily matches to stefan frei . take the graduated record of this row . select the rows whose player record fuzzily matches to peri maro\u00e5 \u00a1 evic . take the graduated record of this row . the first record is less than the second record . the graduated record of the first row is 2010 . the graduated record of the second row is 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; stefan frei } ; graduated } ; hop { filter_eq { all_rows ; player ; peri maro\u00e5 \u00a1 evic } ; graduated } } ; and { eq { hop { filter_eq { all_rows ; player ; stefan frei } ; graduated } ; 2010 } ; eq { hop { filter_eq { all_rows ; player ; peri maro\u00e5 \u00a1 evic } ; graduated } ; 2011 } } }, interpretation: for the 2007 records of all rows , most of them fuzzily match to a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; 2007 ; a }, interpretation: for the 2007 records of all rows , most of them fuzzily match to a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; 2007 ; a }, interpretation: select the rows whose incumbent record fuzzily matches to nancy johnson . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to chris shays . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; nancy johnson } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; chris shays } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to nancy johnson . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to chris shays . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; nancy johnson } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; chris shays } ; first elected } }, interpretation: select the rows whose director record fuzzily matches to neema barnette . there is only one such row in the table . the original air date record of this unqiue row is october 21 , 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; neema barnette } } ; eq { hop { filter_eq { all_rows ; director ; neema barnette } ; original air date } ; october 21 , 2003 } }, interpretation: select the rows whose director record fuzzily matches to neema barnette . there is only one such row in the table . the original air date record of this unqiue row is october 21 , 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; neema barnette } } ; eq { hop { filter_eq { all_rows ; director ; neema barnette } ; original air date } ; october 21 , 2003 } }, interpretation: select the row whose total dismissals record of all rows is maximum . the no record of this row is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total dismissals } ; no } ; 13 }, interpretation: select the row whose total dismissals record of all rows is maximum . the no record of this row is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total dismissals } ; no } ; 13 }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 8 }, interpretation: select the rows whose director record fuzzily matches to ron satlof . there is only one such row in the table . the title record of this unqiue row is the blue ribbon hostage .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; ron satlof } } ; eq { hop { filter_eq { all_rows ; director ; ron satlof } ; title } ; the blue ribbon hostage } }, interpretation: select the rows whose director record fuzzily matches to ron satlof . there is only one such row in the table . the title record of this unqiue row is the blue ribbon hostage .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; director ; ron satlof } } ; eq { hop { filter_eq { all_rows ; director ; ron satlof } ; title } ; the blue ribbon hostage } }, interpretation: the maximum total record of all rows is 45:40 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; total } ; 45:40 }, interpretation: the maximum total record of all rows is 45:40 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; total } ; 45:40 }, interpretation: select the row whose production num record of all rows is 3rd maximum . the title record of this row is red - headed baby .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; production num ; 3 } ; title } ; red - headed baby }, interpretation: select the row whose production num record of all rows is 3rd maximum . the title record of this row is red - headed baby .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; production num ; 3 } ; title } ; red - headed baby }, interpretation: the average of the % of popular vote record of all rows is 2.21 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; % of popular vote } ; 2.21 }, interpretation: the average of the % of popular vote record of all rows is 2.21 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; % of popular vote } ; 2.21 }, interpretation: the average of the lost record of all rows is 7.125 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 7.125 }, interpretation: the average of the lost record of all rows is 7.125 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 7.125 }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the date record of this unqiue row is 10 april 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; date } ; 10 april 2011 } }, interpretation: select the rows whose surface record fuzzily matches to clay . there is only one such row in the table . the date record of this unqiue row is 10 april 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; clay } } ; eq { hop { filter_eq { all_rows ; surface ; clay } ; date } ; 10 april 2011 } }, interpretation: the average of the total position record of all rows is 10.73 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total position } ; 10.73 }, interpretation: the average of the total position record of all rows is 10.73 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total position } ; 10.73 }, interpretation: select the rows whose deaths record fuzzily matches to none . there is only one such row in the table . the year record of this unqiue row is 1864 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; deaths ; none } } ; eq { hop { filter_eq { all_rows ; deaths ; none } ; year } ; 1864 } }, interpretation: select the rows whose deaths record fuzzily matches to none . there is only one such row in the table . the year record of this unqiue row is 1864 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; deaths ; none } } ; eq { hop { filter_eq { all_rows ; deaths ; none } ; year } ; 1864 } }, interpretation: select the row whose length record of all rows is maximum . the version record of this row is obsessed club mix .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; version } ; obsessed club mix }, interpretation: select the row whose length record of all rows is maximum . the version record of this row is obsessed club mix .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; version } ; obsessed club mix }, interpretation: the sum of the ties record of all rows is 64 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; ties } ; 64 }, interpretation: the sum of the ties record of all rows is 64 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; ties } ; 64 }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is kardinia park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; kardinia park }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is kardinia park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; kardinia park }, interpretation: select the rows whose college record fuzzily matches to weber state . there is only one such row in the table . the player record of this unqiue row is lee white .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; weber state } } ; eq { hop { filter_eq { all_rows ; college ; weber state } ; player } ; lee white } }, interpretation: select the rows whose college record fuzzily matches to weber state . there is only one such row in the table . the player record of this unqiue row is lee white .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; weber state } } ; eq { hop { filter_eq { all_rows ; college ; weber state } ; player } ; lee white } }, interpretation: select the row whose week record of all rows is 6th minimum . the date record of this row is october 12 , 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; week ; 6 } ; date } ; october 12 , 2008 }, interpretation: select the row whose week record of all rows is 6th minimum . the date record of this row is october 12 , 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; week ; 6 } ; date } ; october 12 , 2008 }, interpretation: the 8th minimum round record of all rows is 7 . the player record of the row with 8th minimum round record is bob chandler .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; round ; 8 } ; 7 } ; eq { hop { nth_argmin { all_rows ; round ; 8 } ; player } ; bob chandler } }, interpretation: the 8th minimum round record of all rows is 7 . the player record of the row with 8th minimum round record is bob chandler .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; round ; 8 } ; 7 } ; eq { hop { nth_argmin { all_rows ; round ; 8 } ; player } ; bob chandler } }, interpretation: select the row whose runners - up record of all rows is 2nd maximum . the clubs record of this row is primeiro de agosto .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; runners - up ; 2 } ; clubs } ; primeiro de agosto }, interpretation: select the row whose runners - up record of all rows is 2nd maximum . the clubs record of this row is primeiro de agosto .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; runners - up ; 2 } ; clubs } ; primeiro de agosto }, interpretation: select the rows whose lost record is greater than or equal to 10 . select the row whose goals against record of these rows is maximum . the team record of this row is rossendale united . the won record of this row is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { filter_greater_eq { all_rows ; lost ; 10 } ; goals against } ; team } ; rossendale united } ; eq { hop { argmax { filter_greater_eq { all_rows ; lost ; 10 } ; goals against } ; won } ; 10 } }, interpretation: select the rows whose lost record is greater than or equal to 10 . select the row whose goals against record of these rows is maximum . the team record of this row is rossendale united . the won record of this row is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { filter_greater_eq { all_rows ; lost ; 10 } ; goals against } ; team } ; rossendale united } ; eq { hop { argmax { filter_greater_eq { all_rows ; lost ; 10 } ; goals against } ; won } ; 10 } }, interpretation: select the rows whose year record is equal to 2008 . the minimum position record of these rows is 1st . the competition record of the row with superlative position record is central american and caribbean championships .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { min { filter_eq { all_rows ; year ; 2008 } ; position } ; 1st } ; eq { hop { argmin { filter_eq { all_rows ; year ; 2008 } ; position } ; competition } ; central american and caribbean championships } }, interpretation: select the rows whose year record is equal to 2008 . the minimum position record of these rows is 1st . the competition record of the row with superlative position record is central american and caribbean championships .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { min { filter_eq { all_rows ; year ; 2008 } ; position } ; 1st } ; eq { hop { argmin { filter_eq { all_rows ; year ; 2008 } ; position } ; competition } ; central american and caribbean championships } }, interpretation: the average of the attendance record of all rows is 20240 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 20240 }, interpretation: the average of the attendance record of all rows is 20240 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 20240 }, interpretation: select the rows whose opponent record fuzzily matches to denver broncos . take the date record of this row . select the rows whose opponent record fuzzily matches to new york titans . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; denver broncos } ; date } ; hop { filter_eq { all_rows ; opponent ; new york titans } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to denver broncos . take the date record of this row . select the rows whose opponent record fuzzily matches to new york titans . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; denver broncos } ; date } ; hop { filter_eq { all_rows ; opponent ; new york titans } ; date } }, interpretation: select the rows whose type record fuzzily matches to village . select the row whose population ( 2011 ) record of these rows is maximum . the settlement record of this row is ka\u0107 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; type ; village } ; population ( 2011 ) } ; settlement } ; ka\u0107 }, interpretation: select the rows whose type record fuzzily matches to village . select the row whose population ( 2011 ) record of these rows is maximum . the settlement record of this row is ka\u0107 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; type ; village } ; population ( 2011 ) } ; settlement } ; ka\u0107 }, interpretation: select the rows whose party record fuzzily matches to csv . there is only one such row in the table . the minister record of this unqiue row is marc fischbach .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; csv } } ; eq { hop { filter_eq { all_rows ; party ; csv } ; minister } ; marc fischbach } }, interpretation: select the rows whose party record fuzzily matches to csv . there is only one such row in the table . the minister record of this unqiue row is marc fischbach .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; csv } } ; eq { hop { filter_eq { all_rows ; party ; csv } ; minister } ; marc fischbach } }, interpretation: select the rows whose issue price record is equal to 45.95 . there is only one such row in the table . the year record of this unqiue row is 2007 . the theme record of this unqiue row is trumpeter swan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; issue price ; 45.95 } } ; and { eq { hop { filter_eq { all_rows ; issue price ; 45.95 } ; year } ; 2007 } ; eq { hop { filter_eq { all_rows ; issue price ; 45.95 } ; theme } ; trumpeter swan } } }, interpretation: select the rows whose issue price record is equal to 45.95 . there is only one such row in the table . the year record of this unqiue row is 2007 . the theme record of this unqiue row is trumpeter swan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; issue price ; 45.95 } } ; and { eq { hop { filter_eq { all_rows ; issue price ; 45.95 } ; year } ; 2007 } ; eq { hop { filter_eq { all_rows ; issue price ; 45.95 } ; theme } ; trumpeter swan } } }, interpretation: the average of the viewership record of all rows is 4.75 million .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewership } ; 4.75 million }, interpretation: the average of the viewership record of all rows is 4.75 million .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewership } ; 4.75 million }, interpretation: select the rows whose result record fuzzily matches to w . the minimum date record of these rows is september 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; result ; w } ; date } ; september 13 }, interpretation: select the rows whose result record fuzzily matches to w . the minimum date record of these rows is september 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; result ; w } ; date } ; september 13 }, interpretation: select the rows whose result record fuzzily matches to re-elected . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re-elected } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to re-elected . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re-elected } } ; 4 }, interpretation: select the rows whose year record is equal to 2002 . there is only one such row in the table . the event record of this unqiue row is ozzfest 2002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2002 } } ; eq { hop { filter_eq { all_rows ; year ; 2002 } ; event } ; ozzfest 2002 } }, interpretation: select the rows whose year record is equal to 2002 . there is only one such row in the table . the event record of this unqiue row is ozzfest 2002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2002 } } ; eq { hop { filter_eq { all_rows ; year ; 2002 } ; event } ; ozzfest 2002 } }, interpretation: the average of the individual winners record of all rows is 2.08 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; individual winners } ; 2.08 }, interpretation: the average of the individual winners record of all rows is 2.08 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; individual winners } ; 2.08 }, interpretation: the average of the home team score record of all rows is 14.27 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 14.27 }, interpretation: the average of the home team score record of all rows is 14.27 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 14.27 }, interpretation: select the rows whose engine record is not equal to 2.4 . there is only one such row in the table . the trim record of this unqiue row is xe ( 2007 - 08 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; engine ; 2.4 } } ; eq { hop { filter_not_eq { all_rows ; engine ; 2.4 } ; trim } ; xe ( 2007 - 08 ) } }, interpretation: select the rows whose engine record is not equal to 2.4 . there is only one such row in the table . the trim record of this unqiue row is xe ( 2007 - 08 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; engine ; 2.4 } } ; eq { hop { filter_not_eq { all_rows ; engine ; 2.4 } ; trim } ; xe ( 2007 - 08 ) } }, interpretation: select the rows whose tournament record fuzzily matches to united kingdom . select the row whose date record of these rows is 2nd minimum . the surface record of this row is hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; tournament ; united kingdom } ; date ; 2 } ; surface } ; hard }, interpretation: select the rows whose tournament record fuzzily matches to united kingdom . select the row whose date record of these rows is 2nd minimum . the surface record of this row is hard .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; tournament ; united kingdom } ; date ; 2 } ; surface } ; hard }, interpretation: for the res records of all rows , most of them fuzzily match to win .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; res ; win }, interpretation: select the row whose weight record of all rows is maximum . the name record of this row is justin jeffries .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; weight } ; name } ; justin jeffries }, interpretation: select the row whose weight record of all rows is maximum . the name record of this row is justin jeffries .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; weight } ; name } ; justin jeffries }, interpretation: select the row whose high points record of all rows is maximum . the high points record of this row is dalembert ( 23 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; high points } ; high points } ; dalembert ( 23 ) }, interpretation: select the row whose high points record of all rows is maximum . the high points record of this row is dalembert ( 23 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; high points } ; high points } ; dalembert ( 23 ) }, interpretation: for the national team records of all rows , all of them fuzzily match to brazil .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; national team ; brazil }, interpretation: for the national team records of all rows , all of them fuzzily match to brazil .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; national team ; brazil }, interpretation: select the row whose assists record of all rows is maximum . the name record of this row is yotam halperin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; assists } ; name } ; yotam halperin }, interpretation: select the row whose assists record of all rows is maximum . the name record of this row is yotam halperin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; assists } ; name } ; yotam halperin }, interpretation: select the rows whose away team score record is greater than 10 . among these rows , select the rows whose crowd record is greater than 12000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; away team score ; 10 } ; crowd ; 12000 } } ; 2 }, interpretation: select the rows whose away team score record is greater than 10 . among these rows , select the rows whose crowd record is greater than 12000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; away team score ; 10 } ; crowd ; 12000 } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to olympic trials . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; olympic trials } } ; 5 }, interpretation: select the rows whose competition record fuzzily matches to olympic trials . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; competition ; olympic trials } } ; 5 }, interpretation: select the rows whose writer record fuzzily matches to naomi janzen . there is only one such row in the table . the title record of this unqiue row is the tale of the frozen ghost .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; writer ; naomi janzen } } ; eq { hop { filter_eq { all_rows ; writer ; naomi janzen } ; title } ; the tale of the frozen ghost } }, interpretation: select the rows whose writer record fuzzily matches to naomi janzen . there is only one such row in the table . the title record of this unqiue row is the tale of the frozen ghost .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; writer ; naomi janzen } } ; eq { hop { filter_eq { all_rows ; writer ; naomi janzen } ; title } ; the tale of the frozen ghost } }, interpretation: select the rows whose engine record fuzzily matches to judd av . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; engine ; judd av } }, interpretation: select the rows whose engine record fuzzily matches to judd av . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; engine ; judd av } }, interpretation: for the high points records of all rows , most of them fuzzily match to r pierce .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; r pierce }, interpretation: for the high points records of all rows , most of them fuzzily match to r pierce .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high points ; r pierce }, interpretation: select the row whose winnings record of all rows is 2nd maximum . the year record of this row is 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winnings ; 2 } ; year } ; 2003 }, interpretation: select the row whose winnings record of all rows is 2nd maximum . the year record of this row is 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; winnings ; 2 } ; year } ; 2003 }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the date record of this row is saturday , april 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; date } ; saturday , april 30 }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the date record of this row is saturday , april 30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; date } ; saturday , april 30 }, interpretation: select the rows whose leading scorer record fuzzily matches to carlos boozer . among these rows , select the rows whose score record fuzzily matches to w . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; leading scorer ; carlos boozer } ; score ; w } } ; 4 }, interpretation: select the rows whose leading scorer record fuzzily matches to carlos boozer . among these rows , select the rows whose score record fuzzily matches to w . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; leading scorer ; carlos boozer } ; score ; w } } ; 4 }, interpretation: select the rows whose no built record is greater than 20 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; no built ; 20 } } ; 6 }, interpretation: select the rows whose no built record is greater than 20 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; no built ; 20 } } ; 6 }, interpretation: select the row whose date record of all rows is 10th minimum . the venue record of this row is national stadium , kuala lumpur .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 10 } ; venue } ; national stadium , kuala lumpur }, interpretation: select the row whose date record of all rows is 10th minimum . the venue record of this row is national stadium , kuala lumpur .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 10 } ; venue } ; national stadium , kuala lumpur }, interpretation: for the socialist records of all rows , most of them are greater than or equal to 42 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; socialist ; 42 % }, interpretation: for the socialist records of all rows , most of them are greater than or equal to 42 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; socialist ; 42 % }, interpretation: the average of the episodes record of all rows is 10.73 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; episodes } ; 10.73 }, interpretation: the average of the episodes record of all rows is 10.73 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; episodes } ; 10.73 }, interpretation: the average of the attendance record of all rows is 21,596 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 21,596 }, interpretation: the average of the attendance record of all rows is 21,596 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 21,596 }, interpretation: select the rows whose party record fuzzily matches to democratic . there is only one such row in the table . the incumbent record of this unqiue row is clarence f lea .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; democratic } } ; eq { hop { filter_eq { all_rows ; party ; democratic } ; incumbent } ; clarence f lea } }, interpretation: select the rows whose party record fuzzily matches to democratic . there is only one such row in the table . the incumbent record of this unqiue row is clarence f lea .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; democratic } } ; eq { hop { filter_eq { all_rows ; party ; democratic } ; incumbent } ; clarence f lea } }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 6 }, interpretation: for the played records of all rows , all of them are equal to 30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 30 }, interpretation: select the rows whose position record fuzzily matches to 8th . there is only one such row in the table . the year record of this unqiue row is 1990 . the competition record of this unqiue row is european championships .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; 8th } } ; and { eq { hop { filter_eq { all_rows ; position ; 8th } ; year } ; 1990 } ; eq { hop { filter_eq { all_rows ; position ; 8th } ; competition } ; european championships } } }, interpretation: select the rows whose position record fuzzily matches to 8th . there is only one such row in the table . the year record of this unqiue row is 1990 . the competition record of this unqiue row is european championships .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; 8th } } ; and { eq { hop { filter_eq { all_rows ; position ; 8th } ; year } ; 1990 } ; eq { hop { filter_eq { all_rows ; position ; 8th } ; competition } ; european championships } } }, interpretation: select the rows whose gold record is equal to 1 . there is only one such row in the table . the nation record of this unqiue row is switzerland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 1 } } ; eq { hop { filter_eq { all_rows ; gold ; 1 } ; nation } ; switzerland } }, interpretation: select the rows whose gold record is equal to 1 . there is only one such row in the table . the nation record of this unqiue row is switzerland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 1 } } ; eq { hop { filter_eq { all_rows ; gold ; 1 } ; nation } ; switzerland } }, interpretation: for the date records of all rows , most of them fuzzily match to 1992 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 1992 }, interpretation: for the date records of all rows , most of them fuzzily match to 1992 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; 1992 }, interpretation: select the rows whose country record fuzzily matches to iceland . take the 2008 - list record of this row . select the rows whose country record fuzzily matches to sweden . take the 2008 - list record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; iceland } ; 2008 - list } ; hop { filter_eq { all_rows ; country ; sweden } ; 2008 - list } }, interpretation: select the rows whose country record fuzzily matches to iceland . take the 2008 - list record of this row . select the rows whose country record fuzzily matches to sweden . take the 2008 - list record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; country ; iceland } ; 2008 - list } ; hop { filter_eq { all_rows ; country ; sweden } ; 2008 - list } }, interpretation: select the rows whose programming record fuzzily matches to main wybe programming . take the channel record of this row . select the rows whose programming record fuzzily matches to russia today . take the channel record of this row . the second record is 0.3 larger than the first record . the channel record of the first row is 35.1 . the channel record of the second row is 35.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; programming ; main wybe programming } ; channel } ; hop { filter_eq { all_rows ; programming ; russia today } ; channel } } ; -0.3 } ; and { eq { hop { filter_eq { all_rows ; programming ; main wybe programming } ; channel } ; 35.1 } ; eq { hop { filter_eq { all_rows ; programming ; russia today } ; channel } ; 35.4 } } }, interpretation: select the rows whose programming record fuzzily matches to main wybe programming . take the channel record of this row . select the rows whose programming record fuzzily matches to russia today . take the channel record of this row . the second record is 0.3 larger than the first record . the channel record of the first row is 35.1 . the channel record of the second row is 35.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; programming ; main wybe programming } ; channel } ; hop { filter_eq { all_rows ; programming ; russia today } ; channel } } ; -0.3 } ; and { eq { hop { filter_eq { all_rows ; programming ; main wybe programming } ; channel } ; 35.1 } ; eq { hop { filter_eq { all_rows ; programming ; russia today } ; channel } ; 35.4 } } }, interpretation: select the rows whose result record fuzzily matches to safe . the sum of the score record of these rows is 54 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; safe } ; score } ; 54 }, interpretation: select the rows whose result record fuzzily matches to safe . the sum of the score record of these rows is 54 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; safe } ; score } ; 54 }, interpretation: select the rows whose round record is greater than 6 . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; round ; 6 } }, interpretation: select the rows whose round record is greater than 6 . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_greater { all_rows ; round ; 6 } }, interpretation: select the rows whose tyre record fuzzily matches to e . for the constructor records of these rows , most of them fuzzily match to ferrari .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; tyre ; e } ; constructor ; ferrari }, interpretation: select the rows whose tyre record fuzzily matches to e . for the constructor records of these rows , most of them fuzzily match to ferrari .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; tyre ; e } ; constructor ; ferrari }, interpretation: select the rows whose venue record fuzzily matches to dairy farmers stadium . there is only one such row in the table . the opponent record of this unqiue row is north queensland cowboys .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; dairy farmers stadium } } ; eq { hop { filter_eq { all_rows ; venue ; dairy farmers stadium } ; opponent } ; north queensland cowboys } }, interpretation: select the rows whose venue record fuzzily matches to dairy farmers stadium . there is only one such row in the table . the opponent record of this unqiue row is north queensland cowboys .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; dairy farmers stadium } } ; eq { hop { filter_eq { all_rows ; venue ; dairy farmers stadium } ; opponent } ; north queensland cowboys } }, interpretation: select the rows whose ram ( mib ) record is equal to 64 . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; ram ( mib ) ; 64 } } ; 11 }, interpretation: select the rows whose ram ( mib ) record is equal to 64 . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; ram ( mib ) ; 64 } } ; 11 }, interpretation: select the rows whose title record fuzzily matches to road to the north pole . take the original air date record of this row . select the rows whose title record fuzzily matches to road to europe . take the original air date record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; road to the north pole } ; original air date } ; hop { filter_eq { all_rows ; title ; road to europe } ; original air date } }, interpretation: select the rows whose title record fuzzily matches to road to the north pole . take the original air date record of this row . select the rows whose title record fuzzily matches to road to europe . take the original air date record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; title ; road to the north pole } ; original air date } ; hop { filter_eq { all_rows ; title ; road to europe } ; original air date } }, interpretation: the average of the height ( m ) record of all rows is 2.01 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height ( m ) } ; 2.01 }, interpretation: the average of the height ( m ) record of all rows is 2.01 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height ( m ) } ; 2.01 }, interpretation: select the row whose date record of all rows is 2nd minimum . the tournament record of this row is cuenca , ecuador .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; tournament } ; cuenca , ecuador }, interpretation: select the row whose date record of all rows is 2nd minimum . the tournament record of this row is cuenca , ecuador .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 2 } ; tournament } ; cuenca , ecuador }, interpretation: select the rows whose opponent record fuzzily matches to arizona . among these rows , select the rows whose result record fuzzily matches to ot . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { filter_eq { all_rows ; opponent ; arizona } ; result ; ot } }, interpretation: select the rows whose opponent record fuzzily matches to arizona . among these rows , select the rows whose result record fuzzily matches to ot . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { filter_eq { all_rows ; opponent ; arizona } ; result ; ot } }, interpretation: for the nature of incident records of all rows , most of them fuzzily match to hostile .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nature of incident ; hostile }, interpretation: for the nature of incident records of all rows , most of them fuzzily match to hostile .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nature of incident ; hostile }, interpretation: select the row whose year of intro record of all rows is 2nd minimum . the name / designation record of this row is onorati smg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year of intro ; 2 } ; name / designation } ; onorati smg }, interpretation: select the row whose year of intro record of all rows is 2nd minimum . the name / designation record of this row is onorati smg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year of intro ; 2 } ; name / designation } ; onorati smg }, interpretation: for the nation records of all rows , all of them fuzzily match to usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nation ; usa }, interpretation: for the nation records of all rows , all of them fuzzily match to usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nation ; usa }, interpretation: the average of the score in final record of all rows is 4.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score in final } ; 4.6 }, interpretation: the average of the score in final record of all rows is 4.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score in final } ; 4.6 }, interpretation: for the attendance records of all rows , most of them are greater than 15000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 15000 }, interpretation: for the attendance records of all rows , most of them are greater than 15000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 15000 }, interpretation: for the date records of all rows , most of them fuzzily match to may .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; date ; may }, interpretation: the average of the attendance record of all rows is 26593 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 26593 }, interpretation: the average of the attendance record of all rows is 26593 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 26593 }, interpretation: select the rows whose race leader record fuzzily matches to antonio pesenti ( ita ) . among these rows , select the rows whose date record fuzzily matches to june . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; race leader ; antonio pesenti ( ita ) } ; date ; june } } ; 3 }, interpretation: select the rows whose race leader record fuzzily matches to antonio pesenti ( ita ) . among these rows , select the rows whose date record fuzzily matches to june . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; race leader ; antonio pesenti ( ita ) } ; date ; june } } ; 3 }, interpretation: for the home port records of all rows , most of them fuzzily match to portsmouth .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; home port ; portsmouth }, interpretation: for the home port records of all rows , most of them fuzzily match to portsmouth .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; home port ; portsmouth }, interpretation: for the director records of all rows , most of them fuzzily match to sharon gosling .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; director ; sharon gosling }, interpretation: for the director records of all rows , most of them fuzzily match to sharon gosling .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; director ; sharon gosling }, interpretation: for the country records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; country ; united states }, interpretation: the sum of the runs record of all rows is 3324 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; runs } ; 3324 }, interpretation: the sum of the runs record of all rows is 3324 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; runs } ; 3324 }, interpretation: the average of the time record of all rows is 6:21.73 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 6:21.73 }, interpretation: the average of the time record of all rows is 6:21.73 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 6:21.73 }, interpretation: select the rows whose crowd record is equal to 15000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; crowd ; 15000 } } ; 3 }, interpretation: select the rows whose crowd record is equal to 15000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; crowd ; 15000 } } ; 3 }, interpretation: select the rows whose laid down record fuzzily matches to july 1933 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; laid down ; july 1933 } } ; 5 }, interpretation: select the rows whose laid down record fuzzily matches to july 1933 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; laid down ; july 1933 } } ; 5 }, interpretation: the average of the wheels record of all rows is 120 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wheels } ; 120 }, interpretation: the average of the wheels record of all rows is 120 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wheels } ; 120 }, interpretation: select the rows whose crowd record is equal to 10000 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; crowd ; 10000 } } ; 3 }, interpretation: select the rows whose crowd record is equal to 10000 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; crowd ; 10000 } } ; 3 }, interpretation: select the rows whose children together record fuzzily matches to 1 son . there is only one such row in the table . the name record of this unqiue row is norris church mailer . the deceased spouse record of this unqiue row is norman mailer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; children together ; 1 son } } ; and { eq { hop { filter_eq { all_rows ; children together ; 1 son } ; name } ; norris church mailer } ; eq { hop { filter_eq { all_rows ; children together ; 1 son } ; deceased spouse } ; norman mailer } } }, interpretation: select the rows whose children together record fuzzily matches to 1 son . there is only one such row in the table . the name record of this unqiue row is norris church mailer . the deceased spouse record of this unqiue row is norman mailer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; children together ; 1 son } } ; and { eq { hop { filter_eq { all_rows ; children together ; 1 son } ; name } ; norris church mailer } ; eq { hop { filter_eq { all_rows ; children together ; 1 son } ; deceased spouse } ; norman mailer } } }, interpretation: the average of the top - 10 record of all rows is 3.75 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; top - 10 } ; 3.75 }, interpretation: the average of the top - 10 record of all rows is 3.75 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; top - 10 } ; 3.75 }, interpretation: select the rows whose flagship station record fuzzily matches to wrko . there is only one such row in the table . the color commentator ( s ) record of this unqiue row is cedric maxwell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; flagship station ; wrko } } ; eq { hop { filter_eq { all_rows ; flagship station ; wrko } ; color commentator ( s ) } ; cedric maxwell } }, interpretation: select the rows whose flagship station record fuzzily matches to wrko . there is only one such row in the table . the color commentator ( s ) record of this unqiue row is cedric maxwell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; flagship station ; wrko } } ; eq { hop { filter_eq { all_rows ; flagship station ; wrko } ; color commentator ( s ) } ; cedric maxwell } }, interpretation: the average of the events record of all rows is 19.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; events } ; 19.8 }, interpretation: the average of the events record of all rows is 19.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; events } ; 19.8 }, interpretation: select the rows whose year record fuzzily matches to 1956 . take the laps record of this row . select the rows whose year record fuzzily matches to 1959 . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1956 } ; laps } ; hop { filter_eq { all_rows ; year ; 1959 } ; laps } }, interpretation: select the rows whose year record fuzzily matches to 1956 . take the laps record of this row . select the rows whose year record fuzzily matches to 1959 . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1956 } ; laps } ; hop { filter_eq { all_rows ; year ; 1959 } ; laps } }, interpretation: select the rows whose current affiliation record fuzzily matches to nbc affiliate owned by gannett company . there is only one such row in the table . the station record of this unqiue row is kyw - tv ( now wkyc - tv ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; current affiliation ; nbc affiliate owned by gannett company } } ; eq { hop { filter_eq { all_rows ; current affiliation ; nbc affiliate owned by gannett company } ; station } ; kyw - tv ( now wkyc - tv ) } }, interpretation: select the rows whose current affiliation record fuzzily matches to nbc affiliate owned by gannett company . there is only one such row in the table . the station record of this unqiue row is kyw - tv ( now wkyc - tv ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; current affiliation ; nbc affiliate owned by gannett company } } ; eq { hop { filter_eq { all_rows ; current affiliation ; nbc affiliate owned by gannett company } ; station } ; kyw - tv ( now wkyc - tv ) } }, interpretation: select the rows whose region record fuzzily matches to united kingdom . take the date record of this row . select the rows whose region record fuzzily matches to japan . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; region ; united kingdom } ; date } ; hop { filter_eq { all_rows ; region ; japan } ; date } }, interpretation: select the rows whose region record fuzzily matches to united kingdom . take the date record of this row . select the rows whose region record fuzzily matches to japan . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; region ; united kingdom } ; date } ; hop { filter_eq { all_rows ; region ; japan } ; date } }, interpretation: the average of the pick record of all rows is 13.14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 13.14 }, interpretation: the average of the pick record of all rows is 13.14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pick } ; 13.14 }, interpretation: select the rows whose position record fuzzily matches to 2nd . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; 2nd } } ; 4 }, interpretation: select the rows whose position record fuzzily matches to 2nd . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; 2nd } } ; 4 }, interpretation: select the rows whose status record fuzzily matches to test match . there is only one such row in the table . the opposing teams record of this unqiue row is south africa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; test match } } ; eq { hop { filter_eq { all_rows ; status ; test match } ; opposing teams } ; south africa } }, interpretation: select the rows whose status record fuzzily matches to test match . there is only one such row in the table . the opposing teams record of this unqiue row is south africa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; test match } } ; eq { hop { filter_eq { all_rows ; status ; test match } ; opposing teams } ; south africa } }, interpretation: select the rows whose opponent record fuzzily matches to colorado rockies . among these rows , select the rows whose points record is greater than 10 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; opponent ; colorado rockies } ; points ; 10 } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to colorado rockies . among these rows , select the rows whose points record is greater than 10 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; opponent ; colorado rockies } ; points ; 10 } } ; 2 }, interpretation: the average of the crowd record of all rows is 25000-27000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 25000-27000 }, interpretation: the average of the crowd record of all rows is 25000-27000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 25000-27000 }, interpretation: for the reason for non - seating records of all rows , most of them fuzzily match to died .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reason for non - seating ; died }, interpretation: for the reason for non - seating records of all rows , most of them fuzzily match to died .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reason for non - seating ; died }, interpretation: select the rows whose sport record fuzzily matches to w gymnastics . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; sport ; w gymnastics } } ; 2 }, interpretation: select the rows whose sport record fuzzily matches to w gymnastics . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; sport ; w gymnastics } } ; 2 }, interpretation: select the row whose result record of all rows is 3rd maximum . the opponent record of this row is arizona cardinals .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; result ; 3 } ; opponent } ; arizona cardinals }, interpretation: select the row whose result record of all rows is 3rd maximum . the opponent record of this row is arizona cardinals .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; result ; 3 } ; opponent } ; arizona cardinals }, interpretation: select the rows whose team record fuzzily matches to 2009 . take the losses record of this row . select the rows whose team record fuzzily matches to 2011 . take the losses record of this row . the first record is greater than the second record . the losses record of the first row is 8 . the losses record of the second row is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; team ; 2009 } ; losses } ; hop { filter_eq { all_rows ; team ; 2011 } ; losses } } ; and { eq { hop { filter_eq { all_rows ; team ; 2009 } ; losses } ; 8 } ; eq { hop { filter_eq { all_rows ; team ; 2011 } ; losses } ; 4 } } }, interpretation: select the rows whose team record fuzzily matches to 2009 . take the losses record of this row . select the rows whose team record fuzzily matches to 2011 . take the losses record of this row . the first record is greater than the second record . the losses record of the first row is 8 . the losses record of the second row is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; team ; 2009 } ; losses } ; hop { filter_eq { all_rows ; team ; 2011 } ; losses } } ; and { eq { hop { filter_eq { all_rows ; team ; 2009 } ; losses } ; 8 } ; eq { hop { filter_eq { all_rows ; team ; 2011 } ; losses } ; 4 } } }, interpretation: select the rows whose team record fuzzily matches to walker racing . there is only one such row in the table . the driver record of this unqiue row is mario haberfeld .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; walker racing } } ; eq { hop { filter_eq { all_rows ; team ; walker racing } ; driver } ; mario haberfeld } }, interpretation: select the rows whose team record fuzzily matches to walker racing . there is only one such row in the table . the driver record of this unqiue row is mario haberfeld .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; walker racing } } ; eq { hop { filter_eq { all_rows ; team ; walker racing } ; driver } ; mario haberfeld } }, interpretation: for the transfer fee ( millions ) records of all rows , most of them are greater than 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; transfer fee ( millions ) ; 26 }, interpretation: for the transfer fee ( millions ) records of all rows , most of them are greater than 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; transfer fee ( millions ) ; 26 }, interpretation: select the rows whose % ( 2040 ) record is greater than or equal to 10 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; % ( 2040 ) ; 10 } } ; 3 }, interpretation: select the rows whose % ( 2040 ) record is greater than or equal to 10 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; % ( 2040 ) ; 10 } } ; 3 }, interpretation: for the total units sold records of all rows , most of them are greater than 1500000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; total units sold ; 1500000 }, interpretation: for the total units sold records of all rows , most of them are greater than 1500000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; total units sold ; 1500000 }, interpretation: for the district records of all rows , all of them fuzzily match to pennsylvania .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; district ; pennsylvania }, interpretation: for the district records of all rows , all of them fuzzily match to pennsylvania .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; district ; pennsylvania }, interpretation: select the row whose crowd record of all rows is maximum . the home team record of this row is richmond .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; home team } ; richmond }, interpretation: select the row whose crowd record of all rows is maximum . the home team record of this row is richmond .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; home team } ; richmond }, interpretation: select the rows whose location record fuzzily matches to hartford civic center . there is only one such row in the table . the game record of this unqiue row is 45 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; hartford civic center } } ; eq { hop { filter_eq { all_rows ; location ; hartford civic center } ; game } ; 45 } }, interpretation: select the rows whose location record fuzzily matches to hartford civic center . there is only one such row in the table . the game record of this unqiue row is 45 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; hartford civic center } } ; eq { hop { filter_eq { all_rows ; location ; hartford civic center } ; game } ; 45 } }, interpretation: select the rows whose location record fuzzily matches to georgia . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; georgia } } ; 8 }, interpretation: select the rows whose location record fuzzily matches to georgia . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; georgia } } ; 8 }, interpretation: select the rows whose top - 10 record is not equal to 0 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; top - 10 ; 0 } } ; eq { hop { filter_not_eq { all_rows ; top - 10 ; 0 } ; tournament } ; the open championship } }, interpretation: select the rows whose top - 10 record is not equal to 0 . there is only one such row in the table . the tournament record of this unqiue row is the open championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; top - 10 ; 0 } } ; eq { hop { filter_not_eq { all_rows ; top - 10 ; 0 } ; tournament } ; the open championship } }, interpretation: select the rows whose nation record fuzzily matches to ecuador . take the 2011 ( imf ) record of this row . select the rows whose nation record fuzzily matches to paraguay . take the 2011 ( imf ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; ecuador } ; 2011 ( imf ) } ; hop { filter_eq { all_rows ; nation ; paraguay } ; 2011 ( imf ) } }, interpretation: select the rows whose nation record fuzzily matches to ecuador . take the 2011 ( imf ) record of this row . select the rows whose nation record fuzzily matches to paraguay . take the 2011 ( imf ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; ecuador } ; 2011 ( imf ) } ; hop { filter_eq { all_rows ; nation ; paraguay } ; 2011 ( imf ) } }, interpretation: select the row whose foundation record of all rows is 2nd minimum . the english name record of this row is japan coast guard academy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; foundation ; 2 } ; english name } ; japan coast guard academy }, interpretation: select the row whose foundation record of all rows is 2nd minimum . the english name record of this row is japan coast guard academy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; foundation ; 2 } ; english name } ; japan coast guard academy }, interpretation: for the nationality records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; united states }, interpretation: select the row whose lions points record of all rows is maximum . the opponent record of this row is minnesota vikings .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; lions points } ; opponent } ; minnesota vikings }, interpretation: select the row whose lions points record of all rows is maximum . the opponent record of this row is minnesota vikings .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; lions points } ; opponent } ; minnesota vikings }, interpretation: for the age records of all rows , most of them are greater than 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; age ; 18 }, interpretation: for the age records of all rows , most of them are greater than 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; age ; 18 }, interpretation: the average of the socialist record of all rows is 45 % .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; socialist } ; 45 % }, interpretation: the average of the socialist record of all rows is 45 % .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; socialist } ; 45 % }, interpretation: select the rows whose date record fuzzily matches to december . for the result records of these rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; date ; december } ; result ; l }, interpretation: select the rows whose route of administration record fuzzily matches to iv . among these rows , select the rows whose investigation record fuzzily matches to infection / inflammation imaging . there is only one such row in the table . the name record of this unqiue row is in111 - s leukocyte .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; route of administration ; iv } ; investigation ; infection / inflammation imaging } } ; eq { hop { filter_eq { filter_eq { all_rows ; route of administration ; iv } ; investigation ; infection / inflammation imaging } ; name } ; in111 - s leukocyte } }, interpretation: select the rows whose route of administration record fuzzily matches to iv . among these rows , select the rows whose investigation record fuzzily matches to infection / inflammation imaging . there is only one such row in the table . the name record of this unqiue row is in111 - s leukocyte .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; route of administration ; iv } ; investigation ; infection / inflammation imaging } } ; eq { hop { filter_eq { filter_eq { all_rows ; route of administration ; iv } ; investigation ; infection / inflammation imaging } ; name } ; in111 - s leukocyte } }, interpretation: for the nationality records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; united states }, interpretation: the average of the attendance record of all rows is 19893 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 19893 }, interpretation: the average of the attendance record of all rows is 19893 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 19893 }, interpretation: select the rows whose year record fuzzily matches to 1989 . take the points record of this row . select the rows whose year record fuzzily matches to 1992 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1989 } ; points } ; hop { filter_eq { all_rows ; year ; 1992 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 1989 . take the points record of this row . select the rows whose year record fuzzily matches to 1992 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1989 } ; points } ; hop { filter_eq { all_rows ; year ; 1992 } ; points } }, interpretation: select the rows whose class record fuzzily matches to p 2 . select the row whose quantity record of these rows is minimum . the year ( s ) built record of this row is 1886 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; class ; p 2 } ; quantity } ; year ( s ) built } ; 1886 }, interpretation: select the rows whose class record fuzzily matches to p 2 . select the row whose quantity record of these rows is minimum . the year ( s ) built record of this row is 1886 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; class ; p 2 } ; quantity } ; year ( s ) built } ; 1886 }, interpretation: select the row whose year ( ceremony ) record of all rows is 2nd minimum . the director record of this row is humayun ahmed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ( ceremony ) ; 2 } ; director } ; humayun ahmed }, interpretation: select the row whose year ( ceremony ) record of all rows is 2nd minimum . the director record of this row is humayun ahmed .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ( ceremony ) ; 2 } ; director } ; humayun ahmed }, interpretation: select the rows whose caps record is less than 100 . among these rows , select the rows whose goals record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; caps ; 100 } ; goals ; 3 } } ; 2 }, interpretation: select the rows whose caps record is less than 100 . among these rows , select the rows whose goals record is equal to 3 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; caps ; 100 } ; goals ; 3 } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to england . among these rows , select the rows whose score record is equal to 71 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; england } ; score ; 71 } } ; 3 }, interpretation: select the rows whose country record fuzzily matches to england . among these rows , select the rows whose score record is equal to 71 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; england } ; score ; 71 } } ; 3 }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is rochester institute of technology .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; rochester institute of technology }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is rochester institute of technology .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; rochester institute of technology }, interpretation: for the power ( kw ) records of all rows , most of them fuzzily match to 10 kw .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; power ( kw ) ; 10 kw }, interpretation: for the power ( kw ) records of all rows , most of them fuzzily match to 10 kw .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; power ( kw ) ; 10 kw }, interpretation: select the row whose total record of all rows is 1st maximum . the player record of this row is lee janzen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 1 } ; player } ; lee janzen }, interpretation: select the row whose total record of all rows is 1st maximum . the player record of this row is lee janzen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; total ; 1 } ; player } ; lee janzen }, interpretation: select the rows whose name record fuzzily matches to dante taylor . take the weight ( lb ) record of this row . select the rows whose name record fuzzily matches to nasir robinson . take the weight ( lb ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; dante taylor } ; weight ( lb ) } ; hop { filter_eq { all_rows ; name ; nasir robinson } ; weight ( lb ) } }, interpretation: select the rows whose name record fuzzily matches to dante taylor . take the weight ( lb ) record of this row . select the rows whose name record fuzzily matches to nasir robinson . take the weight ( lb ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; dante taylor } ; weight ( lb ) } ; hop { filter_eq { all_rows ; name ; nasir robinson } ; weight ( lb ) } }, interpretation: select the row whose points against record of all rows is maximum . the club record of this row is hamburger rc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points against } ; club } ; hamburger rc }, interpretation: select the row whose points against record of all rows is maximum . the club record of this row is hamburger rc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points against } ; club } ; hamburger rc }, interpretation: select the rows whose date record is equal to 1873 . the sum of the no built record of these rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 1873 } ; no built } ; 14 }, interpretation: select the rows whose date record is equal to 1873 . the sum of the no built record of these rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; date ; 1873 } ; no built } ; 14 }, interpretation: select the rows whose nationality record fuzzily matches to united states . there is only one such row in the table . the player record of this unqiue row is ed hospodar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; united states } } ; eq { hop { filter_eq { all_rows ; nationality ; united states } ; player } ; ed hospodar } }, interpretation: select the rows whose nationality record fuzzily matches to united states . there is only one such row in the table . the player record of this unqiue row is ed hospodar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; united states } } ; eq { hop { filter_eq { all_rows ; nationality ; united states } ; player } ; ed hospodar } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is april 8 . the visitor record of this row is los angeles lakers . the home record of this row is portland trail blazers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; attendance } ; date } ; april 8 } ; and { eq { hop { argmax { all_rows ; attendance } ; visitor } ; los angeles lakers } ; eq { hop { argmax { all_rows ; attendance } ; home } ; portland trail blazers } } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is april 8 . the visitor record of this row is los angeles lakers . the home record of this row is portland trail blazers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; attendance } ; date } ; april 8 } ; and { eq { hop { argmax { all_rows ; attendance } ; visitor } ; los angeles lakers } ; eq { hop { argmax { all_rows ; attendance } ; home } ; portland trail blazers } } }, interpretation: for the decision records of all rows , most of them fuzzily match to esche .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; decision ; esche }, interpretation: for the decision records of all rows , most of them fuzzily match to esche .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; decision ; esche }, interpretation: select the rows whose english title record fuzzily matches to paris , the strange attractive capital . take the year record of this row . select the rows whose english title record fuzzily matches to visitor 's fog . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; english title ; paris , the strange attractive capital } ; year } ; hop { filter_eq { all_rows ; english title ; visitor 's fog } ; year } }, interpretation: select the rows whose english title record fuzzily matches to paris , the strange attractive capital . take the year record of this row . select the rows whose english title record fuzzily matches to visitor 's fog . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; english title ; paris , the strange attractive capital } ; year } ; hop { filter_eq { all_rows ; english title ; visitor 's fog } ; year } }, interpretation: select the rows whose opponent record fuzzily matches to chicago bears . take the date record of this row . select the rows whose opponent record fuzzily matches to staten island stapletons . take the date record of this row . the second record is 7 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; chicago bears } ; date } ; hop { filter_eq { all_rows ; opponent ; staten island stapletons } ; date } } ; -7 }, interpretation: select the rows whose opponent record fuzzily matches to chicago bears . take the date record of this row . select the rows whose opponent record fuzzily matches to staten island stapletons . take the date record of this row . the second record is 7 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; opponent ; chicago bears } ; date } ; hop { filter_eq { all_rows ; opponent ; staten island stapletons } ; date } } ; -7 }, interpretation: for the object type records of all rows , most of them fuzzily match to open cluster .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; object type ; open cluster }, interpretation: for the object type records of all rows , most of them fuzzily match to open cluster .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; object type ; open cluster }, interpretation: select the row whose points record of all rows is maximum . the entrant record of this row is force india f1 team .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; entrant } ; force india f1 team }, interpretation: select the row whose points record of all rows is maximum . the entrant record of this row is force india f1 team .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; entrant } ; force india f1 team }, interpretation: for the position records of all rows , most of them fuzzily match to 1st .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; 1st }, interpretation: for the position records of all rows , most of them fuzzily match to 1st .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; 1st }, interpretation: select the row whose year left record of all rows is minimum . the school record of this row is south central ( union mills ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year left } ; school } ; south central ( union mills ) }, interpretation: select the row whose year left record of all rows is minimum . the school record of this row is south central ( union mills ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year left } ; school } ; south central ( union mills ) }, interpretation: select the row whose start date record of all rows is minimum . the minister record of this row is eug\u00e8ne schaus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; start date } ; minister } ; eug\u00e8ne schaus }, interpretation: select the row whose start date record of all rows is minimum . the minister record of this row is eug\u00e8ne schaus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; start date } ; minister } ; eug\u00e8ne schaus }, interpretation: select the row whose innings record of all rows is maximum . the player record of this row is ricky ponting .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; innings } ; player } ; ricky ponting }, interpretation: select the row whose innings record of all rows is maximum . the player record of this row is ricky ponting .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; innings } ; player } ; ricky ponting }, interpretation: select the rows whose date record fuzzily matches to october . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; october } } ; 4 }, interpretation: select the rows whose date record fuzzily matches to october . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; october } } ; 4 }, interpretation: the average of the population served record of all rows is 4038 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population served } ; 4038 }, interpretation: the average of the population served record of all rows is 4038 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population served } ; 4038 }, interpretation: select the row whose area ( km square ) record of all rows is 3rd maximum . the name of county record of this row is pest .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; area ( km square ) ; 3 } ; name of county } ; pest }, interpretation: select the row whose area ( km square ) record of all rows is 3rd maximum . the name of county record of this row is pest .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; area ( km square ) ; 3 } ; name of county } ; pest }, interpretation: select the row whose grand total record of all rows is maximum . the nato member record of this row is uk .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; grand total } ; nato member } ; uk }, interpretation: select the row whose grand total record of all rows is maximum . the nato member record of this row is uk .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; grand total } ; nato member } ; uk }, interpretation: for the tournament records of all rows , most of them fuzzily match to us .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tournament ; us }, interpretation: for the tournament records of all rows , most of them fuzzily match to us .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tournament ; us }, interpretation: select the row whose winning score record of all rows is maximum . the year record of this row is 2001 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winning score } ; year } ; 2001 }, interpretation: select the row whose winning score record of all rows is maximum . the year record of this row is 2001 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; winning score } ; year } ; 2001 }, interpretation: the average of the days with frost record of all rows is 15.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; days with frost } ; 15.67 }, interpretation: the average of the days with frost record of all rows is 15.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; days with frost } ; 15.67 }, interpretation: the sum of the 3rd place record of all rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; 3rd place } ; 3 }, interpretation: the sum of the 3rd place record of all rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; 3rd place } ; 3 }, interpretation: the average of the score record of all rows is 1.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 1.4 }, interpretation: the average of the score record of all rows is 1.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 1.4 }, interpretation: for the reason for change records of all rows , most of them fuzzily match to resigned .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reason for change ; resigned }, interpretation: for the reason for change records of all rows , most of them fuzzily match to resigned .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reason for change ; resigned }, interpretation: select the row whose year erected record of all rows is minimum . the statue record of this row is general jos\u00e9 gervasio artigas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year erected } ; statue } ; general jos\u00e9 gervasio artigas }, interpretation: select the row whose year erected record of all rows is minimum . the statue record of this row is general jos\u00e9 gervasio artigas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; year erected } ; statue } ; general jos\u00e9 gervasio artigas }, interpretation: select the rows whose year record is equal to 1990 . the sum of the pages record of these rows is 1135 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1990 } ; pages } ; 1135 }, interpretation: select the rows whose year record is equal to 1990 . the sum of the pages record of these rows is 1135 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; year ; 1990 } ; pages } ; 1135 }, interpretation: select the rows whose date record fuzzily matches to september . the average of the attendance record of these rows is 56,592 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; date ; september } ; attendance } ; 56,592 }, interpretation: select the rows whose date record fuzzily matches to september . the average of the attendance record of these rows is 56,592 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; date ; september } ; attendance } ; 56,592 }, interpretation: the sum of the overall record record of all rows is 31-31 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; overall record } ; 31-31 }, interpretation: the sum of the overall record record of all rows is 31-31 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; overall record } ; 31-31 }, interpretation: for the status records of all rows , most of them fuzzily match to tour match .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; status ; tour match }, interpretation: for the status records of all rows , most of them fuzzily match to tour match .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; status ; tour match }, interpretation: select the rows whose no in series record is arbitrary . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; no in series } } ; 12 }, interpretation: select the rows whose no in series record is arbitrary . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; no in series } } ; 12 }, interpretation: select the rows whose name record fuzzily matches to kotokasuga . take the top division debut record of this row . select the rows whose name record fuzzily matches to yoshiazuma . take the top division debut record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; kotokasuga } ; top division debut } ; hop { filter_eq { all_rows ; name ; yoshiazuma } ; top division debut } }, interpretation: select the rows whose name record fuzzily matches to kotokasuga . take the top division debut record of this row . select the rows whose name record fuzzily matches to yoshiazuma . take the top division debut record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; kotokasuga } ; top division debut } ; hop { filter_eq { all_rows ; name ; yoshiazuma } ; top division debut } }, interpretation: select the rows whose nominated work record fuzzily matches to pal joey . take the year record of this row . select the rows whose nominated work record fuzzily matches to marlene . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; nominated work ; pal joey } ; year } ; hop { filter_eq { all_rows ; nominated work ; marlene } ; year } }, interpretation: select the rows whose nominated work record fuzzily matches to pal joey . take the year record of this row . select the rows whose nominated work record fuzzily matches to marlene . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; nominated work ; pal joey } ; year } ; hop { filter_eq { all_rows ; nominated work ; marlene } ; year } }, interpretation: select the rows whose year record fuzzily matches to 1998 . take the result record of this row . select the rows whose year record fuzzily matches to 2010 . take the result record of this row . the first record fuzzily matches to the second record . the result record of the first row is champions . the result record of the second row is champions .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; year ; 1998 } ; result } ; hop { filter_eq { all_rows ; year ; 2010 } ; result } } ; and { eq { hop { filter_eq { all_rows ; year ; 1998 } ; result } ; champions } ; eq { hop { filter_eq { all_rows ; year ; 2010 } ; result } ; champions } } }, interpretation: select the rows whose year record fuzzily matches to 1998 . take the result record of this row . select the rows whose year record fuzzily matches to 2010 . take the result record of this row . the first record fuzzily matches to the second record . the result record of the first row is champions . the result record of the second row is champions .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; year ; 1998 } ; result } ; hop { filter_eq { all_rows ; year ; 2010 } ; result } } ; and { eq { hop { filter_eq { all_rows ; year ; 1998 } ; result } ; champions } ; eq { hop { filter_eq { all_rows ; year ; 2010 } ; result } ; champions } } }, interpretation: select the row whose wins record of all rows is maximum . the year record of this row is 1995 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; year } ; 1995 }, interpretation: select the row whose wins record of all rows is maximum . the year record of this row is 1995 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; year } ; 1995 }, interpretation: select the rows whose score record fuzzily matches to w . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; w } } ; 9 }, interpretation: select the rows whose score record fuzzily matches to w . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; w } } ; 9 }, interpretation: for the nationality records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; united states }, interpretation: for the closed records of all rows , all of them are greater than 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; closed ; 2005 }, interpretation: for the closed records of all rows , all of them are greater than 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { all_rows ; closed ; 2005 }, interpretation: for the reg gp records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reg gp ; 0 }, interpretation: for the reg gp records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; reg gp ; 0 }, interpretation: the average of the crowd record of all rows is 18,333.33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 18,333.33 }, interpretation: the average of the crowd record of all rows is 18,333.33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 18,333.33 }, interpretation: select the rows whose position record is arbitrary . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; position } } ; 7 }, interpretation: select the rows whose position record is arbitrary . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; position } } ; 7 }, interpretation: select the row whose raiders points record of all rows is maximum . the date record of this row is nov 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; raiders points } ; date } ; nov 9 }, interpretation: select the row whose raiders points record of all rows is maximum . the date record of this row is nov 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; raiders points } ; date } ; nov 9 }, interpretation: for the date records of all rows , most of them are greater than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; date ; 2000 }, interpretation: select the rows whose athlete record fuzzily matches to mayra gonz\u00e1lez . take the time record of this row . select the rows whose athlete record fuzzily matches to camila vargas . take the time record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; athlete ; mayra gonz\u00e1lez } ; time } ; hop { filter_eq { all_rows ; athlete ; camila vargas } ; time } }, interpretation: select the rows whose athlete record fuzzily matches to mayra gonz\u00e1lez . take the time record of this row . select the rows whose athlete record fuzzily matches to camila vargas . take the time record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; athlete ; mayra gonz\u00e1lez } ; time } ; hop { filter_eq { all_rows ; athlete ; camila vargas } ; time } }, interpretation: select the rows whose outcome record fuzzily matches to winner . select the row whose date record of these rows is minimum . the tournament record of this row is granby , canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; outcome ; winner } ; date } ; tournament } ; granby , canada }, interpretation: select the rows whose outcome record fuzzily matches to winner . select the row whose date record of these rows is minimum . the tournament record of this row is granby , canada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; outcome ; winner } ; date } ; tournament } ; granby , canada }, interpretation: select the rows whose academic ranking of world universities 2012 record fuzzily matches to not ranked . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; academic ranking of world universities 2012 ; not ranked } } ; 3 }, interpretation: select the rows whose academic ranking of world universities 2012 record fuzzily matches to not ranked . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; academic ranking of world universities 2012 ; not ranked } } ; 3 }, interpretation: select the rows whose player record fuzzily matches to diamon simpson . take the weight record of this row . select the rows whose player record fuzzily matches to reggie williams . take the weight record of this row . the first record is 20 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; diamon simpson } ; weight } ; hop { filter_eq { all_rows ; player ; reggie williams } ; weight } } ; 20 }, interpretation: select the rows whose player record fuzzily matches to diamon simpson . take the weight record of this row . select the rows whose player record fuzzily matches to reggie williams . take the weight record of this row . the first record is 20 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; diamon simpson } ; weight } ; hop { filter_eq { all_rows ; player ; reggie williams } ; weight } } ; 20 }, interpretation: select the rows whose champions record fuzzily matches to jimmy connors . take the year record of this row . select the rows whose champions record fuzzily matches to john mcenroe . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; champions ; jimmy connors } ; year } ; hop { filter_eq { all_rows ; champions ; john mcenroe } ; year } }, interpretation: select the rows whose champions record fuzzily matches to jimmy connors . take the year record of this row . select the rows whose champions record fuzzily matches to john mcenroe . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; champions ; jimmy connors } ; year } ; hop { filter_eq { all_rows ; champions ; john mcenroe } ; year } }, interpretation: for the serial number records of all rows , most of them are greater than 934000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; serial number ; 934000 }, interpretation: for the serial number records of all rows , most of them are greater than 934000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; serial number ; 934000 }, interpretation: select the row whose est record of all rows is 2nd minimum . the reserve record of this row is blue hole .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; est ; 2 } ; reserve } ; blue hole }, interpretation: select the row whose est record of all rows is 2nd minimum . the reserve record of this row is blue hole .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; est ; 2 } ; reserve } ; blue hole }, interpretation: select the rows whose 1st member record fuzzily matches to edmund mordaunt . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st member ; edmund mordaunt } } ; 2 }, interpretation: select the rows whose 1st member record fuzzily matches to edmund mordaunt . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; 1st member ; edmund mordaunt } } ; 2 }, interpretation: the average of the bodyweight record of all rows is 100.55 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; bodyweight } ; 100.55 }, interpretation: the average of the bodyweight record of all rows is 100.55 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; bodyweight } ; 100.55 }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the team record of this row is la lakers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; team } ; la lakers }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the team record of this row is la lakers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; team } ; la lakers }, interpretation: for the intra - molecular structure records of all rows , most of them fuzzily match to no .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; intra - molecular structure ; no }, interpretation: for the intra - molecular structure records of all rows , most of them fuzzily match to no .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; intra - molecular structure ; no }, interpretation: select the rows whose internl tourism receipts 2011 ( million usd ) record fuzzily matches to n/d . there is only one such row in the table . the selected caribbean and n latin america countries record of this unqiue row is cuba . the revenues as % of exports goods and services 2011 record of this unqiue row is n / d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } } ; and { eq { hop { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } ; selected caribbean and n latin america countries } ; cuba } ; eq { hop { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } ; revenues as % of exports goods and services 2011 } ; n / d } } }, interpretation: select the rows whose internl tourism receipts 2011 ( million usd ) record fuzzily matches to n/d . there is only one such row in the table . the selected caribbean and n latin america countries record of this unqiue row is cuba . the revenues as % of exports goods and services 2011 record of this unqiue row is n / d .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } } ; and { eq { hop { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } ; selected caribbean and n latin america countries } ; cuba } ; eq { hop { filter_eq { all_rows ; internl tourism receipts 2011 ( million usd ) ; n/d } ; revenues as % of exports goods and services 2011 } ; n / d } } }, interpretation: for the area ( km square ) records of all rows , most of them are greater than 40 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; area ( km square ) ; 40 }, interpretation: for the area ( km square ) records of all rows , most of them are greater than 40 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; area ( km square ) ; 40 }, interpretation: select the rows whose decision record fuzzily matches to lalime . there is only one such row in the table . the game record of this unqiue row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; decision ; lalime } } ; eq { hop { filter_eq { all_rows ; decision ; lalime } ; game } ; 6 } }, interpretation: select the rows whose decision record fuzzily matches to lalime . there is only one such row in the table . the game record of this unqiue row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; decision ; lalime } } ; eq { hop { filter_eq { all_rows ; decision ; lalime } ; game } ; 6 } }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is john thomas wilson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; john thomas wilson }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is john thomas wilson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; john thomas wilson }, interpretation: for the crowd records of all rows , most of them are greater than 20000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 20000 }, interpretation: for the crowd records of all rows , most of them are greater than 20000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 20000 }, interpretation: select the row whose population record of all rows is 3rd maximum . the english name record of this row is suibin county .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 3 } ; english name } ; suibin county }, interpretation: select the row whose population record of all rows is 3rd maximum . the english name record of this row is suibin county .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 3 } ; english name } ; suibin county }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is john e rankin .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; john e rankin }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is john e rankin .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; john e rankin }, interpretation: select the rows whose score record fuzzily matches to w . there is only one such row in the table . the date record of this unqiue row is april 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; w } } ; eq { hop { filter_eq { all_rows ; score ; w } ; date } ; april 20 } }, interpretation: select the rows whose score record fuzzily matches to w . there is only one such row in the table . the date record of this unqiue row is april 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; w } } ; eq { hop { filter_eq { all_rows ; score ; w } ; date } ; april 20 } }, interpretation: select the rows whose college record fuzzily matches to mercer . select the row whose pick record of these rows is 1st minimum . the player record of this row is sam mitchell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; college ; mercer } ; pick ; 1 } ; player } ; sam mitchell }, interpretation: select the rows whose college record fuzzily matches to mercer . select the row whose pick record of these rows is 1st minimum . the player record of this row is sam mitchell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; college ; mercer } ; pick ; 1 } ; player } ; sam mitchell }, interpretation: for the champions records of all rows , most of them fuzzily match to sparta prague .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; champions ; sparta prague }, interpretation: for the champions records of all rows , most of them fuzzily match to sparta prague .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; champions ; sparta prague }, interpretation: select the row whose championships record of all rows is maximum . the established record of this row is 1979 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; championships } ; established } ; 1979 }, interpretation: select the row whose championships record of all rows is maximum . the established record of this row is 1979 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; championships } ; established } ; 1979 }, interpretation: for the original air date records of all rows , most of them fuzzily match to july .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; original air date ; july }, interpretation: for the original air date records of all rows , most of them fuzzily match to july .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; original air date ; july }, interpretation: select the rows whose nationality record fuzzily matches to japan . select the row whose time record of these rows is maximum . the name record of this row is noriko inada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; nationality ; japan } ; time } ; name } ; noriko inada }, interpretation: select the rows whose nationality record fuzzily matches to japan . select the row whose time record of these rows is maximum . the name record of this row is noriko inada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; nationality ; japan } ; time } ; name } ; noriko inada }, interpretation: select the rows whose name record fuzzily matches to margravine johanna of baden - baden . take the became duchess record of this row . select the rows whose name record fuzzily matches to victoria of saxe - coburg and gotha . take the became duchess record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; margravine johanna of baden - baden } ; became duchess } ; hop { filter_eq { all_rows ; name ; victoria of saxe - coburg and gotha } ; became duchess } }, interpretation: select the rows whose name record fuzzily matches to margravine johanna of baden - baden . take the became duchess record of this row . select the rows whose name record fuzzily matches to victoria of saxe - coburg and gotha . take the became duchess record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; margravine johanna of baden - baden } ; became duchess } ; hop { filter_eq { all_rows ; name ; victoria of saxe - coburg and gotha } ; became duchess } }, interpretation: select the rows whose opponent record fuzzily matches to new york giants . the sum of the attendance record of these rows is 144706 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; new york giants } ; attendance } ; 144706 }, interpretation: select the rows whose opponent record fuzzily matches to new york giants . the sum of the attendance record of these rows is 144706 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; opponent ; new york giants } ; attendance } ; 144706 }, interpretation: for the percent of total imports records of all rows , most of them are greater than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; percent of total imports ; 10 }, interpretation: for the percent of total imports records of all rows , most of them are greater than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; percent of total imports ; 10 }, interpretation: select the row whose height record of all rows is maximum . the name record of this row is rodrigo santana .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height } ; name } ; rodrigo santana }, interpretation: select the row whose height record of all rows is maximum . the name record of this row is rodrigo santana .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; height } ; name } ; rodrigo santana }, interpretation: select the rows whose event record fuzzily matches to doubles . there is only one such row in the table . the athlete record of this unqiue row is iveta bene\u0161ov\u00e1 nicole vaidi\u0161ov\u00e1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; event ; doubles } } ; eq { hop { filter_eq { all_rows ; event ; doubles } ; athlete } ; iveta bene\u0161ov\u00e1 nicole vaidi\u0161ov\u00e1 } }, interpretation: select the rows whose event record fuzzily matches to doubles . there is only one such row in the table . the athlete record of this unqiue row is iveta bene\u0161ov\u00e1 nicole vaidi\u0161ov\u00e1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; event ; doubles } } ; eq { hop { filter_eq { all_rows ; event ; doubles } ; athlete } ; iveta bene\u0161ov\u00e1 nicole vaidi\u0161ov\u00e1 } }, interpretation: for the c apps records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; c apps ; 0 }, interpretation: for the c apps records of all rows , all of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; c apps ; 0 }, interpretation: select the rows whose city of license record fuzzily matches to plainview , texas . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to pampa , texas . take the frequency mhz record of this row . the second record is 0.8 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; city of license ; plainview , texas } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; pampa , texas } ; frequency mhz } } ; -0.8 }, interpretation: select the rows whose city of license record fuzzily matches to plainview , texas . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to pampa , texas . take the frequency mhz record of this row . the second record is 0.8 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; city of license ; plainview , texas } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; pampa , texas } ; frequency mhz } } ; -0.8 }, interpretation: select the rows whose first elected record is less than 2006 . there is only one such row in the table . the incumbent record of this unqiue row is john kline .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; first elected ; 2006 } } ; eq { hop { filter_less { all_rows ; first elected ; 2006 } ; incumbent } ; john kline } }, interpretation: select the rows whose first elected record is less than 2006 . there is only one such row in the table . the incumbent record of this unqiue row is john kline .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; first elected ; 2006 } } ; eq { hop { filter_less { all_rows ; first elected ; 2006 } ; incumbent } ; john kline } }, interpretation: select the rows whose season record fuzzily matches to 2009 . select the row whose points record of these rows is maximum . the club record of this row is barcelona .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; season ; 2009 } ; points } ; club } ; barcelona }, interpretation: select the rows whose season record fuzzily matches to 2009 . select the row whose points record of these rows is maximum . the club record of this row is barcelona .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; season ; 2009 } ; points } ; club } ; barcelona }, interpretation: the average of the finish record of all rows is 4th .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish } ; 4th }, interpretation: the average of the finish record of all rows is 4th .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; finish } ; 4th }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is 7 usc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; 7 usc }, interpretation: select the row whose attendance record of all rows is 1st maximum . the opponent record of this row is 7 usc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; opponent } ; 7 usc }, interpretation: select the rows whose home team record fuzzily matches to manchester city . take the score record of this row . select the rows whose home team record fuzzily matches to arsenal . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; manchester city } ; score } ; hop { filter_eq { all_rows ; home team ; arsenal } ; score } }, interpretation: select the rows whose home team record fuzzily matches to manchester city . take the score record of this row . select the rows whose home team record fuzzily matches to arsenal . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; manchester city } ; score } ; hop { filter_eq { all_rows ; home team ; arsenal } ; score } }, interpretation: select the rows whose english ( streamline ) record fuzzily matches to unknown . among these rows , select the rows whose english ( pioneer / geneon ) record fuzzily matches to richard cansino . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; english ( streamline ) ; unknown } ; english ( pioneer / geneon ) ; richard cansino } } ; 2 }, interpretation: select the rows whose english ( streamline ) record fuzzily matches to unknown . among these rows , select the rows whose english ( pioneer / geneon ) record fuzzily matches to richard cansino . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; english ( streamline ) ; unknown } ; english ( pioneer / geneon ) ; richard cansino } } ; 2 }, interpretation: select the rows whose college record fuzzily matches to florida state . there is only one such row in the table . the player record of this unqiue row is nick o'leary .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; florida state } } ; eq { hop { filter_eq { all_rows ; college ; florida state } ; player } ; nick o'leary } }, interpretation: select the rows whose college record fuzzily matches to florida state . there is only one such row in the table . the player record of this unqiue row is nick o'leary .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; florida state } } ; eq { hop { filter_eq { all_rows ; college ; florida state } ; player } ; nick o'leary } }, interpretation: select the rows whose date of successors formal installation record fuzzily matches to not filled this term . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date of successors formal installation ; not filled this term } } ; 2 }, interpretation: select the rows whose date of successors formal installation record fuzzily matches to not filled this term . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date of successors formal installation ; not filled this term } } ; 2 }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is kalomira .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; kalomira }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is kalomira .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; kalomira }, interpretation: select the rows whose directed by record fuzzily matches to david grossman . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; david grossman } } ; 5 }, interpretation: select the rows whose directed by record fuzzily matches to david grossman . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; david grossman } } ; 5 }, interpretation: the sum of the list votes record of all rows is 66617 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; list votes } ; 66617 }, interpretation: the sum of the list votes record of all rows is 66617 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; list votes } ; 66617 }, interpretation: select the rows whose nationality record fuzzily matches to canada . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; canada } } ; 4 }, interpretation: select the rows whose nationality record fuzzily matches to canada . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nationality ; canada } } ; 4 }, interpretation: select the rows whose economy rate record is greater than 4.0 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; economy rate ; 4.0 } } ; 4 }, interpretation: select the rows whose economy rate record is greater than 4.0 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; economy rate ; 4.0 } } ; 4 }, interpretation: select the rows whose surface record fuzzily matches to hard ( i ) . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; surface ; hard ( i ) } }, interpretation: select the rows whose surface record fuzzily matches to hard ( i ) . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; surface ; hard ( i ) } }, interpretation: select the rows whose written by record fuzzily matches to dan schneider . for the us viewers ( millions ) records of these rows , most of them are less than 5 million .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; written by ; dan schneider } ; us viewers ( millions ) ; 5 million }, interpretation: select the rows whose written by record fuzzily matches to dan schneider . for the us viewers ( millions ) records of these rows , most of them are less than 5 million .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; written by ; dan schneider } ; us viewers ( millions ) ; 5 million }, interpretation: for the result records of all rows , most of them fuzzily match to loss .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; loss }, interpretation: select the rows whose name record fuzzily matches to janne ahonen . take the points record of this row . select the rows whose name record fuzzily matches to anders bardal . take the points record of this row . the first record is greater than the second record . the points record of the first row is 258.8 . the points record of the second row is 255.7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; janne ahonen } ; points } ; hop { filter_eq { all_rows ; name ; anders bardal } ; points } } ; and { eq { hop { filter_eq { all_rows ; name ; janne ahonen } ; points } ; 258.8 } ; eq { hop { filter_eq { all_rows ; name ; anders bardal } ; points } ; 255.7 } } }, interpretation: select the rows whose name record fuzzily matches to janne ahonen . take the points record of this row . select the rows whose name record fuzzily matches to anders bardal . take the points record of this row . the first record is greater than the second record . the points record of the first row is 258.8 . the points record of the second row is 255.7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; janne ahonen } ; points } ; hop { filter_eq { all_rows ; name ; anders bardal } ; points } } ; and { eq { hop { filter_eq { all_rows ; name ; janne ahonen } ; points } ; 258.8 } ; eq { hop { filter_eq { all_rows ; name ; anders bardal } ; points } ; 255.7 } } }, interpretation: select the rows whose location attendance record fuzzily matches to wachovia center . there is only one such row in the table . the game record of this unqiue row is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location attendance ; wachovia center } } ; eq { hop { filter_eq { all_rows ; location attendance ; wachovia center } ; game } ; 10 } }, interpretation: select the rows whose location attendance record fuzzily matches to wachovia center . there is only one such row in the table . the game record of this unqiue row is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location attendance ; wachovia center } } ; eq { hop { filter_eq { all_rows ; location attendance ; wachovia center } ; game } ; 10 } }, interpretation: for the points records of all rows , most of them are greater than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 10 }, interpretation: for the points records of all rows , most of them are greater than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 10 }, interpretation: the 1st maximum carpet record of all rows is 1 - 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; carpet ; 1 } ; 1 - 0 }, interpretation: the 1st maximum carpet record of all rows is 1 - 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_max { all_rows ; carpet ; 1 } ; 1 - 0 }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . select the row whose first elected record of these rows is 1st minimum . the incumbent record of this row is john h kerr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; candidates ; unopposed } ; first elected ; 1 } ; incumbent } ; john h kerr }, interpretation: select the rows whose candidates record fuzzily matches to unopposed . select the row whose first elected record of these rows is 1st minimum . the incumbent record of this row is john h kerr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; candidates ; unopposed } ; first elected ; 1 } ; incumbent } ; john h kerr }, interpretation: select the row whose overall record record of all rows is maximum . the school record of this row is delmar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overall record } ; school } ; delmar }, interpretation: select the row whose overall record record of all rows is maximum . the school record of this row is delmar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; overall record } ; school } ; delmar }, interpretation: for the points records of all rows , most of them are greater than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; points ; 10 }, interpretation: for the length records of all rows , most of them are less than 5:00 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; length ; 5:00 }, interpretation: for the length records of all rows , most of them are less than 5:00 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; length ; 5:00 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 7 }, interpretation: select the rows whose party record fuzzily matches to democratic . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; party ; democratic } } ; 7 }, interpretation: select the row whose length record of all rows is maximum . the version record of this row is music video .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; version } ; music video }, interpretation: select the row whose length record of all rows is maximum . the version record of this row is music video .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; version } ; music video }, interpretation: for the apparent magnitude records of all rows , most of them are greater than 10.0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; apparent magnitude ; 10.0 }, interpretation: for the apparent magnitude records of all rows , most of them are greater than 10.0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; apparent magnitude ; 10.0 }, interpretation: select the rows whose location record fuzzily matches to calgary . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; calgary } } ; 2 }, interpretation: select the rows whose location record fuzzily matches to calgary . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; calgary } } ; 2 }, interpretation: select the rows whose location attendance record fuzzily matches to energy solutions arena . the average of the location attendance record of these rows is 19911 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; location attendance ; energy solutions arena } ; location attendance } ; 19911 }, interpretation: select the rows whose location attendance record fuzzily matches to energy solutions arena . the average of the location attendance record of these rows is 19911 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; location attendance ; energy solutions arena } ; location attendance } ; 19911 }, interpretation: select the rows whose time record is greater than 48 . there is only one such row in the table . the athlete record of this unqiue row is naiel santiago d'almeida .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; time ; 48 } } ; eq { hop { filter_greater { all_rows ; time ; 48 } ; athlete } ; naiel santiago d'almeida } }, interpretation: select the rows whose time record is greater than 48 . there is only one such row in the table . the athlete record of this unqiue row is naiel santiago d'almeida .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; time ; 48 } } ; eq { hop { filter_greater { all_rows ; time ; 48 } ; athlete } ; naiel santiago d'almeida } }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the site record of this row is ben hill griffin stadium gainesville , fl .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; site } ; ben hill griffin stadium gainesville , fl }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the site record of this row is ben hill griffin stadium gainesville , fl .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; site } ; ben hill griffin stadium gainesville , fl }, interpretation: for the 2nd place records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; 2nd place ; 1 }, interpretation: for the 2nd place records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; 2nd place ; 1 }, interpretation: select the rows whose club record is arbitrary . the number of such rows is 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; club } } ; 20 }, interpretation: select the rows whose club record is arbitrary . the number of such rows is 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; club } } ; 20 }, interpretation: the average of the seasons record of all rows is 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; seasons } ; 15 }, interpretation: the average of the seasons record of all rows is 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; seasons } ; 15 }, interpretation: select the rows whose position record fuzzily matches to c . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; c } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to c . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; c } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 5 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 5 }, interpretation: select the row whose finish record of all rows is 2nd minimum . the player record of this row is jeff sluman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; finish ; 2 } ; player } ; jeff sluman }, interpretation: select the row whose finish record of all rows is 2nd minimum . the player record of this row is jeff sluman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; finish ; 2 } ; player } ; jeff sluman }, interpretation: the average of the votes record of all rows is 13004 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; votes } ; 13004 }, interpretation: the average of the votes record of all rows is 13004 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; votes } ; 13004 }, interpretation: select the rows whose competition record fuzzily matches to 1979 president 's cup . the sum of the score record of these rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; competition ; 1979 president 's cup } ; score } ; 4 }, interpretation: select the rows whose competition record fuzzily matches to 1979 president 's cup . the sum of the score record of these rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; competition ; 1979 president 's cup } ; score } ; 4 }, interpretation: select the rows whose date record fuzzily matches to sun dec 24 . take the result record of this row . select the rows whose date record fuzzily matches to sun dec 17 . take the result record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; sun dec 24 } ; result } ; hop { filter_eq { all_rows ; date ; sun dec 17 } ; result } }, interpretation: select the rows whose date record fuzzily matches to sun dec 24 . take the result record of this row . select the rows whose date record fuzzily matches to sun dec 17 . take the result record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; sun dec 24 } ; result } ; hop { filter_eq { all_rows ; date ; sun dec 17 } ; result } }, interpretation: for the gold records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; gold ; 0 }, interpretation: for the gold records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; gold ; 0 }, interpretation: select the rows whose staffel a record fuzzily matches to tsg wismar . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; staffel a ; tsg wismar } }, interpretation: select the rows whose staffel a record fuzzily matches to tsg wismar . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; staffel a ; tsg wismar } }, interpretation: for the year records of all rows , most of them are less than 1960 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year ; 1960 }, interpretation: for the year records of all rows , most of them are less than 1960 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; year ; 1960 }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . take the january record of this row . select the rows whose opponent record fuzzily matches to carolina hurricanes . take the january record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; chicago blackhawks } ; january } ; hop { filter_eq { all_rows ; opponent ; carolina hurricanes } ; january } }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . take the january record of this row . select the rows whose opponent record fuzzily matches to carolina hurricanes . take the january record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; chicago blackhawks } ; january } ; hop { filter_eq { all_rows ; opponent ; carolina hurricanes } ; january } }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: select the rows whose city of license record fuzzily matches to san antonio . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; city of license ; san antonio } } ; 4 }, interpretation: select the rows whose city of license record fuzzily matches to san antonio . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; city of license ; san antonio } } ; 4 }, interpretation: select the rows whose high rebounds record fuzzily matches to m cage . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; m cage } } ; 3 }, interpretation: select the rows whose high rebounds record fuzzily matches to m cage . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high rebounds ; m cage } } ; 3 }, interpretation: select the row whose date of successors formal installation record of all rows is 2nd maximum . the successor record of this row is james chesnut , jr ( d ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date of successors formal installation ; 2 } ; successor } ; james chesnut , jr ( d ) }, interpretation: select the row whose date of successors formal installation record of all rows is 2nd maximum . the successor record of this row is james chesnut , jr ( d ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date of successors formal installation ; 2 } ; successor } ; james chesnut , jr ( d ) }, interpretation: select the rows whose party record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; party } } ; 6 }, interpretation: select the rows whose party record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; party } } ; 6 }, interpretation: select the rows whose played record is less than 10 . among these rows , select the rows whose palace wins record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; played ; 10 } ; palace wins ; 0 } } ; 3 }, interpretation: select the rows whose played record is less than 10 . among these rows , select the rows whose palace wins record is equal to 0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_less { all_rows ; played ; 10 } ; palace wins ; 0 } } ; 3 }, interpretation: select the rows whose incumbent record fuzzily matches to jack thomas brinkley . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to john w davis . take the first elected record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; incumbent ; jack thomas brinkley } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; john w davis } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to jack thomas brinkley . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to john w davis . take the first elected record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; incumbent ; jack thomas brinkley } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; john w davis } ; first elected } }, interpretation: select the rows whose home record fuzzily matches to wizards . there is only one such row in the table . the date record of this unqiue row is 4 february 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; home ; wizards } } ; eq { hop { filter_eq { all_rows ; home ; wizards } ; date } ; 4 february 2003 } }, interpretation: select the rows whose home record fuzzily matches to wizards . there is only one such row in the table . the date record of this unqiue row is 4 february 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; home ; wizards } } ; eq { hop { filter_eq { all_rows ; home ; wizards } ; date } ; 4 february 2003 } }, interpretation: select the rows whose player record fuzzily matches to kenny solomon . take the td 's record of this row . select the rows whose player record fuzzily matches to chris ryan . take the td 's record of this row . the first record is 2 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; kenny solomon } ; td 's } ; hop { filter_eq { all_rows ; player ; chris ryan } ; td 's } } ; 2 }, interpretation: select the rows whose player record fuzzily matches to kenny solomon . take the td 's record of this row . select the rows whose player record fuzzily matches to chris ryan . take the td 's record of this row . the first record is 2 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; kenny solomon } ; td 's } ; hop { filter_eq { all_rows ; player ; chris ryan } ; td 's } } ; 2 }, interpretation: the sum of the races record of all rows is 123 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 123 }, interpretation: the sum of the races record of all rows is 123 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 123 }, interpretation: select the rows whose tournament record fuzzily matches to sweden . there is only one such row in the table . the date record of this unqiue row is 4 july 1988 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; sweden } } ; eq { hop { filter_eq { all_rows ; tournament ; sweden } ; date } ; 4 july 1988 } }, interpretation: select the rows whose tournament record fuzzily matches to sweden . there is only one such row in the table . the date record of this unqiue row is 4 july 1988 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; sweden } } ; eq { hop { filter_eq { all_rows ; tournament ; sweden } ; date } ; 4 july 1988 } }, interpretation: select the rows whose mens singles record fuzzily matches to alan budi kusuma . take the year record of this row . select the rows whose mens singles record fuzzily matches to hermawan susanto . take the year record of this row . the second record is 1 year larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; mens singles ; alan budi kusuma } ; year } ; hop { filter_eq { all_rows ; mens singles ; hermawan susanto } ; year } } ; -1 year }, interpretation: select the rows whose mens singles record fuzzily matches to alan budi kusuma . take the year record of this row . select the rows whose mens singles record fuzzily matches to hermawan susanto . take the year record of this row . the second record is 1 year larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; mens singles ; alan budi kusuma } ; year } ; hop { filter_eq { all_rows ; mens singles ; hermawan susanto } ; year } } ; -1 year }, interpretation: select the rows whose chassis - engine record fuzzily matches to porsche 962 c . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; chassis - engine ; porsche 962 c } } ; 8 }, interpretation: select the rows whose chassis - engine record fuzzily matches to porsche 962 c . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; chassis - engine ; porsche 962 c } } ; 8 }, interpretation: the average of the average record of all rows is 5.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; average } ; 5.5 }, interpretation: the average of the average record of all rows is 5.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; average } ; 5.5 }, interpretation: select the row whose total offense record of all rows is maximum . the player record of this row is devin gardner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total offense } ; player } ; devin gardner }, interpretation: select the row whose total offense record of all rows is maximum . the player record of this row is devin gardner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total offense } ; player } ; devin gardner }, interpretation: the minimum result record of all rows is 2nd .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { all_rows ; result } ; 2nd }, interpretation: the minimum result record of all rows is 2nd .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { all_rows ; result } ; 2nd }, interpretation: select the rows whose score record is equal to 66 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 66 } } ; 4 }, interpretation: select the rows whose score record is equal to 66 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; score ; 66 } } ; 4 }, interpretation: for the date records of all rows , all of them fuzzily match to march .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; march }, interpretation: for the date records of all rows , all of them fuzzily match to march .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; march }, interpretation: the average of the wins record of all rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; 3 }, interpretation: the average of the wins record of all rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; wins } ; 3 }, interpretation: select the rows whose channel record is less than 10 . there is only one such row in the table . the callsign record of this unqiue row is wnbc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; channel ; 10 } } ; eq { hop { filter_less { all_rows ; channel ; 10 } ; callsign } ; wnbc } }, interpretation: select the rows whose channel record is less than 10 . there is only one such row in the table . the callsign record of this unqiue row is wnbc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; channel ; 10 } } ; eq { hop { filter_less { all_rows ; channel ; 10 } ; callsign } ; wnbc } }, interpretation: select the rows whose location record fuzzily matches to china . among these rows , select the rows whose authors record fuzzily matches to yuan . there is only one such row in the table . the name record of this unqiue row is didactylornis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; china } ; authors ; yuan } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; china } ; authors ; yuan } ; name } ; didactylornis } }, interpretation: select the rows whose location record fuzzily matches to china . among these rows , select the rows whose authors record fuzzily matches to yuan . there is only one such row in the table . the name record of this unqiue row is didactylornis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; china } ; authors ; yuan } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; china } ; authors ; yuan } ; name } ; didactylornis } }, interpretation: select the row whose points record of all rows is 1st maximum . the player record of this row is bill daley .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 1 } ; player } ; bill daley }, interpretation: select the row whose points record of all rows is 1st maximum . the player record of this row is bill daley .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 1 } ; player } ; bill daley }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the week record of this row is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; week } ; 8 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the week record of this row is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; week } ; 8 }, interpretation: select the rows whose race record fuzzily matches to japan cup . take the dist ( f ) record of this row . select the rows whose race record fuzzily matches to buttercross limited stakes . take the dist ( f ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; race ; japan cup } ; dist ( f ) } ; hop { filter_eq { all_rows ; race ; buttercross limited stakes } ; dist ( f ) } }, interpretation: select the rows whose race record fuzzily matches to japan cup . take the dist ( f ) record of this row . select the rows whose race record fuzzily matches to buttercross limited stakes . take the dist ( f ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; race ; japan cup } ; dist ( f ) } ; hop { filter_eq { all_rows ; race ; buttercross limited stakes } ; dist ( f ) } }, interpretation: select the row whose duration record of all rows is maximum . the song record of this row is rey salvador .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; song } ; rey salvador }, interpretation: select the row whose duration record of all rows is maximum . the song record of this row is rey salvador .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; duration } ; song } ; rey salvador }, interpretation: select the rows whose location record fuzzily matches to st pete times forum . select the row whose game record of these rows is 1st minimum . the attendance record of this row is 16104 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; location ; st pete times forum } ; game ; 1 } ; attendance } ; 16104 }, interpretation: select the rows whose location record fuzzily matches to st pete times forum . select the row whose game record of these rows is 1st minimum . the attendance record of this row is 16104 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; location ; st pete times forum } ; game ; 1 } ; attendance } ; 16104 }, interpretation: select the rows whose driver record fuzzily matches to erik darnell . take the car record of this row . select the rows whose driver record fuzzily matches to bobby east . take the car record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; erik darnell } ; car } ; hop { filter_eq { all_rows ; driver ; bobby east } ; car } }, interpretation: select the rows whose driver record fuzzily matches to erik darnell . take the car record of this row . select the rows whose driver record fuzzily matches to bobby east . take the car record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; driver ; erik darnell } ; car } ; hop { filter_eq { all_rows ; driver ; bobby east } ; car } }, interpretation: select the row whose founded record of all rows is 3rd minimum . the institution record of this row is george washington university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; founded ; 3 } ; institution } ; george washington university }, interpretation: select the row whose founded record of all rows is 3rd minimum . the institution record of this row is george washington university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; founded ; 3 } ; institution } ; george washington university }, interpretation: select the rows whose decade record fuzzily matches to 1970s . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; decade ; 1970s } } ; 2 }, interpretation: select the rows whose decade record fuzzily matches to 1970s . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; decade ; 1970s } } ; 2 }, interpretation: select the rows whose high assists record fuzzily matches to mo williams . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high assists ; mo williams } } ; 5 }, interpretation: select the rows whose high assists record fuzzily matches to mo williams . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high assists ; mo williams } } ; 5 }, interpretation: select the rows whose stadium record fuzzily matches to mikheil meskhi stadium . take the capacity record of this row . select the rows whose stadium record fuzzily matches to sasha kvaratskhelia stadium . take the capacity record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; stadium ; mikheil meskhi stadium } ; capacity } ; hop { filter_eq { all_rows ; stadium ; sasha kvaratskhelia stadium } ; capacity } }, interpretation: select the rows whose stadium record fuzzily matches to mikheil meskhi stadium . take the capacity record of this row . select the rows whose stadium record fuzzily matches to sasha kvaratskhelia stadium . take the capacity record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; stadium ; mikheil meskhi stadium } ; capacity } ; hop { filter_eq { all_rows ; stadium ; sasha kvaratskhelia stadium } ; capacity } }, interpretation: the 2nd minimum date record of all rows is 22 february 1998 . the tournament record of the row with 2nd minimum date record is hannover , germany .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 2 } ; 22 february 1998 } ; eq { hop { nth_argmin { all_rows ; date ; 2 } ; tournament } ; hannover , germany } }, interpretation: the 2nd minimum date record of all rows is 22 february 1998 . the tournament record of the row with 2nd minimum date record is hannover , germany .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date ; 2 } ; 22 february 1998 } ; eq { hop { nth_argmin { all_rows ; date ; 2 } ; tournament } ; hannover , germany } }, interpretation: select the rows whose name record fuzzily matches to larry lutz . take the round record of this row . select the rows whose name record fuzzily matches to don irwin . take the round record of this row . the second record is 1 larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; larry lutz } ; round } ; hop { filter_eq { all_rows ; name ; don irwin } ; round } } ; -1 }, interpretation: select the rows whose name record fuzzily matches to larry lutz . take the round record of this row . select the rows whose name record fuzzily matches to don irwin . take the round record of this row . the second record is 1 larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; name ; larry lutz } ; round } ; hop { filter_eq { all_rows ; name ; don irwin } ; round } } ; -1 }, interpretation: select the rows whose player record fuzzily matches to ( can ) . the sum of the goals record of these rows is 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; player ; ( can ) } ; goals } ; 26 }, interpretation: select the rows whose player record fuzzily matches to ( can ) . the sum of the goals record of these rows is 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; player ; ( can ) } ; goals } ; 26 }, interpretation: for the parish ( prestegjeld ) records of all rows , all of them fuzzily match to kinn parish .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; parish ( prestegjeld ) ; kinn parish }, interpretation: for the parish ( prestegjeld ) records of all rows , all of them fuzzily match to kinn parish .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; parish ( prestegjeld ) ; kinn parish }, interpretation: select the rows whose rider record fuzzily matches to suzuki . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; rider ; suzuki } }, interpretation: select the rows whose rider record fuzzily matches to suzuki . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; rider ; suzuki } }, interpretation: select the rows whose year record fuzzily matches to 2005 . take the money ( \uffe5 ) record of this row . select the rows whose year record fuzzily matches to 2006 . take the money ( \uffe5 ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2005 } ; money ( \uffe5 ) } ; hop { filter_eq { all_rows ; year ; 2006 } ; money ( \uffe5 ) } }, interpretation: select the rows whose year record fuzzily matches to 2005 . take the money ( \uffe5 ) record of this row . select the rows whose year record fuzzily matches to 2006 . take the money ( \uffe5 ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 2005 } ; money ( \uffe5 ) } ; hop { filter_eq { all_rows ; year ; 2006 } ; money ( \uffe5 ) } }, interpretation: for the distance ( miles ) records of all rows , all of them fuzzily match to 1-3 / 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; distance ( miles ) ; 1-3 / 16 }, interpretation: for the distance ( miles ) records of all rows , all of them fuzzily match to 1-3 / 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; distance ( miles ) ; 1-3 / 16 }, interpretation: the sum of the capacity record of all rows is 185080 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; capacity } ; 185080 }, interpretation: the sum of the capacity record of all rows is 185080 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; capacity } ; 185080 }, interpretation: select the rows whose title record fuzzily matches to we all scream for ice cream . take the original air date record of this row . select the rows whose title record fuzzily matches to the demon who came in from the cold . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; we all scream for ice cream } ; original air date } ; hop { filter_eq { all_rows ; title ; the demon who came in from the cold } ; original air date } }, interpretation: select the rows whose title record fuzzily matches to we all scream for ice cream . take the original air date record of this row . select the rows whose title record fuzzily matches to the demon who came in from the cold . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; title ; we all scream for ice cream } ; original air date } ; hop { filter_eq { all_rows ; title ; the demon who came in from the cold } ; original air date } }, interpretation: for the tv time records of all rows , most of them fuzzily match to cbs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; tv time ; cbs }, interpretation: select the rows whose episode title record fuzzily matches to remember . take the original air date record of this row . select the rows whose episode title record fuzzily matches to big brotherly love . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; episode title ; remember } ; original air date } ; hop { filter_eq { all_rows ; episode title ; big brotherly love } ; original air date } }, interpretation: select the rows whose episode title record fuzzily matches to remember . take the original air date record of this row . select the rows whose episode title record fuzzily matches to big brotherly love . take the original air date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; episode title ; remember } ; original air date } ; hop { filter_eq { all_rows ; episode title ; big brotherly love } ; original air date } }, interpretation: the average of the attendance record of all rows is 68,559 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 68,559 }, interpretation: the average of the attendance record of all rows is 68,559 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 68,559 }, interpretation: the average of the composition record of all rows is 99 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; composition } ; 99 }, interpretation: the average of the composition record of all rows is 99 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; composition } ; 99 }, interpretation: select the rows whose team record fuzzily matches to rial racing . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; rial racing } } ; eq { hop { filter_eq { all_rows ; team ; rial racing } ; year } ; 1989 } }, interpretation: select the rows whose team record fuzzily matches to rial racing . there is only one such row in the table . the year record of this unqiue row is 1989 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; rial racing } } ; eq { hop { filter_eq { all_rows ; team ; rial racing } ; year } ; 1989 } }, interpretation: select the rows whose owned since record is equal to 2011 . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; owned since ; 2011 } } ; 9 }, interpretation: select the rows whose owned since record is equal to 2011 . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; owned since ; 2011 } } ; 9 }, interpretation: select the row whose number of seasons in liga mx record of all rows is maximum . the club record of this row is am\u00e9rica .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number of seasons in liga mx } ; club } ; am\u00e9rica }, interpretation: select the row whose number of seasons in liga mx record of all rows is maximum . the club record of this row is am\u00e9rica .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; number of seasons in liga mx } ; club } ; am\u00e9rica }, interpretation: select the row whose oilers points record of all rows is 3rd minimum . the date record of this row is oct 29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; oilers points ; 3 } ; date } ; oct 29 }, interpretation: select the row whose oilers points record of all rows is 3rd minimum . the date record of this row is oct 29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; oilers points ; 3 } ; date } ; oct 29 }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is thomas j lane .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; thomas j lane }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is thomas j lane .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; thomas j lane }, interpretation: select the rows whose year record is equal to 2011 . there is only one such row in the table . the title of movie record of this unqiue row is already famous \u300a \u4e00\u6ce1\u800c\u7d05 \u300b .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2011 } } ; eq { hop { filter_eq { all_rows ; year ; 2011 } ; title of movie } ; already famous \u300a \u4e00\u6ce1\u800c\u7d05 \u300b } }, interpretation: select the rows whose year record is equal to 2011 . there is only one such row in the table . the title of movie record of this unqiue row is already famous \u300a \u4e00\u6ce1\u800c\u7d05 \u300b .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2011 } } ; eq { hop { filter_eq { all_rows ; year ; 2011 } ; title of movie } ; already famous \u300a \u4e00\u6ce1\u800c\u7d05 \u300b } }, interpretation: the maximum score record of all rows is w 110 - 93 ( ot ) . the score record of the row with superlative score record is w 110 - 93 ( ot ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; score } ; w 110 - 93 ( ot ) } ; eq { hop { argmax { all_rows ; score } ; score } ; w 110 - 93 ( ot ) } }, interpretation: the maximum score record of all rows is w 110 - 93 ( ot ) . the score record of the row with superlative score record is w 110 - 93 ( ot ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; score } ; w 110 - 93 ( ot ) } ; eq { hop { argmax { all_rows ; score } ; score } ; w 110 - 93 ( ot ) } }, interpretation: for the location records of all rows , most of them fuzzily match to saitama , japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; saitama , japan }, interpretation: for the location records of all rows , most of them fuzzily match to saitama , japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; saitama , japan }, interpretation: select the rows whose nationality record fuzzily matches to canada . among these rows , select the rows whose college / junior / club team ( league ) record fuzzily matches to london knights ( ohl ) . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; nationality ; canada } ; college / junior / club team ( league ) ; london knights ( ohl ) } } ; 2 }, interpretation: select the rows whose nationality record fuzzily matches to canada . among these rows , select the rows whose college / junior / club team ( league ) record fuzzily matches to london knights ( ohl ) . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; nationality ; canada } ; college / junior / club team ( league ) ; london knights ( ohl ) } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to quarterback . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; quarterback } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to quarterback . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; quarterback } } ; 2 }, interpretation: select the row whose us r & b record of all rows is 2nd maximum . the title record of this row is pretty mess .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us r & b ; 2 } ; title } ; pretty mess }, interpretation: select the row whose us r & b record of all rows is 2nd maximum . the title record of this row is pretty mess .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; us r & b ; 2 } ; title } ; pretty mess }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is matera ( h15 ) . the team 2 record of this row is ( h14 ) quarto .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; agg } ; team 1 } ; matera ( h15 ) } ; eq { hop { argmax { all_rows ; agg } ; team 2 } ; ( h14 ) quarto } }, interpretation: select the row whose agg record of all rows is maximum . the team 1 record of this row is matera ( h15 ) . the team 2 record of this row is ( h14 ) quarto .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { argmax { all_rows ; agg } ; team 1 } ; matera ( h15 ) } ; eq { hop { argmax { all_rows ; agg } ; team 2 } ; ( h14 ) quarto } }, interpretation: for the series records of all rows , most of them fuzzily match to formula 3 championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; series ; formula 3 championship }, interpretation: for the series records of all rows , most of them fuzzily match to formula 3 championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; series ; formula 3 championship }, interpretation: select the rows whose position record fuzzily matches to goaltender . there is only one such row in the table . the pick record of this unqiue row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; goaltender } } ; eq { hop { filter_eq { all_rows ; position ; goaltender } ; pick } ; 6 } }, interpretation: select the rows whose position record fuzzily matches to goaltender . there is only one such row in the table . the pick record of this unqiue row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; goaltender } } ; eq { hop { filter_eq { all_rows ; position ; goaltender } ; pick } ; 6 } }, interpretation: select the rows whose date record fuzzily matches to november . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; november } } ; 4 }, interpretation: select the rows whose date record fuzzily matches to november . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; november } } ; 4 }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is vfl park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; vfl park }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is vfl park .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; vfl park }, interpretation: select the row whose date record of all rows is 1st minimum . the visitor record of this row is new jersey .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; visitor } ; new jersey }, interpretation: select the row whose date record of all rows is 1st minimum . the visitor record of this row is new jersey .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; visitor } ; new jersey }, interpretation: the average of the floors record of all rows is 24.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; floors } ; 24.8 }, interpretation: the average of the floors record of all rows is 24.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; floors } ; 24.8 }, interpretation: for the pos records of all rows , most of them fuzzily match to cf .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; pos ; cf }, interpretation: for the pos records of all rows , most of them fuzzily match to cf .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; pos ; cf }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the rows whose creative excellency record fuzzily matches to atom egoyan . there is only one such row in the table . the year record of this unqiue row is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; creative excellency ; atom egoyan } } ; eq { hop { filter_eq { all_rows ; creative excellency ; atom egoyan } ; year } ; 2006 } }, interpretation: select the rows whose creative excellency record fuzzily matches to atom egoyan . there is only one such row in the table . the year record of this unqiue row is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; creative excellency ; atom egoyan } } ; eq { hop { filter_eq { all_rows ; creative excellency ; atom egoyan } ; year } ; 2006 } }, interpretation: select the rows whose location attendance record fuzzily matches to pepsi center . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; pepsi center } } ; 7 }, interpretation: select the rows whose location attendance record fuzzily matches to pepsi center . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location attendance ; pepsi center } } ; 7 }, interpretation: select the row whose progressive conservative record of all rows is 3rd maximum . the date of polling record of this row is february 12 - march 4 , 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; progressive conservative ; 3 } ; date of polling } ; february 12 - march 4 , 2008 }, interpretation: select the row whose progressive conservative record of all rows is 3rd maximum . the date of polling record of this row is february 12 - march 4 , 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; progressive conservative ; 3 } ; date of polling } ; february 12 - march 4 , 2008 }, interpretation: select the row whose wards / branches in arkansas record of all rows is 3rd maximum . the stake record of this row is springdale arkansas stake .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; wards / branches in arkansas ; 3 } ; stake } ; springdale arkansas stake }, interpretation: select the row whose wards / branches in arkansas record of all rows is 3rd maximum . the stake record of this row is springdale arkansas stake .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; wards / branches in arkansas ; 3 } ; stake } ; springdale arkansas stake }, interpretation: for the event records of all rows , most of them fuzzily match to 50 km .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; 50 km }, interpretation: for the event records of all rows , most of them fuzzily match to 50 km .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; 50 km }, interpretation: select the rows whose player record fuzzily matches to alan farina . take the years played record of this row . select the rows whose player record fuzzily matches to kent matthes . take the years played record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; alan farina } ; years played } ; hop { filter_eq { all_rows ; player ; kent matthes } ; years played } }, interpretation: select the rows whose player record fuzzily matches to alan farina . take the years played record of this row . select the rows whose player record fuzzily matches to kent matthes . take the years played record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; alan farina } ; years played } ; hop { filter_eq { all_rows ; player ; kent matthes } ; years played } }, interpretation: select the rows whose best record is greater than 1:25.000 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; best ; 1:25.000 } } ; 6 }, interpretation: select the rows whose best record is greater than 1:25.000 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; best ; 1:25.000 } } ; 6 }, interpretation: select the rows whose directed by record fuzzily matches to turi meyer . there is only one such row in the table . the - record of this unqiue row is 6 . the title record of this unqiue row is harvest .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; turi meyer } } ; and { eq { hop { filter_eq { all_rows ; directed by ; turi meyer } ; - } ; 6 } ; eq { hop { filter_eq { all_rows ; directed by ; turi meyer } ; title } ; harvest } } }, interpretation: select the rows whose directed by record fuzzily matches to turi meyer . there is only one such row in the table . the - record of this unqiue row is 6 . the title record of this unqiue row is harvest .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; turi meyer } } ; and { eq { hop { filter_eq { all_rows ; directed by ; turi meyer } ; - } ; 6 } ; eq { hop { filter_eq { all_rows ; directed by ; turi meyer } ; title } ; harvest } } }, interpretation: for the builder records of all rows , most of them fuzzily match to avonside engine company .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; builder ; avonside engine company }, interpretation: for the builder records of all rows , most of them fuzzily match to avonside engine company .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; builder ; avonside engine company }, interpretation: select the rows whose county record is arbitrary . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; county } } ; 7 }, interpretation: select the rows whose county record is arbitrary . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; county } } ; 7 }, interpretation: select the rows whose athlete record fuzzily matches to philomena mensah . take the time record of this row . select the rows whose athlete record fuzzily matches to marita koch . take the time record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; athlete ; philomena mensah } ; time } ; hop { filter_eq { all_rows ; athlete ; marita koch } ; time } }, interpretation: select the rows whose athlete record fuzzily matches to philomena mensah . take the time record of this row . select the rows whose athlete record fuzzily matches to marita koch . take the time record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; athlete ; philomena mensah } ; time } ; hop { filter_eq { all_rows ; athlete ; marita koch } ; time } }, interpretation: select the rows whose competition record fuzzily matches to 2014 fifa world cup qualification . there is only one such row in the table . the date record of this unqiue row is 15 october 2013 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; 2014 fifa world cup qualification } } ; eq { hop { filter_eq { all_rows ; competition ; 2014 fifa world cup qualification } ; date } ; 15 october 2013 } }, interpretation: select the rows whose competition record fuzzily matches to 2014 fifa world cup qualification . there is only one such row in the table . the date record of this unqiue row is 15 october 2013 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; 2014 fifa world cup qualification } } ; eq { hop { filter_eq { all_rows ; competition ; 2014 fifa world cup qualification } ; date } ; 15 october 2013 } }, interpretation: the sum of the goals for record of all rows is 812 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; goals for } ; 812 }, interpretation: the sum of the goals for record of all rows is 812 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; goals for } ; 812 }, interpretation: select the rows whose october 20 , 2008 record fuzzily matches to 2010 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; october 20 , 2008 ; 2010 } } ; 6 }, interpretation: select the rows whose october 20 , 2008 record fuzzily matches to 2010 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; october 20 , 2008 ; 2010 } } ; 6 }, interpretation: select the rows whose date record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; date } } ; 6 }, interpretation: select the rows whose date record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; date } } ; 6 }, interpretation: select the row whose wins record of all rows is 2nd maximum . the player record of this row is tom watson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; wins ; 2 } ; player } ; tom watson }, interpretation: select the row whose wins record of all rows is 2nd maximum . the player record of this row is tom watson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; wins ; 2 } ; player } ; tom watson }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: select the row whose average record of all rows is maximum . the professional partner record of this row is janja lesar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average } ; professional partner } ; janja lesar }, interpretation: select the row whose average record of all rows is maximum . the professional partner record of this row is janja lesar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average } ; professional partner } ; janja lesar }, interpretation: for the stadium records of all rows , most of them fuzzily match to edison international field .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; stadium ; edison international field }, interpretation: for the stadium records of all rows , most of them fuzzily match to edison international field .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; stadium ; edison international field }, interpretation: select the rows whose date record fuzzily matches to 26 april 1947 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 26 april 1947 } } ; 6 }, interpretation: select the rows whose date record fuzzily matches to 26 april 1947 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 26 april 1947 } } ; 6 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 5 }, interpretation: select the rows whose industry record fuzzily matches to oil & gas . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; industry ; oil & gas } } ; 2 }, interpretation: select the rows whose industry record fuzzily matches to oil & gas . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; industry ; oil & gas } } ; 2 }, interpretation: the sum of the total record of all rows is 25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 25 }, interpretation: the sum of the total record of all rows is 25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 25 }, interpretation: select the rows whose area record fuzzily matches to newmarket . there is only one such row in the table . the name record of this unqiue row is newmarket school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; area ; newmarket } } ; eq { hop { filter_eq { all_rows ; area ; newmarket } ; name } ; newmarket school } }, interpretation: select the rows whose area record fuzzily matches to newmarket . there is only one such row in the table . the name record of this unqiue row is newmarket school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; area ; newmarket } } ; eq { hop { filter_eq { all_rows ; area ; newmarket } ; name } ; newmarket school } }, interpretation: select the rows whose surface record fuzzily matches to grass . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; grass } } ; 2 }, interpretation: select the rows whose surface record fuzzily matches to grass . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; grass } } ; 2 }, interpretation: select the rows whose pole record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole ; 0 } } ; 4 }, interpretation: select the rows whose pole record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pole ; 0 } } ; 4 }, interpretation: select the rows whose date record fuzzily matches to mar . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; mar } } ; 3 }, interpretation: select the rows whose date record fuzzily matches to mar . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; mar } } ; 3 }, interpretation: for the attendance records of all rows , most of them are greater than 70000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 70000 }, interpretation: for the attendance records of all rows , most of them are greater than 70000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; attendance ; 70000 }, interpretation: the average of the population record of all rows is 3289 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population } ; 3289 }, interpretation: the average of the population record of all rows is 3289 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population } ; 3289 }, interpretation: select the rows whose screens record is greater than 1000 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; screens ; 1000 } } ; 5 }, interpretation: select the rows whose screens record is greater than 1000 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; screens ; 1000 } } ; 5 }, interpretation: select the rows whose venue record fuzzily matches to princes park . there is only one such row in the table . the away team record of this unqiue row is hawthorn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; princes park } } ; eq { hop { filter_eq { all_rows ; venue ; princes park } ; away team } ; hawthorn } }, interpretation: select the rows whose venue record fuzzily matches to princes park . there is only one such row in the table . the away team record of this unqiue row is hawthorn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; princes park } } ; eq { hop { filter_eq { all_rows ; venue ; princes park } ; away team } ; hawthorn } }, interpretation: select the rows whose visitor record fuzzily matches to chicago black hawks . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; visitor ; chicago black hawks } } ; 3 }, interpretation: select the rows whose visitor record fuzzily matches to chicago black hawks . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; visitor ; chicago black hawks } } ; 3 }, interpretation: select the rows whose content record fuzzily matches to arte . there is only one such row in the table . the television service record of this unqiue row is dipr\u00e8 tv .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; content ; arte } } ; eq { hop { filter_eq { all_rows ; content ; arte } ; television service } ; dipr\u00e8 tv } }, interpretation: select the rows whose content record fuzzily matches to arte . there is only one such row in the table . the television service record of this unqiue row is dipr\u00e8 tv .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; content ; arte } } ; eq { hop { filter_eq { all_rows ; content ; arte } ; television service } ; dipr\u00e8 tv } }, interpretation: select the rows whose gold record is greater than 200 . for the total records of these rows , all of them are greater than 1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_greater { filter_greater { all_rows ; gold ; 200 } ; total ; 1000 }, interpretation: select the rows whose gold record is greater than 200 . for the total records of these rows , all of them are greater than 1000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_greater { filter_greater { all_rows ; gold ; 200 } ; total ; 1000 }, interpretation: select the row whose power record of all rows is maximum . the name record of this row is 9 adr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; power } ; name } ; 9 adr }, interpretation: select the row whose power record of all rows is maximum . the name record of this row is 9 adr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; power } ; name } ; 9 adr }, interpretation: select the rows whose status record fuzzily matches to retired republican hold . there is only one such row in the table . the district record of this unqiue row is minnesota3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; retired republican hold } } ; eq { hop { filter_eq { all_rows ; status ; retired republican hold } ; district } ; minnesota3 } }, interpretation: select the rows whose status record fuzzily matches to retired republican hold . there is only one such row in the table . the district record of this unqiue row is minnesota3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; status ; retired republican hold } } ; eq { hop { filter_eq { all_rows ; status ; retired republican hold } ; district } ; minnesota3 } }, interpretation: for the competition records of all rows , most of them fuzzily match to uefa intertoto cup .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; uefa intertoto cup }, interpretation: for the competition records of all rows , most of them fuzzily match to uefa intertoto cup .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; uefa intertoto cup }, interpretation: select the rows whose wildcats points record is equal to 33 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wildcats points ; 33 } } ; 2 }, interpretation: select the rows whose wildcats points record is equal to 33 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wildcats points ; 33 } } ; 2 }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: for the results records of all rows , all of them fuzzily match to re - elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; results ; re - elected }, interpretation: for the results records of all rows , all of them fuzzily match to re - elected .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; results ; re - elected }, interpretation: for the date records of all rows , all of them fuzzily match to 10 may 1969 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 10 may 1969 }, interpretation: for the date records of all rows , all of them fuzzily match to 10 may 1969 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 10 may 1969 }, interpretation: for the played records of all rows , all of them are equal to 34 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 34 }, interpretation: for the played records of all rows , all of them are equal to 34 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 34 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 13 }, interpretation: select the rows whose nation record is arbitrary . the number of such rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; nation } } ; 13 }, interpretation: select the rows whose score record fuzzily matches to 81 - 104 . take the date record of this row . select the rows whose score record fuzzily matches to 77 - 96 . take the date record of this row . the second record is 3 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; score ; 81 - 104 } ; date } ; hop { filter_eq { all_rows ; score ; 77 - 96 } ; date } } ; -3 days }, interpretation: select the rows whose score record fuzzily matches to 81 - 104 . take the date record of this row . select the rows whose score record fuzzily matches to 77 - 96 . take the date record of this row . the second record is 3 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; score ; 81 - 104 } ; date } ; hop { filter_eq { all_rows ; score ; 77 - 96 } ; date } } ; -3 days }, interpretation: select the rows whose constellation record fuzzily matches to hydra . there is only one such row in the table . the ngc number record of this unqiue row is 5078 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; constellation ; hydra } } ; eq { hop { filter_eq { all_rows ; constellation ; hydra } ; ngc number } ; 5078 } }, interpretation: select the rows whose constellation record fuzzily matches to hydra . there is only one such row in the table . the ngc number record of this unqiue row is 5078 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; constellation ; hydra } } ; eq { hop { filter_eq { all_rows ; constellation ; hydra } ; ngc number } ; 5078 } }, interpretation: select the rows whose women 's singles record fuzzily matches to juliane schenk . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; women 's singles ; juliane schenk } } ; 3 }, interpretation: select the rows whose women 's singles record fuzzily matches to juliane schenk . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; women 's singles ; juliane schenk } } ; 3 }, interpretation: select the rows whose won record is equal to 16 . there is only one such row in the table . the club record of this unqiue row is northampton saints ( sf ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; won ; 16 } } ; eq { hop { filter_eq { all_rows ; won ; 16 } ; club } ; northampton saints ( sf ) } }, interpretation: select the rows whose won record is equal to 16 . there is only one such row in the table . the club record of this unqiue row is northampton saints ( sf ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; won ; 16 } } ; eq { hop { filter_eq { all_rows ; won ; 16 } ; club } ; northampton saints ( sf ) } }, interpretation: select the rows whose written by record fuzzily matches to adam barr . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; adam barr } } ; 2 }, interpretation: select the rows whose written by record fuzzily matches to adam barr . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; adam barr } } ; 2 }, interpretation: for the time records of all rows , most of them fuzzily match to n / a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; time ; n / a }, interpretation: for the time records of all rows , most of them fuzzily match to n / a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; time ; n / a }, interpretation: select the rows whose name record fuzzily matches to arrowtown school . take the decile record of this row . select the rows whose name record fuzzily matches to glenorchy school . take the decile record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; arrowtown school } ; decile } ; hop { filter_eq { all_rows ; name ; glenorchy school } ; decile } }, interpretation: select the rows whose name record fuzzily matches to arrowtown school . take the decile record of this row . select the rows whose name record fuzzily matches to glenorchy school . take the decile record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; arrowtown school } ; decile } ; hop { filter_eq { all_rows ; name ; glenorchy school } ; decile } }, interpretation: for the w / l records of all rows , most of them fuzzily match to loss .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; w / l ; loss }, interpretation: for the w / l records of all rows , most of them fuzzily match to loss .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; w / l ; loss }, interpretation: the sum of the points record of all rows is 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 0 }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is grove city college .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; grove city college }, interpretation: select the row whose enrollment record of all rows is maximum . the institution record of this row is grove city college .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; institution } ; grove city college }, interpretation: the average of the viewing figure record of all rows is 6.40 million .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewing figure } ; 6.40 million }, interpretation: the average of the viewing figure record of all rows is 6.40 million .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; viewing figure } ; 6.40 million }, interpretation: select the rows whose starring record fuzzily matches to warren mitchell as alf garnett . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; starring ; warren mitchell as alf garnett } } ; 3 }, interpretation: select the rows whose starring record fuzzily matches to warren mitchell as alf garnett . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; starring ; warren mitchell as alf garnett } } ; 3 }, interpretation: select the rows whose player record fuzzily matches to bob brown . take the pick record of this row . select the rows whose player record fuzzily matches to ted davis . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; bob brown } ; pick } ; hop { filter_eq { all_rows ; player ; ted davis } ; pick } }, interpretation: select the rows whose player record fuzzily matches to bob brown . take the pick record of this row . select the rows whose player record fuzzily matches to ted davis . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; bob brown } ; pick } ; hop { filter_eq { all_rows ; player ; ted davis } ; pick } }, interpretation: select the row whose frequency record of all rows is 2nd minimum . the station record of this row is wgtz - fm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; frequency ; 2 } ; station } ; wgtz - fm }, interpretation: select the row whose frequency record of all rows is 2nd minimum . the station record of this row is wgtz - fm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; frequency ; 2 } ; station } ; wgtz - fm }, interpretation: select the rows whose games played record is greater than 100 . there is only one such row in the table . the rival record of this unqiue row is georgia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; games played ; 100 } } ; eq { hop { filter_greater { all_rows ; games played ; 100 } ; rival } ; georgia } }, interpretation: select the rows whose games played record is greater than 100 . there is only one such row in the table . the rival record of this unqiue row is georgia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; games played ; 100 } } ; eq { hop { filter_greater { all_rows ; games played ; 100 } ; rival } ; georgia } }, interpretation: for the commenced operations records of all rows , most of them are greater than 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; commenced operations ; 2000 }, interpretation: for the commenced operations records of all rows , most of them are greater than 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; commenced operations ; 2000 }, interpretation: the sum of the total record of all rows is 2548 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 2548 }, interpretation: the sum of the total record of all rows is 2548 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 2548 }, interpretation: the sum of the production in 2011 ( 1000 ton ) record of all rows is 290,133 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; production in 2011 ( 1000 ton ) } ; 290,133 }, interpretation: the sum of the production in 2011 ( 1000 ton ) record of all rows is 290,133 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; production in 2011 ( 1000 ton ) } ; 290,133 }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the row whose date record of all rows is 1st minimum . the opposing team record of this row is wellington .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; opposing team } ; wellington }, interpretation: select the row whose date record of all rows is 1st minimum . the opposing team record of this row is wellington .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 1 } ; opposing team } ; wellington }, interpretation: select the row whose no record of all rows is 2nd minimum . the player record of this row is rick roberson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; no ; 2 } ; player } ; rick roberson }, interpretation: select the row whose no record of all rows is 2nd minimum . the player record of this row is rick roberson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; no ; 2 } ; player } ; rick roberson }, interpretation: select the rows whose year record fuzzily matches to 1954 . take the points record of this row . select the rows whose year record fuzzily matches to 1957 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1954 } ; points } ; hop { filter_eq { all_rows ; year ; 1957 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 1954 . take the points record of this row . select the rows whose year record fuzzily matches to 1957 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1954 } ; points } ; hop { filter_eq { all_rows ; year ; 1957 } ; points } }, interpretation: the average of the lost record of all rows is 13.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 13.3 }, interpretation: the average of the lost record of all rows is 13.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lost } ; 13.3 }, interpretation: for the nationality records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; united states }, interpretation: select the rows whose certification record fuzzily matches to 2x platinum . there is only one such row in the table . the album record of this unqiue row is my love : essential collection .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; certification ; 2x platinum } } ; eq { hop { filter_eq { all_rows ; certification ; 2x platinum } ; album } ; my love : essential collection } }, interpretation: select the rows whose certification record fuzzily matches to 2x platinum . there is only one such row in the table . the album record of this unqiue row is my love : essential collection .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; certification ; 2x platinum } } ; eq { hop { filter_eq { all_rows ; certification ; 2x platinum } ; album } ; my love : essential collection } }, interpretation: select the rows whose player record fuzzily matches to jim farmer . take the no record of this row . select the rows whose player record fuzzily matches to derek fisher . take the no record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; jim farmer } ; no } ; hop { filter_eq { all_rows ; player ; derek fisher } ; no } }, interpretation: select the rows whose player record fuzzily matches to jim farmer . take the no record of this row . select the rows whose player record fuzzily matches to derek fisher . take the no record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; jim farmer } ; no } ; hop { filter_eq { all_rows ; player ; derek fisher } ; no } }, interpretation: select the rows whose category record fuzzily matches to favorite music group . there is only one such row in the table . the year record of this unqiue row is 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; category ; favorite music group } } ; eq { hop { filter_eq { all_rows ; category ; favorite music group } ; year } ; 2011 } }, interpretation: select the rows whose category record fuzzily matches to favorite music group . there is only one such row in the table . the year record of this unqiue row is 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; category ; favorite music group } } ; eq { hop { filter_eq { all_rows ; category ; favorite music group } ; year } ; 2011 } }, interpretation: select the rows whose loser record fuzzily matches to kansas city chiefs . the average of the result record of these rows is 25.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; loser ; kansas city chiefs } ; result } ; 25.5 }, interpretation: select the rows whose loser record fuzzily matches to kansas city chiefs . the average of the result record of these rows is 25.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; loser ; kansas city chiefs } ; result } ; 25.5 }, interpretation: select the rows whose field goals record is not equal to 0 . there is only one such row in the table . the player record of this unqiue row is octy graham .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; field goals ; 0 } } ; eq { hop { filter_not_eq { all_rows ; field goals ; 0 } ; player } ; octy graham } }, interpretation: select the rows whose field goals record is not equal to 0 . there is only one such row in the table . the player record of this unqiue row is octy graham .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; field goals ; 0 } } ; eq { hop { filter_not_eq { all_rows ; field goals ; 0 } ; player } ; octy graham } }, interpretation: select the rows whose total ( kg ) record is equal to 300.0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; total ( kg ) ; 300.0 } } ; 2 }, interpretation: select the rows whose total ( kg ) record is equal to 300.0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; total ( kg ) ; 300.0 } } ; 2 }, interpretation: the 3rd minimum time record of all rows is 6:41.39 . the rank record of the row with 3rd minimum time record is 3 . the country record of the row with 3rd minimum time record is australia .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; time ; 3 } ; 6:41.39 } ; and { eq { hop { nth_argmin { all_rows ; time ; 3 } ; rank } ; 3 } ; eq { hop { nth_argmin { all_rows ; time ; 3 } ; country } ; australia } } }, interpretation: the 3rd minimum time record of all rows is 6:41.39 . the rank record of the row with 3rd minimum time record is 3 . the country record of the row with 3rd minimum time record is australia .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; time ; 3 } ; 6:41.39 } ; and { eq { hop { nth_argmin { all_rows ; time ; 3 } ; rank } ; 3 } ; eq { hop { nth_argmin { all_rows ; time ; 3 } ; country } ; australia } } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is october 27 , 2002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; october 27 , 2002 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is october 27 , 2002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; october 27 , 2002 }, interpretation: select the rows whose namesake record fuzzily matches to assyrian town where ishtar was worshipped . there is only one such row in the table . the name record of this unqiue row is arbela sulcus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; namesake ; assyrian town where ishtar was worshipped } } ; eq { hop { filter_eq { all_rows ; namesake ; assyrian town where ishtar was worshipped } ; name } ; arbela sulcus } }, interpretation: select the rows whose namesake record fuzzily matches to assyrian town where ishtar was worshipped . there is only one such row in the table . the name record of this unqiue row is arbela sulcus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; namesake ; assyrian town where ishtar was worshipped } } ; eq { hop { filter_eq { all_rows ; namesake ; assyrian town where ishtar was worshipped } ; name } ; arbela sulcus } }, interpretation: select the rows whose name record fuzzily matches to yogyakarta documentary film festival . take the est record of this row . select the rows whose name record fuzzily matches to vibgyor international film festival . take the est record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; yogyakarta documentary film festival } ; est } ; hop { filter_eq { all_rows ; name ; vibgyor international film festival } ; est } }, interpretation: select the rows whose name record fuzzily matches to yogyakarta documentary film festival . take the est record of this row . select the rows whose name record fuzzily matches to vibgyor international film festival . take the est record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; yogyakarta documentary film festival } ; est } ; hop { filter_eq { all_rows ; name ; vibgyor international film festival } ; est } }, interpretation: select the row whose crowd record of all rows is maximum . the venue record of this row is princes park .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; crowd } ; venue } ; princes park }, interpretation: select the rows whose wins record is less than 5 . there is only one such row in the table . the club record of this unqiue row is jfc olimps r\u012bga .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; wins ; 5 } } ; eq { hop { filter_less { all_rows ; wins ; 5 } ; club } ; jfc olimps r\u012bga } }, interpretation: select the rows whose wins record is less than 5 . there is only one such row in the table . the club record of this unqiue row is jfc olimps r\u012bga .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; wins ; 5 } } ; eq { hop { filter_less { all_rows ; wins ; 5 } ; club } ; jfc olimps r\u012bga } }, interpretation: select the rows whose nominated / won record fuzzily matches to won . the 2nd minimum year record of these rows is 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; nominated / won ; won } ; year ; 2 } ; 2008 }, interpretation: select the rows whose nominated / won record fuzzily matches to won . the 2nd minimum year record of these rows is 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; nominated / won ; won } ; year ; 2 } ; 2008 }, interpretation: select the row whose average ratings record of all rows is maximum . the romaji title record of this row is karei - naru ichizoku .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average ratings } ; romaji title } ; karei - naru ichizoku }, interpretation: select the row whose average ratings record of all rows is maximum . the romaji title record of this row is karei - naru ichizoku .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; average ratings } ; romaji title } ; karei - naru ichizoku }, interpretation: select the rows whose venue record fuzzily matches to south korea . there is only one such row in the table . the tournament record of this unqiue row is summer olympics .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; south korea } } ; eq { hop { filter_eq { all_rows ; venue ; south korea } ; tournament } ; summer olympics } }, interpretation: select the rows whose venue record fuzzily matches to south korea . there is only one such row in the table . the tournament record of this unqiue row is summer olympics .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; south korea } } ; eq { hop { filter_eq { all_rows ; venue ; south korea } ; tournament } ; summer olympics } }, interpretation: the average of the attendance record of all rows is 43583 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 43583 }, interpretation: the average of the attendance record of all rows is 43583 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 43583 }, interpretation: select the rows whose platform ( s ) record fuzzily matches to gamecube . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; platform ( s ) ; gamecube } } ; 5 }, interpretation: select the rows whose platform ( s ) record fuzzily matches to gamecube . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; platform ( s ) ; gamecube } } ; 5 }, interpretation: select the rows whose nationality record fuzzily matches to alatri . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; nationality ; alatri } }, interpretation: select the rows whose nationality record fuzzily matches to alatri . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; nationality ; alatri } }, interpretation: select the rows whose position record fuzzily matches to guard . there is only one such row in the table . the player record of this unqiue row is steve kerr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; guard } } ; eq { hop { filter_eq { all_rows ; position ; guard } ; player } ; steve kerr } }, interpretation: select the rows whose position record fuzzily matches to guard . there is only one such row in the table . the player record of this unqiue row is steve kerr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; guard } } ; eq { hop { filter_eq { all_rows ; position ; guard } ; player } ; steve kerr } }, interpretation: select the rows whose year record fuzzily matches to 1976 . take the points record of this row . select the rows whose year record fuzzily matches to 1975 . take the points record of this row . the first record is 6 points larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 1976 } ; points } ; hop { filter_eq { all_rows ; year ; 1975 } ; points } } ; 6 points }, interpretation: select the rows whose year record fuzzily matches to 1976 . take the points record of this row . select the rows whose year record fuzzily matches to 1975 . take the points record of this row . the first record is 6 points larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; year ; 1976 } ; points } ; hop { filter_eq { all_rows ; year ; 1975 } ; points } } ; 6 points }, interpretation: the average of the crowd record of all rows is 24,648 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24,648 }, interpretation: the average of the crowd record of all rows is 24,648 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 24,648 }, interpretation: select the rows whose opposing team record fuzzily matches to natal . there is only one such row in the table . the date record of this unqiue row is may 17 , 1972 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opposing team ; natal } } ; eq { hop { filter_eq { all_rows ; opposing team ; natal } ; date } ; may 17 , 1972 } }, interpretation: select the rows whose opposing team record fuzzily matches to natal . there is only one such row in the table . the date record of this unqiue row is may 17 , 1972 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; opposing team ; natal } } ; eq { hop { filter_eq { all_rows ; opposing team ; natal } ; date } ; may 17 , 1972 } }, interpretation: select the rows whose year aired record fuzzily matches to 2007 . the maximum top prize record of these rows is 250000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; year aired ; 2007 } ; top prize } ; 250000 }, interpretation: select the rows whose year aired record fuzzily matches to 2007 . the maximum top prize record of these rows is 250000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; year aired ; 2007 } ; top prize } ; 250000 }, interpretation: select the rows whose surface record fuzzily matches to grass . there is only one such row in the table . the outcome record of this unqiue row is winner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; grass } } ; eq { hop { filter_eq { all_rows ; surface ; grass } ; outcome } ; winner } }, interpretation: select the rows whose surface record fuzzily matches to grass . there is only one such row in the table . the outcome record of this unqiue row is winner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; surface ; grass } } ; eq { hop { filter_eq { all_rows ; surface ; grass } ; outcome } ; winner } }, interpretation: select the rows whose home record fuzzily matches to ottawa . among these rows , select the rows whose decision record fuzzily matches to hasek . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; home ; ottawa } ; decision ; hasek } } ; 4 }, interpretation: select the rows whose home record fuzzily matches to ottawa . among these rows , select the rows whose decision record fuzzily matches to hasek . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; home ; ottawa } ; decision ; hasek } } ; 4 }, interpretation: for the goodman records of all rows , most of them are greater than 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; goodman ; 8 }, interpretation: for the goodman records of all rows , most of them are greater than 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; goodman ; 8 }, interpretation: select the rows whose name record fuzzily matches to patricia sosa ( esa ) . take the total ( kg ) record of this row . select the rows whose name record fuzzily matches to nancy niro ( can ) . take the total ( kg ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; patricia sosa ( esa ) } ; total ( kg ) } ; hop { filter_eq { all_rows ; name ; nancy niro ( can ) } ; total ( kg ) } }, interpretation: select the rows whose name record fuzzily matches to patricia sosa ( esa ) . take the total ( kg ) record of this row . select the rows whose name record fuzzily matches to nancy niro ( can ) . take the total ( kg ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; name ; patricia sosa ( esa ) } ; total ( kg ) } ; hop { filter_eq { all_rows ; name ; nancy niro ( can ) } ; total ( kg ) } }, interpretation: the 3rd minimum no in season record of all rows is 3 . the family / families record of the row with 3rd minimum no in season record is the orm family .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; no in season ; 3 } ; 3 } ; eq { hop { nth_argmin { all_rows ; no in season ; 3 } ; family / families } ; the orm family } }, interpretation: the 3rd minimum no in season record of all rows is 3 . the family / families record of the row with 3rd minimum no in season record is the orm family .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; no in season ; 3 } ; 3 } ; eq { hop { nth_argmin { all_rows ; no in season ; 3 } ; family / families } ; the orm family } }, interpretation: select the rows whose team record fuzzily matches to new york . take the score record of this row . select the rows whose team record fuzzily matches to detroit . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; new york } ; score } ; hop { filter_eq { all_rows ; team ; detroit } ; score } }, interpretation: select the rows whose team record fuzzily matches to new york . take the score record of this row . select the rows whose team record fuzzily matches to detroit . take the score record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team ; new york } ; score } ; hop { filter_eq { all_rows ; team ; detroit } ; score } }, interpretation: select the rows whose result record fuzzily matches to lose . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; lose } } ; 5 }, interpretation: select the rows whose result record fuzzily matches to lose . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; lose } } ; 5 }, interpretation: the average of the electors record of all rows is 50.85 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; electors } ; 50.85 }, interpretation: the average of the electors record of all rows is 50.85 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; electors } ; 50.85 }, interpretation: select the rows whose district record fuzzily matches to intramuros . take the s barangay record of this row . select the rows whose district record fuzzily matches to port area . take the s barangay record of this row . the first record is equal to the second record . the s barangay record of the first row is 5 . the s barangay record of the second row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; district ; intramuros } ; s barangay } ; hop { filter_eq { all_rows ; district ; port area } ; s barangay } } ; and { eq { hop { filter_eq { all_rows ; district ; intramuros } ; s barangay } ; 5 } ; eq { hop { filter_eq { all_rows ; district ; port area } ; s barangay } ; 5 } } }, interpretation: select the rows whose district record fuzzily matches to intramuros . take the s barangay record of this row . select the rows whose district record fuzzily matches to port area . take the s barangay record of this row . the first record is equal to the second record . the s barangay record of the first row is 5 . the s barangay record of the second row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { hop { filter_eq { all_rows ; district ; intramuros } ; s barangay } ; hop { filter_eq { all_rows ; district ; port area } ; s barangay } } ; and { eq { hop { filter_eq { all_rows ; district ; intramuros } ; s barangay } ; 5 } ; eq { hop { filter_eq { all_rows ; district ; port area } ; s barangay } ; 5 } } }, interpretation: select the row whose hk viewers record of all rows is maximum . the english title record of this row is la femme desperado .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; hk viewers } ; english title } ; la femme desperado }, interpretation: select the row whose hk viewers record of all rows is maximum . the english title record of this row is la femme desperado .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; hk viewers } ; english title } ; la femme desperado }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 12 }, interpretation: select the rows whose name record is arbitrary . the number of such rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; name } } ; 12 }, interpretation: the average of the home team score record of all rows is 13.98 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 13.98 }, interpretation: the average of the home team score record of all rows is 13.98 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; home team score } ; 13.98 }, interpretation: select the rows whose director record fuzzily matches to hollingsworth morse . among these rows , select the rows whose writer ( s ) record fuzzily matches to george eckstein . there is only one such row in the table . the title record of this unqiue row is huck of la mancha .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; director ; hollingsworth morse } ; writer ( s ) ; george eckstein } } ; eq { hop { filter_eq { filter_eq { all_rows ; director ; hollingsworth morse } ; writer ( s ) ; george eckstein } ; title } ; huck of la mancha } }, interpretation: select the rows whose director record fuzzily matches to hollingsworth morse . among these rows , select the rows whose writer ( s ) record fuzzily matches to george eckstein . there is only one such row in the table . the title record of this unqiue row is huck of la mancha .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; director ; hollingsworth morse } ; writer ( s ) ; george eckstein } } ; eq { hop { filter_eq { filter_eq { all_rows ; director ; hollingsworth morse } ; writer ( s ) ; george eckstein } ; title } ; huck of la mancha } }, interpretation: for the round records of all rows , most of them are equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; round ; 1 }, interpretation: select the row whose overall record of all rows is 2nd minimum . the name record of this row is charley holm .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; overall ; 2 } ; name } ; charley holm }, interpretation: select the row whose overall record of all rows is 2nd minimum . the name record of this row is charley holm .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; overall ; 2 } ; name } ; charley holm }, interpretation: select the rows whose platform ( s ) record fuzzily matches to playstation 3 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; platform ( s ) ; playstation 3 } } ; 3 }, interpretation: select the rows whose platform ( s ) record fuzzily matches to playstation 3 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; platform ( s ) ; playstation 3 } } ; 3 }, interpretation: for the away team records of all rows , most of them fuzzily match to melbourne .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; away team ; melbourne }, interpretation: for the away team records of all rows , most of them fuzzily match to melbourne .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; away team ; melbourne }, interpretation: select the rows whose opponent record fuzzily matches to san diego chargers . the average of the attendance record of these rows is 25746 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; opponent ; san diego chargers } ; attendance } ; 25746 }, interpretation: select the rows whose opponent record fuzzily matches to san diego chargers . the average of the attendance record of these rows is 25746 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; opponent ; san diego chargers } ; attendance } ; 25746 }, interpretation: for the driver records of all rows , most of them fuzzily match to michael schumacher .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; driver ; michael schumacher }, interpretation: for the driver records of all rows , most of them fuzzily match to michael schumacher .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; driver ; michael schumacher }, interpretation: for the games played records of all rows , all of them are equal to 36 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; games played ; 36 }, interpretation: for the games played records of all rows , all of them are equal to 36 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; games played ; 36 }, interpretation: select the rows whose chassis record fuzzily matches to milano speluzzi . there is only one such row in the table . the entrant record of this unqiue row is scuderia milano .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; milano speluzzi } } ; eq { hop { filter_eq { all_rows ; chassis ; milano speluzzi } ; entrant } ; scuderia milano } }, interpretation: select the rows whose chassis record fuzzily matches to milano speluzzi . there is only one such row in the table . the entrant record of this unqiue row is scuderia milano .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; milano speluzzi } } ; eq { hop { filter_eq { all_rows ; chassis ; milano speluzzi } ; entrant } ; scuderia milano } }, interpretation: select the rows whose designation hd record fuzzily matches to hd 178428 . take the arrival date record of this row . select the rows whose designation hd record fuzzily matches to hd 186408 . take the arrival date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; designation hd ; hd 178428 } ; arrival date } ; hop { filter_eq { all_rows ; designation hd ; hd 186408 } ; arrival date } }, interpretation: select the rows whose designation hd record fuzzily matches to hd 178428 . take the arrival date record of this row . select the rows whose designation hd record fuzzily matches to hd 186408 . take the arrival date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; designation hd ; hd 178428 } ; arrival date } ; hop { filter_eq { all_rows ; designation hd ; hd 186408 } ; arrival date } }, interpretation: the average of the laps record of all rows is 312.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 312.5 }, interpretation: the average of the laps record of all rows is 312.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 312.5 }, interpretation: select the rows whose single record fuzzily matches to wild eyes . take the other details record of this row . select the rows whose single record fuzzily matches to tell the world . take the other details record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; single ; wild eyes } ; other details } ; hop { filter_eq { all_rows ; single ; tell the world } ; other details } }, interpretation: select the rows whose single record fuzzily matches to wild eyes . take the other details record of this row . select the rows whose single record fuzzily matches to tell the world . take the other details record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; single ; wild eyes } ; other details } ; hop { filter_eq { all_rows ; single ; tell the world } ; other details } }, interpretation: select the row whose year joined record of all rows is 1st maximum . the school record of this row is elkhart christian .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year joined ; 1 } ; school } ; elkhart christian }, interpretation: select the row whose year joined record of all rows is 1st maximum . the school record of this row is elkhart christian .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year joined ; 1 } ; school } ; elkhart christian }, interpretation: select the rows whose age at appointment record is equal to 50 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; age at appointment ; 50 } } ; 4 }, interpretation: select the rows whose age at appointment record is equal to 50 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; age at appointment ; 50 } } ; 4 }, interpretation: select the rows whose year ( ceremony ) record is greater than or equal to 2000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; year ( ceremony ) ; 2000 } } ; 2 }, interpretation: select the rows whose year ( ceremony ) record is greater than or equal to 2000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater_eq { all_rows ; year ( ceremony ) ; 2000 } } ; 2 }, interpretation: for the competition records of all rows , most of them do not match to friendly .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; competition ; friendly }, interpretation: for the competition records of all rows , most of them do not match to friendly .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_not_eq { all_rows ; competition ; friendly }, interpretation: select the rows whose language record fuzzily matches to english . the sum of the points record of these rows is 43 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; language ; english } ; points } ; 43 }, interpretation: select the rows whose language record fuzzily matches to english . the sum of the points record of these rows is 43 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; language ; english } ; points } ; 43 }, interpretation: the average of the julian clary record of all rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; julian clary } ; 8 }, interpretation: the average of the julian clary record of all rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; julian clary } ; 8 }, interpretation: the average of the average record of all rows is 25.2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; average } ; 25.2 }, interpretation: the average of the average record of all rows is 25.2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; average } ; 25.2 }, interpretation: for the competition records of all rows , most of them fuzzily match to european cup .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; european cup }, interpretation: for the competition records of all rows , most of them fuzzily match to european cup .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; competition ; european cup }, interpretation: select the rows whose outcome of election record fuzzily matches to minority in parliament . among these rows , select the rows whose number of pnc votes record is greater than 200000 . there is only one such row in the table . the election record of this unqiue row is 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; outcome of election ; minority in parliament } ; number of pnc votes ; 200000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; outcome of election ; minority in parliament } ; number of pnc votes ; 200000 } ; election } ; 2000 } }, interpretation: select the rows whose outcome of election record fuzzily matches to minority in parliament . among these rows , select the rows whose number of pnc votes record is greater than 200000 . there is only one such row in the table . the election record of this unqiue row is 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { filter_eq { all_rows ; outcome of election ; minority in parliament } ; number of pnc votes ; 200000 } } ; eq { hop { filter_greater { filter_eq { all_rows ; outcome of election ; minority in parliament } ; number of pnc votes ; 200000 } ; election } ; 2000 } }, interpretation: for the outcome records of all rows , most of them fuzzily match to winner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; winner }, interpretation: select the rows whose notes record fuzzily matches to not published in book form . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; notes ; not published in book form } } ; 9 }, interpretation: select the rows whose notes record fuzzily matches to not published in book form . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; notes ; not published in book form } } ; 9 }, interpretation: select the rows whose shirt sponsor record fuzzily matches to n / a . there is only one such row in the table . the team record of this unqiue row is dubai .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; shirt sponsor ; n / a } } ; eq { hop { filter_eq { all_rows ; shirt sponsor ; n / a } ; team } ; dubai } }, interpretation: select the rows whose shirt sponsor record fuzzily matches to n / a . there is only one such row in the table . the team record of this unqiue row is dubai .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; shirt sponsor ; n / a } } ; eq { hop { filter_eq { all_rows ; shirt sponsor ; n / a } ; team } ; dubai } }, interpretation: select the row whose p1 diameter ( mm ) record of all rows is 2nd maximum . the chambering record of this row is .45 acp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; p1 diameter ( mm ) ; 2 } ; chambering } ; .45 acp }, interpretation: select the row whose p1 diameter ( mm ) record of all rows is 2nd maximum . the chambering record of this row is .45 acp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; p1 diameter ( mm ) ; 2 } ; chambering } ; .45 acp }, interpretation: select the rows whose season record fuzzily matches to 199 . select the row whose games record of these rows is 2nd maximum . the name record of this row is thomas graul .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; season ; 199 } ; games ; 2 } ; name } ; thomas graul }, interpretation: select the rows whose season record fuzzily matches to 199 . select the row whose games record of these rows is 2nd maximum . the name record of this row is thomas graul .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_eq { all_rows ; season ; 199 } ; games ; 2 } ; name } ; thomas graul }, interpretation: select the row whose distance record of all rows is 1st maximum . the race record of this row is mercedes classic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; distance ; 1 } ; race } ; mercedes classic }, interpretation: select the row whose distance record of all rows is 1st maximum . the race record of this row is mercedes classic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; distance ; 1 } ; race } ; mercedes classic }, interpretation: select the rows whose college record fuzzily matches to southwest texas state . there is only one such row in the table . the name record of this unqiue row is clenton ballard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; southwest texas state } } ; eq { hop { filter_eq { all_rows ; college ; southwest texas state } ; name } ; clenton ballard } }, interpretation: select the rows whose college record fuzzily matches to southwest texas state . there is only one such row in the table . the name record of this unqiue row is clenton ballard .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; southwest texas state } } ; eq { hop { filter_eq { all_rows ; college ; southwest texas state } ; name } ; clenton ballard } }, interpretation: select the rows whose maximum seating capacity record fuzzily matches to unknown . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; maximum seating capacity ; unknown } } ; 4 }, interpretation: select the rows whose maximum seating capacity record fuzzily matches to unknown . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; maximum seating capacity ; unknown } } ; 4 }, interpretation: for the issue price records of all rows , all of them are equal to 24.95 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; issue price ; 24.95 }, interpretation: for the issue price records of all rows , all of them are equal to 24.95 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; issue price ; 24.95 }, interpretation: select the rows whose year record is greater than or equal to 1980 . the average of the world ranking record of these rows is 9.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_greater_eq { all_rows ; year ; 1980 } ; world ranking } ; 9.5 }, interpretation: select the rows whose year record is greater than or equal to 1980 . the average of the world ranking record of these rows is 9.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_greater_eq { all_rows ; year ; 1980 } ; world ranking } ; 9.5 }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: the average of the sensor res , size record of all rows is 9.88125 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; sensor res , size } ; 9.88125 }, interpretation: the average of the sensor res , size record of all rows is 9.88125 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; sensor res , size } ; 9.88125 }, interpretation: for the high rebounds records of all rows , most of them fuzzily match to chris bosh .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high rebounds ; chris bosh }, interpretation: for the high rebounds records of all rows , most of them fuzzily match to chris bosh .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; high rebounds ; chris bosh }, interpretation: for the most spoken language records of all rows , most of them fuzzily match to sotho .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; most spoken language ; sotho }, interpretation: for the most spoken language records of all rows , most of them fuzzily match to sotho .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; most spoken language ; sotho }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is denver broncos .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; denver broncos }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is denver broncos .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; denver broncos }, interpretation: for the founded records of all rows , most of them are less than 1900 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; founded ; 1900 }, interpretation: select the row whose points record of all rows is 2nd maximum . the machine record of this row is maico .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; machine } ; maico }, interpretation: select the row whose points record of all rows is 2nd maximum . the machine record of this row is maico .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; machine } ; maico }, interpretation: select the rows whose tournament record fuzzily matches to stuttgart , germany . there is only one such row in the table . the date record of this unqiue row is july 18 , 2005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; stuttgart , germany } } ; eq { hop { filter_eq { all_rows ; tournament ; stuttgart , germany } ; date } ; july 18 , 2005 } }, interpretation: select the rows whose tournament record fuzzily matches to stuttgart , germany . there is only one such row in the table . the date record of this unqiue row is july 18 , 2005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; stuttgart , germany } } ; eq { hop { filter_eq { all_rows ; tournament ; stuttgart , germany } ; date } ; july 18 , 2005 } }, interpretation: for the outcome records of all rows , most of them fuzzily match to runner - up .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; outcome ; runner - up }, interpretation: the average of the purse record of all rows is 2046154 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; purse } ; 2046154 }, interpretation: the average of the purse record of all rows is 2046154 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; purse } ; 2046154 }, interpretation: select the rows whose opponent record fuzzily matches to tampa bay buccaneers . take the date record of this row . select the rows whose opponent record fuzzily matches to green bay packers . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; tampa bay buccaneers } ; date } ; hop { filter_eq { all_rows ; opponent ; green bay packers } ; date } }, interpretation: select the rows whose opponent record fuzzily matches to tampa bay buccaneers . take the date record of this row . select the rows whose opponent record fuzzily matches to green bay packers . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; opponent ; tampa bay buccaneers } ; date } ; hop { filter_eq { all_rows ; opponent ; green bay packers } ; date } }, interpretation: the average of the crowd record of all rows is 12000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 12000 }, interpretation: the average of the crowd record of all rows is 12000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 12000 }, interpretation: select the rows whose location record fuzzily matches to tokyo . among these rows , select the rows whose res record fuzzily matches to loss . there is only one such row in the table . the opponent record of this unqiue row is hitomi akano .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; tokyo } ; res ; loss } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; tokyo } ; res ; loss } ; opponent } ; hitomi akano } }, interpretation: select the rows whose location record fuzzily matches to tokyo . among these rows , select the rows whose res record fuzzily matches to loss . there is only one such row in the table . the opponent record of this unqiue row is hitomi akano .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; location ; tokyo } ; res ; loss } } ; eq { hop { filter_eq { filter_eq { all_rows ; location ; tokyo } ; res ; loss } ; opponent } ; hitomi akano } }, interpretation: select the rows whose incumbent record fuzzily matches to john page . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to francis walker . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; john page } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; francis walker } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to john page . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to francis walker . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; john page } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; francis walker } ; first elected } }, interpretation: select the rows whose habitat type record fuzzily matches to forest steppe . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; habitat type ; forest steppe } } ; 8 }, interpretation: select the rows whose habitat type record fuzzily matches to forest steppe . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; habitat type ; forest steppe } } ; 8 }, interpretation: select the rows whose manner of departure record fuzzily matches to contract terminated . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; contract terminated } } ; 6 }, interpretation: select the rows whose manner of departure record fuzzily matches to contract terminated . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; contract terminated } } ; 6 }, interpretation: select the rows whose assists record is equal to 40 . the number of such rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; assists ; 40 } } ; 13 }, interpretation: select the rows whose assists record is equal to 40 . the number of such rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; assists ; 40 } } ; 13 }, interpretation: select the rows whose award record fuzzily matches to london critics circle film awards . take the year record of this row . select the rows whose award record fuzzily matches to satellite awards . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; award ; london critics circle film awards } ; year } ; hop { filter_eq { all_rows ; award ; satellite awards } ; year } }, interpretation: select the rows whose award record fuzzily matches to london critics circle film awards . take the year record of this row . select the rows whose award record fuzzily matches to satellite awards . take the year record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; award ; london critics circle film awards } ; year } ; hop { filter_eq { all_rows ; award ; satellite awards } ; year } }, interpretation: select the rows whose service years record fuzzily matches to 1989 . there is only one such row in the table . the ship name record of this unqiue row is kri halim perdanakususma .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; service years ; 1989 } } ; eq { hop { filter_eq { all_rows ; service years ; 1989 } ; ship name } ; kri halim perdanakususma } }, interpretation: select the rows whose service years record fuzzily matches to 1989 . there is only one such row in the table . the ship name record of this unqiue row is kri halim perdanakususma .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; service years ; 1989 } } ; eq { hop { filter_eq { all_rows ; service years ; 1989 } ; ship name } ; kri halim perdanakususma } }, interpretation: select the row whose population m ( luz ) record of all rows is 2nd maximum . the city record of this row is london .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population m ( luz ) ; 2 } ; city } ; london }, interpretation: select the row whose population m ( luz ) record of all rows is 2nd maximum . the city record of this row is london .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population m ( luz ) ; 2 } ; city } ; london }, interpretation: select the row whose weeks on top record of all rows is 1st maximum . the song record of this row is music .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; weeks on top ; 1 } ; song } ; music }, interpretation: select the row whose weeks on top record of all rows is 1st maximum . the song record of this row is music .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; weeks on top ; 1 } ; song } ; music }, interpretation: select the rows whose lost record is equal to 5 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lost ; 5 } } ; 2 }, interpretation: select the rows whose lost record is equal to 5 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; lost ; 5 } } ; 2 }, interpretation: for the position records of all rows , most of them fuzzily match to tackle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; tackle }, interpretation: for the position records of all rows , most of them fuzzily match to tackle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; tackle }, interpretation: select the rows whose gold record fuzzily matches to 1 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; 1 } } ; 3 }, interpretation: select the rows whose gold record fuzzily matches to 1 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; gold ; 1 } } ; 3 }, interpretation: select the rows whose player record fuzzily matches to dwight lewis . take the round record of this row . select the rows whose player record fuzzily matches to doug hogan . take the round record of this row . the first record is less than the second record . the round record of the first row is 10 . the round record of the second row is 16 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; dwight lewis } ; round } ; hop { filter_eq { all_rows ; player ; doug hogan } ; round } } ; and { eq { hop { filter_eq { all_rows ; player ; dwight lewis } ; round } ; 10 } ; eq { hop { filter_eq { all_rows ; player ; doug hogan } ; round } ; 16 } } }, interpretation: select the rows whose player record fuzzily matches to dwight lewis . take the round record of this row . select the rows whose player record fuzzily matches to doug hogan . take the round record of this row . the first record is less than the second record . the round record of the first row is 10 . the round record of the second row is 16 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { less { hop { filter_eq { all_rows ; player ; dwight lewis } ; round } ; hop { filter_eq { all_rows ; player ; doug hogan } ; round } } ; and { eq { hop { filter_eq { all_rows ; player ; dwight lewis } ; round } ; 10 } ; eq { hop { filter_eq { all_rows ; player ; doug hogan } ; round } ; 16 } } }, interpretation: select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . select the rows whose venue record fuzzily matches to victoria park . take the crowd record of this row . the first record is 1000 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; venue ; princes park } ; crowd } ; hop { filter_eq { all_rows ; venue ; victoria park } ; crowd } } ; 1000 }, interpretation: select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . select the rows whose venue record fuzzily matches to victoria park . take the crowd record of this row . the first record is 1000 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; venue ; princes park } ; crowd } ; hop { filter_eq { all_rows ; venue ; victoria park } ; crowd } } ; 1000 }, interpretation: select the rows whose team record fuzzily matches to ducati . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; ducati } } ; 3 }, interpretation: select the rows whose team record fuzzily matches to ducati . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; ducati } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to colombo . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; colombo } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to colombo . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; colombo } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to eng . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; eng } } ; 11 }, interpretation: select the rows whose country record fuzzily matches to eng . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; eng } } ; 11 }, interpretation: the 2nd minimum year record of all rows is 1974 . the partner record of the row with 2nd minimum year record is roscoe tanner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 2 } ; 1974 } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; partner } ; roscoe tanner } }, interpretation: the 2nd minimum year record of all rows is 1974 . the partner record of the row with 2nd minimum year record is roscoe tanner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; year ; 2 } ; 1974 } ; eq { hop { nth_argmin { all_rows ; year ; 2 } ; partner } ; roscoe tanner } }, interpretation: select the rows whose date record fuzzily matches to sunday . select the row whose week record of these rows is 6th minimum . the opponent record of this row is new york giants .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; date ; sunday } ; week ; 6 } ; opponent } ; new york giants }, interpretation: select the rows whose date record fuzzily matches to sunday . select the row whose week record of these rows is 6th minimum . the opponent record of this row is new york giants .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; date ; sunday } ; week ; 6 } ; opponent } ; new york giants }, interpretation: select the rows whose position record fuzzily matches to running back . there is only one such row in the table . the player record of this unqiue row is mel farr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; running back } } ; eq { hop { filter_eq { all_rows ; position ; running back } ; player } ; mel farr } }, interpretation: select the rows whose position record fuzzily matches to running back . there is only one such row in the table . the player record of this unqiue row is mel farr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; running back } } ; eq { hop { filter_eq { all_rows ; position ; running back } ; player } ; mel farr } }, interpretation: select the rows whose result record fuzzily matches to lost . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; lost } } ; 4 }, interpretation: select the rows whose result record fuzzily matches to lost . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; lost } } ; 4 }, interpretation: select the row whose swing to gain record of all rows is minimum . the constituency record of this row is dundee east .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; swing to gain } ; constituency } ; dundee east }, interpretation: select the row whose swing to gain record of all rows is minimum . the constituency record of this row is dundee east .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; swing to gain } ; constituency } ; dundee east }, interpretation: the average of the score record of all rows is 97.3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 97.3 }, interpretation: the average of the score record of all rows is 97.3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; score } ; 97.3 }, interpretation: the sum of the wins record of all rows is 45 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wins } ; 45 }, interpretation: the sum of the wins record of all rows is 45 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; wins } ; 45 }, interpretation: select the rows whose 1 usd = record is equal to 1 . there is only one such row in the table . the country record of this unqiue row is ecuador .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 1 usd, interpretation: select the rows whose 1 usd = record is equal to 1 . there is only one such row in the table . the country record of this unqiue row is ecuador .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; 1 usd, interpretation: select the rows whose directed by record fuzzily matches to jon cassar . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; jon cassar } } ; 5 }, interpretation: select the rows whose directed by record fuzzily matches to jon cassar . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; jon cassar } } ; 5 }, interpretation: select the rows whose club record fuzzily matches to sussex . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; club ; sussex } } ; 3 }, interpretation: select the rows whose club record fuzzily matches to sussex . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; club ; sussex } } ; 3 }, interpretation: select the rows whose rank record fuzzily matches to 3 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 3 } } ; 3 }, interpretation: select the rows whose rank record fuzzily matches to 3 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; rank ; 3 } } ; 3 }, interpretation: select the row whose laps record of all rows is maximum . the year record of this row is 1948 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; laps } ; year } ; 1948 }, interpretation: select the row whose laps record of all rows is maximum . the year record of this row is 1948 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; laps } ; year } ; 1948 }, interpretation: select the rows whose syndicate record fuzzily matches to america 3 foundation . among these rows , select the rows whose yacht record fuzzily matches to kanza . there is only one such row in the table . the sail record of this unqiue row is usa - 28 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; syndicate ; america 3 foundation } ; yacht ; kanza } } ; eq { hop { filter_eq { filter_eq { all_rows ; syndicate ; america 3 foundation } ; yacht ; kanza } ; sail } ; usa - 28 } }, interpretation: select the rows whose syndicate record fuzzily matches to america 3 foundation . among these rows , select the rows whose yacht record fuzzily matches to kanza . there is only one such row in the table . the sail record of this unqiue row is usa - 28 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; syndicate ; america 3 foundation } ; yacht ; kanza } } ; eq { hop { filter_eq { filter_eq { all_rows ; syndicate ; america 3 foundation } ; yacht ; kanza } ; sail } ; usa - 28 } }, interpretation: select the rows whose result record fuzzily matches to retired . there is only one such row in the table . the incumbent record of this unqiue row is harold r collier .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired } } ; eq { hop { filter_eq { all_rows ; result ; retired } ; incumbent } ; harold r collier } }, interpretation: select the rows whose result record fuzzily matches to retired . there is only one such row in the table . the incumbent record of this unqiue row is harold r collier .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired } } ; eq { hop { filter_eq { all_rows ; result ; retired } ; incumbent } ; harold r collier } }, interpretation: for the entrant records of all rows , most of them fuzzily match to clarke - mordaunt - guthrie .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; entrant ; clarke - mordaunt - guthrie }, interpretation: for the entrant records of all rows , most of them fuzzily match to clarke - mordaunt - guthrie .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; entrant ; clarke - mordaunt - guthrie }, interpretation: select the rows whose institution record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; institution } } ; 6 }, interpretation: select the rows whose institution record is arbitrary . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; institution } } ; 6 }, interpretation: select the rows whose a - league record fuzzily matches to ( 0 ) . there is only one such row in the table . the name record of this unqiue row is kevin muscat .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; a - league ; ( 0 ) } } ; eq { hop { filter_eq { all_rows ; a - league ; ( 0 ) } ; name } ; kevin muscat } }, interpretation: select the rows whose a - league record fuzzily matches to ( 0 ) . there is only one such row in the table . the name record of this unqiue row is kevin muscat .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; a - league ; ( 0 ) } } ; eq { hop { filter_eq { all_rows ; a - league ; ( 0 ) } ; name } ; kevin muscat } }, interpretation: select the rows whose international tourist arrivals ( 2012 ) record is greater than 40 million . select the row whose change ( 2011 to 2012 ) record of these rows is 1st maximum . the country record of this row is spain .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; international tourist arrivals ( 2012 ) ; 40 million } ; change ( 2011 to 2012 ) ; 1 } ; country } ; spain }, interpretation: select the rows whose international tourist arrivals ( 2012 ) record is greater than 40 million . select the row whose change ( 2011 to 2012 ) record of these rows is 1st maximum . the country record of this row is spain .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { filter_greater { all_rows ; international tourist arrivals ( 2012 ) ; 40 million } ; change ( 2011 to 2012 ) ; 1 } ; country } ; spain }, interpretation: select the rows whose directed by record fuzzily matches to tucker gates . there is only one such row in the table . the title record of this unqiue row is the road to damascus .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; tucker gates } } ; eq { hop { filter_eq { all_rows ; directed by ; tucker gates } ; title } ; the road to damascus } }, interpretation: select the rows whose directed by record fuzzily matches to tucker gates . there is only one such row in the table . the title record of this unqiue row is the road to damascus .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; directed by ; tucker gates } } ; eq { hop { filter_eq { all_rows ; directed by ; tucker gates } ; title } ; the road to damascus } }, interpretation: select the rows whose others record is greater than 6000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; others ; 6000 } } ; 2 }, interpretation: select the rows whose others record is greater than 6000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; others ; 6000 } } ; 2 }, interpretation: select the rows whose area record fuzzily matches to featherston . select the row whose roll record of these rows is maximum . the name record of this row is st teresa 's school .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; area ; featherston } ; roll } ; name } ; st teresa 's school }, interpretation: select the rows whose area record fuzzily matches to featherston . select the row whose roll record of these rows is maximum . the name record of this row is st teresa 's school .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { filter_eq { all_rows ; area ; featherston } ; roll } ; name } ; st teresa 's school }, interpretation: select the rows whose player record fuzzily matches to brandon bass . take the years in orlando record of this row . select the rows whose player record fuzzily matches to andre barrett . take the years in orlando record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; brandon bass } ; years in orlando } ; hop { filter_eq { all_rows ; player ; andre barrett } ; years in orlando } }, interpretation: select the rows whose player record fuzzily matches to brandon bass . take the years in orlando record of this row . select the rows whose player record fuzzily matches to andre barrett . take the years in orlando record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; brandon bass } ; years in orlando } ; hop { filter_eq { all_rows ; player ; andre barrett } ; years in orlando } }, interpretation: select the rows whose pos record fuzzily matches to 13th . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pos ; 13th } } ; 2 }, interpretation: select the rows whose pos record fuzzily matches to 13th . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; pos ; 13th } } ; 2 }, interpretation: select the rows whose royal house record fuzzily matches to twelfth . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; royal house ; twelfth } } ; 3 }, interpretation: select the rows whose royal house record fuzzily matches to twelfth . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; royal house ; twelfth } } ; 3 }, interpretation: select the rows whose school record fuzzily matches to jackson . take the join date record of this row . select the rows whose school record fuzzily matches to lake . take the join date record of this row . the second record is 23 years larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; school ; jackson } ; join date } ; hop { filter_eq { all_rows ; school ; lake } ; join date } } ; -23 years }, interpretation: select the rows whose school record fuzzily matches to jackson . take the join date record of this row . select the rows whose school record fuzzily matches to lake . take the join date record of this row . the second record is 23 years larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; school ; jackson } ; join date } ; hop { filter_eq { all_rows ; school ; lake } ; join date } } ; -23 years }, interpretation: for the 1st ship delivery date records of all rows , most of them fuzzily match to may 1943 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; 1st ship delivery date ; may 1943 }, interpretation: for the 1st ship delivery date records of all rows , most of them fuzzily match to may 1943 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; 1st ship delivery date ; may 1943 }, interpretation: select the rows whose time record fuzzily matches to +40 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; +40 } } ; 2 }, interpretation: select the rows whose time record fuzzily matches to +40 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time ; +40 } } ; 2 }, interpretation: for the surface records of all rows , most of them fuzzily match to asphalt .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; asphalt }, interpretation: for the surface records of all rows , most of them fuzzily match to asphalt .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; asphalt }, interpretation: for the result records of all rows , most of them fuzzily match to re - elected .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; re - elected }, interpretation: the sum of the races record of all rows is 119 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 119 }, interpretation: the sum of the races record of all rows is 119 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; races } ; 119 }, interpretation: select the rows whose manner of departure record fuzzily matches to end of contract . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; end of contract } } ; 5 }, interpretation: select the rows whose manner of departure record fuzzily matches to end of contract . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; manner of departure ; end of contract } } ; 5 }, interpretation: select the row whose points record of all rows is 2nd maximum . the club record of this row is chepstow rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; club } ; chepstow rfc }, interpretation: select the row whose points record of all rows is 2nd maximum . the club record of this row is chepstow rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 2 } ; club } ; chepstow rfc }, interpretation: select the rows whose away team score record is greater than 10 . among these rows , select the rows whose crowd record is greater than 20,000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; away team score ; 10 } ; crowd ; 20,000 } } ; 2 }, interpretation: select the rows whose away team score record is greater than 10 . among these rows , select the rows whose crowd record is greater than 20,000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_greater { all_rows ; away team score ; 10 } ; crowd ; 20,000 } } ; 2 }, interpretation: select the row whose round record of all rows is 3rd maximum . the player record of this row is tyree davis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; round ; 3 } ; player } ; tyree davis }, interpretation: select the row whose round record of all rows is 3rd maximum . the player record of this row is tyree davis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; round ; 3 } ; player } ; tyree davis }, interpretation: the sum of the points record of all rows is 96 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 96 }, interpretation: the sum of the points record of all rows is 96 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; points } ; 96 }, interpretation: select the rows whose location record fuzzily matches to minsk . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; minsk } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to minsk . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; minsk } } ; 3 }, interpretation: select the rows whose written by record fuzzily matches to adam barr . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; adam barr } } ; 3 }, interpretation: select the rows whose written by record fuzzily matches to adam barr . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; written by ; adam barr } } ; 3 }, interpretation: select the row whose swing to gain record of all rows is 3rd maximum . the constituency record of this row is ayr .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; swing to gain ; 3 } ; constituency } ; ayr }, interpretation: select the row whose swing to gain record of all rows is 3rd maximum . the constituency record of this row is ayr .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; swing to gain ; 3 } ; constituency } ; ayr }, interpretation: for the drawn records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; drawn ; 1 }, interpretation: for the drawn records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; drawn ; 1 }, interpretation: select the rows whose location record fuzzily matches to target center . there is only one such row in the table . the date record of this unqiue row is june 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; target center } } ; eq { hop { filter_eq { all_rows ; location ; target center } ; date } ; june 15 } }, interpretation: select the rows whose location record fuzzily matches to target center . there is only one such row in the table . the date record of this unqiue row is june 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; target center } } ; eq { hop { filter_eq { all_rows ; location ; target center } ; date } ; june 15 } }, interpretation: select the row whose introduced record of all rows is 2nd minimum . the aircraft record of this row is boeing 737 - 300 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; introduced ; 2 } ; aircraft } ; boeing 737 - 300 }, interpretation: select the row whose introduced record of all rows is 2nd minimum . the aircraft record of this row is boeing 737 - 300 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; introduced ; 2 } ; aircraft } ; boeing 737 - 300 }, interpretation: for the nationality records of all rows , all of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; nationality ; united states }, interpretation: for the batting style records of all rows , most of them fuzzily match to right-handed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; batting style ; right-handed }, interpretation: for the batting style records of all rows , most of them fuzzily match to right-handed .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; batting style ; right-handed }, interpretation: select the row whose after record of all rows is minimum . the player record of this row is matt kuchar .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; after } ; player } ; matt kuchar }, interpretation: select the row whose after record of all rows is minimum . the player record of this row is matt kuchar .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; after } ; player } ; matt kuchar }, interpretation: select the rows whose races record is equal to 16 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; races ; 16 } } ; 4 }, interpretation: select the rows whose races record is equal to 16 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; races ; 16 } } ; 4 }, interpretation: select the rows whose season outcome record fuzzily matches to div i playoffs . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; season outcome ; div i playoffs } } ; 2 }, interpretation: select the rows whose season outcome record fuzzily matches to div i playoffs . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; season outcome ; div i playoffs } } ; 2 }, interpretation: select the rows whose country record does not match to china / hong kong . among these rows , select the rows whose year record is less than 2004 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_not_eq { all_rows ; country ; china / hong kong } ; year ; 2004 } } ; 4 }, interpretation: select the rows whose country record does not match to china / hong kong . among these rows , select the rows whose year record is less than 2004 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_not_eq { all_rows ; country ; china / hong kong } ; year ; 2004 } } ; 4 }, interpretation: select the row whose first place record of all rows is maximum . the region represented record of this row is china .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; first place } ; region represented } ; china }, interpretation: select the row whose first place record of all rows is maximum . the region represented record of this row is china .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; first place } ; region represented } ; china }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; soviet union }, interpretation: select the row whose total record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; nation } ; soviet union }, interpretation: select the rows whose year record fuzzily matches to 1931 . take the laps record of this row . select the rows whose year record fuzzily matches to 1930 . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1931 } ; laps } ; hop { filter_eq { all_rows ; year ; 1930 } ; laps } }, interpretation: select the rows whose year record fuzzily matches to 1931 . take the laps record of this row . select the rows whose year record fuzzily matches to 1930 . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1931 } ; laps } ; hop { filter_eq { all_rows ; year ; 1930 } ; laps } }, interpretation: for the location records of all rows , most of them fuzzily match to kabul .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; kabul }, interpretation: for the location records of all rows , most of them fuzzily match to kabul .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; kabul }, interpretation: the average of the won record of all rows is 8.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; won } ; 8.8 }, interpretation: the average of the won record of all rows is 8.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; won } ; 8.8 }, interpretation: the average of the money record of all rows is 420350 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money } ; 420350 }, interpretation: the average of the money record of all rows is 420350 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; money } ; 420350 }, interpretation: select the rows whose goals record is equal to 0 . there is only one such row in the table . the season record of this unqiue row is 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goals ; 0 } } ; eq { hop { filter_eq { all_rows ; goals ; 0 } ; season } ; 2010 } }, interpretation: select the rows whose goals record is equal to 0 . there is only one such row in the table . the season record of this unqiue row is 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; goals ; 0 } } ; eq { hop { filter_eq { all_rows ; goals ; 0 } ; season } ; 2010 } }, interpretation: select the row whose viewing figure record of all rows is maximum . the episode record of this row is episode 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewing figure } ; episode } ; episode 11 }, interpretation: select the row whose viewing figure record of all rows is maximum . the episode record of this row is episode 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; viewing figure } ; episode } ; episode 11 }, interpretation: the average of the height record of all rows is 6 - 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height } ; 6 - 5 }, interpretation: the average of the height record of all rows is 6 - 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; height } ; 6 - 5 }, interpretation: the sum of the apps record of all rows is 137 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; apps } ; 137 }, interpretation: the sum of the apps record of all rows is 137 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; apps } ; 137 }, interpretation: select the rows whose technology record fuzzily matches to wifi . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; technology ; wifi } }, interpretation: select the rows whose technology record fuzzily matches to wifi . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; technology ; wifi } }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is january 19 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; january 19 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is january 19 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; january 19 }, interpretation: select the rows whose dvd release record is not equal to - . there is only one such row in the table . the season record of this unqiue row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; dvd release ; - } } ; eq { hop { filter_not_eq { all_rows ; dvd release ; - } ; season } ; 1 } }, interpretation: select the rows whose dvd release record is not equal to - . there is only one such row in the table . the season record of this unqiue row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; dvd release ; - } } ; eq { hop { filter_not_eq { all_rows ; dvd release ; - } ; season } ; 1 } }, interpretation: the average of the points margin record of all rows is 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points margin } ; 20 }, interpretation: the average of the points margin record of all rows is 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points margin } ; 20 }, interpretation: select the rows whose position record fuzzily matches to c . there is only one such row in the table . the player record of this unqiue row is jeff winchester .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; c } } ; eq { hop { filter_eq { all_rows ; position ; c } ; player } ; jeff winchester } }, interpretation: select the rows whose position record fuzzily matches to c . there is only one such row in the table . the player record of this unqiue row is jeff winchester .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; c } } ; eq { hop { filter_eq { all_rows ; position ; c } ; player } ; jeff winchester } }, interpretation: the sum of the gold record of all rows is 14 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 14 }, interpretation: the sum of the gold record of all rows is 14 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; gold } ; 14 }, interpretation: the average of the avg attendance record of all rows is 6854 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; avg attendance } ; 6854 }, interpretation: the average of the avg attendance record of all rows is 6854 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; avg attendance } ; 6854 }, interpretation: select the row whose home team score record of all rows is 2nd maximum . the home team record of this row is hawthorn .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; home team score ; 2 } ; home team } ; hawthorn }, interpretation: select the row whose home team score record of all rows is 2nd maximum . the home team record of this row is hawthorn .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; home team score ; 2 } ; home team } ; hawthorn }, interpretation: the sum of the quantity record of all rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; quantity } ; 10 }, interpretation: the sum of the quantity record of all rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; quantity } ; 10 }, interpretation: select the rows whose reason for change record fuzzily matches to died . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; reason for change ; died } } ; 2 }, interpretation: select the rows whose reason for change record fuzzily matches to died . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; reason for change ; died } } ; 2 }, interpretation: the sum of the losses record of all rows is 212 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; losses } ; 212 }, interpretation: the sum of the losses record of all rows is 212 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; losses } ; 212 }, interpretation: select the rows whose make record fuzzily matches to dodge . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; make ; dodge } }, interpretation: select the rows whose make record fuzzily matches to dodge . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; make ; dodge } }, interpretation: select the rows whose year record fuzzily matches to 1954 . take the points record of this row . select the rows whose year record fuzzily matches to 1952 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1954 } ; points } ; hop { filter_eq { all_rows ; year ; 1952 } ; points } }, interpretation: select the rows whose year record fuzzily matches to 1954 . take the points record of this row . select the rows whose year record fuzzily matches to 1952 . take the points record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1954 } ; points } ; hop { filter_eq { all_rows ; year ; 1952 } ; points } }, interpretation: select the rows whose opponent record fuzzily matches to christian wellisch . take the round record of this row . select the rows whose opponent record fuzzily matches to pat harmon . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; christian wellisch } ; round } ; hop { filter_eq { all_rows ; opponent ; pat harmon } ; round } }, interpretation: select the rows whose opponent record fuzzily matches to christian wellisch . take the round record of this row . select the rows whose opponent record fuzzily matches to pat harmon . take the round record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; christian wellisch } ; round } ; hop { filter_eq { all_rows ; opponent ; pat harmon } ; round } }, interpretation: select the rows whose time / retired record fuzzily matches to off course . there is only one such row in the table . the driver record of this unqiue row is gast\u00f3n mazzacane .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; off course } } ; eq { hop { filter_eq { all_rows ; time / retired ; off course } ; driver } ; gast\u00f3n mazzacane } }, interpretation: select the rows whose time / retired record fuzzily matches to off course . there is only one such row in the table . the driver record of this unqiue row is gast\u00f3n mazzacane .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; time / retired ; off course } } ; eq { hop { filter_eq { all_rows ; time / retired ; off course } ; driver } ; gast\u00f3n mazzacane } }, interpretation: select the row whose caps record of all rows is maximum . the player record of this row is nick rimando .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; caps } ; player } ; nick rimando }, interpretation: select the row whose caps record of all rows is maximum . the player record of this row is nick rimando .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; caps } ; player } ; nick rimando }, interpretation: the 2nd minimum match number record of all rows is 2 . the date record of the row with 2nd minimum match number record is april 10 . the team 1 record of the row with 2nd minimum match number record is icl pakistan . the team 2 record of the row with 2nd minimum match number record is icl world .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; match number ; 2 } ; 2 } ; and { eq { hop { nth_argmin { all_rows ; match number ; 2 } ; date } ; april 10 } ; and { eq { hop { nth_argmin { all_rows ; match number ; 2 } ; team 1 } ; icl pakistan } ; eq { hop { nth_argmin { all_rows ; match number ; 2 } ; team 2 } ; icl world } } } }, interpretation: the 2nd minimum match number record of all rows is 2 . the date record of the row with 2nd minimum match number record is april 10 . the team 1 record of the row with 2nd minimum match number record is icl pakistan . the team 2 record of the row with 2nd minimum match number record is icl world .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; match number ; 2 } ; 2 } ; and { eq { hop { nth_argmin { all_rows ; match number ; 2 } ; date } ; april 10 } ; and { eq { hop { nth_argmin { all_rows ; match number ; 2 } ; team 1 } ; icl pakistan } ; eq { hop { nth_argmin { all_rows ; match number ; 2 } ; team 2 } ; icl world } } } }, interpretation: select the rows whose opponent record fuzzily matches to new york giants . the 1st minimum date record of these rows is september 17 , 1967 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; opponent ; new york giants } ; date ; 1 } ; september 17 , 1967 }, interpretation: select the rows whose opponent record fuzzily matches to new york giants . the 1st minimum date record of these rows is september 17 , 1967 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { nth_min { filter_eq { all_rows ; opponent ; new york giants } ; date ; 1 } ; september 17 , 1967 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 8 }, interpretation: select the rows whose result record fuzzily matches to re - elected . the number of such rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; re - elected } } ; 8 }, interpretation: select the rows whose date record fuzzily matches to march . there is only one such row in the table . the goal record of this unqiue row is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; march } } ; eq { hop { filter_eq { all_rows ; date ; march } ; goal } ; 3 } }, interpretation: select the rows whose date record fuzzily matches to march . there is only one such row in the table . the goal record of this unqiue row is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; date ; march } } ; eq { hop { filter_eq { all_rows ; date ; march } ; goal } ; 3 } }, interpretation: for the height records of all rows , most of them are less than 190 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; height ; 190 }, interpretation: for the height records of all rows , most of them are less than 190 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; height ; 190 }, interpretation: select the row whose capacity record of all rows is maximum . the location record of this row is minsk .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; capacity } ; location } ; minsk }, interpretation: select the row whose capacity record of all rows is maximum . the location record of this row is minsk .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; capacity } ; location } ; minsk }, interpretation: the average of the points record of all rows is 42.91 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 42.91 }, interpretation: the average of the points record of all rows is 42.91 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 42.91 }, interpretation: select the rows whose class record fuzzily matches to b . the sum of the no built record of these rows is 58 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; class ; b } ; no built } ; 58 }, interpretation: select the rows whose class record fuzzily matches to b . the sum of the no built record of these rows is 58 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; class ; b } ; no built } ; 58 }, interpretation: select the rows whose winning team record fuzzily matches to texas . among these rows , select the rows whose winning pitcher record fuzzily matches to chris young . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winning team ; texas } ; winning pitcher ; chris young } } ; 2 }, interpretation: select the rows whose winning team record fuzzily matches to texas . among these rows , select the rows whose winning pitcher record fuzzily matches to chris young . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; winning team ; texas } ; winning pitcher ; chris young } } ; 2 }, interpretation: select the rows whose candidate 's name record fuzzily matches to michael mackay . take the rank record of this row . select the rows whose candidate 's name record fuzzily matches to joe larkin . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; candidate 's name ; michael mackay } ; rank } ; hop { filter_eq { all_rows ; candidate 's name ; joe larkin } ; rank } }, interpretation: select the rows whose candidate 's name record fuzzily matches to michael mackay . take the rank record of this row . select the rows whose candidate 's name record fuzzily matches to joe larkin . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; candidate 's name ; michael mackay } ; rank } ; hop { filter_eq { all_rows ; candidate 's name ; joe larkin } ; rank } }, interpretation: select the rows whose incumbent record fuzzily matches to newt v mills . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to jared y sanders , jr . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; newt v mills } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; jared y sanders , jr } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to newt v mills . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to jared y sanders , jr . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; newt v mills } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; jared y sanders , jr } ; first elected } }, interpretation: the sum of the capacity ( mw ) record of all rows is 815.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; capacity ( mw ) } ; 815.6 }, interpretation: the sum of the capacity ( mw ) record of all rows is 815.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; capacity ( mw ) } ; 815.6 }, interpretation: select the rows whose frequency mhz record is greater than 100 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; frequency mhz ; 100 } } ; 3 }, interpretation: select the rows whose frequency mhz record is greater than 100 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; frequency mhz ; 100 } } ; 3 }, interpretation: select the row whose year built record of all rows is 3rd maximum . the church name record of this row is batalden bedehuskapell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year built ; 3 } ; church name } ; batalden bedehuskapell }, interpretation: select the row whose year built record of all rows is 3rd maximum . the church name record of this row is batalden bedehuskapell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year built ; 3 } ; church name } ; batalden bedehuskapell }, interpretation: for the nationality records of all rows , most of them fuzzily match to canada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nationality ; canada }, interpretation: select the row whose haat record of all rows is maximum . the station record of this row is wwpb .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; haat } ; station } ; wwpb }, interpretation: select the row whose haat record of all rows is maximum . the station record of this row is wwpb .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; haat } ; station } ; wwpb }, interpretation: select the rows whose position record fuzzily matches to cb . there is only one such row in the table . the player record of this unqiue row is dounia whitehouse .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; cb } } ; eq { hop { filter_eq { all_rows ; position ; cb } ; player } ; dounia whitehouse } }, interpretation: select the rows whose position record fuzzily matches to cb . there is only one such row in the table . the player record of this unqiue row is dounia whitehouse .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; cb } } ; eq { hop { filter_eq { all_rows ; position ; cb } ; player } ; dounia whitehouse } }, interpretation: for the type records of all rows , most of them fuzzily match to sovereign .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; sovereign }, interpretation: for the type records of all rows , most of them fuzzily match to sovereign .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; type ; sovereign }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the home team record of this row is carlton .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; home team } ; carlton }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the home team record of this row is carlton .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; home team } ; carlton }, interpretation: select the rows whose country record fuzzily matches to united states . there is only one such row in the table . the label record of this unqiue row is astralwerks .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; united states } } ; eq { hop { filter_eq { all_rows ; country ; united states } ; label } ; astralwerks } }, interpretation: select the rows whose country record fuzzily matches to united states . there is only one such row in the table . the label record of this unqiue row is astralwerks .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; united states } } ; eq { hop { filter_eq { all_rows ; country ; united states } ; label } ; astralwerks } }, interpretation: select the row whose elevation ( m ) record of all rows is maximum . the peak record of this row is galdh\u00f8piggen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; elevation ( m ) } ; peak } ; galdh\u00f8piggen }, interpretation: select the row whose elevation ( m ) record of all rows is maximum . the peak record of this row is galdh\u00f8piggen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; elevation ( m ) } ; peak } ; galdh\u00f8piggen }, interpretation: select the rows whose result record fuzzily matches to 28 - 17 . there is only one such row in the table . the date record of this unqiue row is september 9 , 1962 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 28 - 17 } } ; eq { hop { filter_eq { all_rows ; result ; 28 - 17 } ; date } ; september 9 , 1962 } }, interpretation: select the rows whose result record fuzzily matches to 28 - 17 . there is only one such row in the table . the date record of this unqiue row is september 9 , 1962 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 28 - 17 } } ; eq { hop { filter_eq { all_rows ; result ; 28 - 17 } ; date } ; september 9 , 1962 } }, interpretation: for the address records of all rows , most of them fuzzily match to gilbert , az .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; address ; gilbert , az }, interpretation: for the address records of all rows , most of them fuzzily match to gilbert , az .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; address ; gilbert , az }, interpretation: select the rows whose official name record is arbitrary . the number of such rows is 9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; official name } } ; 9 }, interpretation: select the rows whose official name record is arbitrary . the number of such rows is 9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; official name } } ; 9 }, interpretation: the sum of the total record of all rows is 48 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 48 }, interpretation: the sum of the total record of all rows is 48 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; total } ; 48 }, interpretation: select the row whose wins record of all rows is maximum . the club record of this row is ud salamanca .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; club } ; ud salamanca }, interpretation: select the row whose wins record of all rows is maximum . the club record of this row is ud salamanca .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; club } ; ud salamanca }, interpretation: for the class records of all rows , most of them fuzzily match to d .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; d }, interpretation: for the class records of all rows , most of them fuzzily match to d .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; d }, interpretation: for the pick records of all rows , most of them are equal to 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; pick ; 6 }, interpretation: for the pick records of all rows , most of them are equal to 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; pick ; 6 }, interpretation: select the rows whose time record is less than 1:40 . among these rows , select the rows whose country record fuzzily matches to canada . there is only one such row in the table . the athletes record of this unqiue row is adam van koeverden .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_less { all_rows ; time ; 1:40 } ; country ; canada } } ; eq { hop { filter_eq { filter_less { all_rows ; time ; 1:40 } ; country ; canada } ; athletes } ; adam van koeverden } }, interpretation: select the rows whose time record is less than 1:40 . among these rows , select the rows whose country record fuzzily matches to canada . there is only one such row in the table . the athletes record of this unqiue row is adam van koeverden .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_less { all_rows ; time ; 1:40 } ; country ; canada } } ; eq { hop { filter_eq { filter_less { all_rows ; time ; 1:40 } ; country ; canada } ; athletes } ; adam van koeverden } }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 11 }, interpretation: select the rows whose country record fuzzily matches to united states . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; country ; united states } } ; 11 }, interpretation: select the rows whose crowd record is less than 10000 . there is only one such row in the table . the venue record of this unqiue row is corio oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10000 } } ; eq { hop { filter_less { all_rows ; crowd ; 10000 } ; venue } ; corio oval } }, interpretation: select the rows whose crowd record is less than 10000 . there is only one such row in the table . the venue record of this unqiue row is corio oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; crowd ; 10000 } } ; eq { hop { filter_less { all_rows ; crowd ; 10000 } ; venue } ; corio oval } }, interpretation: select the rows whose points record is equal to 6 . among these rows , select the rows whose difference record is equal to -10 . there is only one such row in the table . the team record of this unqiue row is am\u00e3rica .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; points ; 6 } ; difference ; -10 } } ; eq { hop { filter_eq { filter_eq { all_rows ; points ; 6 } ; difference ; -10 } ; team } ; am\u00e3rica } }, interpretation: select the rows whose points record is equal to 6 . among these rows , select the rows whose difference record is equal to -10 . there is only one such row in the table . the team record of this unqiue row is am\u00e3rica .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; points ; 6 } ; difference ; -10 } } ; eq { hop { filter_eq { filter_eq { all_rows ; points ; 6 } ; difference ; -10 } ; team } ; am\u00e3rica } }, interpretation: for the event records of all rows , most of them fuzzily match to monsters of rock .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; monsters of rock }, interpretation: for the event records of all rows , most of them fuzzily match to monsters of rock .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; event ; monsters of rock }, interpretation: the sum of the score record of all rows is 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 12 }, interpretation: the sum of the score record of all rows is 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; score } ; 12 }, interpretation: select the rows whose location record fuzzily matches to houston , texas . take the date record of this row . select the rows whose location record fuzzily matches to zapopan , jalisco . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; location ; houston , texas } ; date } ; hop { filter_eq { all_rows ; location ; zapopan , jalisco } ; date } }, interpretation: select the rows whose location record fuzzily matches to houston , texas . take the date record of this row . select the rows whose location record fuzzily matches to zapopan , jalisco . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; location ; houston , texas } ; date } ; hop { filter_eq { all_rows ; location ; zapopan , jalisco } ; date } }, interpretation: select the rows whose game site record fuzzily matches to gillette stadium . the average of the result record of these rows is 26 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; game site ; gillette stadium } ; result } ; 26 }, interpretation: select the rows whose game site record fuzzily matches to gillette stadium . the average of the result record of these rows is 26 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; game site ; gillette stadium } ; result } ; 26 }, interpretation: for the affiliation records of all rows , most of them fuzzily match to public .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; affiliation ; public }, interpretation: for the affiliation records of all rows , most of them fuzzily match to public .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; affiliation ; public }, interpretation: for the 3:26.00 records of all rows , most of them are less than 3:30 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; 3:26.00 ; 3:30 }, interpretation: for the 3:26.00 records of all rows , most of them are less than 3:30 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; 3:26.00 ; 3:30 }, interpretation: select the row whose us air date record of all rows is 3rd minimum . the us air date record of this row is july 3 , 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; us air date ; 3 } ; us air date } ; july 3 , 1993 }, interpretation: select the row whose us air date record of all rows is 3rd minimum . the us air date record of this row is july 3 , 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; us air date ; 3 } ; us air date } ; july 3 , 1993 }, interpretation: select the row whose elected record of all rows is minimum . the incumbent record of this row is john lewis .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; elected } ; incumbent } ; john lewis }, interpretation: select the row whose elected record of all rows is minimum . the incumbent record of this row is john lewis .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; elected } ; incumbent } ; john lewis }, interpretation: for the points records of all rows , most of them are less than 90 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 90 }, interpretation: for the points records of all rows , most of them are less than 90 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; points ; 90 }, interpretation: select the rows whose method record fuzzily matches to rear naked choke . there is only one such row in the table . the opponent record of this unqiue row is helio dipp .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; method ; rear naked choke } } ; eq { hop { filter_eq { all_rows ; method ; rear naked choke } ; opponent } ; helio dipp } }, interpretation: select the rows whose method record fuzzily matches to rear naked choke . there is only one such row in the table . the opponent record of this unqiue row is helio dipp .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; method ; rear naked choke } } ; eq { hop { filter_eq { all_rows ; method ; rear naked choke } ; opponent } ; helio dipp } }, interpretation: the average of the gold record of all rows is .82 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; .82 }, interpretation: the average of the gold record of all rows is .82 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; .82 }, interpretation: select the rows whose date record fuzzily matches to 1987 . the average of the winning score record of these rows is 305.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; date ; 1987 } ; winning score } ; 305.5 }, interpretation: select the rows whose date record fuzzily matches to 1987 . the average of the winning score record of these rows is 305.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; date ; 1987 } ; winning score } ; 305.5 }, interpretation: select the rows whose power ( kw ) record fuzzily matches to 10 kw . among these rows , select the rows whose frequency record is greater than 100.0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; power ( kw ) ; 10 kw } ; frequency ; 100.0 } } ; 2 }, interpretation: select the rows whose power ( kw ) record fuzzily matches to 10 kw . among these rows , select the rows whose frequency record is greater than 100.0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; power ( kw ) ; 10 kw } ; frequency ; 100.0 } } ; 2 }, interpretation: select the row whose events record of all rows is maximum . the player record of this row is jim thorpe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; events } ; player } ; jim thorpe }, interpretation: select the row whose events record of all rows is maximum . the player record of this row is jim thorpe .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; events } ; player } ; jim thorpe }, interpretation: the average of the time record of all rows is 3:09 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 3:09 }, interpretation: the average of the time record of all rows is 3:09 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; time } ; 3:09 }, interpretation: select the rows whose result record fuzzily matches to won . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; result ; won } }, interpretation: select the rows whose venue record is arbitrary . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; venue } } ; 6 }, interpretation: the average of the gold record of all rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; gold } ; 1 }, interpretation: the sum of the round record of all rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; round } ; 8 }, interpretation: the sum of the round record of all rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; round } ; 8 }, interpretation: select the rows whose player record fuzzily matches to ido kozikaro . take the height record of this row . select the rows whose player record fuzzily matches to lior eliyahu . take the height record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ido kozikaro } ; height } ; hop { filter_eq { all_rows ; player ; lior eliyahu } ; height } }, interpretation: select the rows whose player record fuzzily matches to ido kozikaro . take the height record of this row . select the rows whose player record fuzzily matches to lior eliyahu . take the height record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ido kozikaro } ; height } ; hop { filter_eq { all_rows ; player ; lior eliyahu } ; height } }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: the average of the total record of all rows is 51 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 51 }, interpretation: the average of the total record of all rows is 51 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 51 }, interpretation: the average of the pop record of all rows is 38009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pop } ; 38009 }, interpretation: the average of the pop record of all rows is 38009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; pop } ; 38009 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the home team record of this row is sunderland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; home team } ; sunderland }, interpretation: select the row whose attendance record of all rows is 1st maximum . the home team record of this row is sunderland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; home team } ; sunderland }, interpretation: select the row whose position record of all rows is 7th minimum . the series record of this row is gp2 series .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; position ; 7 } ; series } ; gp2 series }, interpretation: select the row whose position record of all rows is 7th minimum . the series record of this row is gp2 series .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; position ; 7 } ; series } ; gp2 series }, interpretation: select the rows whose record fuzzily matches to soybean oil . take the polyunsaturated fat record of this row . select the rows whose record fuzzily matches to rice bran oil . take the polyunsaturated fat record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; ; soybean oil } ; polyunsaturated fat } ; hop { filter_eq { all_rows ; ; rice bran oil } ; polyunsaturated fat } }, interpretation: select the rows whose record fuzzily matches to soybean oil . take the polyunsaturated fat record of this row . select the rows whose record fuzzily matches to rice bran oil . take the polyunsaturated fat record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; ; soybean oil } ; polyunsaturated fat } ; hop { filter_eq { all_rows ; ; rice bran oil } ; polyunsaturated fat } }, interpretation: select the rows whose date record fuzzily matches to 1982 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 1982 } } ; 2 }, interpretation: select the rows whose date record fuzzily matches to 1982 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; 1982 } } ; 2 }, interpretation: select the row whose apparent magnitude record of all rows is maximum . the ngc number record of this row is 5003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; apparent magnitude } ; ngc number } ; 5003 }, interpretation: select the row whose apparent magnitude record of all rows is maximum . the ngc number record of this row is 5003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; apparent magnitude } ; ngc number } ; 5003 }, interpretation: select the rows whose team record fuzzily matches to aermacchi . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; team ; aermacchi } }, interpretation: select the rows whose team record fuzzily matches to aermacchi . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; team ; aermacchi } }, interpretation: for the memory bandwidth ( gb / s ) records of all rows , most of them are greater than or equal to 17.1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; memory bandwidth ( gb / s ) ; 17.1 }, interpretation: for the memory bandwidth ( gb / s ) records of all rows , most of them are greater than or equal to 17.1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; memory bandwidth ( gb / s ) ; 17.1 }, interpretation: select the rows whose label record fuzzily matches to epic . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; label ; epic } } ; 6 }, interpretation: select the rows whose label record fuzzily matches to epic . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; label ; epic } } ; 6 }, interpretation: select the rows whose year record fuzzily matches to 1996 . take the length record of this row . select the rows whose year record fuzzily matches to 2000 . take the length record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1996 } ; length } ; hop { filter_eq { all_rows ; year ; 2000 } ; length } }, interpretation: select the rows whose year record fuzzily matches to 1996 . take the length record of this row . select the rows whose year record fuzzily matches to 2000 . take the length record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1996 } ; length } ; hop { filter_eq { all_rows ; year ; 2000 } ; length } }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is tom barrett .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; tom barrett }, interpretation: select the row whose candidates record of all rows is 1st maximum . the incumbent record of this row is tom barrett .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; candidates ; 1 } ; incumbent } ; tom barrett }, interpretation: the average of the weeks at number one record of all rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weeks at number one } ; 8 }, interpretation: the average of the weeks at number one record of all rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; weeks at number one } ; 8 }, interpretation: select the rows whose name ( year commissioned ) record fuzzily matches to goldfields gas transmission pipeline ( 1996 ) . take the maximum diameter record of this row . select the rows whose name ( year commissioned ) record fuzzily matches to mid west gas pipeline ( 1999 ) . take the maximum diameter record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ( year commissioned ) ; goldfields gas transmission pipeline ( 1996 ) } ; maximum diameter } ; hop { filter_eq { all_rows ; name ( year commissioned ) ; mid west gas pipeline ( 1999 ) } ; maximum diameter } }, interpretation: select the rows whose name ( year commissioned ) record fuzzily matches to goldfields gas transmission pipeline ( 1996 ) . take the maximum diameter record of this row . select the rows whose name ( year commissioned ) record fuzzily matches to mid west gas pipeline ( 1999 ) . take the maximum diameter record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ( year commissioned ) ; goldfields gas transmission pipeline ( 1996 ) } ; maximum diameter } ; hop { filter_eq { all_rows ; name ( year commissioned ) ; mid west gas pipeline ( 1999 ) } ; maximum diameter } }, interpretation: select the rows whose name record fuzzily matches to walter llerena ( ecu ) . take the total ( kg ) record of this row . select the rows whose name record fuzzily matches to guy hamilton ( can ) . take the total ( kg ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; walter llerena ( ecu ) } ; total ( kg ) } ; hop { filter_eq { all_rows ; name ; guy hamilton ( can ) } ; total ( kg ) } }, interpretation: select the rows whose name record fuzzily matches to walter llerena ( ecu ) . take the total ( kg ) record of this row . select the rows whose name record fuzzily matches to guy hamilton ( can ) . take the total ( kg ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; name ; walter llerena ( ecu ) } ; total ( kg ) } ; hop { filter_eq { all_rows ; name ; guy hamilton ( can ) } ; total ( kg ) } }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is june 25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; june 25 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the date record of this row is june 25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; date } ; june 25 }, interpretation: select the row whose wins record of all rows is maximum . the player record of this row is tom kite .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; player } ; tom kite }, interpretation: select the row whose wins record of all rows is maximum . the player record of this row is tom kite .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; wins } ; player } ; tom kite }, interpretation: select the rows whose start record is less than or equal to 20 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less_eq { all_rows ; start ; 20 } } ; 5 }, interpretation: select the rows whose start record is less than or equal to 20 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less_eq { all_rows ; start ; 20 } } ; 5 }, interpretation: select the rows whose constructor record fuzzily matches to cooper - climax . select the row whose date record of these rows is minimum . the race name record of this row is vii glover trophy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; constructor ; cooper - climax } ; date } ; race name } ; vii glover trophy }, interpretation: select the rows whose constructor record fuzzily matches to cooper - climax . select the row whose date record of these rows is minimum . the race name record of this row is vii glover trophy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; constructor ; cooper - climax } ; date } ; race name } ; vii glover trophy }, interpretation: for the batting style records of all rows , most of them fuzzily match to right hand bat .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; batting style ; right hand bat }, interpretation: select the row whose total record of all rows is maximum . the gold record of this row is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; gold } ; 3 }, interpretation: select the row whose total record of all rows is maximum . the gold record of this row is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total } ; gold } ; 3 }, interpretation: select the rows whose college record fuzzily matches to central florida . there is only one such row in the table . the name record of this unqiue row is paul miranda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; central florida } } ; eq { hop { filter_eq { all_rows ; college ; central florida } ; name } ; paul miranda } }, interpretation: select the rows whose college record fuzzily matches to central florida . there is only one such row in the table . the name record of this unqiue row is paul miranda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; central florida } } ; eq { hop { filter_eq { all_rows ; college ; central florida } ; name } ; paul miranda } }, interpretation: select the rows whose venue record fuzzily matches to marrakech . there is only one such row in the table . the date record of this unqiue row is 11 november 2011 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; marrakech } } ; eq { hop { filter_eq { all_rows ; venue ; marrakech } ; date } ; 11 november 2011 } }, interpretation: select the rows whose venue record fuzzily matches to marrakech . there is only one such row in the table . the date record of this unqiue row is 11 november 2011 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; venue ; marrakech } } ; eq { hop { filter_eq { all_rows ; venue ; marrakech } ; date } ; 11 november 2011 } }, interpretation: for the result records of all rows , most of them fuzzily match to safe .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; safe }, interpretation: select the rows whose country record fuzzily matches to italy . there is only one such row in the table . the athlete record of this unqiue row is beatrice adelizzi & giulia lapi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; italy } } ; eq { hop { filter_eq { all_rows ; country ; italy } ; athlete } ; beatrice adelizzi & giulia lapi } }, interpretation: select the rows whose country record fuzzily matches to italy . there is only one such row in the table . the athlete record of this unqiue row is beatrice adelizzi & giulia lapi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country ; italy } } ; eq { hop { filter_eq { all_rows ; country ; italy } ; athlete } ; beatrice adelizzi & giulia lapi } }, interpretation: select the rows whose 1st member record fuzzily matches to william hall . take the elected record of this row . select the rows whose 1st member record fuzzily matches to george gascoigne . take the elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; 1st member ; william hall } ; elected } ; hop { filter_eq { all_rows ; 1st member ; george gascoigne } ; elected } }, interpretation: select the rows whose 1st member record fuzzily matches to william hall . take the elected record of this row . select the rows whose 1st member record fuzzily matches to george gascoigne . take the elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; 1st member ; william hall } ; elected } ; hop { filter_eq { all_rows ; 1st member ; george gascoigne } ; elected } }, interpretation: for the location records of all rows , most of them fuzzily match to arlington .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; arlington }, interpretation: for the location records of all rows , most of them fuzzily match to arlington .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; arlington }, interpretation: the average of the level record of all rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; level } ; 8 }, interpretation: the average of the level record of all rows is 8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; level } ; 8 }, interpretation: select the rows whose studio host record fuzzily matches to craig mustard . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; studio host ; craig mustard } } ; 5 }, interpretation: select the rows whose studio host record fuzzily matches to craig mustard . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; studio host ; craig mustard } } ; 5 }, interpretation: for the composition records of all rows , all of them fuzzily match to coed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; composition ; coed }, interpretation: for the composition records of all rows , all of them fuzzily match to coed .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; composition ; coed }, interpretation: the average of the population ( 2005 ) record of all rows is 801.29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population ( 2005 ) } ; 801.29 }, interpretation: the average of the population ( 2005 ) record of all rows is 801.29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; population ( 2005 ) } ; 801.29 }, interpretation: select the rows whose contributions record is less than 5000000 . there is only one such row in the table . the candidate record of this unqiue row is dennis kucinich .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; contributions ; 5000000 } } ; eq { hop { filter_less { all_rows ; contributions ; 5000000 } ; candidate } ; dennis kucinich } }, interpretation: select the rows whose contributions record is less than 5000000 . there is only one such row in the table . the candidate record of this unqiue row is dennis kucinich .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; contributions ; 5000000 } } ; eq { hop { filter_less { all_rows ; contributions ; 5000000 } ; candidate } ; dennis kucinich } }, interpretation: select the rows whose opponent in the final record fuzzily matches to phil taylor . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent in the final ; phil taylor } } ; 3 }, interpretation: select the rows whose opponent in the final record fuzzily matches to phil taylor . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent in the final ; phil taylor } } ; 3 }, interpretation: select the rows whose nation record fuzzily matches to usa . the sum of the goals record of these rows is 74 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; nation ; usa } ; goals } ; 74 }, interpretation: select the rows whose nation record fuzzily matches to usa . the sum of the goals record of these rows is 74 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; nation ; usa } ; goals } ; 74 }, interpretation: select the rows whose place record fuzzily matches to t2 . the maximum score record of these rows is 73 + 69 = 142 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; place ; t2 } ; score } ; 73 + 69, interpretation: select the rows whose place record fuzzily matches to t2 . the maximum score record of these rows is 73 + 69 = 142 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { filter_eq { all_rows ; place ; t2 } ; score } ; 73 + 69, interpretation: select the rows whose opponent record fuzzily matches to pittsburgh penguins . among these rows , select the rows whose location / attendance record fuzzily matches to consol energy center . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; opponent ; pittsburgh penguins } ; location / attendance ; consol energy center } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to pittsburgh penguins . among these rows , select the rows whose location / attendance record fuzzily matches to consol energy center . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; opponent ; pittsburgh penguins } ; location / attendance ; consol energy center } } ; 2 }, interpretation: the maximum date record of all rows is july 30 , 2008 . the region record of the row with superlative date record is japan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; date } ; july 30 , 2008 } ; eq { hop { argmax { all_rows ; date } ; region } ; japan } }, interpretation: the maximum date record of all rows is july 30 , 2008 . the region record of the row with superlative date record is japan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { all_rows ; date } ; july 30 , 2008 } ; eq { hop { argmax { all_rows ; date } ; region } ; japan } }, interpretation: for the us viewers ( millions ) records of all rows , most of them are greater than 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; us viewers ( millions ) ; 5 }, interpretation: for the us viewers ( millions ) records of all rows , most of them are greater than 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; us viewers ( millions ) ; 5 }, interpretation: the maximum distance record of all rows is 2500 m .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; distance } ; 2500 m }, interpretation: the maximum distance record of all rows is 2500 m .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; distance } ; 2500 m }, interpretation: the average of the attendance record of all rows is 17863 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 17863 }, interpretation: the average of the attendance record of all rows is 17863 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 17863 }, interpretation: select the rows whose player record fuzzily matches to terry hardy . take the round record of this row . select the rows whose player record fuzzily matches to zack walz . take the round record of this row . the second record is 1 larger than the first record . the round record of the first row is 5 . the round record of the second row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; player ; terry hardy } ; round } ; hop { filter_eq { all_rows ; player ; zack walz } ; round } } ; -1 } ; and { eq { hop { filter_eq { all_rows ; player ; terry hardy } ; round } ; 5 } ; eq { hop { filter_eq { all_rows ; player ; zack walz } ; round } ; 6 } } }, interpretation: select the rows whose player record fuzzily matches to terry hardy . take the round record of this row . select the rows whose player record fuzzily matches to zack walz . take the round record of this row . the second record is 1 larger than the first record . the round record of the first row is 5 . the round record of the second row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; player ; terry hardy } ; round } ; hop { filter_eq { all_rows ; player ; zack walz } ; round } } ; -1 } ; and { eq { hop { filter_eq { all_rows ; player ; terry hardy } ; round } ; 5 } ; eq { hop { filter_eq { all_rows ; player ; zack walz } ; round } ; 6 } } }, interpretation: select the rows whose result record fuzzily matches to loss . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; loss } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to loss . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; loss } } ; 3 }, interpretation: select the rows whose style record fuzzily matches to west coast swing . there is only one such row in the table . the week record of this unqiue row is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; style ; west coast swing } } ; eq { hop { filter_eq { all_rows ; style ; west coast swing } ; week } ; 4 } }, interpretation: select the rows whose style record fuzzily matches to west coast swing . there is only one such row in the table . the week record of this unqiue row is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; style ; west coast swing } } ; eq { hop { filter_eq { all_rows ; style ; west coast swing } ; week } ; 4 } }, interpretation: select the rows whose venue record fuzzily matches to yerevan , armenia . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; yerevan , armenia } } ; 2 }, interpretation: select the rows whose venue record fuzzily matches to yerevan , armenia . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; yerevan , armenia } } ; 2 }, interpretation: for the to par records of all rows , most of them are equal to 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; to par ; 7 }, interpretation: for the to par records of all rows , most of them are equal to 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; to par ; 7 }, interpretation: select the rows whose leader at the summit record fuzzily matches to gonzalo aja . there is only one such row in the table . the year record of this unqiue row is 1974 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; leader at the summit ; gonzalo aja } } ; eq { hop { filter_eq { all_rows ; leader at the summit ; gonzalo aja } ; year } ; 1974 } }, interpretation: select the rows whose leader at the summit record fuzzily matches to gonzalo aja . there is only one such row in the table . the year record of this unqiue row is 1974 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; leader at the summit ; gonzalo aja } } ; eq { hop { filter_eq { all_rows ; leader at the summit ; gonzalo aja } ; year } ; 1974 } }, interpretation: for the gold records of all rows , most of them are greater than or equal to 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; gold ; 1 }, interpretation: the average of the enrollment record of all rows is 20944 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 20944 }, interpretation: the average of the enrollment record of all rows is 20944 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 20944 }, interpretation: select the rows whose team record fuzzily matches to 499cc matchless g50 . there is only one such row in the table . the rider record of this unqiue row is mark herbertson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; 499cc matchless g50 } } ; eq { hop { filter_eq { all_rows ; team ; 499cc matchless g50 } ; rider } ; mark herbertson } }, interpretation: select the rows whose team record fuzzily matches to 499cc matchless g50 . there is only one such row in the table . the rider record of this unqiue row is mark herbertson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; team ; 499cc matchless g50 } } ; eq { hop { filter_eq { all_rows ; team ; 499cc matchless g50 } ; rider } ; mark herbertson } }, interpretation: for the date records of all rows , all of them fuzzily match to april .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; april }, interpretation: for the nba draft records of all rows , most of them fuzzily match to has not yet declared for the nba draft .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nba draft ; has not yet declared for the nba draft }, interpretation: for the nba draft records of all rows , most of them fuzzily match to has not yet declared for the nba draft .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; nba draft ; has not yet declared for the nba draft }, interpretation: the average of the round record of all rows is 1.7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; round } ; 1.7 }, interpretation: the average of the round record of all rows is 1.7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; round } ; 1.7 }, interpretation: the maximum incorporated record of all rows is 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; incorporated } ; 2006 }, interpretation: the maximum incorporated record of all rows is 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; incorporated } ; 2006 }, interpretation: the sum of the runs scored record of all rows is 1,097 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; runs scored } ; 1,097 }, interpretation: the sum of the runs scored record of all rows is 1,097 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; runs scored } ; 1,097 }, interpretation: select the row whose points against record of all rows is maximum . the club record of this row is gorseinon rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points against } ; club } ; gorseinon rfc }, interpretation: select the row whose points against record of all rows is maximum . the club record of this row is gorseinon rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points against } ; club } ; gorseinon rfc }, interpretation: select the rows whose to par record fuzzily matches to +5 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; +5 } } ; 3 }, interpretation: select the rows whose to par record fuzzily matches to +5 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; to par ; +5 } } ; 3 }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is marlen angelidou .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; marlen angelidou }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is marlen angelidou .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; marlen angelidou }, interpretation: for the aspect records of all rows , all of them fuzzily match to 4:3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; aspect ; 4:3 }, interpretation: for the aspect records of all rows , all of them fuzzily match to 4:3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; aspect ; 4:3 }, interpretation: select the rows whose transfer fee record fuzzily matches to 120k . there is only one such row in the table . the name record of this unqiue row is christou .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; transfer fee ; 120k } } ; eq { hop { filter_eq { all_rows ; transfer fee ; 120k } ; name } ; christou } }, interpretation: select the rows whose transfer fee record fuzzily matches to 120k . there is only one such row in the table . the name record of this unqiue row is christou .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; transfer fee ; 120k } } ; eq { hop { filter_eq { all_rows ; transfer fee ; 120k } ; name } ; christou } }, interpretation: for the played records of all rows , most of them are equal to 38 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 38 }, interpretation: for the played records of all rows , most of them are equal to 38 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; played ; 38 }, interpretation: select the rows whose nation record fuzzily matches to united kingdom . take the silver record of this row . select the rows whose nation record fuzzily matches to finland . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; united kingdom } ; silver } ; hop { filter_eq { all_rows ; nation ; finland } ; silver } }, interpretation: select the rows whose nation record fuzzily matches to united kingdom . take the silver record of this row . select the rows whose nation record fuzzily matches to finland . take the silver record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; nation ; united kingdom } ; silver } ; hop { filter_eq { all_rows ; nation ; finland } ; silver } }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is mike doyle .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; mike doyle }, interpretation: select the row whose first elected record of all rows is minimum . the incumbent record of this row is mike doyle .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; first elected } ; incumbent } ; mike doyle }, interpretation: select the row whose assistant professors record of all rows is minimum . the lecturers record of this row is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; assistant professors } ; lecturers } ; 7 }, interpretation: select the row whose assistant professors record of all rows is minimum . the lecturers record of this row is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; assistant professors } ; lecturers } ; 7 }, interpretation: the average of the to par record of all rows is 15.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; 15.6 }, interpretation: the average of the to par record of all rows is 15.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; to par } ; 15.6 }, interpretation: the average of the bronze record of all rows is 1.67 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; bronze } ; 1.67 }, interpretation: the average of the bronze record of all rows is 1.67 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; bronze } ; 1.67 }, interpretation: select the row whose date record of all rows is 3rd minimum . the tournament record of this row is chennai , india .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 3 } ; tournament } ; chennai , india }, interpretation: select the row whose date record of all rows is 3rd minimum . the tournament record of this row is chennai , india .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 3 } ; tournament } ; chennai , india }, interpretation: select the row whose length record of all rows is minimum . the vessel record of this row is marianarray .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; length } ; vessel } ; marianarray }, interpretation: select the row whose length record of all rows is minimum . the vessel record of this row is marianarray .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; length } ; vessel } ; marianarray }, interpretation: the sum of the laps record of all rows is 535 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 535 }, interpretation: the sum of the laps record of all rows is 535 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 535 }, interpretation: select the row whose attendance record of all rows is 1st maximum . the acc team record of this row is 4 duke .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; acc team } ; 4 duke }, interpretation: select the row whose attendance record of all rows is 1st maximum . the acc team record of this row is 4 duke .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 1 } ; acc team } ; 4 duke }, interpretation: for the visitor records of all rows , most of them fuzzily match to san antonio spurs .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; visitor ; san antonio spurs }, interpretation: for the visitor records of all rows , most of them fuzzily match to san antonio spurs .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; visitor ; san antonio spurs }, interpretation: the average of the capacity record of all rows is 8561 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 8561 }, interpretation: the average of the capacity record of all rows is 8561 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; capacity } ; 8561 }, interpretation: select the row whose population record of all rows is maximum . the english name record of this row is luobei county .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; english name } ; luobei county }, interpretation: select the row whose population record of all rows is maximum . the english name record of this row is luobei county .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; population } ; english name } ; luobei county }, interpretation: select the row whose goals record of all rows is minimum . the player record of this row is mehmet y\u0131lmaz .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; goals } ; player } ; mehmet y\u0131lmaz }, interpretation: select the row whose goals record of all rows is minimum . the player record of this row is mehmet y\u0131lmaz .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; goals } ; player } ; mehmet y\u0131lmaz }, interpretation: the average of the result record of all rows is 3rd place .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; result } ; 3rd place }, interpretation: the average of the result record of all rows is 3rd place .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; result } ; 3rd place }, interpretation: select the rows whose office record fuzzily matches to state assemblyman . there is only one such row in the table . the elected record of this unqiue row is 1974 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; office ; state assemblyman } } ; eq { hop { filter_eq { all_rows ; office ; state assemblyman } ; elected } ; 1974 } }, interpretation: select the rows whose office record fuzzily matches to state assemblyman . there is only one such row in the table . the elected record of this unqiue row is 1974 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; office ; state assemblyman } } ; eq { hop { filter_eq { all_rows ; office ; state assemblyman } ; elected } ; 1974 } }, interpretation: select the rows whose gp - gs record is equal to 14 . there is only one such row in the table . the season record of this unqiue row is 2009 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gp - gs ; 14 } } ; eq { hop { filter_eq { all_rows ; gp - gs ; 14 } ; season } ; 2009 } }, interpretation: select the rows whose gp - gs record is equal to 14 . there is only one such row in the table . the season record of this unqiue row is 2009 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gp - gs ; 14 } } ; eq { hop { filter_eq { all_rows ; gp - gs ; 14 } ; season } ; 2009 } }, interpretation: select the rows whose nominee record fuzzily matches to michael cerveris . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nominee ; michael cerveris } } ; 2 }, interpretation: select the rows whose nominee record fuzzily matches to michael cerveris . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; nominee ; michael cerveris } } ; 2 }, interpretation: for the drew records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; drew ; 0 }, interpretation: for the drew records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; drew ; 0 }, interpretation: select the rows whose years record is equal to 1947 . there is only one such row in the table . the name record of this unqiue row is benito lorenzi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; years ; 1947 } } ; eq { hop { filter_eq { all_rows ; years ; 1947 } ; name } ; benito lorenzi } }, interpretation: select the rows whose years record is equal to 1947 . there is only one such row in the table . the name record of this unqiue row is benito lorenzi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; years ; 1947 } } ; eq { hop { filter_eq { all_rows ; years ; 1947 } ; name } ; benito lorenzi } }, interpretation: select the rows whose owner ( s ) record fuzzily matches to private owner . there is only one such row in the table . the number & name record of this unqiue row is no 1163 whitehead .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; owner ( s ) ; private owner } } ; eq { hop { filter_eq { all_rows ; owner ( s ) ; private owner } ; number & name } ; no 1163 whitehead } }, interpretation: select the rows whose owner ( s ) record fuzzily matches to private owner . there is only one such row in the table . the number & name record of this unqiue row is no 1163 whitehead .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; owner ( s ) ; private owner } } ; eq { hop { filter_eq { all_rows ; owner ( s ) ; private owner } ; number & name } ; no 1163 whitehead } }, interpretation: select the rows whose county record fuzzily matches to kilkenny . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; kilkenny } } ; 2 }, interpretation: select the rows whose county record fuzzily matches to kilkenny . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; county ; kilkenny } } ; 2 }, interpretation: for the height records of all rows , most of them are greater than 1.9 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; height ; 1.9 }, interpretation: for the height records of all rows , most of them are greater than 1.9 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; height ; 1.9 }, interpretation: the average of the crowd record of all rows is 21221 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21221 }, interpretation: the average of the crowd record of all rows is 21221 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 21221 }, interpretation: select the rows whose year record is greater than or equal to 1990 . the sum of the points record of these rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; year ; 1990 } ; points } ; 11 }, interpretation: select the rows whose year record is greater than or equal to 1990 . the sum of the points record of these rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_greater_eq { all_rows ; year ; 1990 } ; points } ; 11 }, interpretation: select the rows whose english title record fuzzily matches to lives of omission . take the peak record of this row . select the rows whose english title record fuzzily matches to the rippling blossom . take the peak record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; lives of omission } ; peak } ; hop { filter_eq { all_rows ; english title ; the rippling blossom } ; peak } }, interpretation: select the rows whose english title record fuzzily matches to lives of omission . take the peak record of this row . select the rows whose english title record fuzzily matches to the rippling blossom . take the peak record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; english title ; lives of omission } ; peak } ; hop { filter_eq { all_rows ; english title ; the rippling blossom } ; peak } }, interpretation: select the row whose episode number record of all rows is 1st minimum . the air date record of this row is 5 april 2010 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; episode number ; 1 } ; air date } ; 5 april 2010 }, interpretation: select the row whose episode number record of all rows is 1st minimum . the air date record of this row is 5 april 2010 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; episode number ; 1 } ; air date } ; 5 april 2010 }, interpretation: the maximum score record of all rows is w 132 - 93 ( ot ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; w 132 - 93 ( ot ) }, interpretation: the maximum score record of all rows is w 132 - 93 ( ot ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; w 132 - 93 ( ot ) }, interpretation: select the rows whose nationality record fuzzily matches to switzerland . there is only one such row in the table . the player record of this unqiue row is julien vauclair .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; switzerland } } ; eq { hop { filter_eq { all_rows ; nationality ; switzerland } ; player } ; julien vauclair } }, interpretation: select the rows whose nationality record fuzzily matches to switzerland . there is only one such row in the table . the player record of this unqiue row is julien vauclair .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; switzerland } } ; eq { hop { filter_eq { all_rows ; nationality ; switzerland } ; player } ; julien vauclair } }, interpretation: select the row whose distance ( ly ) record of all rows is 1st minimum . the constellation record of this row is ursa major .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; distance ( ly ) ; 1 } ; constellation } ; ursa major }, interpretation: select the row whose distance ( ly ) record of all rows is 1st minimum . the constellation record of this row is ursa major .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; distance ( ly ) ; 1 } ; constellation } ; ursa major }, interpretation: select the rows whose first elected record fuzzily matches to 196 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 196 } } ; 2 }, interpretation: select the rows whose first elected record fuzzily matches to 196 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 196 } } ; 2 }, interpretation: select the rows whose year record fuzzily matches to 1967 . take the laps record of this row . select the rows whose year record fuzzily matches to 1971 . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1967 } ; laps } ; hop { filter_eq { all_rows ; year ; 1971 } ; laps } }, interpretation: select the rows whose year record fuzzily matches to 1967 . take the laps record of this row . select the rows whose year record fuzzily matches to 1971 . take the laps record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; year ; 1967 } ; laps } ; hop { filter_eq { all_rows ; year ; 1971 } ; laps } }, interpretation: select the rows whose age record is equal to 21 . there is only one such row in the table . the candidate record of this unqiue row is linda slade .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; age ; 21 } } ; eq { hop { filter_eq { all_rows ; age ; 21 } ; candidate } ; linda slade } }, interpretation: select the rows whose age record is equal to 21 . there is only one such row in the table . the candidate record of this unqiue row is linda slade .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; age ; 21 } } ; eq { hop { filter_eq { all_rows ; age ; 21 } ; candidate } ; linda slade } }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the rows whose constituency record fuzzily matches to south west devon . for the electorate records of these rows , most of them are greater than 9000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; constituency ; south west devon } ; electorate ; 9000 }, interpretation: select the rows whose constituency record fuzzily matches to south west devon . for the electorate records of these rows , most of them are greater than 9000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; constituency ; south west devon } ; electorate ; 9000 }, interpretation: select the rows whose team 1 record fuzzily matches to dinamo zagreb . take the agg record of this row . select the rows whose team 1 record fuzzily matches to borac banja luka . take the agg record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 1 ; dinamo zagreb } ; agg } ; hop { filter_eq { all_rows ; team 1 ; borac banja luka } ; agg } }, interpretation: select the rows whose team 1 record fuzzily matches to dinamo zagreb . take the agg record of this row . select the rows whose team 1 record fuzzily matches to borac banja luka . take the agg record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 1 ; dinamo zagreb } ; agg } ; hop { filter_eq { all_rows ; team 1 ; borac banja luka } ; agg } }, interpretation: the 2nd minimum launch date record of all rows is 25 january 1958 . the name record of the row with 2nd minimum launch date record is rta tv - 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; launch date ; 2 } ; 25 january 1958 } ; eq { hop { nth_argmin { all_rows ; launch date ; 2 } ; name } ; rta tv - 5 } }, interpretation: the 2nd minimum launch date record of all rows is 25 january 1958 . the name record of the row with 2nd minimum launch date record is rta tv - 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; launch date ; 2 } ; 25 january 1958 } ; eq { hop { nth_argmin { all_rows ; launch date ; 2 } ; name } ; rta tv - 5 } }, interpretation: for the first elected records of all rows , most of them are equal to 1948 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first elected ; 1948 }, interpretation: for the first elected records of all rows , most of them are equal to 1948 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first elected ; 1948 }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose attendance record is greater than 60000 . the number of such rows is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; november } ; attendance ; 60000 } } ; 1 }, interpretation: select the rows whose date record fuzzily matches to november . among these rows , select the rows whose attendance record is greater than 60000 . the number of such rows is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { filter_eq { all_rows ; date ; november } ; attendance ; 60000 } } ; 1 }, interpretation: select the rows whose position record fuzzily matches to point guard . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; point guard } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to point guard . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; point guard } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to dominican republic . take the asians record of this row . select the rows whose country record fuzzily matches to costa rica . take the asians record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; country ; dominican republic } ; asians } ; hop { filter_eq { all_rows ; country ; costa rica } ; asians } }, interpretation: select the rows whose country record fuzzily matches to dominican republic . take the asians record of this row . select the rows whose country record fuzzily matches to costa rica . take the asians record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; country ; dominican republic } ; asians } ; hop { filter_eq { all_rows ; country ; costa rica } ; asians } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: for the date records of all rows , all of them fuzzily match to september .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; september }, interpretation: for the date records of all rows , all of them fuzzily match to september .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; september }, interpretation: select the rows whose team 2 record fuzzily matches to barcelona . take the agg record of this row . select the rows whose team 2 record fuzzily matches to manchester united . take the agg record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 2 ; barcelona } ; agg } ; hop { filter_eq { all_rows ; team 2 ; manchester united } ; agg } }, interpretation: select the rows whose team 2 record fuzzily matches to barcelona . take the agg record of this row . select the rows whose team 2 record fuzzily matches to manchester united . take the agg record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; team 2 ; barcelona } ; agg } ; hop { filter_eq { all_rows ; team 2 ; manchester united } ; agg } }, interpretation: select the row whose dolphins points record of all rows is 2nd maximum . the date record of this row is sept 23 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; dolphins points ; 2 } ; date } ; sept 23 }, interpretation: select the row whose dolphins points record of all rows is 2nd maximum . the date record of this row is sept 23 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; dolphins points ; 2 } ; date } ; sept 23 }, interpretation: for the surface records of all rows , most of them fuzzily match to clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; clay }, interpretation: select the rows whose home team record fuzzily matches to south melbourne . take the home team score record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; south melbourne } ; home team score } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } }, interpretation: select the rows whose directed by record fuzzily matches to adam bernstein . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; adam bernstein } } ; 2 }, interpretation: select the rows whose directed by record fuzzily matches to adam bernstein . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; directed by ; adam bernstein } } ; 2 }, interpretation: select the rows whose state record fuzzily matches to oklahoma . take the interview record of this row . select the rows whose state record fuzzily matches to new jersey . take the interview record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; state ; oklahoma } ; interview } ; hop { filter_eq { all_rows ; state ; new jersey } ; interview } }, interpretation: select the rows whose state record fuzzily matches to oklahoma . take the interview record of this row . select the rows whose state record fuzzily matches to new jersey . take the interview record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; state ; oklahoma } ; interview } ; hop { filter_eq { all_rows ; state ; new jersey } ; interview } }, interpretation: select the rows whose transcription record fuzzily matches to makarakhom , mokkarakhom . there is only one such row in the table . the english name record of this unqiue row is january .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; transcription ; makarakhom , mokkarakhom } } ; eq { hop { filter_eq { all_rows ; transcription ; makarakhom , mokkarakhom } ; english name } ; january } }, interpretation: select the rows whose transcription record fuzzily matches to makarakhom , mokkarakhom . there is only one such row in the table . the english name record of this unqiue row is january .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; transcription ; makarakhom , mokkarakhom } } ; eq { hop { filter_eq { all_rows ; transcription ; makarakhom , mokkarakhom } ; english name } ; january } }, interpretation: select the rows whose release date record fuzzily matches to 2008 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; release date ; 2008 } } ; 2 }, interpretation: select the rows whose release date record fuzzily matches to 2008 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; release date ; 2008 } } ; 2 }, interpretation: select the row whose rounds record of all rows is maximum . the team record of this row is henderson motorsports .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; rounds } ; team } ; henderson motorsports }, interpretation: select the row whose rounds record of all rows is maximum . the team record of this row is henderson motorsports .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; rounds } ; team } ; henderson motorsports }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 1970 - 10 - 04 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 1970 - 10 - 04 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is 1970 - 10 - 04 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; 1970 - 10 - 04 }, interpretation: the sum of the 1 usd = record of all rows is 8429.43027 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; 1 usd, interpretation: the sum of the 1 usd = record of all rows is 8429.43027 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; 1 usd, interpretation: select the row whose pick record of all rows is 4th maximum . the player record of this row is alvin mckinley .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; pick ; 4 } ; player } ; alvin mckinley }, interpretation: select the row whose pick record of all rows is 4th maximum . the player record of this row is alvin mckinley .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; pick ; 4 } ; player } ; alvin mckinley }, interpretation: select the rows whose segment b record fuzzily matches to canned tomatoes . there is only one such row in the table . the episode record of this unqiue row is 238 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment b ; canned tomatoes } } ; eq { hop { filter_eq { all_rows ; segment b ; canned tomatoes } ; episode } ; 238 } }, interpretation: select the rows whose segment b record fuzzily matches to canned tomatoes . there is only one such row in the table . the episode record of this unqiue row is 238 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; segment b ; canned tomatoes } } ; eq { hop { filter_eq { all_rows ; segment b ; canned tomatoes } ; episode } ; 238 } }, interpretation: select the rows whose height in ft record is less than 6-0 . there is only one such row in the table . the player record of this unqiue row is turner , andre andre turner .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; height in ft ; 6-0 } } ; eq { hop { filter_less { all_rows ; height in ft ; 6-0 } ; player } ; turner , andre andre turner } }, interpretation: select the rows whose height in ft record is less than 6-0 . there is only one such row in the table . the player record of this unqiue row is turner , andre andre turner .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; height in ft ; 6-0 } } ; eq { hop { filter_less { all_rows ; height in ft ; 6-0 } ; player } ; turner , andre andre turner } }, interpretation: select the rows whose outgoing manager record fuzzily matches to ra\u015fit \u00e7etiner . take the date of vacancy record of this row . select the rows whose outgoing manager record fuzzily matches to engin ipeko\u011flu . take the date of vacancy record of this row . the second record is 8 days larger than the first record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; outgoing manager ; ra\u015fit \u00e7etiner } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; engin ipeko\u011flu } ; date of vacancy } } ; -8 days }, interpretation: select the rows whose outgoing manager record fuzzily matches to ra\u015fit \u00e7etiner . take the date of vacancy record of this row . select the rows whose outgoing manager record fuzzily matches to engin ipeko\u011flu . take the date of vacancy record of this row . the second record is 8 days larger than the first record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; outgoing manager ; ra\u015fit \u00e7etiner } ; date of vacancy } ; hop { filter_eq { all_rows ; outgoing manager ; engin ipeko\u011flu } ; date of vacancy } } ; -8 days }, interpretation: for the constructor records of all rows , most of them fuzzily match to ferrari .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; constructor ; ferrari }, interpretation: for the constructor records of all rows , most of them fuzzily match to ferrari .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; constructor ; ferrari }, interpretation: select the rows whose competition record fuzzily matches to k league classic . there is only one such row in the table . the name record of this unqiue row is molina .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; k league classic } } ; eq { hop { filter_eq { all_rows ; competition ; k league classic } ; name } ; molina } }, interpretation: select the rows whose competition record fuzzily matches to k league classic . there is only one such row in the table . the name record of this unqiue row is molina .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; k league classic } } ; eq { hop { filter_eq { all_rows ; competition ; k league classic } ; name } ; molina } }, interpretation: for the laps records of all rows , most of them are equal to 47 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps ; 47 }, interpretation: for the laps records of all rows , most of them are equal to 47 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; laps ; 47 }, interpretation: select the rows whose player record fuzzily matches to ty warren . take the round record of this row . select the rows whose player record fuzzily matches to dan klecko . take the round record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ty warren } ; round } ; hop { filter_eq { all_rows ; player ; dan klecko } ; round } }, interpretation: select the rows whose player record fuzzily matches to ty warren . take the round record of this row . select the rows whose player record fuzzily matches to dan klecko . take the round record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; ty warren } ; round } ; hop { filter_eq { all_rows ; player ; dan klecko } ; round } }, interpretation: select the rows whose venue record fuzzily matches to candlestick park . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; candlestick park } } ; 3 }, interpretation: select the rows whose venue record fuzzily matches to candlestick park . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; venue ; candlestick park } } ; 3 }, interpretation: select the row whose car record of all rows is 2nd maximum . the player record of this row is john ritcher .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; car ; 2 } ; player } ; john ritcher }, interpretation: select the row whose car record of all rows is 2nd maximum . the player record of this row is john ritcher .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; car ; 2 } ; player } ; john ritcher }, interpretation: select the rows whose capacity record is greater than 5000 . the number of such rows is 11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; capacity ; 5000 } } ; 11 }, interpretation: select the rows whose capacity record is greater than 5000 . the number of such rows is 11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; capacity ; 5000 } } ; 11 }, interpretation: select the rows whose surface record fuzzily matches to carpet . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; surface ; carpet } }, interpretation: select the rows whose surface record fuzzily matches to carpet . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; surface ; carpet } }, interpretation: for the yvert records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; yvert ; 0 }, interpretation: for the yvert records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; yvert ; 0 }, interpretation: select the rows whose player record fuzzily matches to mike weir . take the place record of this row . select the rows whose player record fuzzily matches to scott verplank . take the place record of this row . the first record is 2 larger than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; mike weir } ; place } ; hop { filter_eq { all_rows ; player ; scott verplank } ; place } } ; 2 }, interpretation: select the rows whose player record fuzzily matches to mike weir . take the place record of this row . select the rows whose player record fuzzily matches to scott verplank . take the place record of this row . the first record is 2 larger than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { diff { hop { filter_eq { all_rows ; player ; mike weir } ; place } ; hop { filter_eq { all_rows ; player ; scott verplank } ; place } } ; 2 }, interpretation: select the rows whose college record fuzzily matches to notre dame . there is only one such row in the table . the player record of this unqiue row is rodney culver .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; notre dame } } ; eq { hop { filter_eq { all_rows ; college ; notre dame } ; player } ; rodney culver } }, interpretation: select the rows whose college record fuzzily matches to notre dame . there is only one such row in the table . the player record of this unqiue row is rodney culver .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; notre dame } } ; eq { hop { filter_eq { all_rows ; college ; notre dame } ; player } ; rodney culver } }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is december 16 , 1972 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; december 16 , 1972 }, interpretation: select the row whose attendance record of all rows is maximum . the date record of this row is december 16 , 1972 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; date } ; december 16 , 1972 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is april 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; april 2 }, interpretation: select the row whose location attendance record of all rows is maximum . the date record of this row is april 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; location attendance } ; date } ; april 2 }, interpretation: select the rows whose year record is equal to 2006 . the average of the margin record of these rows is 3.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; year ; 2006 } ; margin } ; 3.5 }, interpretation: select the rows whose year record is equal to 2006 . the average of the margin record of these rows is 3.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; year ; 2006 } ; margin } ; 3.5 }, interpretation: select the row whose time record of all rows is 3rd minimum . the athlete record of this row is gabriella bascelli .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; athlete } ; gabriella bascelli }, interpretation: select the row whose time record of all rows is 3rd minimum . the athlete record of this row is gabriella bascelli .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; time ; 3 } ; athlete } ; gabriella bascelli }, interpretation: the average of the lecturers record of all rows is 7.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lecturers } ; 7.5 }, interpretation: the average of the lecturers record of all rows is 7.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; lecturers } ; 7.5 }, interpretation: the average of the crowd record of all rows is 17750 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17750 }, interpretation: the average of the crowd record of all rows is 17750 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 17750 }, interpretation: select the rows whose played record is equal to 27 . the maximum position record of these rows is 12th . the competition record of the row with superlative position record is super league xiv .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; played ; 27 } ; position } ; 12th } ; eq { hop { argmax { filter_eq { all_rows ; played ; 27 } ; position } ; competition } ; super league xiv } }, interpretation: select the rows whose played record is equal to 27 . the maximum position record of these rows is 12th . the competition record of the row with superlative position record is super league xiv .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { max { filter_eq { all_rows ; played ; 27 } ; position } ; 12th } ; eq { hop { argmax { filter_eq { all_rows ; played ; 27 } ; position } ; competition } ; super league xiv } }, interpretation: select the row whose points record of all rows is 3rd maximum . the opponent record of this row is hartford whalers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 3 } ; opponent } ; hartford whalers }, interpretation: select the row whose points record of all rows is 3rd maximum . the opponent record of this row is hartford whalers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; points ; 3 } ; opponent } ; hartford whalers }, interpretation: select the row whose away team score record of all rows is maximum . the venue record of this row is brunswick street oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; away team score } ; venue } ; brunswick street oval }, interpretation: select the row whose away team score record of all rows is maximum . the venue record of this row is brunswick street oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; away team score } ; venue } ; brunswick street oval }, interpretation: select the row whose position record of all rows is minimum . the pilot record of this row is mario kiessling .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; position } ; pilot } ; mario kiessling }, interpretation: select the row whose position record of all rows is minimum . the pilot record of this row is mario kiessling .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; position } ; pilot } ; mario kiessling }, interpretation: the average of the winner 's share record of all rows is 363889 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; winner 's share } ; 363889 }, interpretation: the average of the winner 's share record of all rows is 363889 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; winner 's share } ; 363889 }, interpretation: select the rows whose college record fuzzily matches to pittsburgh . there is only one such row in the table . the player record of this unqiue row is marty schottenheimer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; pittsburgh } } ; eq { hop { filter_eq { all_rows ; college ; pittsburgh } ; player } ; marty schottenheimer } }, interpretation: select the rows whose college record fuzzily matches to pittsburgh . there is only one such row in the table . the player record of this unqiue row is marty schottenheimer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; pittsburgh } } ; eq { hop { filter_eq { all_rows ; college ; pittsburgh } ; player } ; marty schottenheimer } }, interpretation: select the rows whose population ( in 2008 ) record is less than 1000 . there is only one such row in the table . the suburb record of this unqiue row is o'malley .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; population ( in 2008 ) ; 1000 } } ; eq { hop { filter_less { all_rows ; population ( in 2008 ) ; 1000 } ; suburb } ; o'malley } }, interpretation: select the rows whose population ( in 2008 ) record is less than 1000 . there is only one such row in the table . the suburb record of this unqiue row is o'malley .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; population ( in 2008 ) ; 1000 } } ; eq { hop { filter_less { all_rows ; population ( in 2008 ) ; 1000 } ; suburb } ; o'malley } }, interpretation: select the rows whose partner record fuzzily matches to sergio gald\u00f3s . there is only one such row in the table . the tournament record of this unqiue row is panama city .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; partner ; sergio gald\u00f3s } } ; eq { hop { filter_eq { all_rows ; partner ; sergio gald\u00f3s } ; tournament } ; panama city } }, interpretation: select the rows whose partner record fuzzily matches to sergio gald\u00f3s . there is only one such row in the table . the tournament record of this unqiue row is panama city .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; partner ; sergio gald\u00f3s } } ; eq { hop { filter_eq { all_rows ; partner ; sergio gald\u00f3s } ; tournament } ; panama city } }, interpretation: select the rows whose event record fuzzily matches to men 's . the average of the swim ( 1.5 km ) record of these rows is 18:41 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; event ; men 's } ; swim ( 1.5 km ) } ; 18:41 }, interpretation: select the rows whose event record fuzzily matches to men 's . the average of the swim ( 1.5 km ) record of these rows is 18:41 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; event ; men 's } ; swim ( 1.5 km ) } ; 18:41 }, interpretation: select the rows whose executive record fuzzily matches to second . among these rows , select the rows whose first minister record fuzzily matches to ian paisley . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; executive ; second } ; first minister ; ian paisley } } ; 2 }, interpretation: select the rows whose executive record fuzzily matches to second . among these rows , select the rows whose first minister record fuzzily matches to ian paisley . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; executive ; second } ; first minister ; ian paisley } } ; 2 }, interpretation: select the rows whose player record fuzzily matches to jeff urban . take the pick record of this row . select the rows whose player record fuzzily matches to chris george . take the pick record of this row . the first record is greater than the second record . the pick record of the first row is 41 . the pick record of the second row is 31 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; player ; jeff urban } ; pick } ; hop { filter_eq { all_rows ; player ; chris george } ; pick } } ; and { eq { hop { filter_eq { all_rows ; player ; jeff urban } ; pick } ; 41 } ; eq { hop { filter_eq { all_rows ; player ; chris george } ; pick } ; 31 } } }, interpretation: select the rows whose player record fuzzily matches to jeff urban . take the pick record of this row . select the rows whose player record fuzzily matches to chris george . take the pick record of this row . the first record is greater than the second record . the pick record of the first row is 41 . the pick record of the second row is 31 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; player ; jeff urban } ; pick } ; hop { filter_eq { all_rows ; player ; chris george } ; pick } } ; and { eq { hop { filter_eq { all_rows ; player ; jeff urban } ; pick } ; 41 } ; eq { hop { filter_eq { all_rows ; player ; chris george } ; pick } ; 31 } } }, interpretation: select the rows whose date record fuzzily matches to december . among these rows , select the rows whose result record fuzzily matches to l . there is only one such row in the table . the opponent record of this unqiue row is miami dolphins .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; date ; december } ; result ; l } } ; eq { hop { filter_eq { filter_eq { all_rows ; date ; december } ; result ; l } ; opponent } ; miami dolphins } }, interpretation: select the rows whose date record fuzzily matches to december . among these rows , select the rows whose result record fuzzily matches to l . there is only one such row in the table . the opponent record of this unqiue row is miami dolphins .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; date ; december } ; result ; l } } ; eq { hop { filter_eq { filter_eq { all_rows ; date ; december } ; result ; l } ; opponent } ; miami dolphins } }, interpretation: select the rows whose sport record fuzzily matches to baseball . there is only one such row in the table . the sportsperson record of this unqiue row is albert pujols .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; sport ; baseball } } ; eq { hop { filter_eq { all_rows ; sport ; baseball } ; sportsperson } ; albert pujols } }, interpretation: select the rows whose sport record fuzzily matches to baseball . there is only one such row in the table . the sportsperson record of this unqiue row is albert pujols .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; sport ; baseball } } ; eq { hop { filter_eq { all_rows ; sport ; baseball } ; sportsperson } ; albert pujols } }, interpretation: select the rows whose goalkeeper record fuzzily matches to juan calatayud . take the goals record of this row . select the rows whose goalkeeper record fuzzily matches to eduardo navarro . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; goalkeeper ; juan calatayud } ; goals } ; hop { filter_eq { all_rows ; goalkeeper ; eduardo navarro } ; goals } }, interpretation: select the rows whose goalkeeper record fuzzily matches to juan calatayud . take the goals record of this row . select the rows whose goalkeeper record fuzzily matches to eduardo navarro . take the goals record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; goalkeeper ; juan calatayud } ; goals } ; hop { filter_eq { all_rows ; goalkeeper ; eduardo navarro } ; goals } }, interpretation: for the best score records of all rows , most of them are greater than or equal to 29 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; best score ; 29 }, interpretation: for the best score records of all rows , most of them are greater than or equal to 29 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; best score ; 29 }, interpretation: select the rows whose winner record fuzzily matches to ita . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; winner ; ita } }, interpretation: select the rows whose winner record fuzzily matches to ita . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; winner ; ita } }, interpretation: select the rows whose attendance record is greater than 59000 . there is only one such row in the table . the date record of this unqiue row is october 30 , 1977 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; attendance ; 59000 } } ; eq { hop { filter_greater { all_rows ; attendance ; 59000 } ; date } ; october 30 , 1977 } }, interpretation: select the rows whose attendance record is greater than 59000 . there is only one such row in the table . the date record of this unqiue row is october 30 , 1977 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; attendance ; 59000 } } ; eq { hop { filter_greater { all_rows ; attendance ; 59000 } ; date } ; october 30 , 1977 } }, interpretation: the 1st minimum date of inauguration record of all rows is 26 january 1950 . the president record of the row with 1st minimum date of inauguration record is prasad , rajendra rajendra prasad .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date of inauguration ; 1 } ; 26 january 1950 } ; eq { hop { nth_argmin { all_rows ; date of inauguration ; 1 } ; president } ; prasad , rajendra rajendra prasad } }, interpretation: the 1st minimum date of inauguration record of all rows is 26 january 1950 . the president record of the row with 1st minimum date of inauguration record is prasad , rajendra rajendra prasad .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date of inauguration ; 1 } ; 26 january 1950 } ; eq { hop { nth_argmin { all_rows ; date of inauguration ; 1 } ; president } ; prasad , rajendra rajendra prasad } }, interpretation: select the rows whose party record fuzzily matches to independent . there is only one such row in the table . the candidate record of this unqiue row is peter law .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; independent } } ; eq { hop { filter_eq { all_rows ; party ; independent } ; candidate } ; peter law } }, interpretation: select the rows whose party record fuzzily matches to independent . there is only one such row in the table . the candidate record of this unqiue row is peter law .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; independent } } ; eq { hop { filter_eq { all_rows ; party ; independent } ; candidate } ; peter law } }, interpretation: the sum of the matches record of all rows is 84 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; matches } ; 84 }, interpretation: the sum of the matches record of all rows is 84 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; matches } ; 84 }, interpretation: select the rows whose college / junior / club team record fuzzily matches to ohl . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college / junior / club team ; ohl } } ; 6 }, interpretation: select the rows whose college / junior / club team record fuzzily matches to ohl . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; college / junior / club team ; ohl } } ; 6 }, interpretation: select the rows whose gold record is greater than 0 . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; gold ; 0 } } ; 6 }, interpretation: select the rows whose gold record is greater than 0 . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; gold ; 0 } } ; 6 }, interpretation: the average of the physical record of all rows is 22 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; physical } ; 22 }, interpretation: the average of the physical record of all rows is 22 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; physical } ; 22 }, interpretation: select the rows whose year record fuzzily matches to 2004 . take the rank record of this row . select the rows whose year record fuzzily matches to 2006 . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 2004 } ; rank } ; hop { filter_eq { all_rows ; year ; 2006 } ; rank } }, interpretation: select the rows whose year record fuzzily matches to 2004 . take the rank record of this row . select the rows whose year record fuzzily matches to 2006 . take the rank record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 2004 } ; rank } ; hop { filter_eq { all_rows ; year ; 2006 } ; rank } }, interpretation: for the start source records of all rows , most of them fuzzily match to bbc sport .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; start source ; bbc sport }, interpretation: for the start source records of all rows , most of them fuzzily match to bbc sport .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; start source ; bbc sport }, interpretation: for the played records of all rows , all of them are equal to 18 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 18 }, interpretation: for the played records of all rows , all of them are equal to 18 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; played ; 18 }, interpretation: select the rows whose position record fuzzily matches to forward / guard . there is only one such row in the table . the player record of this unqiue row is short , purvis purvis short .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; forward / guard } } ; eq { hop { filter_eq { all_rows ; position ; forward / guard } ; player } ; short , purvis purvis short } }, interpretation: select the rows whose position record fuzzily matches to forward / guard . there is only one such row in the table . the player record of this unqiue row is short , purvis purvis short .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; position ; forward / guard } } ; eq { hop { filter_eq { all_rows ; position ; forward / guard } ; player } ; short , purvis purvis short } }, interpretation: select the row whose location / attendance record of all rows is 1st maximum . the opponent record of this row is new york liberty outdoor classic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location / attendance ; 1 } ; opponent } ; new york liberty outdoor classic }, interpretation: select the row whose location / attendance record of all rows is 1st maximum . the opponent record of this row is new york liberty outdoor classic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location / attendance ; 1 } ; opponent } ; new york liberty outdoor classic }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the to par record of these rows is -7.6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; to par } ; -7.6 }, interpretation: select the rows whose country record fuzzily matches to united states . the average of the to par record of these rows is -7.6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; country ; united states } ; to par } ; -7.6 }, interpretation: select the rows whose home record fuzzily matches to los angeles . for the attendance records of these rows , most of them are equal to 18118 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; home ; los angeles } ; attendance ; 18118 }, interpretation: select the rows whose home record fuzzily matches to los angeles . for the attendance records of these rows , most of them are equal to 18118 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { filter_eq { all_rows ; home ; los angeles } ; attendance ; 18118 }, interpretation: select the rows whose type record fuzzily matches to military . there is only one such row in the table . the institution record of this unqiue row is norwich university .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; type ; military } } ; eq { hop { filter_eq { all_rows ; type ; military } ; institution } ; norwich university } }, interpretation: select the rows whose type record fuzzily matches to military . there is only one such row in the table . the institution record of this unqiue row is norwich university .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; type ; military } } ; eq { hop { filter_eq { all_rows ; type ; military } ; institution } ; norwich university } }, interpretation: select the rows whose entrant record fuzzily matches to martini racing . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; entrant ; martini racing } } ; 4 }, interpretation: select the rows whose entrant record fuzzily matches to martini racing . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; entrant ; martini racing } } ; 4 }, interpretation: select the rows whose home record fuzzily matches to pittsburgh . select the row whose date record of these rows is 1st minimum . the attendance record of this row is 17132 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; home ; pittsburgh } ; date ; 1 } ; attendance } ; 17132 }, interpretation: select the rows whose home record fuzzily matches to pittsburgh . select the row whose date record of these rows is 1st minimum . the attendance record of this row is 17132 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; home ; pittsburgh } ; date ; 1 } ; attendance } ; 17132 }, interpretation: select the rows whose date record fuzzily matches to november . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; date ; november } } ; 4 }, interpretation: select the rows whose episode record fuzzily matches to gary marries off his ex . take the air date record of this row . select the rows whose episode record fuzzily matches to gary gets boundaries . take the air date record of this row . the first record is greater than the second record . the air date record of the first row is october 8 , 2008 . the air date record of the second row is october 1 , 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; episode ; gary marries off his ex } ; air date } ; hop { filter_eq { all_rows ; episode ; gary gets boundaries } ; air date } } ; and { eq { hop { filter_eq { all_rows ; episode ; gary marries off his ex } ; air date } ; october 8 , 2008 } ; eq { hop { filter_eq { all_rows ; episode ; gary gets boundaries } ; air date } ; october 1 , 2008 } } }, interpretation: select the rows whose episode record fuzzily matches to gary marries off his ex . take the air date record of this row . select the rows whose episode record fuzzily matches to gary gets boundaries . take the air date record of this row . the first record is greater than the second record . the air date record of the first row is october 8 , 2008 . the air date record of the second row is october 1 , 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; episode ; gary marries off his ex } ; air date } ; hop { filter_eq { all_rows ; episode ; gary gets boundaries } ; air date } } ; and { eq { hop { filter_eq { all_rows ; episode ; gary marries off his ex } ; air date } ; october 8 , 2008 } ; eq { hop { filter_eq { all_rows ; episode ; gary gets boundaries } ; air date } ; october 1 , 2008 } } }, interpretation: select the rows whose home team record fuzzily matches to south melbourne . take the home team score record of this row . select the rows whose home team record fuzzily matches to north melbourne . take the home team score record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; home team ; south melbourne } ; home team score } ; hop { filter_eq { all_rows ; home team ; north melbourne } ; home team score } }, interpretation: select the rows whose position record fuzzily matches to cornerback . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; cornerback } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to cornerback . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; cornerback } } ; 2 }, interpretation: select the rows whose track record fuzzily matches to mono 45upm - romance adieu ( weltklang remix ) . take the year record of this row . select the rows whose track record fuzzily matches to kinder aus asbest - hey engel ( weltklang remix ) . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; track ; mono 45upm - romance adieu ( weltklang remix ) } ; year } ; hop { filter_eq { all_rows ; track ; kinder aus asbest - hey engel ( weltklang remix ) } ; year } }, interpretation: select the rows whose track record fuzzily matches to mono 45upm - romance adieu ( weltklang remix ) . take the year record of this row . select the rows whose track record fuzzily matches to kinder aus asbest - hey engel ( weltklang remix ) . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; track ; mono 45upm - romance adieu ( weltklang remix ) } ; year } ; hop { filter_eq { all_rows ; track ; kinder aus asbest - hey engel ( weltklang remix ) } ; year } }, interpretation: select the rows whose us acres episode record fuzzily matches to daydream doctor . take the original airdate record of this row . select the rows whose us acres episode record fuzzily matches to deja vu . take the original airdate record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; us acres episode ; daydream doctor } ; original airdate } ; hop { filter_eq { all_rows ; us acres episode ; deja vu } ; original airdate } }, interpretation: select the rows whose us acres episode record fuzzily matches to daydream doctor . take the original airdate record of this row . select the rows whose us acres episode record fuzzily matches to deja vu . take the original airdate record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; us acres episode ; daydream doctor } ; original airdate } ; hop { filter_eq { all_rows ; us acres episode ; deja vu } ; original airdate } }, interpretation: for the ihsaa class records of all rows , all of them fuzzily match to aaaa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; ihsaa class ; aaaa }, interpretation: for the ihsaa class records of all rows , all of them fuzzily match to aaaa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; ihsaa class ; aaaa }, interpretation: select the rows whose player record fuzzily matches to john senst . take the pick record of this row . select the rows whose player record fuzzily matches to paul brown . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; john senst } ; pick } ; hop { filter_eq { all_rows ; player ; paul brown } ; pick } }, interpretation: select the rows whose player record fuzzily matches to john senst . take the pick record of this row . select the rows whose player record fuzzily matches to paul brown . take the pick record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; john senst } ; pick } ; hop { filter_eq { all_rows ; player ; paul brown } ; pick } }, interpretation: select the rows whose agricultural panel record is equal to 0 . there is only one such row in the table . the party record of this unqiue row is independent .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; agricultural panel ; 0 } } ; eq { hop { filter_eq { all_rows ; agricultural panel ; 0 } ; party } ; independent } }, interpretation: select the rows whose agricultural panel record is equal to 0 . there is only one such row in the table . the party record of this unqiue row is independent .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; agricultural panel ; 0 } } ; eq { hop { filter_eq { all_rows ; agricultural panel ; 0 } ; party } ; independent } }, interpretation: select the rows whose remixed by record fuzzily matches to laurent boutonnat . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; remixed by ; laurent boutonnat } } ; 2 }, interpretation: select the rows whose remixed by record fuzzily matches to laurent boutonnat . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; remixed by ; laurent boutonnat } } ; 2 }, interpretation: select the rows whose original team record fuzzily matches to team money . the average of the age record of these rows is 22.8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; original team ; team money } ; age } ; 22.8 }, interpretation: select the rows whose original team record fuzzily matches to team money . the average of the age record of these rows is 22.8 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; original team ; team money } ; age } ; 22.8 }, interpretation: select the row whose frequency record of all rows is maximum . the model number record of this row is x5 - 150 adw .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency } ; model number } ; x5 - 150 adw }, interpretation: select the row whose frequency record of all rows is maximum . the model number record of this row is x5 - 150 adw .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; frequency } ; model number } ; x5 - 150 adw }, interpretation: select the rows whose currency record fuzzily matches to latvian lats . take the official target date record of this row . select the rows whose currency record fuzzily matches to lithuanian litas . take the official target date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; currency ; latvian lats } ; official target date } ; hop { filter_eq { all_rows ; currency ; lithuanian litas } ; official target date } }, interpretation: select the rows whose currency record fuzzily matches to latvian lats . take the official target date record of this row . select the rows whose currency record fuzzily matches to lithuanian litas . take the official target date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; currency ; latvian lats } ; official target date } ; hop { filter_eq { all_rows ; currency ; lithuanian litas } ; official target date } }, interpretation: for the wsop bracelets records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wsop bracelets ; 0 }, interpretation: for the wsop bracelets records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wsop bracelets ; 0 }, interpretation: the average of the crowd record of all rows is 16667 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16667 }, interpretation: the average of the crowd record of all rows is 16667 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 16667 }, interpretation: select the row whose jerseys record of all rows is 4th maximum . the country record of this row is italy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; jerseys ; 4 } ; country } ; italy }, interpretation: select the row whose jerseys record of all rows is 4th maximum . the country record of this row is italy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; jerseys ; 4 } ; country } ; italy }, interpretation: the average of the laps record of all rows is 259 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 259 }, interpretation: the average of the laps record of all rows is 259 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; laps } ; 259 }, interpretation: select the row whose muzzle energy record of all rows is maximum . the cartridge record of this row is .357 magnum .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; muzzle energy } ; cartridge } ; .357 magnum }, interpretation: select the row whose muzzle energy record of all rows is maximum . the cartridge record of this row is .357 magnum .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; muzzle energy } ; cartridge } ; .357 magnum }, interpretation: select the row whose gold record of all rows is 2nd maximum . the nation record of this row is argentina ( arg ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; gold ; 2 } ; nation } ; argentina ( arg ) }, interpretation: select the row whose gold record of all rows is 2nd maximum . the nation record of this row is argentina ( arg ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; gold ; 2 } ; nation } ; argentina ( arg ) }, interpretation: select the rows whose runner up record fuzzily matches to sydney swans . take the attendance record of this row . select the rows whose runner up record fuzzily matches to hawthorn . take the attendance record of this row . the second record is 61861 larger than the first record . the attendance record of the first row is 30824 . the attendance record of the second row is 92685 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; runner up ; sydney swans } ; attendance } ; hop { filter_eq { all_rows ; runner up ; hawthorn } ; attendance } } ; -61861 } ; and { eq { hop { filter_eq { all_rows ; runner up ; sydney swans } ; attendance } ; 30824 } ; eq { hop { filter_eq { all_rows ; runner up ; hawthorn } ; attendance } ; 92685 } } }, interpretation: select the rows whose runner up record fuzzily matches to sydney swans . take the attendance record of this row . select the rows whose runner up record fuzzily matches to hawthorn . take the attendance record of this row . the second record is 61861 larger than the first record . the attendance record of the first row is 30824 . the attendance record of the second row is 92685 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { diff { hop { filter_eq { all_rows ; runner up ; sydney swans } ; attendance } ; hop { filter_eq { all_rows ; runner up ; hawthorn } ; attendance } } ; -61861 } ; and { eq { hop { filter_eq { all_rows ; runner up ; sydney swans } ; attendance } ; 30824 } ; eq { hop { filter_eq { all_rows ; runner up ; hawthorn } ; attendance } ; 92685 } } }, interpretation: the 1st minimum date of vacancy record of all rows is 7 sep 2010 . the outgoing head coach record of the row with 1st minimum date of vacancy record is rasoul korbekandi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date of vacancy ; 1 } ; 7 sep 2010 } ; eq { hop { nth_argmin { all_rows ; date of vacancy ; 1 } ; outgoing head coach } ; rasoul korbekandi } }, interpretation: the 1st minimum date of vacancy record of all rows is 7 sep 2010 . the outgoing head coach record of the row with 1st minimum date of vacancy record is rasoul korbekandi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; date of vacancy ; 1 } ; 7 sep 2010 } ; eq { hop { nth_argmin { all_rows ; date of vacancy ; 1 } ; outgoing head coach } ; rasoul korbekandi } }, interpretation: select the row whose us air date record of all rows is minimum . the storyteller record of this row is kristen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; us air date } ; storyteller } ; kristen }, interpretation: select the row whose us air date record of all rows is minimum . the storyteller record of this row is kristen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; us air date } ; storyteller } ; kristen }, interpretation: select the row whose caps record of all rows is 3rd maximum . the player record of this row is kyle beckerman .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; caps ; 3 } ; player } ; kyle beckerman }, interpretation: select the row whose caps record of all rows is 3rd maximum . the player record of this row is kyle beckerman .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; caps ; 3 } ; player } ; kyle beckerman }, interpretation: select the rows whose class / type record fuzzily matches to passenger ship . there is only one such row in the table . the builder record of this unqiue row is john roach and son .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; class / type ; passenger ship } } ; eq { hop { filter_eq { all_rows ; class / type ; passenger ship } ; builder } ; john roach and son } }, interpretation: select the rows whose class / type record fuzzily matches to passenger ship . there is only one such row in the table . the builder record of this unqiue row is john roach and son .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; class / type ; passenger ship } } ; eq { hop { filter_eq { all_rows ; class / type ; passenger ship } ; builder } ; john roach and son } }, interpretation: select the rows whose nickname record fuzzily matches to bulldogs . there is only one such row in the table . the institution record of this unqiue row is georgia military college .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nickname ; bulldogs } } ; eq { hop { filter_eq { all_rows ; nickname ; bulldogs } ; institution } ; georgia military college } }, interpretation: select the rows whose nickname record fuzzily matches to bulldogs . there is only one such row in the table . the institution record of this unqiue row is georgia military college .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nickname ; bulldogs } } ; eq { hop { filter_eq { all_rows ; nickname ; bulldogs } ; institution } ; georgia military college } }, interpretation: select the rows whose championship record fuzzily matches to wimbledon . select the row whose year record of these rows is minimum . the opponent in the final record of this row is wilhelm bungert .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; championship ; wimbledon } ; year } ; opponent in the final } ; wilhelm bungert }, interpretation: select the rows whose championship record fuzzily matches to wimbledon . select the row whose year record of these rows is minimum . the opponent in the final record of this row is wilhelm bungert .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; championship ; wimbledon } ; year } ; opponent in the final } ; wilhelm bungert }, interpretation: select the rows whose result record fuzzily matches to win . the sum of the cowboys points record of these rows is 154 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; win } ; cowboys points } ; 154 }, interpretation: select the rows whose result record fuzzily matches to win . the sum of the cowboys points record of these rows is 154 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { filter_eq { all_rows ; result ; win } ; cowboys points } ; 154 }, interpretation: select the rows whose result record fuzzily matches to ot . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; ot } } ; 3 }, interpretation: select the rows whose result record fuzzily matches to ot . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; ot } } ; 3 }, interpretation: the average of the td 's record of all rows is 8.27 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; td 's } ; 8.27 }, interpretation: the average of the td 's record of all rows is 8.27 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; td 's } ; 8.27 }, interpretation: select the rows whose emperor 's cup record fuzzily matches to semi - final . there is only one such row in the table . the season record of this unqiue row is 2000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; emperor 's cup ; semi - final } } ; eq { hop { filter_eq { all_rows ; emperor 's cup ; semi - final } ; season } ; 2000 } }, interpretation: select the rows whose emperor 's cup record fuzzily matches to semi - final . there is only one such row in the table . the season record of this unqiue row is 2000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; emperor 's cup ; semi - final } } ; eq { hop { filter_eq { all_rows ; emperor 's cup ; semi - final } ; season } ; 2000 } }, interpretation: select the rows whose directed by record fuzzily matches to brad turner . among these rows , select the rows whose written by record fuzzily matches to manny coto & brannon braga . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; brad turner } ; written by ; manny coto & brannon braga } } ; 3 }, interpretation: select the rows whose directed by record fuzzily matches to brad turner . among these rows , select the rows whose written by record fuzzily matches to manny coto & brannon braga . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; directed by ; brad turner } ; written by ; manny coto & brannon braga } } ; 3 }, interpretation: select the row whose year established record of all rows is 2nd maximum . the members record of this row is university of otago .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year established ; 2 } ; members } ; university of otago }, interpretation: select the row whose year established record of all rows is 2nd maximum . the members record of this row is university of otago .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; year established ; 2 } ; members } ; university of otago }, interpretation: select the rows whose avg attend record is less than 4000 . there is only one such row in the table . the indoor year record of this unqiue row is 1983 - 1984 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; avg attend ; 4000 } } ; eq { hop { filter_less { all_rows ; avg attend ; 4000 } ; indoor year } ; 1983 - 1984 } }, interpretation: select the rows whose avg attend record is less than 4000 . there is only one such row in the table . the indoor year record of this unqiue row is 1983 - 1984 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_less { all_rows ; avg attend ; 4000 } } ; eq { hop { filter_less { all_rows ; avg attend ; 4000 } ; indoor year } ; 1983 - 1984 } }, interpretation: for the conversions records of all rows , most of them are greater than 50 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; conversions ; 50 }, interpretation: for the conversions records of all rows , most of them are greater than 50 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; conversions ; 50 }, interpretation: select the rows whose game site record fuzzily matches to rca dome . select the row whose date record of these rows is 4th minimum . the attendance record of this row is 56860 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; game site ; rca dome } ; date ; 4 } ; attendance } ; 56860 }, interpretation: select the rows whose game site record fuzzily matches to rca dome . select the row whose date record of these rows is 4th minimum . the attendance record of this row is 56860 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { filter_eq { all_rows ; game site ; rca dome } ; date ; 4 } ; attendance } ; 56860 }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the crowd record of this row . select the rows whose home team record fuzzily matches to geelong . take the crowd record of this row . the first record is greater than the second record . the away team record of the first row is footscray . the away team record of the second row is st kilda .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; crowd } ; hop { filter_eq { all_rows ; home team ; geelong } ; crowd } } ; and { eq { hop { filter_eq { all_rows ; home team ; fitzroy } ; away team } ; footscray } ; eq { hop { filter_eq { all_rows ; home team ; geelong } ; away team } ; st kilda } } }, interpretation: select the rows whose home team record fuzzily matches to fitzroy . take the crowd record of this row . select the rows whose home team record fuzzily matches to geelong . take the crowd record of this row . the first record is greater than the second record . the away team record of the first row is footscray . the away team record of the second row is st kilda .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; home team ; fitzroy } ; crowd } ; hop { filter_eq { all_rows ; home team ; geelong } ; crowd } } ; and { eq { hop { filter_eq { all_rows ; home team ; fitzroy } ; away team } ; footscray } ; eq { hop { filter_eq { all_rows ; home team ; geelong } ; away team } ; st kilda } } }, interpretation: select the row whose date record of all rows is 2nd maximum . the tournament record of this row is makarska , croatia itf 75000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; tournament } ; makarska , croatia itf 75000 }, interpretation: select the row whose date record of all rows is 2nd maximum . the tournament record of this row is makarska , croatia itf 75000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; tournament } ; makarska , croatia itf 75000 }, interpretation: select the rows whose results record fuzzily matches to re - elected . among these rows , select the rows whose first elected record is equal to 1990 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; results ; re - elected } ; first elected ; 1990 } } ; 2 }, interpretation: select the rows whose results record fuzzily matches to re - elected . among these rows , select the rows whose first elected record is equal to 1990 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; results ; re - elected } ; first elected ; 1990 } } ; 2 }, interpretation: for the wins records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; wins ; 0 }, interpretation: select the row whose us viewers ( million ) record of all rows is maximum . the title record of this row is exile on main st .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( million ) } ; title } ; exile on main st }, interpretation: select the row whose us viewers ( million ) record of all rows is maximum . the title record of this row is exile on main st .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( million ) } ; title } ; exile on main st }, interpretation: select the row whose gold record of all rows is maximum . the nation record of this row is soviet union .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; gold } ; nation } ; soviet union }, interpretation: select the rows whose tournament record fuzzily matches to us open . take the cuts made record of this row . select the rows whose tournament record fuzzily matches to pga championship . take the cuts made record of this row . the first record is equal to the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; tournament ; us open } ; cuts made } ; hop { filter_eq { all_rows ; tournament ; pga championship } ; cuts made } }, interpretation: select the rows whose tournament record fuzzily matches to us open . take the cuts made record of this row . select the rows whose tournament record fuzzily matches to pga championship . take the cuts made record of this row . the first record is equal to the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { filter_eq { all_rows ; tournament ; us open } ; cuts made } ; hop { filter_eq { all_rows ; tournament ; pga championship } ; cuts made } }, interpretation: select the rows whose crowd record is greater than 20000 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; crowd ; 20000 } } ; 2 }, interpretation: select the rows whose crowd record is greater than 20000 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; crowd ; 20000 } } ; 2 }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is gilfach goch rfc .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; gilfach goch rfc }, interpretation: select the row whose points record of all rows is maximum . the club record of this row is gilfach goch rfc .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; club } ; gilfach goch rfc }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is sasha son .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; sasha son }, interpretation: select the row whose points record of all rows is maximum . the artist record of this row is sasha son .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; artist } ; sasha son }, interpretation: select the row whose attendance record of all rows is 3rd minimum . the date record of this row is april 23 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; attendance ; 3 } ; date } ; april 23 }, interpretation: select the row whose attendance record of all rows is 3rd minimum . the date record of this row is april 23 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; attendance ; 3 } ; date } ; april 23 }, interpretation: select the rows whose club record fuzzily matches to landskrona bois . take the first season of current spell record of this row . select the rows whose club record fuzzily matches to \u00e4ngelholms ff . take the first season of current spell record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; landskrona bois } ; first season of current spell } ; hop { filter_eq { all_rows ; club ; \u00e4ngelholms ff } ; first season of current spell } }, interpretation: select the rows whose club record fuzzily matches to landskrona bois . take the first season of current spell record of this row . select the rows whose club record fuzzily matches to \u00e4ngelholms ff . take the first season of current spell record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; club ; landskrona bois } ; first season of current spell } ; hop { filter_eq { all_rows ; club ; \u00e4ngelholms ff } ; first season of current spell } }, interpretation: select the rows whose role record fuzzily matches to 2nd male lead . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; role ; 2nd male lead } } ; 2 }, interpretation: select the rows whose role record fuzzily matches to 2nd male lead . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; role ; 2nd male lead } } ; 2 }, interpretation: select the rows whose bbc one presenter ( s ) record fuzzily matches to jake humphrey . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bbc one presenter ( s ) ; jake humphrey } } ; 2 }, interpretation: select the rows whose bbc one presenter ( s ) record fuzzily matches to jake humphrey . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; bbc one presenter ( s ) ; jake humphrey } } ; 2 }, interpretation: for the date records of all rows , all of them fuzzily match to 16 august .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 16 august }, interpretation: for the date records of all rows , all of them fuzzily match to 16 august .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 16 august }, interpretation: the sum of the laps record of all rows is 1279 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 1279 }, interpretation: the sum of the laps record of all rows is 1279 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; laps } ; 1279 }, interpretation: select the rows whose actor required record fuzzily matches to female , older . there is only one such row in the table . the actor in original production record of this unqiue row is beth tuckley .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; actor required ; female , older } } ; eq { hop { filter_eq { all_rows ; actor required ; female , older } ; actor in original production } ; beth tuckley } }, interpretation: select the rows whose actor required record fuzzily matches to female , older . there is only one such row in the table . the actor in original production record of this unqiue row is beth tuckley .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; actor required ; female , older } } ; eq { hop { filter_eq { all_rows ; actor required ; female , older } ; actor in original production } ; beth tuckley } }, interpretation: the average of the points record of all rows is 9.4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 9.4 }, interpretation: the average of the points record of all rows is 9.4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 9.4 }, interpretation: select the row whose last aired record of all rows is 2nd minimum . the show record of this row is high rollers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; last aired ; 2 } ; show } ; high rollers }, interpretation: select the row whose last aired record of all rows is 2nd minimum . the show record of this row is high rollers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; last aired ; 2 } ; show } ; high rollers }, interpretation: select the row whose points record of all rows is maximum . the team record of this row is libertad .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; points } ; team } ; libertad }, interpretation: for the jersey number ( s ) records of all rows , most of them are greater than 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; jersey number ( s ) ; 10 }, interpretation: for the jersey number ( s ) records of all rows , most of them are greater than 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; jersey number ( s ) ; 10 }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the directed by records of all rows , all of them fuzzily match to don colliver .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; directed by ; don colliver }, interpretation: for the directed by records of all rows , all of them fuzzily match to don colliver .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; directed by ; don colliver }, interpretation: for the result records of all rows , most of them fuzzily match to w .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; w }, interpretation: for the start datum records of all rows , most of them fuzzily match to wgs84 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; start datum ; wgs84 }, interpretation: for the start datum records of all rows , most of them fuzzily match to wgs84 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; start datum ; wgs84 }, interpretation: select the rows whose result record fuzzily matches to w . the number of such rows is 8 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; w } } ; 8 }, interpretation: the sum of the crowd record of all rows is 103000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 103000 }, interpretation: the sum of the crowd record of all rows is 103000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; crowd } ; 103000 }, interpretation: select the rows whose college record fuzzily matches to hastings college . there is only one such row in the table . the player record of this unqiue row is adam kossack .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; hastings college } } ; eq { hop { filter_eq { all_rows ; college ; hastings college } ; player } ; adam kossack } }, interpretation: select the rows whose college record fuzzily matches to hastings college . there is only one such row in the table . the player record of this unqiue row is adam kossack .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; hastings college } } ; eq { hop { filter_eq { all_rows ; college ; hastings college } ; player } ; adam kossack } }, interpretation: select the rows whose hometown record fuzzily matches to brampton , on . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; hometown ; brampton , on } }, interpretation: select the rows whose hometown record fuzzily matches to brampton , on . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; hometown ; brampton , on } }, interpretation: for the final records of all rows , most of them fuzzily match to did not advance .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; final ; did not advance }, interpretation: for the final records of all rows , most of them fuzzily match to did not advance .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; final ; did not advance }, interpretation: select the rows whose percentage of votes record does not match to 100 % . there is only one such row in the table . the election date record of this unqiue row is 1981 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; percentage of votes ; 100 % } } ; eq { hop { filter_not_eq { all_rows ; percentage of votes ; 100 % } ; election date } ; 1981 } }, interpretation: select the rows whose percentage of votes record does not match to 100 % . there is only one such row in the table . the election date record of this unqiue row is 1981 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_not_eq { all_rows ; percentage of votes ; 100 % } } ; eq { hop { filter_not_eq { all_rows ; percentage of votes ; 100 % } ; election date } ; 1981 } }, interpretation: select the row whose median family income record of all rows is maximum . the county record of this row is cumberland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; median family income } ; county } ; cumberland }, interpretation: select the row whose median family income record of all rows is maximum . the county record of this row is cumberland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; median family income } ; county } ; cumberland }, interpretation: for the date records of all rows , all of them fuzzily match to 30 july 1938 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 30 july 1938 }, interpretation: for the date records of all rows , all of them fuzzily match to 30 july 1938 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 30 july 1938 }, interpretation: select the rows whose points record is greater than 50 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 50 } } ; 3 }, interpretation: select the rows whose points record is greater than 50 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; points ; 50 } } ; 3 }, interpretation: select the rows whose wins record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wins ; 2 } } ; 2 }, interpretation: select the rows whose wins record is equal to 2 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; wins ; 2 } } ; 2 }, interpretation: select the rows whose team record fuzzily matches to lietuvos rytas vilnius . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; lietuvos rytas vilnius } } ; 2 }, interpretation: select the rows whose team record fuzzily matches to lietuvos rytas vilnius . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; lietuvos rytas vilnius } } ; 2 }, interpretation: select the row whose total wins record of all rows is maximum . the nationality record of this row is united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total wins } ; nationality } ; united states }, interpretation: select the row whose total wins record of all rows is maximum . the nationality record of this row is united states .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; total wins } ; nationality } ; united states }, interpretation: select the rows whose position record fuzzily matches to tackle . for the round records of these rows , all of them are less than 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_less { filter_eq { all_rows ; position ; tackle } ; round ; 7 }, interpretation: select the rows whose position record fuzzily matches to tackle . for the round records of these rows , all of them are less than 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_less { filter_eq { all_rows ; position ; tackle } ; round ; 7 }, interpretation: select the rows whose date record fuzzily matches to february 2 . take the attendance record of this row . select the rows whose date record fuzzily matches to february 29 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; february 2 } ; attendance } ; hop { filter_eq { all_rows ; date ; february 29 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to february 2 . take the attendance record of this row . select the rows whose date record fuzzily matches to february 29 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; february 2 } ; attendance } ; hop { filter_eq { all_rows ; date ; february 29 } ; attendance } }, interpretation: select the rows whose round record is greater than 3 . among these rows , select the rows whose overall record is less than 200 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; round ; 3 } ; overall ; 200 } } ; 3 }, interpretation: select the rows whose round record is greater than 3 . among these rows , select the rows whose overall record is less than 200 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_less { filter_greater { all_rows ; round ; 3 } ; overall ; 200 } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to metlife stadium . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; metlife stadium } } ; 3 }, interpretation: select the rows whose location record fuzzily matches to metlife stadium . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; location ; metlife stadium } } ; 3 }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; chicago blackhawks } } ; 2 }, interpretation: select the rows whose opponent record fuzzily matches to chicago blackhawks . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; opponent ; chicago blackhawks } } ; 2 }, interpretation: select the rows whose competition record fuzzily matches to friendly match . there is only one such row in the table . the date record of this unqiue row is september 27 , 1993 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; friendly match } } ; eq { hop { filter_eq { all_rows ; competition ; friendly match } ; date } ; september 27 , 1993 } }, interpretation: select the rows whose competition record fuzzily matches to friendly match . there is only one such row in the table . the date record of this unqiue row is september 27 , 1993 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; competition ; friendly match } } ; eq { hop { filter_eq { all_rows ; competition ; friendly match } ; date } ; september 27 , 1993 } }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is lake oval .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; lake oval }, interpretation: select the row whose crowd record of all rows is 2nd maximum . the venue record of this row is lake oval .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; lake oval }, interpretation: the sum of the money record of all rows is 414749 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; money } ; 414749 }, interpretation: the sum of the money record of all rows is 414749 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; money } ; 414749 }, interpretation: the average of the candidates record of all rows is 13 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 13 }, interpretation: the average of the candidates record of all rows is 13 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; candidates } ; 13 }, interpretation: select the rows whose match points record fuzzily matches to 4-0 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; match points ; 4-0 } } ; 3 }, interpretation: select the rows whose match points record fuzzily matches to 4-0 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; match points ; 4-0 } } ; 3 }, interpretation: select the rows whose name record fuzzily matches to adam gilchrist ( wk ) . take the innings record of this row . select the rows whose name record fuzzily matches to matthew hayden . take the innings record of this row . the first record is greater than the second record . the innings record of the first row is 8 . the innings record of the second row is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; adam gilchrist ( wk ) } ; innings } ; hop { filter_eq { all_rows ; name ; matthew hayden } ; innings } } ; and { eq { hop { filter_eq { all_rows ; name ; adam gilchrist ( wk ) } ; innings } ; 8 } ; eq { hop { filter_eq { all_rows ; name ; matthew hayden } ; innings } ; 6 } } }, interpretation: select the rows whose name record fuzzily matches to adam gilchrist ( wk ) . take the innings record of this row . select the rows whose name record fuzzily matches to matthew hayden . take the innings record of this row . the first record is greater than the second record . the innings record of the first row is 8 . the innings record of the second row is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; adam gilchrist ( wk ) } ; innings } ; hop { filter_eq { all_rows ; name ; matthew hayden } ; innings } } ; and { eq { hop { filter_eq { all_rows ; name ; adam gilchrist ( wk ) } ; innings } ; 8 } ; eq { hop { filter_eq { all_rows ; name ; matthew hayden } ; innings } ; 6 } } }, interpretation: for the first issue records of all rows , most of them fuzzily match to august 2008 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first issue ; august 2008 }, interpretation: for the first issue records of all rows , most of them fuzzily match to august 2008 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; first issue ; august 2008 }, interpretation: select the row whose us viewers ( millions ) record of all rows is maximum . the no in series record of this row is 1 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( millions ) } ; no in series } ; 1 }, interpretation: select the row whose us viewers ( millions ) record of all rows is maximum . the no in series record of this row is 1 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; us viewers ( millions ) } ; no in series } ; 1 }, interpretation: select the rows whose date record is less than or equal to september 15 2001 . the average of the distance record of these rows is 1300 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; date ; september 15 2001 } ; distance } ; 1300 }, interpretation: select the rows whose date record is less than or equal to september 15 2001 . the average of the distance record of these rows is 1300 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; date ; september 15 2001 } ; distance } ; 1300 }, interpretation: select the rows whose rope record is equal to 9.7 . there is only one such row in the table . the name record of this unqiue row is maria isabel lloret .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; rope ; 9.7 } } ; eq { hop { filter_eq { all_rows ; rope ; 9.7 } ; name } ; maria isabel lloret } }, interpretation: select the rows whose rope record is equal to 9.7 . there is only one such row in the table . the name record of this unqiue row is maria isabel lloret .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; rope ; 9.7 } } ; eq { hop { filter_eq { all_rows ; rope ; 9.7 } ; name } ; maria isabel lloret } }, interpretation: select the rows whose viewers ( millions ) record is less than 4 million . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_less { all_rows ; viewers ( millions ) ; 4 million } }, interpretation: select the rows whose viewers ( millions ) record is less than 4 million . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_less { all_rows ; viewers ( millions ) ; 4 million } }, interpretation: select the rows whose venue record fuzzily matches to windy hill . take the crowd record of this row . select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; windy hill } ; crowd } ; hop { filter_eq { all_rows ; venue ; princes park } ; crowd } }, interpretation: select the rows whose venue record fuzzily matches to windy hill . take the crowd record of this row . select the rows whose venue record fuzzily matches to princes park . take the crowd record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; venue ; windy hill } ; crowd } ; hop { filter_eq { all_rows ; venue ; princes park } ; crowd } }, interpretation: the average of the launch record of all rows is 2001-2002 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; launch } ; 2001-2002 }, interpretation: the average of the launch record of all rows is 2001-2002 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; launch } ; 2001-2002 }, interpretation: for the surface records of all rows , most of them fuzzily match to hard .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; surface ; hard }, interpretation: select the rows whose area record fuzzily matches to gore . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; area ; gore } } ; 7 }, interpretation: select the rows whose area record fuzzily matches to gore . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; area ; gore } } ; 7 }, interpretation: select the rows whose municipality record fuzzily matches to tecate . take the area ( km2 ) record of this row . select the rows whose municipality record fuzzily matches to tijuana . take the area ( km2 ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; municipality ; tecate } ; area ( km2 ) } ; hop { filter_eq { all_rows ; municipality ; tijuana } ; area ( km2 ) } }, interpretation: select the rows whose municipality record fuzzily matches to tecate . take the area ( km2 ) record of this row . select the rows whose municipality record fuzzily matches to tijuana . take the area ( km2 ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; municipality ; tecate } ; area ( km2 ) } ; hop { filter_eq { all_rows ; municipality ; tijuana } ; area ( km2 ) } }, interpretation: for the runs records of all rows , most of them are greater than 100 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; runs ; 100 }, interpretation: for the runs records of all rows , most of them are greater than 100 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; runs ; 100 }, interpretation: select the row whose average record of all rows is 1st maximum . the player record of this row is max waller .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; average ; 1 } ; player } ; max waller }, interpretation: select the row whose average record of all rows is 1st maximum . the player record of this row is max waller .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; average ; 1 } ; player } ; max waller }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is mcg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; mcg }, interpretation: select the row whose crowd record of all rows is 1st maximum . the venue record of this row is mcg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; crowd ; 1 } ; venue } ; mcg }, interpretation: the 2nd minimum round record of all rows is 2 . the player record of the row with 2nd minimum round record is joe hernandez .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; round ; 2 } ; 2 } ; eq { hop { nth_argmin { all_rows ; round ; 2 } ; player } ; joe hernandez } }, interpretation: the 2nd minimum round record of all rows is 2 . the player record of the row with 2nd minimum round record is joe hernandez .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; round ; 2 } ; 2 } ; eq { hop { nth_argmin { all_rows ; round ; 2 } ; player } ; joe hernandez } }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is saturday , april 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; saturday , april 10 }, interpretation: select the row whose attendance record of all rows is 2nd maximum . the date record of this row is saturday , april 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; saturday , april 10 }, interpretation: select the rows whose event record fuzzily matches to espn great outdoor games . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; event ; espn great outdoor games } } ; 3 }, interpretation: select the rows whose event record fuzzily matches to espn great outdoor games . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; event ; espn great outdoor games } } ; 3 }, interpretation: select the row whose attendance record of all rows is maximum . the game site record of this row is waldstadion .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; game site } ; waldstadion }, interpretation: select the row whose attendance record of all rows is maximum . the game site record of this row is waldstadion .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; game site } ; waldstadion }, interpretation: select the row whose age record of all rows is maximum . the name record of this row is donte gamble .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; age } ; name } ; donte gamble }, interpretation: select the row whose age record of all rows is maximum . the name record of this row is donte gamble .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; age } ; name } ; donte gamble }, interpretation: the average of the frequency ( per hour ) record of all rows is 3.11 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; frequency ( per hour ) } ; 3.11 }, interpretation: the average of the frequency ( per hour ) record of all rows is 3.11 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; frequency ( per hour ) } ; 3.11 }, interpretation: select the row whose attendance / g record of all rows is minimum . the season record of this row is 2007 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; attendance / g } ; season } ; 2007 }, interpretation: select the row whose attendance / g record of all rows is minimum . the season record of this row is 2007 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; attendance / g } ; season } ; 2007 }, interpretation: select the rows whose rank record is less than or equal to 3 . the average of the time record of these rows is 10.73 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; rank ; 3 } ; time } ; 10.73 }, interpretation: select the rows whose rank record is less than or equal to 3 . the average of the time record of these rows is 10.73 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_less_eq { all_rows ; rank ; 3 } ; time } ; 10.73 }, interpretation: for the club records of all rows , most of them fuzzily match to rkc waalwijk .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; club ; rkc waalwijk }, interpretation: for the club records of all rows , most of them fuzzily match to rkc waalwijk .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; club ; rkc waalwijk }, interpretation: select the rows whose partner record fuzzily matches to brian fairlie . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; brian fairlie } } ; 4 }, interpretation: select the rows whose partner record fuzzily matches to brian fairlie . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; partner ; brian fairlie } } ; 4 }, interpretation: select the rows whose player record fuzzily matches to adam gilchrist . take the matches record of this row . select the rows whose player record fuzzily matches to steve rixon . take the matches record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; adam gilchrist } ; matches } ; hop { filter_eq { all_rows ; player ; steve rixon } ; matches } }, interpretation: select the rows whose player record fuzzily matches to adam gilchrist . take the matches record of this row . select the rows whose player record fuzzily matches to steve rixon . take the matches record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; adam gilchrist } ; matches } ; hop { filter_eq { all_rows ; player ; steve rixon } ; matches } }, interpretation: the average of the points record of all rows is 10 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 10 }, interpretation: the average of the points record of all rows is 10 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 10 }, interpretation: select the row whose attendance record of all rows is 4th maximum . the round record of this row is 1st round - 1st leg .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 4 } ; round } ; 1st round - 1st leg }, interpretation: select the row whose attendance record of all rows is 4th maximum . the round record of this row is 1st round - 1st leg .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 4 } ; round } ; 1st round - 1st leg }, interpretation: select the row whose date record of all rows is 2nd maximum . the opponent in the final record of this row is v\u00edctor pecci .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; opponent in the final } ; v\u00edctor pecci }, interpretation: select the row whose date record of all rows is 2nd maximum . the opponent in the final record of this row is v\u00edctor pecci .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; date ; 2 } ; opponent in the final } ; v\u00edctor pecci }, interpretation: select the rows whose opponent record fuzzily matches to slough jets . take the attendance record of this row . select the rows whose opponent record fuzzily matches to sheffield scimitars . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; slough jets } ; attendance } ; hop { filter_eq { all_rows ; opponent ; sheffield scimitars } ; attendance } }, interpretation: select the rows whose opponent record fuzzily matches to slough jets . take the attendance record of this row . select the rows whose opponent record fuzzily matches to sheffield scimitars . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opponent ; slough jets } ; attendance } ; hop { filter_eq { all_rows ; opponent ; sheffield scimitars } ; attendance } }, interpretation: for the crowd records of all rows , most of them are greater than 10000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; crowd ; 10000 }, interpretation: select the rows whose venue record fuzzily matches to hampden park , glasgow , scotland . take the date record of this row . select the rows whose venue record fuzzily matches to varsity stadium , toronto , canada . take the date record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; hampden park , glasgow , scotland } ; date } ; hop { filter_eq { all_rows ; venue ; varsity stadium , toronto , canada } ; date } }, interpretation: select the rows whose venue record fuzzily matches to hampden park , glasgow , scotland . take the date record of this row . select the rows whose venue record fuzzily matches to varsity stadium , toronto , canada . take the date record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; venue ; hampden park , glasgow , scotland } ; date } ; hop { filter_eq { all_rows ; venue ; varsity stadium , toronto , canada } ; date } }, interpretation: select the row whose margin of victory record of all rows is maximum . the date record of this row is 22 jun 2006 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin of victory } ; date } ; 22 jun 2006 }, interpretation: select the row whose margin of victory record of all rows is maximum . the date record of this row is 22 jun 2006 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; margin of victory } ; date } ; 22 jun 2006 }, interpretation: for the story by records of all rows , all of them fuzzily match to david simon & ed burns .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; story by ; david simon & ed burns }, interpretation: for the story by records of all rows , all of them fuzzily match to david simon & ed burns .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; story by ; david simon & ed burns }, interpretation: select the row whose issue price record of all rows is maximum . the issue price record of this row is 24.95 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; issue price } ; issue price } ; 24.95 }, interpretation: select the row whose issue price record of all rows is maximum . the issue price record of this row is 24.95 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; issue price } ; issue price } ; 24.95 }, interpretation: select the row whose population record of all rows is 2nd maximum . the official name record of this row is hillsborough .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 2 } ; official name } ; hillsborough }, interpretation: select the row whose population record of all rows is 2nd maximum . the official name record of this row is hillsborough .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ; 2 } ; official name } ; hillsborough }, interpretation: select the rows whose opposing teams record fuzzily matches to wales . take the against record of this row . select the rows whose opposing teams record fuzzily matches to scotland . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing teams ; wales } ; against } ; hop { filter_eq { all_rows ; opposing teams ; scotland } ; against } }, interpretation: select the rows whose opposing teams record fuzzily matches to wales . take the against record of this row . select the rows whose opposing teams record fuzzily matches to scotland . take the against record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; opposing teams ; wales } ; against } ; hop { filter_eq { all_rows ; opposing teams ; scotland } ; against } }, interpretation: the maximum away record of all rows is 2 - 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; away } ; 2 - 0 }, interpretation: the maximum away record of all rows is 2 - 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; away } ; 2 - 0 }, interpretation: select the rows whose name record fuzzily matches to eninho . take the goals record of this row . select the rows whose name record fuzzily matches to ko jeong - woon . take the goals record of this row . the first record is greater than the second record . the goals record of the first row is 51 . the goals record of the second row is 42 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; eninho } ; goals } ; hop { filter_eq { all_rows ; name ; ko jeong - woon } ; goals } } ; and { eq { hop { filter_eq { all_rows ; name ; eninho } ; goals } ; 51 } ; eq { hop { filter_eq { all_rows ; name ; ko jeong - woon } ; goals } ; 42 } } }, interpretation: select the rows whose name record fuzzily matches to eninho . take the goals record of this row . select the rows whose name record fuzzily matches to ko jeong - woon . take the goals record of this row . the first record is greater than the second record . the goals record of the first row is 51 . the goals record of the second row is 42 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { greater { hop { filter_eq { all_rows ; name ; eninho } ; goals } ; hop { filter_eq { all_rows ; name ; ko jeong - woon } ; goals } } ; and { eq { hop { filter_eq { all_rows ; name ; eninho } ; goals } ; 51 } ; eq { hop { filter_eq { all_rows ; name ; ko jeong - woon } ; goals } ; 42 } } }, interpretation: for the episodes records of all rows , most of them are greater than or equal to 40 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; episodes ; 40 }, interpretation: for the episodes records of all rows , most of them are greater than or equal to 40 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater_eq { all_rows ; episodes ; 40 }, interpretation: select the rows whose year record is greater than 2004 . for the position records of these rows , most of them are greater than 50 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_greater { all_rows ; year ; 2004 } ; position ; 50 }, interpretation: select the rows whose year record is greater than 2004 . for the position records of these rows , most of them are greater than 50 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_greater { all_rows ; year ; 2004 } ; position ; 50 }, interpretation: for the production code records of all rows , most of them are less than 110 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; production code ; 110 }, interpretation: for the production code records of all rows , most of them are less than 110 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { all_rows ; production code ; 110 }, interpretation: select the rows whose team record fuzzily matches to portland . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; portland } } ; 2 }, interpretation: select the rows whose team record fuzzily matches to portland . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; team ; portland } } ; 2 }, interpretation: select the rows whose height record fuzzily matches to 6 - 4 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; height ; 6 - 4 } } ; 2 }, interpretation: select the rows whose height record fuzzily matches to 6 - 4 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; height ; 6 - 4 } } ; 2 }, interpretation: select the rows whose game site record fuzzily matches to forbes field . the minimum date record of these rows is sunday september 20 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; game site ; forbes field } ; date } ; sunday september 20 }, interpretation: select the rows whose game site record fuzzily matches to forbes field . the minimum date record of these rows is sunday september 20 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { min { filter_eq { all_rows ; game site ; forbes field } ; date } ; sunday september 20 }, interpretation: the 1st minimum no for series record of all rows is 1 . the title record of the row with 1st minimum no for series record is the curse of cornelius sigan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; no for series ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; no for series ; 1 } ; title } ; the curse of cornelius sigan } }, interpretation: the 1st minimum no for series record of all rows is 1 . the title record of the row with 1st minimum no for series record is the curse of cornelius sigan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; no for series ; 1 } ; 1 } ; eq { hop { nth_argmin { all_rows ; no for series ; 1 } ; title } ; the curse of cornelius sigan } }, interpretation: for the platform records of all rows , most of them fuzzily match to windows .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ; windows }, interpretation: for the platform records of all rows , most of them fuzzily match to windows .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; platform ; windows }, interpretation: select the rows whose party record fuzzily matches to democratic . there is only one such row in the table . the incumbent record of this unqiue row is robert cramer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; democratic } } ; eq { hop { filter_eq { all_rows ; party ; democratic } ; incumbent } ; robert cramer } }, interpretation: select the rows whose party record fuzzily matches to democratic . there is only one such row in the table . the incumbent record of this unqiue row is robert cramer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; party ; democratic } } ; eq { hop { filter_eq { all_rows ; party ; democratic } ; incumbent } ; robert cramer } }, interpretation: for the chassis records of all rows , most of them fuzzily match to talbot-lago t26c da .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; talbot-lago t26c da }, interpretation: for the chassis records of all rows , most of them fuzzily match to talbot-lago t26c da .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; chassis ; talbot-lago t26c da }, interpretation: select the rows whose incumbent record fuzzily matches to homer thornberry . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to john dowdy . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; homer thornberry } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; john dowdy } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to homer thornberry . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to john dowdy . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; homer thornberry } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; john dowdy } ; first elected } }, interpretation: select the row whose area ( km 2 ) record of all rows is maximum . the main town record of this row is adampan .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; area ( km 2 ) } ; main town } ; adampan }, interpretation: select the row whose area ( km 2 ) record of all rows is maximum . the main town record of this row is adampan .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; area ( km 2 ) } ; main town } ; adampan }, interpretation: select the row whose opening odds record of all rows is minimum . the horse name record of this row is mine that bird .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; opening odds } ; horse name } ; mine that bird }, interpretation: select the row whose opening odds record of all rows is minimum . the horse name record of this row is mine that bird .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; opening odds } ; horse name } ; mine that bird }, interpretation: the sum of the length ( mi ) record of all rows is 2,336.25 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; length ( mi ) } ; 2,336.25 }, interpretation: the sum of the length ( mi ) record of all rows is 2,336.25 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; length ( mi ) } ; 2,336.25 }, interpretation: for the crystal structure records of all rows , most of them fuzzily match to tetragonal .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; crystal structure ; tetragonal }, interpretation: for the crystal structure records of all rows , most of them fuzzily match to tetragonal .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; crystal structure ; tetragonal }, interpretation: select the rows whose number of electorates ( 2009 ) record is greater than 190000 . there is only one such row in the table . the name record of this unqiue row is suwasra .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; number of electorates ( 2009 ) ; 190000 } } ; eq { hop { filter_greater { all_rows ; number of electorates ( 2009 ) ; 190000 } ; name } ; suwasra } }, interpretation: select the rows whose number of electorates ( 2009 ) record is greater than 190000 . there is only one such row in the table . the name record of this unqiue row is suwasra .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_greater { all_rows ; number of electorates ( 2009 ) ; 190000 } } ; eq { hop { filter_greater { all_rows ; number of electorates ( 2009 ) ; 190000 } ; name } ; suwasra } }, interpretation: select the rows whose final position / round record fuzzily matches to runner - up . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; final position / round ; runner - up } } ; 4 }, interpretation: select the rows whose final position / round record fuzzily matches to runner - up . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; final position / round ; runner - up } } ; 4 }, interpretation: for the transmission records of all rows , most of them fuzzily match to analog & digital .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; transmission ; analog & digital }, interpretation: for the transmission records of all rows , most of them fuzzily match to analog & digital .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; transmission ; analog & digital }, interpretation: select the row whose height ft ( m ) record of all rows is 2nd maximum . the name record of this row is fifth third center .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ft ( m ) ; 2 } ; name } ; fifth third center }, interpretation: select the row whose height ft ( m ) record of all rows is 2nd maximum . the name record of this row is fifth third center .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; height ft ( m ) ; 2 } ; name } ; fifth third center }, interpretation: select the row whose weeks on top record of all rows is 2nd maximum . the song record of this row is livin ' la vida loca .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; weeks on top ; 2 } ; song } ; livin ' la vida loca }, interpretation: select the row whose weeks on top record of all rows is 2nd maximum . the song record of this row is livin ' la vida loca .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; weeks on top ; 2 } ; song } ; livin ' la vida loca }, interpretation: select the rows whose athlete record fuzzily matches to julia michalska . take the time record of this row . select the rows whose athlete record fuzzily matches to elana hill . take the time record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; athlete ; julia michalska } ; time } ; hop { filter_eq { all_rows ; athlete ; elana hill } ; time } }, interpretation: select the rows whose athlete record fuzzily matches to julia michalska . take the time record of this row . select the rows whose athlete record fuzzily matches to elana hill . take the time record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; athlete ; julia michalska } ; time } ; hop { filter_eq { all_rows ; athlete ; elana hill } ; time } }, interpretation: select the row whose year record of all rows is 2nd minimum . the event record of this row is monsters of rock .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; event } ; monsters of rock }, interpretation: select the row whose year record of all rows is 2nd minimum . the event record of this row is monsters of rock .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; year ; 2 } ; event } ; monsters of rock }, interpretation: select the row whose original air date record of all rows is 1st maximum . the family / families record of this row is the haynes family and the potter family .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; family / families } ; the haynes family and the potter family }, interpretation: select the row whose original air date record of all rows is 1st maximum . the family / families record of this row is the haynes family and the potter family .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; original air date ; 1 } ; family / families } ; the haynes family and the potter family }, interpretation: for the championship records of all rows , most of them fuzzily match to french open .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; championship ; french open }, interpretation: for the championship records of all rows , most of them fuzzily match to french open .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; championship ; french open }, interpretation: for the gender records of all rows , most of them fuzzily match to coed .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; gender ; coed }, interpretation: for the gender records of all rows , most of them fuzzily match to coed .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; gender ; coed }, interpretation: select the rows whose office record fuzzily matches to former governor . select the row whose popular vote record of these rows is minimum . the candidate record of this row is buddy roemer .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; office ; former governor } ; popular vote } ; candidate } ; buddy roemer }, interpretation: select the rows whose office record fuzzily matches to former governor . select the row whose popular vote record of these rows is minimum . the candidate record of this row is buddy roemer .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { filter_eq { all_rows ; office ; former governor } ; popular vote } ; candidate } ; buddy roemer }, interpretation: select the row whose original air date record of all rows is 2nd minimum . the celebrity record of this row is margot kidder .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; original air date ; 2 } ; celebrity } ; margot kidder }, interpretation: select the row whose original air date record of all rows is 2nd minimum . the celebrity record of this row is margot kidder .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; original air date ; 2 } ; celebrity } ; margot kidder }, interpretation: select the rows whose top - 10 record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; top - 10 ; 0 } } ; 2 }, interpretation: select the rows whose top - 10 record is equal to 0 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; top - 10 ; 0 } } ; 2 }, interpretation: select the rows whose branding record fuzzily matches to mom 's radio 88.3 cebu . take the power ( kw ) record of this row . select the rows whose branding record fuzzily matches to mom 's radio 101.5 tacloban . take the power ( kw ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; branding ; mom 's radio 88.3 cebu } ; power ( kw ) } ; hop { filter_eq { all_rows ; branding ; mom 's radio 101.5 tacloban } ; power ( kw ) } }, interpretation: select the rows whose branding record fuzzily matches to mom 's radio 88.3 cebu . take the power ( kw ) record of this row . select the rows whose branding record fuzzily matches to mom 's radio 101.5 tacloban . take the power ( kw ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; branding ; mom 's radio 88.3 cebu } ; power ( kw ) } ; hop { filter_eq { all_rows ; branding ; mom 's radio 101.5 tacloban } ; power ( kw ) } }, interpretation: select the rows whose alma mater record fuzzily matches to trent university . there is only one such row in the table . the player record of this unqiue row is josh wasson .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; alma mater ; trent university } } ; eq { hop { filter_eq { all_rows ; alma mater ; trent university } ; player } ; josh wasson } }, interpretation: select the rows whose alma mater record fuzzily matches to trent university . there is only one such row in the table . the player record of this unqiue row is josh wasson .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; alma mater ; trent university } } ; eq { hop { filter_eq { all_rows ; alma mater ; trent university } ; player } ; josh wasson } }, interpretation: select the row whose starts record of all rows is 2nd maximum . the year record of this row is 1994 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; starts ; 2 } ; year } ; 1994 }, interpretation: select the row whose starts record of all rows is 2nd maximum . the year record of this row is 1994 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; starts ; 2 } ; year } ; 1994 }, interpretation: select the rows whose county record fuzzily matches to kiambu . take the code record of this row . select the rows whose county record fuzzily matches to nyeri . take the code record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; county ; kiambu } ; code } ; hop { filter_eq { all_rows ; county ; nyeri } ; code } }, interpretation: select the rows whose county record fuzzily matches to kiambu . take the code record of this row . select the rows whose county record fuzzily matches to nyeri . take the code record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; county ; kiambu } ; code } ; hop { filter_eq { all_rows ; county ; nyeri } ; code } }, interpretation: the average of the apparent magnitude record of all rows is 12.24 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; apparent magnitude } ; 12.24 }, interpretation: the average of the apparent magnitude record of all rows is 12.24 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; apparent magnitude } ; 12.24 }, interpretation: select the row whose date record of all rows is maximum . the venue record of this row is qemal stafa stadium , tirana .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; venue } ; qemal stafa stadium , tirana }, interpretation: select the row whose date record of all rows is maximum . the venue record of this row is qemal stafa stadium , tirana .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; venue } ; qemal stafa stadium , tirana }, interpretation: select the rows whose attendance record is greater than 20,000 . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; attendance ; 20,000 } } ; 5 }, interpretation: select the rows whose attendance record is greater than 20,000 . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; attendance ; 20,000 } } ; 5 }, interpretation: select the rows whose warship record fuzzily matches to chacabuco . take the speed ( knots ) record of this row . select the rows whose warship record fuzzily matches to abtao . take the speed ( knots ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; warship ; chacabuco } ; speed ( knots ) } ; hop { filter_eq { all_rows ; warship ; abtao } ; speed ( knots ) } }, interpretation: select the rows whose warship record fuzzily matches to chacabuco . take the speed ( knots ) record of this row . select the rows whose warship record fuzzily matches to abtao . take the speed ( knots ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; warship ; chacabuco } ; speed ( knots ) } ; hop { filter_eq { all_rows ; warship ; abtao } ; speed ( knots ) } }, interpretation: the average of the claimed sales record of all rows is 136.875 million .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; claimed sales } ; 136.875 million }, interpretation: the average of the claimed sales record of all rows is 136.875 million .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; claimed sales } ; 136.875 million }, interpretation: select the rows whose date record fuzzily matches to november 22 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 29 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; november 22 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 29 } ; attendance } }, interpretation: select the rows whose date record fuzzily matches to november 22 . take the attendance record of this row . select the rows whose date record fuzzily matches to november 29 . take the attendance record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; date ; november 22 } ; attendance } ; hop { filter_eq { all_rows ; date ; november 29 } ; attendance } }, interpretation: for the label records of all rows , all of them fuzzily match to linfair records .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; label ; linfair records }, interpretation: for the label records of all rows , all of them fuzzily match to linfair records .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; label ; linfair records }, interpretation: for the pick records of all rows , all of them are equal to 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; pick ; 2 }, interpretation: for the pick records of all rows , all of them are equal to 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; pick ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . for the events records of these rows , most of them are greater than 21 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; country ; united states } ; events ; 21 }, interpretation: select the rows whose country record fuzzily matches to united states . for the events records of these rows , most of them are greater than 21 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { filter_eq { all_rows ; country ; united states } ; events ; 21 }, interpretation: for the result records of all rows , most of them fuzzily match to l .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; result ; l }, interpretation: for the quantity preserved records of all rows , most of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; quantity preserved ; 0 }, interpretation: for the quantity preserved records of all rows , most of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; quantity preserved ; 0 }, interpretation: select the row whose against record of all rows is 2nd maximum . the opposing team record of this row is litoral region xv .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; against ; 2 } ; opposing team } ; litoral region xv }, interpretation: select the row whose against record of all rows is 2nd maximum . the opposing team record of this row is litoral region xv .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; against ; 2 } ; opposing team } ; litoral region xv }, interpretation: for the language records of all rows , most of them fuzzily match to hindi .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; language ; hindi }, interpretation: for the language records of all rows , most of them fuzzily match to hindi .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; language ; hindi }, interpretation: select the rows whose song title record fuzzily matches to nee maatalo . take the year record of this row . select the rows whose song title record fuzzily matches to hey po . take the year record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; song title ; nee maatalo } ; year } ; hop { filter_eq { all_rows ; song title ; hey po } ; year } }, interpretation: select the rows whose song title record fuzzily matches to nee maatalo . take the year record of this row . select the rows whose song title record fuzzily matches to hey po . take the year record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; song title ; nee maatalo } ; year } ; hop { filter_eq { all_rows ; song title ; hey po } ; year } }, interpretation: select the rows whose high points record fuzzily matches to damon stoudamire . among these rows , select the rows whose team record fuzzily matches to miami . there is only one such row in the table . the date record of this unqiue row is april 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; high points ; damon stoudamire } ; team ; miami } } ; eq { hop { filter_eq { filter_eq { all_rows ; high points ; damon stoudamire } ; team ; miami } ; date } ; april 5 } }, interpretation: select the rows whose high points record fuzzily matches to damon stoudamire . among these rows , select the rows whose team record fuzzily matches to miami . there is only one such row in the table . the date record of this unqiue row is april 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; high points ; damon stoudamire } ; team ; miami } } ; eq { hop { filter_eq { filter_eq { all_rows ; high points ; damon stoudamire } ; team ; miami } ; date } ; april 5 } }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is college all - stars at chicago .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; college all - stars at chicago }, interpretation: select the row whose attendance record of all rows is maximum . the opponent record of this row is college all - stars at chicago .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; opponent } ; college all - stars at chicago }, interpretation: select the row whose population ( 1 july 2005 est ) record of all rows is 2nd maximum . the country with flag record of this row is dominican republic .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 1 july 2005 est ) ; 2 } ; country with flag } ; dominican republic }, interpretation: select the row whose population ( 1 july 2005 est ) record of all rows is 2nd maximum . the country with flag record of this row is dominican republic .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; population ( 1 july 2005 est ) ; 2 } ; country with flag } ; dominican republic }, interpretation: select the rows whose national titles record is equal to 0 . there is only one such row in the table . the school record of this unqiue row is college of saint mary .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; national titles ; 0 } } ; eq { hop { filter_eq { all_rows ; national titles ; 0 } ; school } ; college of saint mary } }, interpretation: select the rows whose national titles record is equal to 0 . there is only one such row in the table . the school record of this unqiue row is college of saint mary .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; national titles ; 0 } } ; eq { hop { filter_eq { all_rows ; national titles ; 0 } ; school } ; college of saint mary } }, interpretation: for the class records of all rows , most of them fuzzily match to cat a .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; cat a }, interpretation: for the class records of all rows , most of them fuzzily match to cat a .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; class ; cat a }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is s otis bland .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; s otis bland }, interpretation: select the row whose first elected record of all rows is 2nd minimum . the incumbent record of this row is s otis bland .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; first elected ; 2 } ; incumbent } ; s otis bland }, interpretation: select the rows whose year record fuzzily matches to 2003 . take the start record of this row . select the rows whose year record fuzzily matches to 2004 . take the start record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 2003 } ; start } ; hop { filter_eq { all_rows ; year ; 2004 } ; start } }, interpretation: select the rows whose year record fuzzily matches to 2003 . take the start record of this row . select the rows whose year record fuzzily matches to 2004 . take the start record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; year ; 2003 } ; start } ; hop { filter_eq { all_rows ; year ; 2004 } ; start } }, interpretation: select the row whose location attendance record of all rows is 1st maximum . the team record of this row is knicks .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 1 } ; team } ; knicks }, interpretation: select the row whose location attendance record of all rows is 1st maximum . the team record of this row is knicks .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 1 } ; team } ; knicks }, interpretation: select the rows whose horse record fuzzily matches to colonel john . take the finished record of this row . select the rows whose horse record fuzzily matches to cowboy cal . take the finished record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; horse ; colonel john } ; finished } ; hop { filter_eq { all_rows ; horse ; cowboy cal } ; finished } }, interpretation: select the rows whose horse record fuzzily matches to colonel john . take the finished record of this row . select the rows whose horse record fuzzily matches to cowboy cal . take the finished record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; horse ; colonel john } ; finished } ; hop { filter_eq { all_rows ; horse ; cowboy cal } ; finished } }, interpretation: select the row whose erp w record of all rows is maximum . the call sign record of this row is k211ch .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; erp w } ; call sign } ; k211ch }, interpretation: select the row whose erp w record of all rows is maximum . the call sign record of this row is k211ch .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; erp w } ; call sign } ; k211ch }, interpretation: the average of the total record of all rows is 32366 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 32366 }, interpretation: the average of the total record of all rows is 32366 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; total } ; 32366 }, interpretation: select the rows whose result record fuzzily matches to injured . there is only one such row in the table . the week record of this unqiue row is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; injured } } ; eq { hop { filter_eq { all_rows ; result ; injured } ; week } ; 5 } }, interpretation: select the rows whose result record fuzzily matches to injured . there is only one such row in the table . the week record of this unqiue row is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; injured } } ; eq { hop { filter_eq { all_rows ; result ; injured } ; week } ; 5 } }, interpretation: select the rows whose location / attendance record fuzzily matches to the omni . among these rows , select the rows whose score record fuzzily matches to l . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location / attendance ; the omni } ; score ; l } } ; 6 }, interpretation: select the rows whose location / attendance record fuzzily matches to the omni . among these rows , select the rows whose score record fuzzily matches to l . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; location / attendance ; the omni } ; score ; l } } ; 6 }, interpretation: select the rows whose country of origin record fuzzily matches to colombia . there is only one such row in the table . the name / designation record of this unqiue row is saturn machine pistol .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country of origin ; colombia } } ; eq { hop { filter_eq { all_rows ; country of origin ; colombia } ; name / designation } ; saturn machine pistol } }, interpretation: select the rows whose country of origin record fuzzily matches to colombia . there is only one such row in the table . the name / designation record of this unqiue row is saturn machine pistol .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; country of origin ; colombia } } ; eq { hop { filter_eq { all_rows ; country of origin ; colombia } ; name / designation } ; saturn machine pistol } }, interpretation: select the rows whose tournament record fuzzily matches to fukuoka , japan . there is only one such row in the table . the date record of this unqiue row is may 11 , 2003 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; fukuoka , japan } } ; eq { hop { filter_eq { all_rows ; tournament ; fukuoka , japan } ; date } ; may 11 , 2003 } }, interpretation: select the rows whose tournament record fuzzily matches to fukuoka , japan . there is only one such row in the table . the date record of this unqiue row is may 11 , 2003 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; tournament ; fukuoka , japan } } ; eq { hop { filter_eq { all_rows ; tournament ; fukuoka , japan } ; date } ; may 11 , 2003 } }, interpretation: for the standard records of all rows , most of them fuzzily match to umts hspa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; standard ; umts hspa }, interpretation: for the standard records of all rows , most of them fuzzily match to umts hspa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; standard ; umts hspa }, interpretation: select the row whose 1st leg record of all rows is maximum . the team 1 record of this row is elan chalon .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 1st leg } ; team 1 } ; elan chalon }, interpretation: select the row whose 1st leg record of all rows is maximum . the team 1 record of this row is elan chalon .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; 1st leg } ; team 1 } ; elan chalon }, interpretation: the average of the points record of all rows is 2.5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 2.5 }, interpretation: the average of the points record of all rows is 2.5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 2.5 }, interpretation: select the rows whose college record fuzzily matches to iowa state . there is only one such row in the table . the name record of this unqiue row is clyde shugart .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; iowa state } } ; eq { hop { filter_eq { all_rows ; college ; iowa state } ; name } ; clyde shugart } }, interpretation: select the rows whose college record fuzzily matches to iowa state . there is only one such row in the table . the name record of this unqiue row is clyde shugart .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; college ; iowa state } } ; eq { hop { filter_eq { all_rows ; college ; iowa state } ; name } ; clyde shugart } }, interpretation: select the row whose goals record of all rows is 2nd maximum . the player record of this row is john cullen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goals ; 2 } ; player } ; john cullen }, interpretation: select the row whose goals record of all rows is 2nd maximum . the player record of this row is john cullen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; goals ; 2 } ; player } ; john cullen }, interpretation: select the rows whose home team record fuzzily matches to carlton . take the crowd record of this row . select the rows whose home team record fuzzily matches to collingwood . take the crowd record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; home team ; carlton } ; crowd } ; hop { filter_eq { all_rows ; home team ; collingwood } ; crowd } }, interpretation: select the rows whose home team record fuzzily matches to carlton . take the crowd record of this row . select the rows whose home team record fuzzily matches to collingwood . take the crowd record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; home team ; carlton } ; crowd } ; hop { filter_eq { all_rows ; home team ; collingwood } ; crowd } }, interpretation: select the rows whose total record is greater than 2 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; total ; 2 } } ; 3 }, interpretation: select the rows whose total record is greater than 2 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_greater { all_rows ; total ; 2 } } ; 3 }, interpretation: select the rows whose playoffs 1 record fuzzily matches to champions . there is only one such row in the table . the season record of this unqiue row is 2001 - 02 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; playoffs 1 ; champions } } ; eq { hop { filter_eq { all_rows ; playoffs 1 ; champions } ; season } ; 2001 - 02 } }, interpretation: select the rows whose playoffs 1 record fuzzily matches to champions . there is only one such row in the table . the season record of this unqiue row is 2001 - 02 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; playoffs 1 ; champions } } ; eq { hop { filter_eq { all_rows ; playoffs 1 ; champions } ; season } ; 2001 - 02 } }, interpretation: select the rows whose gold record is equal to 7 . there is only one such row in the table . the nation record of this unqiue row is brazil ( bra ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 7 } } ; eq { hop { filter_eq { all_rows ; gold ; 7 } ; nation } ; brazil ( bra ) } }, interpretation: select the rows whose gold record is equal to 7 . there is only one such row in the table . the nation record of this unqiue row is brazil ( bra ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; gold ; 7 } } ; eq { hop { filter_eq { all_rows ; gold ; 7 } ; nation } ; brazil ( bra ) } }, interpretation: the average of the attendance record of all rows is 56169 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 56169 }, interpretation: the average of the attendance record of all rows is 56169 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; attendance } ; 56169 }, interpretation: for the enrollment records of all rows , most of them are greater than 1000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; enrollment ; 1000 }, interpretation: select the rows whose surface record fuzzily matches to clay . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; clay } } ; 3 }, interpretation: select the rows whose surface record fuzzily matches to clay . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; surface ; clay } } ; 3 }, interpretation: select the row whose final round record of all rows is minimum . the city / state record of this row is texas .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; final round } ; city / state } ; texas }, interpretation: select the row whose final round record of all rows is minimum . the city / state record of this row is texas .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; final round } ; city / state } ; texas }, interpretation: select the row whose founded record of all rows is minimum . the club record of this row is fk vojvodina .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; founded } ; club } ; fk vojvodina }, interpretation: select the row whose founded record of all rows is minimum . the club record of this row is fk vojvodina .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmin { all_rows ; founded } ; club } ; fk vojvodina }, interpretation: the sum of the number in service record of all rows is 310 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; number in service } ; 310 }, interpretation: the sum of the number in service record of all rows is 310 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; number in service } ; 310 }, interpretation: select the rows whose drawn record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; drawn ; 0 } } ; 4 }, interpretation: select the rows whose drawn record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; drawn ; 0 } } ; 4 }, interpretation: select the rows whose time of day record fuzzily matches to afternoon . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time of day ; afternoon } } ; 3 }, interpretation: select the rows whose time of day record fuzzily matches to afternoon . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; time of day ; afternoon } } ; 3 }, interpretation: select the rows whose position record fuzzily matches to guard . the number of such rows is 7 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; guard } } ; 7 }, interpretation: select the rows whose position record fuzzily matches to guard . the number of such rows is 7 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; guard } } ; 7 }, interpretation: select the rows whose player record fuzzily matches to ben handlogten . take the years for jazz record of this row . select the rows whose player record fuzzily matches to bobby hansen . take the years for jazz record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; ben handlogten } ; years for jazz } ; hop { filter_eq { all_rows ; player ; bobby hansen } ; years for jazz } }, interpretation: select the rows whose player record fuzzily matches to ben handlogten . take the years for jazz record of this row . select the rows whose player record fuzzily matches to bobby hansen . take the years for jazz record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; player ; ben handlogten } ; years for jazz } ; hop { filter_eq { all_rows ; player ; bobby hansen } ; years for jazz } }, interpretation: select the rows whose events record is equal to 10 . there is only one such row in the table . the tournament record of this unqiue row is pga championship .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; events ; 10 } } ; eq { hop { filter_eq { all_rows ; events ; 10 } ; tournament } ; pga championship } }, interpretation: select the rows whose events record is equal to 10 . there is only one such row in the table . the tournament record of this unqiue row is pga championship .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; events ; 10 } } ; eq { hop { filter_eq { all_rows ; events ; 10 } ; tournament } ; pga championship } }, interpretation: select the rows whose result record is equal to 0 . there is only one such row in the table . the week record of this unqiue row is 15 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 0 } } ; eq { hop { filter_eq { all_rows ; result ; 0 } ; week } ; 15 } }, interpretation: select the rows whose result record is equal to 0 . there is only one such row in the table . the week record of this unqiue row is 15 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; 0 } } ; eq { hop { filter_eq { all_rows ; result ; 0 } ; week } ; 15 } }, interpretation: for the position records of all rows , most of them fuzzily match to defence .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; defence }, interpretation: for the position records of all rows , most of them fuzzily match to defence .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; position ; defence }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the date record of this row is january 12 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; date } ; january 12 }, interpretation: select the row whose location attendance record of all rows is 2nd maximum . the date record of this row is january 12 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; location attendance ; 2 } ; date } ; january 12 }, interpretation: select the rows whose reason for change record fuzzily matches to died . there is only one such row in the table . the vacator record of this unqiue row is thomas blount ( dr ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; died } } ; eq { hop { filter_eq { all_rows ; reason for change ; died } ; vacator } ; thomas blount ( dr ) } }, interpretation: select the rows whose reason for change record fuzzily matches to died . there is only one such row in the table . the vacator record of this unqiue row is thomas blount ( dr ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; reason for change ; died } } ; eq { hop { filter_eq { all_rows ; reason for change ; died } ; vacator } ; thomas blount ( dr ) } }, interpretation: the average of the crowd record of all rows is 25000 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 25000 }, interpretation: the average of the crowd record of all rows is 25000 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; crowd } ; 25000 }, interpretation: select the rows whose party record fuzzily matches to democratic . for the first elected records of these rows , most of them are less than 1970 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; party ; democratic } ; first elected ; 1970 }, interpretation: select the rows whose party record fuzzily matches to democratic . for the first elected records of these rows , most of them are less than 1970 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_less { filter_eq { all_rows ; party ; democratic } ; first elected ; 1970 }, interpretation: select the rows whose member countries record fuzzily matches to france . take the gdp per capita ( us ) record of this row . select the rows whose member countries record fuzzily matches to west germany . take the gdp per capita ( us ) record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; member countries ; france } ; gdp per capita ( us ) } ; hop { filter_eq { all_rows ; member countries ; west germany } ; gdp per capita ( us ) } }, interpretation: select the rows whose member countries record fuzzily matches to france . take the gdp per capita ( us ) record of this row . select the rows whose member countries record fuzzily matches to west germany . take the gdp per capita ( us ) record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; member countries ; france } ; gdp per capita ( us ) } ; hop { filter_eq { all_rows ; member countries ; west germany } ; gdp per capita ( us ) } }, interpretation: for the country records of all rows , most of them fuzzily match to united states .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country ; united states }, interpretation: select the rows whose name record fuzzily matches to telmatosaurus . take the location record of this row . select the rows whose name record fuzzily matches to brachiosaurus . take the location record of this row . the first record does not match to the second record . the location record of the first row is romania . the location record of the second row is usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { not_eq { hop { filter_eq { all_rows ; name ; telmatosaurus } ; location } ; hop { filter_eq { all_rows ; name ; brachiosaurus } ; location } } ; and { eq { hop { filter_eq { all_rows ; name ; telmatosaurus } ; location } ; romania } ; eq { hop { filter_eq { all_rows ; name ; brachiosaurus } ; location } ; usa } } }, interpretation: select the rows whose name record fuzzily matches to telmatosaurus . take the location record of this row . select the rows whose name record fuzzily matches to brachiosaurus . take the location record of this row . the first record does not match to the second record . the location record of the first row is romania . the location record of the second row is usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { not_eq { hop { filter_eq { all_rows ; name ; telmatosaurus } ; location } ; hop { filter_eq { all_rows ; name ; brachiosaurus } ; location } } ; and { eq { hop { filter_eq { all_rows ; name ; telmatosaurus } ; location } ; romania } ; eq { hop { filter_eq { all_rows ; name ; brachiosaurus } ; location } ; usa } } }, interpretation: select the row whose attendance record of all rows is maximum . the venue record of this row is gosford .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; venue } ; gosford }, interpretation: select the row whose attendance record of all rows is maximum . the venue record of this row is gosford .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; attendance } ; venue } ; gosford }, interpretation: select the row whose shot % record of all rows is 2nd maximum . the skip record of this row is david murdoch .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; shot % ; 2 } ; skip } ; david murdoch }, interpretation: select the row whose shot % record of all rows is 2nd maximum . the skip record of this row is david murdoch .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; shot % ; 2 } ; skip } ; david murdoch }, interpretation: select the row whose distance record of all rows is maximum . the stage record of this row is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; distance } ; stage } ; 2 }, interpretation: select the row whose distance record of all rows is maximum . the stage record of this row is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; distance } ; stage } ; 2 }, interpretation: select the row whose joined record of all rows is 3rd maximum . the school record of this row is south bend clay .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; joined ; 3 } ; school } ; south bend clay }, interpretation: select the row whose joined record of all rows is 3rd maximum . the school record of this row is south bend clay .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; joined ; 3 } ; school } ; south bend clay }, interpretation: for the starts records of all rows , most of them are greater than 33 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; starts ; 33 }, interpretation: for the starts records of all rows , most of them are greater than 33 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_greater { all_rows ; starts ; 33 }, interpretation: select the row whose length record of all rows is maximum . the name ( year commissioned ) record of this row is dampier to bunbury natural gas pipeline ( 1984 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; length } ; name ( year commissioned ) } ; dampier to bunbury natural gas pipeline ( 1984 ) }, interpretation: for the country of release records of all rows , most of them fuzzily match to usa .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country of release ; usa }, interpretation: for the country of release records of all rows , most of them fuzzily match to usa .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; country of release ; usa }, interpretation: select the row whose build date record of all rows is 3rd minimum . the loco name record of this row is hecate .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; build date ; 3 } ; loco name } ; hecate }, interpretation: select the row whose build date record of all rows is 3rd minimum . the loco name record of this row is hecate .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; build date ; 3 } ; loco name } ; hecate }, interpretation: the maximum score record of all rows is 9 - 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; 9 - 0 }, interpretation: the maximum score record of all rows is 9 - 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { max { all_rows ; score } ; 9 - 0 }, interpretation: select the rows whose school record fuzzily matches to merrillville . take the year joined record of this row . select the rows whose school record fuzzily matches to laporte . take the year joined record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; school ; merrillville } ; year joined } ; hop { filter_eq { all_rows ; school ; laporte } ; year joined } }, interpretation: select the rows whose school record fuzzily matches to merrillville . take the year joined record of this row . select the rows whose school record fuzzily matches to laporte . take the year joined record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; school ; merrillville } ; year joined } ; hop { filter_eq { all_rows ; school ; laporte } ; year joined } }, interpretation: select the rows whose no in series record is arbitrary . the number of such rows is 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; no in series } } ; 5 }, interpretation: select the rows whose no in series record is arbitrary . the number of such rows is 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_all { all_rows ; no in series } } ; 5 }, interpretation: select the rows whose score record fuzzily matches to 11:0 . there is only one such row in the table . the competition record of this unqiue row is 1996 asian championships .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 11:0 } } ; eq { hop { filter_eq { all_rows ; score ; 11:0 } ; competition } ; 1996 asian championships } }, interpretation: select the rows whose score record fuzzily matches to 11:0 . there is only one such row in the table . the competition record of this unqiue row is 1996 asian championships .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; score ; 11:0 } } ; eq { hop { filter_eq { all_rows ; score ; 11:0 } ; competition } ; 1996 asian championships } }, interpretation: select the row whose date record of all rows is maximum . the number & name record of this row is no 07005 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; number & name } ; no 07005 }, interpretation: select the row whose date record of all rows is maximum . the number & name record of this row is no 07005 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; date } ; number & name } ; no 07005 }, interpretation: select the row whose enrollment record of all rows is maximum . the location record of this row is cleveland , tennessee .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; location } ; cleveland , tennessee }, interpretation: select the row whose enrollment record of all rows is maximum . the location record of this row is cleveland , tennessee .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; enrollment } ; location } ; cleveland , tennessee }, interpretation: select the rows whose indigenous mining production 2006 record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; indigenous mining production 2006 ; 0 } } ; 4 }, interpretation: select the rows whose indigenous mining production 2006 record is equal to 0 . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; indigenous mining production 2006 ; 0 } } ; 4 }, interpretation: select the row whose size record of all rows is maximum . the school record of this row is mitchell .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; size } ; school } ; mitchell }, interpretation: select the row whose size record of all rows is maximum . the school record of this row is mitchell .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; size } ; school } ; mitchell }, interpretation: select the rows whose 7:30 record fuzzily matches to jeopardy! . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; 7:30 ; jeopardy! } }, interpretation: select the rows whose 7:30 record fuzzily matches to jeopardy! . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; 7:30 ; jeopardy! } }, interpretation: select the rows whose station record fuzzily matches to kami - mio . take the distance ( km ) record of this row . select the rows whose station record fuzzily matches to funao . take the distance ( km ) record of this row . the first record is greater than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; station ; kami - mio } ; distance ( km ) } ; hop { filter_eq { all_rows ; station ; funao } ; distance ( km ) } }, interpretation: select the rows whose station record fuzzily matches to kami - mio . take the distance ( km ) record of this row . select the rows whose station record fuzzily matches to funao . take the distance ( km ) record of this row . the first record is greater than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: greater { hop { filter_eq { all_rows ; station ; kami - mio } ; distance ( km ) } ; hop { filter_eq { all_rows ; station ; funao } ; distance ( km ) } }, interpretation: for the location records of all rows , most of them fuzzily match to reno , nevada .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; reno , nevada }, interpretation: for the location records of all rows , most of them fuzzily match to reno , nevada .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location ; reno , nevada }, interpretation: select the rows whose result record fuzzily matches to 5 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; 5 } } ; 2 }, interpretation: select the rows whose result record fuzzily matches to 5 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; result ; 5 } } ; 2 }, interpretation: for the points records of all rows , all of them are equal to 0 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; points ; 0 }, interpretation: for the points records of all rows , all of them are equal to 0 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; points ; 0 }, interpretation: select the rows whose content record fuzzily matches to programmi per adulti 24h / 24 . among these rows , select the rows whose television service record fuzzily matches to boy & boy . there is only one such row in the table . the n degree record of this unqiue row is 992 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; content ; programmi per adulti 24h / 24 } ; television service ; boy & boy } } ; eq { hop { filter_eq { filter_eq { all_rows ; content ; programmi per adulti 24h / 24 } ; television service ; boy & boy } ; n degree } ; 992 } }, interpretation: select the rows whose content record fuzzily matches to programmi per adulti 24h / 24 . among these rows , select the rows whose television service record fuzzily matches to boy & boy . there is only one such row in the table . the n degree record of this unqiue row is 992 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; content ; programmi per adulti 24h / 24 } ; television service ; boy & boy } } ; eq { hop { filter_eq { filter_eq { all_rows ; content ; programmi per adulti 24h / 24 } ; television service ; boy & boy } ; n degree } ; 992 } }, interpretation: select the row whose to par record of all rows is 2nd maximum . the player record of this row is mark hensby .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; to par ; 2 } ; player } ; mark hensby }, interpretation: select the row whose to par record of all rows is 2nd maximum . the player record of this row is mark hensby .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; to par ; 2 } ; player } ; mark hensby }, interpretation: select the row whose central rate record of all rows is maximum . the currency record of this row is danish krone .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; central rate } ; currency } ; danish krone }, interpretation: select the rows whose method record fuzzily matches to submission ( triangle choke ) . there is only one such row in the table . the res record of this unqiue row is loss .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; method ; submission ( triangle choke ) } } ; eq { hop { filter_eq { all_rows ; method ; submission ( triangle choke ) } ; res } ; loss } }, interpretation: select the rows whose method record fuzzily matches to submission ( triangle choke ) . there is only one such row in the table . the res record of this unqiue row is loss .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; method ; submission ( triangle choke ) } } ; eq { hop { filter_eq { all_rows ; method ; submission ( triangle choke ) } ; res } ; loss } }, interpretation: select the rows whose player record fuzzily matches to tony lema . take the to par record of this row . select the rows whose player record fuzzily matches to johnny miller ( a ) . take the to par record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; tony lema } ; to par } ; hop { filter_eq { all_rows ; player ; johnny miller ( a ) } ; to par } }, interpretation: select the rows whose player record fuzzily matches to tony lema . take the to par record of this row . select the rows whose player record fuzzily matches to johnny miller ( a ) . take the to par record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; player ; tony lema } ; to par } ; hop { filter_eq { all_rows ; player ; johnny miller ( a ) } ; to par } }, interpretation: select the rows whose high points record fuzzily matches to richard hamilton . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high points ; richard hamilton } } ; 4 }, interpretation: select the rows whose high points record fuzzily matches to richard hamilton . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; high points ; richard hamilton } } ; 4 }, interpretation: select the row whose weeks at 1 record of all rows is maximum . the artist record of this row is antonn , kareen .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; weeks at 1 } ; artist } ; antonn , kareen }, interpretation: select the row whose weeks at 1 record of all rows is maximum . the artist record of this row is antonn , kareen .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; weeks at 1 } ; artist } ; antonn , kareen }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose total record is equal to 300 . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; united states } ; total ; 300 } } ; 2 }, interpretation: select the rows whose country record fuzzily matches to united states . among these rows , select the rows whose total record is equal to 300 . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { filter_eq { all_rows ; country ; united states } ; total ; 300 } } ; 2 }, interpretation: select the rows whose res record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is gia chirragishvili .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; res ; draw } } ; eq { hop { filter_eq { all_rows ; res ; draw } ; opponent } ; gia chirragishvili } }, interpretation: select the rows whose res record fuzzily matches to draw . there is only one such row in the table . the opponent record of this unqiue row is gia chirragishvili .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; res ; draw } } ; eq { hop { filter_eq { all_rows ; res ; draw } ; opponent } ; gia chirragishvili } }, interpretation: select the rows whose year record is equal to 2008 . there is only one such row in the table . the tournament record of this unqiue row is vietnam open grand prix .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2008 } } ; eq { hop { filter_eq { all_rows ; year ; 2008 } ; tournament } ; vietnam open grand prix } }, interpretation: select the rows whose year record is equal to 2008 . there is only one such row in the table . the tournament record of this unqiue row is vietnam open grand prix .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; year ; 2008 } } ; eq { hop { filter_eq { all_rows ; year ; 2008 } ; tournament } ; vietnam open grand prix } }, interpretation: the sum of the population ( 2008 ) record of all rows is 7062211 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population ( 2008 ) } ; 7062211 }, interpretation: the sum of the population ( 2008 ) record of all rows is 7062211 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { sum { all_rows ; population ( 2008 ) } ; 7062211 }, interpretation: select the row whose ratings ( millions ) record of all rows is 2nd minimum . the episode record of this row is episode 5 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; ratings ( millions ) ; 2 } ; episode } ; episode 5 }, interpretation: select the row whose ratings ( millions ) record of all rows is 2nd minimum . the episode record of this row is episode 5 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; ratings ( millions ) ; 2 } ; episode } ; episode 5 }, interpretation: select the rows whose nationality record fuzzily matches to sweden . there is only one such row in the table . the player record of this unqiue row is jacob markstrom .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; sweden } } ; eq { hop { filter_eq { all_rows ; nationality ; sweden } ; player } ; jacob markstrom } }, interpretation: select the rows whose nationality record fuzzily matches to sweden . there is only one such row in the table . the player record of this unqiue row is jacob markstrom .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; nationality ; sweden } } ; eq { hop { filter_eq { all_rows ; nationality ; sweden } ; player } ; jacob markstrom } }, interpretation: for the date records of all rows , all of them fuzzily match to 28 may 1927 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 28 may 1927 }, interpretation: for the date records of all rows , all of them fuzzily match to 28 may 1927 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; 28 may 1927 }, interpretation: select the rows whose years for jazz record fuzzily matches to present . there is only one such row in the table . the player record of this unqiue row is derrick favors .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; years for jazz ; present } } ; eq { hop { filter_eq { all_rows ; years for jazz ; present } ; player } ; derrick favors } }, interpretation: select the rows whose years for jazz record fuzzily matches to present . there is only one such row in the table . the player record of this unqiue row is derrick favors .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; years for jazz ; present } } ; eq { hop { filter_eq { all_rows ; years for jazz ; present } ; player } ; derrick favors } }, interpretation: select the row whose original air date record of all rows is maximum . the title record of this row is the enforcers .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; original air date } ; title } ; the enforcers }, interpretation: select the row whose original air date record of all rows is maximum . the title record of this row is the enforcers .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { argmax { all_rows ; original air date } ; title } ; the enforcers }, interpretation: select the rows whose position record fuzzily matches to defensive back . the number of such rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; defensive back } } ; 2 }, interpretation: select the rows whose position record fuzzily matches to defensive back . the number of such rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; position ; defensive back } } ; 2 }, interpretation: for the date records of all rows , all of them fuzzily match to february .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_eq { all_rows ; date ; february }, interpretation: for the replaced by records of all rows , none of them is equal to - .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: all_not_eq { all_rows ; replaced by ; - }, interpretation: for the replaced by records of all rows , none of them is equal to - .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: all_not_eq { all_rows ; replaced by ; - }, interpretation: select the rows whose constructor record fuzzily matches to cooper-maserati . the average of the laps record of these rows is 64 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; constructor ; cooper-maserati } ; laps } ; 64 }, interpretation: select the rows whose constructor record fuzzily matches to cooper-maserati . the average of the laps record of these rows is 64 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { filter_eq { all_rows ; constructor ; cooper-maserati } ; laps } ; 64 }, interpretation: the average of the points record of all rows is 2 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 2 }, interpretation: the average of the points record of all rows is 2 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; points } ; 2 }, interpretation: select the rows whose chassis record fuzzily matches to cooper t53 . there is only one such row in the table . the year record of this unqiue row is 1961 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; cooper t53 } } ; eq { hop { filter_eq { all_rows ; chassis ; cooper t53 } ; year } ; 1961 } }, interpretation: select the rows whose chassis record fuzzily matches to cooper t53 . there is only one such row in the table . the year record of this unqiue row is 1961 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; chassis ; cooper t53 } } ; eq { hop { filter_eq { all_rows ; chassis ; cooper t53 } ; year } ; 1961 } }, interpretation: select the rows whose first elected record is equal to 1882 . the number of such rows is 3 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1882 } } ; 3 }, interpretation: select the rows whose first elected record is equal to 1882 . the number of such rows is 3 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; first elected ; 1882 } } ; 3 }, interpretation: select the rows whose class record fuzzily matches to a . there is only one such row in the table . the city of license record of this unqiue row is kingston .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; class ; a } } ; eq { hop { filter_eq { all_rows ; class ; a } ; city of license } ; kingston } }, interpretation: select the rows whose class record fuzzily matches to a . there is only one such row in the table . the city of license record of this unqiue row is kingston .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; class ; a } } ; eq { hop { filter_eq { all_rows ; class ; a } ; city of license } ; kingston } }, interpretation: select the rows whose location record fuzzily matches to borisov . there is only one such row in the table . the team record of this unqiue row is bate .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; borisov } } ; eq { hop { filter_eq { all_rows ; location ; borisov } ; team } ; bate } }, interpretation: select the rows whose location record fuzzily matches to borisov . there is only one such row in the table . the team record of this unqiue row is bate .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; location ; borisov } } ; eq { hop { filter_eq { all_rows ; location ; borisov } ; team } ; bate } }, interpretation: for the location attendance records of all rows , most of them fuzzily match to oracle arena .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location attendance ; oracle arena }, interpretation: for the location attendance records of all rows , most of them fuzzily match to oracle arena .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: most_eq { all_rows ; location attendance ; oracle arena }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the date record of this row is october 31 , 1999 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; date } ; october 31 , 1999 }, interpretation: select the row whose attendance record of all rows is 3rd maximum . the date record of this row is october 31 , 1999 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; date } ; october 31 , 1999 }, interpretation: select the rows whose nation record fuzzily matches to serbia . there is only one such row in the table .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; nation ; serbia } }, interpretation: select the rows whose nation record fuzzily matches to serbia . there is only one such row in the table .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: only { filter_eq { all_rows ; nation ; serbia } }, interpretation: select the rows whose result record fuzzily matches to retired democratic hold . there is only one such row in the table . the incumbent record of this unqiue row is william y humphreys .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired democratic hold } } ; eq { hop { filter_eq { all_rows ; result ; retired democratic hold } ; incumbent } ; william y humphreys } }, interpretation: select the rows whose result record fuzzily matches to retired democratic hold . there is only one such row in the table . the incumbent record of this unqiue row is william y humphreys .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { all_rows ; result ; retired democratic hold } } ; eq { hop { filter_eq { all_rows ; result ; retired democratic hold } ; incumbent } ; william y humphreys } }, interpretation: select the rows whose original air date record fuzzily matches to august . among these rows , select the rows whose written by record fuzzily matches to dana calvo . there is only one such row in the table . the title record of this unqiue row is houses of the holy .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; original air date ; august } ; written by ; dana calvo } } ; eq { hop { filter_eq { filter_eq { all_rows ; original air date ; august } ; written by ; dana calvo } ; title } ; houses of the holy } }, interpretation: select the rows whose original air date record fuzzily matches to august . among these rows , select the rows whose written by record fuzzily matches to dana calvo . there is only one such row in the table . the title record of this unqiue row is houses of the holy .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { only { filter_eq { filter_eq { all_rows ; original air date ; august } ; written by ; dana calvo } } ; eq { hop { filter_eq { filter_eq { all_rows ; original air date ; august } ; written by ; dana calvo } ; title } ; houses of the holy } }, interpretation: select the rows whose tournament record fuzzily matches to australia . the number of such rows is 6 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; australia } } ; 6 }, interpretation: select the rows whose tournament record fuzzily matches to australia . the number of such rows is 6 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; tournament ; australia } } ; 6 }, interpretation: select the rows whose incumbent record fuzzily matches to horace f page . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to campbell p berry . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; horace f page } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; campbell p berry } ; first elected } }, interpretation: select the rows whose incumbent record fuzzily matches to horace f page . take the first elected record of this row . select the rows whose incumbent record fuzzily matches to campbell p berry . take the first elected record of this row . the first record is less than the second record .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: less { hop { filter_eq { all_rows ; incumbent ; horace f page } ; first elected } ; hop { filter_eq { all_rows ; incumbent ; campbell p berry } ; first elected } }, interpretation: the 2nd minimum years for grizzlies record of all rows is 1997 - 1999 . the player record of the row with 2nd minimum years for grizzlies record is michael smith .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; years for grizzlies ; 2 } ; 1997 - 1999 } ; eq { hop { nth_argmin { all_rows ; years for grizzlies ; 2 } ; player } ; michael smith } }, interpretation: the 2nd minimum years for grizzlies record of all rows is 1997 - 1999 . the player record of the row with 2nd minimum years for grizzlies record is michael smith .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: and { eq { nth_min { all_rows ; years for grizzlies ; 2 } ; 1997 - 1999 } ; eq { hop { nth_argmin { all_rows ; years for grizzlies ; 2 } ; player } ; michael smith } }, interpretation: select the rows whose release record fuzzily matches to classic electro . the number of such rows is 4 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; release ; classic electro } } ; 4 }, interpretation: select the rows whose release record fuzzily matches to classic electro . the number of such rows is 4 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { count { filter_eq { all_rows ; release ; classic electro } } ; 4 }, interpretation: select the row whose date record of all rows is 7th minimum . the venue record of this row is istanbul , turkey .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 7 } ; venue } ; istanbul , turkey }, interpretation: select the row whose date record of all rows is 7th minimum . the venue record of this row is istanbul , turkey .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: eq { hop { nth_argmin { all_rows ; date ; 7 } ; venue } ; istanbul , turkey }, interpretation: the average of the away team score record of all rows is 10.55 ( 74 ) .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; away team score } ; 10.55 ( 74 ) }, interpretation: the average of the away team score record of all rows is 10.55 ( 74 ) .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; away team score } ; 10.55 ( 74 ) }, interpretation: the average of the enrollment record of all rows is 4067 .",
            "output": [
                "no"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 4067 }, interpretation: the average of the enrollment record of all rows is 4067 .",
            "output": [
                "yes"
            ]
        },
        {
            "input": "Command: round_eq { avg { all_rows ; enrollment } ; 4067 }, interpretation: the average of the drawn record of all rows is 7.9 .",
            "output": [
                "no"
            ]
        }
    ]
}
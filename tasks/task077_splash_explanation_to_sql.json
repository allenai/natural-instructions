{
    "Contributors": [
        "Kirby Kuznia"
    ],
    "Source": [
        "splash"
    ],
    "URL": [
        "https://arxiv.org/pdf/2005.02539.pdf"
    ],
    "Categories": [
        "Text to Code"
    ],
    "Reasoning": [],
    "Definition": [
        "In this task you are expected to provide an SQL statement from an english description of what that SQL statement does. The description may include multiple steps but you should only ouput one SQL statement that accomplishes every step. An SQL query works by selecting data from a table where certain conditions apply. A table contains columns where every row in that table must have a value for each column. Every table has a primary key that uniquely identifies each row, usually an id. To choose which columns are returned you specify that after the \"SELECT\" statement. Next, you use a \"FROM\" statement to specify what tables you want to select the data from. When you specify a table you can rename it with the \"AS\" statement. You can reference that table by whatever name follows the \"AS\" statement. If you want to select data from multiple tables you need to use the \"JOIN\" statement. This will join the tables together by pairing a row in one table with every row in the other table (Cartesian Product). To limit the number of rows returned you should use the \"ON\" statement. This will only return rows where the condition specified after the statement is true, this is usually an equals operator with primary keys. You can also use the \"WHERE\" statement to specify that only rows with column values statisfying a certain condition, should be returned. The \"GROUP BY\" statement will group rows together that have equal column values for whatever columns follows the statement. The \"HAVING\" statement will return groups that statisfy whatever condition follows the statement. Any column(s) being returned from grouped rows must either be an aggregate function, (AVG, MAX, COUNT, SUM, ...) of a column, or the column(s) that the data was grouped by. To sort the returned data you can use the \"ORDER BY\" command which will order the data by whatever aggregate function or column follows the statement. The \"DESC\" statement will sort in descending order and the \"ASC\" statement will sort in ascending order. Finally, you can use the \"LIMIT\" statement to return a certain number of rows. When \"*\" is used in an SQL statement every column is returned. For example, SELECT * FROM table WHERE attribute = 1, will select every column from rows with the attribute column equal to 1."
    ],
    "Input_language": [
        "English"
    ],
    "Output_language": [
        "English"
    ],
    "Instruction_language": [
        "English"
    ],
    "Domains": [
        "SQL"
    ],
    "Positive Examples": [
        {
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find each value of director in the results of step 1 along with the summation of stars of the corresponding rows to each value",
            "output": "SELECT T1.title , Sum ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
            "explanation": "This SQL statement uses a \"JOIN\" statement to combine the \"Movie\" and \"Rating\" table then find the corresponding rows by comparing the movie id, which accomplishes step 1. Finally the SQL statement groups the values by each director and returns the title of each movie and the sum of all the stars, which accomplishes step 2. This is a good example."
        },
        {
            "input": "find the first_name, last_name of Customers table for which email_address equals Lockmanfurt",
            "output": "SELECT first_name , last_name FROM Customers WHERE email_address = Lockmanfurt",
            "explanation": "This SQL statement selects the first and last name of every customer with an email address equal to Lockmanfurt. This is a good example."
        }
    ],
    "Negative Examples": [
        {
            "input": "Step 1: For each row in Apartments table, find the corresponding rows in Apartment_Bookings table.\nStep 2: find the average bathroom_count in the results of step 1 whose booking_status_code equals Provisional",
            "output": "SELECT Avg ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id",
            "explanation": "The SQL statement did not check for rows where the \"booking_status_code\" was equal to \"Provisional\""
        },
        {
            "input": "find each value of product_name in Products table along with the summation of the corresponding rows to each value",
            "output": "SELECT product_name , Sum ( * ) FROM Products",
            "explanation": "This SQL statement does not group the product by the produce name and just returns every row. This is a bad example."
        }
    ],
    "Instances": [
        {
            "id": "task077-081263a282794e7cb4deba9eb66516c5",
            "input": "Step 1: For each row in Apartments table, find the corresponding rows in Apartment_Bookings table.\nStep 2: find the average bathroom_count in the results of step 1 whose booking_status_code equals Provisional",
            "output": [
                "SELECT Avg ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = \"Provisional\""
            ]
        },
        {
            "id": "task077-4cc47f5c5a1d4b46a9eee99ccfadc401",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 1996 and csu_fees's Year equals 1996",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 1996 AND T2.Year = 1996"
            ]
        },
        {
            "id": "task077-f424f4bde946415ba0f36bfd62032f4a",
            "input": "find each value of product_name in Products table along with the summation of the corresponding rows to each value",
            "output": [
                "SELECT product_name , Sum ( * ) FROM Products GROUP BY product_name"
            ]
        },
        {
            "id": "task077-3680b027a649448bb060cf0365906458",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Student_Addresses table.\nStep 2: find the average monthly_rental of each value of student_id in the results of step 1.\nStep 3: find student_id, city of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.student_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.student_id ORDER BY Avg ( T2.monthly_rental ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-61c440b5ce6545deba9d5b43f30f3a0b",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose apt_number equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = \"Columbus Square\" AND T1.building_short_name = \"Normandie Court\""
            ]
        },
        {
            "id": "task077-1f93d136c8374c9586559a6948dbf490",
            "input": "Step 1: find the number of rows of each value of facility_code in Apartment_Facilities table.\nStep 2: find facility_code in Apartment_Facilities table whose corresponding value in step 1 is greater than 4",
            "output": [
                "SELECT facility_code FROM Apartment_Facilities GROUP BY facility_code HAVING Count ( * ) > 4"
            ]
        },
        {
            "id": "task077-2c41bac62837450eaa41c8955aa01598",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find the number of rows in the results of step 1 whose Campuses's Campus equals Long Beach State University and faculty's Year equals 2002",
            "output": [
                "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = \"Long Beach State University\" AND T2.Year = 2002"
            ]
        },
        {
            "id": "task077-e8e59c08a2c34ff7a49d4bd5a4c252a3",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find CampusFee of the results of step 1 whose discipline_enrollments's Year equals 1996 and discipline_enrollments's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Year = \"San Jose State University\" AND T3.Year = 1996"
            ]
        },
        {
            "id": "task077-c719fe8674ee4b27823be231b5651267",
            "input": "Step 1: find the number of rows of each value of city in Addresses table.\nStep 2: find city of Addresses table with largest value in the results of step 1",
            "output": [
                "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-08309803267e4d29b1ed7c7693e26922",
            "input": "Step 1: find the average stars in Rating table.\nStep 2: For each row in Movie table, find the corresponding rows in Rating table.\nStep 3: find title, director in the results of step 2 whose stars greater than the results of step 1",
            "output": [
                "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars > ( SELECT Avg ( T2.stars ) FROM Rating AS T2 )"
            ]
        },
        {
            "id": "task077-419692cc09d04d6490251308c17c0e01",
            "input": "Step 1: For each row in Orders table, find the corresponding rows in Invoices table.\nStep 2: find date_order_placed, Invoices's order_id of the results of step 1",
            "output": [
                "SELECT T1.date_order_placed , T2.order_id FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id"
            ]
        },
        {
            "id": "task077-bb2acaf0de7d47c480bb48b709fc955d",
            "input": "find the summation of amount_outstanding in Customers table whose first_name equals Carole and last_name equals Bernhard",
            "output": [
                "SELECT Sum ( amount_outstanding ) FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\""
            ]
        },
        {
            "id": "task077-47fe7639eff34eac847eaabb78b7e150",
            "input": "Step 1: find the rows in faculty table whose Year equals 2003.\nStep 2: find each value of Faculty in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT Faculty FROM faculty WHERE Year = 2003 GROUP BY Campus ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f008f9c05d5f4b64841eb48b9bd24c83",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find each value of director in the results of step 1 along with the average stars of the corresponding rows to each value",
            "output": [
                "SELECT T1.title , Avg ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director"
            ]
        },
        {
            "id": "task077-e243bf2e0ca44dc9ba065195600aa38d",
            "input": "find the number of rows in faculty table whose Year equals 2002 and Year equals Long Beach State University",
            "output": [
                "SELECT Count ( * ) FROM faculty WHERE Year = \"Long Beach State University\" AND Year = 2002"
            ]
        },
        {
            "id": "task077-9d4efe07605c45b3baec8c719188a757",
            "input": "Step 1: find the number of rows of each value of product in product table.\nStep 2: find product of product table with largest value in the results of step 1",
            "output": [
                "SELECT product FROM product GROUP BY product ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c4a063910aa940ee91038b5661f324ae",
            "input": "find the number of rows in Customers table whose first_name equals Rylan and last_name equals Goodwin",
            "output": [
                "SELECT Count ( * ) FROM Customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\""
            ]
        },
        {
            "id": "task077-af65bc4f749545a996e6630b8270fe71",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find Campuses's Campus of the results of step 1 whose County equals Los Angeles and Campuses's Year greater than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T1.Year > 1950 AND T2.Year > 2002"
            ]
        },
        {
            "id": "task077-bd780bc906644b738472f6ae58b8d59b",
            "input": "find the city of Addresses table for which line_1_number_building equals Janessa",
            "output": [
                "SELECT city FROM Addresses WHERE line_1_number_building = \"Janessa\""
            ]
        },
        {
            "id": "task077-617e7e72f94e47c4a7ae2dc919255cd1",
            "input": "Step 1: find the average transaction_amount in Financial_Transactions table.\nStep 2: find the account_id of Financial_Transactions table whose transaction_amount greater than the results of step 1",
            "output": [
                "SELECT account_id FROM Financial_Transactions WHERE transaction_amount > ( SELECT Avg ( transaction_amount ) FROM Financial_Transactions )"
            ]
        },
        {
            "id": "task077-4ce581372079456a8037a296806bcd03",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find first_name, last_name in Customers table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT first_name , last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-1825d3d4f23a49b3a4045ca579dda3dd",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 whose stars equals null",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = \"null\""
            ]
        },
        {
            "id": "task077-787995944e274d91b466e41ebb54fea0",
            "input": "find the Name of people table",
            "output": [
                "SELECT Name FROM people"
            ]
        },
        {
            "id": "task077-db5d58f7849b43faa80047cd5920b5eb",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_full_name equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name = \"Columbus Square\" AND T1.building_short_name = \"Normandie Court\""
            ]
        },
        {
            "id": "task077-773da15bb5154538b6ed1dfb50d77627",
            "input": "find the order_id, date_order_placed, order_details of Orders table",
            "output": [
                "SELECT order_id , date_order_placed , order_details FROM Orders"
            ]
        },
        {
            "id": "task077-5e6a9d88dac248b18d0fba05219fedf6",
            "input": "find without repetition the District_name of district table ordered descending by City_Population",
            "output": [
                "SELECT DISTINCT District_name FROM district ORDER BY City_Population Desc"
            ]
        },
        {
            "id": "task077-6ce64a0647374ff7a3093747a08631aa",
            "input": "find each value of product_id in Products table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT product_id , Count ( * ) FROM Products GROUP BY product_id"
            ]
        },
        {
            "id": "task077-fb2405abc2ad419f92f2642c498940de",
            "input": "find each value of apt_number in Apartments table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT apt_number , Count ( * ) FROM Apartments GROUP BY apt_number"
            ]
        },
        {
            "id": "task077-abb776a10a3d4bfda1a397b87f3de191",
            "input": "Step 1: For each row in Guests table, find the corresponding rows in Apartment_Bookings table.\nStep 2: find booking_start_date, booking_end_date of the results of step 1 whose gender_code equals Female",
            "output": [
                "SELECT T2.booking_start_date , T2.booking_end_date FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T1.gender_code = \"Female\""
            ]
        },
        {
            "id": "task077-8f7123bd0a9a48389e79167888f57494",
            "input": "Step 1: For each row in Teachers table, find the corresponding rows in Assessment_Notes table.\nStep 2: find notes_id of the results of step 1 whose last_name equals Schuster",
            "output": [
                "SELECT T2.notes_id FROM Teachers AS T1 JOIN Assessment_Notes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.last_name = \"Schuster\""
            ]
        },
        {
            "id": "task077-b557006d8b654ac2a86ea4806cac02e4",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in degrees table and in discipline_enrollments table.\nStep 2: find the average Degrees of each value of discipline_enrollments's Year in the results of step 1.\nStep 3: find discipline_enrollments's Year of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.Year FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus GROUP BY T3.Year ORDER BY Avg ( T2.Degrees ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ca7caf7cee254b64b77edb46f6d87132",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in discipline_enrollments table and in faculty table.\nStep 2: find faculty's Year of the results of step 1 whose Undergraduate greater than 400.\nStep 3: find the discipline_enrollments's Campus of discipline_enrollments table for which Discipline greater than 1956.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T3.Year FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Undergraduate > 400 INTERSECT SELECT T2.Campus FROM discipline_enrollments AS T2 WHERE T2.Discipline > 1956"
            ]
        },
        {
            "id": "task077-8945581983e14ae0bd5597f18ef27bb0",
            "input": "find the average bathroom_count in Apartments table",
            "output": [
                "SELECT Avg ( bathroom_count ) FROM Apartments"
            ]
        },
        {
            "id": "task077-73305c9522434fa3bbc38d8d7b439d85",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find County of the results of step 1 whose County equals Los Angeles and Campuses's Year greater than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT T1.County FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T1.Year > 1950 AND T2.Year > 2002"
            ]
        },
        {
            "id": "task077-70eb96e9bef648a1b3d45b8059c0d20f",
            "input": "find the rows of Behavior_Incident table ordered ascending by date_incident_start",
            "output": [
                "SELECT * FROM Behavior_Incident ORDER BY date_incident_start Asc"
            ]
        },
        {
            "id": "task077-c4c29612770541758649a44b12431e79",
            "input": "find the Id of Campuses table for which County equals Los Angeles",
            "output": [
                "SELECT Id FROM Campuses WHERE County = \"Los Angeles\""
            ]
        },
        {
            "id": "task077-ae8895f4e6ba4c1e926bc8432d6b842a",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find title of the results of step 1 whose stars contains 4 or stars contains 3",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars LIKE 3 OR T2.stars LIKE 4"
            ]
        },
        {
            "id": "task077-be954f217fde4c888f41205ec7ee0a4c",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find CampusFee of the results of step 1 whose csu_fees's Year equals 1996 and discipline_enrollments's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 1996 AND T3.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-fa395396e55f40d2a1833539badc0453",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find faculty's Campus of the results of step 1 whose faculty's Year greater than or equals 1935 and csu_fees's Year less than or equals 1939",
            "output": [
                "SELECT T3.Campus FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year > = 1935 AND T2.Year < = 1939"
            ]
        },
        {
            "id": "task077-89a2a67721104e73a2dc56a37c97751f",
            "input": "find the average Clean_Jerk in body_builder table",
            "output": [
                "SELECT Avg ( Clean_Jerk ) FROM body_builder"
            ]
        },
        {
            "id": "task077-53e7d3c2787c4bc2a519a662dc5de684",
            "input": "Step 1: find the number of rows of each value of building_description in Apartment_Buildings table.\nStep 2: find building_description in Apartment_Buildings table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT building_description FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-abb64851385140178515d2ed07725f2d",
            "input": "Step 1: For each row in people table, find the corresponding rows in body_builder table.\nStep 2: find the summation of Total in the results of step 1 whose Name contains January",
            "output": [
                "SELECT Sum ( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name LIKE \"January\""
            ]
        },
        {
            "id": "task077-30d96a2e27de4e8d9cdff0d825e6a907",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find CampusFee of the results of step 1 whose Undergraduate equals 1996 and csu_fees's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Undergraduate = 1996 AND T2.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-181e255a5ccc4e95819561f9c5652f7b",
            "input": "Step 1: For each row in Apartments table, find the corresponding rows in Apartment_Bookings table.\nStep 2: find apt_number of the results of step 1 whose booking_status_code equals 0.\nStep 3: find apt_number of the results of step 1 whose booking_status_code equals 1.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = 1"
            ]
        },
        {
            "id": "task077-76553eee7e564f3b9f57a157f69161df",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find CampusFee of the results of step 1 whose faculty's Year equals 1996 and faculty's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = \"San Jose State University\" AND T3.Year = 1996"
            ]
        },
        {
            "id": "task077-f64fc1c4a86f4d00a983d62867406407",
            "input": "find the Accreditation_type, Company_name of phone table for which Accreditation_type contains Full",
            "output": [
                "SELECT Accreditation_type , Company_name FROM phone WHERE Accreditation_type LIKE \"Full\""
            ]
        },
        {
            "id": "task077-a363777742d948e18214e44ac6f38b06",
            "input": "Step 1: find the number of rows of each value of apt_type_code in Apartments table.\nStep 2: find apt_type_code in Apartments table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-fa7e1fa7d5ef47e3a783600407b5c35f",
            "input": "Step 1: find the Hardware_colours of screen_mode table.\nStep 2: find the number of rows in screen_mode table whose Hardware_colours not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM screen_mode WHERE Hardware_colours NOT IN ( SELECT Hardware_colours FROM screen_mode )"
            ]
        },
        {
            "id": "task077-39c92a6d106248a4a98cbc0d4dfbe958",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find stars of the results of step 1 whose name contains Mike",
            "output": [
                "SELECT T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T1.name LIKE \"Mike\""
            ]
        },
        {
            "id": "task077-d40b9bfb89fb430d913e6059eb75adea",
            "input": "Step 1: find the director of Movie table for which title equals null.\nStep 2: find the name of Reviewer table whose rID not one of the results of step 1",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 WHERE T1.rID NOT IN ( SELECT T2.director FROM Movie AS T2 WHERE T2.title = \"null\" )"
            ]
        },
        {
            "id": "task077-c345ccf9a916489faf70f13c50117f14",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Hardware_Model_name of the results of step 1 whose Type equals Graphics and Type equals Nokia Corporation",
            "output": [
                "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Nokia Corporation\" AND T1.Type = \"Graphics\""
            ]
        },
        {
            "id": "task077-d0c6c09830584f46a4d8f25c53f8c3ca",
            "input": "Step 1: find the number of rows of each value of apt_id in Apartment_Bookings table.\nStep 2: find booking_start_date, booking_end_date in Apartment_Bookings table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT booking_start_date , booking_end_date FROM Apartment_Bookings GROUP BY apt_id HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-a99cbe346a9940cb8c5568c0abd69ff4",
            "input": "Step 1: For each row in Invoices table, find corresponding rows in Orders table and in Financial_Transactions table.\nStep 2: find the number of rows of each value of Financial_Transactions's invoice_number in the results of step 1.\nStep 3: find Financial_Transactions's invoice_number, date_order_placed of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.invoice_number , T1.date_order_placed FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id JOIN Financial_Transactions AS T3 ON T2.invoice_number = T3.invoice_number GROUP BY T3.invoice_number ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b56e4c2259a84eda8f96011a07ae87ee",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find name, title, ratingDate of the results of step 1 ordered ascending by stars",
            "output": [
                "SELECT T2.name , T1.title , T3.ratingDate FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc"
            ]
        },
        {
            "id": "task077-9aabc7eeb3194520a6a86e30ee13e2d3",
            "input": "find the rows of Ref_Incident_Type table ordered ascending by incident_type_description",
            "output": [
                "SELECT * FROM Ref_Incident_Type ORDER BY incident_type_description Asc"
            ]
        },
        {
            "id": "task077-35dcad7bb42a4dc3b926aa7aa2ef5a68",
            "input": "find without repetition the product_color of Products table",
            "output": [
                "SELECT DISTINCT product_color FROM Products"
            ]
        },
        {
            "id": "task077-9b975ed576aa4ebdbd4956199d7fc52b",
            "input": "find the number of rows in Accounts table whose account_name equals 337",
            "output": [
                "SELECT Count ( * ) FROM Accounts WHERE account_name = 337"
            ]
        },
        {
            "id": "task077-708bf4b8bd2742078376ca02b2f6be3b",
            "input": "find the Clean_Jerk, Total of body_builder table with largest value of Total",
            "output": [
                "SELECT Clean_Jerk , Total FROM body_builder ORDER BY Total Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7fe245fc89004d82b4be50180c977fc4",
            "input": "Step 1: for each value of city in Addresses table, calculate number of rows.\nStep 2: show each value of city in Addresses table along with the corresponding number of rows with largest value in the results of step 1",
            "output": [
                "SELECT city , Count ( * ) FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f1ccaf8302ee47b18d7267c79bbe79b2",
            "input": "find the account_id, date_account_opened, other_account_details of Accounts table",
            "output": [
                "SELECT account_id , date_account_opened , other_account_details FROM Accounts"
            ]
        },
        {
            "id": "task077-226dcee9068b48e08dfa78e3d2392dbf",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find the average stars of each value of Rating's mID in the results of step 1.\nStep 3: find title in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T2.mID HAVING Avg ( T2.stars ) > = 2"
            ]
        },
        {
            "id": "task077-e43ee44edb5747e1a41c3526ac7dbcaf",
            "input": "Step 1: find the number of rows of each value of building_description in Apartment_Buildings table.\nStep 2: find building_address in Apartment_Buildings table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT building_address FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-765bdd67e59349a59d429236a4eb5708",
            "input": "Step 1: find the email_address of Students table.\nStep 2: find the email_address of Teachers table.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2"
            ]
        },
        {
            "id": "task077-0cf4db54ae164f7c977ab67bce629fde",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_description equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_description = \"Columbus Square\" AND T1.building_short_name = \"Normandie Court\""
            ]
        },
        {
            "id": "task077-67939e7f05fd45d1a7750106c9e6b9be",
            "input": "Step 1: find the product of product table.\nStep 2: find the product of product table for which dpi less than or equals 1.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT product FROM product EXCEPT SELECT product FROM product WHERE dpi < = 1"
            ]
        },
        {
            "id": "task077-d0106bab9dc44ffa978dbf0761470d9e",
            "input": "find the Name of people table with largest value of Weight",
            "output": [
                "SELECT Name FROM people ORDER BY Weight Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2d0566273c334334b95c11d863201079",
            "input": "Step 1: find the number of rows of each value of apt_number in Apartments table.\nStep 2: find apt_number of Apartments table with largest value in the results of step 1",
            "output": [
                "SELECT apt_number FROM Apartments GROUP BY apt_number ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4d4e290fc2c4441696136df33d94279f",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 2005 and csu_fees's Year equals 1996",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2005 AND T2.Year = 1996"
            ]
        },
        {
            "id": "task077-0d1e3076002a4938ab296dca609788bd",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find stars, title of the results of step 1",
            "output": [
                "SELECT T2.stars , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID"
            ]
        },
        {
            "id": "task077-d8def2dc7ef949dfb1878bc568cb94a5",
            "input": "find the Total, Clean_Jerk of body_builder table ordered ascending by Total",
            "output": [
                "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc"
            ]
        },
        {
            "id": "task077-f2ae3ae5875d4e84ac57fbc2b6723bef",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in enrollments table.\nStep 2: find CampusFee of the results of step 1 whose enrollments's Year equals 1996 and csu_fees's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 1996 AND T2.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-0c070e1c7b054f6798f8fc0f0f999c27",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find Rating's rID of the results of step 1 whose name equals Mike",
            "output": [
                "SELECT T2.rID FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T1.name = \"Mike\""
            ]
        },
        {
            "id": "task077-bc102c9549f14e73868ffac1f2a83054",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Hardware_Model_name of the results of step 1 whose Type equals Graphics and Accreditation_type equals Nokia Corporation",
            "output": [
                "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" AND T2.Accreditation_type = \"Nokia Corporation\""
            ]
        },
        {
            "id": "task077-1ee10732ba0842dba5e165bd60197b7c",
            "input": "find the number of rows in Customers table whose first_name equals Ray and last_name equals Bernhard",
            "output": [
                "SELECT Count ( * ) FROM Customers WHERE first_name = \"Ray\" AND last_name = \"Bernhard\""
            ]
        },
        {
            "id": "task077-e060f2abf4f94414bd7c668be883e270",
            "input": "find the number of rows in faculty table whose Campus equals 2004 and Year equals San Francisco State University",
            "output": [
                "SELECT Count ( * ) FROM faculty WHERE Campus = 2004 AND Year = \"San Francisco State University\""
            ]
        },
        {
            "id": "task077-eb6bbc860d494b4182433aff609e5a15",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find CampusFee of the results of step 1 whose Graduate equals 1996 and discipline_enrollments's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Graduate = 1996 AND T3.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-89e7ca8984bb41a9ad0287e29904bfc3",
            "input": "find the title of Movie table with largest value of year",
            "output": [
                "SELECT title FROM Movie ORDER BY year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4b283f32aec54e30abfb7dc0db62e913",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in csu_fees table.\nStep 2: find CampusFee of the results of step 1 whose Campuses's Year equals 1996 and csu_fees's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.Year = 1996 AND T2.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-1845ffbb2e7443b8a25873e958b51aac",
            "input": "find each value of Headquartered_City in district table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Headquartered_City FROM district GROUP BY Headquartered_City"
            ]
        },
        {
            "id": "task077-d27d78482bbe4af39cee3172dda2d17f",
            "input": "find the apt_number of Apartments table ordered ascending by bathroom_count",
            "output": [
                "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc"
            ]
        },
        {
            "id": "task077-199c729da5f9486abe8cc3cbd5caff4d",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 2005 and faculty's Campus equals 1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 2005 AND T3.Campus = 1"
            ]
        },
        {
            "id": "task077-d766cf88ab7a4755b36b69c66ba50919",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 whose stars equals 2.\nStep 3: find name of the results of step 1 whose stars greater than or equals 3.\nStep 4: show the rows that are in any of the results of step 2 or the results of step 3",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 UNION SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars > = 3"
            ]
        },
        {
            "id": "task077-5ec7c1df9fd04f65ab8beffb63caf641",
            "input": "Step 1: find the number of rows of each value of dimensions in product table.\nStep 2: find dimensions in product table whose corresponding value in step 1 is greater than 3",
            "output": [
                "SELECT dimensions FROM product GROUP BY dimensions HAVING Count ( * ) > 3"
            ]
        },
        {
            "id": "task077-2c1f195ba00d4c5890bb87844f2bdf2e",
            "input": "find the minimum Height in people table",
            "output": [
                "SELECT Min ( Height ) FROM people"
            ]
        },
        {
            "id": "task077-ee102d789d6a49faa4fbb9e98a239a5d",
            "input": "find the building_full_name of Apartment_Buildings table for which building_short_name contains court",
            "output": [
                "SELECT building_full_name FROM Apartment_Buildings WHERE building_short_name LIKE \"court\""
            ]
        },
        {
            "id": "task077-f7640ee4713a440fa00286503d878f29",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in degrees table and in faculty table.\nStep 2: find the average Degrees of each value of faculty's Campus in the results of step 1.\nStep 3: find faculty's Campus of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T3.Campus ORDER BY Avg ( T2.Degrees ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5e62b135382a43f39dc688a566c2572e",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in enrollments table and in faculty table.\nStep 2: find the average FTE_AY in the results of step 1 whose faculty's Year equals 2005 and Faculty equals 357.1",
            "output": [
                "SELECT Avg ( T2.FTE_AY ) FROM Campuses AS T1 JOIN enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2005 AND T3.Faculty = 357.1"
            ]
        },
        {
            "id": "task077-eaa52471983848338ad24b6d04605906",
            "input": "find the cell_mobile_phone_number, email_address of Customers table for which amount_outstanding greater than 2000",
            "output": [
                "SELECT cell_mobile_phone_number , email_address FROM Customers WHERE amount_outstanding > 2000"
            ]
        },
        {
            "id": "task077-5888848e98fb4316bc7ec2613654a19c",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in discipline_enrollments table and in faculty table.\nStep 2: find Graduate of the results of step 1 whose faculty's Campus equals 2001 and faculty's Year equals San Francisco State University",
            "output": [
                "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Campus = 2001 AND T3.Year = \"San Francisco State University\""
            ]
        },
        {
            "id": "task077-6050242e456f4b0199dfbc7c52b81f3c",
            "input": "find the Headquartered_City of district table for which District_name equals Blackville",
            "output": [
                "SELECT Headquartered_City FROM district WHERE District_name = \"Blackville\""
            ]
        },
        {
            "id": "task077-ddabf3d21ed7400eb6583af54d0bf57b",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 2005",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2005"
            ]
        },
        {
            "id": "task077-fddb6ab3ed4e485cb6658146c3f9a1fe",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Company_name of the results of step 1 whose Type equals Graphics and Accreditation_type equals Nokia Corporation",
            "output": [
                "SELECT T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" AND T2.Accreditation_type = \"Nokia Corporation\""
            ]
        },
        {
            "id": "task077-6705e50092d44b17a252edafb6512b7b",
            "input": "Step 1: find the number of rows of each value of incident_type_code in Ref_Incident_Type table.\nStep 2: find incident_type_code, incident_type_description of Ref_Incident_Type table with smallest value in the results of step 1",
            "output": [
                "SELECT incident_type_code , incident_type_description FROM Ref_Incident_Type GROUP BY incident_type_code ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-da193af538cf4bbaae75fe5e44e20650",
            "input": "Step 1: find the Model_name of chip_model table.\nStep 2: For each row in phone table, find corresponding rows in chip_model table and in screen_mode table.\nStep 3: find Model_name of the results of step 2 whose Type equals Full.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Model_name FROM chip_model AS T1 EXCEPT SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = \"Full\""
            ]
        },
        {
            "id": "task077-d76a996bb21e4aee8c249a9cddd902b7",
            "input": "Step 1: For each row in chip_model table, find the corresponding rows in phone table.\nStep 2: find Bluetooth, Company_name of the results of step 1 whose Accreditation_type contains Full",
            "output": [
                "SELECT T1.Bluetooth , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Accreditation_type LIKE \"Full\""
            ]
        },
        {
            "id": "task077-b8ef224104b64b47820e60e908ffc4f3",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Company_name of the results of step 1 whose Type equals Graphics and Type equals Nokia Corporation",
            "output": [
                "SELECT T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Nokia Corporation\" AND T1.Type = \"Graphics\""
            ]
        },
        {
            "id": "task077-a3b5633b566647c3939c96d3bab11629",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find rows of the results of step 1 whose County equals Los Angeles and Campuses's Year greater than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT * FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T1.Year > 1950 AND T2.Year > 2002"
            ]
        },
        {
            "id": "task077-d943f9e024d749f09a84d0de1ca60a12",
            "input": "Step 1: find the number of rows of each value of incident_type_code in Ref_Incident_Type table.\nStep 2: find incident_type_code, incident_type_description of Ref_Incident_Type table with largest value in the results of step 1",
            "output": [
                "SELECT incident_type_code , incident_type_description FROM Ref_Incident_Type GROUP BY incident_type_code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6ef5cfed33804c199fd46b97837605ee",
            "input": "find the building_address, building_phone of Apartment_Buildings table for which building_short_name equals Brenden",
            "output": [
                "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_short_name = \"Brenden\""
            ]
        },
        {
            "id": "task077-0436302ec2d3463a9ad1fd3a99f5a126",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find County of the results of step 1 whose County equals Los Angeles and faculty's Year greater than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT T1.County FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T2.Year > 2002 AND T2.Year > 1950"
            ]
        },
        {
            "id": "task077-ea415c2d4f3448769fe7d306b5bd719e",
            "input": "find the minimum Clean_Jerk in body_builder table",
            "output": [
                "SELECT Min ( Clean_Jerk ) FROM body_builder"
            ]
        },
        {
            "id": "task077-7535d3327ba742698c12a9e9cac6a1fd",
            "input": "Step 1: For each row in phone table, find corresponding rows in chip_model table and in screen_mode table.\nStep 2: find Company_name of the results of step 1 whose Type equals Text and RAM_MiB greater than 32",
            "output": [
                "SELECT T3.Company_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode AND T1.Model_name = T3.chip_model WHERE T2.Type = \"Text\" AND T1.RAM_MiB > 32"
            ]
        },
        {
            "id": "task077-482ead3f544849039b6b7514108ffa69",
            "input": "find the number of rows in Apartments table whose apt_number contains Columbus Square",
            "output": [
                "SELECT Count ( * ) FROM Apartments WHERE apt_number LIKE \"Columbus Square\""
            ]
        },
        {
            "id": "task077-c508314019b8470992540cb63afb4f4f",
            "input": "find the maximum bathroom_count and the maximum bathroom_count in Apartments table",
            "output": [
                "SELECT Max ( bathroom_count ) , Max ( bathroom_count ) FROM Apartments"
            ]
        },
        {
            "id": "task077-77f0c4c5330147cb9fb7054ae7a19432",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name, name of the results of step 1 whose stars equals 2.\nStep 3: For each row in Movie table, find the corresponding rows in Rating table.\nStep 4: find director of the results of step 3 whose stars equals 5.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.name , T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 INTERSECT SELECT T3.director FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-12e7dc4bd9e748bab2d8931195d54388",
            "input": "find product of product table whose dpi less than 5 or dpi less than A4",
            "output": [
                "SELECT product FROM product WHERE dpi < \"A4\" OR dpi < 5"
            ]
        },
        {
            "id": "task077-580ae505bfd64e798524c121ddf0ecdd",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find the average Undergraduate of each value of csu_fees's Year in the results of step 1.\nStep 3: find discipline_enrollments's Year of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.Year FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus GROUP BY T2.Year ORDER BY Avg ( T3.Undergraduate ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f27876426dfd4006afabb36308c73018",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find the average stars of each value of title in the results of step 1.\nStep 3: find title in the results of step 1 whose corresponding value in step 2 is greater than 2",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > 2"
            ]
        },
        {
            "id": "task077-bb40460f334b40968d6673feb97b3b34",
            "input": "find the Model_name of chip_model table for which Launch_year equals 2002 with largest value of RAM_MiB",
            "output": [
                "SELECT Model_name FROM chip_model WHERE Launch_year = 2002 ORDER BY RAM_MiB Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4a458a0b3c9b40e1804ebfc71626619b",
            "input": "find the average CampusFee in csu_fees table whose Year equals 2005 and Year equals 1996",
            "output": [
                "SELECT Avg ( CampusFee ) FROM csu_fees WHERE Year = 1996 AND Year = 2005"
            ]
        },
        {
            "id": "task077-0dc0b5a41c8445f4a37400d2ca8b2f87",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Hardware_Model_name of the results of step 1 whose Company_name equals Graphics and Type equals Nokia Corporation",
            "output": [
                "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Company_name = \"Graphics\" AND T1.Type = \"Nokia Corporation\""
            ]
        },
        {
            "id": "task077-2957ea7075e14bca9dda96a8869a89d7",
            "input": "find the average screen_mode in phone table whose Company_name equals Nokia Corporation",
            "output": [
                "SELECT Avg ( screen_mode ) FROM phone WHERE Company_name = \"Nokia Corporation\""
            ]
        },
        {
            "id": "task077-6af142ba23744b9bac681302787cb20f",
            "input": "find the number of rows in Customers table",
            "output": [
                "SELECT Count ( * ) FROM Customers"
            ]
        },
        {
            "id": "task077-d0491129783a4887bb847b352e2eca6d",
            "input": "Step 1: For each row in Apartment_Bookings table, find corresponding rows in Apartments table and in Guests table.\nStep 2: find apt_type_code, apt_number of the results of step 1 whose guest_first_name equals Kyle",
            "output": [
                "SELECT T1.apt_type_code , T1.apt_number FROM Apartments AS T1 JOIN Guests AS T2 JOIN Apartment_Bookings AS T3 ON T1.apt_id = T3.apt_id AND T3.guest_id = T2.guest_id WHERE T2.guest_first_name = \"Kyle\""
            ]
        },
        {
            "id": "task077-524d86fb2c75471daae9be1f8557e3ce",
            "input": "find the number of rows in Movie table",
            "output": [
                "SELECT Count ( * ) FROM Movie"
            ]
        },
        {
            "id": "task077-3ca42262df17479ebedc5499fbe86f1e",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in degrees table.\nStep 2: find the average Degrees of each value of csu_fees's Year in the results of step 1.\nStep 3: find csu_fees's Year of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T2.Year FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN degrees AS T3 ON T1.Id = T3.Campus GROUP BY T2.Year ORDER BY Avg ( T3.Degrees ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d9038694243042619caadbae623d0f59",
            "input": "find the number of rows in Addresses table",
            "output": [
                "SELECT Count ( * ) FROM Addresses"
            ]
        },
        {
            "id": "task077-0c122d89e8c246abb528ee86ad00f1a9",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_address equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_address = \"Columbus Square\" AND T1.building_short_name = \"Normandie Court\""
            ]
        },
        {
            "id": "task077-3edbffbc96c54db38b2edbc4b1e14bb8",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 2005 and Faculty equals 357.1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2005 AND T3.Faculty = 357.1"
            ]
        },
        {
            "id": "task077-14c81275e3ef4daf925711b496c1bf3a",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 2005 and faculty's Year equals 2002",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 2005 AND T3.Year = 2002"
            ]
        },
        {
            "id": "task077-6bedb00ba9674c0a9930ba45aa276abf",
            "input": "find the City_Population of district table for which District_name equals Blackville",
            "output": [
                "SELECT City_Population FROM district WHERE District_name = \"Blackville\""
            ]
        },
        {
            "id": "task077-94b52d27a3c04fdfa67d96a2b6a2311c",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_last_name, customer_id, phone_number of Customers table with largest value in the results of step 1",
            "output": [
                "SELECT customer_last_name , customer_id , phone_number FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-05d90656b86845c594d4d7cc8f4c8793",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 2005 and discipline_enrollments's Campus equals 1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 2005 AND T3.Campus = 1"
            ]
        },
        {
            "id": "task077-06f03a8c5107414b87a1ecd0dff9a863",
            "input": "find the bedroom_count of Apartments table ordered ascending by bathroom_count",
            "output": [
                "SELECT bedroom_count FROM Apartments ORDER BY bathroom_count Asc"
            ]
        },
        {
            "id": "task077-6df33f769ab24a3b9cfcb36b34687770",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in enrollments table.\nStep 2: find Campuses's Campus of the results of step 1 whose County equals Los Angeles and Campuses's Year greater than 1950 and enrollments's Year greater than 1956",
            "output": [
                "SELECT T1.Campus FROM Campuses AS T1 JOIN enrollments AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T1.Year > 1950 AND T2.Year > 1956"
            ]
        },
        {
            "id": "task077-ac212e5b190242d5bf90da649af37ba0",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find director, title of the results of step 1 with largest value of stars",
            "output": [
                "SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID ORDER BY T2.stars Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-49e5863c2399446b893a478966f02678",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in discipline_enrollments table and in faculty table.\nStep 2: find the summation of Graduate in the results of step 1 whose County equals San Jose State University and faculty's Year equals 2000",
            "output": [
                "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.County = \"San Jose State University\" AND T3.Year = 2000"
            ]
        },
        {
            "id": "task077-eeae662c2ff647da8c98bef37cee945a",
            "input": "find the used_kb of screen_mode table for which Type equals Graphics",
            "output": [
                "SELECT used_kb FROM screen_mode WHERE Type = \"Graphics\""
            ]
        },
        {
            "id": "task077-1a297dbcb3e24e599a8abf39d0017b18",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 1996 and faculty's Year equals 2002",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2002 AND T3.Year = 1996"
            ]
        },
        {
            "id": "task077-0f5620496f1e4de2891e77264b828dca",
            "input": "find the number of rows in Staff table whose first_name contains a",
            "output": [
                "SELECT Count ( * ) FROM Staff WHERE first_name LIKE \"a\""
            ]
        },
        {
            "id": "task077-45b0bdf0b07c456ca886be587f010044",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_description contains Columbus Square",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_description LIKE \"Columbus Square\""
            ]
        },
        {
            "id": "task077-16b9668630b14cadb2c6c33febd81877",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_short_name equals Columbus Square",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\""
            ]
        },
        {
            "id": "task077-bae98c99285244bc8e7d0439899277fa",
            "input": "find the number of rows in Apartment_Facilities table whose facility_code equals Gym",
            "output": [
                "SELECT Count ( * ) FROM Apartment_Facilities WHERE facility_code = \"Gym\""
            ]
        },
        {
            "id": "task077-c35ec683530a43f8b431211e1c264095",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in csu_fees table.\nStep 2: find CampusFee of the results of step 1 whose County equals San Jose State University and csu_fees's Year equals 2000",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"San Jose State University\" AND T2.Year = 2000"
            ]
        },
        {
            "id": "task077-22a0e3f7e7064a459552df8b17a9f82c",
            "input": "find the average Ranking in store table",
            "output": [
                "SELECT Avg ( Ranking ) FROM store"
            ]
        },
        {
            "id": "task077-7424fac4ccce4c6780fbe714dbf01e1f",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find CampusFee of the results of step 1 whose discipline_enrollments's Year equals 1996 and csu_fees's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 1996 AND T2.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-d525e95f30004d3e8bb6491237bfa6c7",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 1996 and faculty's Year equals 2002",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 1996 AND T3.Year = 2002"
            ]
        },
        {
            "id": "task077-f5101f73d3e64ddcba33e0ba7ebf9518",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 whose stars equals 2.\nStep 3: For each row in Movie table, find the corresponding rows in Rating table.\nStep 4: find director, title of the results of step 3 whose stars equals 5.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 INTERSECT SELECT T3.director , T3.title FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-9fd7d790c43c4b69808af225401cbd14",
            "input": "Step 1: find the average bathroom_count of each value of apt_type_code in Apartments table.\nStep 2: find apt_type_code of Apartments table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY Avg ( bathroom_count ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-80bee7e879b94466aed0de8dacb8dfef",
            "input": "Step 1: For each row in phone table, find corresponding rows in chip_model table and in screen_mode table.\nStep 2: find Model_name of the results of step 1 whose Type equals Text.\nStep 3: find Model_name of the results of step 1 whose Type equals Nokia Corporation.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = \"Text\" EXCEPT SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = \"Nokia Corporation\""
            ]
        },
        {
            "id": "task077-401142d14bae4612867bf65fe2a3e3db",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Hardware_colours, Char_cells of the results of step 1 whose Company_name equals LG-P760",
            "output": [
                "SELECT T1.Hardware_colours , T1.Char_cells FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Company_name = \"LG-P760\""
            ]
        },
        {
            "id": "task077-21322fee041e4f3baa9a22e091b75fea",
            "input": "find without repetition the name of Reviewer table",
            "output": [
                "SELECT DISTINCT name FROM Reviewer"
            ]
        },
        {
            "id": "task077-4418fba1de9a47219a48fd87994f26cc",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in degrees table and in discipline_enrollments table.\nStep 2: find the average Degrees of each value of degrees's Year in the results of step 1.\nStep 3: find discipline_enrollments's Year of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.Year FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus GROUP BY T2.Year ORDER BY Avg ( T2.Degrees ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-39e68357e7b342bd94d90e5f2540a591",
            "input": "find CampusFee of csu_fees table whose Year equals 1996 and Year equals San Jose State University",
            "output": [
                "SELECT CampusFee FROM csu_fees WHERE Year = \"San Jose State University\" AND Year = 1996"
            ]
        },
        {
            "id": "task077-34a23deb96344d09add7befa58dfeca8",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 whose stars equals 2.\nStep 3: For each row in Movie table, find the corresponding rows in Rating table.\nStep 4: find director, stars of the results of step 3 whose stars equals 5.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 INTERSECT SELECT T3.director , T2.stars FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-f985b5d1c2da4d72b7cdef1b1fcc8493",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find Campuses's Campus of the results of step 1 whose Campuses's Campus equals Los Angeles and faculty's Year greater than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = \"Los Angeles\" AND T2.Year > 2002 AND T2.Year > 1950"
            ]
        },
        {
            "id": "task077-79333a017fe64e4f91824933ad3512e4",
            "input": "Step 1: find the chip_model of phone table.\nStep 2: find the average Hardware_colours in screen_mode table whose Hardware_colours not one of the results of step 1",
            "output": [
                "SELECT Avg ( T1.Hardware_colours ) FROM screen_mode AS T1 WHERE T1.Hardware_colours NOT IN ( SELECT T2.chip_model FROM phone AS T2 )"
            ]
        },
        {
            "id": "task077-365d35911ab94ef99a8597eac0dc050a",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in discipline_enrollments table and in faculty table.\nStep 2: find Graduate of the results of step 1 whose Campuses's Campus equals San Francisco State University and faculty's Year equals 2001",
            "output": [
                "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = \"San Francisco State University\" AND T3.Year = 2001"
            ]
        },
        {
            "id": "task077-d7a059c59e8a4ffb854c190794da06d3",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Customers table.\nStep 2: find country of the results of step 1 whose first_name equals Janessa and state_province_county equals Sawayn",
            "output": [
                "SELECT T1.country FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id = T2.customer_address_id WHERE T2.first_name = \"Janessa\" AND T1.state_province_county = \"Sawayn\""
            ]
        },
        {
            "id": "task077-2c57664a09fa4b08a39377dcb658cc3a",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_short_name contains Columbus Square",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name LIKE \"Columbus Square\""
            ]
        },
        {
            "id": "task077-58a4aef9d4aa4658b0aaa354d309b8af",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find the summation of stars of each value of Rating's mID in the results of step 1.\nStep 3: find title of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T2.mID ORDER BY Sum ( T2.stars ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-41e594c8300f42058e704c1e53fdbc2d",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find CampusFee of the results of step 1 whose faculty's Year equals 1996 and csu_fees's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 1996 AND T2.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-5b11c5f8d4004c30b50284ab67d72e68",
            "input": "find the middle_name, last_name of Staff table",
            "output": [
                "SELECT middle_name , last_name FROM Staff"
            ]
        },
        {
            "id": "task077-c43a544a1add4a0db655d34c148cd03f",
            "input": "find the District_name of district table with largest value of City_Population",
            "output": [
                "SELECT District_name FROM district ORDER BY City_Population Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c29bed3605dc4a929edef214dd07a956",
            "input": "find the bedroom_count of Apartments table for which apt_type_code equals Flat",
            "output": [
                "SELECT bedroom_count FROM Apartments WHERE apt_type_code = \"Flat\""
            ]
        },
        {
            "id": "task077-e8e09da728054ffa9350b2cb2daf7242",
            "input": "find the Campus of faculty table for which Year equals or between 1935 and 1939",
            "output": [
                "SELECT Campus FROM faculty WHERE Year BETWEEN 1939 AND 1935"
            ]
        },
        {
            "id": "task077-d31255e5c2104b8ab248ddd93fe5853e",
            "input": "Step 1: find the first_name of Staff table.\nStep 2: find the first_name of Staff table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT first_name FROM Staff EXCEPT SELECT first_name FROM Staff"
            ]
        },
        {
            "id": "task077-97e99e2a30c14ef781eff45680d68cac",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_full_name equals Columbus Square and building_short_name contains Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name = \"Columbus Square\" AND T1.building_short_name LIKE \"Normandie Court\""
            ]
        },
        {
            "id": "task077-0cdba0de5b53484ca70485249e16927e",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find title of the results of step 1 whose name equals Steven Spielberg",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = \"Steven Spielberg\""
            ]
        },
        {
            "id": "task077-6b8605212ace4071a7a94e18f1adedf3",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find director of the results of step 1 whose stars equals 2.\nStep 3: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 4: find name, name of the results of step 3 whose stars equals 5.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 2 INTERSECT SELECT T3.name , T3.name FROM Reviewer AS T3 JOIN Rating AS T2 ON T3.rID = T2.rID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-ecbe37412889494dbb29041d25c23410",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find CampusFee of the results of step 1 whose csu_fees's Year equals 1996 and faculty's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 1996 AND T3.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-057fe36f9b65471692f8ebc3e088a255",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the number of rows in the results of step 1 whose faculty's Year equals 2002 and csu_fees's Year equals Long Beach State University",
            "output": [
                "SELECT Count ( * ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2002 AND T2.Year = \"Long Beach State University\""
            ]
        },
        {
            "id": "task077-f73dfc169c634dd3ace06777f95e5d52",
            "input": "find the number of rows in Campuses table",
            "output": [
                "SELECT Count ( * ) FROM Campuses"
            ]
        },
        {
            "id": "task077-a6cc42b9ab744d96a01a1ae17c93671b",
            "input": "Step 1: For each row in Apartments table, find the corresponding rows in Apartment_Facilities table.\nStep 2: find the number of rows of each value of Apartments's apt_id in the results of step 1.\nStep 3: find facility_code in the results of step 1 whose corresponding value in step 2 is greater than 4",
            "output": [
                "SELECT T2.facility_code FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id GROUP BY T1.apt_id HAVING Count ( * ) > 4"
            ]
        },
        {
            "id": "task077-3daa964b7b0d452caf112bb6a15f3e06",
            "input": "find the District_name, City_Population of district table for which City_Area equals or between 200000 and 2000000",
            "output": [
                "SELECT District_name , City_Population FROM district WHERE City_Area BETWEEN 2000000 AND 200000"
            ]
        },
        {
            "id": "task077-d85f4fdcb636417cbb93b269ce62136d",
            "input": "Step 1: For each row in phone table, find corresponding rows in chip_model table and in screen_mode table.\nStep 2: find Char_cells, Pixels, Hardware_colours of the results of step 1 whose Model_name equals LG-P760",
            "output": [
                "SELECT T2.Char_cells , T2.Pixels , T2.Hardware_colours FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T1.Model_name = \"LG-P760\""
            ]
        },
        {
            "id": "task077-8f97e5b416eb4c6abf91b324c318a81f",
            "input": "find the first_name, last_name of Staff table",
            "output": [
                "SELECT first_name , last_name FROM Staff"
            ]
        },
        {
            "id": "task077-d2d7faa84e8249d9834861445e0cbc59",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Lessons table.\nStep 2: find lesson_id of the results of step 1 whose first_name equals Janessa and last_name equals Sawayn",
            "output": [
                "SELECT T2.lesson_id FROM Staff AS T1 JOIN Lessons AS T2 ON T1.staff_id = T2.staff_id WHERE T1.first_name = \"Janessa\" AND T1.last_name = \"Sawayn\""
            ]
        },
        {
            "id": "task077-965298ff564140528c244fdbca02a3d7",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find the number of rows of each value of Rating's rID in the results of step 1.\nStep 3: find name in the results of step 1 whose corresponding value in step 2 is greater than 3",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID GROUP BY T2.rID HAVING Count ( * ) > 3"
            ]
        },
        {
            "id": "task077-305dc8408bf24e18997377d5c5c28a7d",
            "input": "find the maximum Degrees in degrees table",
            "output": [
                "SELECT Max ( Degrees ) FROM degrees"
            ]
        },
        {
            "id": "task077-74f027763ba84564a33595c093267d45",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find title, director of the results of step 1 with smallest value of stars",
            "output": [
                "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID ORDER BY T2.stars Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-88697c0b35494b4c8129fac2584fb9ed",
            "input": "Step 1: find the People_ID of body_builder table.\nStep 2: find the Name, Weight of people table whose People_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name , T1.Weight FROM people AS T1 WHERE T1.People_ID NOT IN ( SELECT T2.People_ID FROM body_builder AS T2 )"
            ]
        },
        {
            "id": "task077-3098cd88b310403aa6c06edaad8c9375",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find rows of the results of step 1 whose County equals Los Angeles and faculty's Year greater than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT * FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T2.Year > 2002 AND T2.Year > 1950"
            ]
        },
        {
            "id": "task077-fb15b624395442e7bb7c4239544e0690",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in discipline_enrollments table and in faculty table.\nStep 2: find Faculty of the results of step 1 whose Undergraduate greater than 1956 and discipline_enrollments's Year equals 400",
            "output": [
                "SELECT T3.Faculty FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Undergraduate > 1956 AND T2.Year = 400"
            ]
        },
        {
            "id": "task077-f29df01450594f8dbe738f122b1b83a5",
            "input": "Step 1: For each row in Addresses table, find corresponding rows in Staff table and in Customers table.\nStep 2: find Customers's last_name of the results of step 1 whose Staff's last_name equals Sawayn.\nStep 3: find Customers's last_name of the results of step 1 whose Staff's last_name equals Sawayn.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = \"Sawayn\" INTERSECT SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = \"Sawayn\""
            ]
        },
        {
            "id": "task077-9f5482fc7ee544a4b7dd0130a5c843b5",
            "input": "find the date_incident_start, date_incident_start of Behavior_Incident table for which incident_type_code equals NOISE",
            "output": [
                "SELECT date_incident_start , date_incident_start FROM Behavior_Incident WHERE incident_type_code = \"NOISE\""
            ]
        },
        {
            "id": "task077-66d918020c264de39f063ea071608f76",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find stars of the results of step 1 whose name equals Daniel Lewis",
            "output": [
                "SELECT T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T1.name = \"Daniel Lewis\""
            ]
        },
        {
            "id": "task077-b3a9d17901664059a7d6910393ee1760",
            "input": "find the number of rows in faculty table whose Year equals 1",
            "output": [
                "SELECT Count ( * ) FROM faculty WHERE Year = 1"
            ]
        },
        {
            "id": "task077-67c20556385547d89b706b868bc23d93",
            "input": "find without repetition the customer_first_name, customer_last_name, phone_number of Customers table",
            "output": [
                "SELECT DISTINCT customer_first_name , customer_last_name , phone_number FROM Customers"
            ]
        },
        {
            "id": "task077-87a11e02ff9c4355969b5e8a951ee713",
            "input": "find the number of rows in faculty table whose Year equals 2004 and Year equals San Francisco State University",
            "output": [
                "SELECT Count ( * ) FROM faculty WHERE Year = \"San Francisco State University\" AND Year = 2004"
            ]
        },
        {
            "id": "task077-9d782b0c11c44a038e32ef8fb477b952",
            "input": "find each value of order_id in Orders table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id"
            ]
        },
        {
            "id": "task077-7fa858ff9f1f4b4f9f677dfa11975d99",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find title of the results of step 1 whose name equals Sarah Martinez and year greater than 2000.\nStep 3: find title of the results of step 1 whose name equals James Cameron and name equals Sarah Martinez.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = \"Sarah Martinez\" AND T1.year > 2000 INTERSECT SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = \"Sarah Martinez\" AND T2.name = \"James Cameron\""
            ]
        },
        {
            "id": "task077-2b355c8d602c412e81cb9af2448421ae",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find each value of director in the results of step 1 along with the maximum stars of the corresponding rows to each value",
            "output": [
                "SELECT T1.title , Max ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director"
            ]
        },
        {
            "id": "task077-3326a77a440f425ab2d9f2593d1bd617",
            "input": "find Campus of faculty table whose Year equals San Francisco or Year equals San Francisco",
            "output": [
                "SELECT Campus FROM faculty WHERE Year = \"San Francisco\" OR Year = \"San Francisco\""
            ]
        },
        {
            "id": "task077-fe9118f532a34cb8b1fad7a670833cdf",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name, stars of the results of step 1 whose stars equals 2.\nStep 3: For each row in Movie table, find the corresponding rows in Rating table.\nStep 4: find director of the results of step 3 whose stars equals 5.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.name , T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 INTERSECT SELECT T3.director FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-698c953b01674aa2bfcd95c7c037a6e7",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 2005 and Discipline equals 4",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 2005 AND T3.Discipline = 4"
            ]
        },
        {
            "id": "task077-12ea650372b6455cabc267e027170226",
            "input": "find the email_address, email_address of Customers table for which first_name equals Carole",
            "output": [
                "SELECT email_address , email_address FROM Customers WHERE first_name = \"Carole\""
            ]
        },
        {
            "id": "task077-fc7b30fc5d7a4e229716fb2150b76ffe",
            "input": "Step 1: find the average Year of each value of Campus in faculty table.\nStep 2: find Faculty of faculty table with largest value in the results of step 1",
            "output": [
                "SELECT Faculty FROM faculty GROUP BY Campus ORDER BY Avg ( Year ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8986084aed94446f93eca0d05d3ff8e0",
            "input": "Step 1: find the year of Movie table ordered descending by year.\nStep 2: only show the first 4 rows of the results",
            "output": [
                "SELECT year FROM Movie ORDER BY year Desc LIMIT 4"
            ]
        },
        {
            "id": "task077-a5eeb6fe48ab48808f4dad6be30d93ab",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Hardware_Model_name of the results of step 1 whose chip_model equals Graphics and Type equals Nokia Corporation",
            "output": [
                "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.chip_model = \"Graphics\" AND T1.Type = \"Nokia Corporation\""
            ]
        },
        {
            "id": "task077-5cf0c6f9068644869d132f44ac7b9718",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find title of the results of step 1 whose year less than 1980 or name equals James Cameron",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.year < 1980 OR T2.name = \"James Cameron\""
            ]
        },
        {
            "id": "task077-206f9afcd15a45f0b54d9ade2432a239",
            "input": "find the name of Reviewer table",
            "output": [
                "SELECT name FROM Reviewer"
            ]
        },
        {
            "id": "task077-e4923e56e41e4c49bcf5d03a832529cb",
            "input": "Step 1: find the number of rows of each value of apt_booking_id in Apartment_Bookings table.\nStep 2: find booking_start_date, booking_end_date in Apartment_Bookings table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT booking_start_date , booking_end_date FROM Apartment_Bookings GROUP BY apt_booking_id HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-40154c5feab04c2888c811547eb4207f",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Hardware_Model_name of the results of step 1 whose Accreditation_type equals Graphics and Type equals Nokia Corporation",
            "output": [
                "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = \"Graphics\" AND T1.Type = \"Nokia Corporation\""
            ]
        },
        {
            "id": "task077-c3df8f2e5ebe4978ad19f9de1abe2ba6",
            "input": "find each value of account_id in Accounts table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , account_id FROM Accounts GROUP BY account_id"
            ]
        },
        {
            "id": "task077-62a9192af6264198a4e3a1a1d52e6600",
            "input": "find each value of director in Movie table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT director , Count ( * ) FROM Movie GROUP BY director"
            ]
        },
        {
            "id": "task077-8b01472d423541b296260ceadecc713c",
            "input": "Step 1: find the number of rows of each value of order_id in Orders table.\nStep 2: find order_id, order_details in Orders table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT order_id , order_details FROM Orders GROUP BY order_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-d20b1c3fc5a44aa7853858e7a2ed7ed5",
            "input": "find the average bathroom_count in Apartments table whose apt_type_code equals Studio",
            "output": [
                "SELECT Avg ( bathroom_count ) FROM Apartments WHERE apt_type_code = \"Studio\""
            ]
        },
        {
            "id": "task077-6dbbac2053ee42e8a8b56a9d70269cd2",
            "input": "Step 1: find the average Graduate of each value of Year in discipline_enrollments table.\nStep 2: find Year of discipline_enrollments table with largest value in the results of step 1",
            "output": [
                "SELECT Year FROM discipline_enrollments GROUP BY Year ORDER BY Avg ( Graduate ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a7651698105e474d8543f1eb75a5e32f",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Addresses table.\nStep 2: find email_address of the results of step 1 ordered descending by monthly_rental",
            "output": [
                "SELECT T1.email_address FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id = T2.student_id ORDER BY T2.monthly_rental Desc"
            ]
        },
        {
            "id": "task077-5c48af8f10aa4fbaad34839e4ba97659",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find director of the results of step 1 whose stars equals 2.\nStep 3: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 4: find name, stars of the results of step 3 whose stars equals 5.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 2 INTERSECT SELECT T3.name , T2.stars FROM Reviewer AS T3 JOIN Rating AS T2 ON T3.rID = T2.rID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-4d34449eb54f4858aa6ed623f62018fa",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find without repetition director of the results of step 1 whose stars equals Sarah Martinez",
            "output": [
                "SELECT DISTINCT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = \"Sarah Martinez\""
            ]
        },
        {
            "id": "task077-dfd3efa59ed94019ad3bbc4b28995e7a",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Behavior_Incident table.\nStep 2: find date_incident_start of the results of step 1 whose first_name equals Fanny",
            "output": [
                "SELECT T2.date_incident_start FROM Students AS T1 JOIN Behavior_Incident AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = \"Fanny\""
            ]
        },
        {
            "id": "task077-db2fed22699243ec95713dfcf6dd6f49",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of room_count in the results of step 1 whose building_full_name equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Sum ( T2.room_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name = \"Columbus Square\" AND T1.building_short_name = \"Normandie Court\""
            ]
        },
        {
            "id": "task077-d5eb6482406c4c55beb6c3f3671909f5",
            "input": "find each value of product_name in Products table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name"
            ]
        },
        {
            "id": "task077-56c88133333d4917b4c49bb2702a7c3e",
            "input": "Step 1: For each row in Teachers table, find the corresponding rows in Detention table.\nStep 2: find detention_summary of the results of step 1 whose last_name equals Schuster",
            "output": [
                "SELECT T2.detention_summary FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.last_name = \"Schuster\""
            ]
        },
        {
            "id": "task077-92b92d73ee324452aa88f91ed327623f",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find without repetition name, title, director of the results of step 1",
            "output": [
                "SELECT DISTINCT T2.name , T1.title , T1.director FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID"
            ]
        },
        {
            "id": "task077-1d7aa0619b634c309903f84edf83d7cf",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find title of the results of step 1 whose year greater than 1980 or name equals James Cameron",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.year > 1980 OR T2.name = \"James Cameron\""
            ]
        },
        {
            "id": "task077-276e1c71501b498bafe586f4dac25f12",
            "input": "find the product of product table for which dpi equals or between 5 and A4",
            "output": [
                "SELECT product FROM product WHERE dpi BETWEEN \"A4\" AND 5"
            ]
        },
        {
            "id": "task077-f699e4c5c68542739aa0906a7e38f39a",
            "input": "find each value of Birth_Date in people table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Birth_Date , Count ( * ) FROM people GROUP BY Birth_Date"
            ]
        },
        {
            "id": "task077-ddce5e3c8b9147c0a35a85ac20270229",
            "input": "find the Birth_Place of people table ordered ascending by Height",
            "output": [
                "SELECT Birth_Place FROM people ORDER BY Height Asc"
            ]
        },
        {
            "id": "task077-c313491f87ce468aa4cc154a3be44f15",
            "input": "Step 1: For each row in chip_model table, find the corresponding rows in phone table.\nStep 2: find Accreditation_type, Company_name of the results of step 1 whose Launch_year greater than 2002 and RAM_MiB greater than 32",
            "output": [
                "SELECT T2.Accreditation_type , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year > 2002 AND T1.RAM_MiB > 32"
            ]
        },
        {
            "id": "task077-e8dcab84fbd34c3cb6fce34d28ba4e52",
            "input": "find product of product table whose dpi greater than 5 and dpi less than A4",
            "output": [
                "SELECT product FROM product WHERE dpi > \"A4\" AND dpi < 5"
            ]
        },
        {
            "id": "task077-937b4b8e48df4b64b9fa21c421b026aa",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in enrollments table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 2005 and enrollments's Year equals 1956",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 2005 AND T3.Year = 1956"
            ]
        },
        {
            "id": "task077-8f618afeee3546eb9cdf4949d89c52e7",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find the  year in the results of step 1 whose stars less than or equals 2 ordered descending by year.\nStep 3: only show the first 4 rows of the results",
            "output": [
                "SELECT T1.year FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars < = 2 ORDER BY T1.year Desc LIMIT 4"
            ]
        },
        {
            "id": "task077-a5639a37170548fea6ea96de584f5ddf",
            "input": "Step 1: For each row in Apartments table, find the corresponding rows in Apartment_Bookings table.\nStep 2: find apt_number of the results of step 1 whose booking_status_code equals Provisional",
            "output": [
                "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = \"Provisional\""
            ]
        },
        {
            "id": "task077-efa9ea997ef14a7eae1866f0c5df57ed",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_id, customer_first_name, customer_last_name of Customers table with largest value in the results of step 1",
            "output": [
                "SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-44e1035717fd4642b085fd0d67bdef4c",
            "input": "find date_left_staff of Staff table whose first_name equals Janessa and last_name equals Sawayn",
            "output": [
                "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\""
            ]
        },
        {
            "id": "task077-f6a30e56cb1841518a771713e2aecdff",
            "input": "Step 1: find the number of rows of each value of city in Addresses table.\nStep 2: find city of Addresses table ordered ascending by the results of step 1",
            "output": [
                "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Asc"
            ]
        },
        {
            "id": "task077-070de6ba455e46bfbf62d16d4969d699",
            "input": "Step 1: find the number of rows of each value of building_short_name in Apartment_Buildings table.\nStep 2: find building_description in Apartment_Buildings table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT building_description FROM Apartment_Buildings GROUP BY building_short_name HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-4dcd0fadea6a41eda45edf5d2972a066",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 1996 and faculty's Campus equals 1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 1996 AND T3.Campus = 1"
            ]
        },
        {
            "id": "task077-e29277cd815c4a5795008de644cc2456",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find each value of director in the results of step 1 along with the minimum stars of the corresponding rows to each value",
            "output": [
                "SELECT T1.director , Min ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director"
            ]
        },
        {
            "id": "task077-e904729efff647b1b8c40675bb698f6d",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find name, title, title of the results of step 1 ordered ascending by stars",
            "output": [
                "SELECT T2.name , T1.title , T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc"
            ]
        },
        {
            "id": "task077-f2cfe1ed35a94757bbc22a9ff4b23d97",
            "input": "find the number of rows in Apartment_Buildings table whose building_short_name equals Columbus Square",
            "output": [
                "SELECT Count ( * ) FROM Apartment_Buildings WHERE building_short_name = \"Columbus Square\""
            ]
        },
        {
            "id": "task077-d72b0bb638be41b9bc2764e82df71971",
            "input": "Step 1: find the number of rows of each value of building_description in Apartment_Buildings table.\nStep 2: find building_short_name in Apartment_Buildings table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT building_short_name FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-9a5d9a9331de4790a56f0a1bdc9d4577",
            "input": "find product of product table whose dpi greater than 5 or dpi less than A4",
            "output": [
                "SELECT product FROM product WHERE dpi > \"A4\" OR dpi < 5"
            ]
        },
        {
            "id": "task077-221991e7f66e4820bd47b8670dd4a1a0",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find title of the results of step 1 whose stars not equals 2",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars ! = 2"
            ]
        },
        {
            "id": "task077-ea54ccd3956e417880a52304a0a55183",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Lessons table.\nStep 2: find the summation of lesson_time in the results of step 1 whose first_name equals Janessa and last_name equals Sawayn",
            "output": [
                "SELECT Sum ( T2.lesson_time ) FROM Customers AS T1 JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = \"Janessa\" AND T1.last_name = \"Sawayn\""
            ]
        },
        {
            "id": "task077-6203cf54820b4befbb6dc244bd5f8053",
            "input": "find the Headquartered_City of district table for which City_Population equals Blackville",
            "output": [
                "SELECT Headquartered_City FROM district WHERE City_Population = \"Blackville\""
            ]
        },
        {
            "id": "task077-4a51f3f9819e4773ad44a918dd2e40ce",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in csu_fees table.\nStep 2: find CampusFee of the results of step 1 whose County equals San Jose State University and csu_fees's Year equals 1996",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"San Jose State University\" AND T2.Year = 1996"
            ]
        },
        {
            "id": "task077-531196ded272455d9e4a5198f8f10fd0",
            "input": "Step 1: For each row in store_district table, find corresponding rows in store table and in district table.\nStep 2: find District_name of the results of step 1 whose Store_Name equals City Mall.\nStep 3: find District_name of the results of step 1 whose Store_Name equals Village Store.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.District_name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T1.Store_Name = \"City Mall\" INTERSECT SELECT T2.District_name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T1.Store_Name = \"Village Store\""
            ]
        },
        {
            "id": "task077-a5c42fe5fd794bb0a49cbc5c8483d615",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find Campuses's Campus of the results of step 1 whose County equals Los Angeles and Campuses's Year less than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T1.Year < 1950 AND T2.Year > 2002"
            ]
        },
        {
            "id": "task077-db5a3562d4db4b4faef53830028f1cb4",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_short_name equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Normandie Court\" AND T1.building_short_name = \"Columbus Square\""
            ]
        },
        {
            "id": "task077-65907931f8dd45e897256ed40c8087ac",
            "input": "Step 1: For each row in Apartments table, find the corresponding rows in Apartment_Facilities table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose facility_code equals Gym",
            "output": [
                "SELECT Sum ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id WHERE T2.facility_code = \"Gym\""
            ]
        },
        {
            "id": "task077-4069100a9c9c4defa1e97ea2980a0643",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 2005 and Faculty equals 357.1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 2005 AND T3.Faculty = 357.1"
            ]
        },
        {
            "id": "task077-5bad047107714839989cf5a981ec04b9",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find director of the results of step 1 whose stars equals 2.\nStep 3: find director of the results of step 1 whose stars equals 5.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 2 INTERSECT SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-8dd8779e61684488900baa219d5133cf",
            "input": "find the summation of rows in Apartments table whose apt_number contains Columbus Square",
            "output": [
                "SELECT Sum ( * ) FROM Apartments WHERE apt_number LIKE \"Columbus Square\""
            ]
        },
        {
            "id": "task077-e9d6fe28e41144e6a4e43be7225f3f53",
            "input": "Step 1: find the number of rows of each value of building_short_name in Apartment_Buildings table.\nStep 2: find building_short_name in Apartment_Buildings table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT building_short_name FROM Apartment_Buildings GROUP BY building_short_name HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-07cd3e1381fd48ef8ca6869da4b916c6",
            "input": "Step 1: For each row in Detention table, find corresponding rows in Ref_Detention_Type table and in Teachers table.\nStep 2: find detention_type_description of the results of step 1 whose last_name equals Schuster",
            "output": [
                "SELECT T1.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Teachers AS T2 JOIN Detention AS T3 ON T1.detention_type_code = T3.detention_type_code AND T3.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\""
            ]
        },
        {
            "id": "task077-79f535fccf824e1586a5b3b1eac5e9d5",
            "input": "find the number of rows in Campuses table whose County equals San Jose State University",
            "output": [
                "SELECT Count ( * ) FROM Campuses WHERE County = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-5279f494562f4fafa20d2b94a4836518",
            "input": "find product of product table whose dpi less than 5 and dpi greater than A4",
            "output": [
                "SELECT product FROM product WHERE dpi < \"A4\" AND dpi > 5"
            ]
        },
        {
            "id": "task077-4677e6b2251547d6a33acf5b64e6179c",
            "input": "Step 1: find the District_name of district table for which Headquartered_City equals City Mall.\nStep 2: For each row in store_district table, find corresponding rows in store table and in district table.\nStep 3: find District_name of the results of step 2 whose Type equals Village Store.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.District_name FROM district AS T1 WHERE T1.Headquartered_City = \"City Mall\" INTERSECT SELECT T1.District_name FROM store AS T2 JOIN district AS T1 JOIN store_district AS T3 ON T2.Store_ID = T3.Store_ID AND T3.District_ID = T1.District_ID WHERE T2.Type = \"Village Store\""
            ]
        },
        {
            "id": "task077-7219b037ba5f48d78e848dc2c969e69b",
            "input": "Step 1: For each row in Product_Categories table, find the corresponding rows in Products table.\nStep 2: find each value of product_name in the results of step 1 along with the summation of vat_rating of the corresponding rows to each value",
            "output": [
                "SELECT T2.product_name , Sum ( T1.vat_rating ) FROM Product_Categories AS T1 JOIN Products AS T2 ON T1.production_type_code = T2.production_type_code GROUP BY T2.product_name"
            ]
        },
        {
            "id": "task077-5935376318ab4a6a8b33bac416a2e536",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find name of the results of step 1 whose title equals null",
            "output": [
                "SELECT T2.name FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.title = \"null\""
            ]
        },
        {
            "id": "task077-5de00f40715a46ee9f160855a28f338d",
            "input": "Step 1: find the product of product table.\nStep 2: find the maximum Area_size in store table.\nStep 3: For each row in product table, find the corresponding rows in store table.\nStep 4: find product in the results of step 3 whose Area_size less than or equals the results of step 2.\nStep 5: show the rows that are in the results of step 1 but not in the results of step 4",
            "output": [
                "SELECT T1.product FROM product AS T1 EXCEPT SELECT T1.product FROM product AS T1 JOIN store AS T2 WHERE T2.Area_size < = ( SELECT Max ( T2.Area_size ) FROM store AS T2 )"
            ]
        },
        {
            "id": "task077-032fc88bdf5646bab7688ab3404c143c",
            "input": "Step 1: find the number of rows of each value of building_full_name in Apartment_Buildings table.\nStep 2: find building_short_name in Apartment_Buildings table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT building_short_name FROM Apartment_Buildings GROUP BY building_full_name HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-0e5b0b85bb9b469eb5739f8c02712baa",
            "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find title, stars of the results of step 1",
            "output": [
                "SELECT T1.title , T2.stars FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID"
            ]
        },
        {
            "id": "task077-bfb2310855754eb5999fbf7d48b7670c",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_last_name, phone_number, customer_id of Customers table with largest value in the results of step 1",
            "output": [
                "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-121aa81e94f34f2b8e9b8e3ea8ce5ec7",
            "input": "find without repetition the address_type_code of Ref_Address_Types table",
            "output": [
                "SELECT DISTINCT address_type_code FROM Ref_Address_Types"
            ]
        },
        {
            "id": "task077-2980a5bcd9f243fb8640e25968ad448a",
            "input": "Step 1: For each row in store_district table, find corresponding rows in store table and in district table.\nStep 2: find Store_Name of the results of step 1 whose Headquartered_City equals Khanewal District",
            "output": [
                "SELECT T1.Store_Name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T2.Headquartered_City = \"Khanewal District\""
            ]
        },
        {
            "id": "task077-498ffa466d304058852b6c8c5e36d28e",
            "input": "find the Hardware_Model_name of phone table",
            "output": [
                "SELECT Hardware_Model_name FROM phone"
            ]
        },
        {
            "id": "task077-2357a072af454c7f9f15168fb5a1e949",
            "input": "Step 1: for each value of Type in screen_mode table, calculate number of rows.\nStep 2: show each value of Type in screen_mode table along with the corresponding number of rows with smallest value in the results of step 1",
            "output": [
                "SELECT Type , Count ( * ) FROM screen_mode GROUP BY Type ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-8ab29bc05df94a9fa17cd080747a5ca0",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name, stars of the results of step 1 with smallest value of stars",
            "output": [
                "SELECT T1.name , T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID ORDER BY T2.stars Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-94c264b655a24585b68a4dde6d06f684",
            "input": "Step 1: find the product_name of Products table.\nStep 2: find the product_name of Products table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT product_name FROM Products EXCEPT SELECT product_name FROM Products"
            ]
        },
        {
            "id": "task077-fc07ec31c1454145bf596e819f1a9975",
            "input": "Step 1: For each row in phone table, find corresponding rows in chip_model table and in screen_mode table.\nStep 2: find Graphics_mode, Type of the results of step 1 whose Model_name equals LG-P760",
            "output": [
                "SELECT T2.Graphics_mode , T2.Type FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T1.Model_name = \"LG-P760\""
            ]
        },
        {
            "id": "task077-ac6e3244b27f49b09b92c4788f5d837c",
            "input": "find the number of rows in phone table whose screen_mode equals No",
            "output": [
                "SELECT Count ( * ) FROM phone WHERE screen_mode = \"No\""
            ]
        },
        {
            "id": "task077-c2b5844e04b84fa0a6238e258bfb474d",
            "input": "find the number of rows in Apartment_Buildings table",
            "output": [
                "SELECT Count ( * ) FROM Apartment_Buildings"
            ]
        },
        {
            "id": "task077-225cae483ca246cebefcafb7b21e22c4",
            "input": "Step 1: find the number of rows of each value of Headquartered_City in district table.\nStep 2: find Headquartered_City of district table with largest value in the results of step 1",
            "output": [
                "SELECT Headquartered_City FROM district GROUP BY Headquartered_City ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-fb78ed58353e40229836217924b9e418",
            "input": "find Campus of faculty table whose Year greater than or equals 1935 and Year less than or equals 1939",
            "output": [
                "SELECT Campus FROM faculty WHERE Year > = 1939 AND Year < = 1935"
            ]
        },
        {
            "id": "task077-b24e3b5d60db4e3ebdaae647bc10fc69",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find name, title of the results of step 1 with smallest value of stars",
            "output": [
                "SELECT T2.name , T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-919221fe36d248d2adff18a6f43a6abb",
            "input": "Step 1: For each row in Apartments table, find the corresponding rows in Apartment_Bookings table.\nStep 2: find apt_number of the results of step 1 whose booking_status_code equals 0.\nStep 3: For each row in Apartments table, find corresponding rows in Apartment_Buildings table and in Apartment_Bookings table.\nStep 4: find building_manager of the results of step 3 whose booking_status_code equals 1.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = 0 INTERSECT SELECT T3.building_manager FROM Apartment_Buildings AS T3 JOIN Apartments AS T1 ON T3.building_id = T1.building_id JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = 1"
            ]
        },
        {
            "id": "task077-a1d3cf1fa9e14aa4b4c4842cdcf4c000",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find name of the results of step 1 whose director equals Avatar",
            "output": [
                "SELECT T2.name FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.director = \"Avatar\""
            ]
        },
        {
            "id": "task077-d181c87555d1430e849a433e6e855e15",
            "input": "find the number of rows in Apartments table whose apt_number equals Columbus Square",
            "output": [
                "SELECT Count ( * ) FROM Apartments WHERE apt_number = \"Columbus Square\""
            ]
        },
        {
            "id": "task077-80c451acaf5b46eb956cd9cf18199f3c",
            "input": "find the date_became_customer of Customers table for which customer_status_code equals Good Customer",
            "output": [
                "SELECT date_became_customer FROM Customers WHERE customer_status_code = \"Good Customer\""
            ]
        },
        {
            "id": "task077-611012567936489aa84d86f195118e1a",
            "input": "find the District_name, Headquartered_City of district table for which City_Population equals or between 200000 and 2000000",
            "output": [
                "SELECT District_name , Headquartered_City FROM district WHERE City_Population BETWEEN 2000000 AND 200000"
            ]
        },
        {
            "id": "task077-c7938926db5f4d3d91e92196e39b20ab",
            "input": "find the average CampusFee in csu_fees table whose Year equals 1996 and Year equals 1996",
            "output": [
                "SELECT Avg ( CampusFee ) FROM csu_fees WHERE Year = 1996 AND Year = 1996"
            ]
        },
        {
            "id": "task077-35bc9e59b1f6418a9d5efe8e2864509e",
            "input": "Step 1: find the rID of Reviewer table.\nStep 2: find the Rating's rID of Rating table for which stars equals 4.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.rID FROM Reviewer AS T1 EXCEPT SELECT T2.rID FROM Rating AS T2 WHERE T2.stars = 4"
            ]
        },
        {
            "id": "task077-dd8cf08495ed43aeacdb5a577171032d",
            "input": "Step 1: find the product_id of Products table.\nStep 2: find the number of rows in Products table whose product_id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Products )"
            ]
        },
        {
            "id": "task077-89d58078ce3440618ddd273e3c0fe338",
            "input": "Step 1: For each row in people table, find the corresponding rows in body_builder table.\nStep 2: find Height, Weight of the results of step 1 ordered descending by Total",
            "output": [
                "SELECT T2.Height , T2.Weight FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total Desc"
            ]
        },
        {
            "id": "task077-dc1f18dc58874eb998bfebb3fa4ab8d2",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in degrees table and in faculty table.\nStep 2: find the summation of Degrees of each value of degrees's Campus in the results of step 1.\nStep 3: find faculty's Campus of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T2.Campus ORDER BY Sum ( T2.Degrees ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-57e29633972b42668a1851230b7a8bf8",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find County of the results of step 1 whose Campuses's Campus equals Los Angeles and faculty's Year greater than 1950",
            "output": [
                "SELECT T1.County FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = \"Los Angeles\" AND T2.Year > 1950"
            ]
        },
        {
            "id": "task077-6ae8ed76845947fc85755071d36efd07",
            "input": "find the title, year of Movie table with largest value of year",
            "output": [
                "SELECT title , year FROM Movie ORDER BY year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-af3a62a953cb4caaa44a46da05cf627d",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find Campuses's Campus of the results of step 1 whose County equals Los Angeles and faculty's Year greater than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T2.Year > 2002 AND T2.Year > 1950"
            ]
        },
        {
            "id": "task077-0ae88db9b78d4118b65c5c5a24ac7ea7",
            "input": "Step 1: find the number of rows of each value of state_province_county in Addresses table.\nStep 2: find state_province_county in Addresses table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT state_province_county FROM Addresses GROUP BY state_province_county HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-3f0288c0f15e4f17b64873eaa269a981",
            "input": "Step 1: find the number of rows of each value of vehicle_id in Vehicles table.\nStep 2: find vehicle_id, vehicle_details of Vehicles table with largest value in the results of step 1",
            "output": [
                "SELECT vehicle_id , vehicle_details FROM Vehicles GROUP BY vehicle_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-428a5a0b6cca401ea6d321f9859a64ce",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find CampusFee of the results of step 1 whose Undergraduate equals 1996 and discipline_enrollments's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Undergraduate = 1996 AND T3.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-e0eaacdd6bfe4466848b0e432acbcce9",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 whose stars contains 4 or stars contains 3",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars LIKE 3 OR T2.stars LIKE 4"
            ]
        },
        {
            "id": "task077-ef0137df2d03446d86945e00e0d5cb8d",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in degrees table and in faculty table.\nStep 2: find the average Degrees of each value of degrees's Campus in the results of step 1.\nStep 3: find faculty's Campus of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T2.Campus ORDER BY Avg ( T2.Degrees ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-318d4d433b5d493aa7761e85b3c3ec27",
            "input": "find the minimum Total in body_builder table",
            "output": [
                "SELECT Min ( Total ) FROM body_builder"
            ]
        },
        {
            "id": "task077-3d480d7d7a7440c89453a6dd35f4ec5c",
            "input": "find the number of rows in faculty table whose Year equals 2002",
            "output": [
                "SELECT Count ( * ) FROM faculty WHERE Year = 2002"
            ]
        },
        {
            "id": "task077-561a185bcfe0416ea63dda42be839885",
            "input": "find District_name of district table whose City_Area greater than 10 or Headquartered_City equals Attock City",
            "output": [
                "SELECT District_name FROM district WHERE City_Area > 10 OR Headquartered_City = \"Attock City\""
            ]
        },
        {
            "id": "task077-bd9187d073814988804839175afe5998",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_description equals Columbus Square and building_short_name contains Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_description = \"Columbus Square\" AND T1.building_short_name LIKE \"Normandie Court\""
            ]
        },
        {
            "id": "task077-96b11723a8ff46db9b70e74512d0be25",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in discipline_enrollments table.\nStep 2: find CampusFee of the results of step 1 whose Graduate equals 1996 and csu_fees's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Graduate = 1996 AND T2.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-2f3b3b4aeba84525962c8ad2de5075ff",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in discipline_enrollments table and in faculty table.\nStep 2: find the summation of Graduate in the results of step 1 whose faculty's Year equals 2000 and faculty's Year equals San Jose State University",
            "output": [
                "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = \"San Jose State University\" AND T3.Year = 2000"
            ]
        },
        {
            "id": "task077-8a98c9c648e04f0b9003c0de76bfbf1d",
            "input": "find Weight of people table whose Height greater than 140 or Height greater than 200",
            "output": [
                "SELECT Weight FROM people WHERE Height > 200 OR Height > 140"
            ]
        },
        {
            "id": "task077-95278d2ef4044a6dacb228ae0ce44ece",
            "input": "find the number of rows in faculty table whose Campus equals 2004 and Year equals San Jose State University",
            "output": [
                "SELECT Count ( * ) FROM faculty WHERE Campus = 2004 AND Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-931a4861ad4b477da7a27781f0c677ef",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 2005 and faculty's Year equals 2002",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2002 AND T3.Year = 2005"
            ]
        },
        {
            "id": "task077-90c796d0782e441ab40fc986e9d4b701",
            "input": "Step 1: For each row in Rating table, find corresponding rows in Movie table and in Reviewer table.\nStep 2: find title of the results of step 1 whose name equals James Cameron and year greater than 2000",
            "output": [
                "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = \"James Cameron\" AND T1.year > 2000"
            ]
        },
        {
            "id": "task077-553ea1e8719a4edfaf45a3e84d837074",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Accounts table.\nStep 2: find account_id, date_account_opened, other_account_details of the results of step 1 whose customer_first_name equals Meaghan",
            "output": [
                "SELECT T2.account_id , T2.date_account_opened , T2.other_account_details FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_first_name = \"Meaghan\""
            ]
        },
        {
            "id": "task077-fb4f8975482a46fab0587db9d856f36f",
            "input": "find each value of order_id in Orders table along with the summation of the corresponding rows to each value",
            "output": [
                "SELECT order_id , Sum ( * ) FROM Orders GROUP BY order_id"
            ]
        },
        {
            "id": "task077-72ad84a7a0424aa7bac95e1b79357ecd",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Students table.\nStep 2: find zip_postcode of the results of step 1 whose first_name equals Lyla",
            "output": [
                "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\""
            ]
        },
        {
            "id": "task077-bbae92ab670748838e2be55f43c7fae0",
            "input": "Step 1: find the year, title of Movie table for which year less than or equals 1939 ordered descending by year.\nStep 2: only show the first 4 rows of the results",
            "output": [
                "SELECT year , title FROM Movie WHERE year < = 1939 ORDER BY year Desc LIMIT 4"
            ]
        },
        {
            "id": "task077-d1ca36afae41459abff7bf896d15a07e",
            "input": "Step 1: find the Pixels of screen_mode table for which Type equals Provisional.\nStep 2: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 3: find Pixels of the results of step 2 whose Accreditation_type equals Full.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = \"Provisional\" INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = \"Full\""
            ]
        },
        {
            "id": "task077-fb3bdacc43294538ab560c64d0b75166",
            "input": "Step 1: find the apt_id of Apartment_Bookings table.\nStep 2: find the number of rows in Apartments table whose Apartments's apt_id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Apartments AS T1 WHERE T1.apt_id NOT IN ( SELECT T2.apt_id FROM Apartment_Bookings AS T2 )"
            ]
        },
        {
            "id": "task077-334d3948cd28428d90ef5e528c2ec9a0",
            "input": "Step 1: find the average bathroom_count of each value of apt_type_code in Apartments table.\nStep 2: find apt_type_code of Apartments table ordered descending by the results of step 1",
            "output": [
                "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY Avg ( bathroom_count ) Desc"
            ]
        },
        {
            "id": "task077-26987ccd23cd4df7be9a7aff82873e17",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 2005 and faculty's Campus equals 1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2005 AND T3.Campus = 1"
            ]
        },
        {
            "id": "task077-68b1ba01112246c79b5e2cd2c3a2add4",
            "input": "find product of product table whose dpi less than 5 or dpi greater than A4",
            "output": [
                "SELECT product FROM product WHERE dpi < \"A4\" OR dpi > 5"
            ]
        },
        {
            "id": "task077-533a07673e844d02bec7f5014d69225c",
            "input": "find the number of rows in Ref_Address_Types table",
            "output": [
                "SELECT Count ( * ) FROM Ref_Address_Types"
            ]
        },
        {
            "id": "task077-4f327df7c81c466f8f152887e97671e7",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_short_name equals Columbus Square and building_short_name contains Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Normandie Court\" AND T1.building_short_name LIKE \"Columbus Square\""
            ]
        },
        {
            "id": "task077-5014a24531e6442ea9712e162db906e2",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 1996 and Faculty equals 357.1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 1996 AND T3.Faculty = 357.1"
            ]
        },
        {
            "id": "task077-ec6e304cd61543fa89c9f39e4c8bb524",
            "input": "Step 1: find the number of rows of each value of student_id in Students table.\nStep 2: find student_id, last_name of Students table with largest value in the results of step 1",
            "output": [
                "SELECT student_id , last_name FROM Students GROUP BY student_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a44eeb9d659b4b2c9a02201025fc0a8f",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find CampusFee of the results of step 1 whose faculty's Year equals 2000 and csu_fees's Year equals San Jose State University",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2000 AND T2.Year = \"San Jose State University\""
            ]
        },
        {
            "id": "task077-1d2228135527470faa7e9b2558538530",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Lessons table.\nStep 2: find the average price in the results of step 1 whose first_name equals Janessa and last_name equals Sawayn",
            "output": [
                "SELECT Avg ( T2.price ) FROM Customers AS T1 JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = \"Janessa\" AND T1.last_name = \"Sawayn\""
            ]
        },
        {
            "id": "task077-bce1e88e1d364af1aa0157557b5eeeab",
            "input": "find the Model_name of chip_model table for which Launch_year equals 1",
            "output": [
                "SELECT Model_name FROM chip_model WHERE Launch_year = 1"
            ]
        },
        {
            "id": "task077-6c2ca5c3860746c8959bfd48d5d3ed10",
            "input": "find customer_status_code, phone_number, email_address of Customers table whose first_name equals Marina or last_name equals Kohler",
            "output": [
                "SELECT customer_status_code , phone_number , email_address FROM Customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\""
            ]
        },
        {
            "id": "task077-7a9c7da6824c4b5eaa0791def32f5174",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose csu_fees's Year equals 1996 and faculty's Campus equals 1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = 1996 AND T3.Campus = 1"
            ]
        },
        {
            "id": "task077-289717b3627f4bd7893e64460d2a23fc",
            "input": "find the bathroom_count of Apartments table ordered ascending by bathroom_count",
            "output": [
                "SELECT bathroom_count FROM Apartments ORDER BY bathroom_count Asc"
            ]
        },
        {
            "id": "task077-6083c9afeade4580b136ec2c79a63fc7",
            "input": "Step 1: For each row in Campuses table, find corresponding rows in csu_fees table and in faculty table.\nStep 2: find the average CampusFee in the results of step 1 whose faculty's Year equals 1996 and Faculty equals 357.1",
            "output": [
                "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 1996 AND T3.Faculty = 357.1"
            ]
        },
        {
            "id": "task077-131c30586eac49f2a3aa12bbaa51deae",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose apt_number equals Columbus Square and building_full_name contains Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = \"Columbus Square\" AND T1.building_full_name LIKE \"Normandie Court\""
            ]
        },
        {
            "id": "task077-ead55d6d5ceb49ae9f4b267d6f040be0",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose apt_number equals Columbus Square and building_short_name contains Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = \"Columbus Square\" AND T1.building_short_name LIKE \"Normandie Court\""
            ]
        },
        {
            "id": "task077-3e75cd2f5bc74e0eaca59d2d38477be6",
            "input": "find the number of rows in faculty table whose Year equals 2004",
            "output": [
                "SELECT Count ( * ) FROM faculty WHERE Year = 2004"
            ]
        },
        {
            "id": "task077-e650294cdd254b91874058c89cfc25b6",
            "input": "find the average CampusFee in csu_fees table",
            "output": [
                "SELECT Avg ( CampusFee ) FROM csu_fees"
            ]
        },
        {
            "id": "task077-9a39f46973954ff685656dae4ede48dc",
            "input": "Step 1: For each row in screen_mode table, find the corresponding rows in phone table.\nStep 2: find Hardware_Model_name of the results of step 1 whose screen_mode equals Graphics and Type equals Nokia Corporation",
            "output": [
                "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.screen_mode = \"Graphics\" AND T1.Type = \"Nokia Corporation\""
            ]
        },
        {
            "id": "task077-a31664e8e63f41b6ba1794d115c8803e",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 whose stars equals 2.\nStep 3: For each row in Movie table, find the corresponding rows in Rating table.\nStep 4: find director of the results of step 3 whose stars equals 5.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 INTERSECT SELECT T3.director FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-65094946a7224cd88fd25f909f7d5273",
            "input": "Step 1: find the number of rows of each value of teacher_id in Teachers table.\nStep 2: find teacher_id, first_name of Teachers table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT teacher_id , first_name FROM Teachers GROUP BY teacher_id ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-5461d21929654bb0bb602857bf06dc33",
            "input": "find the nickname of Staff table for which first_name equals Janessa",
            "output": [
                "SELECT nickname FROM Staff WHERE first_name = \"Janessa\""
            ]
        },
        {
            "id": "task077-d8fab4c8793448728b1ac37a2b606c80",
            "input": "Step 1: find the Rating's mID of Rating table for which stars equals 2.\nStep 2: find the title of Movie table whose Movie's mID not one of the results of step 1",
            "output": [
                "SELECT T1.title FROM Movie AS T1 WHERE T1.mID NOT IN ( SELECT T2.mID FROM Rating AS T2 WHERE T2.stars = 2 )"
            ]
        },
        {
            "id": "task077-7bcf24bc9c864dc2b48ddfce16a3f8ec",
            "input": "find the number of rows in faculty table whose Year equals 2002 and Year equals 2002",
            "output": [
                "SELECT Count ( * ) FROM faculty WHERE Year = 2002 AND Year = 2002"
            ]
        },
        {
            "id": "task077-11512f95af2540d0bc118169cbc42e6d",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_full_name contains Columbus Square",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name LIKE \"Columbus Square\""
            ]
        },
        {
            "id": "task077-bd3abee388d54012803469f799b9bfb8",
            "input": "find the average monthly_rental and the average monthly_rental in Student_Addresses table",
            "output": [
                "SELECT Avg ( monthly_rental ) , Avg ( monthly_rental ) FROM Student_Addresses"
            ]
        },
        {
            "id": "task077-9f88ea0bf8cd40ca96ace2fda825f89c",
            "input": "find the number of different Birth_Date in people table",
            "output": [
                "SELECT Count ( DISTINCT Birth_Date ) FROM people"
            ]
        },
        {
            "id": "task077-0c6e05fc72ec4bfd90cc86ad46184f84",
            "input": "Step 1: For each row in Orders table, find the corresponding rows in Invoices table.\nStep 2: find date_order_placed, Invoices's order_id, order_details of the results of step 1",
            "output": [
                "SELECT T1.date_order_placed , T2.order_id , T1.order_details FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id"
            ]
        },
        {
            "id": "task077-b4392f50883643ba80aa9515d5883ec3",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the summation of bathroom_count in the results of step 1 whose building_manager equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Columbus Square\" AND T1.building_short_name = \"Normandie Court\""
            ]
        },
        {
            "id": "task077-2b99563781214164ae43b13660e62bf7",
            "input": "Step 1: find the customer_id of Lessons table.\nStep 2: find the number of rows in Customers table whose Customers's customer_id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )"
            ]
        },
        {
            "id": "task077-b0915b100a434832af3d76b601be1ac0",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in csu_fees table.\nStep 2: find CampusFee of the results of step 1 whose Campuses's Campus equals San Francisco State University and csu_fees's Year equals 2000 and csu_fees's Year equals 1996",
            "output": [
                "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = \"San Francisco State University\" AND T2.Year = 1996 AND T2.Year = 2000"
            ]
        },
        {
            "id": "task077-fb395a1d8aa44afa898c8fb4e67b9ff4",
            "input": "Step 1: For each row in Product_Categories table, find the corresponding rows in Products table.\nStep 2: find each value of parent_product_id in the results of step 1 along with the summation of vat_rating of the corresponding rows to each value",
            "output": [
                "SELECT T2.parent_product_id , Sum ( T1.vat_rating ) FROM Product_Categories AS T1 JOIN Products AS T2 ON T1.production_type_code = T2.production_type_code GROUP BY T2.parent_product_id"
            ]
        },
        {
            "id": "task077-ba6b1361375b4a32bfed025da496dc67",
            "input": "find the summation of room_count in Apartments table whose apt_number contains Columbus Square",
            "output": [
                "SELECT Sum ( room_count ) FROM Apartments WHERE apt_number LIKE \"Columbus Square\""
            ]
        },
        {
            "id": "task077-d55644876a264936a05d1954e0da92e2",
            "input": "Step 1: find the number of rows of each value of director in Movie table.\nStep 2: find title, title in Movie table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT title , title FROM Movie GROUP BY director HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-385342e739d84584bae681ea450c9fd0",
            "input": "Step 1: For each row in Campuses table, find the corresponding rows in faculty table.\nStep 2: find Campuses's Campus of the results of step 1 whose County equals Los Angeles and faculty's Year less than 1950 and faculty's Year greater than 2002",
            "output": [
                "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T2.Year < 2002 AND T2.Year > 1950"
            ]
        },
        {
            "id": "task077-b973709eaa494105911f84dc12d866ec",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 whose stars equals 2.\nStep 3: find name, stars of the results of step 1 whose stars equals 5.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 INTERSECT SELECT T1.name , T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-e84c0cc9ffbe45209ac4a6f542723725",
            "input": "find the District_name of district table for which Headquartered_City equals Khanewal District",
            "output": [
                "SELECT District_name FROM district WHERE Headquartered_City = \"Khanewal District\""
            ]
        },
        {
            "id": "task077-dea22c9e3d834ec4a8a32f35e030fb45",
            "input": "find the number of rows in Apartment_Buildings table whose building_full_name equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Count ( * ) FROM Apartment_Buildings WHERE building_full_name = \"Columbus Square\" AND building_short_name = \"Normandie Court\""
            ]
        },
        {
            "id": "task077-3191466ec2fa4cc1adfafda2004d8fcf",
            "input": "Step 1: For each row in Apartment_Buildings table, find the corresponding rows in Apartments table.\nStep 2: find the number of rows in the results of step 1 whose apt_number equals Columbus Square and building_short_name equals Normandie Court",
            "output": [
                "SELECT Count ( * ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = \"Columbus Square\" AND T1.building_short_name = \"Normandie Court\""
            ]
        },
        {
            "id": "task077-f078fcaae6f746aa9fc6b9ee98780f03",
            "input": "Step 1: for each value of apt_type_code in Apartments table, calculate number of rows.\nStep 2: show each value of apt_type_code in Apartments table along with the corresponding summation of bathroom_count with largest value in the results of step 1",
            "output": [
                "SELECT apt_type_code , Sum ( bathroom_count ) FROM Apartments GROUP BY apt_type_code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6fc1abce65eb467baffd655c8542a819",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 with smallest value of stars",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID ORDER BY T2.stars Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-ae30f2c698cb49558cbf4fb754db08e2",
            "input": "Step 1: For each row in Reviewer table, find the corresponding rows in Rating table.\nStep 2: find name of the results of step 1 whose stars equals 5",
            "output": [
                "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 5"
            ]
        },
        {
            "id": "task077-c0e570e539074b74985d3db7698b2ca3",
            "input": "find the Headquartered_City of district table with smallest value of City_Area",
            "output": [
                "SELECT Headquartered_City FROM district ORDER BY City_Area Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-54c1c413e4b441778044de1fc8733ba7",
            "input": "find the number of rows in Breeds table",
            "output": [
                "SELECT Count ( * ) FROM Breeds"
            ]
        },
        {
            "id": "task077-12b92906051d48e1ac7142aa18385190",
            "input": "Step 1: find the number of rows of each value of grade in Highschooler table.\nStep 2: find name of Highschooler table with largest value in the results of step 1",
            "output": [
                "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b651e4ea259043bfa938e9d031673a29",
            "input": "find the Name, Country of singer table for which Name contains Hey",
            "output": [
                "SELECT Name , Country FROM singer WHERE Name LIKE \"Hey\""
            ]
        },
        {
            "id": "task077-bf85a0fe64e74df0bccda638fa97c822",
            "input": "find the Name, Population, Continent of country table with largest value of SurfaceArea",
            "output": [
                "SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-44272f3a6c47466e9096b36f5b28a7e1",
            "input": "find the number of rows in Ref_Template_Types table",
            "output": [
                "SELECT Count ( * ) FROM Ref_Template_Types"
            ]
        },
        {
            "id": "task077-9c43c76f2b6b4053acd06ae0d51840d8",
            "input": "find Title of Cartoon table whose Written_by equals Ben Jones and Directed_by equals Ben Jones",
            "output": [
                "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" AND Directed_by = \"Ben Jones\""
            ]
        },
        {
            "id": "task077-58934c36f0cf442a9fd1b765e68300e1",
            "input": "find the Type of performance table ordered descending by Share",
            "output": [
                "SELECT Type FROM performance ORDER BY Share Desc"
            ]
        },
        {
            "id": "task077-092553accf254ed3af34080c8810d637",
            "input": "Step 1: find the Continent of country table.\nStep 2: For each row in country table, find the corresponding rows in countrylanguage table.\nStep 3: find Continent of the results of step 2 whose Language equals English.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\""
            ]
        },
        {
            "id": "task077-83b116f1702545cea9c413526d91d101",
            "input": "Step 1: For each row in airports table, find the corresponding rows in flights table.\nStep 2: find FlightNo of the results of step 1 whose AirportName equals APG",
            "output": [
                "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = \"APG\""
            ]
        },
        {
            "id": "task077-84b983bae0e144d4b61b54868fa093dd",
            "input": "Step 1: find the number of rows of each value of department_id in Departments table.\nStep 2: find department_name, department_id of Departments table with largest value in the results of step 1",
            "output": [
                "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4df75e92e0494426acff64777c09d046",
            "input": "find the number of rows in airports table whose City equals Aberdeen",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE City = \"Aberdeen\""
            ]
        },
        {
            "id": "task077-f82998a5542d4ef2b0f91051115dabf6",
            "input": "Step 1: For each row in Charges table, find the corresponding rows in Treatment_Types table.\nStep 2: find treatment_type_code, charge_amount of the results of step 1",
            "output": [
                "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2"
            ]
        },
        {
            "id": "task077-ce9a2eb8cf7a412490d0e0bd3ca6d28d",
            "input": "find the Maker of car_makers table",
            "output": [
                "SELECT Maker FROM car_makers"
            ]
        },
        {
            "id": "task077-9ab3edddf21440c39a8aed326dec3d96",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find winner_name, last_name of the results of step 1 with smallest value of winner_name",
            "output": [
                "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-8e02a22f2f0e4aa28233cfe334f495e4",
            "input": "Step 1: For each row in TV_Channel table, find the corresponding rows in Cartoon table.\nStep 2: find Country of the results of step 1 whose Written_by equals Todd Casey and Directed_by equals Ben Jones",
            "output": [
                "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\""
            ]
        },
        {
            "id": "task077-d4a41b64cd0f40b0ab0887e428c88e56",
            "input": "find the number of rows in Cartoon table whose Written_by equals Joseph Kuhr and Directed_by equals Ben Jones",
            "output": [
                "SELECT Count ( * ) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\" AND Directed_by = \"Ben Jones\""
            ]
        },
        {
            "id": "task077-8cd4d1fb71f7455aadcd2bcb00d4b8e5",
            "input": "find the number of rows in course table",
            "output": [
                "SELECT Count ( * ) FROM course"
            ]
        },
        {
            "id": "task077-45a97c10e49840f3b670fed8ae286924",
            "input": "Step 1: find the number of rows of each value of Channel in Cartoon table.\nStep 2: find Title, Channel of Cartoon table with largest value in the results of step 1",
            "output": [
                "SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1e8b283a1a8a4e5baf93d777dec2bd36",
            "input": "Step 1: find the number of rows of each value of Airline in airlines table.\nStep 2: find Airline in airlines table whose corresponding value in step 1 is greater than or equals 200",
            "output": [
                "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 200"
            ]
        },
        {
            "id": "task077-7e4711a8253e48f3bc9d34be6423a59e",
            "input": "find Continent of country table whose LocalName equals Dutch or LocalName equals T",
            "output": [
                "SELECT Continent FROM country WHERE LocalName = \"T\" OR LocalName = \"Dutch\""
            ]
        },
        {
            "id": "task077-85ceee1100ac4a94984c598080b2c0ab",
            "input": "Step 1: find the Citizenship of singer table for which Birth_Year greater than 1945.\nStep 2: find the Citizenship of singer table for which Birth_Year less than 1955.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Citizenship FROM singer WHERE Birth_Year > 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < 1955"
            ]
        },
        {
            "id": "task077-d0aa76b1e9a5438aa730fc75599b9ab7",
            "input": "find the number of rows in continents table",
            "output": [
                "SELECT Count ( * ) FROM continents"
            ]
        },
        {
            "id": "task077-74e9096fb6534cf7b3b85968db624be4",
            "input": "find the Document_ID, Template_ID of Documents table for which Document_Name equals Welcome to NY",
            "output": [
                "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = \"Welcome to NY\""
            ]
        },
        {
            "id": "task077-ce2ec0ddc79e4ef5b97c7ea02684edb2",
            "input": "find the Population, GNPOld of country table for which Continent equals Brazil",
            "output": [
                "SELECT Population , GNPOld FROM country WHERE Continent = \"Brazil\""
            ]
        },
        {
            "id": "task077-4d25ead20d804b42b1f5050918f8f241",
            "input": "Step 1: find the number of rows of each value of Code2 in country table.\nStep 2: find Code2 of country table with largest value in the results of step 1",
            "output": [
                "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f8db78b04fb54b26a52f11c470375ff0",
            "input": "find the number of rows in Dogs table whose weight equals 7.57",
            "output": [
                "SELECT Count ( * ) FROM Dogs WHERE weight = 7.57"
            ]
        },
        {
            "id": "task077-a3bc04bfba9d43a5b4819fb4d647b8c5",
            "input": "Step 1: For each row in ship table, find corresponding rows in battle table and in death table.\nStep 2: find note of the results of step 1 whose date contains East",
            "output": [
                "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE \"East\""
            ]
        },
        {
            "id": "task077-597663506a7446d38cf24abdc26339ae",
            "input": "Step 1: find the Name of employee table.\nStep 2: find the Name of employee table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM employee EXCEPT SELECT Name FROM employee"
            ]
        },
        {
            "id": "task077-2845b5202750468386c065be8c9615d2",
            "input": "Step 1: For each row in Owners table, find the corresponding rows in Dogs table.\nStep 2: find first_name of the results of step 1 whose name equals Kacey.\nStep 3: find the first_name of Owners table.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = \"Kacey\" EXCEPT SELECT T1.first_name FROM Owners AS T1"
            ]
        },
        {
            "id": "task077-caea4839b009403e9be4554e53c438fa",
            "input": "Step 1: find the ID of Highschooler table.\nStep 2: find the liked_id of Likes table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2"
            ]
        },
        {
            "id": "task077-e0dcda776b26406599fa8ba42a0e85e1",
            "input": "find the tourney_name, loser_entry of matches table with largest value of minutes",
            "output": [
                "SELECT tourney_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5ecbc094334d43c79efba4b57b9c9ebb",
            "input": "Step 1: find the number of rows of each value of owner_id in Owners table.\nStep 2: find owner_id, first_name, last_name of Owners table with largest value in the results of step 1",
            "output": [
                "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d8c17e37ec534b08a9ba1726b22bc270",
            "input": "Step 1: For each row in Owners table, find the corresponding rows in Dogs table.\nStep 2: find the number of rows of each value of Dogs's owner_id in the results of step 1.\nStep 3: find Dogs's owner_id, zip_code of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f6aa90f01fc144f1b6cf24766f198f4d",
            "input": "Step 1: For each row in Charges table, find corresponding rows in Treatment_Types table and in Treatments table.\nStep 2: find the average charge_amount of each value of Treatments's treatment_type_code in the results of step 1.\nStep 3: find treatment_type_description of the results of step 1 with smallest value in the results of step 2",
            "output": [
                "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-cd4d120d620c42f9987ae420ffbf6922",
            "input": "find each value of student_id in Friend table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id"
            ]
        },
        {
            "id": "task077-27d394205b804e03803dc94939f23e9b",
            "input": "find the first_name, country_code of players table with largest value of birth_date",
            "output": [
                "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7dc68c1352714338a226b2759c8a75c9",
            "input": "find the Name, Population, Capital of country table for which Continent equals Asia with largest value of SurfaceArea",
            "output": [
                "SELECT Name , Population , Capital FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d33df75d3daf44a3b28f6a8d35985dc5",
            "input": "find Region of country table whose Name equals English or Name equals Dutch",
            "output": [
                "SELECT Region FROM country WHERE Name = \"Dutch\" OR Name = \"English\""
            ]
        },
        {
            "id": "task077-08632e43aa8c49c7bbeb606da456beda",
            "input": "Step 1: find the number of rows of each value of Country in airlines table.\nStep 2: find Abbreviation, Country of airlines table with smallest value in the results of step 1",
            "output": [
                "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-4e1112f642d848f7a234ee7371d3bda4",
            "input": "Step 1: find the number of rows of each value of permanent_address_id in Students table.\nStep 2: find current_address_id, email_address of Students table with largest value in the results of step 1",
            "output": [
                "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b8f3cd03610541fbb30ea4566725860e",
            "input": "Step 1: find the DestAirport of flights table.\nStep 2: find the AirportName of airports table whose AirportCode not one of the results of step 1",
            "output": [
                "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode NOT IN ( SELECT T2.DestAirport FROM flights AS T2 )"
            ]
        },
        {
            "id": "task077-dfd2f3e2cda34e27a5d63b33088b77d8",
            "input": "find the LifeExpectancy, Name, LocalName of country table with largest value of SurfaceArea",
            "output": [
                "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6976bef8fa3549419f38f2c50385f5ce",
            "input": "find each value of Template_Type_Code in Templates table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code"
            ]
        },
        {
            "id": "task077-be0553f19d284842b496ccde6aa15c74",
            "input": "Step 1: find the number of rows of each value of City in airports table.\nStep 2: find City of airports table with largest value in the results of step 1",
            "output": [
                "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6e9ca343087e4a658aa214c286dc507d",
            "input": "find the Air_Date, Episode of TV_series table for which Episode equals A Love of a Lifetime",
            "output": [
                "SELECT Air_Date , Episode FROM TV_series WHERE Episode = \"A Love of a Lifetime\""
            ]
        },
        {
            "id": "task077-2dbd3a2cb8c44748800abe153df35120",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find the maximum Horsepower in the results of step 1 whose model_list's Model equals amc or Year less than 1",
            "output": [
                "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = \"amc\" OR T3.Year < 1"
            ]
        },
        {
            "id": "task077-3944d2812da94732bcfbde8c5add925e",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find the number of rows of each value of loser_id in the results of step 1.\nStep 3: find first_name, country_code of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-fd4819cc7f4b421dab0c173af5541b11",
            "input": "Step 1: find the number of rows of each value of DestAirport in flights table.\nStep 2: find DestAirport of flights table with smallest value in the results of step 1",
            "output": [
                "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-27b8aebbffa74833ba5eb0356fd42b20",
            "input": "Step 1: find the number of rows of each value of Continent in country table.\nStep 2: find Name, Continent of country table ordered ascending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT 3"
            ]
        },
        {
            "id": "task077-300fd6d1a8114a19ad39fb2e0453ce75",
            "input": "find Title of Cartoon table whose Written_by equals Ben Jones or Directed_by equals Brandon Vietti",
            "output": [
                "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\""
            ]
        },
        {
            "id": "task077-c627f46b08a5472cb739f660ad873606",
            "input": "Step 1: find the rows in country table whose Continent equals Asia.\nStep 2: find each value of Code2 in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT Code2 FROM country WHERE Continent = \"Asia\" GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8ea2a50a232a45d48ae7ca6f9b915522",
            "input": "Step 1: find the Airline of airlines table for which Abbreviation equals CVO.\nStep 2: For each row in airlines table, find the corresponding rows in airports table.\nStep 3: find Airline of the results of step 2 whose AirportName equals APG.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = \"CVO\" EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"APG\""
            ]
        },
        {
            "id": "task077-3f1a8104dc9948af840b465f585bf27c",
            "input": "find the name, date_of_birth of Dogs table with largest value of age",
            "output": [
                "SELECT name , date_of_birth FROM Dogs ORDER BY age Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-cb6e916bebe649d38b9a215b3d0e1fdc",
            "input": "Step 1: find the tourney_name of matches table for which year equals 2013.\nStep 2: find the tourney_name of matches table for which year equals 2016.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT tourney_name FROM matches WHERE year = 2013 INTERSECT SELECT tourney_name FROM matches WHERE year = 2016"
            ]
        },
        {
            "id": "task077-948483d5e6784d9eabf086759ac26f18",
            "input": "find the date_departed, date_of_birth of Dogs table for which gender equals 1",
            "output": [
                "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = 1"
            ]
        },
        {
            "id": "task077-c4af6cecbcf846c3a672c4e513c5663e",
            "input": "find the number of different department_name in Departments table",
            "output": [
                "SELECT Count ( DISTINCT department_name ) FROM Departments"
            ]
        },
        {
            "id": "task077-bab367145f1f424687bafba71361bb1a",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find each value of loser_id in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id"
            ]
        },
        {
            "id": "task077-bdf161c834d54cc0bdc37bd711f674c5",
            "input": "find the number of rows in Pets table whose PetType equals F and pet_age equals 3",
            "output": [
                "SELECT Count ( * ) FROM Pets WHERE PetType = \"F\" AND pet_age = 3"
            ]
        },
        {
            "id": "task077-891df6fa51cf4a8185011b233e238c5c",
            "input": "Step 1: find the StuID of Student table.\nStep 2: find the StuID of Has_Pet table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2"
            ]
        },
        {
            "id": "task077-cbbb2e541ad542e68e32860acd57fd6e",
            "input": "Step 1: find the name of Highschooler table for which grade greater than 2.\nStep 2: find the name of Highschooler table for which grade less than 5.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT name FROM Highschooler WHERE grade > 2 INTERSECT SELECT name FROM Highschooler WHERE grade < 5"
            ]
        },
        {
            "id": "task077-9e2b2b7dff4d4da08b09c8463becfc2d",
            "input": "find the number of rows in airlines table",
            "output": [
                "SELECT Count ( * ) FROM airlines"
            ]
        },
        {
            "id": "task077-36c88a1110184002ae37775876cd8e6b",
            "input": "Step 1: For each row in TV_Channel table, find the corresponding rows in Cartoon table.\nStep 2: find series_name, Country of the results of step 1 whose Written_by equals Ben Jones and Directed_by equals Michael Chang",
            "output": [
                "SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\" AND T2.Directed_by = \"Michael Chang\""
            ]
        },
        {
            "id": "task077-ea6960f55af840738fcc26285aac463a",
            "input": "Step 1: For each row in country table, find the corresponding rows in city table.\nStep 2: find District of the results of step 1 whose Continent equals T and LocalName equals Chinese",
            "output": [
                "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" AND T2.LocalName = \"Chinese\""
            ]
        },
        {
            "id": "task077-655f427cb82d4196865702bef89c7b41",
            "input": "Step 1: find the number of rows of each value of grade, grade in Highschooler table.\nStep 2: find name in Highschooler table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-78c024c58bcb4ea6b68c0ef4417e5d51",
            "input": "find the number of rows in airports table whose Country equals ATO",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE Country = \"ATO\""
            ]
        },
        {
            "id": "task077-e91f4860ea6a4db5a9452cfe506e7f43",
            "input": "Step 1: find the number of rows of each value of winner_entry in matches table.\nStep 2: find tourney_name, loser_rank of matches table with largest value in the results of step 1",
            "output": [
                "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2dce2609d98e4569b1faa4f7181f6f54",
            "input": "find the number of different Code2 in country table whose IndepYear less than 1930",
            "output": [
                "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < 1930"
            ]
        },
        {
            "id": "task077-365f9506cf714ea18301f9a32d26ec5d",
            "input": "find the summation of SurfaceArea in country table whose Continent equals Asia and Continent equals Europe",
            "output": [
                "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = \"Europe\" AND Continent = \"Asia\""
            ]
        },
        {
            "id": "task077-0f0161407c2b4ca1866b83a608fc4621",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find first_name, country_code, loser_age of the results of step 1 with largest value of winner_rank",
            "output": [
                "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6437f058bd0a4784a7a90cc938aa7bf6",
            "input": "Step 1: find the number of rows of each value of Template_Type_Code in Templates table.\nStep 2: find Template_Type_Code of Templates table with largest value in the results of step 1",
            "output": [
                "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-76d3e7d24dd34bffa1894aed63ccf3e4",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find the average Maker in the results of step 1 whose Year less than 1980",
            "output": [
                "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < 1980"
            ]
        },
        {
            "id": "task077-ae3833fbcef6401da50530a42d4477b7",
            "input": "find Continent of country table whose Continent equals English or LocalName equals Dutch",
            "output": [
                "SELECT Continent FROM country WHERE Continent = \"English\" OR LocalName = \"Dutch\""
            ]
        },
        {
            "id": "task077-e24c86d7214a4583b07fdcc740834cf9",
            "input": "find the property_type_description of Ref_Property_Types table",
            "output": [
                "SELECT property_type_description FROM Ref_Property_Types"
            ]
        },
        {
            "id": "task077-b9b278f1b6c740309b78cb48174867c1",
            "input": "find the number of rows in airlines table whose Airline equals Ashley and Airline equals Aberdeen",
            "output": [
                "SELECT Count ( * ) FROM airlines WHERE Airline = \"Aberdeen\" AND Airline = \"Ashley\""
            ]
        },
        {
            "id": "task077-34f97302f90945daa7b3d4f439ec72d7",
            "input": "find each value of Continent in continents table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent"
            ]
        },
        {
            "id": "task077-705ba8049f5b4796afe6de7fe6620c62",
            "input": "find the number of rows in Templates table whose Template_Type_Code equals PPT",
            "output": [
                "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = \"PPT\""
            ]
        },
        {
            "id": "task077-13c646005f03495094f4a0a8ff14cd8e",
            "input": "Step 1: find the first_name of Students table.\nStep 2: find the first_name of Students table.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT first_name FROM Students UNION SELECT first_name FROM Students"
            ]
        },
        {
            "id": "task077-c9ae45771e564466a56adcf941ba052d",
            "input": "find each value of winner_rank in matches table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank"
            ]
        },
        {
            "id": "task077-4ec9080d7f074ec5a50292da65967740",
            "input": "find the name of Highschooler table for which grade equals Kyle",
            "output": [
                "SELECT name FROM Highschooler WHERE grade = \"Kyle\""
            ]
        },
        {
            "id": "task077-670254fa9b004de2860a409d41f1a2cf",
            "input": "find the number of rows in country table whose LocalName equals Spanish",
            "output": [
                "SELECT Count ( * ) FROM country WHERE LocalName = \"Spanish\""
            ]
        },
        {
            "id": "task077-7f1c55b6c5364730922332ff6c440b02",
            "input": "find the Cylinders of cars_data table with smallest value of Accelerate",
            "output": [
                "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-34cb2c331186472296b44d45fdfb105d",
            "input": "Step 1: find the Content of TV_Channel table.\nStep 2: For each row in TV_Channel table, find the corresponding rows in Cartoon table.\nStep 3: find Content of the results of step 2 whose Written_by equals Ben Jones.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\""
            ]
        },
        {
            "id": "task077-aabad04316ee4f9f9b2b5adb19c8531a",
            "input": "find the maximum Population and the minimum GNP in country table",
            "output": [
                "SELECT Max ( Population ) , Min ( GNP ) FROM country"
            ]
        },
        {
            "id": "task077-5efbe3bce5cd4218b8da2e3214c6be0c",
            "input": "Step 1: find the Template_Type_Code of Templates table.\nStep 2: find the Template_Type_Code of Templates table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates"
            ]
        },
        {
            "id": "task077-05aa15af6d17451e93778cb4028d7cd8",
            "input": "Step 1: For each row in airlines table, find the corresponding rows in airports table.\nStep 2: find the number of rows in the results of step 1 whose airports's Country equals United Airlines and Airline equals ASY",
            "output": [
                "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"ASY\""
            ]
        },
        {
            "id": "task077-2383040db0724d2b98c1f22da61995ee",
            "input": "Step 1: For each row in conductor table, find the corresponding rows in orchestra table.\nStep 2: find Name, Year_of_Founded of the results of step 1",
            "output": [
                "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID"
            ]
        },
        {
            "id": "task077-76a0b2483e4f4d42ae762d58ffe342c3",
            "input": "Step 1: For each row in Charges table, find the corresponding rows in Owners table.\nStep 2: find the summation of charge_amount of each value of owner_id in the results of step 1.\nStep 3: find owner_id, zip_code of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ca6609d028114f24b5ed705375592c87",
            "input": "find the Document_Name, Document_ID of Documents table for which Document_Description contains w",
            "output": [
                "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE \"w\""
            ]
        },
        {
            "id": "task077-0ef6ac04c40441db8eface4ba6cbb6c9",
            "input": "find the summation of GNP and the summation of Population in country table whose Continent equals US Territory",
            "output": [
                "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = \"US Territory\""
            ]
        },
        {
            "id": "task077-1b6eaa7a78704e6192186582176ad5dd",
            "input": "Step 1: find the number of rows of each value of course_name in Courses table.\nStep 2: find course_name of Courses table with largest value in the results of step 1",
            "output": [
                "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e09e900eba854ba1817a7c7d08a749fb",
            "input": "Step 1: For each row in airlines table, find the corresponding rows in airports table.\nStep 2: find Airline of the results of step 1 whose AirportName equals AHD",
            "output": [
                "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"AHD\""
            ]
        },
        {
            "id": "task077-30730beeb6b649cc881e09c5b1fee7fb",
            "input": "find the other_details of Student_Enrolment table ordered descending by other_details",
            "output": [
                "SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc"
            ]
        },
        {
            "id": "task077-57b7f3bc371345918a0b9f2170e7c507",
            "input": "Step 1: find the Continent of country table for which LocalName equals English.\nStep 2: find the average Population in country table whose Continent not one of the results of step 1",
            "output": [
                "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = \"English\" )"
            ]
        },
        {
            "id": "task077-8ac6b0df2dad4d50b01779290b1831b8",
            "input": "find each value of course_id in Student_Enrolment_Courses table along with the maximum student_course_id of the corresponding rows to each value",
            "output": [
                "SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id"
            ]
        },
        {
            "id": "task077-ec7cd556f9e549e38f2621dcaeac623d",
            "input": "Step 1: find the number of rows of each value of Airline in airlines table.\nStep 2: find Airline of airlines table with largest value in the results of step 1",
            "output": [
                "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-38e529ee6aec4ad1957b15be1d305266",
            "input": "Step 1: For each row in shop table, find the corresponding rows in hiring table.\nStep 2: find each value of hiring's Shop_ID in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID"
            ]
        },
        {
            "id": "task077-f685ee74140246928501b6ac0951e30d",
            "input": "find the Document_ID of Documents table for which Document_Description equals Presentation",
            "output": [
                "SELECT Document_ID FROM Documents WHERE Document_Description = \"Presentation\""
            ]
        },
        {
            "id": "task077-363f3cd43c29457f85d978789030cbcd",
            "input": "Step 1: For each row in Highschooler table, find the corresponding rows in Friend table.\nStep 2: find the number of rows of each value of student_id in the results of step 1.\nStep 3: find name in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-95dd0f6a75b84b22af6124ef7b7b019b",
            "input": "Step 1: For each row in country table, find the corresponding rows in city table.\nStep 2: find the  city's Name in the results of step 1 whose country's Name equals English ordered descending by city's Population.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = \"English\" ORDER BY T1.Population Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0ba1a26420224662847d563b302f025b",
            "input": "Step 1: find the CountryCode of countrylanguage table for which Language equals Republic.\nStep 2: find the Code of country table whose Continent equals the results of step 1.\nStep 3: For each row in country table, find the corresponding rows in countrylanguage table.\nStep 4: find Code of the results of step 3 whose Language equals English.\nStep 5: show the rows that are in the results of step 2 but not in the results of step 4",
            "output": [
                "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = \"Republic\" ) EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\""
            ]
        },
        {
            "id": "task077-1915ffcb377f42d48e9afdb126e82945",
            "input": "Step 1: find the Name of teacher table.\nStep 2: find the Name of teacher table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher"
            ]
        },
        {
            "id": "task077-bd4fa12e60a04f5f87a606b15844b87b",
            "input": "find the rows of Students table ordered descending by date_left",
            "output": [
                "SELECT * FROM Students ORDER BY date_left Desc"
            ]
        },
        {
            "id": "task077-56314c645bb348f8a27511d9d83f11d6",
            "input": "find the minimum Weight in cars_data table whose Year equals 1",
            "output": [
                "SELECT Min ( Weight ) FROM cars_data WHERE Year = 1"
            ]
        },
        {
            "id": "task077-f992eada434a4e18967d48e2820900e0",
            "input": "find the Airline of airlines table for which Abbreviation equals AHD",
            "output": [
                "SELECT Airline FROM airlines WHERE Abbreviation = \"AHD\""
            ]
        },
        {
            "id": "task077-4ca829173c094040b7dc66a199534f61",
            "input": "find the transcript_date, other_details of Transcripts table",
            "output": [
                "SELECT transcript_date , other_details FROM Transcripts"
            ]
        },
        {
            "id": "task077-cb6a01a5e9124774a01a54371375dfc7",
            "input": "find the rows of Treatments table with smallest value of date_of_treatment",
            "output": [
                "SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-ae7122853a8541ad93a2f8b8ee0fe04a",
            "input": "Step 1: find the Template_Type_Code of Ref_Template_Types table.\nStep 2: find the Template_Type_Code of Templates table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2"
            ]
        },
        {
            "id": "task077-7c86c219231b4800bb656a057d012fed",
            "input": "Step 1: For each row in country table, find the corresponding rows in city table.\nStep 2: find city's Name of the results of step 1 whose Continent equals T.\nStep 3: find city's Name of the results of step 1 whose Continent equals Europe.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" EXCEPT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"Europe\""
            ]
        },
        {
            "id": "task077-2684d611f51043cb9d58b8b17f369861",
            "input": "Step 1: find the first_name of Students table for which cell_mobile_number contains Haiti.\nStep 2: find the first_name of Students table for which cell_mobile_number equals 09700166582.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT first_name FROM Students WHERE cell_mobile_number LIKE \"Haiti\" UNION SELECT first_name FROM Students WHERE cell_mobile_number = 09700166582"
            ]
        },
        {
            "id": "task077-a681457cff754f879392e39ceeea2017",
            "input": "find the number of rows in cars_data table whose Cylinders greater than 150",
            "output": [
                "SELECT Count ( * ) FROM cars_data WHERE Cylinders > 150"
            ]
        },
        {
            "id": "task077-22f9daa3416949cda40e5957098d187e",
            "input": "Step 1: find the Continent of country table for which Code2 equals T.\nStep 2: find the Continent of country table for which Code2 equals French.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Continent FROM country WHERE Code2 = \"T\" INTERSECT SELECT Continent FROM country WHERE Code2 = \"French\""
            ]
        },
        {
            "id": "task077-ea2eee960c814b05974adadccd0eae03",
            "input": "Step 1: For each row in singer table, find the corresponding rows in song table.\nStep 2: find each value of Singer_ID in the results of step 1 along with the summation of Sales of the corresponding rows to each value",
            "output": [
                "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID"
            ]
        },
        {
            "id": "task077-a22e7e66a7bc4c00b4eaaac131bae453",
            "input": "find the average loser_age and the average loser_age in matches table",
            "output": [
                "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches"
            ]
        },
        {
            "id": "task077-183da26dabe5417687f90b1ebc7a864c",
            "input": "find the number of rows in city table",
            "output": [
                "SELECT Count ( * ) FROM city"
            ]
        },
        {
            "id": "task077-e32ba8be06be4498b107a9a931dff427",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find without repetition model_list's Model of the results of step 1 whose Weight greater than 3500.\nStep 3: For each row in car_makers table, find the corresponding rows in model_list table.\nStep 4: find model_list's Model of the results of step 3 whose car_makers's Maker equals Ford Motor Company.\nStep 5: show the rows that are in the results of step 2 but not in the results of step 4",
            "output": [
                "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > 3500 EXCEPT SELECT T1.Model FROM car_makers AS T4 JOIN model_list AS T1 ON T4.Id = T1.Maker WHERE T4.Maker = \"Ford Motor Company\""
            ]
        },
        {
            "id": "task077-d83bf53b0f244ae6bf1063bdb84b30c2",
            "input": "find the number of rows in car_makers table whose Country equals usa",
            "output": [
                "SELECT Count ( * ) FROM car_makers WHERE Country = \"usa\""
            ]
        },
        {
            "id": "task077-085681e65ae1432a92a665ca0558541c",
            "input": "find the number of rows in Highschooler table whose grade equals Kyle",
            "output": [
                "SELECT Count ( * ) FROM Highschooler WHERE grade = \"Kyle\""
            ]
        },
        {
            "id": "task077-810a7fc1ebcc4003a1f3f6dc5af64e26",
            "input": "find the first_name, middle_name, last_name of Students table",
            "output": [
                "SELECT first_name , middle_name , last_name FROM Students"
            ]
        },
        {
            "id": "task077-32d49248f8ad45809c54d63d38195cf5",
            "input": "Step 1: For each row in conductor table, find the corresponding rows in orchestra table.\nStep 2: find Name of the results of step 1 with largest value of Year_of_Founded",
            "output": [
                "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d1d919fea6034a5fb359ea83f50170d2",
            "input": "Step 1: For each row in shop table, find the corresponding rows in hiring table.\nStep 2: find the number of rows of each value of hiring's Shop_ID in the results of step 1.\nStep 3: find Name, District of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7e7543e8f3a34d14b6504f6652287b47",
            "input": "Step 1: find the number of rows of each value of semester_id in Semesters table.\nStep 2: find semester_name, semester_id of Semesters table with largest value in the results of step 1",
            "output": [
                "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-901f203b3f3446649798863a1de06f88",
            "input": "find the If_first_show of show table ordered ascending by If_first_show",
            "output": [
                "SELECT If_first_show FROM show ORDER BY If_first_show Asc"
            ]
        },
        {
            "id": "task077-9738cd7477aa4f3ebfce30664d41ca02",
            "input": "Step 1: find the line_1 of Addresses table for which line_1 equals 2294 Grant Square Apt. 235.\nStep 2: find the line_1 of Addresses table for which line_1 equals 2294 Grant Square Apt. 235.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT line_1 FROM Addresses WHERE line_1 = \"2294 Grant Square Apt. 235\" INTERSECT SELECT line_1 FROM Addresses WHERE line_1 = \"2294 Grant Square Apt. 235\""
            ]
        },
        {
            "id": "task077-4fa9638f04e54404aec2f958ba1d9277",
            "input": "find the number of rows in Pets table whose pet_age greater than 20",
            "output": [
                "SELECT Count ( * ) FROM Pets WHERE pet_age > 20"
            ]
        },
        {
            "id": "task077-13f99edae42145b29e3d84c8e286f183",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find model_list's Model of the results of step 1 whose Weight greater than 3500.\nStep 3: For each row in car_makers table, find the corresponding rows in model_list table.\nStep 4: find model_list's Model of the results of step 3 whose car_makers's Maker equals Ford Motor Company.\nStep 5: show the rows that are in the results of step 2 but not in the results of step 4",
            "output": [
                "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > 3500 EXCEPT SELECT T1.Model FROM car_makers AS T4 JOIN model_list AS T1 ON T4.Id = T1.Maker WHERE T4.Maker = \"Ford Motor Company\""
            ]
        },
        {
            "id": "task077-0f233c501afa480fa37af4d94eacb1e1",
            "input": "find Name of singer table whose Citizenship equals 1948 or Citizenship equals 1949",
            "output": [
                "SELECT Name FROM singer WHERE Citizenship = 1949 OR Citizenship = 1948"
            ]
        },
        {
            "id": "task077-48c7ba4042694fe7b6e5a1ff04bb9ecc",
            "input": "Step 1: find the number of rows of each value of course_id in Courses table.\nStep 2: find course_id, course_description of Courses table with largest value in the results of step 1",
            "output": [
                "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ffdcf8d861f541e8ad8ae35d68d72798",
            "input": "find the number of rows in Departments table whose department_name equals engineer",
            "output": [
                "SELECT Count ( * ) FROM Departments WHERE department_name = \"engineer\""
            ]
        },
        {
            "id": "task077-0a3b5512ab2648f0a2a0143c82e3456a",
            "input": "find the Document_ID of Documents table for which Document_Name contains Ireland",
            "output": [
                "SELECT Document_ID FROM Documents WHERE Document_Name LIKE \"Ireland\""
            ]
        },
        {
            "id": "task077-1dd4fcccd1f3479097bfcca90ccfda5a",
            "input": "find the Code of country table for which LocalName equals Spanish",
            "output": [
                "SELECT Code FROM country WHERE LocalName = \"Spanish\""
            ]
        },
        {
            "id": "task077-1165b28e7b9f4e7eba6403b334ebce47",
            "input": "find the name, date_of_birth of Dogs table with largest value of weight",
            "output": [
                "SELECT name , date_of_birth FROM Dogs ORDER BY weight Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-fd0499ed61b242ee843b42c1f1ddf59f",
            "input": "Step 1: find the Package_Option of TV_Channel table.\nStep 2: For each row in TV_Channel table, find the corresponding rows in Cartoon table.\nStep 3: find Package_Option of the results of step 2 whose Written_by equals Ben Jones.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Package_Option FROM TV_Channel AS T1 EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\""
            ]
        },
        {
            "id": "task077-cdf639e7dd1646ea9230b32be1624e4c",
            "input": "find the Template_ID, Version_Number, Template_Type_Code, Template_Type_Code of Templates table",
            "output": [
                "SELECT Template_ID , Version_Number , Template_Type_Code , Template_Type_Code FROM Templates"
            ]
        },
        {
            "id": "task077-10e2064319934fb1b1e4d4c9b0f95396",
            "input": "find the FullName, Maker of car_makers table with smallest value of FullName",
            "output": [
                "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-cd00142d661c4fe2994727afe7d18aaf",
            "input": "find the SurfaceArea of country table for which Name equals Caribbean",
            "output": [
                "SELECT SurfaceArea FROM country WHERE Name = \"Caribbean\""
            ]
        },
        {
            "id": "task077-dffbc419cd88413895f117bfa285d2f4",
            "input": "Step 1: find the Name, SurfaceArea of country table ordered descending by Population.\nStep 2: only show the first 5 rows of the results",
            "output": [
                "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT 5"
            ]
        },
        {
            "id": "task077-847897206c914bf6b2316607492fbe38",
            "input": "Step 1: find the number of rows of each value of Airline in airlines table.\nStep 2: find Airline in airlines table whose corresponding value in step 1 is greater than or equals 10",
            "output": [
                "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 10"
            ]
        },
        {
            "id": "task077-1051975813fa4239b7c6585ca20b9893",
            "input": "Step 1: find the number of rows of each value of winner_name in matches table.\nStep 2: find winner_name, loser_rank of matches table with largest value in the results of step 1",
            "output": [
                "SELECT winner_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b1d59de36f9d436cb43fc904a70ef0c1",
            "input": "find the age of Dogs table with smallest value of age",
            "output": [
                "SELECT age FROM Dogs ORDER BY age Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-db31e7ccccba49bdacd6edaf5729d0c5",
            "input": "Step 1: find the ID of Highschooler table.\nStep 2: find the liked_id of Likes table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2"
            ]
        },
        {
            "id": "task077-8ebc8ab6b8d24e17a626ba9a6ed517ac",
            "input": "find the number of rows in cars_data table whose Accelerate equals 1",
            "output": [
                "SELECT Count ( * ) FROM cars_data WHERE Accelerate = 1"
            ]
        },
        {
            "id": "task077-2e98b3fa44dd492f96c31914de20e97c",
            "input": "Step 1: find the average Average of each value of Stadium_ID in stadium table.\nStep 2: find Name, Capacity of stadium table with largest value in the results of step 1",
            "output": [
                "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-10a905aa654445458475d41b1a4fb3c9",
            "input": "Step 1: For each row in Has_Pet table, find corresponding rows in Student table and in Pets table.\nStep 2: find Fname of the results of step 1 whose PetType equals cat.\nStep 3: For each row in Pets table, find the corresponding rows in Has_Pet table.\nStep 4: find Has_Pet's StuID of the results of step 3 whose PetType equals dog.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"cat\" INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"dog\""
            ]
        },
        {
            "id": "task077-efca6247558742989d056d4c54ed5d8f",
            "input": "find the country_code of players table for which player_id greater than 50",
            "output": [
                "SELECT country_code FROM players WHERE player_id > 50"
            ]
        },
        {
            "id": "task077-764b7457434143d2bfa12a098434c85a",
            "input": "Step 1: For each row in model_list table, find corresponding rows in car_makers table and in car_names table.\nStep 2: find MakeId, car_makers's Maker of the results of step 1 whose model_list's Model greater than or equals 2.\nStep 3: find MakeId, car_makers's Maker of the results of step 1 whose model_list's Model greater than 3.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = 2 INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > 3"
            ]
        },
        {
            "id": "task077-8eb81c62c3294bbea26c0e3c86e6697f",
            "input": "Step 1: find the CountryName of countries table.\nStep 2: find the CountryName of countries table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries"
            ]
        },
        {
            "id": "task077-f27289792956424185fa4fd1dfb94ba3",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find model_list's Model of the results of step 1 with smallest value of Accelerate",
            "output": [
                "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-8cdc0ff0620e48118a25e416a9f72384",
            "input": "Step 1: find the number of rows of each value of Country in car_makers table.\nStep 2: find Country, Id in car_makers table whose corresponding value in step 1 is greater than or equals 1",
            "output": [
                "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-6eba155f11f04a93a1dd2558d2fa8691",
            "input": "Step 1: For each row in airlines table, find the corresponding rows in airports table.\nStep 2: find Airline of the results of step 1 whose airports's Country equals APG.\nStep 3: find Airline of the results of step 1 whose airports's Country equals CVO.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"APG\" INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"CVO\""
            ]
        },
        {
            "id": "task077-ceeb402992cf41b7bc305f7768c19d5a",
            "input": "find the Name, Population, Continent of country table",
            "output": [
                "SELECT Name , Population , Continent FROM country"
            ]
        },
        {
            "id": "task077-8eb7b70cb1334a0f8e33eba936417a8b",
            "input": "Step 1: For each row in Templates table, find the corresponding rows in Documents table.\nStep 2: find Document_ID, Date_Effective_To of the results of step 1 whose Document_Name equals Welcome to NY",
            "output": [
                "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = \"Welcome to NY\""
            ]
        },
        {
            "id": "task077-4c9120d1915e475487cab05380d7faca",
            "input": "find the number of different Code2 in country table whose Continent equals Africa",
            "output": [
                "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = \"Africa\""
            ]
        },
        {
            "id": "task077-bd06693fc6634b0da5dd3173e9233409",
            "input": "find the number of rows in Highschooler table whose name equals Kyle",
            "output": [
                "SELECT Count ( * ) FROM Highschooler WHERE name = \"Kyle\""
            ]
        },
        {
            "id": "task077-5271c9096a0a40bca7f560246dadd6b8",
            "input": "Step 1: find the number of rows of each value of Channel in TV_series table.\nStep 2: find Channel in TV_series table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-66959c005b064fc7849d12e57a1fa63d",
            "input": "find without repetition the id, name of ship table for which ship_type equals Brig",
            "output": [
                "SELECT DISTINCT id , name FROM ship WHERE ship_type = \"Brig\""
            ]
        },
        {
            "id": "task077-4453832c235844518e93c44dc0ec4bb6",
            "input": "find each value of Cylinders in cars_data table along with the maximum Cylinders of the corresponding rows to each value",
            "output": [
                "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders"
            ]
        },
        {
            "id": "task077-016cc5dfed0446bcbc81f2c67d673b04",
            "input": "Step 1: For each row in model_list table, find the corresponding rows in car_names table.\nStep 2: find MakeId, ModelId of the results of step 1 whose model_list's Model greater than or equals 2.\nStep 3: find MakeId, ModelId of the results of step 1 whose model_list's Model greater than 3.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = 2 INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > 3"
            ]
        },
        {
            "id": "task077-38ff910f438c43559491a63692c88c41",
            "input": "find the Hight_definition_TV, Country of TV_Channel table for which Language not equals English",
            "output": [
                "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = \"English\""
            ]
        },
        {
            "id": "task077-f8aee080e5b340628cd8dca53a3c6d73",
            "input": "find the average LifeExpectancy in country table whose Continent equals Central Africa",
            "output": [
                "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = \"Central Africa\""
            ]
        },
        {
            "id": "task077-5e044f2754704111a207c2332d94b1f7",
            "input": "Step 1: find the number of rows in countrylanguage table whose Language equals English.\nStep 2: For each row in country table, find the corresponding rows in countrylanguage table.\nStep 3: find Continent of the results of step 2 whose Language equals Dutch.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT Count ( * ) FROM countrylanguage AS T1 WHERE T1.Language = \"English\" INTERSECT SELECT T2.Continent FROM country AS T2 JOIN countrylanguage AS T1 ON T2.Code = T1.CountryCode WHERE T1.Language = \"Dutch\""
            ]
        },
        {
            "id": "task077-7be5dda428324e828859b55090fd4c60",
            "input": "Step 1: find the number of rows of each value of Model in model_list table.\nStep 2: find Model of model_list table with largest value in the results of step 1",
            "output": [
                "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9ab99e0c6b2d4497a7e1ef428e92a168",
            "input": "Step 1: For each row in airports table, find the corresponding rows in flights table.\nStep 2: find AirportCode of the results of step 1 with largest value of FlightNo",
            "output": [
                "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d9b44049df5a4e19bd7c945ca5001922",
            "input": "Step 1: For each row in teacher table, find the corresponding rows in course_arrange table.\nStep 2: find each value of course_arrange's Teacher_ID in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID"
            ]
        },
        {
            "id": "task077-6065d16848024005b020cbefdf22ebb7",
            "input": "find the maximum Weight in cars_data table whose Cylinders equals 1",
            "output": [
                "SELECT Max ( Weight ) FROM cars_data WHERE Cylinders = 1"
            ]
        },
        {
            "id": "task077-96a7b70ae8ea40babdf7d3bb15ba56eb",
            "input": "find the Template_Details, Template_Type_Code of Templates table for which Version_Number greater than 5",
            "output": [
                "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > 5"
            ]
        },
        {
            "id": "task077-58473c389839450687de602c1e87877d",
            "input": "Step 1: For each row in ship table, find the corresponding rows in death table.\nStep 2: find the summation of injured of each value of death's id in the results of step 1.\nStep 3: find ship's id, name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a59257c1ca494a0eb84b0dc606071f68",
            "input": "find the Name of country table with smallest value of LifeExpectancy",
            "output": [
                "SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-a39e74a8141247489209cb8143d818e4",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Students table.\nStep 2: find first_name of the results of step 1 whose country equals Iceland or cell_mobile_number equals (096)889-8954x524.\nStep 3: find first_name of the results of step 1 whose country equals 09700166582 or cell_mobile_number equals Haiti.\nStep 4: show the rows that are in any of the results of step 2 or the results of step 3",
            "output": [
                "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = \"Iceland\" OR T2.cell_mobile_number = \"(096)889-8954x524\" UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = 09700166582 OR T2.cell_mobile_number = \"Haiti\""
            ]
        },
        {
            "id": "task077-072662efad2f4653b78c124a97bef20d",
            "input": "find the number of rows in airports table whose AirportName equals Aberdeen",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE AirportName = \"Aberdeen\""
            ]
        },
        {
            "id": "task077-78899ca013a7415fadbacb1e0a6e517d",
            "input": "Step 1: find the average charge_amount in Charges table.\nStep 2: For each row in Charges table, find the corresponding rows in Professionals table.\nStep 3: find first_name, last_name in the results of step 2 whose charge_amount less than the results of step 1",
            "output": [
                "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )"
            ]
        },
        {
            "id": "task077-3ed51d218eb849759c81a4b80fd74d71",
            "input": "find the first_name, last_name, owner_id of Owners table",
            "output": [
                "SELECT first_name , last_name , owner_id FROM Owners"
            ]
        },
        {
            "id": "task077-fdc62a68cc064e3394be3a73f94a3c6a",
            "input": "Step 1: For each row in TV_Channel table, find the corresponding rows in Cartoon table.\nStep 2: find Country of the results of step 1 whose Written_by equals Michael Jelenic.\nStep 3: find Country of the results of step 1 whose Written_by equals Todd Casey and Directed_by equals Ben Jones.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Michael Jelenic\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\""
            ]
        },
        {
            "id": "task077-adae5cab609f4c959f1e6e1d9509f7be",
            "input": "Step 1: find the StuID of Has_Pet table.\nStep 2: find the Fname, Age of Student table whose Student's StuID not one of the results of step 1",
            "output": [
                "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )"
            ]
        },
        {
            "id": "task077-309bf73458ff452b9bc7ad34b25dd7ff",
            "input": "Step 1: For each row in people table, find the corresponding rows in poker_player table.\nStep 2: find Earnings of the results of step 1 with largest value of Height",
            "output": [
                "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-429fe706bebb4035979c4ef624502b71",
            "input": "Step 1: find the semester_name of Semesters table for which semester_name equals Master.\nStep 2: find the semester_name of Semesters table for which semester_description equals Bachelor.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT semester_name FROM Semesters WHERE semester_name = \"Master\" INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = \"Bachelor\""
            ]
        },
        {
            "id": "task077-9547bbc850ef4d69b8417b4cb04009ac",
            "input": "Step 1: For each row in Owners table, find the corresponding rows in Dogs table.\nStep 2: find first_name of the results of step 1 whose state equals Virginia and name equals Kacey",
            "output": [
                "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = \"Virginia\" AND T2.name = \"Kacey\""
            ]
        },
        {
            "id": "task077-0bcdda4ced204a43b8737fe9b1864e8e",
            "input": "find the Name, Country, Age of singer table ordered ascending by Age",
            "output": [
                "SELECT Name , Country , Age FROM singer ORDER BY Age Asc"
            ]
        },
        {
            "id": "task077-61cd2b5516834e0dad66890f9631a2d7",
            "input": "find the number of rows in players table",
            "output": [
                "SELECT Count ( * ) FROM players"
            ]
        },
        {
            "id": "task077-3b0c8ac694a741b4919db58957248287",
            "input": "Step 1: find the number of rows of each value of CountryId in countries table.\nStep 2: find CountryId, CountryName in countries table whose corresponding value in step 1 is greater than fiat.\nStep 3: find CountryId, CountryName in countries table whose corresponding value in step 1 is greater than 3.\nStep 4: show the rows that are in any of the results of step 2 or the results of step 4",
            "output": [
                "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > \"fiat\" UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > 3"
            ]
        },
        {
            "id": "task077-82809723452345099f5fdfa013059c93",
            "input": "find the Name of conductor table",
            "output": [
                "SELECT Name FROM conductor"
            ]
        },
        {
            "id": "task077-1870ef6224ce4651958b39f35cfdf978",
            "input": "Step 1: find the number of rows of each value of Template_ID in Documents table.\nStep 2: find Template_ID in Documents table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-157be13844f84bf5bc590ad1c6ac8a1c",
            "input": "Step 1: find the AirportName of airports table.\nStep 2: find the AirportName of airports table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT AirportName FROM airports EXCEPT SELECT AirportName FROM airports"
            ]
        },
        {
            "id": "task077-2d91fced751241d19ab91a77bdffb8ea",
            "input": "find the number of rows in airlines table whose Airline equals JetBlue Airways",
            "output": [
                "SELECT Count ( * ) FROM airlines WHERE Airline = \"JetBlue Airways\""
            ]
        },
        {
            "id": "task077-2e33fde4ab8740d2baf5266ddb0c26da",
            "input": "find the course_name of Courses table",
            "output": [
                "SELECT course_name FROM Courses"
            ]
        },
        {
            "id": "task077-8ad4eb47476b48cbb8f2e714a5ec02da",
            "input": "find without repetition the Template_Type_Description of Ref_Template_Types table",
            "output": [
                "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types"
            ]
        },
        {
            "id": "task077-f5230e6c3e594ef1a4adab6fb998ea9d",
            "input": "find without repetition the email_address of Students table",
            "output": [
                "SELECT DISTINCT email_address FROM Students"
            ]
        },
        {
            "id": "task077-56748a9fd34646d3ae97c2d4e2b952c9",
            "input": "find the Name of country table for which Continent equals Aruba",
            "output": [
                "SELECT Name FROM country WHERE Continent = \"Aruba\""
            ]
        },
        {
            "id": "task077-60495dbe480241e2b7d58f99a42ebb1b",
            "input": "find the number of rows in Ref_Feature_Types table",
            "output": [
                "SELECT Count ( * ) FROM Ref_Feature_Types"
            ]
        },
        {
            "id": "task077-395d950a0d6143a1a837ba3f0d04a676",
            "input": "find the loser_rank of matches table",
            "output": [
                "SELECT loser_rank FROM matches"
            ]
        },
        {
            "id": "task077-45e984eba7a04f24afdb29de4a8a9c77",
            "input": "Step 1: For each row in Documents table, find the corresponding rows in Paragraphs table.\nStep 2: find Paragraphs's Other_Details of the results of step 1 whose Document_Name contains Korea",
            "output": [
                "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE \"Korea\""
            ]
        },
        {
            "id": "task077-d449865a09e6418c8e148989e8bd5bff",
            "input": "Step 1: find the number of rows of each value of course_id in Courses table.\nStep 2: find course_name, course_id in Courses table whose corresponding value in step 1 is less than or equals 2",
            "output": [
                "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = 2"
            ]
        },
        {
            "id": "task077-a71d6cc762144e08a1c0b40b47abd880",
            "input": "Step 1: For each row in Treatment_Types table, find the corresponding rows in Treatments table.\nStep 2: find the number of rows of each value of Treatments's treatment_type_code in the results of step 1.\nStep 3: find Treatment_Types's treatment_type_code of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-685186617fe04ce29161635a93569e0b",
            "input": "find the maximum Accelerate in cars_data table whose Cylinders equals 1 or Year less than 8",
            "output": [
                "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = 1 OR Year < 8"
            ]
        },
        {
            "id": "task077-fbf6617ab4404f4d925985048277268c",
            "input": "Step 1: find the name of Highschooler table.\nStep 2: find the name of Highschooler table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler"
            ]
        },
        {
            "id": "task077-3cbffebabf1b4cae8b1414ba45039243",
            "input": "find the number of different Episode and the number of rows in TV_series table",
            "output": [
                "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series"
            ]
        },
        {
            "id": "task077-bb43ec9e4d2c471c869290be02386f7e",
            "input": "find the SurfaceArea, Population of country table",
            "output": [
                "SELECT SurfaceArea , Population FROM country"
            ]
        },
        {
            "id": "task077-0450aab057c94b37b381dc51991eac58",
            "input": "find the number of rows in stadium table",
            "output": [
                "SELECT Count ( * ) FROM stadium"
            ]
        },
        {
            "id": "task077-f5d73d7371fc46c2a4fae535b85669d5",
            "input": "find the summation of Population in country table whose Continent not equals English",
            "output": [
                "SELECT Sum ( Population ) FROM country WHERE Continent ! = \"English\""
            ]
        },
        {
            "id": "task077-7b7e108dd7d24b828150a88bc89876d3",
            "input": "Step 1: For each row in Documents table, find the corresponding rows in Paragraphs table.\nStep 2: find Paragraphs's Other_Details of the results of step 1 whose Document_Name equals Korea",
            "output": [
                "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = \"Korea\""
            ]
        },
        {
            "id": "task077-c20666a374234442a51dc9ccf888ad13",
            "input": "Step 1: find the CountryName of countries table.\nStep 2: For each row in car_makers table, find corresponding rows in countries table and in model_list table.\nStep 3: find CountryName of the results of step 2 whose Model equals amc.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = \"amc\""
            ]
        },
        {
            "id": "task077-22857d11ac114ae5981529ef0cd70fe1",
            "input": "Step 1: find the CountryCode of countrylanguage table for which Language equals English.\nStep 2: find the Population of country table whose Continent not one of the results of step 1",
            "output": [
                "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = \"English\" )"
            ]
        },
        {
            "id": "task077-1803f5213be54d5fa913bcafbbbe53a0",
            "input": "Step 1: find the professional_id, last_name, home_phone of Professionals table for which state equals Indiana.\nStep 2: find the number of rows of each value of professional_id in Professionals table.\nStep 3: find professional_id, last_name, home_phone in Professionals table whose corresponding value in step 2 is greater than or equals 2.\nStep 4: show the rows that are in any of the results of step 1 or the results of step 3",
            "output": [
                "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = \"Indiana\" UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-9e3c3cce859d4a01a622397e5bd3fb85",
            "input": "Step 1: find the number of rows of each value of professional_id in Professionals table.\nStep 2: find professional_id, role_code, first_name in Professionals table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-fbd3c53d892a4b3c97d2845be315db74",
            "input": "Step 1: for each value of Document_ID in Paragraphs table, calculate number of rows.\nStep 2: show each value of Document_ID in Paragraphs table along with the corresponding number of rows ordered ascending by the results of step 1",
            "output": [
                "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc"
            ]
        },
        {
            "id": "task077-dd4545359a494ded9bb4ae6520ff5a60",
            "input": "Step 1: find the student_id of Likes table.\nStep 2: find the name of Highschooler table whose ID not one of the results of step 1",
            "output": [
                "SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Likes AS T2 )"
            ]
        },
        {
            "id": "task077-bd707874dfaf4ea19c5ec03470e9c030",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find the number of rows of each value of model_list's Model in the results of step 1.\nStep 3: find Edispl of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6400c9b40a2b46b2a1f528ea893a04e0",
            "input": "Step 1: For each row in battle table, find the corresponding rows in ship table.\nStep 2: find battle's name, date of the results of step 1 whose ship's name equals HMS Atalanta and ship's name equals Lettice",
            "output": [
                "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = \"Lettice\" AND T2.name = \"HMS Atalanta\""
            ]
        },
        {
            "id": "task077-c09e3cfb0c2543e288fbe76f61823109",
            "input": "find the AirportName of airports table for which AirportName equals AKO",
            "output": [
                "SELECT AirportName FROM airports WHERE AirportName = \"AKO\""
            ]
        },
        {
            "id": "task077-9b3bf1782d2348a890ff26e27bc25056",
            "input": "Step 1: find the number of rows of each value of Year_of_Founded in orchestra table.\nStep 2: find Year_of_Founded in orchestra table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-8a7602e26fa749bb8849bc633deb6b16",
            "input": "find the number of rows in car_makers table whose Maker equals American Motor Company",
            "output": [
                "SELECT Count ( * ) FROM car_makers WHERE Maker = \"American Motor Company\""
            ]
        },
        {
            "id": "task077-a6a8f3c44be3427790edb6e9ecdd4a5a",
            "input": "Step 1: find the StuID of Has_Pet table.\nStep 2: find without repetition the Fname, Age of Student table whose Student's StuID not one of the results of step 1",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )"
            ]
        },
        {
            "id": "task077-4b14c38120484eeca9dd2649b6b8ba16",
            "input": "find the Name of country table for which Continent equals Asia with largest value of Population",
            "output": [
                "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY Population Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-66123a9074fe47ae8b851cbe0ae11397",
            "input": "Step 1: For each row in stadium table, find the corresponding rows in concert table.\nStep 2: only keep the results of step 1 whose Year greater than 2014.\nStep 3: find the number of rows of each value of stadium's Stadium_ID in the results of step 2.\nStep 4: find Name, Capacity of the results of step 2 with largest value in the results of step 3",
            "output": [
                "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2014 GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-17a96bae988e4269a58d6f8a5182df88",
            "input": "Step 1: find the number of rows of each value of Continent in country table.\nStep 2: find Continent of country table with largest value in the results of step 1",
            "output": [
                "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-259c36ca29364cbb8f5031935f96233c",
            "input": "Step 1: find the number of rows of each value of Abbreviation in airlines table.\nStep 2: find Abbreviation, Country of airlines table with smallest value in the results of step 1",
            "output": [
                "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-7c182680109f46f28456972548b4c534",
            "input": "find the number of rows in battle table whose result equals Captured",
            "output": [
                "SELECT Count ( * ) FROM battle WHERE result = \"Captured\""
            ]
        },
        {
            "id": "task077-265de4e7a1514ba99ad6d05c3a7bfbf5",
            "input": "find the number of rows in performance table whose Type greater than or equals CD",
            "output": [
                "SELECT Count ( * ) FROM performance WHERE Type > = \"CD\""
            ]
        },
        {
            "id": "task077-424a966aaf3c4c0facd3fbd288c3df12",
            "input": "Step 1: find the loser_name of matches table for which year equals 2013.\nStep 2: find the loser_name of matches table for which year equals 2016.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT loser_name FROM matches WHERE year = 2013 INTERSECT SELECT loser_name FROM matches WHERE year = 2016"
            ]
        },
        {
            "id": "task077-7a9e0fecf1a1452b948ac334128b57a6",
            "input": "find the Continent of country table for which IndepYear greater than 1950",
            "output": [
                "SELECT Continent FROM country WHERE IndepYear > 1950"
            ]
        },
        {
            "id": "task077-6710b4c1ef2b48a18cec0fc0acd79801",
            "input": "find the rows of employee table",
            "output": [
                "SELECT * FROM employee"
            ]
        },
        {
            "id": "task077-2b07bd5ff8624aeaad4a99c138dd000b",
            "input": "Step 1: For each row in country table, find the corresponding rows in city table.\nStep 2: find without repetition city's Name of the results of step 1 whose Continent equals T and country's Name equals Chinese",
            "output": [
                "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" AND T2.Name = \"Chinese\""
            ]
        },
        {
            "id": "task077-3c962006c17a470c90b85cc7a403d3dc",
            "input": "find the average age in Dogs table whose gender equals 1",
            "output": [
                "SELECT Avg ( age ) FROM Dogs WHERE gender = 1"
            ]
        },
        {
            "id": "task077-e5022259df114a0e887f992b3d51a114",
            "input": "find the LName of Student table for which Age equals 3",
            "output": [
                "SELECT LName FROM Student WHERE Age = 3"
            ]
        },
        {
            "id": "task077-45456c597eb64bf7a0eea05654b2f832",
            "input": "find the Continent of country table",
            "output": [
                "SELECT Continent FROM country"
            ]
        },
        {
            "id": "task077-6dfe0d4328ca46f0a86f2a9554a888c6",
            "input": "Step 1: find the minimum Num_of_Staff in museum table whose Open_Year less than 2010.\nStep 2: find the Name of museum table whose Num_of_Staff greater than the results of step 1",
            "output": [
                "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < 2010 )"
            ]
        },
        {
            "id": "task077-4f971b66128748c88912c58e4524478f",
            "input": "find the rows, Template_Type_Code of Templates table with smallest value of Template_Type_Code",
            "output": [
                "SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-fcf46629941f4dfbacc71a48ec12a8b9",
            "input": "Step 1: find rows in country table whose IndepYear less than 1930.\nStep 2: find each value of GovernmentForm in the results of step 1 along with the  Code of the corresponding rows to each value",
            "output": [
                "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < 1930 GROUP BY GovernmentForm"
            ]
        },
        {
            "id": "task077-ba17eb4e65534ff2b42d24ab95eceae7",
            "input": "Step 1: For each row in Treatment_Types table, find the corresponding rows in Treatments table.\nStep 2: find the number of rows of each value of Treatments's treatment_type_code in the results of step 1.\nStep 3: find treatment_type_description of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-6471b3ee9fca44bf96f0ae2a8812fcb1",
            "input": "Step 1: For each row in Dogs table, find the corresponding rows in Treatments table.\nStep 2: find treatment_type_code, weight of the results of step 1",
            "output": [
                "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id"
            ]
        },
        {
            "id": "task077-4ac1bfb9d3b04b05b69363e8cfa64886",
            "input": "find the treatment_type_description, treatment_type_code of Treatment_Types table",
            "output": [
                "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types"
            ]
        },
        {
            "id": "task077-0ae895f0c0d04d42bdf472f4d9f972cf",
            "input": "find the summation of Population in country table",
            "output": [
                "SELECT Sum ( Population ) FROM country"
            ]
        },
        {
            "id": "task077-2c943f26c6484b7794d37bed9251fbc7",
            "input": "Step 1: For each row in country table, find corresponding rows in city table and in countrylanguage table.\nStep 2: find city's Name of the results of step 1 whose Language equals English",
            "output": [
                "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = \"English\""
            ]
        },
        {
            "id": "task077-125b50374789401d8c33cac66662bb86",
            "input": "find the Population, Continent of country table",
            "output": [
                "SELECT Population , Continent FROM country"
            ]
        },
        {
            "id": "task077-f844aeeeb5a54035a433eca8a3f9f9b3",
            "input": "find the charge_amount of Charges table with largest value of charge_amount",
            "output": [
                "SELECT charge_amount FROM Charges ORDER BY charge_amount Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-74cd838549ae416d91ed1f01aa66050d",
            "input": "Step 1: find the Name, Continent of country table ordered descending by SurfaceArea.\nStep 2: only show the first 5 rows of the results",
            "output": [
                "SELECT Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT 5"
            ]
        },
        {
            "id": "task077-cc446afce2ce45108a92a73b492b9525",
            "input": "find the average Edispl in cars_data table whose Year less than 1980",
            "output": [
                "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < 1980"
            ]
        },
        {
            "id": "task077-30ab4f7971424ddb9371a1e8c27ee273",
            "input": "Step 1: find the number of rows of each value of Airline in airlines table.\nStep 2: find Airline in airlines table whose corresponding value in step 1 is less than 200",
            "output": [
                "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < 200"
            ]
        },
        {
            "id": "task077-4c23008f9ed7497d8e9e2c493f0948b1",
            "input": "Step 1: For each row in country table, find the corresponding rows in countrylanguage table.\nStep 2: find the number of different Language in the results of step 1 whose Continent equals Aruba",
            "output": [
                "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Aruba\""
            ]
        },
        {
            "id": "task077-a741e5dec66440a88e4a759958c58ae5",
            "input": "Step 1: find the StuID of Has_Pet table.\nStep 2: find the Fname of Student table whose Student's StuID one of the results of step 1.\nStep 3: find the Fname of Student table.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.Fname FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T1.Fname FROM Student AS T1"
            ]
        },
        {
            "id": "task077-5b0d7d9f3a7645b6b32683a075bf1f79",
            "input": "Step 1: find the semester_name of Semesters table.\nStep 2: find the course_name of Courses table whose course_name not one of the results of step 1",
            "output": [
                "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )"
            ]
        },
        {
            "id": "task077-d675a44591734451a381abd4170ee041",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Students table.\nStep 2: find first_name, line_1 of the results of step 1",
            "output": [
                "SELECT T2.first_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id"
            ]
        },
        {
            "id": "task077-2c4b06a6eb57455c947255ad00296bb5",
            "input": "find the number of rows in airports table whose AirportName equals Aberdeen or City equals Abilene",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE AirportName = \"Aberdeen\" OR City = \"Abilene\""
            ]
        },
        {
            "id": "task077-848c3db55464432c8122c7bd0b00fafc",
            "input": "find the LocalName of country table for which Region equals Kabul",
            "output": [
                "SELECT LocalName FROM country WHERE Region = \"Kabul\""
            ]
        },
        {
            "id": "task077-3ad09d0b97184b4eb09aba418c53ca9d",
            "input": "find the number of rows in Documents table whose Document_Name equals Summer Show",
            "output": [
                "SELECT Count ( * ) FROM Documents WHERE Document_Name = \"Summer Show\""
            ]
        },
        {
            "id": "task077-b2188a7f37f6435fb2a888c485808f13",
            "input": "find the first_name, first_name of Professionals table",
            "output": [
                "SELECT first_name , first_name FROM Professionals"
            ]
        },
        {
            "id": "task077-b56a27735d5e499798146863cfd0ccfd",
            "input": "find the property_name of Properties table for which room_count greater than 1",
            "output": [
                "SELECT property_name FROM Properties WHERE room_count > 1"
            ]
        },
        {
            "id": "task077-53dc35037797475f9479bb6dd3373489",
            "input": "Step 1: For each row in airlines table, find the corresponding rows in flights table.\nStep 2: find FlightNo of the results of step 1 whose Abbreviation equals APG",
            "output": [
                "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = \"APG\""
            ]
        },
        {
            "id": "task077-591ba0ba546342f7be28202b49690b64",
            "input": "Step 1: For each row in Breeds table, find the corresponding rows in Dogs table.\nStep 2: find breed_name of the results of step 1 with largest value of weight",
            "output": [
                "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-53b377986ac1478ea3dc52751e7e5719",
            "input": "find without repetition the grade of Highschooler table for which grade equals 9",
            "output": [
                "SELECT DISTINCT grade FROM Highschooler WHERE grade = 9"
            ]
        },
        {
            "id": "task077-0574cb9e1b604eeab845ddcc9c586463",
            "input": "find the number of rows in car_makers table whose Country equals france",
            "output": [
                "SELECT Count ( * ) FROM car_makers WHERE Country = \"france\""
            ]
        },
        {
            "id": "task077-414cc40eff53465dbefa25adbd151956",
            "input": "Step 1: find the number of rows of each value of Continent in country table.\nStep 2: find Name of country table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e4894d3b49ed448088bdb3f9b3401ad9",
            "input": "Step 1: find the number of rows of each value of owner_id in Owners table.\nStep 2: find owner_id, last_name of Owners table with largest value in the results of step 1",
            "output": [
                "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-46cd83b61ce84848a52c4e5076dac636",
            "input": "find the Code2 of country table for which Continent equals Beatrix",
            "output": [
                "SELECT Code2 FROM country WHERE Continent = \"Beatrix\""
            ]
        },
        {
            "id": "task077-b60180c3d1bb401a85a7ac8d5bb071e1",
            "input": "Step 1: find the number of rows of each value of Abbreviation in airlines table.\nStep 2: find Airline of airlines table with largest value in the results of step 1",
            "output": [
                "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-619d6a35484948a988068ae5bd13e628",
            "input": "Step 1: find the number of rows of each value of grade in Highschooler table.\nStep 2: find name in Highschooler table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-1c19fc49cbd2456c8ccadd28c2e82b6f",
            "input": "find the number of rows in airports table whose City equals Aberdeen or City equals Abilene",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE City = \"Abilene\" OR City = \"Aberdeen\""
            ]
        },
        {
            "id": "task077-4793e65d960143a395338f9f99f6e87a",
            "input": "find the LocalName of country table",
            "output": [
                "SELECT LocalName FROM country"
            ]
        },
        {
            "id": "task077-4397767d38b2452e945373868a0278d4",
            "input": "Step 1: find the Airline of airlines table for which airlines's Country equals CVO.\nStep 2: For each row in airlines table, find the corresponding rows in airports table.\nStep 3: find Airline of the results of step 2 whose airports's Country equals APG.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = \"CVO\" EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"APG\""
            ]
        },
        {
            "id": "task077-c967d288949f43b880b6edad1f2fe61e",
            "input": "Step 1: For each row in ship table, find the corresponding rows in death table.\nStep 2: find note, killed of the results of step 1 whose tonnage equals t",
            "output": [
                "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = \"t\""
            ]
        },
        {
            "id": "task077-674705b031484cc9afaa1793e862b694",
            "input": "Step 1: For each row in TV_Channel table, find the corresponding rows in Cartoon table.\nStep 2: find Country of the results of step 1 whose Written_by equals Michael Jelenic.\nStep 3: find Country of the results of step 1 whose Written_by equals Todd Casey.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Michael Jelenic\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\""
            ]
        },
        {
            "id": "task077-4c930749781a4ab6a3361109d613f9c7",
            "input": "find the Name of country table for which Continent equals Beatrix",
            "output": [
                "SELECT Name FROM country WHERE Continent = \"Beatrix\""
            ]
        },
        {
            "id": "task077-894bb178634e45b983d0b054a5d9fc12",
            "input": "find the average Accelerate in cars_data table whose Cylinders equals 4",
            "output": [
                "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = 4"
            ]
        },
        {
            "id": "task077-2430bf93405c47b0b482e05f69412683",
            "input": "find the average age in Dogs table",
            "output": [
                "SELECT Avg ( age ) FROM Dogs"
            ]
        },
        {
            "id": "task077-70834b64679846c7afaf56a7af95653b",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find first_name, country_code, birth_date of the results of step 1 with smallest value of winner_rank",
            "output": [
                "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-58b23a5019bf4da1a3b408bff6796669",
            "input": "find the average Horsepower in cars_data table whose Year equals volvo",
            "output": [
                "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = \"volvo\""
            ]
        },
        {
            "id": "task077-50f44bce917148f2a08bc70d9268a49c",
            "input": "find the average GNP and the average Population in country table whose Continent equals US Territory",
            "output": [
                "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = \"US Territory\""
            ]
        },
        {
            "id": "task077-64ca7bad028e42e38565c27b0d65181d",
            "input": "find the number of different Code in country table whose Continent equals Afghanistan",
            "output": [
                "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = \"Afghanistan\""
            ]
        },
        {
            "id": "task077-3b37b61df1e04141aaab4d5fd2d147ee",
            "input": "Step 1: For each row in Templates table, find corresponding rows in Ref_Template_Types table and in Documents table.\nStep 2: find Document_ID, Document_Name, Template_Type_Description of the results of step 1",
            "output": [
                "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID"
            ]
        },
        {
            "id": "task077-84795b477d9d437b97b8692ddd56bbd7",
            "input": "Step 1: For each row in Documents table, find the corresponding rows in Paragraphs table.\nStep 2: find the number of rows of each value of Paragraphs's Document_ID in the results of step 1.\nStep 3: find Documents's Document_ID in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-d42189d9b3134ada9b910e8c62207d14",
            "input": "find the number of rows in country table whose Continent equals Africa",
            "output": [
                "SELECT Count ( * ) FROM country WHERE Continent = \"Africa\""
            ]
        },
        {
            "id": "task077-147b6ee04e0f4d0591dadc4a3a3a87e2",
            "input": "Step 1: For each row in Highschooler table, find the corresponding rows in Friend table.\nStep 2: find the number of rows of each value of student_id in the results of step 1.\nStep 3: find name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f046feb8825846e2aaf5fd34ba61bedb",
            "input": "Step 1: For each row in Semesters table, find the corresponding rows in Student_Enrolment table.\nStep 2: find Student_Enrolment's semester_id of the results of step 1 whose semester_name equals Master.\nStep 3: find Student_Enrolment's semester_id of the results of step 1 whose semester_name equals Bachelor.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = \"Master\" INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = \"Bachelor\""
            ]
        },
        {
            "id": "task077-40558c4ce0e249cca5e9e35530738a6c",
            "input": "find the number of different Region in country table whose Continent equals Chinese",
            "output": [
                "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = \"Chinese\""
            ]
        },
        {
            "id": "task077-bd10d3b011cd4e389539beaf449ee631",
            "input": "Step 1: find the semester_id of Student_Enrolment table.\nStep 2: find the Semesters's semester_id of Semesters table whose Semesters's semester_id not one of the results of step 1",
            "output": [
                "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )"
            ]
        },
        {
            "id": "task077-5e9511cc0eac4169938f60ed133bf04c",
            "input": "Step 1: For each row in players table, find the corresponding rows in rankings table.\nStep 2: find first_name, ranking of the results of step 1",
            "output": [
                "SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id"
            ]
        },
        {
            "id": "task077-060dd74c428040c798f84b72a07f6c87",
            "input": "Step 1: find the number of rows of each value of state in AREA_CODE_STATE table.\nStep 2: find area_code of AREA_CODE_STATE table with largest value in the results of step 1",
            "output": [
                "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8e082a2d7bc74040a0c261d69406ea72",
            "input": "find the number of rows in Courses table whose course_name equals math",
            "output": [
                "SELECT Count ( * ) FROM Courses WHERE course_name = \"math\""
            ]
        },
        {
            "id": "task077-6afa8c8dfb8844a0a89769e97577c79c",
            "input": "Step 1: For each row in Dogs table, find corresponding rows in Breeds table and in Treatments table.\nStep 2: find without repetition breed_name, treatment_type_code of the results of step 1",
            "output": [
                "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id"
            ]
        },
        {
            "id": "task077-ef0ff24489e8454bb6283c81a167a400",
            "input": "find City, Country of airports table whose AirportName equals Alton and CountryAbbrev equals US ",
            "output": [
                "SELECT City , Country FROM airports WHERE AirportName = \"Alton\" AND CountryAbbrev = \"US \""
            ]
        },
        {
            "id": "task077-913e9ac4b7c645d1a100519a0b843ae2",
            "input": "find the number of rows in country table whose Continent equals Chinese",
            "output": [
                "SELECT Count ( * ) FROM country WHERE Continent = \"Chinese\""
            ]
        },
        {
            "id": "task077-f1c082be7f2e4e89b20c88160e295084",
            "input": "Step 1: For each row in airlines table, find the corresponding rows in flights table.\nStep 2: find FlightNo of the results of step 1 whose airlines's Airline equals United Airlines and Country equals USA",
            "output": [
                "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = \"United Airlines\" AND T1.Country = \"USA\""
            ]
        },
        {
            "id": "task077-bea163ca8bc24bff9254052594e40269",
            "input": "find the number of rows in cars_data table whose Accelerate greater than 1",
            "output": [
                "SELECT Count ( * ) FROM cars_data WHERE Accelerate > 1"
            ]
        },
        {
            "id": "task077-c009c964c0544d3a97332b1a559b6411",
            "input": "Step 1: find the number of rows of each value of Shop_ID in shop table.\nStep 2: find Manager_name, District of shop table with largest value in the results of step 1",
            "output": [
                "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7af4a7328a594d068192dab6abfc6c30",
            "input": "Step 1: find the Name of city table ordered descending by Population.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Name FROM city ORDER BY Population Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-97482b5289414dfebb622ab334641ecf",
            "input": "find the PetType, pet_age of Pets table with smallest value of pet_age",
            "output": [
                "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-d52da151492f432391a5940110f62514",
            "input": "find the first_name, last_name of players table ordered ascending by birth_date",
            "output": [
                "SELECT first_name , last_name FROM players ORDER BY birth_date Asc"
            ]
        },
        {
            "id": "task077-a06d454dff144eff8ca96ddefe617f39",
            "input": "Step 1: For each row in countries table, find the corresponding rows in car_makers table.\nStep 2: find the number of rows of each value of Country in the results of step 1.\nStep 3: find CountryName in the results of step 1 whose corresponding value in step 2 is greater than or equals 3",
            "output": [
                "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-9cf9ce75a3254dc7b75687d5b54a8642",
            "input": "find City, Country of airports table whose AirportName equals Alton and Country equals United States ",
            "output": [
                "SELECT City , Country FROM airports WHERE AirportName = \"Alton\" AND Country = \"United States \""
            ]
        },
        {
            "id": "task077-54d688d24f614ba4aad77f633d23bbc2",
            "input": "find the summation of Population and the maximum GNP in country table",
            "output": [
                "SELECT Sum ( Population ) , Max ( GNP ) FROM country"
            ]
        },
        {
            "id": "task077-a70a7fed1cc546ef8623297d8203e591",
            "input": "Step 1: find the rows of orchestra table for which Year_of_Founded greater than 2003.\nStep 2: find the Record_Company of orchestra table for which Year_of_Founded less than 2003.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT * FROM orchestra WHERE Year_of_Founded > 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003"
            ]
        },
        {
            "id": "task077-f3ee3fec6be946e38898394513620d07",
            "input": "find the name of Dogs table for which weight greater than 1000",
            "output": [
                "SELECT name FROM Dogs WHERE weight > 1000"
            ]
        },
        {
            "id": "task077-24a80e03014341e2bdef736c7d82866d",
            "input": "find the Final_Table_Made, Best_Finish of poker_player table with smallest value of Best_Finish",
            "output": [
                "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-1c96dba866e344699ad11e8ff5413a4c",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find each value of first_name in the results of step 1 along with the summation of winner_rank of the corresponding rows to each value",
            "output": [
                "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name"
            ]
        },
        {
            "id": "task077-fe13fb6937eb4472822409f7f1591ec2",
            "input": "find the number of rows in Highschooler table",
            "output": [
                "SELECT Count ( * ) FROM Highschooler"
            ]
        },
        {
            "id": "task077-44113ba0019a4410a67198a02dd4b109",
            "input": "Step 1: find the number of rows of each value of Channel in Cartoon table.\nStep 2: find Production_code, Channel of Cartoon table with largest value in the results of step 1",
            "output": [
                "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0099238d5c0243269a2c23a7312547f8",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find country_code, first_name of the results of step 1 whose loser_ioc equals WTA Championships.\nStep 3: find country_code, first_name of the results of step 1 whose loser_ioc equals Australian Open.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"WTA Championships\" INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"Australian Open\""
            ]
        },
        {
            "id": "task077-21402b02e9ab4c63ab557e18c5146939",
            "input": "Step 1: find the professional_id, last_name, cell_number of Professionals table for which state equals Indiana.\nStep 2: find the number of rows of each value of professional_id in Professionals table.\nStep 3: find professional_id, last_name, cell_number in Professionals table whose corresponding value in step 2 is greater than 2.\nStep 4: show the rows that are in any of the results of step 1 or the results of step 3",
            "output": [
                "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = \"Indiana\" UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-dbe07828ee8d4b30a10369573ae6c995",
            "input": "Step 1: find the Code of country table for which Continent equals Republic.\nStep 2: For each row in country table, find the corresponding rows in countrylanguage table.\nStep 3: find Code of the results of step 2 whose Language equals English.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = \"Republic\" EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\""
            ]
        },
        {
            "id": "task077-3b4c30a51a57466696fb7df67360aba8",
            "input": "find the section_name of Sections table ordered ascending by section_name",
            "output": [
                "SELECT section_name FROM Sections ORDER BY section_name Asc"
            ]
        },
        {
            "id": "task077-496ca04470bb46bd9c6cb664fa4ab606",
            "input": "Step 1: find the number of rows of each value of Employee_ID in employee table.\nStep 2: find Name of employee table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-dd760c66bc66457a906ef3bcd739f724",
            "input": "find the number of rows in car_makers table whose FullName equals American Motor Company and FullName equals American Motor Company",
            "output": [
                "SELECT Count ( * ) FROM car_makers WHERE FullName = \"American Motor Company\" AND FullName = \"American Motor Company\""
            ]
        },
        {
            "id": "task077-e3a0cc7c06254ed0a803c650bebda08b",
            "input": "Step 1: find the maximum Population of each value of Continent in country table.\nStep 2: find Name, Continent of country table with largest value in the results of step 1",
            "output": [
                "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a976a9a822be458a8f3524cd5655314e",
            "input": "find each value of course_id in Student_Enrolment_Courses table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id"
            ]
        },
        {
            "id": "task077-0439ec7cc9f5472b87baba3fd8103363",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find the average Accelerate in the results of step 1 whose model_list's Model equals 4",
            "output": [
                "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = 4"
            ]
        },
        {
            "id": "task077-a5f08699b0734514ba310b1505347193",
            "input": "Step 1: For each row in airlines table, find the corresponding rows in flights table.\nStep 2: find FlightNo of the results of step 1 whose Country equals United Airlines and airlines's Airline equals United Airlines",
            "output": [
                "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = \"United Airlines\" AND T1.Airline = \"United Airlines\""
            ]
        },
        {
            "id": "task077-a39f4407f1534eb5b06fba19e1b48c61",
            "input": "Step 1: find the SurfaceArea of country table for which Region equals Europe.\nStep 2: find the Continent of country table whose SurfaceArea greater than the results of step 1",
            "output": [
                "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = \"Europe\" )"
            ]
        },
        {
            "id": "task077-109cb05490094e14a22ff31f69bcb0c2",
            "input": "Step 1: find the Airline of airlines table for which airlines's Country equals APG.\nStep 2: For each row in airlines table, find the corresponding rows in airports table.\nStep 3: find Airline of the results of step 2 whose airports's Country equals CVO.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = \"APG\" INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"CVO\""
            ]
        },
        {
            "id": "task077-63918ba27d114077a7af4ca2f54d45a5",
            "input": "find the first_name, last_name, email_address of Owners table for which first_name contains North",
            "output": [
                "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE \"North\""
            ]
        },
        {
            "id": "task077-69abe0ae4cb34e43966972f9113319e9",
            "input": "find the number of rows in matches table whose year greater than or equals 2013",
            "output": [
                "SELECT Count ( * ) FROM matches WHERE year > = 2013"
            ]
        },
        {
            "id": "task077-5193eb6a1d9f41bb89ce23f8bea290ec",
            "input": "Step 1: find the number of rows of each value of Document_ID in Documents table.\nStep 2: find Document_ID, Document_Name of Documents table with largest value in the results of step 1",
            "output": [
                "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-70a84b582b6d4a41b4a51dca5abc3253",
            "input": "find the average grade in Highschooler table",
            "output": [
                "SELECT Avg ( grade ) FROM Highschooler"
            ]
        },
        {
            "id": "task077-1dec27f0151c46d5bbc8347f2ad60643",
            "input": "Step 1: find the weight of Dogs table.\nStep 2: find the name, age, weight of Dogs table whose weight one of the results of step 1",
            "output": [
                "SELECT name , age , weight FROM Dogs WHERE weight IN ( SELECT weight FROM Dogs )"
            ]
        },
        {
            "id": "task077-e36c576eba654866bc8da7d43787301b",
            "input": "find the number of rows in Documents table whose Document_Name contains Summer Show",
            "output": [
                "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE \"Summer Show\""
            ]
        },
        {
            "id": "task077-8a47b79cb81448aeaee07b7cc909fdc7",
            "input": "Step 1: For each row in Departments table, find the corresponding rows in Degree_Programs table.\nStep 2: for each value of Degree_Programs's department_id in the results of step 1, calculate number of rows.\nStep 3: show each value of Degree_Programs's department_id in the results of step 1 along with the number of rows with largest value in the results of step 2",
            "output": [
                "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-00dfccfbb9b94e1aa41f5f425ed02a5e",
            "input": "Step 1: For each row in battle table, find the corresponding rows in ship table.\nStep 2: find battle's name, result, bulgarian_commander of the results of step 1 whose ship's name not equals English Channel",
            "output": [
                "SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name ! = \"English Channel\""
            ]
        },
        {
            "id": "task077-415cdcd2d15748a4aa9ce207d815d3fb",
            "input": "find the Edispl of cars_data table with largest value of Weight",
            "output": [
                "SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9f2ea162935b4c26a3762aaf1c704b94",
            "input": "find the average LifeExpectancy in country table whose Continent equals Africa",
            "output": [
                "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = \"Africa\""
            ]
        },
        {
            "id": "task077-9fd6a2b7a00b4a2687e8ea440f6d850c",
            "input": "find each value of grade in Highschooler table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade"
            ]
        },
        {
            "id": "task077-95c12020dddf40608b572501424138f2",
            "input": "find the ID of Highschooler table for which grade equals Kyle",
            "output": [
                "SELECT ID FROM Highschooler WHERE grade = \"Kyle\""
            ]
        },
        {
            "id": "task077-1bf90fee92df4281a930bfbbe4857ea1",
            "input": "Step 1: For each row in country table, find the corresponding rows in countrylanguage table.\nStep 2: find Continent of the results of step 1 whose Language equals English.\nStep 3: find Continent of the results of step 1 whose Language equals French.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\""
            ]
        },
        {
            "id": "task077-b07c05a09ab74744b1c1ad77fc907d0a",
            "input": "find the average GNPOld in country table whose Continent equals Africa",
            "output": [
                "SELECT Avg ( GNPOld ) FROM country WHERE Continent = \"Africa\""
            ]
        },
        {
            "id": "task077-a35bfc615e664396b46ef653a9bea70b",
            "input": "Step 1: For each row in Charges table, find the corresponding rows in Treatments table.\nStep 2: find each value of treatment_type_code in the results of step 1 along with the summation of charge_amount of the corresponding rows to each value",
            "output": [
                "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code"
            ]
        },
        {
            "id": "task077-eb3c88bc150b4d59a2c89e78b546ef3d",
            "input": "Step 1: find the Year of cars_data table for which Weight greater than 4000.\nStep 2: find the Year of cars_data table for which Weight less than 3000.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Year FROM cars_data WHERE Weight > 4000 EXCEPT SELECT Year FROM cars_data WHERE Weight < 3000"
            ]
        },
        {
            "id": "task077-6d45dc680cb046ab81b84cb06f0f42d4",
            "input": "Step 1: find the number of rows of each value of contestant_name in CONTESTANTS table.\nStep 2: find contestant_number, contestant_name in CONTESTANTS table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-0a55ee41e3f047949f1a705e35c6a842",
            "input": "find the number of rows in Pets table whose PetType equals F and PetType equals dog",
            "output": [
                "SELECT Count ( * ) FROM Pets WHERE PetType = \"dog\" AND PetType = \"F\""
            ]
        },
        {
            "id": "task077-fb4ca9e8f16b4e3e9a2c900a59455f8e",
            "input": "Step 1: find the number of rows of each value of DestAirport in flights table.\nStep 2: find DestAirport of flights table with largest value in the results of step 1",
            "output": [
                "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-aa49adc65f534c21b3bf5a91b61950d2",
            "input": "find the winner_name, loser_rank of matches table with largest value of winner_rank_points",
            "output": [
                "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-17d55cf7918e4531a1d825ea542478ca",
            "input": "Step 1: find the maximum SurfaceArea in country table whose Region equals Europe.\nStep 2: find the Continent of country table whose SurfaceArea greater than the results of step 1",
            "output": [
                "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = \"Europe\" )"
            ]
        },
        {
            "id": "task077-186b54c7c0eb4e15bb7647ca9ea5a7c4",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Enrolment table.\nStep 2: find the number of rows of each value of Student_Enrolment's student_id in the results of step 1.\nStep 3: find first_name, middle_name, last_name in the results of step 1 whose corresponding value in step 2 is equals 2",
            "output": [
                "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = 2"
            ]
        },
        {
            "id": "task077-dfcd2f70cb6f4f90be6144cfeff3a2f7",
            "input": "Step 1: find the number of rows in players table.\nStep 2: find the loser_ioc of matches table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM players AS T1 INTERSECT SELECT T2.loser_ioc FROM matches AS T2"
            ]
        },
        {
            "id": "task077-64a79500c094484ea004cccc2acd603c",
            "input": "Step 1: find the number of rows of each value of course_id in Courses table.\nStep 2: find course_name, course_id in Courses table whose corresponding value in step 1 is less than 2",
            "output": [
                "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < 2"
            ]
        },
        {
            "id": "task077-3ddd60a64a9f44e29b48dab36c890efc",
            "input": "find the created of VOTES table for which state equals CA",
            "output": [
                "SELECT created FROM VOTES WHERE state = \"CA\""
            ]
        },
        {
            "id": "task077-4da2b6d1a34c4bc18725e89272cddd96",
            "input": "find Name of country table whose Continent equals Asia and Population greater than 103000",
            "output": [
                "SELECT Name FROM country WHERE Continent = \"Asia\" AND Population > 103000"
            ]
        },
        {
            "id": "task077-bb904c5aaaba40ba8c7c0f9481e9e20a",
            "input": "Step 1: For each row in Highschooler table, find the corresponding rows in Friend table.\nStep 2: for each value of student_id in the results of step 1, find the number of rows along with name and grade",
            "output": [
                "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id"
            ]
        },
        {
            "id": "task077-3711b777505e47938cfc1025c262df3b",
            "input": "Step 1: For each row in Treatments table, find corresponding rows in Dogs table and in Professionals table.\nStep 2: find date_adopted, first_name of the results of step 1",
            "output": [
                "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id"
            ]
        },
        {
            "id": "task077-f909467c89914cf883046e85fd3c1189",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find each value of first_name in the results of step 1 along with the average winner_rank of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name"
            ]
        },
        {
            "id": "task077-ba6b0e5bfdac4447bf8c667a5f70fe97",
            "input": "Step 1: find the Name of country table for which Continent equals Europe.\nStep 2: find the Name of country table for which Population greater than 103000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Name FROM country WHERE Continent = \"Europe\" INTERSECT SELECT Name FROM country WHERE Population > 103000"
            ]
        },
        {
            "id": "task077-0201340591934f24aa3b5f0c496419a7",
            "input": "Step 1: For each row in car_makers table, find the corresponding rows in model_list table.\nStep 2: for each value of Id in the results of step 1, find the number of rows along with ModelId and FullName",
            "output": [
                "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id"
            ]
        },
        {
            "id": "task077-66871ecbd4834abfa395f4f4e8639e28",
            "input": "find the average Horsepower in cars_data table",
            "output": [
                "SELECT Avg ( Horsepower ) FROM cars_data"
            ]
        },
        {
            "id": "task077-68fa20fe077e417ea3a4354c816c1ece",
            "input": "find the Title, Directed_by of Cartoon table ordered ascending by Title",
            "output": [
                "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc"
            ]
        },
        {
            "id": "task077-dfc96d9484c7478086070119cb79f6c4",
            "input": "find the number of rows in country table whose Continent equals Republic",
            "output": [
                "SELECT Count ( * ) FROM country WHERE Continent = \"Republic\""
            ]
        },
        {
            "id": "task077-773a8f3ad43441fea4afb163340a1316",
            "input": "find the number of different Continent in country table",
            "output": [
                "SELECT Count ( DISTINCT Continent ) FROM country"
            ]
        },
        {
            "id": "task077-3bf46af29b60442399fd6d9442bfc6de",
            "input": "find the summation of Population and the average Continent in country table whose SurfaceArea greater than 3000",
            "output": [
                "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > 3000"
            ]
        },
        {
            "id": "task077-7435cdd673464792ba217a3182ef30e0",
            "input": "find the Continent of country table for which LocalName equals Anguilla",
            "output": [
                "SELECT Continent FROM country WHERE LocalName = \"Anguilla\""
            ]
        },
        {
            "id": "task077-50107aded50e486380b2ce0544e06c44",
            "input": "find the number of rows in airports table whose Country equals Aberdeen and City equals United Airlines",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE Country = \"Aberdeen\" AND City = \"United Airlines\""
            ]
        },
        {
            "id": "task077-18f7550c05bf4b258a00d278981b7f43",
            "input": "Step 1: find the number of rows of each value of transcript_id in Transcript_Contents table.\nStep 2: find transcript_id, transcript_id of Transcript_Contents table with smallest value in the results of step 1",
            "output": [
                "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-db86af8f89d54d46aa68d2cf5303afc8",
            "input": "Step 1: For each row in orchestra table, find the corresponding rows in performance table.\nStep 2: find each value of performance's Orchestra_ID in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID"
            ]
        },
        {
            "id": "task077-8e92fce2f4b9474a871687f66640182a",
            "input": "find the feature_type_name of Ref_Feature_Types table",
            "output": [
                "SELECT feature_type_name FROM Ref_Feature_Types"
            ]
        },
        {
            "id": "task077-9dd4bb7a87d54db4adddfbe8535b3b0b",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find model_list's Model of the results of step 1 with largest value of Accelerate",
            "output": [
                "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-553310cd46f04f7c818622a905aead3d",
            "input": "Step 1: For each row in airlines table, find the corresponding rows in airports table.\nStep 2: find the number of rows in the results of step 1 whose airports's Country equals Aberdeen and airlines's Country equals United Airlines",
            "output": [
                "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"Aberdeen\" AND T1.Country = \"United Airlines\""
            ]
        },
        {
            "id": "task077-2275ba7ea0344d8b9084eb9ac085c714",
            "input": "find each value of Name in teacher table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Name , Count ( * ) FROM teacher GROUP BY Name"
            ]
        },
        {
            "id": "task077-a90d27560f07460fa30abb421a172dea",
            "input": "Step 1: find the name of Highschooler table for which grade equals 9.\nStep 2: find the name of Highschooler table for which grade equals 9.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT name FROM Highschooler WHERE grade = 9 INTERSECT SELECT name FROM Highschooler WHERE grade = 9"
            ]
        },
        {
            "id": "task077-54ab41b39416448dabede1c778a5b4eb",
            "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find first_name, country_code of the results of step 1 whose loser_ioc equals WTA Championships.\nStep 3: find first_name, country_code of the results of step 1 whose loser_ioc equals Australian Open.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"WTA Championships\" INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"Australian Open\""
            ]
        },
        {
            "id": "task077-7678035624c84839a4b65aec3bc26e0e",
            "input": "find the number of different Code2 in country table",
            "output": [
                "SELECT Count ( DISTINCT Code2 ) FROM country"
            ]
        },
        {
            "id": "task077-45f073501a8b4972a459810eab235143",
            "input": "Step 1: For each row in car_names table, find corresponding rows in model_list table and in cars_data table.\nStep 2: find without repetition model_list's Model of the results of step 1 whose Horsepower greater than General Motors or Horsepower equals 3500",
            "output": [
                "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > 3500 OR T3.Horsepower = \"General Motors\""
            ]
        },
        {
            "id": "task077-c615ed58847345cca7dc7af3dfe80a68",
            "input": "find the Code2 of country table with largest value of Continent",
            "output": [
                "SELECT Code2 FROM country ORDER BY Continent Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-14a53c5fb9994c80ae6efa648a3b0bc0",
            "input": "Step 1: find the Population of country table for which Continent equals Africa.\nStep 2: find the GovernmentForm of country table whose Population less than the results of step 1",
            "output": [
                "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = \"Africa\" )"
            ]
        },
        {
            "id": "task077-b1b13bf544dc4b53983f007620db72ad",
            "input": "Step 1: For each row in TV_Channel table, find the corresponding rows in Cartoon table.\nStep 2: find series_name, Country of the results of step 1 whose Written_by equals Ben Jones and Written_by equals Michael Chang",
            "output": [
                "SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Michael Chang\" AND T2.Written_by = \"Ben Jones\""
            ]
        },
        {
            "id": "task077-b935003cd86f4017a97a9cd15caa5147",
            "input": "Step 1: find the number of rows of each value of Rating in TV_series table.\nStep 2: find Rating, Rating of TV_series table ordered descending by the results of step 1.\nStep 3: For each row in TV_Channel table, find the corresponding rows in TV_series table.\nStep 4: find the number of rows of each value of Hight_definition_TV in the results of step 3.\nStep 5: find Rating of step 3 results ordered descending by the results of step 4.\nStep 6: only keep the first row of the results of step 5.\nStep 7: show the rows that are in both the results of step 2 and the results of step 6.\nStep 8: only show the first 3 rows of the results",
            "output": [
                "SELECT T1.Rating , T1.Rating FROM TV_series AS T1 GROUP BY T1.Rating ORDER BY Count ( * ) Desc LIMIT 1 INTERSECT SELECT T1.Rating FROM TV_Channel AS T2 JOIN TV_series AS T1 ON T2.id = T1.Channel GROUP BY T2.Hight_definition_TV ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-484f00b8e8d94f69bd2a01827c5a1ce6",
            "input": "find the number of rows in airports table whose AirportName equals Ashley and City equals Aberdeen",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE AirportName = \"Ashley\" AND City = \"Aberdeen\""
            ]
        },
        {
            "id": "task077-7e26aee25d6f4f3db7c9f1cc7059364f",
            "input": "find each value of Name in singer table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Name , Count ( * ) FROM singer GROUP BY Name"
            ]
        },
        {
            "id": "task077-6bd032fb7c0c487faed5bdb1f87d8b71",
            "input": "Step 1: For each row in car_makers table, find the corresponding rows in model_list table.\nStep 2: find the number of rows of each value of ModelId in the results of step 1.\nStep 3: find FullName, ModelId in the results of step 1 whose corresponding value in step 2 is greater than 3",
            "output": [
                "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId HAVING Count ( * ) > 3"
            ]
        },
        {
            "id": "task077-be9ec818f0754949a018b9eb51ad2a80",
            "input": "Step 1: For each row in TV_Channel table, find the corresponding rows in TV_series table.\nStep 2: find the number of rows of each value of Channel in the results of step 1.\nStep 3: find Content in the results of step 1 whose corresponding value in step 2 is greater than 2",
            "output": [
                "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-96f5f9ce066d4d9daf9398a9fdb1f89d",
            "input": "Step 1: For each row in TV_Channel table, find corresponding rows in TV_series table and in Cartoon table.\nStep 2: find Episode of the results of step 1 whose Title equals A Love of a Lifetime",
            "output": [
                "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = \"A Love of a Lifetime\""
            ]
        },
        {
            "id": "task077-e5cc612de3314da88f31dc49798a5d41",
            "input": "Step 1: For each row in Templates table, find the corresponding rows in Documents table.\nStep 2: find the number of rows of each value of Documents's Template_ID in the results of step 1.\nStep 3: find Version_Number, Template_Type_Code in the results of step 1 whose corresponding value in step 2 is greater than 5",
            "output": [
                "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > 5"
            ]
        },
        {
            "id": "task077-b2fc3fd2584b4b02b98f3ccefdb1dd1a",
            "input": "Step 1: For each row in airlines table, find the corresponding rows in airports table.\nStep 2: find the number of rows in the results of step 1 whose airports's Country equals United Airlines and Airline equals AHD",
            "output": [
                "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"AHD\""
            ]
        },
        {
            "id": "task077-2267860b214c4f2aa81a2afb91f1a919",
            "input": "Step 1: For each row in Has_Pet table, find corresponding rows in Student table and in Pets table.\nStep 2: find Major, Age of the results of step 1 whose weight less than or equals cat",
            "output": [
                "SELECT T1.Major , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight < = \"cat\""
            ]
        },
        {
            "id": "task077-c99c97089355408a840b7e2e1a1b601c",
            "input": "find the summation of LifeExpectancy in country table whose Name not equals English",
            "output": [
                "SELECT Sum ( LifeExpectancy ) FROM country WHERE Name ! = \"English\""
            ]
        },
        {
            "id": "task077-c7c42b867eda4f72ac1002955177ddd7",
            "input": "find the first_name, last_name of players table for which first_name contains L ordered ascending by birth_date",
            "output": [
                "SELECT first_name , last_name FROM players WHERE first_name LIKE \"L\" ORDER BY birth_date Asc"
            ]
        },
        {
            "id": "task077-7e01d2445f3045639baa263cddb23b34",
            "input": "find the number of rows in Pets table whose pet_age greater than 10",
            "output": [
                "SELECT Count ( * ) FROM Pets WHERE pet_age > 10"
            ]
        },
        {
            "id": "task077-9b7238f616d144cc8fbca1a6d945ccde",
            "input": "find the number of rows in airlines table whose Airline equals APG",
            "output": [
                "SELECT Count ( * ) FROM airlines WHERE Airline = \"APG\""
            ]
        },
        {
            "id": "task077-2ed156fd25dc40ee827a004716b8bc06",
            "input": "find the Region, Population of country table",
            "output": [
                "SELECT Region , Population FROM country"
            ]
        },
        {
            "id": "task077-b076657ff9aa4312a067c21e311f7d90",
            "input": "find GovernmentForm of country table whose Continent equals Asia and Population greater than 103000",
            "output": [
                "SELECT GovernmentForm FROM country WHERE Continent = \"Asia\" AND Population > 103000"
            ]
        },
        {
            "id": "task077-7c8049f286ec40f5b901a3abd03d1f0a",
            "input": "find without repetition the Document_Description of Documents table",
            "output": [
                "SELECT DISTINCT Document_Description FROM Documents"
            ]
        },
        {
            "id": "task077-ad24eb5a64444af38635d0f46edc574d",
            "input": "find grade of Highschooler table whose grade equals 4 or grade equals 9",
            "output": [
                "SELECT grade FROM Highschooler WHERE grade = 9 OR grade = 4"
            ]
        },
        {
            "id": "task077-c5d57c1d9dd94775a527050212d11d57",
            "input": "find the date_departed, date_of_birth of Dogs table",
            "output": [
                "SELECT date_departed , date_of_birth FROM Dogs"
            ]
        },
        {
            "id": "task077-3d24a9dfe6794aa1babab50f34bd12a0",
            "input": "find the winner_name of matches table for which loser_ioc equals Australian Open with smallest value of winner_rank",
            "output": [
                "SELECT winner_name FROM matches WHERE loser_ioc = \"Australian Open\" ORDER BY winner_rank Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-92638933e7bb4b95abe2c885870a1842",
            "input": "Step 1: For each row in TV_Channel table, find corresponding rows in TV_series table and in Cartoon table.\nStep 2: find Weekly_Rank of the results of step 1 whose Title equals A Love of a Lifetime",
            "output": [
                "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = \"A Love of a Lifetime\""
            ]
        },
        {
            "id": "task077-67ee8756d5aa4a0287c981e1d7ad6f5e",
            "input": "Step 1: For each row in conductor table, find the corresponding rows in orchestra table.\nStep 2: find the  Name in the results of step 1 whose Year_of_Founded greater than 2003 ordered descending by Year_of_Founded.\nStep 3: only show the first 2008 rows of the results",
            "output": [
                "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2003 ORDER BY T2.Year_of_Founded Desc LIMIT 2008"
            ]
        },
        {
            "id": "task077-5044e891fbdd4acba9357db62f25e8c0",
            "input": "Step 1: For each row in visit table, find corresponding rows in museum table and in visitor table.\nStep 2: find the summation of Total_spent of each value of visit's Museum_ID in the results of step 1.\nStep 3: find visitor_ID, visitor's Name, Num_of_Staff of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3dbdcd18844548a2853f10c26ff5f0dd",
            "input": "find the Code of country table for which Population greater than English",
            "output": [
                "SELECT Code FROM country WHERE Population > \"English\""
            ]
        },
        {
            "id": "task077-d2730b009f1f41afaa73270960dae89f",
            "input": "Step 1: find the tourney_name, winner_rank of matches table ordered ascending by loser_age.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT 3"
            ]
        },
        {
            "id": "task077-b3e1e9b38c874d08bf1e441db7a445e9",
            "input": "find the number of rows in Student table",
            "output": [
                "SELECT Count ( * ) FROM Student"
            ]
        },
        {
            "id": "task077-48d6b30d0bfc4696b03f26743065543c",
            "input": "find each value of StuID in Student table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID"
            ]
        },
        {
            "id": "task077-61203b6b5c2a4152861807a77742ecc7",
            "input": "Step 1: find the tourney_name, loser_rank of matches table ordered ascending by loser_age.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT 3"
            ]
        },
        {
            "id": "task077-3e3c3e128c324ad082cb538061cd945e",
            "input": "Step 1: find the professional_id, role_code, email_address of Professionals table.\nStep 2: find the professional_id, role_code, email_address of Professionals table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT professional_id , role_code , email_address FROM Professionals"
            ]
        },
        {
            "id": "task077-ddc5ec041fec4a1e8cbdc54e27761060",
            "input": "Step 1: find the number of rows of each value of breed_name in Breeds table.\nStep 2: find breed_name of Breeds table with largest value in the results of step 1",
            "output": [
                "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e918dac2bdb24aa8a24a5e28488a9f7b",
            "input": "Step 1: For each row in visit table, find corresponding rows in museum table and in visitor table.\nStep 2: find visitor's Name of the results of step 1 whose Open_Year greater than 2009.\nStep 3: find visitor's Name of the results of step 1 whose Open_Year less than 2011.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > 2009 INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < 2011"
            ]
        },
        {
            "id": "task077-0aee9363c6924f328b1c69a574f48e02",
            "input": "find the number of rows in cars_data table whose Accelerate greater than 150",
            "output": [
                "SELECT Count ( * ) FROM cars_data WHERE Accelerate > 150"
            ]
        },
        {
            "id": "task077-cf76f6e3aae846798d814282f48e3255",
            "input": "Step 1: For each row in Has_Allergy table, find corresponding rows in Allergy_Type table and in Student table.\nStep 2: find the number of rows in the results of step 1 whose Sex equals M and AllergyType equals food",
            "output": [
                "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = \"M\" AND T1.AllergyType = \"food\""
            ]
        },
        {
            "id": "task077-c30512a32efe40aebde167289a324861",
            "input": "find the number of different Location_Description in Ref_Locations table",
            "output": [
                "SELECT Count ( DISTINCT Location_Description ) FROM Ref_Locations"
            ]
        },
        {
            "id": "task077-78f516ffa93145849e2603b622fddcf5",
            "input": "find the JOB_TITLE of jobs table for which MAX_SALARY greater than 9000",
            "output": [
                "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > 9000"
            ]
        },
        {
            "id": "task077-d9bb276f8ed141a8a66d201fd8c5fd64",
            "input": "find the SALARY, MANAGER_ID of employees table",
            "output": [
                "SELECT SALARY , MANAGER_ID FROM employees"
            ]
        },
        {
            "id": "task077-ec22492f4b17451d81f770c563873762",
            "input": "find the Studio of film table for which Director not equals Walter Hill",
            "output": [
                "SELECT Studio FROM film WHERE Director ! = \"Walter Hill\""
            ]
        },
        {
            "id": "task077-3d7cda7b80624ea7b304a29a748e3074",
            "input": "find the Headquarters of company table for which Main_Industry not equals Banking",
            "output": [
                "SELECT Headquarters FROM company WHERE Main_Industry ! = \"Banking\""
            ]
        },
        {
            "id": "task077-8935ebe7d9084864a108abb2c510574d",
            "input": "Step 1: find the summation of total of each value of billing_country in invoices table.\nStep 2: find billing_country of invoices table ordered descending by the results of step 1.\nStep 3: only show the first 8 rows of the results",
            "output": [
                "SELECT billing_country FROM invoices GROUP BY billing_country ORDER BY Sum ( total ) Desc LIMIT 8"
            ]
        },
        {
            "id": "task077-50cf92ee3d6449789dc25f263749b37e",
            "input": "find the EMPLOYEE_ID, SALARY of employees table for which FIRST_NAME equals Payam",
            "output": [
                "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE FIRST_NAME = \"Payam\""
            ]
        },
        {
            "id": "task077-d1f3d3f5eddc484d80f2197b4de4cec1",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Problem_Log table.\nStep 2: find problem_log_id of the results of step 1 whose staff_first_name equals Jolie or staff_first_name equals Weber",
            "output": [
                "SELECT T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Weber\" OR T2.staff_first_name = \"Jolie\""
            ]
        },
        {
            "id": "task077-58dd0a7dcf024483b4a875083cecf4df",
            "input": "find the problem_id of Problem_Log table for which log_entry_date less than 1978-06-26",
            "output": [
                "SELECT problem_id FROM Problem_Log WHERE log_entry_date < \"1978-06-26\""
            ]
        },
        {
            "id": "task077-aff07bf876664c0dbe13e351c6a2c14b",
            "input": "find the number of rows in film_market_estimation table whose Low_Estimate less than 300",
            "output": [
                "SELECT Count ( * ) FROM film_market_estimation WHERE Low_Estimate < 300"
            ]
        },
        {
            "id": "task077-e0c8475dd4a54c66b3e6ca0d9369c2f0",
            "input": "Step 1: For each row in customers table, find the corresponding rows in invoices table.\nStep 2: find the summation of total of each value of first_name in the results of step 1.\nStep 3: find first_name, last_name of step 1 results ordered descending by the results of step 2.\nStep 4: only show the first 10 rows of the results",
            "output": [
                "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY Sum ( T2.total ) Desc LIMIT 10"
            ]
        },
        {
            "id": "task077-9c69bb61f010499cb557a719b18da745",
            "input": "Step 1: find the Consider_rate of candidate table ordered descending by Consider_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Consider_rate FROM candidate ORDER BY Consider_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-970ea0518bdb4e8ca084af4451d8db79",
            "input": "find the name of tracks table",
            "output": [
                "SELECT name FROM tracks"
            ]
        },
        {
            "id": "task077-adea5637db5b4b209a85bf52d511d709",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name, name of the results of step 1 whose balance less than 200000",
            "output": [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000"
            ]
        },
        {
            "id": "task077-283df01c808b4ff0bc769f8557f75661",
            "input": "find the name of PersonFriend table for which friend equals Bob",
            "output": [
                "SELECT name FROM PersonFriend WHERE friend = \"Bob\""
            ]
        },
        {
            "id": "task077-d65bb91cd1d64ba0875130b2f61abdc6",
            "input": "find the Date, Venue of workshop table ordered ascending by Date",
            "output": [
                "SELECT Date , Venue FROM workshop ORDER BY Date Asc"
            ]
        },
        {
            "id": "task077-90de013d06c34a3ca1a3cfe42fc06791",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Policies table.\nStep 2: find Customer_Details of the results of step 1 with largest value of Start_Date",
            "output": [
                "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Start_Date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5cbd0d82bfd04f8fbc88e8c33f54285b",
            "input": "Step 1: find the CName of Course table for which Days equals 4.\nStep 2: find the CName of Course table for which Days equals 1.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT CName FROM Course WHERE Days = 4 UNION SELECT CName FROM Course WHERE Days = 1"
            ]
        },
        {
            "id": "task077-c33927cf6c774155b915ad1c8f24f9f1",
            "input": "find the Advisor of Student table for which Major equals 1004",
            "output": [
                "SELECT Advisor FROM Student WHERE Major = 1004"
            ]
        },
        {
            "id": "task077-dc1decf3ef64402aa603427342028cf4",
            "input": "find the Poll_Source of candidate table for which Unsure_rate equals 1",
            "output": [
                "SELECT Poll_Source FROM candidate WHERE Unsure_rate = 1"
            ]
        },
        {
            "id": "task077-1ea559b19d9e4076af9878d380b359ab",
            "input": "find the Title, Studio of film table for which Title contains Universal",
            "output": [
                "SELECT Title , Studio FROM film WHERE Title LIKE \"Universal\""
            ]
        },
        {
            "id": "task077-3426d7afb3af4d1e80481beb4a56260c",
            "input": "Step 1: find the number of rows of each value of id in customers table.\nStep 2: find first_name, last_name of customers table ordered descending by the results of step 1.\nStep 3: only show the first 10 rows of the results",
            "output": [
                "SELECT first_name , last_name FROM customers GROUP BY id ORDER BY Count ( * ) Desc LIMIT 10"
            ]
        },
        {
            "id": "task077-112024f034c64a7797d8969c619412e4",
            "input": "find the name, Industry of Companies table ordered ascending by name",
            "output": [
                "SELECT name , Industry FROM Companies ORDER BY name Asc"
            ]
        },
        {
            "id": "task077-9d2700a1adfe488f9738829a74251f93",
            "input": "find the decor of Rooms table with largest value of basePrice",
            "output": [
                "SELECT decor FROM Rooms ORDER BY basePrice Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-222b3d51171d44038a158584be4c0269",
            "input": "find the number of rows in Ref_Document_Types table",
            "output": [
                "SELECT Count ( * ) FROM Ref_Document_Types"
            ]
        },
        {
            "id": "task077-e3a14146a8714d39bf75072161096a27",
            "input": "Step 1: find the company_id of flight table.\nStep 2: find the name, Type of operate_company table whose operate_company's id one of the results of step 1",
            "output": [
                "SELECT T1.name , T1.Type FROM operate_company AS T1 WHERE T1.id IN ( SELECT T2.company_id FROM flight AS T2 )"
            ]
        },
        {
            "id": "task077-5c2c209ab2c74d00ba3bed7cd6cd4234",
            "input": "Step 1: find the average age in Person table.\nStep 2: find without repetition the name of Person table whose age less than the results of step 1",
            "output": [
                "SELECT DISTINCT name FROM Person WHERE age < ( SELECT Avg ( age ) FROM Person )"
            ]
        },
        {
            "id": "task077-6c6d4fd4950043c5b9738329fd4211fe",
            "input": "find the problem_id of Problem_Log table for which log_entry_date greater than 1978-06-26",
            "output": [
                "SELECT problem_id FROM Problem_Log WHERE log_entry_date > \"1978-06-26\""
            ]
        },
        {
            "id": "task077-8b51791d438a4d97aa1336f4e761affe",
            "input": "Step 1: find the number of rows of each value of Lastname in Band table.\nStep 2: find Lastname of Band table with largest value in the results of step 1",
            "output": [
                "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-998fe411647a477b9f8519af312388d0",
            "input": "find the first_name, last_name of employees table with smallest value of birth_date",
            "output": [
                "SELECT first_name , last_name FROM employees ORDER BY birth_date Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-af5d0ba8b1374735b85806676365b262",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name, name, balance of the results of step 1 ordered descending by balance",
            "output": [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc"
            ]
        },
        {
            "id": "task077-3ad6de4009fb490891c47e07b73a44d2",
            "input": "Step 1: For each row in departments table, find the corresponding rows in employees table.\nStep 2: find the  FIRST_NAME in the results of step 1 whose DEPARTMENT_NAME not equals M ordered ascending by SALARY",
            "output": [
                "SELECT T2.FIRST_NAME , T2.HIRE_DATE , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = \"M\" ORDER BY T2.SALARY Asc"
            ]
        },
        {
            "id": "task077-01fd05e764e24b6aa3800be9a4fb6d9e",
            "input": "Step 1: find the number of rows of each value of Pilot_name in pilot table.\nStep 2: find Pilot_name in pilot table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Pilot_name FROM pilot GROUP BY Pilot_name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-ffc3a2b27e5a45548f1bf5d269aab2fc",
            "input": "Step 1: find the number of rows of each value of Building in Faculty table.\nStep 2: find Building of Faculty table with largest value in the results of step 1",
            "output": [
                "SELECT Building FROM Faculty GROUP BY Building ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-861d8f7e20f042468fa3d15eb881ba5b",
            "input": "find the Document_Type_Code, Document_Description, Document_ID of Documents table",
            "output": [
                "SELECT Document_Type_Code , Document_Description , Document_ID FROM Documents"
            ]
        },
        {
            "id": "task077-57c8c2ac9eb34bf1a9692ab2e6cb7ad2",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Engineer_Visits table.\nStep 2: find each value of contact_staff_id in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.staff_name , Count ( * ) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T2.contact_staff_id"
            ]
        },
        {
            "id": "task077-acb7c3ff08dc4d25bf2fa5707fcb0066",
            "input": "find the number of different Claim_Status_Code in Claim_Headers table",
            "output": [
                "SELECT Count ( DISTINCT Claim_Status_Code ) FROM Claim_Headers"
            ]
        },
        {
            "id": "task077-05a5f75379224bc4a43d5b443ef251a8",
            "input": "find the number of rows in Vocals table whose Type equals lead",
            "output": [
                "SELECT Count ( * ) FROM Vocals WHERE Type = \"lead\""
            ]
        },
        {
            "id": "task077-5e8d76aa6c554bcaad4cc3915aaa3748",
            "input": "find the name of Person table with largest value of age",
            "output": [
                "SELECT name FROM Person ORDER BY age Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-51f09810497548dea624e397812e4e8e",
            "input": "Step 1: find the average age in Person table.\nStep 2: find the name of Person table whose age less than the results of step 1",
            "output": [
                "SELECT name FROM Person WHERE age < ( SELECT Avg ( age ) FROM Person )"
            ]
        },
        {
            "id": "task077-35695513e11d451bbd5bc6f92415668c",
            "input": "Step 1: For each row in employees table, find the corresponding rows in locations table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose CITY equals London",
            "output": [
                "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = \"London\""
            ]
        },
        {
            "id": "task077-85bcbe51e9db4268951bc8cf678b67de",
            "input": "Step 1: find the number of rows of each value of Location_Code in Ref_Locations table.\nStep 2: find Location_Description of Ref_Locations table with largest value in the results of step 1",
            "output": [
                "SELECT Location_Description FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a62d78e0661c4d28955a7d222ba157bd",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average duration in the results of step 1 whose min_visibility_miles greater than 50",
            "output": [
                "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_visibility_miles > 50"
            ]
        },
        {
            "id": "task077-8a40c6ba8b1b43128d9929f46c2c43f3",
            "input": "find the number of rows in invoices table whose billing_city equals Chicago",
            "output": [
                "SELECT Count ( * ) FROM invoices WHERE billing_city = \"Chicago\""
            ]
        },
        {
            "id": "task077-a305b45de48a4e02b38c6eac716cad31",
            "input": "Step 1: For each row in departments table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, DEPARTMENT_NAME of the results of step 1 whose LAST_NAME equals McEwen",
            "output": [
                "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = \"McEwen\""
            ]
        },
        {
            "id": "task077-a85e01cdfdb54c5aa6436a4246a19755",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find the number of rows in the results of step 1 whose city equals Mountain View and end_date equals Palo Alto",
            "output": [
                "SELECT Count ( * ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city = \"Mountain View\" AND T2.end_date = \"Palo Alto\""
            ]
        },
        {
            "id": "task077-47fd8f32a887474da2ca3a8334db0c66",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find the summation of Adults in the results of step 1 whose bedType equals modern",
            "output": [
                "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = \"modern\""
            ]
        },
        {
            "id": "task077-fee56ab09bc14fb9b39fc40facc38821",
            "input": "find the number of rows in Scientists table",
            "output": [
                "SELECT Count ( * ) FROM Scientists"
            ]
        },
        {
            "id": "task077-24d234fa189c4c6697a94a4a4fa2c2a2",
            "input": "Step 1: find the SongId of Tracklists table.\nStep 2: find the Title of Songs table whose Songs's SongId not one of the results of step 1",
            "output": [
                "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )"
            ]
        },
        {
            "id": "task077-30359a45582745288f9a2729a815f62f",
            "input": "Step 1: For each row in Tracklists table, find corresponding rows in Songs table and in Albums table.\nStep 2: find the number of rows of each value of Label in the results of step 1.\nStep 3: find Songs's Title of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId GROUP BY T2.Label ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ad7bc454b7f2407383011ed7984cb647",
            "input": "Step 1: For each row in Product table, find the corresponding rows in Problems table.\nStep 2: find problem_id of the results of step 1 whose product_name equals voluptatem and date_problem_closed greater than 1995",
            "output": [
                "SELECT T2.problem_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\" AND T2.date_problem_closed > 1995"
            ]
        },
        {
            "id": "task077-aba2cf0e951c4b8a98c0a69c2fdc2136",
            "input": "Step 1: find the average min_humidity of each value of zip_code in weather table.\nStep 2: find zip_code in weather table whose corresponding value in step 1 is greater than or equals 100",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) > = 100"
            ]
        },
        {
            "id": "task077-5c9236e45e6147f199f9440d6c574681",
            "input": "Step 1: find the Theme of farm_competition table.\nStep 2: find the Theme of farm_competition table whose Competition_ID not one of the results of step 1",
            "output": [
                "SELECT Theme FROM farm_competition WHERE Competition_ID NOT IN ( SELECT Theme FROM farm_competition )"
            ]
        },
        {
            "id": "task077-1cce10ee45ea4604a01c6a231cd8c5bb",
            "input": "Step 1: find the average Height of each value of Sex in people table.\nStep 2: find Sex of people table with largest value in the results of step 1",
            "output": [
                "SELECT Sex FROM people GROUP BY Sex ORDER BY Avg ( Height ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-cd5d16be7a6342c0996d73983cf1f87b",
            "input": "find the average Age in Student table whose Sex equals F",
            "output": [
                "SELECT Avg ( Age ) FROM Student WHERE Sex = \"F\""
            ]
        },
        {
            "id": "task077-66e9fb176d53461faad40bbc08250e32",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Problems table.\nStep 2: find problem_id, reported_by_staff_id of the results of step 1 whose staff_first_name equals Rylan",
            "output": [
                "SELECT T2.problem_id , T2.reported_by_staff_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = \"Rylan\""
            ]
        },
        {
            "id": "task077-57e8718f51e546a082405be87662c6f4",
            "input": "Step 1: find the state_province_county of Addresses table.\nStep 2: find the state_province_county of Addresses table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT state_province_county FROM Addresses EXCEPT SELECT state_province_county FROM Addresses"
            ]
        },
        {
            "id": "task077-5db7d49761744a11ba64be5ef4b3d636",
            "input": "Step 1: For each row in Tracklists table, find corresponding rows in Songs table and in Albums table.\nStep 2: find Songs's Title of the results of step 1 whose Year equals 2012",
            "output": [
                "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = 2012"
            ]
        },
        {
            "id": "task077-865449cc0b9d4e4fadd36e9c3b1e0ccb",
            "input": "Step 1: find the friend of PersonFriend table.\nStep 2: find the Person's name of Person table whose Person's name not one of the results of step 1",
            "output": [
                "SELECT T1.name FROM Person AS T1 WHERE T1.name NOT IN ( SELECT T2.friend FROM PersonFriend AS T2 )"
            ]
        },
        {
            "id": "task077-32384b59fddd4628bdd7327350ddddb8",
            "input": "find the name of Person table with smallest value of age",
            "output": [
                "SELECT name FROM Person ORDER BY age Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-e080a749d5834dc6ab343a1b431f9400",
            "input": "find id of station table whose city equals San Francisco and long greater than 10 and long greater than -121.90178200000001",
            "output": [
                "SELECT id FROM station WHERE city = \"San Francisco\" AND long > -121.90178200000001 AND long > 10"
            ]
        },
        {
            "id": "task077-a36c5d6d508d4337a5be458e4c8080a8",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find long, city, start_station_name of the results of step 1 with smallest value of duration",
            "output": [
                "SELECT T1.long , T1.city , T2.start_station_name FROM station AS T1 JOIN trip AS T2 ORDER BY T2.duration Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-dd28b204083a4084b88f17ce49fb2619",
            "input": "find the number of rows in Person table whose age greater than engineer",
            "output": [
                "SELECT Count ( * ) FROM Person WHERE age > \"engineer\""
            ]
        },
        {
            "id": "task077-2cc916bfdf1e49d1968858a61569e1d4",
            "input": "Step 1: find the number of rows of each value of Id in Band table.\nStep 2: find Firstname of Band table with largest value in the results of step 1",
            "output": [
                "SELECT Firstname FROM Band GROUP BY Id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a40ec6a8f2aa482285eb2f98a15fd661",
            "input": "find the number of rows in All_Documents table whose Document_Type_Code equals CV",
            "output": [
                "SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = \"CV\""
            ]
        },
        {
            "id": "task077-7e9862d28af44d47bef2fff081f3f018",
            "input": "find the number of rows in Songs table whose Title equals Badlands",
            "output": [
                "SELECT Count ( * ) FROM Songs WHERE Title = \"Badlands\""
            ]
        },
        {
            "id": "task077-a0122d8e6b8d439c9e84289538b73ba6",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name, balance, balance of the results of step 1",
            "output": [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid"
            ]
        },
        {
            "id": "task077-42732c01fd114982843c03927448c9dd",
            "input": "find the problem_log_id, problem_id of Problem_Log table",
            "output": [
                "SELECT problem_log_id , problem_id FROM Problem_Log"
            ]
        },
        {
            "id": "task077-ee957ad7283e4324afc1e6680fb052b6",
            "input": "find the Music_Festival, Result of music_festival table",
            "output": [
                "SELECT Music_Festival , Result FROM music_festival"
            ]
        },
        {
            "id": "task077-840d12f08d044b90b4cee763f59fed4b",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose Year equals 1",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 1"
            ]
        },
        {
            "id": "task077-4da7c158c628423aa894df3842c1e922",
            "input": "find the email, phone of customers table for which last_name equals Astrid",
            "output": [
                "SELECT email , phone FROM customers WHERE last_name = \"Astrid\""
            ]
        },
        {
            "id": "task077-6f1248832eb045a29d2088094ab504aa",
            "input": "Step 1: For each row in station table, find the corresponding rows in weather table.\nStep 2: find zip_code of the results of step 1 whose long greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > 80 OR T2.min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-d2e7b50a0a4d40838d0f6fab514ca304",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in CHECKING table.\nStep 2: find name of the results of step 1 whose balance greater than 10000",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > 10000"
            ]
        },
        {
            "id": "task077-29e75c55de844d3195d92460325e0cba",
            "input": "Step 1: find the average balance in SAVINGS table.\nStep 2: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 3: find name in the results of step 2 whose balance less than the results of step 1",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )"
            ]
        },
        {
            "id": "task077-30d2ecb9a7844768a28d330e7dfd9cdc",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find roomName, bedType, Room of the results of step 1 with largest value of Rate",
            "output": [
                "SELECT T1.roomName , T1.bedType , T2.Room FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1496258602f447cd9ff19de82b01ee26",
            "input": "find the Type, High_Estimate of film_market_estimation table",
            "output": [
                "SELECT Type , High_Estimate FROM film_market_estimation"
            ]
        },
        {
            "id": "task077-d26501dae10c4c69a283b878d544bd9f",
            "input": "find the Fname, LName of Student table",
            "output": [
                "SELECT Fname , LName FROM Student"
            ]
        },
        {
            "id": "task077-e37fedd0b11c4181b5089e1c01026947",
            "input": "find each value of Employee_ID in Employees table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID"
            ]
        },
        {
            "id": "task077-d0906fe5cf0a455d9b8cbdbb352367bf",
            "input": "find the number of rows in buildings table",
            "output": [
                "SELECT Count ( * ) FROM buildings"
            ]
        },
        {
            "id": "task077-5e0a6fd391b04f5aab7f3dfb82a67547",
            "input": "find the Name of people table for which Sex equals F ordered ascending by Name",
            "output": [
                "SELECT Name FROM people WHERE Sex = \"F\" ORDER BY Name Asc"
            ]
        },
        {
            "id": "task077-8f20f0493bd34ac680c442a540e8c87b",
            "input": "find the number of rows in Vocals table whose Type equals Demon Kitty Rag",
            "output": [
                "SELECT Count ( * ) FROM Vocals WHERE Type = \"Demon Kitty Rag\""
            ]
        },
        {
            "id": "task077-fdd03a0a9a3b4b368960878ec2570b5a",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find EMPLOYEE_ID, LAST_NAME, MAX_SALARY of the results of step 1 whose SALARY less than J",
            "output": [
                "SELECT T2.EMPLOYEE_ID , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < \"J\""
            ]
        },
        {
            "id": "task077-fd71727b51ff41d5baf36bb2302fdbf2",
            "input": "Step 1: find the id, end_date of trip table ordered descending by duration.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT id , end_date FROM trip ORDER BY duration Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-353840b4809541cc831facb78cd9e74c",
            "input": "Step 1: find the number of rows of each value of Song in volume table.\nStep 2: find Song in volume table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Song FROM volume GROUP BY Song HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-77c0b8da57c74644bd90b98683e0d0b4",
            "input": "find the average Sheep_and_Goats in farm table whose Sheep_and_Goats greater than 5000",
            "output": [
                "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > 5000"
            ]
        },
        {
            "id": "task077-6a0757fdc9f144cd97b3c6fd6702a7b0",
            "input": "find each value of bedType in Rooms table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT bedType , Count ( * ) FROM Rooms GROUP BY bedType"
            ]
        },
        {
            "id": "task077-ca0b2761fd3d4f62b562ac6ea23b6834",
            "input": "Step 1: For each row in employees table, find the corresponding rows in locations table.\nStep 2: find FIRST_NAME, LAST_NAME, STATE_PROVINCE of the results of step 1",
            "output": [
                "SELECT T1.FIRST_NAME , T1.LAST_NAME , T2.STATE_PROVINCE FROM employees AS T1 JOIN locations AS T2"
            ]
        },
        {
            "id": "task077-8fac6b3c839a4cec9537f58391248c89",
            "input": "Step 1: find the maximum balance in CHECKING table.\nStep 2: find the name, ACCOUNTS's custid of ACCOUNTS table whose ACCOUNTS's custid less than the results of step 1",
            "output": [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )"
            ]
        },
        {
            "id": "task077-dce13fdbf6bb4dd9916973acf9dbea78",
            "input": "find rows of Albums table whose Year greater than or equals 2010 and Year less than or equals 0",
            "output": [
                "SELECT * FROM Albums WHERE Year > = 0 AND Year < = 2010"
            ]
        },
        {
            "id": "task077-9d61ec8fddf74ca6943bdbffe135273f",
            "input": "Step 1: For each row in invoices table, find corresponding rows in customers table and in invoice_lines table.\nStep 2: find first_name, last_name of the results of step 1 ordered ascending by unit_price.\nStep 3: only show the first 10 rows of the results",
            "output": [
                "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T3 ON T2.id = T3.invoice_id ORDER BY T3.unit_price Asc LIMIT 10"
            ]
        },
        {
            "id": "task077-de336957b97146baaf4a8269be59ce69",
            "input": "Step 1: find the Fname of Student table.\nStep 2: find the Fname of Student table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Fname FROM Student EXCEPT SELECT Fname FROM Student"
            ]
        },
        {
            "id": "task077-0cf369999d914931b1c3be721562b1b2",
            "input": "find each value of JOB_TITLE in jobs table along with the average MAX_SALARY of the corresponding rows to each value",
            "output": [
                "SELECT JOB_TITLE , Avg ( MAX_SALARY ) FROM jobs GROUP BY JOB_TITLE"
            ]
        },
        {
            "id": "task077-491f6408cb96448d9872dc4daab5f2bb",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name of the results of step 1 with smallest value of balance",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-6c893a16fd1346029d418c228e8dd517",
            "input": "Step 1: find the average duration in trip table whose subscription_type equals 94103.\nStep 2: find the id of trip table whose duration greater than the results of step 1",
            "output": [
                "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = 94103 )"
            ]
        },
        {
            "id": "task077-6dedeb8dc15048a5897ccba7a5b50c77",
            "input": "find the number of rows in station table",
            "output": [
                "SELECT Count ( * ) FROM station"
            ]
        },
        {
            "id": "task077-8c883076e8174fdbb2d83ee3b5799cda",
            "input": "Step 1: For each row in Member_of_club table, find corresponding rows in Student table and in Club table.\nStep 2: find Fname, LName of the results of step 1 whose ClubName equals Hopkins Student Enterprises",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = \"Hopkins Student Enterprises\""
            ]
        },
        {
            "id": "task077-4ab64fb253664bdda742b8bf54ad1647",
            "input": "Step 1: find rows in Person table whose gender equals male.\nStep 2: find each value of city the results of step 1 along with the average age of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( age ) , city FROM Person WHERE gender = \"male\" GROUP BY city"
            ]
        },
        {
            "id": "task077-10d8a9c2bf974f0f929d4c9ee3b64a0e",
            "input": "find the name of Person table for which city equals new york city",
            "output": [
                "SELECT name FROM Person WHERE city = \"new york city\""
            ]
        },
        {
            "id": "task077-2ff6cfb5bf5447278231299cb2e43de7",
            "input": "Step 1: find the AllergyType of Allergy_Type table.\nStep 2: find the average Age in Student table whose Sex one of the results of step 1",
            "output": [
                "SELECT Avg ( T1.Age ) FROM Student AS T1 WHERE T1.Sex IN ( SELECT T2.AllergyType FROM Allergy_Type AS T2 )"
            ]
        },
        {
            "id": "task077-918cf4584be74963af9b06a9696f2a39",
            "input": "find the rows of employees table for which SALARY less than 2500",
            "output": [
                "SELECT * FROM employees WHERE SALARY < 2500"
            ]
        },
        {
            "id": "task077-61cf71ff2cf546f58c09b66dd0e0f759",
            "input": "find the Document_Type_Name of Ref_Document_Types table for which Document_Type_Code equals Paper",
            "output": [
                "SELECT Document_Type_Name FROM Ref_Document_Types WHERE Document_Type_Code = \"Paper\""
            ]
        },
        {
            "id": "task077-ce26289239c74506addb493fa0a4fd72",
            "input": "find the number of rows in Reservations table whose CheckIn equals King",
            "output": [
                "SELECT Count ( * ) FROM Reservations WHERE CheckIn = \"King\""
            ]
        },
        {
            "id": "task077-b96c17e705304dc7a373c769cb779a33",
            "input": "Step 1: find the customer_name of Customers table ordered ascending by customer_name.\nStep 2: only show the first 5 rows of the results",
            "output": [
                "SELECT customer_name FROM Customers ORDER BY customer_name Asc LIMIT 5"
            ]
        },
        {
            "id": "task077-f1e9457bb7e74d969ba1c72a5fa6b62d",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the max_sea_level_pressure_inches of weather table for which max_sea_level_pressure_inches less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < 50"
            ]
        },
        {
            "id": "task077-bc2d3eabe70d49eaabcb17ca92f24453",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose Year equals 2008.\nStep 3: find City of the results of step 1 whose Year equals 2008.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008"
            ]
        },
        {
            "id": "task077-5e605d33e881420686b7d920021adea7",
            "input": "Step 1: For each row in Problems table, find the corresponding rows in Problem_Log table.\nStep 2: find Problem_Log's problem_id, date_problem_reported of the results of step 1 whose problem_log_id equals 10",
            "output": [
                "SELECT T1.problem_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = 10"
            ]
        },
        {
            "id": "task077-ebc7d302a2bd4d47b9e056dac3401729",
            "input": "find the average Sales_billion in Companies table",
            "output": [
                "SELECT Avg ( Sales_billion ) FROM Companies"
            ]
        },
        {
            "id": "task077-10142e5e6bb84f4886bb0cc80c1504ad",
            "input": "find the friend of PersonFriend table for which friend equals Bob",
            "output": [
                "SELECT friend FROM PersonFriend WHERE friend = \"Bob\""
            ]
        },
        {
            "id": "task077-f2f66a614e114627bfc4b004370e3359",
            "input": "Step 1: find the Company_ID of station_company table.\nStep 2: find the Main_Industry of company table whose company's Company_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Main_Industry FROM company AS T1 WHERE T1.Company_ID NOT IN ( SELECT T2.Company_ID FROM station_company AS T2 )"
            ]
        },
        {
            "id": "task077-cbb597e3ca324f4f8c9256679112f2b0",
            "input": "find without repetition name of airport table whose Country equals United States or Country equals Billund Airport",
            "output": [
                "SELECT DISTINCT name FROM airport WHERE Country = \"Billund Airport\" OR Country = \"United States\""
            ]
        },
        {
            "id": "task077-67562ee5a7414454bb16c9fd54316f9b",
            "input": "find the JOB_TITLE, MAX_SALARY of jobs table for which MIN_SALARY equals or between 12000 and 18000",
            "output": [
                "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY BETWEEN 18000 AND 12000"
            ]
        },
        {
            "id": "task077-ffee45f78dbc42a983038553408e537c",
            "input": "find the number of different Competition in match table",
            "output": [
                "SELECT Count ( DISTINCT Competition ) FROM match"
            ]
        },
        {
            "id": "task077-5266944f558b4c12ba12f709138ee223",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date, duration of the results of step 1 with smallest value of min_humidity",
            "output": [
                "SELECT T1.start_date , T1.duration FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.min_humidity Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-4e84c34d5bc04f7e8e1f170d20e399b4",
            "input": "Step 1: For each row in Employees table, find the corresponding rows in Documents_to_be_Destroyed table.\nStep 2: find the number of rows of each value of Destroyed_by_Employee_ID in the results of step 1.\nStep 3: find Employee_ID in the results of step 1 whose corresponding value in step 2 is greater than or equals 1",
            "output": [
                "SELECT T1.Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T2.Destroyed_by_Employee_ID HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-3e8b9a2a35e94e1e9db618f5ddac32f6",
            "input": "Step 1: For each row in Statements table, find corresponding rows in Documents table and in Accounts table.\nStep 2: find the number of rows of each value of Document_ID in the results of step 1.\nStep 3: find Accounts's Statement_ID, Statement_Details of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.Statement_ID , T2.Statement_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID AND T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID GROUP BY T1.Document_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b65d43a9d68e44e1ab7ebf8eb455d577",
            "input": "find the name of PersonFriend table with smallest value of year",
            "output": [
                "SELECT name FROM PersonFriend ORDER BY year Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-b273cff23fd142fda6ef7759ce3ed715",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find balance of the results of step 1 whose name contains ee",
            "output": [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE \"ee\""
            ]
        },
        {
            "id": "task077-600c64e308f446faac7910cfa7ede3b7",
            "input": "find the number of rows in tracks table whose name equals Billy Cobham",
            "output": [
                "SELECT Count ( * ) FROM tracks WHERE name = \"Billy Cobham\""
            ]
        },
        {
            "id": "task077-684d75565ab243908fe21cc6587e3b26",
            "input": "Step 1: find the number of rows of each value of City in city table.\nStep 2: find City, Regional_Population in city table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT City , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-dd62e700e27e480183d0b4552138d35b",
            "input": "find the number of rows in Songs table",
            "output": [
                "SELECT Count ( * ) FROM Songs"
            ]
        },
        {
            "id": "task077-5848a5f76e1b43059764034d85ca0d38",
            "input": "find without repetition the Fname, city_code of Student table for which Sex greater than or equals Milk",
            "output": [
                "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex > = \"Milk\""
            ]
        },
        {
            "id": "task077-107d6898f5a0400584a1e795514bda9d",
            "input": "find the minimum duration and the minimum duration in trip table whose start_station_name equals Howard at 2nd",
            "output": [
                "SELECT Min ( duration ) , Min ( duration ) FROM trip WHERE start_station_name = \"Howard at 2nd\""
            ]
        },
        {
            "id": "task077-c86e1477c69845438f0e447ac0ba0812",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find balance, balance of the results of step 1 whose name equals Brown",
            "output": [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\""
            ]
        },
        {
            "id": "task077-0f265b819b5d436cba721c9d3eba657b",
            "input": "Step 1: For each row in Ref_Locations table, find the corresponding rows in Document_Locations table.\nStep 2: find Date_in_Location_From, Date_in_Locaton_To of the results of step 1 whose Location_Name equals Robin CV",
            "output": [
                "SELECT T2.Date_in_Location_From , T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code WHERE T1.Location_Name = \"Robin CV\""
            ]
        },
        {
            "id": "task077-32a35ac4626c4343a2273645a5a9e46e",
            "input": "Step 1: find the number of rows of each value of skill_id in Skills table.\nStep 2: find skill_id, skill_description of Skills table with largest value in the results of step 1",
            "output": [
                "SELECT skill_id , skill_description FROM Skills GROUP BY skill_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-91375805b51349acbdb65cbd5ba1c7f6",
            "input": "find the maximum Consider_rate, the minimum Oppose_rate and the maximum Oppose_rate in candidate table",
            "output": [
                "SELECT Max ( Consider_rate ) , Min ( Oppose_rate ) , Max ( Oppose_rate ) FROM candidate"
            ]
        },
        {
            "id": "task077-727dbb2d347849aaba6828677f75a639",
            "input": "find phone of customers table whose first_name equals Nancy and last_name equals Edwards",
            "output": [
                "SELECT phone FROM customers WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""
            ]
        },
        {
            "id": "task077-990f3441151647ffa55ba9777f6c5284",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City, City of the results of step 1 whose Year equals 1",
            "output": [
                "SELECT T1.City , T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 1"
            ]
        },
        {
            "id": "task077-cd2612c8b73b40c3a041f44cc9d27b23",
            "input": "Step 1: For each row in representative table, find the corresponding rows in election table.\nStep 2: find the average Vote_Percent in the results of step 1 whose Party equals Republican",
            "output": [
                "SELECT Avg ( T1.Vote_Percent ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\""
            ]
        },
        {
            "id": "task077-2f36e8c94a3d4bf2980a90571eaca104",
            "input": "Step 1: For each row in customers table, find the corresponding rows in invoices table.\nStep 2: find first_name, last_name of the results of step 1 ordered descending by total.\nStep 3: only show the first 10 rows of the results",
            "output": [
                "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.total Desc LIMIT 10"
            ]
        },
        {
            "id": "task077-a81511c7a62442479cfae913872c9602",
            "input": "Step 1: For each row in Tracklists table, find corresponding rows in Songs table and in Albums table.\nStep 2: find Songs's Title of the results of step 1 whose Year equals 2010",
            "output": [
                "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = 2010"
            ]
        },
        {
            "id": "task077-515e3908679a471c864255e8be2a9a30",
            "input": "Step 1: For each row in Projects table, find the corresponding rows in AssignedTo table.\nStep 2: find each value of Project in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.Name , Count ( * ) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project GROUP BY T2.Project"
            ]
        },
        {
            "id": "task077-9350d0ba778a419cbc6f18a107a85998",
            "input": "Step 1: For each row in Documents table, find the corresponding rows in Documents_with_Expenses table.\nStep 2: find Document_Type_Code, Document_Details, Documents's Document_ID of the results of step 1",
            "output": [
                "SELECT T1.Document_Type_Code , T2.Document_Details , T1.Document_ID FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID"
            ]
        },
        {
            "id": "task077-de37a762a54f4167a58faa5dc387d77f",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find EMPLOYEE_ID, MIN_SALARY of the results of step 1 whose FIRST_NAME equals 2007-11-05 and LAST_NAME greater than 2009-07-05 and LAST_NAME less than King",
            "output": [
                "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = \"2007-11-05\" AND T2.LAST_NAME > \"King\" AND T2.LAST_NAME < \"2009-07-05\""
            ]
        },
        {
            "id": "task077-99168a869cad41e7812c7628b0e96733",
            "input": "find the name of Person table with largest value of gender",
            "output": [
                "SELECT name FROM Person ORDER BY gender Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a453d04bc1724a42b97a8df7f2e3fd84",
            "input": "Step 1: For each row in employees table, find the corresponding rows in customers table.\nStep 2: find employees's first_name, employees's last_name of the results of step 1 whose customers's first_name equals Nancy and customers's last_name equals Edwards",
            "output": [
                "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = \"Nancy\" AND T2.last_name = \"Edwards\""
            ]
        },
        {
            "id": "task077-0bfe5c24d5b74f188ab869a03222ed96",
            "input": "Step 1: For each row in people table, find the corresponding rows in candidate table.\nStep 2: find each value of Sex in the results of step 1 along with the minimum Unsure_rate of the corresponding rows to each value",
            "output": [
                "SELECT T2.Name , Min ( T1.Unsure_rate ) FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T2.Sex"
            ]
        },
        {
            "id": "task077-ee9b021927ba49ec83af48b81b1d588c",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find each value of DEPARTMENT_ID in the results of step 1 along with the average MAX_SALARY of the corresponding rows to each value",
            "output": [
                "SELECT T1.JOB_TITLE , Avg ( T1.MAX_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID"
            ]
        },
        {
            "id": "task077-5d8fbeb5e6684a5f9c80cb97f4d3966b",
            "input": "Step 1: find the number of rows of each value of EMPLOYEE_ID in employees table.\nStep 2: find MANAGER_ID in employees table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT MANAGER_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-c14b031dbcb248509f2cd4e2ac251bde",
            "input": "Step 1: find the number of rows of each value of name in buildings table.\nStep 2: find name in buildings table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT name FROM buildings GROUP BY name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-62b0c64814ac46d8a833c95291b7f364",
            "input": "find the minimum Support_rate, the maximum Consider_rate and the average Oppose_rate in candidate table",
            "output": [
                "SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Avg ( Oppose_rate ) FROM candidate"
            ]
        },
        {
            "id": "task077-eedf5a701b314a17b1131142d15151d2",
            "input": "find each value of COUNTRY_ID in countries table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT COUNTRY_ID , Count ( * ) FROM countries GROUP BY COUNTRY_ID"
            ]
        },
        {
            "id": "task077-89ea2bebe0e74e899fa39a26ce4acfd8",
            "input": "Step 1: find the number of rows of each value of skill_id in Skills table.\nStep 2: find skill_id, skill_code of Skills table with largest value in the results of step 1",
            "output": [
                "SELECT skill_id , skill_code FROM Skills GROUP BY skill_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e8f1c7908c2c4404a9a6bd2157d3bbc1",
            "input": "Step 1: find the EMPLOYEE_ID of employees table.\nStep 2: For each row in departments table, find the corresponding rows in job_history table.\nStep 3: find job_history's EMPLOYEE_ID of the results of step 2 whose LOCATION_ID equals 100.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.EMPLOYEE_ID FROM employees AS T1 EXCEPT SELECT T3.EMPLOYEE_ID FROM departments AS T2 JOIN job_history AS T3 ON T2.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T2.LOCATION_ID = 100"
            ]
        },
        {
            "id": "task077-07f6462155a345d9a60823cbe118e913",
            "input": "Step 1: find the Employee_ID of Employees table.\nStep 2: find the Destroyed_by_Employee_ID of Documents_to_be_Destroyed table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.Employee_ID FROM Employees AS T1 EXCEPT SELECT T2.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T2"
            ]
        },
        {
            "id": "task077-751d927c61894322a9502cb45276869b",
            "input": "find the id, City, name of airport table ordered ascending by name",
            "output": [
                "SELECT id , City , name FROM airport ORDER BY name Asc"
            ]
        },
        {
            "id": "task077-1f1d1d3f6afa46ed85736c34fff9b5e1",
            "input": "find the number of rows in station table whose city not equals San Francisco",
            "output": [
                "SELECT Count ( * ) FROM station WHERE city ! = \"San Francisco\""
            ]
        },
        {
            "id": "task077-159cbb6b94e54ed2b1dcd4cd550ea79e",
            "input": "find the maximum milliseconds in tracks table",
            "output": [
                "SELECT Max ( milliseconds ) FROM tracks"
            ]
        },
        {
            "id": "task077-f30478222afe468390a54ef5a757a636",
            "input": "Step 1: For each row in Instruments table, find corresponding rows in Songs table and in Band table.\nStep 2: find Title of the results of step 1 whose Lastname equals Heilo",
            "output": [
                "SELECT T1.Title FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T2.Lastname = \"Heilo\""
            ]
        },
        {
            "id": "task077-9c5d5e2a8fdf4a93b0b461d9e5257138",
            "input": "find the Event_ID of Events table for which Event_Details not equals Kenyatta Kuhn",
            "output": [
                "SELECT Event_ID FROM Events WHERE Event_Details ! = \"Kenyatta Kuhn\""
            ]
        },
        {
            "id": "task077-374f2f2655444b899bed67a0ea07ce05",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find Fname, Lname of the results of step 1 whose DName equals 520",
            "output": [
                "SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = 520"
            ]
        },
        {
            "id": "task077-e76347e33bce4e67a7fd2854f61224ce",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date, weather's zip_code of the results of step 1 whose min_temperature_f equals 94107 and min_temperature_f less than 61",
            "output": [
                "SELECT T1.start_date , T2.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f = 61 AND T2.min_temperature_f < 94107"
            ]
        },
        {
            "id": "task077-cce2f32e2e0d4d33a3d5c15739f5bc9f",
            "input": "Step 1: find the number of rows of each value of id in station table.\nStep 2: find id, name in station table whose corresponding value in step 1 is greater than or equals 200",
            "output": [
                "SELECT id , name FROM station GROUP BY id HAVING Count ( * ) > = 200"
            ]
        },
        {
            "id": "task077-f731e742ee584c0cbb0653c525d9004b",
            "input": "Step 1: find the number of rows of each value of Claim_Status_Code in Claim_Headers table.\nStep 2: find Claim_Status_Code of Claim_Headers table with largest value in the results of step 1",
            "output": [
                "SELECT Claim_Status_Code FROM Claim_Headers GROUP BY Claim_Status_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d271754f87e34c1385009ae32a5e81a8",
            "input": "Step 1: For each row in exhibition table, find the corresponding rows in exhibition_record table.\nStep 2: find Theme of the results of step 1 whose Attendance greater than 100.\nStep 3: find Theme of the results of step 1 whose Attendance less than 500.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > 100 INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < 500"
            ]
        },
        {
            "id": "task077-e9cc6fb9e29e47cc81aeb92b894421c3",
            "input": "Step 1: For each row in Part_Faults table, find the corresponding rows in Fault_Log_Parts table.\nStep 2: find fault_description, fault_status of the results of step 1",
            "output": [
                "SELECT T1.fault_description , T2.fault_status FROM Part_Faults AS T1 JOIN Fault_Log_Parts AS T2 ON T1.part_fault_id = T2.part_fault_id"
            ]
        },
        {
            "id": "task077-3bc95e538db5426ebc92de64a41707dd",
            "input": "find the age of Person table with largest value of age",
            "output": [
                "SELECT age FROM Person ORDER BY age Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-912caef60e5347a09dc1b2bcba51efef",
            "input": "Step 1: find the average balance in SAVINGS table.\nStep 2: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 3: find name in the results of step 2 whose balance greater than the results of step 1",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )"
            ]
        },
        {
            "id": "task077-e161d7fcfa594cfdb076f8326da1b6b0",
            "input": "Step 1: find the Title of film table for which Director equals Nicholas Meyer.\nStep 2: find the Title of film table for which Director equals Walter Hill.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Title FROM film WHERE Director = \"Nicholas Meyer\" INTERSECT SELECT Title FROM film WHERE Director = \"Walter Hill\""
            ]
        },
        {
            "id": "task077-72d714a80f2542dba9f433b7b96f4695",
            "input": "Step 1: For each row in Office_locations table, find corresponding rows in buildings table and in Companies table.\nStep 2: find the number of rows of each value of Headquarters in the results of step 1.\nStep 3: find buildings's name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T1.name FROM buildings AS T1 JOIN Companies AS T2 JOIN Office_locations AS T3 ON T1.id = T3.building_id AND T3.company_id = T2.id GROUP BY T2.Headquarters ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a26551dba8fc4936a1524502fd8baf4b",
            "input": "find each value of part_id in Parts table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT part_name , Count ( * ) FROM Parts GROUP BY part_id"
            ]
        },
        {
            "id": "task077-223e510e6e214ac0827c7b944edfcd0a",
            "input": "find the maximum Age and the minimum Age in Student table whose city_code equals NYC",
            "output": [
                "SELECT Max ( Age ) , Min ( Age ) FROM Student WHERE city_code = \"NYC\""
            ]
        },
        {
            "id": "task077-08d7e6a4830249cf8b9f89de6c7c8911",
            "input": "Step 1: For each row in head table, find the corresponding rows in management table.\nStep 2: find born_state of the results of step 1 whose temporary_acting equals Treasury.\nStep 3: find born_state of the results of step 1 whose temporary_acting equals Homeland Security.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting = \"Treasury\" INTERSECT SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting = \"Homeland Security\""
            ]
        },
        {
            "id": "task077-f620a6a4a67a411db3e5f470c3376682",
            "input": "Step 1: find the start_date, start_station_id of trip table ordered ascending by id.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT start_date , start_station_id FROM trip ORDER BY id Asc LIMIT 3"
            ]
        },
        {
            "id": "task077-2f7f436903334854bda4bd477c549353",
            "input": "find the number of rows in Songs table whose Title equals Le Pop",
            "output": [
                "SELECT Count ( * ) FROM Songs WHERE Title = \"Le Pop\""
            ]
        },
        {
            "id": "task077-a096dfa2be0c451d9479cc17d66b6d4a",
            "input": "Step 1: find the Author of submission table.\nStep 2: find the Author of submission table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Author FROM submission EXCEPT SELECT Author FROM submission"
            ]
        },
        {
            "id": "task077-c543afbaa6d54cd29a14edd36d95596a",
            "input": "find country of employees table whose first_name equals Roberto and last_name equals Almeida",
            "output": [
                "SELECT country FROM employees WHERE first_name = \"Roberto\" AND last_name = \"Almeida\""
            ]
        },
        {
            "id": "task077-bd999608fcb545c5a5d272294ebefe95",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find each value of ACCOUNTS's custid in the results of step 1 along with the summation of balance of the corresponding rows to each value",
            "output": [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid"
            ]
        },
        {
            "id": "task077-76820078ec114c6a8385e83eeaa1cc34",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find friend of the results of step 1 whose Person's name equals Alice",
            "output": [
                "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = \"Alice\""
            ]
        },
        {
            "id": "task077-96669f3400c4485b990084061cc405bd",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Problems table.\nStep 2: find product_id of the results of step 1 whose staff_last_name greater than or equals Medhurst and staff_last_name less than or equals Christop.\nStep 3: find product_id of the results of step 1 whose staff_first_name equals Ashley.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.product_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_last_name > = \"Christop\" AND T1.staff_last_name < = \"Medhurst\" INTERSECT SELECT T2.product_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = \"Ashley\""
            ]
        },
        {
            "id": "task077-5f0f6f57934a4c99afcca46e6b6270d9",
            "input": "find the truck_details of Trucks table ordered ascending by truck_details",
            "output": [
                "SELECT truck_details FROM Trucks ORDER BY truck_details Asc"
            ]
        },
        {
            "id": "task077-e4096e7f6eb142569430a153c40442c7",
            "input": "find the Unsure_rate, Unsure_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Unsure_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-271f431f47e44172849f0916dbd17be5",
            "input": "find the Famous_Title of artist table for which Age greater than or equals 32",
            "output": [
                "SELECT Famous_Title FROM artist WHERE Age > = 32"
            ]
        },
        {
            "id": "task077-05912f2a185748ec853ee948b8c91f04",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find EMPLOYEE_ID, SALARY of the results of step 1 whose JOB_TITLE equals Payam",
            "output": [
                "SELECT T2.EMPLOYEE_ID , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = \"Payam\""
            ]
        },
        {
            "id": "task077-165c0cd9b0cb4acdb670d7ec50768df4",
            "input": "Step 1: find the number of rows of each value of city in station table.\nStep 2: find city, name of station table ordered descending by the results of step 1",
            "output": [
                "SELECT city , name FROM station GROUP BY city ORDER BY Count ( * ) Desc"
            ]
        },
        {
            "id": "task077-c699cff280474468809182e7441ecc7f",
            "input": "find the number of rows in PersonFriend table whose friend equals Dan",
            "output": [
                "SELECT Count ( * ) FROM PersonFriend WHERE friend = \"Dan\""
            ]
        },
        {
            "id": "task077-aa9c985ef7f94925b6a605f7bc445d84",
            "input": "find each value of product_id in Product table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT product_name , Count ( * ) FROM Product GROUP BY product_id"
            ]
        },
        {
            "id": "task077-6cac1d7ff5114e67bee3942499b75ba0",
            "input": "Step 1: find the number of rows of each value of Service_ID in Services table.\nStep 2: find Service_ID, Service_Type_Code of Services table with smallest value in the results of step 1",
            "output": [
                "SELECT Service_ID , Service_Type_Code FROM Services GROUP BY Service_ID ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-57e39920bef8472db677121f5215d69f",
            "input": "find the maximum gradepoint and the minimum lettergrade in Gradeconversion table",
            "output": [
                "SELECT Max ( gradepoint ) , Min ( lettergrade ) FROM Gradeconversion"
            ]
        },
        {
            "id": "task077-3ffda92e6af6454f92a7e442f86bbbce",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME, SALARY of the results of step 1 whose JOB_TITLE ends with m",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE \"%m\""
            ]
        },
        {
            "id": "task077-30d7274090b84b178d987ce500b1c6cd",
            "input": "Step 1: find the number of rows of each value of EMPLOYEE_ID in employees table.\nStep 2: find EMPLOYEE_ID in employees table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT EMPLOYEE_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-540122bc0ec5451a976f5a13e3df9ce1",
            "input": "find each value of Name in artist table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Name , Count ( * ) FROM artist GROUP BY Name"
            ]
        },
        {
            "id": "task077-3b114faeffd64f1ba81f9f3818ac1bfd",
            "input": "Step 1: For each row in departments table, find the corresponding rows in employees table.\nStep 2: find the  FIRST_NAME in the results of step 1 whose DEPARTMENT_NAME not equals M ordered ascending by EMPLOYEE_ID",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = \"M\" ORDER BY T2.EMPLOYEE_ID Asc"
            ]
        },
        {
            "id": "task077-d85f66c5b8594b6bb39c9ec09b239753",
            "input": "find the number of rows in customers table whose first_name equals Lucas and last_name equals Mancini",
            "output": [
                "SELECT Count ( * ) FROM customers WHERE first_name = \"Lucas\" AND last_name = \"Mancini\""
            ]
        },
        {
            "id": "task077-01e63fd9fe524937aec7e26699788538",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find the average balance of each value of name in the results of step 1.\nStep 3: find name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1628bf0ef2f9481ab03fc6a01eaf0960",
            "input": "find the HIRE_DATE of employees table for which LAST_NAME not equals M",
            "output": [
                "SELECT HIRE_DATE FROM employees WHERE LAST_NAME ! = \"M\""
            ]
        },
        {
            "id": "task077-cc2ffdfb07aa4ff7bea99b22eacec07b",
            "input": "find the Team, Position of player table",
            "output": [
                "SELECT Team , Position FROM player"
            ]
        },
        {
            "id": "task077-5ec08c4718be41c5b578441fc5c73e6c",
            "input": "find the number of rows in Club table whose ClubName equals Tennis Club",
            "output": [
                "SELECT Count ( * ) FROM Club WHERE ClubName = \"Tennis Club\""
            ]
        },
        {
            "id": "task077-8851cf47546a4769a62ce58c451df651",
            "input": "find JOB_TITLE of jobs table whose MIN_SALARY greater than 12000 or MIN_SALARY greater than 20000",
            "output": [
                "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 20000 OR MIN_SALARY > 12000"
            ]
        },
        {
            "id": "task077-4a58a3f6c7244292b1bfe3d477a84bcb",
            "input": "find the CName of Course table for which CName equals MTW",
            "output": [
                "SELECT CName FROM Course WHERE CName = \"MTW\""
            ]
        },
        {
            "id": "task077-4d8f9721f9a34729805f60d3241f4aa9",
            "input": "find the Location_Name of Ref_Locations table for which Location_Description equals Robin CV",
            "output": [
                "SELECT Location_Name FROM Ref_Locations WHERE Location_Description = \"Robin CV\""
            ]
        },
        {
            "id": "task077-7cefb1f35b7a4427a5125b6d28b70088",
            "input": "find the number of rows in Person table whose gender equals female and age equals 25",
            "output": [
                "SELECT Count ( * ) FROM Person WHERE gender = \"female\" AND age = 25"
            ]
        },
        {
            "id": "task077-e0566ba39a8b4b3898950d54343d53e4",
            "input": "Step 1: For each row in Member_of_club table, find corresponding rows in Student table and in Club table.\nStep 2: find Fname, LName of the results of step 1 whose ClubName equals Bootup Baltimore and Position equals F",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID AND T1.StuID = T3.StuID WHERE T2.ClubName = \"Bootup Baltimore\" AND T3.Position = \"F\""
            ]
        },
        {
            "id": "task077-de204e9144f04da883c16e5cb1db7f64",
            "input": "find each value of company_id in Third_Party_Companies table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , company_id FROM Third_Party_Companies GROUP BY company_id"
            ]
        },
        {
            "id": "task077-fab1b5fe17aa4836b6aac99088ec554d",
            "input": "find JOB_TITLE, MIN_SALARY, MAX_SALARY of jobs table whose JOB_TITLE contains President and MAX_SALARY greater than 12000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE \"President\" AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-c6439005682645b6aecc881835d282e5",
            "input": "Step 1: find the Customer_ID of Customers table.\nStep 2: find the Customer_ID of Policies table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.Customer_ID FROM Customers AS T1 EXCEPT SELECT T2.Customer_ID FROM Policies AS T2"
            ]
        },
        {
            "id": "task077-beabff9d33314eaba0a4f38e548f4a04",
            "input": "find the number of rows in Allergy_Type table",
            "output": [
                "SELECT Count ( * ) FROM Allergy_Type"
            ]
        },
        {
            "id": "task077-9aa78f45e0eb419bb7130db273ba9404",
            "input": "find the Company, Rank of company table ordered ascending by Sales_billion",
            "output": [
                "SELECT Company , Rank FROM company ORDER BY Sales_billion Asc"
            ]
        },
        {
            "id": "task077-f85bba13d4604c9684763b1b25597323",
            "input": "Step 1: For each row in people table, find the corresponding rows in candidate table.\nStep 2: find Name, Sex of the results of step 1 with largest value of Oppose_rate",
            "output": [
                "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Oppose_rate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6d3902b4e75c454e8c42c58ca42e7da7",
            "input": "Step 1: For each row in Band table, find the corresponding rows in Vocals table.\nStep 2: find Type of the results of step 1 whose Lastname equals Heilo and Lastname equals Der Kapitan",
            "output": [
                "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = \"Der Kapitan\" AND T1.Lastname = \"Heilo\""
            ]
        },
        {
            "id": "task077-f49ee0560b69475dbb4e0f67791cd3ce",
            "input": "find without repetition the Company of company table",
            "output": [
                "SELECT DISTINCT Company FROM company"
            ]
        },
        {
            "id": "task077-075137a918b245a0975ba5679fb2dc76",
            "input": "find without repetition the Title of Songs table",
            "output": [
                "SELECT DISTINCT Title FROM Songs"
            ]
        },
        {
            "id": "task077-42da23bf78684f3f98e63124844208e7",
            "input": "find FIRST_NAME, LAST_NAME of employees table whose SALARY greater than 163 and MANAGER_ID equals 0",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY > 163 AND MANAGER_ID = 0"
            ]
        },
        {
            "id": "task077-b2e51d1b61ac47e399c02dec482a80cd",
            "input": "find the FIRST_NAME, LAST_NAME of employees table with smallest value of SALARY",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees ORDER BY SALARY Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-f4fbbc0269c649b7a92d1a528acf7b71",
            "input": "find the ClubName of Club table for which ClubName equals AKW",
            "output": [
                "SELECT ClubName FROM Club WHERE ClubName = \"AKW\""
            ]
        },
        {
            "id": "task077-0da041c71a844ba2b42c2e1170d11a0b",
            "input": "find the Fname, LName of Student table for which Major equals Bootup Baltimore",
            "output": [
                "SELECT Fname , LName FROM Student WHERE Major = \"Bootup Baltimore\""
            ]
        },
        {
            "id": "task077-51b43d03ae1b4334aa5ae1112fe02053",
            "input": "find the number of rows in exhibition table whose Ticket_Price greater than 100 or Ticket_Price less than 10",
            "output": [
                "SELECT Count ( * ) FROM exhibition WHERE Ticket_Price > 10 OR Ticket_Price < 100"
            ]
        },
        {
            "id": "task077-b24215c6808f468b85f9170bdcae2ced",
            "input": "find the roomName, decor of Rooms table with smallest value of basePrice",
            "output": [
                "SELECT roomName , decor FROM Rooms ORDER BY basePrice Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-ef2bfd4fffde42609e57ddcaa86608fe",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date of the results of step 1 ordered descending by precipitation_inches.\nStep 3: only show the first 5 rows of the results",
            "output": [
                "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.precipitation_inches Desc LIMIT 5"
            ]
        },
        {
            "id": "task077-cb130b61112b4a729b7d7949f8785cb1",
            "input": "Step 1: find the id of station table.\nStep 2: find the station_id of status table for which bikes_available greater than 10.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.id FROM station AS T1 EXCEPT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available > 10"
            ]
        },
        {
            "id": "task077-c1ce9120874a481a994fe8a45ab79cf2",
            "input": "Step 1: For each row in customers table, find the corresponding rows in invoices table.\nStep 2: find the summation of total of each value of first_name, last_name in the results of step 1.\nStep 3: find first_name, last_name of step 1 results ordered descending by the results of step 2.\nStep 4: only show the first 10 rows of the results",
            "output": [
                "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name , T1.last_name ORDER BY Sum ( T2.total ) Desc LIMIT 10"
            ]
        },
        {
            "id": "task077-36649bac27ad462eb4705aea4bad4689",
            "input": "find the end_date, start_date of trip table",
            "output": [
                "SELECT end_date , start_date FROM trip"
            ]
        },
        {
            "id": "task077-9638494363124fc1b81f09e39e6762ef",
            "input": "Step 1: find the number of rows of each value of Name in artist table.\nStep 2: find Name, Country of artist table with largest value in the results of step 1",
            "output": [
                "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2f5e46cb606e472f845623c2fb85bcce",
            "input": "find the maximum Age in artist table",
            "output": [
                "SELECT Max ( Age ) FROM artist"
            ]
        },
        {
            "id": "task077-10655dfcc934467496c947c0c2283d40",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find age of the results of step 1 with largest value of year",
            "output": [
                "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4afa6a76550a4e969b15b2821bd97c87",
            "input": "Step 1: find the maximum Regional_Population in city table.\nStep 2: find the City of city table whose Regional_Population equals the results of step 1",
            "output": [
                "SELECT City FROM city WHERE Regional_Population = ( SELECT Max ( Regional_Population ) FROM city )"
            ]
        },
        {
            "id": "task077-00206f558721485894898bdb28c44a94",
            "input": "find the date of weather table for which min_humidity equals or between 30.3 and 31",
            "output": [
                "SELECT date FROM weather WHERE min_humidity BETWEEN 31 AND 30.3"
            ]
        },
        {
            "id": "task077-6f5cf452b944436fa0d52e0e639fee37",
            "input": "Step 1: For each row in station_company table, find corresponding rows in company table and in gas_station table.\nStep 2: find Manager_Name, Headquarters of the results of step 1 ordered descending by Market_Value",
            "output": [
                "SELECT T2.Manager_Name , T1.Headquarters FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc"
            ]
        },
        {
            "id": "task077-0b00a69a85f94544877dd85b6b452775",
            "input": "find the ClubName of Club table for which ClubName equals Pen and Paper Gaming",
            "output": [
                "SELECT ClubName FROM Club WHERE ClubName = \"Pen and Paper Gaming\""
            ]
        },
        {
            "id": "task077-32a28b3590014fc3a8af9d5a56cb13d1",
            "input": "Step 1: For each row in Band table, find the corresponding rows in Performance table.\nStep 2: find the number of rows of each value of StagePosition in the results of step 1.\nStep 3: find Lastname of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Lastname FROM Band AS T1 JOIN Performance AS T2 ON T1.Id = T2.Bandmate GROUP BY T2.StagePosition ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-44e750c4cf81474fa65fae32e11e0633",
            "input": "find address of customers table whose first_name equals Nancy and last_name equals Edwards",
            "output": [
                "SELECT address FROM customers WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""
            ]
        },
        {
            "id": "task077-395d98f65c3842a385e43692e4b91f93",
            "input": "find the name of buildings table for which Status equals on-hold ordered ascending by name",
            "output": [
                "SELECT name FROM buildings WHERE Status = \"on-hold\" ORDER BY name Asc"
            ]
        },
        {
            "id": "task077-4242b50a2adb4cd2a1ca1a505e6b2c4a",
            "input": "find the number of rows in Songs table whose Title equals drums",
            "output": [
                "SELECT Count ( * ) FROM Songs WHERE Title = \"drums\""
            ]
        },
        {
            "id": "task077-e11e8fa4b00a485c8bfabbfecbb6110a",
            "input": "find the number of rows in workshop table",
            "output": [
                "SELECT Count ( * ) FROM workshop"
            ]
        },
        {
            "id": "task077-5f5a30af2ba746b380da73772456c06e",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find the summation of Adults in the results of step 1 whose roomName equals 2010-10-23 and LastName equals CONRAD and LastName equals SELBIG",
            "output": [
                "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.roomName = \"2010-10-23\" AND T2.LastName = \"SELBIG\" AND T2.LastName = \"CONRAD\""
            ]
        },
        {
            "id": "task077-3fa861daf0df4092baac6ea8b6fbd301",
            "input": "find the Document_ID, Document_Description of Documents table",
            "output": [
                "SELECT Document_ID , Document_Description FROM Documents"
            ]
        },
        {
            "id": "task077-e5ea366150cd42eda2e22dff42fe76a3",
            "input": "Step 1: For each row in Parts table, find the corresponding rows in Part_Faults table.\nStep 2: find the number of rows of each value of part_fault_id in the results of step 1.\nStep 3: find part_name of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-fb27097aeb4040af86e318412670f9f8",
            "input": "find name of Person table whose city equals Alice and gender equals male",
            "output": [
                "SELECT name FROM Person WHERE city = \"Alice\" AND gender = \"male\""
            ]
        },
        {
            "id": "task077-bfab4d5710204707910410756bd2c983",
            "input": "find the LName, Age of Student table for which Sex equals Cat",
            "output": [
                "SELECT LName , Age FROM Student WHERE Sex = \"Cat\""
            ]
        },
        {
            "id": "task077-5cfd3b6d00874377a2273d5687d422c7",
            "input": "find the number of rows in Songs table whose Title equals Flash",
            "output": [
                "SELECT Count ( * ) FROM Songs WHERE Title = \"Flash\""
            ]
        },
        {
            "id": "task077-ba4646c572ea479888e2d0e2ceaf782d",
            "input": "Step 1: find the number of rows of each value of Destroyed_by_Employee_ID in Documents_to_be_Destroyed table.\nStep 2: find Destroyed_by_Employee_ID in Documents_to_be_Destroyed table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed GROUP BY Destroyed_by_Employee_ID HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-523a1873c2b14f0fba09b0748dcc8624",
            "input": "Step 1: find the number of rows of each value of School_ID in school table.\nStep 2: find Denomination in school table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Denomination FROM school GROUP BY School_ID HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-8c5b99f26410494cb4129b45159e3678",
            "input": "find the number of rows in Projects table whose Hours greater than 300",
            "output": [
                "SELECT Count ( * ) FROM Projects WHERE Hours > 300"
            ]
        },
        {
            "id": "task077-83c8724522e249c5b21468095ef3ea59",
            "input": "Step 1: For each row in AssignedTo table, find corresponding rows in Scientists table and in Projects table.\nStep 2: find Projects's Name, Hours, Scientists's Name of the results of step 1 ordered ascending by Projects's Name",
            "output": [
                "SELECT T2.Name , T2.Hours , T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Name Asc"
            ]
        },
        {
            "id": "task077-17f3e638c4c548e7bd96e28278f5c6bc",
            "input": "Step 1: find the average balance in SAVINGS table.\nStep 2: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 3: find name, balance in the results of step 2 whose balance greater than the results of step 1",
            "output": [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )"
            ]
        },
        {
            "id": "task077-565bb804e32c49a09f9002e45e5d0c75",
            "input": "find the average min_temperature_f in weather table",
            "output": [
                "SELECT Avg ( min_temperature_f ) FROM weather"
            ]
        },
        {
            "id": "task077-c7d35143046f4fd1ba7f33f21baa2a1e",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Has_Allergy table.\nStep 2: find the number of rows in the results of step 1 whose Sex equals F or Allergy equals Milk",
            "output": [
                "SELECT Count ( * ) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = \"F\" OR T1.Allergy = \"Milk\""
            ]
        },
        {
            "id": "task077-021cad5a6c05454da4dd9c1022a7c9ed",
            "input": "find the number of different Role_Code in Roles table",
            "output": [
                "SELECT Count ( DISTINCT Role_Code ) FROM Roles"
            ]
        },
        {
            "id": "task077-d72e8206317e42aa89f22c782eac8820",
            "input": "Step 1: For each row in Ref_Locations table, find the corresponding rows in Document_Locations table.\nStep 2: find Ref_Locations's Location_Code, Date_in_Location_From, Date_in_Locaton_To of the results of step 1",
            "output": [
                "SELECT T1.Location_Code , T2.Date_in_Location_From , T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code"
            ]
        },
        {
            "id": "task077-c4e9977020424949947823f33d304d10",
            "input": "Step 1: For each row in Band table, find the corresponding rows in Instruments table.\nStep 2: find Instrument of the results of step 1 whose Lastname equals Heilo and Lastname equals Le Pop",
            "output": [
                "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = \"Le Pop\" AND T1.Lastname = \"Heilo\""
            ]
        },
        {
            "id": "task077-4b3b8faa84bc4d3c8b987da1c353b1d8",
            "input": "Step 1: find the DName of Department table for which Division equals AS.\nStep 2: find DName of Department table whose Division equals EN and Building equals NEB.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT DName FROM Department WHERE Division = \"AS\" INTERSECT SELECT DName FROM Department WHERE Division = \"EN\" AND Building = \"NEB\""
            ]
        },
        {
            "id": "task077-e3d5c9d484fd43fd8d290ac149c2f92b",
            "input": "find the number of rows in employees table whose first_name equals Steve and last_name equals Johnson",
            "output": [
                "SELECT Count ( * ) FROM employees WHERE first_name = \"Steve\" AND last_name = \"Johnson\""
            ]
        },
        {
            "id": "task077-982346692ba447f99ba415e767cac7dc",
            "input": "Step 1: find the number of rows of each value of Customer_ID in Customers table.\nStep 2: find Customer_Details of Customers table with largest value in the results of step 1",
            "output": [
                "SELECT Customer_Details FROM Customers GROUP BY Customer_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c07c058fb1aa40bb9cbdfc5f18a2e7ae",
            "input": "Step 1: find the id of station table for which long greater than 37.4.\nStep 2: find the station_id of status table for which bikes_available less than 7.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT T1.id FROM station AS T1 WHERE T1.long > 37.4 INTERSECT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available < 7"
            ]
        },
        {
            "id": "task077-3a8800a6f0c541f9ae064bfff48bbd81",
            "input": "Step 1: For each row in countries table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose COUNTRY_NAME equals Argentina",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = \"Argentina\""
            ]
        },
        {
            "id": "task077-5e8177a6e05f47b39982f5f2df2d5af9",
            "input": "find decor of Rooms table whose roomName equals Recluse and defiance and roomName equals Recluse and defiance",
            "output": [
                "SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\" AND roomName = \"Recluse and defiance\""
            ]
        },
        {
            "id": "task077-3369de66e7ce4942a8b80c51afd00295",
            "input": "Step 1: find the Document_ID of Documents table.\nStep 2: For each row in Documents table, find the corresponding rows in Documents_with_Expenses table.\nStep 3: find Documents_with_Expenses's Document_ID of the results of step 2 whose Document_Type_Code equals CV.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T2.Document_ID FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = \"CV\""
            ]
        },
        {
            "id": "task077-e5761c68fcd64e5dae92eaf73ffb3edc",
            "input": "Step 1: find the maximum total in invoices table.\nStep 2: find the billing_country, total of invoices table whose total equals the results of step 1",
            "output": [
                "SELECT billing_country , total FROM invoices WHERE total = ( SELECT Max ( total ) FROM invoices )"
            ]
        },
        {
            "id": "task077-804db0c22a504600b7224fdffdee7bd2",
            "input": "Step 1: For each row in school table, find the corresponding rows in player table.\nStep 2: find the number of rows of each value of player's School_ID in the results of step 1.\nStep 3: find School of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.School FROM school AS T1 JOIN player AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.School_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c853f8948b9d4d14aa05edcdf9086357",
            "input": "Step 1: For each row in AssignedTo table, find corresponding rows in Scientists table and in Projects table.\nStep 2: find the summation of Hours of each value of Project in the results of step 1.\nStep 3: find Projects's Name, Scientists's Name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T2.Name , T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code AND T1.SSN = T3.Scientist GROUP BY T3.Project ORDER BY Sum ( T2.Hours ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-132b3c9c84b24368b1c9f7cf04738d4e",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find name, city, start_date of the results of step 1 with smallest value of duration",
            "output": [
                "SELECT T1.name , T1.city , T2.start_date FROM station AS T1 JOIN trip AS T2 ORDER BY T2.duration Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-63a15e1385444b82a4bb4f61041fd4c2",
            "input": "Step 1: find the date, mean_temperature_f, min_dew_point_f of weather table ordered descending by max_gust_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-9b0ee15c77894ad79ed897238dfdc01f",
            "input": "find without repetition the product_name of Product table ordered ascending by product_name",
            "output": [
                "SELECT DISTINCT product_name FROM Product ORDER BY product_name Asc"
            ]
        },
        {
            "id": "task077-995844df952e4a08ad55d98ae5512905",
            "input": "find the number of rows in artist table",
            "output": [
                "SELECT Count ( * ) FROM artist"
            ]
        },
        {
            "id": "task077-c148733df86644bcad39513d91f1d2cf",
            "input": "Step 1: find the number of rows of each value of Document_Type_Code in Documents table.\nStep 2: find Document_Type_Code of Documents table with largest value in the results of step 1",
            "output": [
                "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9f38589cc8b54804b0ca2a827440a33a",
            "input": "Step 1: For each row in match table, find the corresponding rows in hosting_city table.\nStep 2: find Host_City of the results of step 1 ordered descending by Date",
            "output": [
                "SELECT T2.Host_City FROM match AS T1 JOIN hosting_city AS T2 ON T1.Match_ID = T2.Match_ID ORDER BY T1.Date Desc"
            ]
        },
        {
            "id": "task077-39b5587ca2814cc5b7513693f198b8a3",
            "input": "find the average duration and the average start_date in trip table",
            "output": [
                "SELECT Avg ( duration ) , Avg ( start_date ) FROM trip"
            ]
        },
        {
            "id": "task077-bb38095486f348358eca8acb8e8a7de4",
            "input": "find each value of city in station table along with the maximum long of the corresponding rows to each value",
            "output": [
                "SELECT city , Max ( long ) FROM station GROUP BY city"
            ]
        },
        {
            "id": "task077-97a78a56f21d4322b28d394e5a434f6d",
            "input": "find the rows of regions table",
            "output": [
                "SELECT * FROM regions"
            ]
        },
        {
            "id": "task077-ace130b86e06496a90410faf7167049c",
            "input": "find without repetition the zip_code of weather table for which wind_dir_degrees less than 70",
            "output": [
                "SELECT DISTINCT zip_code FROM weather WHERE wind_dir_degrees < 70"
            ]
        },
        {
            "id": "task077-50a25eb25ae94d08bfdaf28e31f59072",
            "input": "find the number of rows in Reservations table whose FirstName equals ROY and LastName equals SWEAZY",
            "output": [
                "SELECT Count ( * ) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\""
            ]
        },
        {
            "id": "task077-a86dd84e1bd74f5a8f44465df75a45da",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find trip's id of the results of step 1 with largest value of lat",
            "output": [
                "SELECT T2.id FROM station AS T1 JOIN trip AS T2 ORDER BY T1.lat Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1ac25895fbd34be9b9e18441f1b76beb",
            "input": "find the number of rows in exhibition table whose Year equals 2005 or Year greater than 2004",
            "output": [
                "SELECT Count ( * ) FROM exhibition WHERE Year = 2004 OR Year > 2005"
            ]
        },
        {
            "id": "task077-2cff16c975ef44989e42e3b8541eb4a4",
            "input": "Step 1: For each row in Band table, find the corresponding rows in Instruments table.\nStep 2: find Instrument of the results of step 1 whose Lastname equals Heilo",
            "output": [
                "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = \"Heilo\""
            ]
        },
        {
            "id": "task077-b8294a09c606462c87b09853a51ab60d",
            "input": "Step 1: find the number of rows of each value of Firstname in Band table.\nStep 2: find Firstname of Band table with largest value in the results of step 1",
            "output": [
                "SELECT Firstname FROM Band GROUP BY Firstname ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d2827c712ac3471a8a2bae3d67545a3c",
            "input": "find the summation of balance in SAVINGS table",
            "output": [
                "SELECT Sum ( balance ) FROM SAVINGS"
            ]
        },
        {
            "id": "task077-4517ea8823e642a794344720dd11bafb",
            "input": "Step 1: For each row in departments table, find the corresponding rows in locations table.\nStep 2: find DEPARTMENT_NAME, CITY, STATE_PROVINCE, STATE_PROVINCE of the results of step 1",
            "output": [
                "SELECT T1.DEPARTMENT_NAME , T2.CITY , T2.STATE_PROVINCE , T2.STATE_PROVINCE FROM departments AS T1 JOIN locations AS T2"
            ]
        },
        {
            "id": "task077-dccc4de0a9ef4b3cb098b7189814106b",
            "input": "find the name of station table for which long less than 37.5",
            "output": [
                "SELECT name FROM station WHERE long < 37.5"
            ]
        },
        {
            "id": "task077-e0271fb3f749455f88da30c55482d8dd",
            "input": "find the number of rows in Student table whose Sex equals Cat",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Sex = \"Cat\""
            ]
        },
        {
            "id": "task077-e933f37083724589b16560ee674cb7f7",
            "input": "find the Name of Scientists table",
            "output": [
                "SELECT Name FROM Scientists"
            ]
        },
        {
            "id": "task077-92b7e6cd3c8046ff8a119f2a1ab6cb5a",
            "input": "Step 1: find the Denomination of school table for which Founded greater than 1890.\nStep 2: find the Denomination of school table for which Founded less than 1900.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Denomination FROM school WHERE Founded > 1890 INTERSECT SELECT Denomination FROM school WHERE Founded < 1900"
            ]
        },
        {
            "id": "task077-d900ee80502d49a1ba07170ef88d0f7a",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find each value of DEPARTMENT_ID in the results of step 1 along with the minimum MIN_SALARY of the corresponding rows to each value",
            "output": [
                "SELECT Min ( T1.MIN_SALARY ) , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID"
            ]
        },
        {
            "id": "task077-ee36e2f4302e4188ba0f665e3d987944",
            "input": "Step 1: find the Document_Date of Documents table for which Documents's Document_Type_Code equals GV.\nStep 2: For each row in Ref_Document_Types table, find the corresponding rows in Documents table.\nStep 3: find Document_Date of the results of step 2 whose Document_Type_Name equals SF.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = \"GV\" INTERSECT SELECT T1.Document_Date FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code WHERE T2.Document_Type_Name = \"SF\""
            ]
        },
        {
            "id": "task077-a8ef7e0cca8847e58956c65bfccaf030",
            "input": "Step 1: find the number of rows of each value of Song in volume table.\nStep 2: find Issue_Date in volume table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT Issue_Date FROM volume GROUP BY Song HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-1376751e8c72478588d8c04bdfe4fb90",
            "input": "Step 1: find the number of rows of each value of CID in Course table.\nStep 2: find CName in Course table whose corresponding value in step 1 is greater than or equals 5",
            "output": [
                "SELECT CName FROM Course GROUP BY CID HAVING Count ( * ) > = 5"
            ]
        },
        {
            "id": "task077-fb9ef7c0ee24450c9f61a63ebcfaa815",
            "input": "find the Major of Student table with largest value of Age",
            "output": [
                "SELECT Major FROM Student ORDER BY Age Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-cca1e451106c40acbc950d19f5c9759f",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find roomName of the results of step 1 whose Rate equals 60",
            "output": [
                "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.Rate = 60"
            ]
        },
        {
            "id": "task077-19fbe1916531418689a768a01f5957ae",
            "input": "Step 1: find the asset_id, asset_details of Assets table.\nStep 2: find the asset_details of Assets table for which asset_details less than 2.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT asset_id , asset_details FROM Assets INTERSECT SELECT asset_details FROM Assets WHERE asset_details < 2"
            ]
        },
        {
            "id": "task077-9eba8592d97a4467b9154a90a350b32f",
            "input": "find Match_ID of match table whose Score equals 1994 FIFA World Cup qualification and Competition equals Friendly match",
            "output": [
                "SELECT Match_ID FROM match WHERE Score = \"1994 FIFA World Cup qualification\" AND Competition = \"Friendly match\""
            ]
        },
        {
            "id": "task077-8970f618fd704fcaadb964a3ef8ab98a",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name, balance of the results of step 1 with smallest value of balance",
            "output": [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-e80013d3def544ab8217e0ada0aad565",
            "input": "Step 1: find rows in Documents table whose Document_Type_Code equals BK.\nStep 2: find each value of Document_Type_Code the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Document_Type_Code FROM Documents WHERE Document_Type_Code = \"BK\" GROUP BY Document_Type_Code"
            ]
        },
        {
            "id": "task077-175ac39137164f35a09c0430bb4ff5eb",
            "input": "Step 1: find the number of rows of each value of DEPARTMENT_ID in departments table.\nStep 2: find DEPARTMENT_ID in departments table whose corresponding value in step 1 is greater than or equals 4",
            "output": [
                "SELECT DEPARTMENT_ID FROM departments GROUP BY DEPARTMENT_ID HAVING Count ( * ) > = 4"
            ]
        },
        {
            "id": "task077-c5eaea377c94422a97cf4f407de78e43",
            "input": "find the number of rows in trip table whose start_date not equals San Francisco",
            "output": [
                "SELECT Count ( * ) FROM trip WHERE start_date ! = \"San Francisco\""
            ]
        },
        {
            "id": "task077-200c73b8dfb744bab5c56ee55b570ce2",
            "input": "find the number of different DName in Department table whose Division equals AS",
            "output": [
                "SELECT Count ( DISTINCT DName ) FROM Department WHERE Division = \"AS\""
            ]
        },
        {
            "id": "task077-1aa8dbe45ec34aa5876e045e8b31a5da",
            "input": "Step 1: For each row in Policies table, find corresponding rows in Customers table and in Claim_Headers table.\nStep 2: find the summation of Amount_Claimed of each value of Customers's Customer_ID in the results of step 1.\nStep 3: find Customer_Details of the results of step 1 with smallest value in the results of step 2",
            "output": [
                "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-367c4e55687b4e069b890691b5e2a4c3",
            "input": "Step 1: For each row in departments table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, SALARY of the results of step 1 whose DEPARTMENT_NAME equals Finance",
            "output": [
                "SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = \"Finance\""
            ]
        },
        {
            "id": "task077-c1fd682fe16e45d094bec1db4d1a9a7e",
            "input": "find without repetition the Fname of Student table for which Major equals 3.8",
            "output": [
                "SELECT DISTINCT Fname FROM Student WHERE Major = 3.8"
            ]
        },
        {
            "id": "task077-47e86858a79a497f99a6a41ac2ea69c7",
            "input": "find the City, Hanyu_Pinyin of city table with smallest value of GDP",
            "output": [
                "SELECT City , Hanyu_Pinyin FROM city ORDER BY GDP Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-0f1b5ac7ccf14aaa88c2eb7ebd9f6507",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find Person's name, age, job of the results of step 1 with largest value of year",
            "output": [
                "SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ef21465572b14c8cb60cd7f06953915a",
            "input": "find each value of Name in Scientists table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Name , Count ( * ) FROM Scientists GROUP BY Name"
            ]
        },
        {
            "id": "task077-b4ea1e6ac13d47be81abacc235198267",
            "input": "find the DName of Department table for which Building equals 268",
            "output": [
                "SELECT DName FROM Department WHERE Building = 268"
            ]
        },
        {
            "id": "task077-ebee4a6d34dd441bb50fd431d0696001",
            "input": "find the Document_Description, Document_Name of Documents table for which Other_Details equals Private Project",
            "output": [
                "SELECT Document_Description , Document_Name FROM Documents WHERE Other_Details = \"Private Project\""
            ]
        },
        {
            "id": "task077-48f92ec31ce64c809098a2cce07839fb",
            "input": "Step 1: For each row in architect table, find corresponding rows in bridge table and in mill table.\nStep 2: find bridge's name of the results of step 1 whose mill's name contains Moulin",
            "output": [
                "SELECT T2.name FROM architect AS T1 JOIN bridge AS T2 ON T2.architect_id = T1.id JOIN mill AS T3 ON T1.id = T3.architect_id WHERE T3.name LIKE \"Moulin\""
            ]
        },
        {
            "id": "task077-7c912ab441a84f5aa0173348cc45dcb9",
            "input": "Step 1: For each row in departments table, find the corresponding rows in employees table.\nStep 2: find each value of employees's DEPARTMENT_ID in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.DEPARTMENT_NAME , Count ( * ) FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID"
            ]
        },
        {
            "id": "task077-7b2f45cbe25c41cca44c6e06fe5fa32b",
            "input": "find the number of rows in Band table whose Lastname equals Heilo",
            "output": [
                "SELECT Count ( * ) FROM Band WHERE Lastname = \"Heilo\""
            ]
        },
        {
            "id": "task077-9318f11f665a4920a6257ce53def52dc",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find Person's name of the results of step 1 with largest value of year",
            "output": [
                "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-dfc38b5a6ab64e9893163cdf0f992ed6",
            "input": "find the first_name, last_name of Maintenance_Engineers table",
            "output": [
                "SELECT first_name , last_name FROM Maintenance_Engineers"
            ]
        },
        {
            "id": "task077-dfd84041cfb04062ab35f0c3817b7bfe",
            "input": "Step 1: For each row in employees table, find the corresponding rows in customers table.\nStep 2: find employees's first_name of the results of step 1 whose customers's first_name equals Nancy and customers's last_name equals Edwards",
            "output": [
                "SELECT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = \"Nancy\" AND T2.last_name = \"Edwards\""
            ]
        },
        {
            "id": "task077-6970b999b9f1427b810ead56b856559d",
            "input": "find the EMPLOYEE_ID, FIRST_NAME, LAST_NAME of employees table",
            "output": [
                "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees"
            ]
        },
        {
            "id": "task077-3e2ee076821d4b91a4a7acbcb6d55143",
            "input": "Step 1: For each row in Instruments table, find corresponding rows in Songs table and in Band table.\nStep 2: find Firstname, Lastname of the results of step 1 whose Title equals Badlands",
            "output": [
                "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = \"Badlands\""
            ]
        },
        {
            "id": "task077-591a0ab814d147bd968ac63306679d4a",
            "input": "find EMPLOYEE_ID of employees table whose HIRE_DATE greater than 1987-09-07 and LAST_NAME less than King",
            "output": [
                "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > \"1987-09-07\" AND LAST_NAME < \"King\""
            ]
        },
        {
            "id": "task077-32b3328edf144948844e53573a935ce7",
            "input": "find the number of rows in Allergy_Type table whose AllergyType equals food",
            "output": [
                "SELECT Count ( * ) FROM Allergy_Type WHERE AllergyType = \"food\""
            ]
        },
        {
            "id": "task077-4af8716607d248ea8ba2cd6df5e6acf0",
            "input": "find the number of rows in Person table whose city equals Austin",
            "output": [
                "SELECT Count ( * ) FROM Person WHERE city = \"Austin\""
            ]
        },
        {
            "id": "task077-f4f81da00ffa4e2d9cea256b82c9d270",
            "input": "find the number of rows in employees table whose first_name equals Lucas",
            "output": [
                "SELECT Count ( * ) FROM employees WHERE first_name = \"Lucas\""
            ]
        },
        {
            "id": "task077-993099adc799482ebeffe83d3fc6c528",
            "input": "Step 1: find the number of rows of each value of Famous_Title in artist table.\nStep 2: find Famous_Title in artist table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT Famous_Title FROM artist GROUP BY Famous_Title HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-dd348b2bfac64713a5ca7dc895be2669",
            "input": "Step 1: find the School of school table.\nStep 2: find the Nickname of school_details table for which Division equals Division 1.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.School FROM school AS T1 EXCEPT SELECT T2.Nickname FROM school_details AS T2 WHERE T2.Division = \"Division 1\""
            ]
        },
        {
            "id": "task077-4ab9ac48e1b64de7a4d02a6dca7b2b9e",
            "input": "Step 1: For each row in station table, find the corresponding rows in status table.\nStep 2: find the number of rows of each value of station_id in the results of step 1.\nStep 3: find id, name in the results of step 1 whose corresponding value in step 2 is greater than 12",
            "output": [
                "SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > 12"
            ]
        },
        {
            "id": "task077-b02cd08b949b4bee952286be1a3b5c83",
            "input": "Step 1: For each row in departments table, find the corresponding rows in employees table.\nStep 2: find the number of rows of each value of employees's DEPARTMENT_ID in the results of step 1.\nStep 3: find DEPARTMENT_NAME in the results of step 1 whose corresponding value in step 2 is greater than 10",
            "output": [
                "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > 10"
            ]
        },
        {
            "id": "task077-b2d69ef20c164ba3971aa42485cc536b",
            "input": "Step 1: find the exhibition's Artist_ID of exhibition table for which Year equals 2004.\nStep 2: find the Name of artist table whose artist's Artist_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM artist AS T1 WHERE T1.Artist_ID NOT IN ( SELECT T2.Artist_ID FROM exhibition AS T2 WHERE T2.Year = 2004 )"
            ]
        },
        {
            "id": "task077-21c44131e381438fb0ab5a5d711b1feb",
            "input": "find without repetition the start_date of trip table for which duration less than 100",
            "output": [
                "SELECT DISTINCT start_date FROM trip WHERE duration < 100"
            ]
        },
        {
            "id": "task077-2eb34fff275047beaa5fa6116113e8d6",
            "input": "find the Destroyed_by_Employee_ID of Documents_to_be_Destroyed table for which Document_ID equals 7",
            "output": [
                "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE Document_ID = 7"
            ]
        },
        {
            "id": "task077-d2b35a4e30454bcb910236ba1b558d17",
            "input": "find FIRST_NAME of employees table whose HIRE_DATE greater than 1987-09-07 and LAST_NAME less than King",
            "output": [
                "SELECT FIRST_NAME FROM employees WHERE HIRE_DATE > \"1987-09-07\" AND LAST_NAME < \"King\""
            ]
        },
        {
            "id": "task077-80c6e0dc068b4e16b1014ad1c2249c24",
            "input": "Step 1: For each row in Office_locations table, find corresponding rows in buildings table and in Companies table.\nStep 2: find buildings's name of the results of step 1 whose Companies's name equals JPMorgan Chase",
            "output": [
                "SELECT T1.name FROM buildings AS T1 JOIN Companies AS T2 JOIN Office_locations AS T3 ON T1.id = T3.building_id AND T3.company_id = T2.id WHERE T2.name = \"JPMorgan Chase\""
            ]
        },
        {
            "id": "task077-fbc356067c294838bd78e5d1514bed42",
            "input": "Step 1: find the number of rows of each value of product_id in Products table.\nStep 2: find product_name, product_price of Products table with largest value in the results of step 1",
            "output": [
                "SELECT product_name , product_price FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3a4fa348748348fa878e0f39f5153521",
            "input": "Step 1: find the number of rows of each value of first_name in employees table.\nStep 2: find first_name, last_name of employees table with largest value in the results of step 1",
            "output": [
                "SELECT first_name , last_name FROM employees GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-404f22a9027149f68c24f6fb985597a4",
            "input": "Step 1: For each row in sqlite_sequence table, find the corresponding rows in tracks table.\nStep 2: find seq of the results of step 1 whose tracks's name equals Fast As a Shark",
            "output": [
                "SELECT T1.seq FROM sqlite_sequence AS T1 JOIN tracks AS T2 WHERE T2.name = \"Fast As a Shark\""
            ]
        },
        {
            "id": "task077-49fe6603d3a14df0ac84ab13050f2307",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find Issue_Date of the results of step 1 whose Age equals 23 or Age equals 34",
            "output": [
                "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = 34 OR T1.Age = 23"
            ]
        },
        {
            "id": "task077-6f73a0e2df6a44fe8b72ba4e2b661d36",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose JOB_TITLE contains T",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE \"T\""
            ]
        },
        {
            "id": "task077-0abd95ab8b4e421db1b18746db19989d",
            "input": "find the rows of candidate table",
            "output": [
                "SELECT * FROM candidate"
            ]
        },
        {
            "id": "task077-0c613a3e5576493e980177c731f09885",
            "input": "Step 1: find the EMPLOYEE_ID of job_history table.\nStep 2: find the employees's EMPLOYEE_ID of employees table whose employees's EMPLOYEE_ID not one of the results of step 1",
            "output": [
                "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )"
            ]
        },
        {
            "id": "task077-5c1450c86775494a9bb9076e95cb6e77",
            "input": "find the balance of SAVINGS table with largest value of balance",
            "output": [
                "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3fde88589f504c958eb1e17799ecc689",
            "input": "Step 1: find the zip_code of weather table.\nStep 2: find the zip_code of weather table whose zip_code not one of the results of step 1",
            "output": [
                "SELECT zip_code FROM weather WHERE zip_code NOT IN ( SELECT zip_code FROM weather )"
            ]
        },
        {
            "id": "task077-5700c0f165e74f82aaee051af7318158",
            "input": "Step 1: For each row in Member_of_club table, find corresponding rows in Student table and in Club table.\nStep 2: find Fname, LName of the results of step 1 whose ClubName equals Bootup Baltimore",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = \"Bootup Baltimore\""
            ]
        },
        {
            "id": "task077-17421cb90c8c494e88bf1ad80f8fc68a",
            "input": "Step 1: find the number of rows of each value of Year in perpetrator table.\nStep 2: find Year of perpetrator table with largest value in the results of step 1",
            "output": [
                "SELECT Year FROM perpetrator GROUP BY Year ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9416f9623cae402ea3578c371440f04e",
            "input": "find the catalog_publisher of Catalogs table for which catalog_name contains Murray",
            "output": [
                "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE \"Murray\""
            ]
        },
        {
            "id": "task077-23838b7ed252451ba92b72aa3edb4e2f",
            "input": "find the town_city, state_province_county of Addresses table",
            "output": [
                "SELECT town_city , state_province_county FROM Addresses"
            ]
        },
        {
            "id": "task077-cbe06f2a7f26478bbbff775a7bdfb764",
            "input": "Step 1: find the number of rows of each value of ACC_Percent in basketball_match table.\nStep 2: find ACC_Percent of basketball_match table with largest value in the results of step 1",
            "output": [
                "SELECT ACC_Percent FROM basketball_match GROUP BY ACC_Percent ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-893d608499aa44bb94fcf5db7a460a0e",
            "input": "Step 1: find the number of rows of each value of Appelation in wine table.\nStep 2: find Appelation in wine table whose corresponding value in step 1 is less than or equals 3",
            "output": [
                "SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = 3"
            ]
        },
        {
            "id": "task077-de9ad76904074001b425ded837885578",
            "input": "find the Publisher of book_club table for which Year not equals 1989",
            "output": [
                "SELECT Publisher FROM book_club WHERE Year ! = 1989"
            ]
        },
        {
            "id": "task077-9f0bdc64e2854d1ba5a4c5e28c868824",
            "input": "find each value of resident_id in Residents table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id"
            ]
        },
        {
            "id": "task077-b451076bea3448b0b0100237a81bc6eb",
            "input": "find the number of rows in mountain table",
            "output": [
                "SELECT Count ( * ) FROM mountain"
            ]
        },
        {
            "id": "task077-9a20401ddfe54d58b0aea9002cc47dc2",
            "input": "Step 1: For each row in team table, find corresponding rows in match_season table and in player table.\nStep 2: find Season, Name, player's Team of the results of step 1",
            "output": [
                "SELECT T2.Season , T1.Name , T3.Team FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team JOIN player AS T3 ON T1.Team_id = T3.Team"
            ]
        },
        {
            "id": "task077-8a8297cc1ae348829eb42711c2b2f349",
            "input": "find each value of country in airports table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , country FROM airports GROUP BY country"
            ]
        },
        {
            "id": "task077-046b0c181488494fbcd9b8ecff558265",
            "input": "find the number of rows in swimmer table",
            "output": [
                "SELECT Count ( * ) FROM swimmer"
            ]
        },
        {
            "id": "task077-c69b7f7d5f6740e593cce575d00e5ea9",
            "input": "Step 1: For each row in broadcast table, find corresponding rows in program table and in channel table.\nStep 2: find channel's Name, channel's Owner, program's Owner of the results of step 1",
            "output": [
                "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID"
            ]
        },
        {
            "id": "task077-b5d7abd6c77b421eac2f599b39f34f1d",
            "input": "find the maximum Price and the minimum Score in wine table whose Name equals St. Helena",
            "output": [
                "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = \"St. Helena\""
            ]
        },
        {
            "id": "task077-62fecc6787a14edc82e441c54c4eaee6",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_entry_name of the results of step 1 whose catalog_name equals 2%",
            "output": [
                "SELECT T3.catalog_entry_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T1.catalog_name = \"2%\""
            ]
        },
        {
            "id": "task077-e6477beb5d08424db764ceb3664203ed",
            "input": "find the Email of Customer table for which State equals NY",
            "output": [
                "SELECT Email FROM Customer WHERE State = \"NY\""
            ]
        },
        {
            "id": "task077-3f3ba8bf31d940ad960f5fe34cc47b35",
            "input": "Step 1: find the Invoice's CustomerId of Invoice table for which Total greater than 20.\nStep 2: find the LastName of Customer table whose Customer's CustomerId not one of the results of step 1",
            "output": [
                "SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total > 20 )"
            ]
        },
        {
            "id": "task077-5ed6fdc55b784b2181d181d361641b63",
            "input": "find the number of rows in Customers table whose customer_details equals Unsatisfied",
            "output": [
                "SELECT Count ( * ) FROM Customers WHERE customer_details = \"Unsatisfied\""
            ]
        },
        {
            "id": "task077-3fd31b4bbf3f46d191207da4f4825f0a",
            "input": "find without repetition the Name of Nurse table",
            "output": [
                "SELECT DISTINCT Name FROM Nurse"
            ]
        },
        {
            "id": "task077-f1e76961c8024e388754b8940eafa7de",
            "input": "Step 1: For each row in wrestler table, find the corresponding rows in Elimination table.\nStep 2: find without repetition Event of the results of step 1 whose Team not equals Tokyo , Japan",
            "output": [
                "SELECT DISTINCT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = \"Tokyo , Japan\""
            ]
        },
        {
            "id": "task077-88cd99a087ba4c3aa4b0a4f3a3e058cf",
            "input": "Step 1: find the Team of player table.\nStep 2: find the Name of team table whose Team_id not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM team AS T1 WHERE T1.Team_id NOT IN ( SELECT T2.Team FROM player AS T2 )"
            ]
        },
        {
            "id": "task077-e873b04ff31049b29c5699d04b460d51",
            "input": "Step 1: for each value of product_id in Order_Items table, calculate number of rows.\nStep 2: show each value of product_id in Order_Items table along with the corresponding number of rows ordered ascending by the results of step 1",
            "output": [
                "SELECT product_id , Count ( * ) FROM Order_Items GROUP BY product_id ORDER BY Count ( * ) Asc"
            ]
        },
        {
            "id": "task077-96ae7f90106f4c8988b84e454504f547",
            "input": "find the number of rows in Products table whose product_name equals flax",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE product_name = \"flax\""
            ]
        },
        {
            "id": "task077-84b0297a18e344b8b0c265e7d6de93d1",
            "input": "find the number of rows in building table whose Floors less than 20",
            "output": [
                "SELECT Count ( * ) FROM building WHERE Floors < 20"
            ]
        },
        {
            "id": "task077-83ace5a48ba8491cb5587cbcc8fe39b0",
            "input": "Step 1: For each row in Artist table, find the corresponding rows in Album table.\nStep 2: find the number of rows of each value of Album's ArtistId in the results of step 1.\nStep 3: find Name, Album's ArtistId in the results of step 1 whose corresponding value in step 2 is greater than or equals 3",
            "output": [
                "SELECT T2.Name , T1.ArtistId FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T1.ArtistId HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-dfdb0f59c57548568e180095403c3ab3",
            "input": "find the ID of instructor table for which dept_name equals History",
            "output": [
                "SELECT ID FROM instructor WHERE dept_name = \"History\""
            ]
        },
        {
            "id": "task077-7947489709ab4bdb90e72d516a595391",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Patient table.\nStep 2: find Physician's Name, Position of the results of step 1 whose Patient's Name equals X",
            "output": [
                "SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = \"X\""
            ]
        },
        {
            "id": "task077-23dc94a0d5314bd1a194fca4df0a8896",
            "input": "Step 1: find the number of rows of each value of eid in employee table.\nStep 2: find name, name of employee table with largest value in the results of step 1",
            "output": [
                "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c1ea7393f51d4f34afd0fbb4e5538771",
            "input": "Step 1: for each value of year in takes table, calculate number of rows.\nStep 2: show each value of year in takes table along with the corresponding number of rows with largest value in the results of step 1",
            "output": [
                "SELECT year , Count ( * ) FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9f41bd1d899b42fd988a542974de44fc",
            "input": "Step 1: find the course_id of takes table.\nStep 2: find the number of rows in section table whose section's course_id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM takes AS T2 )"
            ]
        },
        {
            "id": "task077-ee49af3fff8e418e8b1653825ec7f7a0",
            "input": "find the number of rows in storm table",
            "output": [
                "SELECT Count ( * ) FROM storm"
            ]
        },
        {
            "id": "task077-e3d01cdf211e4a69afa8620e3c0902a9",
            "input": "find the number of rows in Products table whose product_name equals sesame",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE product_name = \"sesame\""
            ]
        },
        {
            "id": "task077-bf9b3ac85c5a40fba4ecdfe6d0996ad3",
            "input": "Step 1: For each row in Patient table, find the corresponding rows in Appointment table.\nStep 2: find Name of the results of step 1 whose ExaminationRoom equals 111",
            "output": [
                "SELECT T1.Name FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient WHERE T2.ExaminationRoom = 111"
            ]
        },
        {
            "id": "task077-82398bbc32d64cd6832d56e7663468cc",
            "input": "Step 1: find the number of rows of each value of first_name in actor table.\nStep 2: find first_name, last_name of actor table with largest value in the results of step 1",
            "output": [
                "SELECT first_name , last_name FROM actor GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d4dab62b404749078991fb94310e9725",
            "input": "find the maximum Sheep_and_Goats and the minimum Sheep_and_Goats in farm table",
            "output": [
                "SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm"
            ]
        },
        {
            "id": "task077-0a6809622f4645138c9f64951413c761",
            "input": "find the student_id of Student_Course_Registrations table with largest value of registration_date",
            "output": [
                "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-79425f4f2c944c209f38bde1acdbcd31",
            "input": "find the number of rows in Products table whose product_name equals South",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE product_name = \"South\""
            ]
        },
        {
            "id": "task077-174c5bd7fb5544688f7c36d3fc37459f",
            "input": "find the EmployeeID, SSN of Physician table",
            "output": [
                "SELECT EmployeeID , SSN FROM Physician"
            ]
        },
        {
            "id": "task077-285ba1d07fa14c3ba7a15b3feaf42b7d",
            "input": "find the Physician of Undergoes table with largest value of DateUndergoes",
            "output": [
                "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9c549f58d2204d81b32f2df1d8b645db",
            "input": "Step 1: find the number of rows of each value of Department in Affiliated_With table.\nStep 2: find Department of Affiliated_With table with largest value in the results of step 1",
            "output": [
                "SELECT Department FROM Affiliated_With GROUP BY Department ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-81cc589a517849a096005224a5901b73",
            "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: find the number of rows of each value of appellations's Appelation in the results of step 1.\nStep 3: find Winery in the results of step 1 whose corresponding value in step 2 is greater than or equals 4",
            "output": [
                "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.Appelation HAVING Count ( * ) > = 4"
            ]
        },
        {
            "id": "task077-969da77f1c1b46e8ac90083f28abff53",
            "input": "Step 1: find the Fname, LName of Student table.\nStep 2: find the Fname, LName of Student table for which Major equals 1.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = 1"
            ]
        },
        {
            "id": "task077-2ee9ddee446d4254b0994feb6bcfb62a",
            "input": "Step 1: For each row in Customer table, find the corresponding rows in Invoice table.\nStep 2: find FirstName of the results of step 1 whose BillingCountry equals Germany.\nStep 3: find FirstName of the results of step 1 whose BillingCountry equals Brazil.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = \"Germany\" INTERSECT SELECT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = \"Brazil\""
            ]
        },
        {
            "id": "task077-e2e3e652cd43468aa52c94bb1e5d7b48",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_name of the results of step 1 with smallest value of height",
            "output": [
                "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-32c50f85589b473cbc3b8fea14452940",
            "input": "find the card_id, card_type_code, card_number, other_card_details of Customers_Cards table",
            "output": [
                "SELECT card_id , card_type_code , card_number , other_card_details FROM Customers_Cards"
            ]
        },
        {
            "id": "task077-7a15a7f517d142b59df03674c8381e8e",
            "input": "Step 1: For each row in Bookings table, find the corresponding rows in Payments table.\nStep 2: find the number of rows of each value of Payments's booking_id in the results of step 1.\nStep 3: find Bookings's booking_id, amount_payable of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.booking_id , T1.amount_payable FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7bf5ad18d48c4cbea47a83d6c3de8018",
            "input": "find the address of address table for which address equals 1",
            "output": [
                "SELECT address FROM address WHERE address = 1"
            ]
        },
        {
            "id": "task077-5444852543c744059b66704be1991691",
            "input": "find the Store_Phone, Store_Email_Address of Stores table",
            "output": [
                "SELECT Store_Phone , Store_Email_Address FROM Stores"
            ]
        },
        {
            "id": "task077-7b8833dba6214d3d84fe9d89cbd52fa8",
            "input": "find the Card_Number of member table for which Name equals Kentucky",
            "output": [
                "SELECT Card_Number FROM member WHERE Name = \"Kentucky\""
            ]
        },
        {
            "id": "task077-f5eab4faadca45a68114a248b51176a4",
            "input": "find the number of rows in Attribute_Definitions table",
            "output": [
                "SELECT Count ( * ) FROM Attribute_Definitions"
            ]
        },
        {
            "id": "task077-a485902a1f6441b8aa18813570d0cbc5",
            "input": "Step 1: For each row in races table, find the corresponding rows in constructorStandings table.\nStep 2: find positionText, url of the results of step 1",
            "output": [
                "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId"
            ]
        },
        {
            "id": "task077-38cd69ed39b042b9aa5e1e79d07084a9",
            "input": "Step 1: For each row in Department_Stores table, find corresponding rows in Department_Store_Chain table and in Departments table.\nStep 2: find department_name, Departments's dept_store_id of the results of step 1 whose dept_store_chain_name equals marketing.\nStep 3: find department_name, store_name of the results of step 1 whose dept_store_chain_name equals managing.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T3.department_name , T3.dept_store_id FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = \"marketing\" INTERSECT SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = \"managing\""
            ]
        },
        {
            "id": "task077-05099893bd11407c88912dc353eb569b",
            "input": "find the average payment_method in Customers table",
            "output": [
                "SELECT Avg ( payment_method ) FROM Customers"
            ]
        },
        {
            "id": "task077-72817df55e2e4eda93e82f8ab9aaeecb",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Orders table.\nStep 2: find without repetition Customers's customer_id of the results of step 1 whose order_date less than Cancelled",
            "output": [
                "SELECT DISTINCT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_date < \"Cancelled\""
            ]
        },
        {
            "id": "task077-9334f99ac575423a8dd54aedb74cbcdf",
            "input": "find each value of name in user_profiles table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT name , Count ( * ) FROM user_profiles GROUP BY name"
            ]
        },
        {
            "id": "task077-c1d383874c5b482cb716eacdf25402a1",
            "input": "find the Delegate of election table for which Committee equals 1",
            "output": [
                "SELECT Delegate FROM election WHERE Committee = 1"
            ]
        },
        {
            "id": "task077-109c45a6304a433e8e11dd84d6ed2e58",
            "input": "Step 1: For each row in Things table, find corresponding rows in Customer_Events table and in Timed_Status_of_Things table.\nStep 2: find without repetition resident_id, service_type_code of the results of step 1 whose Status_of_Thing_Code equals Close or Date_and_Date less than 2017-06-19 02:59:21",
            "output": [
                "SELECT DISTINCT T2.resident_id , T1.service_type_code FROM Things AS T1 JOIN Customer_Events AS T2 ON T1.thing_id = T2.thing_id JOIN Timed_Status_of_Things AS T3 ON T1.thing_id = T3.thing_id WHERE T3.Status_of_Thing_Code = \"Close\" OR T3.Date_and_Date < \"2017-06-19 02:59:21\""
            ]
        },
        {
            "id": "task077-d8cda09ec5054b1285cb298585eca445",
            "input": "find each value of name in user_profiles table along with the summation of followers of the corresponding rows to each value",
            "output": [
                "SELECT Sum ( followers ) , name FROM user_profiles GROUP BY name"
            ]
        },
        {
            "id": "task077-18511fcb8b4743c7a727e7547f84c7ac",
            "input": "Step 1: For each row in School table, find corresponding rows in budget table and in endowment table.\nStep 2: find the number of rows in the results of step 1 whose amount greater than 3000 or Year less than 2001",
            "output": [
                "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > 3000 OR T2.Year < 2001"
            ]
        },
        {
            "id": "task077-6b5b4c64910b4f548c53d1d19b2b1192",
            "input": "find the number of different transaction_type in Financial_Transactions table",
            "output": [
                "SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions"
            ]
        },
        {
            "id": "task077-698c55d1d23d400498d9ba059b226d7a",
            "input": "Step 1: find the number of rows of each value of state in College table.\nStep 2: find state in College table whose corresponding value in step 1 is equals 1",
            "output": [
                "SELECT state FROM College GROUP BY state HAVING Count ( * ) = 1"
            ]
        },
        {
            "id": "task077-caf260ab5fca472889281cce60799008",
            "input": "find the characteristic_data_type of Characteristics table for which characteristic_name equals cumin",
            "output": [
                "SELECT characteristic_data_type FROM Characteristics WHERE characteristic_name = \"cumin\""
            ]
        },
        {
            "id": "task077-cd8a64b5957944bfabbf4b5b9019ba8b",
            "input": "find the customer_name of Customers table with largest value of date_became_customer",
            "output": [
                "SELECT customer_name FROM Customers ORDER BY date_became_customer Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d4eaed86186140598105bf69dad89983",
            "input": "find the number of different Investor in entrepreneur table",
            "output": [
                "SELECT Count ( DISTINCT Investor ) FROM entrepreneur"
            ]
        },
        {
            "id": "task077-127fd343f2b849789c5434e536a57c8e",
            "input": "find the number of rows in actor table",
            "output": [
                "SELECT Count ( * ) FROM actor"
            ]
        },
        {
            "id": "task077-ba46ffa44d624b93a42e1e4a6f9642dc",
            "input": "find each value of Award in musical table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Award , Count ( * ) FROM musical GROUP BY Award"
            ]
        },
        {
            "id": "task077-f17c46d96732449a96d9ab28f93dea2a",
            "input": "Step 1: For each row in mountain table, find the corresponding rows in photos table.\nStep 2: find mountain's id, photos's name of the results of step 1",
            "output": [
                "SELECT T1.id , T2.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id"
            ]
        },
        {
            "id": "task077-595fe299ac744b1f8963ad1bc8171b5a",
            "input": "find the Name of actor table for which age less than or equals 20",
            "output": [
                "SELECT Name FROM actor WHERE age < = 20"
            ]
        },
        {
            "id": "task077-30edfea406584677ae7cdc26abbbf9ad",
            "input": "find without repetition the customer_name of Customers table ordered ascending by customer_id",
            "output": [
                "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc"
            ]
        },
        {
            "id": "task077-0069b6c54a1445558a554eaf60feb89d",
            "input": "find dorm_name, dorm_name of Dorm table whose student_capacity greater than 300 or student_capacity less than 100",
            "output": [
                "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > 100 OR student_capacity < 300"
            ]
        },
        {
            "id": "task077-1ac789d9b22440f08fe4478dd5484009",
            "input": "find the rows of results table for which milliseconds greater than 5",
            "output": [
                "SELECT * FROM results WHERE milliseconds > 5"
            ]
        },
        {
            "id": "task077-0eeb64143a864e6f9346b262e22e2540",
            "input": "Step 1: For each row in user_profiles table, find the corresponding rows in tweets table.\nStep 2: find the number of rows of each value of text in the results of step 1.\nStep 3: find name, email of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-82c378e96c704273a6079f4a5adff451",
            "input": "find each value of Player in player table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Player , Count ( * ) FROM player GROUP BY Player"
            ]
        },
        {
            "id": "task077-a984aeec6a8b4a69a470e4c2d4201e15",
            "input": "Step 1: find the Fname of Student table for which city_code equals PHL.\nStep 2: find the Fname of Student table for which Age less than 20.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Fname FROM Student WHERE city_code = \"PHL\" INTERSECT SELECT Fname FROM Student WHERE Age < 20"
            ]
        },
        {
            "id": "task077-149f5a00a84e43628b2a70b570ffece0",
            "input": "find product_details of Products table whose product_details equals Latte or product_details equals Americano",
            "output": [
                "SELECT product_details FROM Products WHERE product_details = \"Americano\" OR product_details = \"Latte\""
            ]
        },
        {
            "id": "task077-be2ef9a5a2f440fda19f23a7943bf304",
            "input": "find the meter_600, meter_400 of swimmer table for which Nationality equals Australia",
            "output": [
                "SELECT meter_600 , meter_400 FROM swimmer WHERE Nationality = \"Australia\""
            ]
        },
        {
            "id": "task077-0d61342cefff4fcb8847ccb157431b35",
            "input": "Step 1: find the number of rows of each value of City in branch table.\nStep 2: find without repetition City in branch table whose corresponding value in step 1 is greater than 100",
            "output": [
                "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > 100"
            ]
        },
        {
            "id": "task077-05a07db30f4d41608a8a11f6c476ad83",
            "input": "Step 1: find the department_name of Departments table.\nStep 2: find the staff_id of Staff_Department_Assignments table whose date_assigned_to less than the results of step 1",
            "output": [
                "SELECT T1.staff_id FROM Staff_Department_Assignments AS T1 WHERE T1.date_assigned_to < ( SELECT T2.department_name FROM Departments AS T2 )"
            ]
        },
        {
            "id": "task077-01e12e41ff4d4fc9945e8152ca841b55",
            "input": "Step 1: find the customer_name of Customers table.\nStep 2: find the customer_name of Customers table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers"
            ]
        },
        {
            "id": "task077-db103991a2bb40af950c6850881de36d",
            "input": "find the Name, Location of station table ordered ascending by Total_Passengers",
            "output": [
                "SELECT Name , Location FROM station ORDER BY Total_Passengers Asc"
            ]
        },
        {
            "id": "task077-617e8ff517d74b20890e62600fdff563",
            "input": "find the number of rows in team table whose Name equals Columbus Crew",
            "output": [
                "SELECT Count ( * ) FROM team WHERE Name = \"Columbus Crew\""
            ]
        },
        {
            "id": "task077-daa224c56d9b4834a3b3a96274aaff1c",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_name, customer_phone, customer_email of Customers table with largest value in the results of step 1",
            "output": [
                "SELECT customer_name , customer_phone , customer_email FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7ddaf4295e894a8eb1d5df42c672c956",
            "input": "find each value of Type in culture_company table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Type FROM culture_company GROUP BY Type"
            ]
        },
        {
            "id": "task077-3d12d93d03f642beac4af5fe0977d626",
            "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: find enr of the results of step 1 whose pPos equals yes",
            "output": [
                "SELECT T1.enr FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = \"yes\""
            ]
        },
        {
            "id": "task077-b309ddfd11364e83816cd623263758fd",
            "input": "find the number of rows in Customers table whose customer_name equals Rodrick Heaney",
            "output": [
                "SELECT Count ( * ) FROM Customers WHERE customer_name = \"Rodrick Heaney\""
            ]
        },
        {
            "id": "task077-30a9506b45ce44d0820e073ea8448876",
            "input": "Step 1: find the Carrier of phone table for which Memory_in_G greater than 32.\nStep 2: find the Carrier of phone table for which Memory_in_G less than 64.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Carrier FROM phone WHERE Memory_in_G > 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G < 64"
            ]
        },
        {
            "id": "task077-1dfc60c4264f47b9a3fbfa2fac5846f5",
            "input": "Step 1: For each row in county table, find the corresponding rows in election table.\nStep 2: find Committee of the results of step 1 whose Population greater than 100000",
            "output": [
                "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > 100000"
            ]
        },
        {
            "id": "task077-b43adac5bc7f49188cae4ab3bb179c10",
            "input": "Step 1: find the organization_id of Organizations table.\nStep 2: find the organization_id of Organizations table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT organization_id FROM Organizations EXCEPT SELECT organization_id FROM Organizations"
            ]
        },
        {
            "id": "task077-a41728f9ff324ba08c5f984ac99256de",
            "input": "Step 1: find the number of rows of each value of Region_name in region table.\nStep 2: find Region_name in region table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-3c11a07791904a0da7074415a3f7b9d6",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_name of the results of step 1 whose length greater than 3 or height less than 5",
            "output": [
                "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.length > 3 OR T3.height < 5"
            ]
        },
        {
            "id": "task077-b14c727d6b7244e780ca8d44734cbf32",
            "input": "Step 1: For each row in department table, find corresponding rows in course table and in instructor table.\nStep 2: find name of the results of step 1 whose title equals C Programming",
            "output": [
                "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name WHERE T2.title = \"C Programming\""
            ]
        },
        {
            "id": "task077-d4376d5e778f4c6d84625ed5843e1849",
            "input": "Step 1: find the number of rows of each value of product_details in Products table.\nStep 2: find product_details of Products table with largest value in the results of step 1",
            "output": [
                "SELECT product_details FROM Products GROUP BY product_details ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-df4b2221a4214750ac6068ace9ed7c3a",
            "input": "find the product_name of Products table for which product_description equals red",
            "output": [
                "SELECT product_name FROM Products WHERE product_description = \"red\""
            ]
        },
        {
            "id": "task077-f6c2766524d94f839bb1fca7956c38cc",
            "input": "find the title of course table ordered ascending by credits",
            "output": [
                "SELECT title FROM course ORDER BY credits Asc"
            ]
        },
        {
            "id": "task077-01d4e7b80df748b28326047e67372d59",
            "input": "find the catalog_entry_name, height of Catalog_Contents table for which length equals or between 5 and 10",
            "output": [
                "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE length BETWEEN 10 AND 5"
            ]
        },
        {
            "id": "task077-6cb5b85dc55141b6bb22069dbc0a4e85",
            "input": "Step 1: For each row in Performers_in_Bookings table, find corresponding rows in Performers table and in Bookings table.\nStep 2: find Customer_Name of the results of step 1 whose Status_Code equals stop",
            "output": [
                "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = \"stop\""
            ]
        },
        {
            "id": "task077-30692c487e0a49e3bfeba714edce1a36",
            "input": "Step 1: For each row in Manufacturers table, find the corresponding rows in Products table.\nStep 2: find each value of Manufacturer in the results of step 1 along with the summation of Revenue of the corresponding rows to each value",
            "output": [
                "SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer"
            ]
        },
        {
            "id": "task077-6e78e9fe143942599b9a5d95206ee3c9",
            "input": "find the Country of stadium table for which Opening_year greater than 2006",
            "output": [
                "SELECT Country FROM stadium WHERE Opening_year > 2006"
            ]
        },
        {
            "id": "task077-42e18aae985b4ff88bf98a98e1b41c26",
            "input": "find the number of rows in Characteristics table whose characteristic_name equals hot",
            "output": [
                "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = \"hot\""
            ]
        },
        {
            "id": "task077-259358ebe517414182fd50eb2801ce15",
            "input": "Step 1: For each row in Tryout table, find corresponding rows in College table and in Player table.\nStep 2: find College's cName of the results of step 1 whose pName starts with D",
            "output": [
                "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName LIKE \"D%\""
            ]
        },
        {
            "id": "task077-98859852028b435d94e41fd78abe4f66",
            "input": "Step 1: For each row in aircraft table, find the corresponding rows in flight table.\nStep 2: find origin, name of the results of step 1 whose price greater than 300",
            "output": [
                "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > 300"
            ]
        },
        {
            "id": "task077-28075d843e9540b199b22c2c94d193fb",
            "input": "Step 1: For each row in circuits table, find the corresponding rows in races table.\nStep 2: find country, circuitRef of the results of step 1 whose races's name equals Lewis",
            "output": [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Lewis\""
            ]
        },
        {
            "id": "task077-01b3f173d1a94b1b988714537b3c0093",
            "input": "find the country of circuits table for which lat equals or between 2009 and 2011",
            "output": [
                "SELECT country FROM circuits WHERE lat BETWEEN 2011 AND 2009"
            ]
        },
        {
            "id": "task077-733124ee7fac41369650d5e2bf84bfc5",
            "input": "Step 1: find the average product_price in Products table.\nStep 2: find the product_type_code of Products table whose product_price greater than the results of step 1",
            "output": [
                "SELECT product_type_code FROM Products WHERE product_price > ( SELECT Avg ( product_price ) FROM Products )"
            ]
        },
        {
            "id": "task077-4565572f1c4840c39304f9d94fa8ac82",
            "input": "find the number of different dorm_name in Dorm table",
            "output": [
                "SELECT Count ( DISTINCT dorm_name ) FROM Dorm"
            ]
        },
        {
            "id": "task077-451f84741e9143d3accc323287040b43",
            "input": "find the rows of match_season table for which Player contains English",
            "output": [
                "SELECT * FROM match_season WHERE Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-efea1d391c0c4826b156fae4734c8abd",
            "input": "Step 1: find the Tryout's cName of Tryout table for which pPos equals goalie.\nStep 2: find the College's cName of College table whose state not one of the results of step 1",
            "output": [
                "SELECT T1.cName FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = \"goalie\" )"
            ]
        },
        {
            "id": "task077-78b5c9a3cd6b46ae8829b580300b624f",
            "input": "find name of user_profiles table whose email equals superstar or email equals edu",
            "output": [
                "SELECT name FROM user_profiles WHERE email = \"edu\" OR email = \"superstar\""
            ]
        },
        {
            "id": "task077-b6e195809d484b5d9f0235a69cb90c25",
            "input": "find the number of rows in Genre table whose Name equals Rock",
            "output": [
                "SELECT Count ( * ) FROM Genre WHERE Name = \"Rock\""
            ]
        },
        {
            "id": "task077-2aa2f882bef148b78ee5b6a59b5ea3e9",
            "input": "Step 1: find the number of rows of each value of dept_store_id in Departments table.\nStep 2: find dept_store_id of Departments table with smallest value in the results of step 1",
            "output": [
                "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-1a710bc5deb4464c8c8c12f3b35ff7f4",
            "input": "find the College of match_season table for which Position equals Defender",
            "output": [
                "SELECT College FROM match_season WHERE Position = \"Defender\""
            ]
        },
        {
            "id": "task077-840f5b47deca41ef8b7c61897a9c2b70",
            "input": "find the Name, Winery, Year of wine table for which Price greater than 100 ordered descending by Price",
            "output": [
                "SELECT Name , Winery , Year FROM wine WHERE Price > 100 ORDER BY Price Desc"
            ]
        },
        {
            "id": "task077-8c71942a548a40c398d6655b20b7741c",
            "input": "Step 1: For each row in Ref_Product_Categories table, find the corresponding rows in Products table.\nStep 2: find product_name, typical_buying_price of the results of step 1 whose product_category_description equals yellow",
            "output": [
                "SELECT T2.product_name , T2.typical_buying_price FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T1.product_category_description = \"yellow\""
            ]
        },
        {
            "id": "task077-9201ed1185d846f786b5cf3f51b9b867",
            "input": "find title of film table whose replacement_cost greater than 200 or replacement_cost less than 100",
            "output": [
                "SELECT title FROM film WHERE replacement_cost > 100 OR replacement_cost < 200"
            ]
        },
        {
            "id": "task077-2ece60cc9dbc4982a2945ed50215be22",
            "input": "Step 1: For each row in Ref_Characteristic_Types table, find the corresponding rows in Characteristics table.\nStep 2: find the number of rows of each value of Characteristics's characteristic_type_code in the results of step 1.\nStep 3: find characteristic_type_description of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code GROUP BY T2.characteristic_type_code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-26e8057e9e2440f1ab46cd3ec2c8f374",
            "input": "Step 1: For each row in election table, find corresponding rows in county table and in party table.\nStep 2: find Comptroller of the results of step 1 whose Population equals 1",
            "output": [
                "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = 1"
            ]
        },
        {
            "id": "task077-22a9a988a9334217b15c46c62fb05f13",
            "input": "Step 1: find the number of rows of each value of Comptroller in party table.\nStep 2: find Attorney_General of party table with largest value in the results of step 1",
            "output": [
                "SELECT Attorney_General FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b3dbb8145e6447049cf5dd5a343b93c9",
            "input": "Step 1: for each value of employee_name in Employees table, calculate number of rows.\nStep 2: show each value of employee_name in Employees table along with the corresponding number of rows with largest value in the results of step 1",
            "output": [
                "SELECT employee_name , Count ( * ) FROM Employees GROUP BY employee_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8b6660f21a17445480f522e749c7b1e0",
            "input": "Step 1: find the number of rows of each value of College in match_season table.\nStep 2: find College in match_season table whose corresponding value in step 1 is less than or equals 2",
            "output": [
                "SELECT College FROM match_season GROUP BY College HAVING Count ( * ) < = 2"
            ]
        },
        {
            "id": "task077-7b96cd32cb8945c6b172cf82e161c3c3",
            "input": "find the average student_capacity and the average student_capacity in Dorm table whose gender equals X",
            "output": [
                "SELECT Avg ( student_capacity ) , Avg ( student_capacity ) FROM Dorm WHERE gender = \"X\""
            ]
        },
        {
            "id": "task077-cdfc18f97bc34db3afd41af0ba837c4f",
            "input": "Step 1: find the Manufacturer of Products table.\nStep 2: find the number of rows in Manufacturers table whose Manufacturers's Code not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )"
            ]
        },
        {
            "id": "task077-d64fbd68e7be4c95ad856782583a0c98",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Department table.\nStep 2: find Physician's Name of the results of step 1 whose Department's Name equals Surgery.\nStep 3: find Physician's Name of the results of step 1 whose Department's Name equals Psychiatry.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = \"Surgery\" INTERSECT SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = \"Psychiatry\""
            ]
        },
        {
            "id": "task077-6fcda659c9934d3f89947d1f85f223fa",
            "input": "find the number of rows in Courses table whose course_name equals English",
            "output": [
                "SELECT Count ( * ) FROM Courses WHERE course_name = \"English\""
            ]
        },
        {
            "id": "task077-dbd240821ccc45ddb8b17ea7d9072346",
            "input": "find the order_id, customer_id of Customer_Orders table ordered ascending by order_date",
            "output": [
                "SELECT order_id , customer_id FROM Customer_Orders ORDER BY order_date Asc"
            ]
        },
        {
            "id": "task077-54e4d0001a544a0dbabdd2b584f09aa9",
            "input": "Step 1: For each row in Student_Course_Registrations table, find the corresponding rows in Student_Course_Attendance table.\nStep 2: find Student_Course_Registrations's student_id of the results of step 1 ordered ascending by date_of_attendance",
            "output": [
                "SELECT T1.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T2.date_of_attendance Asc"
            ]
        },
        {
            "id": "task077-269f46437df949b196dafd6263c6ab6d",
            "input": "find the Fname of Student table for which city_code equals 1",
            "output": [
                "SELECT Fname FROM Student WHERE city_code = 1"
            ]
        },
        {
            "id": "task077-3de9ca0452cd473dbc9084c40bc280ef",
            "input": "find the Founder of Manufacturers table for which Founder equals Sony",
            "output": [
                "SELECT Founder FROM Manufacturers WHERE Founder = \"Sony\""
            ]
        },
        {
            "id": "task077-8e6a2b9beb224d78933636496a4bdb4a",
            "input": "find the Enrollment, Location of university table for which School equals Clemson",
            "output": [
                "SELECT Enrollment , Location FROM university WHERE School = \"Clemson\""
            ]
        },
        {
            "id": "task077-7bb3cd272a524bec82c3c91944a88d3b",
            "input": "find the Name of editor table with largest value of Age",
            "output": [
                "SELECT Name FROM editor ORDER BY Age Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-260f99d1589e40098e6bae658be391f9",
            "input": "find the number of different card_number in Customers_Cards table",
            "output": [
                "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards"
            ]
        },
        {
            "id": "task077-8f57387997cc421cb319048fa722f54e",
            "input": "find Days_held of wrestler table whose Name equals Punk or Name equals Orton",
            "output": [
                "SELECT Days_held FROM wrestler WHERE Name = \"Orton\" OR Name = \"Punk\""
            ]
        },
        {
            "id": "task077-fda8cc7028794288b8d9f7a01f67187a",
            "input": "find the number of rows in course table whose dept_name equals Physics",
            "output": [
                "SELECT Count ( * ) FROM course WHERE dept_name = \"Physics\""
            ]
        },
        {
            "id": "task077-a044cc7f838246d9b40789656d89448e",
            "input": "find the Name of channel table ordered ascending by Rating_in_percent",
            "output": [
                "SELECT Name FROM channel ORDER BY Rating_in_percent Asc"
            ]
        },
        {
            "id": "task077-100bca8e562c446fa611154d74b5e574",
            "input": "Step 1: find the number of rows of each value of product_id in Product_Suppliers table.\nStep 2: find product_id in Product_Suppliers table whose corresponding value in step 1 is greater than 3.\nStep 3: find the product_id of Product_Suppliers table for which total_value_purchased less than 80000.\nStep 4: show the rows that are in any of the results of step 2 or the results of step 3",
            "output": [
                "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > 3 UNION SELECT product_id FROM Product_Suppliers WHERE total_value_purchased < 80000"
            ]
        },
        {
            "id": "task077-73503a66df4545c385e499a0c1199899",
            "input": "Step 1: find the cName of College table for which enr greater than 13000.\nStep 2: find the cName of College table for which enr less than 15000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT cName FROM College WHERE enr > 13000 INTERSECT SELECT cName FROM College WHERE enr < 15000"
            ]
        },
        {
            "id": "task077-d2842cf146f0415cb48fd24694f1324d",
            "input": "find the title of film table for which title contains Deleted Scenes",
            "output": [
                "SELECT title FROM film WHERE title LIKE \"Deleted Scenes\""
            ]
        },
        {
            "id": "task077-d4ef97df0c43462381f3e63d5bdef306",
            "input": "Step 1: For each row in broadcast table, find corresponding rows in program table and in channel table.\nStep 2: find channel's Name of the results of step 1 whose Origin not equals Beijing",
            "output": [
                "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Origin ! = \"Beijing\""
            ]
        },
        {
            "id": "task077-15f8f4c8851a4bc9b19d046c80be7bcb",
            "input": "find each value of Brand in Medication table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand"
            ]
        },
        {
            "id": "task077-2dd1a2760bef490f94d78de70a4285b7",
            "input": "find the attribute_name, attribute_id of Attribute_Definitions table",
            "output": [
                "SELECT attribute_name , attribute_id FROM Attribute_Definitions"
            ]
        },
        {
            "id": "task077-923ef8f91fa44dea9f8409722551766a",
            "input": "find country of circuits table whose lat greater than 12:00:00 or lat less than 09:00:00",
            "output": [
                "SELECT country FROM circuits WHERE lat > \"09:00:00\" OR lat < \"12:00:00\""
            ]
        },
        {
            "id": "task077-7bc00e296f2c449fa455d1eaf904403c",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_name, customer_address in Customers table whose corresponding value in step 1 is equals New.\nStep 3: find customer_name, customer_address in Customers table whose corresponding value in step 1 is less than Pending.\nStep 4: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = \"New\" INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < \"Pending\""
            ]
        },
        {
            "id": "task077-0ecb5ee0f2f84cb6a80b211e0ec3a4b2",
            "input": "Step 1: For each row in department table, find the corresponding rows in course table.\nStep 2: find course's dept_name of the results of step 1 ordered descending by budget.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT T2.dept_name FROM department AS T1 JOIN course AS T2 ON T1.dept_name = T2.dept_name ORDER BY T1.budget Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-c0f1e9ce85da4f81a59ced1447aea3b8",
            "input": "find the number of rows in budget table whose Invested greater than 8.5",
            "output": [
                "SELECT Count ( * ) FROM budget WHERE Invested > 8.5"
            ]
        },
        {
            "id": "task077-d3482c0c2e6f4a37888bc61bc76282e2",
            "input": "Step 1: find the number of rows of each value of Name in Genre table.\nStep 2: find Name of Genre table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM Genre GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-01b298fdeb104ab3b0a56dd64002dc32",
            "input": "find the state_province_county, country of Addresses table for which zip_postcode equals 4%",
            "output": [
                "SELECT state_province_county , country FROM Addresses WHERE zip_postcode = \"4%\""
            ]
        },
        {
            "id": "task077-d11e2621e89f4614a898604317ae8b79",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find product_name, other_characteristic_details, product_description of the results of step 1 whose product_category_code equals Herbs",
            "output": [
                "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = \"Herbs\""
            ]
        },
        {
            "id": "task077-dbba1dca741640afa7c800489522d645",
            "input": "find the Name, Price of Products table with largest value of Price",
            "output": [
                "SELECT Name , Price FROM Products ORDER BY Price Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-cc169b47a1cf4b37b83bb483b548669e",
            "input": "find the Fname of Student table for which city_code equals Smith Hall",
            "output": [
                "SELECT Fname FROM Student WHERE city_code = \"Smith Hall\""
            ]
        },
        {
            "id": "task077-7a13654855f9497183caa4bcb8226c0b",
            "input": "find the number of rows in flight table",
            "output": [
                "SELECT Count ( * ) FROM flight"
            ]
        },
        {
            "id": "task077-6af626629e114718a6a2dd98dca8243e",
            "input": "find the average distance and the average price in flight table",
            "output": [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight"
            ]
        },
        {
            "id": "task077-9bf267de83bd4fef818c815f106dbd88",
            "input": "find the customer_id, other_customer_details of Customers table with smallest value of date_became_customer",
            "output": [
                "SELECT customer_id , other_customer_details FROM Customers ORDER BY date_became_customer Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-04cc3cfc47e842ee822a657c28f76349",
            "input": "find the student_id of Students table",
            "output": [
                "SELECT student_id FROM Students"
            ]
        },
        {
            "id": "task077-253e390a05e345869f2409cc15a5a7f0",
            "input": "Step 1: find the number of rows of each value of Service_Type_Code in Ref_Service_Types table.\nStep 2: find Service_Type_Description, Service_Type_Code of Ref_Service_Types table with largest value in the results of step 1",
            "output": [
                "SELECT Service_Type_Description , Service_Type_Code FROM Ref_Service_Types GROUP BY Service_Type_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f34b49f0d076424fbf18245ec17539e8",
            "input": "find the number of rows in Accounts table",
            "output": [
                "SELECT Count ( * ) FROM Accounts"
            ]
        },
        {
            "id": "task077-31b07693281c4b32a1b7b7d6aa5024f8",
            "input": "Step 1: find the number of rows of each value of supplier_id in Product_Suppliers table.\nStep 2: find supplier_id of Product_Suppliers table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-383c4780545e4b84a496c682e90e41a0",
            "input": "Step 1: find the number of rows of each value of Party in party table.\nStep 2: find Party of party table with largest value in the results of step 1",
            "output": [
                "SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4dad4b76920f42f49b6ec26ec11deace",
            "input": "Step 1: find the Program_ID of broadcast_share table.\nStep 2: find the Name of program table whose program's Program_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM program AS T1 WHERE T1.Program_ID NOT IN ( SELECT T2.Program_ID FROM broadcast_share AS T2 )"
            ]
        },
        {
            "id": "task077-66611cb11511436c8d1a71f475cd9ffc",
            "input": "Step 1: find the dorm_name of Dorm table.\nStep 2: For each row in Has_amenity table, find corresponding rows in Dorm table and in Dorm_amenity table.\nStep 3: find dorm_name of the results of step 2 whose amenity_name equals Study Room.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = \"Study Room\""
            ]
        },
        {
            "id": "task077-17908c9caa7544129f8a4a22bc6918a4",
            "input": "find without repetition the customer_name of Customers table",
            "output": [
                "SELECT DISTINCT customer_name FROM Customers"
            ]
        },
        {
            "id": "task077-e452de7edb844c2585b95424e5298ff8",
            "input": "find each value of Major in Student table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Major , Count ( * ) FROM Student GROUP BY Major"
            ]
        },
        {
            "id": "task077-af44c28f266a48268f52f0483120da70",
            "input": "Step 1: For each row in Ref_Characteristic_Types table, find the corresponding rows in Characteristics table.\nStep 2: find characteristic_type_description of the results of step 1 whose characteristic_name equals catnip",
            "output": [
                "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = \"catnip\""
            ]
        },
        {
            "id": "task077-c27f1e7c1b77415db607eea36c398902",
            "input": "Step 1: For each row in Product_Suppliers table, find corresponding rows in Suppliers table and in Products table.\nStep 2: find product_type_code, product_name, product_price of the results of step 1 whose supplier_name equals 3",
            "output": [
                "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id WHERE T1.supplier_name = 3"
            ]
        },
        {
            "id": "task077-f8eee59fed3e498a9c37d302c482d5f2",
            "input": "Step 1: find the customer_name of Customers table for which payment_method equals Latte.\nStep 2: find the customer_name of Customers table for which payment_method equals Americano.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT customer_name FROM Customers WHERE payment_method = \"Latte\" INTERSECT SELECT customer_name FROM Customers WHERE payment_method = \"Americano\""
            ]
        },
        {
            "id": "task077-4e3bfacc8a2c4a838e5961553188d72c",
            "input": "find the average student_capacity and the minimum student_capacity in Dorm table whose gender equals X",
            "output": [
                "SELECT Avg ( student_capacity ) , Min ( student_capacity ) FROM Dorm WHERE gender = \"X\""
            ]
        },
        {
            "id": "task077-82c9c361980c40adb8e2fb91b5b1abd6",
            "input": "Step 1: find the number of rows of each value of characteristic_data_type in Characteristics table.\nStep 2: find characteristic_name of Characteristics table with largest value in the results of step 1",
            "output": [
                "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_data_type ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-04339835efb9412d9860fb3c36696b8b",
            "input": "find the number of rows in Ref_Characteristic_Types table",
            "output": [
                "SELECT Count ( * ) FROM Ref_Characteristic_Types"
            ]
        },
        {
            "id": "task077-7dc43e89c28e4623b0abb0cd1c87c6b2",
            "input": "find the Park of roller_coaster table with largest value of Height",
            "output": [
                "SELECT Park FROM roller_coaster ORDER BY Height Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b824b3cd1dca47abb4312bcbda194b22",
            "input": "Step 1: find the number of rows of each value of Event in wrestler table.\nStep 2: find Event of wrestler table with largest value in the results of step 1",
            "output": [
                "SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a69ddabd12684f2f9ccead28b0098983",
            "input": "find the name of student table with largest value of tot_cred",
            "output": [
                "SELECT name FROM student ORDER BY tot_cred Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0868275bf82a4879a743f12c671fc36e",
            "input": "find the number of rows in Characteristics table whose characteristic_name equals red",
            "output": [
                "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = \"red\""
            ]
        },
        {
            "id": "task077-dded9e6372eb4bc78c146b41c852063e",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: find the number of rows of each value of src_apid in the results of step 1.\nStep 3: find name of step 1 results ordered descending by the results of step 2.\nStep 4: only show the first 10 rows of the results",
            "output": [
                "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT 10"
            ]
        },
        {
            "id": "task077-7308a962f4f34590aaed14f3b4718729",
            "input": "Step 1: For each row in PlaylistTrack table, find corresponding rows in Playlist table and in Track table.\nStep 2: find Track's Name of the results of step 1 whose Playlist's Name contains you",
            "output": [
                "SELECT T3.Name FROM Playlist AS T1 JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name LIKE \"you\""
            ]
        },
        {
            "id": "task077-60ef1472f6a341ff9cd58984a649b84f",
            "input": "find the number of different name in instructor table",
            "output": [
                "SELECT Count ( DISTINCT name ) FROM instructor"
            ]
        },
        {
            "id": "task077-cffd6e6048374c11996b7e869c2d7d58",
            "input": "find each value of name in aircraft table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name"
            ]
        },
        {
            "id": "task077-3771b843615e43a8a59462e7da6d58ff",
            "input": "Step 1: For each row in party table, find the corresponding rows in party_host table.\nStep 2: find the number of rows of each value of party_host's Party_ID in the results of step 1.\nStep 3: find Location of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Location FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f23dc70292194c0d8bb6ccd465d2a85b",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find the number of rows of each value of Physician's Position in the results of step 1.\nStep 3: find Nurse's Name, Nurse's Position of the results of step 1 with smallest value in the results of step 2",
            "output": [
                "SELECT T2.Name , T2.Position FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-4865ce14d766488580a17af56ef1a594",
            "input": "Step 1: find the name of student table.\nStep 2: For each row in department table, find corresponding rows in course table and in student table.\nStep 3: find name of the results of step 2 whose course's dept_name equals Biology.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.name FROM student AS T1 EXCEPT SELECT T1.name FROM department AS T2 JOIN course AS T3 ON T3.dept_name = T2.dept_name JOIN student AS T1 ON T2.dept_name = T1.dept_name WHERE T3.dept_name = \"Biology\""
            ]
        },
        {
            "id": "task077-abf9ca03719c4ad097a755278aef3e69",
            "input": "Step 1: For each row in section table, find the corresponding rows in takes table.\nStep 2: find section's semester of the results of step 1 whose takes's year not equals 2010",
            "output": [
                "SELECT T1.semester FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = 2010"
            ]
        },
        {
            "id": "task077-724bd52edfcf413ca8cc7d1dfaad0dea",
            "input": "Step 1: for each value of Comptroller in party table, calculate number of rows.\nStep 2: show each value of Comptroller in party table along with the corresponding number of rows with largest value in the results of step 1",
            "output": [
                "SELECT Governor , Count ( * ) FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-28829dbc6d3749aaaa87a0d8e35e71e3",
            "input": "Step 1: For each row in ship table, find the corresponding rows in mission table.\nStep 2: find Code, Name, Name of the results of step 1",
            "output": [
                "SELECT T1.Code , T2.Name , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID"
            ]
        },
        {
            "id": "task077-87a8d245462b4d7ca7749f4d050cc719",
            "input": "find each value of BlockCode in Room table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode"
            ]
        },
        {
            "id": "task077-d134c781385c4b08b4c1b1c41e31bf25",
            "input": "find the catalog_entry_name of Catalog_Contents table with largest value of price_in_pounds",
            "output": [
                "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_pounds Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-81e35b463108490cb4785836c23d4dfb",
            "input": "Step 1: find the number of rows of each value of product_id in Products table.\nStep 2: find product_id, product_description in Products table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-caa6a949c3444a40a71d69e6af68bc1e",
            "input": "find the Comptroller, Party of party table",
            "output": [
                "SELECT Comptroller , Party FROM party"
            ]
        },
        {
            "id": "task077-0d880febd2734972bbc4d35834e486c2",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find product_name of the results of step 1 whose characteristic_name equals red",
            "output": [
                "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_name = \"red\""
            ]
        },
        {
            "id": "task077-c7fac99c3cf741e3bdf0b68e2eb22924",
            "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: only keep the results of step 1 whose Score greater than 90.\nStep 3: find the number of rows of each value of wine's State in the results of step 2.\nStep 4: find County of the results of step 2 with largest value in the results of step 3",
            "output": [
                "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3c750426d5344b088bd4e456de909504",
            "input": "Step 1: find the FacID of Faculty table.\nStep 2: find the FacID of Faculty_Participates_in table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.FacID FROM Faculty AS T1 EXCEPT SELECT T2.FacID FROM Faculty_Participates_in AS T2"
            ]
        },
        {
            "id": "task077-a985f5e700a04cd4b85779e539a19003",
            "input": "find the number of rows in MediaType table whose Name equals AAC audio file and Name equals MPEG audio file",
            "output": [
                "SELECT Count ( * ) FROM MediaType WHERE Name = \"MPEG audio file\" AND Name = \"AAC audio file\""
            ]
        },
        {
            "id": "task077-f41a919d2c3e4ddcae8a3f0bc35db9eb",
            "input": "find the number of rows in people table whose Height greater than 1.84",
            "output": [
                "SELECT Count ( * ) FROM people WHERE Height > 1.84"
            ]
        },
        {
            "id": "task077-1a546245dd39418caba4e8de482ca0ef",
            "input": "find the cName of College table ordered ascending by cName",
            "output": [
                "SELECT cName FROM College ORDER BY cName Asc"
            ]
        },
        {
            "id": "task077-29738cc8010340db8d035d750aed0cbe",
            "input": "Step 1: For each row in Customers_Cards table, find the corresponding rows in Financial_Transactions table.\nStep 2: find each value of transaction_type in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.card_type_code , Count ( * ) FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type"
            ]
        },
        {
            "id": "task077-1072ee4a0f64407a8185112c3b8231ed",
            "input": "find the catalog_entry_name of Catalog_Contents table for which parent_entry_id greater than 8",
            "output": [
                "SELECT catalog_entry_name FROM Catalog_Contents WHERE parent_entry_id > 8"
            ]
        },
        {
            "id": "task077-39c5e7dccf3f4bbc8731e65007b7bec6",
            "input": "Step 1: find the Name of member table.\nStep 2: find the Name of member table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM member EXCEPT SELECT Name FROM member"
            ]
        },
        {
            "id": "task077-0ae48e278a034be591cf476428694662",
            "input": "Step 1: For each row in Roles table, find the corresponding rows in Users table.\nStep 2: find the number of rows of each value of Users's role_code in the results of step 1.\nStep 3: find role_description of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.role_description FROM Roles AS T1 JOIN Users AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-06ac3432567346c9bc25f53cec1a4cb6",
            "input": "find the number of rows in program table",
            "output": [
                "SELECT Count ( * ) FROM program"
            ]
        },
        {
            "id": "task077-fe38f3565259418a92f57daea723705f",
            "input": "find the eid, salary of employee table",
            "output": [
                "SELECT eid , salary FROM employee"
            ]
        },
        {
            "id": "task077-9cc0a757110146bb8963b116359b08e1",
            "input": "Step 1: find the City of branch table for which Open_year equals 100.\nStep 2: find the City of branch table for which membership_amount greater than 2001.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT City FROM branch WHERE Open_year = 100 INTERSECT SELECT City FROM branch WHERE membership_amount > 2001"
            ]
        },
        {
            "id": "task077-6678363ac76944f98cdad989d4810feb",
            "input": "Step 1: For each row in Product_Suppliers table, find corresponding rows in Suppliers table and in Products table.\nStep 2: find supplier_name, supplier_phone of the results of step 1 ordered ascending by product_name",
            "output": [
                "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id ORDER BY T2.product_name Asc"
            ]
        },
        {
            "id": "task077-1774600428c74b8cba1062e4705d4996",
            "input": "find the name of enzyme table for which Chromosome not equals Heme",
            "output": [
                "SELECT name FROM enzyme WHERE Chromosome ! = \"Heme\""
            ]
        },
        {
            "id": "task077-70011bcbca63467688891dc1cd3f0694",
            "input": "find the rows of Procedures table for which Cost greater than 5000",
            "output": [
                "SELECT * FROM Procedures WHERE Cost > 5000"
            ]
        },
        {
            "id": "task077-ee933c05118448409d5e529e375eb963",
            "input": "find email, last_update of customer table whose first_name equals LINDA and last_name equals SMITH",
            "output": [
                "SELECT email , last_update FROM customer WHERE first_name = \"LINDA\" AND last_name = \"SMITH\""
            ]
        },
        {
            "id": "task077-41fb528d508c4b54a2a35975ec62b690",
            "input": "Step 1: find the number of rows of each value of Days_held in wrestler table.\nStep 2: find Days_held of wrestler table with largest value in the results of step 1",
            "output": [
                "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5d479567d48b46cca6e75e9750256ef9",
            "input": "find the product_category_code, typical_selling_price of Products table for which typical_buying_price equals cumin",
            "output": [
                "SELECT product_category_code , typical_selling_price FROM Products WHERE typical_buying_price = \"cumin\""
            ]
        },
        {
            "id": "task077-6f9135583d68417ebd028dbba0af3aa1",
            "input": "find the characteristic_name of Characteristics table for which characteristic_type_code equals sesame",
            "output": [
                "SELECT characteristic_name FROM Characteristics WHERE characteristic_type_code = \"sesame\""
            ]
        },
        {
            "id": "task077-3f136a69991747c785cc77b40edf0868",
            "input": "find the number of different Party_Theme in party table",
            "output": [
                "SELECT Count ( DISTINCT Party_Theme ) FROM party"
            ]
        },
        {
            "id": "task077-d908a155bd1a4fa28d189b43a318ff01",
            "input": "find the Name of Physician table for which Name equals Thesisin",
            "output": [
                "SELECT Name FROM Physician WHERE Name = \"Thesisin\""
            ]
        },
        {
            "id": "task077-1510c66e693b4bb7884144eb10a4cdc8",
            "input": "find the Season, Competition, Home_team of game table",
            "output": [
                "SELECT Season , Competition , Home_team FROM game"
            ]
        },
        {
            "id": "task077-effa346b23714730a012f2d96ea25d2a",
            "input": "Step 1: For each row in film table, find the corresponding rows in inventory table.\nStep 2: find the number of rows of each value of inventory_id in the results of step 1.\nStep 3: find title, inventory_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.inventory_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-df65c06a92ec43cd98fc12ec5c24fcc1",
            "input": "find the number of rows in Customers table whose customer_first_name equals Art and customer_last_name equals Turcotte",
            "output": [
                "SELECT Count ( * ) FROM Customers WHERE customer_first_name = \"Art\" AND customer_last_name = \"Turcotte\""
            ]
        },
        {
            "id": "task077-699c8eb2004246d082e383c69e16f16d",
            "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: find Name of the results of step 1 whose Price less than 50 and County equals Monterey and County equals Sonoma",
            "output": [
                "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < 50 AND T1.County = \"Sonoma\" AND T1.County = \"Monterey\""
            ]
        },
        {
            "id": "task077-c9c8860b04054aaba834151bd5f79ab5",
            "input": "Step 1: For each row in country table, find the corresponding rows in match_season table.\nStep 2: find Country_name of the results of step 1 whose College equals Maryland or College equals Duke",
            "output": [
                "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Duke\" OR T2.College = \"Maryland\""
            ]
        },
        {
            "id": "task077-f5b9ceec1f7e4c7ea04cf3014ed2992e",
            "input": "find the name, distance of aircraft table for which distance equals or between 5000 and 8430",
            "output": [
                "SELECT name , distance FROM aircraft WHERE distance BETWEEN 8430 AND 5000"
            ]
        },
        {
            "id": "task077-78023f8e964549b29337b410f752709e",
            "input": "find the Player_name, Sponsor_name of player table ordered descending by Votes",
            "output": [
                "SELECT Player_name , Sponsor_name FROM player ORDER BY Votes Desc"
            ]
        },
        {
            "id": "task077-2b230fce8add436296bc6693640fd09e",
            "input": "find the first_name, last_name of customer table with smallest value of create_date",
            "output": [
                "SELECT first_name , last_name FROM customer ORDER BY create_date Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-fc0868f1e9ac43ca9ce05491094414ee",
            "input": "find the average price_in_dollars and the maximum price_in_pounds in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_dollars ) , Max ( price_in_pounds ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-79be5dc56107420782dfd0fa49b85242",
            "input": "Step 1: find the Track_ID of race table for which Class equals GT.\nStep 2: find the track's Name of track table whose Track_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM track AS T1 WHERE T1.Track_ID NOT IN ( SELECT T2.Track_ID FROM race AS T2 WHERE T2.Class = \"GT\" )"
            ]
        },
        {
            "id": "task077-a2b2d9ead0ed4edead109d55de7bd2da",
            "input": "Step 1: find the StuID of Student table for which Age equals 18.\nStep 2: find the StuID of Student table for which Age equals 20.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT StuID FROM Student WHERE Age = 18 INTERSECT SELECT StuID FROM Student WHERE Age = 20"
            ]
        },
        {
            "id": "task077-81ca0ce14611438599d115b784098232",
            "input": "find the number of rows in captain table",
            "output": [
                "SELECT Count ( * ) FROM captain"
            ]
        },
        {
            "id": "task077-f4c2e2a828614a47b6b0e4698fd065d3",
            "input": "find the average Price in wine table whose State not equals Sonoma",
            "output": [
                "SELECT Avg ( Price ) FROM wine WHERE State ! = \"Sonoma\""
            ]
        },
        {
            "id": "task077-8b8c61348b9b412eac447f7adcc3f2e8",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_name, date_of_publication of the results of step 1 whose price_in_pounds greater than 5",
            "output": [
                "SELECT T1.catalog_name , T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > 5"
            ]
        },
        {
            "id": "task077-19754f9865b54bf882262c8d1fb7cd90",
            "input": "Step 1: For each row in affected_region table, find corresponding rows in storm table and in region table.\nStep 2: find Name of the results of step 1 whose Region_code equals Denmark",
            "output": [
                "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = \"Denmark\""
            ]
        },
        {
            "id": "task077-305899687e8445cb99f389b0410c81ef",
            "input": "find the title of course table",
            "output": [
                "SELECT title FROM course"
            ]
        },
        {
            "id": "task077-c96115da586c42e78fa3c147cfe673e8",
            "input": "find the number of rows in Addresses table whose city equals Lake Geovannyton",
            "output": [
                "SELECT Count ( * ) FROM Addresses WHERE city = \"Lake Geovannyton\""
            ]
        },
        {
            "id": "task077-66ba60671de04931a4c68d4e7f425867",
            "input": "Step 1: For each row in Suppliers table, find the corresponding rows in Product_Suppliers table.\nStep 2: for each value of supplier_name in the results of step 1, calculate average total_value_purchased.\nStep 3: show each value of supplier_name in the results of step 1 along with the average total_value_purchased with largest value in the results of step 2",
            "output": [
                "SELECT T1.supplier_name , Avg ( T2.total_value_purchased ) FROM Suppliers AS T1 JOIN Product_Suppliers AS T2 ON T1.supplier_id = T2.supplier_id GROUP BY T1.supplier_name ORDER BY Avg ( T2.total_value_purchased ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2091459b2ac340abaa10ccb9b79a7f36",
            "input": "find the number of rows in Physician table whose Name equals John Dorian",
            "output": [
                "SELECT Count ( * ) FROM Physician WHERE Name = \"John Dorian\""
            ]
        },
        {
            "id": "task077-d44191fd91bd4724abd70f9de1562b76",
            "input": "Step 1: find the number of rows of each value of film_id in film table.\nStep 2: find title, film_id of film table with largest value in the results of step 1",
            "output": [
                "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-79d05da137bb42819639903ea57b04dd",
            "input": "find the number of rows in Customers table whose other_customer_details equals Second time",
            "output": [
                "SELECT Count ( * ) FROM Customers WHERE other_customer_details = \"Second time\""
            ]
        },
        {
            "id": "task077-d71531e22a474977bbbcf4ea058e3176",
            "input": "Step 1: find the city of Addresses table.\nStep 2: find the city of Addresses table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT city FROM Addresses EXCEPT SELECT city FROM Addresses"
            ]
        },
        {
            "id": "task077-348681cccf4d4d5ba7dbf013f2f94507",
            "input": "Step 1: For each row in country table, find the corresponding rows in roller_coaster table.\nStep 2: find country's Name, Area, Population of the results of step 1 whose Speed greater than 60.\nStep 3: find country's Name, Area, Population of the results of step 1 whose Speed equals 55.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed > 60 INTERSECT SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed = 55"
            ]
        },
        {
            "id": "task077-0df942fff1b146e4ae248326b7652ce1",
            "input": "find the minimum Order_Quantity, the maximum Order_Quantity and the average Order_Quantity in Invoice_Items table",
            "output": [
                "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) , Avg ( Order_Quantity ) FROM Invoice_Items"
            ]
        },
        {
            "id": "task077-f34d8d8a8b174e928fc63da68b167b52",
            "input": "find the average strength in Player_Attributes table",
            "output": [
                "SELECT Avg ( strength ) FROM Player_Attributes"
            ]
        },
        {
            "id": "task077-2d67cf53b9f64766b7d3fd5959ecfca9",
            "input": "find the summation of Budgeted in budget table whose Year equals Glenn",
            "output": [
                "SELECT Sum ( Budgeted ) FROM budget WHERE Year = \"Glenn\""
            ]
        },
        {
            "id": "task077-fc1920308697494ea24dc6cc8ca316ff",
            "input": "Step 1: For each row in aircraft table, find the corresponding rows in flight table.\nStep 2: find name of the results of step 1 whose flno contains 99",
            "output": [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE 99"
            ]
        },
        {
            "id": "task077-afc3cfc139ff4f32b1d9bfb8a7908c58",
            "input": "Step 1: For each row in wrestler table, find the corresponding rows in Elimination table.\nStep 2: find without repetition Name of the results of step 1 whose Team not equals Tokyo , Japan",
            "output": [
                "SELECT DISTINCT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = \"Tokyo , Japan\""
            ]
        },
        {
            "id": "task077-2eb553d79b3e478398d1e460d9e2d20c",
            "input": "find the number of rows in country table whose country equals Australia",
            "output": [
                "SELECT Count ( * ) FROM country WHERE country = \"Australia\""
            ]
        },
        {
            "id": "task077-359b3f16d7f840648e40ee20c8d06e17",
            "input": "Step 1: For each row in enzyme table, find the corresponding rows in medicine_enzyme_interaction table.\nStep 2: find interaction_type of the results of step 1 whose name equals ALA synthase and Porphyria equals Aripiprazole",
            "output": [
                "SELECT T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.name = \"ALA synthase\" AND T1.Porphyria = \"Aripiprazole\""
            ]
        },
        {
            "id": "task077-46cd0dcb848842b1a5e69a06b1e2b3fb",
            "input": "Step 1: For each row in Player table, find the corresponding rows in Player_Attributes table.\nStep 2: find player_name of the results of step 1 whose overall_rating less than 90.\nStep 3: find player_name of the results of step 1 whose overall_rating less than 85.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < 90 INTERSECT SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < 85"
            ]
        },
        {
            "id": "task077-d85ff5ffa87c4b6cb4b4ca6f8afe2d1b",
            "input": "find the Name of Physician table",
            "output": [
                "SELECT Name FROM Physician"
            ]
        },
        {
            "id": "task077-4c47cafe92624b288292cb9a85bc4225",
            "input": "Step 1: For each row in course table, find the corresponding rows in section table.\nStep 2: find the  building in the results of step 1 whose dept_name equals Psychology ordered ascending by title",
            "output": [
                "SELECT T2.building , T2.room_number , T2.year FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = \"Psychology\" ORDER BY T1.title Asc"
            ]
        },
        {
            "id": "task077-f07e8ef223354dec9bc4d9ca330f060d",
            "input": "find the Draft_Class, Season of match_season table for which Position equals Defender",
            "output": [
                "SELECT Draft_Class , Season FROM match_season WHERE Position = \"Defender\""
            ]
        },
        {
            "id": "task077-daafe9579d74417eb3a0b5fdbdc7031e",
            "input": "Step 1: find the number of rows of each value of catalog_name in Catalogs table.\nStep 2: find catalog_name of Catalogs table with largest value in the results of step 1",
            "output": [
                "SELECT catalog_name FROM Catalogs GROUP BY catalog_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-79fa45e1c737475abbcee3161b7935f0",
            "input": "Step 1: find the cName of College table for which state equals AZ.\nStep 2: find cName of College table whose enr greater than 15000 and state equals LA.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT cName FROM College WHERE state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\""
            ]
        },
        {
            "id": "task077-ad914e9d2f6d426e8f2efa84f9ba3d71",
            "input": "Step 1: For each row in course table, find the corresponding rows in section table.\nStep 2: find title of the results of step 1 whose semester equals Differential Geometry",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.semester = \"Differential Geometry\""
            ]
        },
        {
            "id": "task077-933c7c153fac4d818a0236d3166c6897",
            "input": "find the Position of player table for which Points greater than 20",
            "output": [
                "SELECT Position FROM player WHERE Points > 20"
            ]
        },
        {
            "id": "task077-c00ec33f7b7440788ce6dc6d8a0652a9",
            "input": "find the number of rows in Dorm table whose gender equals M",
            "output": [
                "SELECT Count ( * ) FROM Dorm WHERE gender = \"M\""
            ]
        },
        {
            "id": "task077-20fa4fc049234012a4dd22258c38c3d8",
            "input": "Step 1: find the Name of wine table for which Grape equals Red.\nStep 2: find the Name of wine table for which Price greater than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Name FROM wine WHERE Grape = \"Red\" INTERSECT SELECT Name FROM wine WHERE Price > 50"
            ]
        },
        {
            "id": "task077-0e5ca3cc8dfc4dee98b115568e4e1af4",
            "input": "find the rows of player table for which Player contains English",
            "output": [
                "SELECT * FROM player WHERE Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-eabe1b6830bc4c87a9f24ca77e0f3c23",
            "input": "find the average followers in user_profiles table",
            "output": [
                "SELECT Avg ( followers ) FROM user_profiles"
            ]
        },
        {
            "id": "task077-f6083fef6a5f4f56a9e25dcc0c8a02f8",
            "input": "Step 1: find the number of rows of each value of Name in Physician table.\nStep 2: find Name in Physician table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Name FROM Physician GROUP BY Name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-06f49c87639042ce95460524daf48102",
            "input": "find the product_name, typical_selling_price, product_description of Products table for which product_category_code equals Herbs",
            "output": [
                "SELECT product_name , typical_selling_price , product_description FROM Products WHERE product_category_code = \"Herbs\""
            ]
        },
        {
            "id": "task077-03d6724c8c84433088fd18f9aea3b037",
            "input": "Step 1: find the number of rows of each value of staff_id in Staff table.\nStep 2: find staff_id, staff_name of Staff table with smallest value in the results of step 1",
            "output": [
                "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-5bc85aa8564440cab4335c8a23b91b26",
            "input": "find the id, market_share of browser table with smallest value of market_share",
            "output": [
                "SELECT id , market_share FROM browser ORDER BY market_share Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-d9c5191e89864dcd8a86314a33edf027",
            "input": "Step 1: find the average Enrollment in university table.\nStep 2: find the Nickname of university table whose Enrollment less than the results of step 1",
            "output": [
                "SELECT Nickname FROM university WHERE Enrollment < ( SELECT Avg ( Enrollment ) FROM university )"
            ]
        },
        {
            "id": "task077-34a9341af31445339e729bbce377370f",
            "input": "Step 1: find the City of branch table for which Open_year greater than 100.\nStep 2: find the City of branch table for which Open_year less than 2001.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT City FROM branch WHERE Open_year > 100 INTERSECT SELECT City FROM branch WHERE Open_year < 2001"
            ]
        },
        {
            "id": "task077-eec967b93a334542bdfc59cc4a62dc7c",
            "input": "Step 1: For each row in channel table, find the corresponding rows in broadcast table.\nStep 2: find Name of the results of step 1 ordered ascending by Time_of_day",
            "output": [
                "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID ORDER BY T2.Time_of_day Asc"
            ]
        },
        {
            "id": "task077-f83f542ae24d4a45b3695f3a88a5b7b1",
            "input": "find the maximum Silver and the minimum Gold in club_rank table",
            "output": [
                "SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank"
            ]
        },
        {
            "id": "task077-30e1dd70790b44688274c636f7d5a2ce",
            "input": "find the number of rows in Physician table",
            "output": [
                "SELECT Count ( * ) FROM Physician"
            ]
        },
        {
            "id": "task077-4994f86d675f4cce88342fd71b45e9c4",
            "input": "Step 1: For each row in Invoices table, find the corresponding rows in Invoice_Items table.\nStep 2: find the average Invoice_Items's Order_Quantity in the results of step 1 whose payment_method_code equals MasterCard",
            "output": [
                "SELECT Avg ( T2.Order_Quantity ) FROM Invoices AS T1 JOIN Invoice_Items AS T2 ON T1.Invoice_ID = T2.Invoice_ID WHERE T1.payment_method_code = \"MasterCard\""
            ]
        },
        {
            "id": "task077-d50a9e08bb4344f9a0f293de9d0c416f",
            "input": "Step 1: For each row in Ref_Characteristic_Types table, find the corresponding rows in Characteristics table.\nStep 2: find the number of rows in the results of step 1 whose characteristic_name equals white or characteristic_type_description equals hot",
            "output": [
                "SELECT Count ( * ) FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = \"white\" OR T1.characteristic_type_description = \"hot\""
            ]
        },
        {
            "id": "task077-9d84d56074b147178ade33cb863b14f0",
            "input": "find Name of Products table whose Price greater than 150 or Manufacturer less than 5",
            "output": [
                "SELECT Name FROM Products WHERE Price > 150 OR Manufacturer < 5"
            ]
        },
        {
            "id": "task077-0d78ce010f064fd2b9c10fd2d9228ee2",
            "input": "find without repetition the city of Addresses table",
            "output": [
                "SELECT DISTINCT city FROM Addresses"
            ]
        },
        {
            "id": "task077-b9c0cd8ef65d45e286c5c5cc2917eff8",
            "input": "Step 1: For each row in Prescribes table, find corresponding rows in Physician table and in Medication table.\nStep 2: find Physician's Name of the results of step 1 whose Medication's Name equals Procrastin-X",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code WHERE T2.Name = \"Procrastin-X\""
            ]
        },
        {
            "id": "task077-d23d0aee0c11420a9cf531c5a1b3d18f",
            "input": "Step 1: For each row in Tryout table, find corresponding rows in College table and in Player table.\nStep 2: find pName, College's cName of the results of step 1",
            "output": [
                "SELECT T2.pName , T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID"
            ]
        },
        {
            "id": "task077-27ac11117afc4c9f80ff701bdd84402a",
            "input": "Step 1: For each row in aircraft table, find the corresponding rows in flight table.\nStep 2: find name of the results of step 1 whose origin equals John Williams",
            "output": [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = \"John Williams\""
            ]
        },
        {
            "id": "task077-61be85653e4f4d4aba7db236e591600f",
            "input": "find the id, name, Porphyria of enzyme table ordered descending by Porphyria",
            "output": [
                "SELECT id , name , Porphyria FROM enzyme ORDER BY Porphyria Desc"
            ]
        },
        {
            "id": "task077-b95960b19c034f1082637b2a3fe79c81",
            "input": "find the staff_name of Staff table",
            "output": [
                "SELECT staff_name FROM Staff"
            ]
        },
        {
            "id": "task077-21ea62cb41f9455081842b88014dc727",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find without repetition Nurse's Name of the results of step 1 ordered ascending by Physician's Name",
            "output": [
                "SELECT DISTINCT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T1.Name Asc"
            ]
        },
        {
            "id": "task077-6c5afefddd784428b5f97ee9e2b66a79",
            "input": "find the number of rows in Artist table whose Name equals Metallica",
            "output": [
                "SELECT Count ( * ) FROM Artist WHERE Name = \"Metallica\""
            ]
        },
        {
            "id": "task077-0c2fa6431e4940f4929e8b3ebbcf4e45",
            "input": "Step 1: find the number of rows of each value of catalog_name in Catalogs table.\nStep 2: find date_of_publication in Catalogs table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT date_of_publication FROM Catalogs GROUP BY catalog_name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-03ae3af42e384fd4aad583e9fe3d375c",
            "input": "Step 1: For each row in stadium table, find the corresponding rows in game table.\nStep 2: find the number of rows of each value of stadium_id in the results of step 1.\nStep 3: find stadium's id, name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T2.stadium_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-74d18abd93584cbbb6e7cf90df8ea6e7",
            "input": "find the number of rows in Institution table whose Type equals Private or Founded greater than 1880",
            "output": [
                "SELECT Count ( * ) FROM Institution WHERE Type = \"Private\" OR Founded > 1880"
            ]
        },
        {
            "id": "task077-f884c348441e42cc990820f590b07155",
            "input": "find the protein_name, common_name of protein table",
            "output": [
                "SELECT protein_name , common_name FROM protein"
            ]
        },
        {
            "id": "task077-f0b79160faf2431f9edb3d623c3c8efd",
            "input": "Step 1: find the number of rows of each value of id in medicine table.\nStep 2: find id, Trade_Name in medicine table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT id , Trade_Name FROM medicine GROUP BY id HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-cb5eebeb831245dc88ad83bad7fa4070",
            "input": "Step 1: find the rows in employee table whose salary greater than 5000.\nStep 2: find each value of name, name in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT name , name FROM employee WHERE salary > 5000 GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-513fb16f8314447c8f2575e4a6872c8c",
            "input": "Step 1: find the Channel_ID of broadcast table.\nStep 2: find the Name of channel table whose channel's Channel_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM channel AS T1 WHERE T1.Channel_ID NOT IN ( SELECT T2.Channel_ID FROM broadcast AS T2 )"
            ]
        },
        {
            "id": "task077-ba073c37324e4e99963953229aa325d1",
            "input": "Step 1: For each row in School table, find the corresponding rows in budget table.\nStep 2: find School_name of the results of step 1 whose total_budget_percent_budgeted greater than 100 or Enrollment greater than 10",
            "output": [
                "SELECT T1.School_name FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.total_budget_percent_budgeted > 100 OR T1.Enrollment > 10"
            ]
        },
        {
            "id": "task077-ec11539107904d7286d4ab1bcd3e8728",
            "input": "find the number of rows in flight table whose distance greater than 2000",
            "output": [
                "SELECT Count ( * ) FROM flight WHERE distance > 2000"
            ]
        },
        {
            "id": "task077-19c134107d7f492ea7a2257655c1cc31",
            "input": "Step 1: For each row in instructor table, find the corresponding rows in teaches table.\nStep 2: find instructor's ID of the results of step 1 whose year not equals 2010",
            "output": [
                "SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = 2010"
            ]
        },
        {
            "id": "task077-4ea187ed8c67417bacd7a67869ae97a1",
            "input": "find the Winery, Name, Score of wine table for which Score greater than 93 ordered ascending by Score",
            "output": [
                "SELECT Winery , Name , Score FROM wine WHERE Score > 93 ORDER BY Score Asc"
            ]
        },
        {
            "id": "task077-734c778703e3480485c49b526fa93a46",
            "input": "find the number of rows in takes table whose year equals 2010",
            "output": [
                "SELECT Count ( * ) FROM takes WHERE year = 2010"
            ]
        },
        {
            "id": "task077-4266ada05bf746949c881fb6166c5a7f",
            "input": "find each value of year in takes table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , year FROM takes GROUP BY year"
            ]
        },
        {
            "id": "task077-d359609d1ebf47f19c1f3bf1978be650",
            "input": "find the number of rows in repair table",
            "output": [
                "SELECT Count ( * ) FROM repair"
            ]
        },
        {
            "id": "task077-6c7e398eb34a450ba52882ddd2030e1f",
            "input": "Step 1: find rows in Student table whose Sex equals M.\nStep 2: find each value of city_code the results of step 1 along with the average Age of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = \"M\" GROUP BY city_code"
            ]
        },
        {
            "id": "task077-db4e2b2fd60a40539e3c366c27869625",
            "input": "find the name of stadium table for which Country equals Australia",
            "output": [
                "SELECT name FROM stadium WHERE Country = \"Australia\""
            ]
        },
        {
            "id": "task077-b04a92c4a3074c14af0e194eca4782e0",
            "input": "Step 1: For each row in party table, find the corresponding rows in election table.\nStep 2: for each value of District in the results of step 1, calculate number of rows.\nStep 3: show each value of District in the results of step 1 along with the number of rows with largest value in the results of step 2",
            "output": [
                "SELECT T1.Attorney_General , Count ( * ) FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0fc8ffa77956488f8755510af1310b12",
            "input": "Step 1: find the number of rows of each value of candidate_id in Candidate_Assessments table.\nStep 2: find candidate_id of Candidate_Assessments table with largest value in the results of step 1",
            "output": [
                "SELECT candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-16c984c150984ba9ad25d549efac5157",
            "input": "find the name, salary of instructor table for which dept_name equals Math",
            "output": [
                "SELECT name , salary FROM instructor WHERE dept_name = \"Math\""
            ]
        },
        {
            "id": "task077-07af76afc5034855875ce62b7a38b249",
            "input": "Step 1: For each row in Ref_Shipping_Agents table, find the corresponding rows in Documents table.\nStep 2: for each value of Documents's shipping_agent_code in the results of step 1, calculate number of rows.\nStep 3: show each value of Documents's shipping_agent_code in the results of step 1 along with the number of rows with largest value in the results of step 2",
            "output": [
                "SELECT T1.shipping_agent_name , Count ( * ) FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code GROUP BY T2.shipping_agent_code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b2b31da4879e45659db4f4b323fe1ecb",
            "input": "Step 1: find the Name of member table for which Hometown equals Louisville ,  Kentucky.\nStep 2: find the Name of member table for which Hometown equals Hiram ,  Georgia.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Name FROM member WHERE Hometown = \"Louisville ,  Kentucky\" INTERSECT SELECT Name FROM member WHERE Hometown = \"Hiram ,  Georgia\""
            ]
        },
        {
            "id": "task077-574029b89445420e9183c5786480a9da",
            "input": "find the catalog_entry_name, height of Catalog_Contents table for which price_in_euros greater than 700",
            "output": [
                "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > 700"
            ]
        },
        {
            "id": "task077-0f58173e4dd6497284ec56c6d2a33bdd",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of Physician in the results of step 1.\nStep 3: find SSN of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-9085bd137dec4b7e8533337204828aa4",
            "input": "find the number of rows in mission table",
            "output": [
                "SELECT Count ( * ) FROM mission"
            ]
        },
        {
            "id": "task077-c91356af126d4356badc12e9f00a1af5",
            "input": "Step 1: find the number of rows of each value of product_id in Product_Suppliers table.\nStep 2: find product_id of Product_Suppliers table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-0cff4bca0ea14e28a563a7ba4986f73e",
            "input": "Step 1: For each row in School table, find the corresponding rows in endowment table.\nStep 2: find School_name, Location, donator_name of the results of step 1",
            "output": [
                "SELECT T1.School_name , T1.Location , T2.donator_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id"
            ]
        },
        {
            "id": "task077-416a64bbefa94565a81757c836689fe6",
            "input": "find the id of Player table for which height equals or between 180 and 190",
            "output": [
                "SELECT id FROM Player WHERE height BETWEEN 190 AND 180"
            ]
        },
        {
            "id": "task077-d3b3859bb7fe4719916dc2647fcf2b90",
            "input": "Step 1: find the number of rows of each value of Award in musical table.\nStep 2: find Award in musical table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT Award FROM musical GROUP BY Award HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-61e5b54e38cd4a4cb03e939ec87d8eec",
            "input": "find each value of Manufacturer in Products table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Manufacturer FROM Products GROUP BY Manufacturer"
            ]
        },
        {
            "id": "task077-9e63ad4a32bb468ab4d4d0d030d57845",
            "input": "find the number of rows in enzyme table whose Porphyria not equals No",
            "output": [
                "SELECT Count ( * ) FROM enzyme WHERE Porphyria ! = \"No\""
            ]
        },
        {
            "id": "task077-b613917b0fbe47d2852387c568cfb97e",
            "input": "Step 1: For each row in Department_Stores table, find corresponding rows in Department_Store_Chain table and in Departments table.\nStep 2: find department_name, store_name of the results of step 1 whose dept_store_chain_name equals marketing.\nStep 3: find department_name, store_name of the results of step 1 whose dept_store_chain_name equals managing.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = \"marketing\" INTERSECT SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = \"managing\""
            ]
        },
        {
            "id": "task077-883c883bd2714e829180108543d105c5",
            "input": "Step 1: find the number of rows of each value of Award in musical table.\nStep 2: find Nominee of musical table with largest value in the results of step 1",
            "output": [
                "SELECT Nominee FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-21c2514465ba4d3e8e94d22474f90691",
            "input": "Step 1: For each row in races table, find corresponding rows in circuits table and in lapTimes table.\nStep 2: find the average lap in the results of step 1 whose country equals Monaco Grand Prix and country equals 2008",
            "output": [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 2008 AND T1.country = \"Monaco Grand Prix\""
            ]
        },
        {
            "id": "task077-51b6d9b7baf64e92ae97304c98dcd74c",
            "input": "Step 1: For each row in Products table, find the corresponding rows in Complaints table.\nStep 2: find the number of rows of each value of Complaints's product_id in the results of step 1.\nStep 3: find product_name of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-97a60e350fa34f62aed27f5d5ae1f970",
            "input": "find the summation of total in invoices table whose billing_city equals Chicago",
            "output": [
                "SELECT Sum ( total ) FROM invoices WHERE billing_city = \"Chicago\""
            ]
        },
        {
            "id": "task077-ce3109dbf1294fddba67ab33c6e83746",
            "input": "find each value of AllergyType in Allergy_Type table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType"
            ]
        },
        {
            "id": "task077-7d61721292ab4d7eb73e5b33438c67cf",
            "input": "find the number of rows in company table",
            "output": [
                "SELECT Count ( * ) FROM company"
            ]
        },
        {
            "id": "task077-fb093e7a0c30478b873177294179ab4b",
            "input": "Step 1: for each value of name in genres table, calculate number of rows.\nStep 2: show each value of name in genres table along with the corresponding number of rows ordered descending by the results of step 1.\nStep 3: only show the first 5 rows of the results",
            "output": [
                "SELECT name , Count ( * ) FROM genres GROUP BY name ORDER BY Count ( * ) Desc LIMIT 5"
            ]
        },
        {
            "id": "task077-437d41fc58f84935bdfd387ca67331a4",
            "input": "Step 1: For each row in Policies table, find corresponding rows in Customers table and in Claim_Headers table.\nStep 2: find the summation of Amount_Claimed of each value of Customers's Customer_ID in the results of step 1.\nStep 3: find Customer_Details of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4ce6a5461d5a4c0989ff01c935135fc3",
            "input": "find the milliseconds of tracks table",
            "output": [
                "SELECT milliseconds FROM tracks"
            ]
        },
        {
            "id": "task077-d12b38c4c50c4224895713340f170b27",
            "input": "find the title of albums table ordered ascending by title",
            "output": [
                "SELECT title FROM albums ORDER BY title Asc"
            ]
        },
        {
            "id": "task077-ac8f1fe43c2944239a72e02a59eed007",
            "input": "find the summation of duration and the summation of duration in trip table whose bike_id equals 636",
            "output": [
                "SELECT Sum ( duration ) , Sum ( duration ) FROM trip WHERE bike_id = 636"
            ]
        },
        {
            "id": "task077-12136f345aca49ca872fe43894afdd1e",
            "input": "find the average long and the average long in station table whose city equals San Jose",
            "output": [
                "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = \"San Jose\""
            ]
        },
        {
            "id": "task077-c3c6e5cf5adc4e59b92ebcd76e6efe4e",
            "input": "find the Rank, Market_Value, Profits_billion of company table for which Sales_billion equals Banking ordered ascending by Sales_billion",
            "output": [
                "SELECT Rank , Market_Value , Profits_billion FROM company WHERE Sales_billion = \"Banking\" ORDER BY Sales_billion Asc"
            ]
        },
        {
            "id": "task077-5355dfdf9de848359d2852dad4b2130a",
            "input": "Step 1: find the rows in weather table whose zip_code equals 94107.\nStep 2: find each value of zip_code in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT zip_code FROM weather WHERE zip_code = 94107 GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-14d804bf50034425a5feb90dba320d61",
            "input": "find the average Age in Student table whose Sex equals F and Sex equals F",
            "output": [
                "SELECT Avg ( Age ) FROM Student WHERE Sex = \"F\" AND Sex = \"F\""
            ]
        },
        {
            "id": "task077-84c9c8958b0a43c090a4cb074c56f9dc",
            "input": "find each value of Pilot_name in pilot table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name"
            ]
        },
        {
            "id": "task077-0d7bddf12a844e1dbe2da55440dc3291",
            "input": "Step 1: For each row in Claim_Headers table, find the corresponding rows in Claims_Processing_Stages table.\nStep 2: find Claim_Status_Description of the results of step 1 whose Claim_Status_Code equals Open",
            "output": [
                "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = \"Open\""
            ]
        },
        {
            "id": "task077-b2672276abfc47fa8560e736878468a4",
            "input": "Step 1: find the start_date of trip table.\nStep 2: find the start_date of trip table for which zip_code equals 94107.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT start_date FROM trip EXCEPT SELECT start_date FROM trip WHERE zip_code = 94107"
            ]
        },
        {
            "id": "task077-5cf8fc09003a4d02b6974a1177a33f90",
            "input": "find the number of rows in aircraft table",
            "output": [
                "SELECT Count ( * ) FROM aircraft"
            ]
        },
        {
            "id": "task077-30265c1eff064fccb080b70c852fcf42",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find the average duration in the results of step 1 whose city not equals Palo Alto",
            "output": [
                "SELECT Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city ! = \"Palo Alto\""
            ]
        },
        {
            "id": "task077-ac2fe221effd47059bbb040fc86d4c60",
            "input": "Step 1: find the average min_humidity of each value of zip_code in weather table.\nStep 2: find zip_code of weather table with smallest value in the results of step 1",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY Avg ( min_humidity ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-6b986aa118604468928bf63b6ac1177c",
            "input": "find the name, city, long of station table with smallest value of long",
            "output": [
                "SELECT name , city , long FROM station ORDER BY long Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-62010f892e1549ea867c4a1c77120c9f",
            "input": "Step 1: For each row in employees table, find the corresponding rows in customers table.\nStep 2: find title, employees's phone, hire_date of the results of step 1 whose employees's first_name equals Nancy and customers's last_name equals Edwards",
            "output": [
                "SELECT T1.title , T1.phone , T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.first_name = \"Nancy\" AND T2.last_name = \"Edwards\""
            ]
        },
        {
            "id": "task077-537e67b70dc04fb7900e41b5810d5821",
            "input": "find each value of custid in ACCOUNTS table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid"
            ]
        },
        {
            "id": "task077-763d3e99dca54738848c1b5ce0a0041f",
            "input": "Step 1: For each row in status table, find the corresponding rows in trip table.\nStep 2: find start_date of the results of step 1 whose zip_code equals 94107 and time not equals Fog",
            "output": [
                "SELECT T2.start_date FROM status AS T1 JOIN trip AS T2 WHERE T2.zip_code = 94107 AND T1.time ! = \"Fog\""
            ]
        },
        {
            "id": "task077-5d36ef64711146ba89f6e996221db083",
            "input": "Step 1: find the Company, Main_Industry of company table.\nStep 2: find the Company, Main_Industry of company table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Company , Main_Industry FROM company EXCEPT SELECT Company , Main_Industry FROM company"
            ]
        },
        {
            "id": "task077-7e7f074d5538444d9e9d455dfe04b95a",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find roomName, LastName, CheckIn of the results of step 1 with largest value of Rate",
            "output": [
                "SELECT T1.roomName , T2.LastName , T2.CheckIn FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-39796a7afbd44755b5e3b3bb9794e99e",
            "input": "Step 1: For each row in station table, find the corresponding rows in status table.\nStep 2: find the average bikes_available of each value of station_id in the results of step 1.\nStep 3: find name, id in the results of step 1 whose corresponding value in step 2 is greater than 14",
            "output": [
                "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Avg ( T2.bikes_available ) > 14"
            ]
        },
        {
            "id": "task077-aab3f8cd1d9b485fa6ecf7b683e49c99",
            "input": "Step 1: find name of station table whose long less than -121.90178200000001 and city equals San Jose.\nStep 2: find name of station table whose long greater than 10 and city equals San Jose.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT name FROM station WHERE long < -121.90178200000001 AND city = \"San Jose\" UNION SELECT name FROM station WHERE long > 10 AND city = \"San Jose\""
            ]
        },
        {
            "id": "task077-c876c777991f4f90aace6ca1fa41732c",
            "input": "find the minimum Company, the maximum Market_Value and the average Market_Value in company table",
            "output": [
                "SELECT Min ( Company ) , Max ( Market_Value ) , Avg ( Market_Value ) FROM company"
            ]
        },
        {
            "id": "task077-38f44ad27da74718986195352c4b81b7",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: only keep the results of step 1 whose start_date equals 8/%.\nStep 3: find the number of rows of each value of start_station_id in the results of step 2.\nStep 4: find name, start_station_id of the results of step 2 with largest value in the results of step 3",
            "output": [
                "SELECT T1.name , T2.start_station_id FROM station AS T1 JOIN trip AS T2 WHERE T2.start_date = \"8/%\" GROUP BY T2.start_station_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3b017ff084784df09c4b3ccf6cc8ec82",
            "input": "Step 1: find the roomName of Rooms table for which basePrice less than 2.\nStep 2: find the roomName of Rooms table for which basePrice greater than 160.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT roomName FROM Rooms WHERE basePrice < 2 INTERSECT SELECT roomName FROM Rooms WHERE basePrice > 160"
            ]
        },
        {
            "id": "task077-003a86d718df4c30a833e30918a3f661",
            "input": "Step 1: find the name of tracks table.\nStep 2: find the name of tracks table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT name FROM tracks EXCEPT SELECT name FROM tracks"
            ]
        },
        {
            "id": "task077-dcb0affda369479b99b950ddcb1bf710",
            "input": "Step 1: For each row in people table, find the corresponding rows in candidate table.\nStep 2: find Name, Sex of the results of step 1 with largest value of Unsure_rate",
            "output": [
                "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b1a35552bd7d4ca484f8e6d925d0e09c",
            "input": "Step 1: For each row in Policies table, find corresponding rows in Customers table and in Claim_Headers table.\nStep 2: find Customer_Details of the results of step 1 whose Claim_Status_Code equals Deputy",
            "output": [
                "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = \"Deputy\""
            ]
        },
        {
            "id": "task077-f3f2644bea2448279930160232785b5e",
            "input": "find the first_name, last_name of employees table",
            "output": [
                "SELECT first_name , last_name FROM employees"
            ]
        },
        {
            "id": "task077-4876cbfd942b4a2292ce89c28862ee49",
            "input": "Step 1: find the number of rows of each value of Sex in Student table.\nStep 2: find Sex of Student table with largest value in the results of step 1",
            "output": [
                "SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2452c43690924cc090ae2ea1c35feba7",
            "input": "Step 1: find the average min_sea_level_pressure_inches of each value of zip_code in weather table.\nStep 2: find zip_code in weather table whose corresponding value in step 1 is less than 10",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) < 10"
            ]
        },
        {
            "id": "task077-c8a8f843262d4af6b3e77fe42ed5063d",
            "input": "find each value of Sex in Student table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Sex , Count ( * ) FROM Student GROUP BY Sex"
            ]
        },
        {
            "id": "task077-0fea0cb5a5c34a97a956706a51e64c23",
            "input": "find the start_date, duration of trip table with smallest value of duration",
            "output": [
                "SELECT start_date , duration FROM trip ORDER BY duration Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-1801a648554c498e998c47f80c3703c9",
            "input": "Step 1: find the number of rows of each value of bike_id in trip table.\nStep 2: find bike_id of trip table with largest value in the results of step 1",
            "output": [
                "SELECT bike_id FROM trip GROUP BY bike_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-fff6e51a5de6418fb13512ba8fe5f9f0",
            "input": "find the number of rows in sqlite_sequence table whose seq equals Billy Cobham",
            "output": [
                "SELECT Count ( * ) FROM sqlite_sequence WHERE seq = \"Billy Cobham\""
            ]
        },
        {
            "id": "task077-6b026100048e484ea8d862ea24c9f8db",
            "input": "find the Major of Student table for which Age greater than 20",
            "output": [
                "SELECT Major FROM Student WHERE Age > 20"
            ]
        },
        {
            "id": "task077-4d8cc7b3ffdc4564b6623c41470896a0",
            "input": "find the average Age and the maximum Age in artist table whose Country equals United States",
            "output": [
                "SELECT Avg ( Age ) , Max ( Age ) FROM artist WHERE Country = \"United States\""
            ]
        },
        {
            "id": "task077-60adcb12a3ff4814953f0263c5cc785b",
            "input": "find without repetition Fname, city_code of Student table whose Sex equals Milk or Sex equals Cat",
            "output": [
                "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex = \"Cat\" OR Sex = \"Milk\""
            ]
        },
        {
            "id": "task077-cf88361da92745d19a7b399d49896f1c",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name of the results of step 1 whose balance greater than 200000",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > 200000"
            ]
        },
        {
            "id": "task077-bc3debcd5ca04a12b0b8b595360c4219",
            "input": "find the Dependent_name of dependent table",
            "output": [
                "SELECT Dependent_name FROM dependent"
            ]
        },
        {
            "id": "task077-7cb5e4101cc24d73bda0a156a8c2b50f",
            "input": "find the Major of Student table with smallest value of Age",
            "output": [
                "SELECT Major FROM Student ORDER BY Age Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-98302f92eaec4b6a9300bd003615e487",
            "input": "Step 1: For each row in people table, find the corresponding rows in candidate table.\nStep 2: find Name of the results of step 1 whose Unsure_rate less than 0.2",
            "output": [
                "SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < 0.2"
            ]
        },
        {
            "id": "task077-b6e2ce784cec49e98dfab85da5845fdf",
            "input": "Step 1: For each row in Has_Allergy table, find corresponding rows in Allergy_Type table and in Student table.\nStep 2: find Fname, Sex of the results of step 1 whose Allergy_Type's Allergy equals Cat and AllergyType equals Milk",
            "output": [
                "SELECT T3.Fname , T3.Sex FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.Allergy = \"Cat\" AND T1.AllergyType = \"Milk\""
            ]
        },
        {
            "id": "task077-c26a084b11b74259a64b1debb253e894",
            "input": "find the custid, name of ACCOUNTS table for which name less than Brown",
            "output": [
                "SELECT custid , name FROM ACCOUNTS WHERE name < \"Brown\""
            ]
        },
        {
            "id": "task077-284621f0679e4694a62b67a725a0fab8",
            "input": "find the title of albums table",
            "output": [
                "SELECT title FROM albums"
            ]
        },
        {
            "id": "task077-670c4321bf3e4cda82f11dffaa231fd1",
            "input": "find the number of rows in ACCOUNTS table",
            "output": [
                "SELECT Count ( * ) FROM ACCOUNTS"
            ]
        },
        {
            "id": "task077-5f7eabc1f28c4424be6d4587d2fc3ee0",
            "input": "Step 1: For each row in genres table, find the corresponding rows in tracks table.\nStep 2: find tracks's name of the results of step 1 whose genres's name equals Rock",
            "output": [
                "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\""
            ]
        },
        {
            "id": "task077-8efebab8a89e4a4ebd416a9cd457ee6a",
            "input": "find each value of zip_code in trip table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , zip_code FROM trip GROUP BY zip_code"
            ]
        },
        {
            "id": "task077-859a9796b69e465cb20b18dfeabda333",
            "input": "find the number of rows in Reservations table whose LastName equals ROY",
            "output": [
                "SELECT Count ( * ) FROM Reservations WHERE LastName = \"ROY\""
            ]
        },
        {
            "id": "task077-1849ec49ba6744ccac973bbc6adae437",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name, balance of the results of step 1 ordered descending by balance",
            "output": [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc"
            ]
        },
        {
            "id": "task077-f6a55853523042d7932b1f0e553b4930",
            "input": "find the start_date of trip table with largest value of duration",
            "output": [
                "SELECT start_date FROM trip ORDER BY duration Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4ae25f15b68f4a20886c05a59e648260",
            "input": "Step 1: find the maximum Oppose_rate in candidate table.\nStep 2: For each row in people table, find the corresponding rows in candidate table.\nStep 3: find Name in the results of step 2 whose Unsure_rate less than the results of step 1",
            "output": [
                "SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < ( SELECT Max ( T1.Oppose_rate ) FROM candidate AS T1 )"
            ]
        },
        {
            "id": "task077-46135d8a2cc241f39db161177b6c13d6",
            "input": "Step 1: For each row in representative table, find the corresponding rows in election table.\nStep 2: find each value of Representative_ID in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T2.Name , Count ( * ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID GROUP BY T1.Representative_ID"
            ]
        },
        {
            "id": "task077-87cac74daf52466b82d401d025b1f2ae",
            "input": "Step 1: For each row in genres table, find the corresponding rows in tracks table.\nStep 2: find tracks's name of the results of step 1 whose genres's name equals Rock or genres's name equals MPEG audio file",
            "output": [
                "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"MPEG audio file\" OR T1.name = \"Rock\""
            ]
        },
        {
            "id": "task077-d01294a8556b49c4b96af23bd18f7bc2",
            "input": "Step 1: For each row in genres table, find the corresponding rows in tracks table.\nStep 2: find tracks's name of the results of step 1 whose genres's name equals Movies.\nStep 3: find tracks's name of the results of step 1 whose genres's name equals Music.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Movies\" INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Music\""
            ]
        },
        {
            "id": "task077-7bb19072b72f4003aa3cfc0307bf1e9c",
            "input": "find the Fname, LName of Student table for which Sex equals F",
            "output": [
                "SELECT Fname , LName FROM Student WHERE Sex = \"F\""
            ]
        },
        {
            "id": "task077-c2d67477c9ba421f8af3c61bdd9a6c92",
            "input": "Step 1: For each row in genres table, find the corresponding rows in tracks table.\nStep 2: find the summation of milliseconds of each value of genre_id in the results of step 1.\nStep 3: find genres's name in the results of step 1 whose corresponding value in step 2 is greater than 100",
            "output": [
                "SELECT T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T2.genre_id HAVING Sum ( T2.milliseconds ) > 100"
            ]
        },
        {
            "id": "task077-b02afc610aef43a1854a423c1020f7d2",
            "input": "find start_date of trip table whose duration greater than 60 and duration greater than 384",
            "output": [
                "SELECT start_date FROM trip WHERE duration > 384 AND duration > 60"
            ]
        },
        {
            "id": "task077-ca1ab889c3cb4baf9f890f04dc9c5944",
            "input": "Step 1: For each row in albums table, find the corresponding rows in tracks table.\nStep 2: find title of the results of step 1 whose name contains Led",
            "output": [
                "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name LIKE \"Led\""
            ]
        },
        {
            "id": "task077-e3346fc565ee43e2810ef5f8d93ace5b",
            "input": "Step 1: find the name of station table.\nStep 2: For each row in station table, find the corresponding rows in trip table.\nStep 3: find name of the results of step 2 whose city equals Palo Alto and duration greater than 100.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.name FROM station AS T1 EXCEPT SELECT T1.name FROM station AS T1 JOIN trip AS T2 WHERE T1.city = \"Palo Alto\" AND T2.duration > 100"
            ]
        },
        {
            "id": "task077-8caa8e9a82fc4502bd7702b31ae46238",
            "input": "Step 1: For each row in people table, find the corresponding rows in candidate table.\nStep 2: find Name, Sex of the results of step 1 whose Oppose_rate greater than 0.43",
            "output": [
                "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Oppose_rate > 0.43"
            ]
        },
        {
            "id": "task077-e45768ff3169485eba8a92685f508db9",
            "input": "Step 1: For each row in tracks table, find corresponding rows in albums table and in media_types table.\nStep 2: find title of the results of step 1 whose media_types's name equals Balls to the Wall",
            "output": [
                "SELECT T1.title FROM albums AS T1 JOIN media_types AS T2 JOIN tracks AS T3 ON T1.id = T3.album_id AND T3.media_type_id = T2.id WHERE T2.name = \"Balls to the Wall\""
            ]
        },
        {
            "id": "task077-362433ef84cc4bbdbeaa9a4533b41987",
            "input": "find the Company, Sales_billion of company table with largest value of Sales_billion",
            "output": [
                "SELECT Company , Sales_billion FROM company ORDER BY Sales_billion Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-93772265e1414aaaa9eef77c0825352f",
            "input": "Step 1: find the number of rows of each value of Major in Student table.\nStep 2: find Major in Student table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Major FROM Student GROUP BY Major HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-76ed2bada58c4d6dae0dc61da626666a",
            "input": "find each value of zip_code in weather table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT zip_code , Count ( * ) FROM weather GROUP BY zip_code"
            ]
        },
        {
            "id": "task077-733ea014e8e2425e8bb8e53533b14b04",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find decor of the results of step 1 whose CheckIn equals TRACHSEL and LastName equals SELBIG.\nStep 3: find decor of the results of step 1 whose FirstName equals 2010-09-21 and LastName equals DAMIEN.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.CheckIn = \"TRACHSEL\" AND T2.LastName = \"SELBIG\" INTERSECT SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = \"2010-09-21\" AND T2.LastName = \"DAMIEN\""
            ]
        },
        {
            "id": "task077-1331ddc3367145deac00bbac41787d44",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find roomName, decor of the results of step 1 whose basePrice greater than 160 and Adults greater than 2",
            "output": [
                "SELECT T1.roomName , T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.basePrice > 160 AND T2.Adults > 2"
            ]
        },
        {
            "id": "task077-95673bdf34484cb693e04205bd3f92a3",
            "input": "Step 1: For each row in station_company table, find corresponding rows in company table and in gas_station table.\nStep 2: find Location, Representative_Name of the results of step 1 ordered descending by Market_Value.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-86295fc571dd46f19738b4b06d6eb9d1",
            "input": "find the number of rows in trip table whose start_date equals Mountain View and end_date equals Palo Alto",
            "output": [
                "SELECT Count ( * ) FROM trip WHERE start_date = \"Mountain View\" AND end_date = \"Palo Alto\""
            ]
        },
        {
            "id": "task077-8e2780c0387c4064b03d9cdc6af95383",
            "input": "find each value of billing_state in invoices table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT billing_state , Count ( * ) FROM invoices GROUP BY billing_state"
            ]
        },
        {
            "id": "task077-e356e22e476943ff873d49321d435966",
            "input": "Step 1: find the number of rows of each value of Claim_Outcome_Code in Claims_Processing table.\nStep 2: find Claim_Outcome_Code of Claims_Processing table with largest value in the results of step 1",
            "output": [
                "SELECT Claim_Outcome_Code FROM Claims_Processing GROUP BY Claim_Outcome_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b4ba0a492f684685945a82e303de24e3",
            "input": "Step 1: find the id of station table for which long greater than 37.4.\nStep 2: For each row in station table, find the corresponding rows in status table.\nStep 3: find station_id of the results of step 2 whose long less than 7.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.id FROM station AS T1 WHERE T1.long > 37.4 INTERSECT SELECT T2.station_id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.long < 7"
            ]
        },
        {
            "id": "task077-89b5a9585a0f4a70856b2759276a1f53",
            "input": "Step 1: find the number of rows of each value of Major in Student table.\nStep 2: find StuID in Student table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT StuID FROM Student GROUP BY Major HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-1c2fef7572304b97be1a5615ea1bf1ac",
            "input": "Step 1: For each row in employees table, find the corresponding rows in customers table.\nStep 2: find without repetition employees's first_name of the results of step 1 whose customers's first_name equals Eduardo and customers's last_name equals Martins",
            "output": [
                "SELECT DISTINCT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = \"Eduardo\" AND T2.last_name = \"Martins\""
            ]
        },
        {
            "id": "task077-20fc316364cc4524b1dab0a74663cb0c",
            "input": "find the zip_code, min_dew_point_f of weather table for which min_visibility_miles greater than 80",
            "output": [
                "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles > 80"
            ]
        },
        {
            "id": "task077-c929f328ac4a4f89954c0b352d8b351c",
            "input": "find each value of zip_code in trip table along with the average duration of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code"
            ]
        },
        {
            "id": "task077-b41bd121fcd14e328b85bca6325c8185",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find rows, balance of the results of step 1 whose name equals Brown",
            "output": [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\""
            ]
        },
        {
            "id": "task077-ca0da6a9e5144d98921f1dc89d75cca7",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Policies table.\nStep 2: find Customer_Details of the results of step 1 with largest value of End_Date",
            "output": [
                "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.End_Date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1546a42658f94ee5a7d510cda19f6ebe",
            "input": "Step 1: find the min_temperature_f of weather table for which zip_code equals 94107 ordered descending by min_temperature_f.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT min_temperature_f FROM weather WHERE zip_code = 94107 ORDER BY min_temperature_f Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-18f425e6d13e4cd5aa0373bcc26ba932",
            "input": "Step 1: find the roomName, decor of Rooms table for which basePrice greater than 2.\nStep 2: find the roomName, decor of Rooms table for which basePrice greater than 160.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT roomName , decor FROM Rooms WHERE basePrice > 2 UNION SELECT roomName , decor FROM Rooms WHERE basePrice > 160"
            ]
        },
        {
            "id": "task077-a56650d66d474376a58ac760f4113972",
            "input": "Step 1: find the LName, Age of Student table for which Sex equals Milk.\nStep 2: find the LName, Age of Student table for which Sex equals Cat.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT LName , Age FROM Student WHERE Sex = \"Milk\" INTERSECT SELECT LName , Age FROM Student WHERE Sex = \"Cat\""
            ]
        },
        {
            "id": "task077-5a6329da7a064ae08707982e57f70383",
            "input": "find the number of rows in exhibition table whose Year greater than 2005 or Year greater than 2004",
            "output": [
                "SELECT Count ( * ) FROM exhibition WHERE Year > 2004 OR Year > 2005"
            ]
        },
        {
            "id": "task077-0eb3975b28de48bcab66e4d92a0b2a70",
            "input": "find Name of people table whose Height greater than 200 or Height greater than 190",
            "output": [
                "SELECT Name FROM people WHERE Height > 190 OR Height > 200"
            ]
        },
        {
            "id": "task077-bca02106deb1436ca547e60408eef036",
            "input": "find the number of rows in Rooms table",
            "output": [
                "SELECT Count ( * ) FROM Rooms"
            ]
        },
        {
            "id": "task077-4266babc64694cb3be5a2e6b01046777",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find the number of rows of each value of Room in the results of step 1.\nStep 3: find decor of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room GROUP BY T2.Room ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c45b8b831e0d48c4bbd62fd861326144",
            "input": "Step 1: find the Fname, Sex of Student table.\nStep 2: For each row in Has_Allergy table, find corresponding rows in Allergy_Type table and in Student table.\nStep 3: find Fname, Sex of the results of step 2 whose Allergy_Type's Allergy equals Cat.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Fname , T1.Sex FROM Student AS T1 EXCEPT SELECT T1.Fname , T1.Sex FROM Allergy_Type AS T2 JOIN Has_Allergy AS T3 ON T2.Allergy = T3.Allergy JOIN Student AS T1 ON T3.StuID = T1.StuID WHERE T2.Allergy = \"Cat\""
            ]
        },
        {
            "id": "task077-fa257a60e45b47f7b50efcb62277c72e",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find the number of rows of each value of start_station_id in the results of step 1.\nStep 3: find name, start_station_name of step 1 results ordered ascending by the results of step 2.\nStep 4: only show the first 3 rows of the results",
            "output": [
                "SELECT T1.name , T2.start_station_name FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id ORDER BY Count ( * ) Asc LIMIT 3"
            ]
        },
        {
            "id": "task077-40efdc46deac40edb0238ae1175fba9e",
            "input": "find the Company of company table",
            "output": [
                "SELECT Company FROM company"
            ]
        },
        {
            "id": "task077-10cb8506a7e14155933c13c6a12a26ee",
            "input": "find without repetition the Participant_ID of Participants_in_Events table",
            "output": [
                "SELECT DISTINCT Participant_ID FROM Participants_in_Events"
            ]
        },
        {
            "id": "task077-6dfc911a949547d2966772310449170c",
            "input": "Step 1: find the rows of Allergy_Type table.\nStep 2: find the StuID of Student table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT * FROM Allergy_Type AS T1 EXCEPT SELECT T2.StuID FROM Student AS T2"
            ]
        },
        {
            "id": "task077-4a8a39cce8504c41a14959cd19dca7e7",
            "input": "Step 1: For each row in sqlite_sequence table, find the corresponding rows in albums table.\nStep 2: find title of the results of step 1 whose seq contains Led",
            "output": [
                "SELECT T2.title FROM sqlite_sequence AS T1 JOIN albums AS T2 WHERE T1.seq LIKE \"Led\""
            ]
        },
        {
            "id": "task077-603c6dd9f5c94b92afe8c994cb686e96",
            "input": "find the start_station_id of trip table with smallest value of duration",
            "output": [
                "SELECT start_station_id FROM trip ORDER BY duration Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-9c7090b23a50426689d036c76bcae9f4",
            "input": "find each value of name in genres table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT name , Count ( * ) FROM genres GROUP BY name"
            ]
        },
        {
            "id": "task077-8da020506da54bb699ee87bffd58804c",
            "input": "find the number of rows in Claim_Headers table whose Claim_Type_Code equals Handphone Subsidy",
            "output": [
                "SELECT Count ( * ) FROM Claim_Headers WHERE Claim_Type_Code = \"Handphone Subsidy\""
            ]
        },
        {
            "id": "task077-21fd91273bd4499dbf98deba8bfe5799",
            "input": "Step 1: find the number of rows of each value of billing_state in invoices table.\nStep 2: find billing_state of invoices table with largest value in the results of step 1",
            "output": [
                "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-625b796b774c42e1a4bd0a6707edb819",
            "input": "Step 1: For each row in Policies table, find corresponding rows in Customers table and in Claim_Headers table.\nStep 2: find Customers's Customer_ID of the results of step 1 whose Claim_Status_Code equals Deputy or Claim_Status_Code equals Uniform",
            "output": [
                "SELECT T1.Customer_ID FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = \"Uniform\" OR T3.Claim_Status_Code = \"Deputy\""
            ]
        },
        {
            "id": "task077-03c4589d069d4571b78836013fecc23b",
            "input": "find the Candidate_ID, Unsure_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-8f107100042a499e8918f95ceea7cd4f",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find each value of start_station_id in the results of step 1 along with the average duration of the corresponding rows to each value",
            "output": [
                "SELECT T1.name , Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id"
            ]
        },
        {
            "id": "task077-3a57ca3e4eff4600b65a0abc68a6f08b",
            "input": "Step 1: For each row in Has_Allergy table, find corresponding rows in Allergy_Type table and in Student table.\nStep 2: find the number of rows in the results of step 1 whose Sex equals F or AllergyType equals Milk",
            "output": [
                "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = \"F\" OR T1.AllergyType = \"Milk\""
            ]
        },
        {
            "id": "task077-a752c3dd0bf44b5aa09095df6bd5132a",
            "input": "Step 1: find the date of weather table ordered descending by min_humidity.\nStep 2: only show the first 5 rows of the results",
            "output": [
                "SELECT date FROM weather ORDER BY min_humidity Desc LIMIT 5"
            ]
        },
        {
            "id": "task077-b371c9164e9747e0af45906d0febaa61",
            "input": "find the number of different Sex in Student table",
            "output": [
                "SELECT Count ( DISTINCT Sex ) FROM Student"
            ]
        },
        {
            "id": "task077-e0367d5fa3c14229afe49311358ba7fc",
            "input": "Step 1: find rows in employees table whose city equals IT Staff.\nStep 2: find each value of city in the results of step 1 along with the  the corresponding rows to each value",
            "output": [
                "SELECT city , Count ( * ) FROM employees WHERE city = \"IT Staff\" GROUP BY city"
            ]
        },
        {
            "id": "task077-c6a8730d44a64db69be7ad598011654b",
            "input": "Step 1: For each row in ACCOUNTS table, find corresponding rows in SAVINGS table and in CHECKING table.\nStep 2: find name, CHECKING's balance of the results of step 1 ordered ascending by SAVINGS's balance.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-fdd821090de84c3688955d0601f98e31",
            "input": "find the name, city, long of station table with largest value of long",
            "output": [
                "SELECT name , city , long FROM station ORDER BY long Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1c070ccd377c4a5da89c4baf48b1f051",
            "input": "find each value of city in employees table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT city , Count ( * ) FROM employees GROUP BY city"
            ]
        },
        {
            "id": "task077-6c38b65a902245b2890118d9a8887eab",
            "input": "find the date of weather table for which min_temperature_f greater than 85",
            "output": [
                "SELECT date FROM weather WHERE min_temperature_f > 85"
            ]
        },
        {
            "id": "task077-a08f9f0ad8594de0b65cc401f60d4b7b",
            "input": "Step 1: For each row in station_company table, find corresponding rows in company table and in gas_station table.\nStep 2: find Location, Representative_Name of the results of step 1 ordered descending by Sales_billion.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Sales_billion Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-520831e6b33d432cb380d2f29186a3d0",
            "input": "Step 1: For each row in station_company table, find corresponding rows in company table and in gas_station table.\nStep 2: find Location of the results of step 1 whose Sales_billion greater than 100",
            "output": [
                "SELECT T2.Location FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID WHERE T1.Sales_billion > 100"
            ]
        },
        {
            "id": "task077-951ba40287bd45a6b8bf631cb0061019",
            "input": "Step 1: find without repetition the name of station table.\nStep 2: find without repetition the name of station table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT DISTINCT name FROM station EXCEPT SELECT DISTINCT name FROM station"
            ]
        },
        {
            "id": "task077-b587aef4b6604c1ba25a5d3b844813df",
            "input": "Step 1: find the Position of pilot table for which Join_Year greater than 2000.\nStep 2: find the Position of pilot table for which Join_Year less than 2005.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Position FROM pilot WHERE Join_Year > 2000 INTERSECT SELECT Position FROM pilot WHERE Join_Year < 2005"
            ]
        },
        {
            "id": "task077-e94a6e108d244402985b37787899eb12",
            "input": "Step 1: find the number of rows in Student table whose Age greater than 18 and Sex equals food.\nStep 2: find the Sex of Student table for which Age greater than 18.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Age > 18 AND Sex = \"food\" EXCEPT SELECT Sex FROM Student WHERE Age > 18"
            ]
        },
        {
            "id": "task077-19b96ab928df4416ac76e38eb80eef90",
            "input": "Step 1: For each row in genres table, find the corresponding rows in tracks table.\nStep 2: find tracks's name of the results of step 1 whose genres's name equals MPEG audio file.\nStep 3: find tracks's name of the results of step 1 whose genres's name equals Rock.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"MPEG audio file\" INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\""
            ]
        },
        {
            "id": "task077-b89825b695e04fa6a2f1fc7e96f4b9b7",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find station's id, name of the results of step 1 whose duration greater than or equals 200",
            "output": [
                "SELECT T1.id , T1.name FROM station AS T1 JOIN trip AS T2 WHERE T2.duration > = 200"
            ]
        },
        {
            "id": "task077-1fd072d3bd1545979500a037a2a52cd6",
            "input": "Step 1: find the number of rows of each value of Customer_Details in Customers table.\nStep 2: find Customer_Details of Customers table with largest value in the results of step 1",
            "output": [
                "SELECT Customer_Details FROM Customers GROUP BY Customer_Details ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-790ae7bbf0ee4bdf9c9433d6b5249aee",
            "input": "Step 1: find the number of rows of each value of Event_ID in Events table.\nStep 2: find Event_ID, Event_Details in Events table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Event_ID , Event_Details FROM Events GROUP BY Event_ID HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-cc76b7d7f011498a96799cf27a0e0bd8",
            "input": "find the summation of total and the summation of total in invoices table",
            "output": [
                "SELECT Sum ( total ) , Sum ( total ) FROM invoices"
            ]
        },
        {
            "id": "task077-cad1594b56404d09b81061853c2e1c83",
            "input": "Step 1: For each row in Policies table, find corresponding rows in Customers table and in Claim_Headers table.\nStep 2: find the summation of Amount_Claimed of each value of Customer_Details in the results of step 1.\nStep 3: find Customer_Details of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_Details ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9ecead560611404aa32baf209316fe79",
            "input": "find without repetition the Fname of Student table for which Sex equals F",
            "output": [
                "SELECT DISTINCT Fname FROM Student WHERE Sex = \"F\""
            ]
        },
        {
            "id": "task077-97bd4383ed894587ac2ca58328d5ddd8",
            "input": "find the start_date of trip table for which duration equals or between 30.3 and 31",
            "output": [
                "SELECT start_date FROM trip WHERE duration BETWEEN 31 AND 30.3"
            ]
        },
        {
            "id": "task077-06f61ab054274a09a91b0f038ac97ffa",
            "input": "Step 1: find the name of station table for which city equals 10.\nStep 2: find the name of station table for which city equals San Jose.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT name FROM station WHERE city = 10 UNION SELECT name FROM station WHERE city = \"San Jose\""
            ]
        },
        {
            "id": "task077-4bd0eb085d494645847fa2e2ee6409d0",
            "input": "find the summation of Adults in Reservations table whose FirstName equals ROY and LastName equals SWEAZY",
            "output": [
                "SELECT Sum ( Adults ) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\""
            ]
        },
        {
            "id": "task077-8c4d99e681a24df08a35c5d7e586fe7f",
            "input": "Step 1: find rows in trip table whose start_station_name equals 8/%.\nStep 2: find each value of start_date the results of step 1 along with the average duration of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( duration ) , start_date FROM trip WHERE start_station_name = \"8/%\" GROUP BY start_date"
            ]
        },
        {
            "id": "task077-d481df2386b24f8995ccfec96b3fdd55",
            "input": "Step 1: find the Headquarters of company table.\nStep 2: find the Headquarters of company table for which Company equals Banking.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Headquarters FROM company EXCEPT SELECT Headquarters FROM company WHERE Company = \"Banking\""
            ]
        },
        {
            "id": "task077-11c2c97778e24455b1faf3e0241062a2",
            "input": "find the number of rows in Participants table whose Participant_Details equals Dr.",
            "output": [
                "SELECT Count ( * ) FROM Participants WHERE Participant_Details = \"Dr.\""
            ]
        },
        {
            "id": "task077-12591415c29a41c6b8c728b2c97ce673",
            "input": "find each value of Company_ID in company table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Company , Count ( * ) FROM company GROUP BY Company_ID"
            ]
        },
        {
            "id": "task077-6e0afb928dba43bba256048d21a8969c",
            "input": "Step 1: find the number of rows of each value of state in employees table.\nStep 2: find first_name, last_name of employees table ordered descending by the results of step 1.\nStep 3: only show the first 10 rows of the results",
            "output": [
                "SELECT first_name , last_name FROM employees GROUP BY state ORDER BY Count ( * ) Desc LIMIT 10"
            ]
        },
        {
            "id": "task077-5c4c1accc1eb4d6d846569ea3f8b2367",
            "input": "Step 1: find the Headquarters of company table for which Main_Industry equals Banking.\nStep 2: find the Headquarters of company table for which Company equals Oil and gas.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Headquarters FROM company WHERE Main_Industry = \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Company = \"Oil and gas\""
            ]
        },
        {
            "id": "task077-4e5d9b329f2643519a2dd537b8102766",
            "input": "find the start_date of trip table",
            "output": [
                "SELECT start_date FROM trip"
            ]
        },
        {
            "id": "task077-fd00599770b947039f528e93d6dea80b",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date of the results of step 1 whose min_temperature_f greater than 85",
            "output": [
                "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > 85"
            ]
        },
        {
            "id": "task077-b49eda2bb2b344c588fe096eee7c7f72",
            "input": "find the summation of milliseconds in tracks table",
            "output": [
                "SELECT Sum ( milliseconds ) FROM tracks"
            ]
        },
        {
            "id": "task077-fbf68502448d4ece8ac4a108b93f8178",
            "input": "Step 1: find the Headquarters of company table for which Company equals Banking.\nStep 2: find the Headquarters of company table for which Company equals Oil and gas.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Headquarters FROM company WHERE Company = \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Company = \"Oil and gas\""
            ]
        },
        {
            "id": "task077-51a42688f2344a8093b5014c5f176446",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find start_station_id, name, subscription_type of the results of step 1",
            "output": [
                "SELECT T2.start_station_id , T1.name , T2.subscription_type FROM station AS T1 JOIN trip AS T2"
            ]
        },
        {
            "id": "task077-48b047e5443348ac900a45430bc59c4f",
            "input": "Step 1: For each row in employees table, find the corresponding rows in customers table.\nStep 2: find hire_date of the results of step 1 whose customers's last_name equals Lucas",
            "output": [
                "SELECT T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.last_name = \"Lucas\""
            ]
        },
        {
            "id": "task077-2f6dbe3937a14ada8b86cde9b6ffe808",
            "input": "find without repetition the AllergyType of Allergy_Type table",
            "output": [
                "SELECT DISTINCT AllergyType FROM Allergy_Type"
            ]
        },
        {
            "id": "task077-17de9bca9a6f4da7868e7c188f93c6c2",
            "input": "find the Rank, Company, Market_Value of company table for which Main_Industry equals Banking ordered ascending by Sales_billion",
            "output": [
                "SELECT Rank , Company , Market_Value FROM company WHERE Main_Industry = \"Banking\" ORDER BY Sales_billion Asc"
            ]
        },
        {
            "id": "task077-ef3c1622d9474278b555f3561a5fbc12",
            "input": "Step 1: find the number of rows of each value of id in architect table.\nStep 2: find id, name in architect table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT id , name FROM architect GROUP BY id HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-b58c56490d6a4210a0efe89183f9fb3e",
            "input": "find the Firstname, Lastname of Band table for which Firstname equals Le Pop",
            "output": [
                "SELECT Firstname , Lastname FROM Band WHERE Firstname = \"Le Pop\""
            ]
        },
        {
            "id": "task077-00b18e2218064bec80f8511fe20a4562",
            "input": "Step 1: find the Major of Student table.\nStep 2: find the DName of Department table whose DNO not one of the results of step 1",
            "output": [
                "SELECT T1.DName FROM Department AS T1 WHERE T1.DNO NOT IN ( SELECT T2.Major FROM Student AS T2 )"
            ]
        },
        {
            "id": "task077-02e9cf384fe74b7183ef0cbc0f6f627c",
            "input": "find the Famous_Title of artist table for which Famous_Release_date equals Triumfall",
            "output": [
                "SELECT Famous_Title FROM artist WHERE Famous_Release_date = \"Triumfall\""
            ]
        },
        {
            "id": "task077-d70ba4479d8a4568927084be4c1584a8",
            "input": "find the bedType, roomName of Rooms table",
            "output": [
                "SELECT bedType , roomName FROM Rooms"
            ]
        },
        {
            "id": "task077-b595709dc73b4db1957d08b22e2a4b58",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose SALARY greater than 24000 and JOB_TITLE equals PU_MAN",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 24000 AND T1.JOB_TITLE = \"PU_MAN\""
            ]
        },
        {
            "id": "task077-9d393a6f1f6743dab4735c6fdb455dbe",
            "input": "find the Document_Type_Name, Document_Type_Name, Document_Type_Description of Ref_Document_Types table",
            "output": [
                "SELECT Document_Type_Name , Document_Type_Name , Document_Type_Description FROM Ref_Document_Types"
            ]
        },
        {
            "id": "task077-fdd37341b93040008717e04daea14637",
            "input": "Step 1: find the FIRST_NAME, LAST_NAME of employees table.\nStep 2: find the FIRST_NAME, LAST_NAME of employees table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees"
            ]
        },
        {
            "id": "task077-98fed5e75c834cc899622aa0e5824547",
            "input": "find the maximum Adults and the summation of Kids in Reservations table",
            "output": [
                "SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations"
            ]
        },
        {
            "id": "task077-07c1aa017a3443559b1baccb7065310b",
            "input": "find the number of rows in Product table whose product_name equals voluptatem",
            "output": [
                "SELECT Count ( * ) FROM Product WHERE product_name = \"voluptatem\""
            ]
        },
        {
            "id": "task077-a7fb3693cb014dbfaf9cef4b2b109e28",
            "input": "Step 1: For each row in Product table, find the corresponding rows in Problems table.\nStep 2: find rows in the results of step 1 whose date_problem_closed greater than 1986-11-13.\nStep 3: find each value of Product's product_id the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.date_problem_closed > \"1986-11-13\" GROUP BY T1.product_id"
            ]
        },
        {
            "id": "task077-a49418573ede4991bb8ffb9bdd40ac37",
            "input": "Step 1: For each row in Asset_Parts table, find corresponding rows in Parts table and in Assets table.\nStep 2: find chargeable_amount of the results of step 1 ordered ascending by asset_details",
            "output": [
                "SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.asset_details Asc"
            ]
        },
        {
            "id": "task077-56396a5f2b9844ea8d4b71f87a04f3b9",
            "input": "Step 1: find the number of rows of each value of Project_ID in Projects table.\nStep 2: find Project_ID in Projects table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Project_ID FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-669331de3b234c2caf3adcde94c6b7cd",
            "input": "Step 1: For each row in AssignedTo table, find corresponding rows in Scientists table and in Projects table.\nStep 2: find Projects's Name, Scientists's Name, Hours of the results of step 1 ordered ascending by Scientists's Name",
            "output": [
                "SELECT T2.Name , T1.Name , T2.Hours FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T1.Name Asc"
            ]
        },
        {
            "id": "task077-47824d130f144e1392bacf4f19ffe13d",
            "input": "find the number of rows in Vocals table whose Type equals Le Pop",
            "output": [
                "SELECT Count ( * ) FROM Vocals WHERE Type = \"Le Pop\""
            ]
        },
        {
            "id": "task077-f51a72985bcd44d4a132172a0a5b1d88",
            "input": "Step 1: For each row in Instruments table, find corresponding rows in Songs table and in Band table.\nStep 2: find Firstname, Lastname of the results of step 1 whose Title equals Der Kapitan",
            "output": [
                "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = \"Der Kapitan\""
            ]
        },
        {
            "id": "task077-dad524fd427940409d710e06ef1036df",
            "input": "Step 1: For each row in hosting_city table, find corresponding rows in city table and in match table.\nStep 2: find City of the results of step 1 whose Competition equals 1994 FIFA World Cup qualification and Competition equals Friendly match",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID WHERE T2.Competition = \"Friendly match\" AND T2.Competition = \"1994 FIFA World Cup qualification\""
            ]
        },
        {
            "id": "task077-c0956a07c4a941dfbed5dfbc64a743a7",
            "input": "find the number of rows in Products table",
            "output": [
                "SELECT Count ( * ) FROM Products"
            ]
        },
        {
            "id": "task077-f0887979c5a2428aba8c07c444de52cb",
            "input": "find the gradepoint, gradepoint of Gradeconversion table for which lettergrade contains A",
            "output": [
                "SELECT gradepoint , gradepoint FROM Gradeconversion WHERE lettergrade LIKE \"A\""
            ]
        },
        {
            "id": "task077-9610afe8689b4bcd8c390cb112fe4201",
            "input": "find name of Person table whose job equals Alice and gender equals female",
            "output": [
                "SELECT name FROM Person WHERE job = \"Alice\" AND gender = \"female\""
            ]
        },
        {
            "id": "task077-c619bdd5f5f94f8d83b087365f13d269",
            "input": "Step 1: find the EMPLOYEE_ID of job_history table.\nStep 2: find the rows of employees table whose employees's EMPLOYEE_ID not one of the results of step 1",
            "output": [
                "SELECT * FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )"
            ]
        },
        {
            "id": "task077-6f6f21835dca4b5ab3c2695df0b1aa58",
            "input": "find name of Person table whose job equals Zach and gender equals female",
            "output": [
                "SELECT name FROM Person WHERE job = \"Zach\" AND gender = \"female\""
            ]
        },
        {
            "id": "task077-e56408e543b041b4b998b0907dfb3622",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Problem_Log table.\nStep 2: find log_entry_description of the results of step 1 whose staff_first_name equals Christop",
            "output": [
                "SELECT T1.log_entry_description FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
            ]
        },
        {
            "id": "task077-0a44c6217d8c443ebb0efff07ea54cf5",
            "input": "Step 1: find the City of city table for which City_ID greater than 1.\nStep 2: For each row in city table, find the corresponding rows in hosting_city table.\nStep 3: find City of the results of step 2 whose Year equals 2008.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.City FROM city AS T1 WHERE T1.City_ID > 1 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008"
            ]
        },
        {
            "id": "task077-ee5538978d8c4ff8a720850c252bb06c",
            "input": "find the number of different city in Person table",
            "output": [
                "SELECT Count ( DISTINCT city ) FROM Person"
            ]
        },
        {
            "id": "task077-7f75337f40504682aa3f697e4e9975ec",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose City equals Shanghai and Year equals 2008",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = \"Shanghai\" AND T2.Year = 2008"
            ]
        },
        {
            "id": "task077-b7c22141d717425f80728ecb0d54eb75",
            "input": "find City of city table whose Regional_Population greater than 5000000 or Regional_Population less than 10000000",
            "output": [
                "SELECT City FROM city WHERE Regional_Population > 10000000 OR Regional_Population < 5000000"
            ]
        },
        {
            "id": "task077-0d70f147057b4c91925712b79791b609",
            "input": "find the number of rows in Student table whose Major equals B",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Major = \"B\""
            ]
        },
        {
            "id": "task077-eca3c57fa3d54310953a84e006e9db3e",
            "input": "Step 1: find the Fname, Lname of Faculty table ordered descending by Rank.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Fname , Lname FROM Faculty ORDER BY Rank Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-ffa88e38e1664b30a9928461cb6dba20",
            "input": "find the number of rows in Person table whose age greater than 30",
            "output": [
                "SELECT Count ( * ) FROM Person WHERE age > 30"
            ]
        },
        {
            "id": "task077-29030ac89f174e299fc107efdf2ed1d1",
            "input": "find each value of name in airport table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT name , Count ( * ) FROM airport GROUP BY name"
            ]
        },
        {
            "id": "task077-d73448393f0a4a05aeba89f4871b8cde",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find the  rows in the results of step 1 whose SALARY less than or equals D ordered descending by MIN_SALARY",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = \"D\" ORDER BY T1.MIN_SALARY Desc"
            ]
        },
        {
            "id": "task077-dd367581753d47b0aab0f09645cf42c0",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Enrolled_in table.\nStep 2: find the average Grade in the results of step 1 whose LName equals Smith",
            "output": [
                "SELECT Avg ( T2.Grade ) FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = \"Smith\""
            ]
        },
        {
            "id": "task077-de1e26674a744c3f9decd1f547612a1e",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find EMPLOYEE_ID, FIRST_NAME, LAST_NAME of the results of step 1 whose JOB_TITLE equals President.\nStep 3: find EMPLOYEE_ID, FIRST_NAME, LAST_NAME of the results of step 1 whose JOB_TITLE equals PU_MAN.\nStep 4: show the rows that are in any of the results of step 2 or the results of step 3",
            "output": [
                "SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = \"President\" UNION SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = \"PU_MAN\""
            ]
        },
        {
            "id": "task077-0a1abde04f2e4e82947861ccf7de56e8",
            "input": "Step 1: For each row in Band table, find the corresponding rows in Performance table.\nStep 2: find Firstname, Lastname of the results of step 1 whose StagePosition equals Der Kapitan",
            "output": [
                "SELECT T1.Firstname , T1.Lastname FROM Band AS T1 JOIN Performance AS T2 ON T1.Id = T2.Bandmate WHERE T2.StagePosition = \"Der Kapitan\""
            ]
        },
        {
            "id": "task077-6b01397ebcc643f78eb1d763a7cc2546",
            "input": "find the asset_id, asset_details, other_asset_details of Assets table",
            "output": [
                "SELECT asset_id , asset_details , other_asset_details FROM Assets"
            ]
        },
        {
            "id": "task077-19bcd091666c477ab8002ef1f454056f",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find Person's name of the results of step 1 whose friend equals Alice",
            "output": [
                "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = \"Alice\""
            ]
        },
        {
            "id": "task077-d815f01c4e6348c18aaaba04e1d2faaf",
            "input": "Step 1: For each row in Problems table, find corresponding rows in Product table and in Staff table.\nStep 2: find product_name of the results of step 1 whose staff_last_name equals Champlin and staff_first_name equals Lacey.\nStep 3: find product_name of the results of step 1 whose staff_first_name equals Kenton.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Champlin\" AND T2.staff_first_name = \"Lacey\" INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Kenton\""
            ]
        },
        {
            "id": "task077-73b7285f8c0c41c4aae20c74244721e7",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find Song of the results of step 1 whose Famous_Release_date equals Triumfall",
            "output": [
                "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date = \"Triumfall\""
            ]
        },
        {
            "id": "task077-14733484fb744702be5517032e689f98",
            "input": "Step 1: For each row in Documents_to_be_Destroyed table, find corresponding rows in All_Documents table and in Employees table.\nStep 2: find Employee_Name, Document_Name of the results of step 1",
            "output": [
                "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID"
            ]
        },
        {
            "id": "task077-9db114e18b6b49b3bc4111082492cc3c",
            "input": "Step 1: For each row in Roles table, find the corresponding rows in Employees table.\nStep 2: find Employee_ID of the results of step 1 whose Role_Name not equals Human Resource",
            "output": [
                "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name ! = \"Human Resource\""
            ]
        },
        {
            "id": "task077-cd35321b64554aadbaf694f5bb6a06c0",
            "input": "Step 1: For each row in employees table, find the corresponding rows in locations table.\nStep 2: find FIRST_NAME, LAST_NAME, HIRE_DATE of the results of step 1 whose CITY equals Clara",
            "output": [
                "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = \"Clara\""
            ]
        },
        {
            "id": "task077-6982fe81e3b94d5f97a5e14b708031f6",
            "input": "Step 1: find the number of rows of each value of Music_Festival in music_festival table.\nStep 2: find Date_of_ceremony in music_festival table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT Date_of_ceremony FROM music_festival GROUP BY Music_Festival HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-2c4289a2772f4601b7e8d55240164cfc",
            "input": "Step 1: For each row in Member_of_club table, find corresponding rows in Student table and in Club table.\nStep 2: find ClubName of the results of step 1 whose Fname equals Davis",
            "output": [
                "SELECT T2.ClubName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T1.Fname = \"Davis\""
            ]
        },
        {
            "id": "task077-5e977c65415943aaa2f6781392bf985d",
            "input": "Step 1: find the rows of employees table ordered ascending by SALARY.\nStep 2: only show the first 2500 rows of the results",
            "output": [
                "SELECT * FROM employees ORDER BY SALARY Asc LIMIT 2500"
            ]
        },
        {
            "id": "task077-c4418e0b5c0c4eceaeeaf08f22dd7c48",
            "input": "find the name, age of Person table ordered ascending by gender",
            "output": [
                "SELECT name , age FROM Person ORDER BY gender Asc"
            ]
        },
        {
            "id": "task077-0015e01a5c1a49debbea27aa73a4464d",
            "input": "Step 1: find the number of rows of each value of Rank, Lname in Faculty table.\nStep 2: find Fname, Lname of Faculty table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT Fname , Lname FROM Faculty GROUP BY Rank , Lname ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-29167baacd5940d1b7a5e4ffc3ebb980",
            "input": "Step 1: For each row in volume table, find the corresponding rows in music_festival table.\nStep 2: find Volume of the results of step 1 with largest value of Weeks_on_Top",
            "output": [
                "SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e2d954ebaa8347279bc0166c813eb234",
            "input": "find the number of rows in Student table whose Fname equals Bootup Baltimore and Age greater than 18",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Fname = \"Bootup Baltimore\" AND Age > 18"
            ]
        },
        {
            "id": "task077-bd2b945e35cd43fbabfa24732d6ec689",
            "input": "Step 1: find the name of Person table.\nStep 2: find the name of Person table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT name FROM Person EXCEPT SELECT name FROM Person"
            ]
        },
        {
            "id": "task077-5dbb43b5d2d5493d8665ce3427d0cb38",
            "input": "find the FIRST_NAME, LAST_NAME of employees table for which FIRST_NAME contains z",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE FIRST_NAME LIKE \"z\""
            ]
        },
        {
            "id": "task077-5e025691093542538a555da56bf6dd6a",
            "input": "find the number of rows in Student table whose Fname equals Tracy and LName equals Kim",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Fname = \"Tracy\" AND LName = \"Kim\""
            ]
        },
        {
            "id": "task077-823a050d4cbc4c12897666749d7c1e10",
            "input": "Step 1: For each row in employees table, find the corresponding rows in locations table.\nStep 2: find FIRST_NAME, LAST_NAME, SALARY of the results of step 1 whose CITY equals London",
            "output": [
                "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.SALARY FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = \"London\""
            ]
        },
        {
            "id": "task077-9198688915f74420b6f60553cc4bdef1",
            "input": "find the number of different Artist in artist table",
            "output": [
                "SELECT Count ( DISTINCT Artist ) FROM artist"
            ]
        },
        {
            "id": "task077-3503c5b98d0847c885d3d24a37e9fdce",
            "input": "find the HIRE_DATE of employees table for which FIRST_NAME not equals M",
            "output": [
                "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME ! = \"M\""
            ]
        },
        {
            "id": "task077-bb8f7a81890e48cca168b78ced20b40f",
            "input": "Step 1: find the number of rows of each value of DEPARTMENT_NAME in departments table.\nStep 2: find DEPARTMENT_NAME in departments table whose corresponding value in step 1 is greater than or equals 1",
            "output": [
                "SELECT DEPARTMENT_NAME FROM departments GROUP BY DEPARTMENT_NAME HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-103018e2f7c342eb944e52543c616240",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find Department's Room of the results of step 1 whose Rank equals Professor and Faculty's Building equals NEB",
            "output": [
                "SELECT T2.Room FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Rank = \"Professor\" AND T1.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-92e8bcbf140d45f3a46994d4a91fb54b",
            "input": "Step 1: For each row in Problems table, find corresponding rows in Product table and in Staff table.\nStep 2: find product_name of the results of step 1 whose staff_first_name equals Champlin and staff_first_name equals Lacey.\nStep 3: find product_name of the results of step 1 whose staff_first_name equals Kenton.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Lacey\" AND T2.staff_first_name = \"Champlin\" INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Kenton\""
            ]
        },
        {
            "id": "task077-012ce773068b463993f5a20673590e51",
            "input": "find the City of city table with largest value of Regional_Population",
            "output": [
                "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-848f8839af8548ee8177e09bf42f44e6",
            "input": "find the Industry of Companies table ordered descending by Industry",
            "output": [
                "SELECT Industry FROM Companies ORDER BY Industry Desc"
            ]
        },
        {
            "id": "task077-91be934bb3b34339a8b66402922da2e3",
            "input": "find the Document_ID of Documents table for which Document_Description equals Government",
            "output": [
                "SELECT Document_ID FROM Documents WHERE Document_Description = \"Government\""
            ]
        },
        {
            "id": "task077-677afd143ac64f8c8facebacd8d97212",
            "input": "find each value of maintenance_contract_id in Maintenance_Contracts table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT maintenance_contract_company_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id"
            ]
        },
        {
            "id": "task077-7894407fccb646d888b8cb02e7047efc",
            "input": "find EMAIL of employees table whose SALARY greater than or equals 7000 and SALARY less than or equals 12000",
            "output": [
                "SELECT EMAIL FROM employees WHERE SALARY > = 12000 AND SALARY < = 7000"
            ]
        },
        {
            "id": "task077-23de534465fd4d62be894f958be6b3d9",
            "input": "Step 1: find the rows of jobs table for which MIN_SALARY greater than 20000.\nStep 2: find the JOB_TITLE of jobs table for which MAX_SALARY greater than 12000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY > 20000 INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-717178a022b84678bd87773833228b1e",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find rows in the results of step 1 whose age greater than engineer.\nStep 3: find the number of rows of each value of friend in step 1 rsults.\nStep 4: find Person's name in the results of step 1 whose corresponding value in step 2 is greater than or equals 1",
            "output": [
                "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > \"engineer\" GROUP BY T2.friend HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-4883a50546304030a4661cbc98c569f5",
            "input": "Step 1: find the number of rows of each value of Title in Songs table.\nStep 2: find Title of Songs table with largest value in the results of step 1",
            "output": [
                "SELECT Title FROM Songs GROUP BY Title ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-75e79b091dc24977962ecf486683d1c5",
            "input": "find the COUNTRY_ID, COUNTRY_NAME of countries table",
            "output": [
                "SELECT COUNTRY_ID , COUNTRY_NAME FROM countries"
            ]
        },
        {
            "id": "task077-9fb9b09a040e4362acf8dddadab446f3",
            "input": "find the Author, Scores of submission table",
            "output": [
                "SELECT Author , Scores FROM submission"
            ]
        },
        {
            "id": "task077-aea1509dd7454198bd2eeb04a69977b9",
            "input": "find the Document_ID of Documents table for which Document_Type_Code equals SF",
            "output": [
                "SELECT Document_ID FROM Documents WHERE Document_Type_Code = \"SF\""
            ]
        },
        {
            "id": "task077-a26cf20fc81444baab4311c58d169401",
            "input": "Step 1: For each row in Third_Party_Companies table, find the corresponding rows in Maintenance_Contracts table.\nStep 2: find company_name of the results of step 1 with smallest value of contract_end_date",
            "output": [
                "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_end_date Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-f343b61a33e740d68c18c5ec4e8303d6",
            "input": "find the FIRST_NAME, LAST_NAME of employees table for which LAST_NAME contains z",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE LAST_NAME LIKE \"z\""
            ]
        },
        {
            "id": "task077-041e258c3b2c401f91a735e6e5d29dc6",
            "input": "find Venue of match table whose Competition equals Nanjing ( Jiangsu ) and Score equals 1994 FIFA World Cup qualification",
            "output": [
                "SELECT Venue FROM match WHERE Competition = \"Nanjing ( Jiangsu )\" AND Score = \"1994 FIFA World Cup qualification\""
            ]
        },
        {
            "id": "task077-a0b05f8dd7e141ea81e8f9ca24692e4c",
            "input": "Step 1: For each row in film_market_estimation table, find corresponding rows in film table and in market table.\nStep 2: find Country, Year of the results of step 1 whose Title equals ET the Extra-Terrestrial",
            "output": [
                "SELECT T2.Country , T3.Year FROM film AS T1 JOIN market AS T2 JOIN film_market_estimation AS T3 ON T1.Film_ID = T3.Film_ID AND T3.Market_ID = T2.Market_ID AND T1.Film_ID = T3.Film_ID WHERE T1.Title = \"ET the Extra-Terrestrial\""
            ]
        },
        {
            "id": "task077-24e4a519e0a043a0ac8a89c6e9197455",
            "input": "Step 1: For each row in Ref_Locations table, find the corresponding rows in Document_Locations table.\nStep 2: find Date_in_Locaton_To of the results of step 1 whose Location_Name equals Robin CV and Location_Name equals Brazil",
            "output": [
                "SELECT T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code WHERE T1.Location_Name = \"Brazil\" AND T1.Location_Name = \"Robin CV\""
            ]
        },
        {
            "id": "task077-a22164ccbcda422184c7a8037ab1bf15",
            "input": "find the number of different Title in Songs table",
            "output": [
                "SELECT Count ( DISTINCT Title ) FROM Songs"
            ]
        },
        {
            "id": "task077-312598618f70437e8aadbe6c48b794fb",
            "input": "find the Host_City of hosting_city table ordered descending by Year",
            "output": [
                "SELECT Host_City FROM hosting_city ORDER BY Year Desc"
            ]
        },
        {
            "id": "task077-a217ca1dddfb49bc80e6e3a255d8ae1d",
            "input": "Step 1: find the number of rows of each value of Project_ID in Projects table.\nStep 2: find Project_ID, Project_Details in Projects table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-5f81e429024d4929a827f850bc3a619a",
            "input": "Step 1: find the first_name, last_name of Maintenance_Engineers table.\nStep 2: find the first_name, last_name of Maintenance_Engineers table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT first_name , last_name FROM Maintenance_Engineers EXCEPT SELECT first_name , last_name FROM Maintenance_Engineers"
            ]
        },
        {
            "id": "task077-d4ce8ab645a241478d79cddde1a62976",
            "input": "find each value of Industry in Companies table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT name , Count ( * ) FROM Companies GROUP BY Industry"
            ]
        },
        {
            "id": "task077-c6e90dff858f4f959e0b255584815b21",
            "input": "find the FirstName, LastName of Reservations table for which Rate greater than 0",
            "output": [
                "SELECT FirstName , LastName FROM Reservations WHERE Rate > 0"
            ]
        },
        {
            "id": "task077-fafbef173a6148a1899e8f1f47910d48",
            "input": "find each value of gender in Person table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT gender , Count ( * ) FROM Person GROUP BY gender"
            ]
        },
        {
            "id": "task077-cffaf152f1b24781a9797cbdea93ad44",
            "input": "Step 1: find the number of rows of each value of id in architect table.\nStep 2: find id, name, nationality of architect table with largest value in the results of step 1",
            "output": [
                "SELECT id , name , nationality FROM architect GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a5aabf6ddb6a48e98dc4a5f13c6404a2",
            "input": "Step 1: For each row in Ref_Calendar table, find the corresponding rows in Documents_to_be_Destroyed table.\nStep 2: find Day_Number, Actual_Destruction_Date of the results of step 1",
            "output": [
                "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date"
            ]
        },
        {
            "id": "task077-2f8817d315954d9d9855f604271867b2",
            "input": "Step 1: find the number of rows of each value of name in buildings table.\nStep 2: find name of buildings table with largest value in the results of step 1",
            "output": [
                "SELECT name FROM buildings GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-696a62e8ea964eca8f91419552bcab04",
            "input": "find the MIN_SALARY of jobs table for which MAX_SALARY greater than 300",
            "output": [
                "SELECT MIN_SALARY FROM jobs WHERE MAX_SALARY > 300"
            ]
        },
        {
            "id": "task077-87ffb8b7265141e1840e0a48361ce805",
            "input": "Step 1: find the number of rows of each value of EMPLOYEE_ID in employees table.\nStep 2: find EMPLOYEE_ID, FIRST_NAME, LAST_NAME of employees table with largest value in the results of step 1",
            "output": [
                "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees GROUP BY EMPLOYEE_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a31ee4886c4e4223a9ab166c1dd20e0a",
            "input": "Step 1: For each row in architect table, find the corresponding rows in bridge table.\nStep 2: find without repetition architect's name of the results of step 1 whose length_feet greater than 80",
            "output": [
                "SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T2.length_feet > 80"
            ]
        },
        {
            "id": "task077-a329949f63b546ad86bac6f95b8db12b",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find roomName of the results of step 1 with largest value of Adults",
            "output": [
                "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Adults Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b0157a8edc7e45ac975e9bbfac656c99",
            "input": "find the summation of Kids in Reservations table",
            "output": [
                "SELECT Sum ( Kids ) FROM Reservations"
            ]
        },
        {
            "id": "task077-3115dcd5afdd4a2db3ad115b4052c9c1",
            "input": "Step 1: For each row in employees table, find corresponding rows in departments table and in jobs table.\nStep 2: find EMPLOYEE_ID, JOB_TITLE of the results of step 1 whose DEPARTMENT_NAME equals 80",
            "output": [
                "SELECT T3.EMPLOYEE_ID , T2.JOB_TITLE FROM departments AS T1 JOIN jobs AS T2 JOIN employees AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID AND T3.JOB_ID = T2.JOB_ID AND T1.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = 80"
            ]
        },
        {
            "id": "task077-672eaf975d6648a6ad22db705371e661",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MAX_SALARY less than 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MAX_SALARY < 12000"
            ]
        },
        {
            "id": "task077-b1491eda357f424fbb78926b1e705e61",
            "input": "find the number of rows in flight table whose Pilot not equals Thompson",
            "output": [
                "SELECT Count ( * ) FROM flight WHERE Pilot ! = \"Thompson\""
            ]
        },
        {
            "id": "task077-8985891439fb40f1adee23e2b9e661ac",
            "input": "Step 1: For each row in AssignedTo table, find corresponding rows in Scientists table and in Projects table.\nStep 2: find Scientists's Name of the results of step 1 with largest value of Hours",
            "output": [
                "SELECT T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a6a1dcb80a5f4a20aa87ed8736d9f586",
            "input": "Step 1: find the average MIN_SALARY in jobs table.\nStep 2: find the EMPLOYEE_ID of employees table whose SALARY greater than the results of step 1",
            "output": [
                "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MIN_SALARY ) FROM jobs AS T2 )"
            ]
        },
        {
            "id": "task077-180dac59ba374af39fd12b918dc767e6",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 with largest value of Year",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City ORDER BY T2.Year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0ad3ae31708d4a66b34609f8d451e8cb",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose Year equals 2008.\nStep 3: find City of the results of step 1 whose Year equals 2008.\nStep 4: show the rows that are in any of the results of step 2 or the results of step 3",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008 UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008"
            ]
        },
        {
            "id": "task077-89c8011a5109423caee99689a24f000e",
            "input": "find the Document_Type_Name, Document_Type_Description of Ref_Document_Types table",
            "output": [
                "SELECT Document_Type_Name , Document_Type_Description FROM Ref_Document_Types"
            ]
        },
        {
            "id": "task077-efea64162bcc4b4fa9ed428032ab139b",
            "input": "Step 1: For each row in city table, find the corresponding rows in temperature table.\nStep 2: find the number of rows of each value of temperature's City_ID in the results of step 1.\nStep 3: find City of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-16488eaeab154cf2a3c7ea4de488c725",
            "input": "find each value of Author in submission table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Author , Count ( * ) FROM submission GROUP BY Author"
            ]
        },
        {
            "id": "task077-9d5e8a98001049abbe9bb36ad0a10bd0",
            "input": "Step 1: find the architect_id of mill table.\nStep 2: find without repetition the architect's name, nationality of architect table whose architect's id not one of the results of step 1",
            "output": [
                "SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 WHERE T1.id NOT IN ( SELECT T2.architect_id FROM mill AS T2 )"
            ]
        },
        {
            "id": "task077-d6926c9a5b8742378deabbe217a72800",
            "input": "Step 1: For each row in employees table, find the corresponding rows in locations table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose CITY equals Clara and LAST_NAME equals Clara",
            "output": [
                "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = \"Clara\" AND T1.LAST_NAME = \"Clara\""
            ]
        },
        {
            "id": "task077-f7a5ef43a05546d4b1f4a34ee9cea6f4",
            "input": "Step 1: For each row in Ref_Locations table, find the corresponding rows in Document_Locations table.\nStep 2: find the number of rows of each value of Ref_Locations's Location_Code in the results of step 1.\nStep 3: find Document_Locations's Location_Code in the results of step 1 whose corresponding value in step 2 is greater than or equals 3",
            "output": [
                "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-28f4b6204d4249b391eab30fd3766f2c",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Problems table.\nStep 2: find problem_id of the results of step 1 whose staff_first_name equals Lysanne and staff_last_name equals Turcotte",
            "output": [
                "SELECT T2.problem_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = \"Lysanne\" AND T1.staff_last_name = \"Turcotte\""
            ]
        },
        {
            "id": "task077-3bced4beb52a411c84de2d6dff4b1325",
            "input": "Step 1: find the Famous_Title of artist table.\nStep 2: find the Famous_Title of artist table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist"
            ]
        },
        {
            "id": "task077-9a39a77da8204c71a96bd446b0b5414c",
            "input": "Step 1: For each row in Problems table, find corresponding rows in Product table and in Staff table.\nStep 2: find staff_first_name, staff_last_name of the results of step 1 whose product_name not equals aut",
            "output": [
                "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = \"aut\""
            ]
        },
        {
            "id": "task077-3865fedc79044ae69c325b4bbdbfee01",
            "input": "find without repetition the company_type of Third_Party_Companies table",
            "output": [
                "SELECT DISTINCT company_type FROM Third_Party_Companies"
            ]
        },
        {
            "id": "task077-825a5e18eda041f1bc20ef4e4fbfa6d6",
            "input": "find the Fname, LName of Student table for which Major equals 140",
            "output": [
                "SELECT Fname , LName FROM Student WHERE Major = 140"
            ]
        },
        {
            "id": "task077-959eb33022e44c22997119762893fead",
            "input": "Step 1: find the number of rows of each value of Location_Code in Ref_Locations table.\nStep 2: find Location_Code of Ref_Locations table with largest value in the results of step 1",
            "output": [
                "SELECT Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f6d8cf151c1a4215a54ba570632e20f8",
            "input": "Step 1: find the number of rows of each value of Document_Type_Code in Ref_Document_Types table.\nStep 2: find Document_Type_Code of Ref_Document_Types table with largest value in the results of step 1",
            "output": [
                "SELECT Document_Type_Code FROM Ref_Document_Types GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6f1426dd29ba4a0991f3e501687e6119",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose Year less than or equals 2008.\nStep 3: find City of the results of step 1 whose Year equals 2008.\nStep 4: show the rows that are in any of the results of step 2 or the results of step 3",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year < = 2008 UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008"
            ]
        },
        {
            "id": "task077-91196b4d8c844a51963f5959bfc390f1",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose Regional_Population greater than 23019148 or Year equals 2008",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.Regional_Population > 23019148 OR T2.Year = 2008"
            ]
        },
        {
            "id": "task077-b191d514f1ce474aa2d3aec638f21e63",
            "input": "Step 1: find the number of rows of each value of MIN_SALARY in jobs table.\nStep 2: find JOB_ID in jobs table whose corresponding value in step 1 is greater than or equals 2.\nStep 3: find the number of rows of each value of JOB_ID in jobs table.\nStep 4: find JOB_TITLE in jobs table whose corresponding value in step 3 is greater than 300.\nStep 5: show the rows that are in any of the results of step 2 or the results of step 4",
            "output": [
                "SELECT JOB_ID FROM jobs GROUP BY MIN_SALARY HAVING Count ( * ) > = 2 UNION SELECT JOB_TITLE FROM jobs GROUP BY JOB_ID HAVING Count ( * ) > 300"
            ]
        },
        {
            "id": "task077-6841c1fa2f374b17b2a75985ba44719f",
            "input": "Step 1: For each row in Ref_Document_Types table, find the corresponding rows in Documents table.\nStep 2: find Document_Type_Name, Document_Type_Name, Document_Type_Description of the results of step 1 whose Document_Name equals Noel CV or Document_Name equals King Book",
            "output": [
                "SELECT T1.Document_Type_Name , T1.Document_Type_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = \"King Book\" OR T2.Document_Name = \"Noel CV\""
            ]
        },
        {
            "id": "task077-ef21804e2f6346b4ae9d2f6e24dda64c",
            "input": "Step 1: For each row in architect table, find the corresponding rows in bridge table.\nStep 2: find the maximum length_feet in the results of step 1 whose architect's name equals Frank Lloyd Wright",
            "output": [
                "SELECT Max ( T2.length_feet ) FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T1.name = \"Frank Lloyd Wright\""
            ]
        },
        {
            "id": "task077-86b231cc7fcf4658b6a917450a6b9d0b",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find PersonFriend's name of the results of step 1 whose age greater than 40.\nStep 3: find the Person's name of Person table for which age less than 30.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > 40 INTERSECT SELECT T1.name FROM Person AS T1 WHERE T1.age < 30"
            ]
        },
        {
            "id": "task077-bfa4118fc57741a5bde4d77147314f3d",
            "input": "find the Author, Scores of submission table ordered ascending by Scores",
            "output": [
                "SELECT Author , Scores FROM submission ORDER BY Scores Asc"
            ]
        },
        {
            "id": "task077-027a351ce7f242e0827043dd023cb067",
            "input": "find the rows of employees table for which HIRE_DATE equals or between 2002-06-21 and 1987-06-17",
            "output": [
                "SELECT * FROM employees WHERE HIRE_DATE BETWEEN \"1987-06-17\" AND \"2002-06-21\""
            ]
        },
        {
            "id": "task077-b6d6fbe58aae4f46ae6ead8fd0ff81de",
            "input": "find the Issue_Date of volume table with largest value of Weeks_on_Top",
            "output": [
                "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-120c49089783428c9ff98f93ad5b746d",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Department's Building equals Mergenthaler and Faculty's Building equals NEB.\nStep 3: find DName, Lname of the results of step 1 whose Department's Building equals M and Faculty's Building equals NEB.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"Mergenthaler\" AND T1.Building = \"NEB\" INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"M\" AND T1.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-560c500a0a8e4a7798e7ffc9f8529ca6",
            "input": "find Venue of match table whose Score equals Nanjing ( Jiangsu ) and Competition equals 1994 FIFA World Cup qualification",
            "output": [
                "SELECT Venue FROM match WHERE Score = \"Nanjing ( Jiangsu )\" AND Competition = \"1994 FIFA World Cup qualification\""
            ]
        },
        {
            "id": "task077-c42b24e5a8b44cf4bb1c9e67d80881ec",
            "input": "find the JOB_TITLE of jobs table for which MIN_SALARY greater than 8000",
            "output": [
                "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 8000"
            ]
        },
        {
            "id": "task077-227f78eb4fdf41d9a1d98277c8903fdb",
            "input": "find the Document_ID of Documents table for which Document_Name contains s",
            "output": [
                "SELECT Document_ID FROM Documents WHERE Document_Name LIKE \"s\""
            ]
        },
        {
            "id": "task077-7291cf91ec5843e08b1c18b6fbe827b8",
            "input": "find Fname, Lname of Faculty table whose Rank equals M and Building equals NEB",
            "output": [
                "SELECT Fname , Lname FROM Faculty WHERE Rank = \"M\" AND Building = \"NEB\""
            ]
        },
        {
            "id": "task077-b23f8b9f63fb4d2985947a935e05f44b",
            "input": "find each value of Location_Code in Ref_Locations table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code"
            ]
        },
        {
            "id": "task077-95585bc5f66c42979f28888ab29d03c2",
            "input": "Step 1: find the number of rows of each value of Author in submission table.\nStep 2: find Author in submission table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Author FROM submission GROUP BY Author HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-57e134e36cbd4dccb72b3acdfb0d196b",
            "input": "find the MAX_SALARY, MIN_SALARY of jobs table",
            "output": [
                "SELECT MAX_SALARY , MIN_SALARY FROM jobs"
            ]
        },
        {
            "id": "task077-f0ebfaf4f5a0423f8f500388485ceb82",
            "input": "Step 1: find the Document_ID of Documents table.\nStep 2: For each row in Documents table, find corresponding rows in Ref_Document_Types table and in Documents_with_Expenses table.\nStep 3: find Documents_with_Expenses's Document_ID of the results of step 2 whose Document_Type_Name equals CV.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T3.Document_ID FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T1.Document_ID = T3.Document_ID WHERE T2.Document_Type_Name = \"CV\""
            ]
        },
        {
            "id": "task077-a97dfe11a9f44ab082f163a9d5802295",
            "input": "Step 1: For each row in school table, find the corresponding rows in school_details table.\nStep 2: find Colors of the results of step 1 with largest value of Enrollment",
            "output": [
                "SELECT T2.Colors FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID ORDER BY T1.Enrollment Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d5e7d14ae3734122bee0c2a870f92c9a",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find Pilot of the results of step 1 whose airport's name equals Cargo.\nStep 3: For each row in flight table, find corresponding rows in airport table and in operate_company table.\nStep 4: find operate_company's name of the results of step 3 whose airport's name equals Catering services.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.name = \"Cargo\" INTERSECT SELECT T3.name FROM airport AS T1 JOIN operate_company AS T3 JOIN flight AS T2 ON T1.id = T2.airport_id AND T2.company_id = T3.id WHERE T1.name = \"Catering services\""
            ]
        },
        {
            "id": "task077-72c46f8091e14639bac56d6bfc3ebc38",
            "input": "find the Team of player table with smallest value of Age",
            "output": [
                "SELECT Team FROM player ORDER BY Age Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-56c5cb4f8d8d483cb867a14a013e372a",
            "input": "Step 1: For each row in Problem_Log table, find corresponding rows in Staff table and in Problems table.\nStep 2: find Problems's problem_id of the results of step 1 whose staff_first_name equals Lysanne and log_entry_date greater than Turcotte",
            "output": [
                "SELECT T3.problem_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id JOIN Problems AS T3 ON T1.problem_id = T3.problem_id WHERE T2.staff_first_name = \"Lysanne\" AND T1.log_entry_date > \"Turcotte\""
            ]
        },
        {
            "id": "task077-e7d2a1c13e0246f88f81fb51c3e1f030",
            "input": "Step 1: find the number of rows of each value of Location in school table.\nStep 2: find Location in school table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Location FROM school GROUP BY Location HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-b16a90dc9a9d4cdfbb188bca7284a3f4",
            "input": "Step 1: For each row in Ref_Locations table, find the corresponding rows in Document_Locations table.\nStep 2: find each value of Document_Locations's Location_Code in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.Location_Code , Count ( * ) FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T2.Location_Code"
            ]
        },
        {
            "id": "task077-5d42807600f3444686ab789018f5c024",
            "input": "Step 1: find the name, age of Person table for which job equals Dan.\nStep 2: find the name, age of Person table for which job equals Alice.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT name , age FROM Person WHERE job = \"Dan\" INTERSECT SELECT name , age FROM Person WHERE job = \"Alice\""
            ]
        },
        {
            "id": "task077-157b8ef394ed45b198cb64179f4dd0e6",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find Issue_Date of the results of step 1 whose Famous_Title equals Gorgoroth",
            "output": [
                "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Title = \"Gorgoroth\""
            ]
        },
        {
            "id": "task077-3a19392391f54a569e7986f223b1a4b1",
            "input": "Step 1: find the number of rows of each value of Title in film table.\nStep 2: find Title of film table with largest value in the results of step 1",
            "output": [
                "SELECT Title FROM film GROUP BY Title ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-500128ab39b84e7cbe89d07a1d7a592e",
            "input": "Step 1: For each row in Band table, find the corresponding rows in Vocals table.\nStep 2: find Type of the results of step 1 whose Lastname equals Heilo",
            "output": [
                "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = \"Heilo\""
            ]
        },
        {
            "id": "task077-627e03fb06844a24a4eb10b36752894f",
            "input": "find the friend of PersonFriend table",
            "output": [
                "SELECT friend FROM PersonFriend"
            ]
        },
        {
            "id": "task077-d71588b37cb34bbba467831e30ac94f4",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose JOB_TITLE ends with m",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE \"%m\""
            ]
        },
        {
            "id": "task077-b94f1bfe31644e95abfb3b9eac4b0abe",
            "input": "Step 1: For each row in employees table, find the corresponding rows in locations table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose CITY equals Clara",
            "output": [
                "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = \"Clara\""
            ]
        },
        {
            "id": "task077-848e00f6ddf1405786aaffa146a1386b",
            "input": "Step 1: For each row in Parts table, find the corresponding rows in Part_Faults table.\nStep 2: find the summation of chargeable_amount of each value of Parts's part_id in the results of step 1.\nStep 3: find Parts's part_id, part_fault_id of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-feb30036d06e43fcb9a94d6c5d4be493",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose Year equals 2008 and Regional_Population less than 23019148",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008 AND T1.Regional_Population < 23019148"
            ]
        },
        {
            "id": "task077-77dcc2715aa8403d93dfeb391e125ecc",
            "input": "Step 1: For each row in AssignedTo table, find corresponding rows in Scientists table and in Projects table.\nStep 2: find Scientists's Name, Projects's Name of the results of step 1 with largest value of Hours",
            "output": [
                "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8b6b2b2a3a5f4459a74c0a7c56c88bb5",
            "input": "find without repetition the staff_first_name, staff_last_name of Staff table for which staff_id equals 1",
            "output": [
                "SELECT DISTINCT staff_first_name , staff_last_name FROM Staff WHERE staff_id = 1"
            ]
        },
        {
            "id": "task077-1a846e7ec7c14c52b2ad6af23d0ce7bc",
            "input": "find the FIRST_NAME, LAST_NAME of employees table for which SALARY equals or between 6000 and 24000",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY BETWEEN 24000 AND 6000"
            ]
        },
        {
            "id": "task077-1ba44bd5bc1a476ca349e64bce30d867",
            "input": "find the name of Person table for which gender equals Alice",
            "output": [
                "SELECT name FROM Person WHERE gender = \"Alice\""
            ]
        },
        {
            "id": "task077-b6fcd79d466041c89eb83c05f7b925d9",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose Year equals 2008 or GDP less than 1919.57",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008 OR T1.GDP < 1919.57"
            ]
        },
        {
            "id": "task077-3cbc05c037ca4a97a5a6708cd1205cdd",
            "input": "find the EMPLOYEE_ID, HIRE_DATE of employees table for which SALARY equals 24000",
            "output": [
                "SELECT EMPLOYEE_ID , HIRE_DATE FROM employees WHERE SALARY = 24000"
            ]
        },
        {
            "id": "task077-1f0468fc572d49eabc2264e2841c985f",
            "input": "find the FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID of employees table",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees"
            ]
        },
        {
            "id": "task077-5502ded1ca8f4ffaa673583f9e82b585",
            "input": "find the EMPLOYEE_ID, LAST_NAME of employees table for which FIRST_NAME contains T",
            "output": [
                "SELECT EMPLOYEE_ID , LAST_NAME FROM employees WHERE FIRST_NAME LIKE \"T\""
            ]
        },
        {
            "id": "task077-110a7dab287e4bbf907df72f39ba0424",
            "input": "Step 1: find the number of rows of each value of Location_Code in Ref_Locations table.\nStep 2: find Location_Name, Location_Code of Ref_Locations table with smallest value in the results of step 1",
            "output": [
                "SELECT Location_Name , Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-950f929306794e4bb94c19db0345bef3",
            "input": "find without repetition the Type of Vocals table",
            "output": [
                "SELECT DISTINCT Type FROM Vocals"
            ]
        },
        {
            "id": "task077-9c81d29b522145529f016817dd213b32",
            "input": "Step 1: For each row in city table, find the corresponding rows in hosting_city table.\nStep 2: find City of the results of step 1 whose Year equals 2008",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008"
            ]
        },
        {
            "id": "task077-2b62ec111cc44fa896d3087015eb1f12",
            "input": "find the Lastname of Band table for which Firstname equals Le Pop",
            "output": [
                "SELECT Lastname FROM Band WHERE Firstname = \"Le Pop\""
            ]
        },
        {
            "id": "task077-400a702a6b2f44bba4e0c78e5a23babc",
            "input": "find the name, age, city of Person table with largest value of age",
            "output": [
                "SELECT name , age , city FROM Person ORDER BY age Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-55a5b3e47649468c8c4964037cf572ef",
            "input": "find the number of rows in Person table",
            "output": [
                "SELECT Count ( * ) FROM Person"
            ]
        },
        {
            "id": "task077-9a7ca3f22f994c469be665ef78b63d6b",
            "input": "Step 1: find the Document_Date of Documents table for which Document_Type_Code equals GV.\nStep 2: For each row in Documents table, find the corresponding rows in Documents_with_Expenses table.\nStep 3: find Document_Details of the results of step 2 whose Document_Type_Code equals SF.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = \"GV\" INTERSECT SELECT T2.Document_Details FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = \"SF\""
            ]
        },
        {
            "id": "task077-0aa5d67f9d094e70921542338dc0084a",
            "input": "Step 1: For each row in All_Documents table, find corresponding rows in Document_Locations table and in Documents_to_be_Destroyed table.\nStep 2: find Location_Code, Date_in_Location_From, Actual_Destruction_Date of the results of step 1",
            "output": [
                "SELECT T2.Location_Code , T2.Date_in_Location_From , T3.Actual_Destruction_Date FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T2.Document_ID = T1.Document_ID JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID"
            ]
        },
        {
            "id": "task077-1561daa2dca543d78b3a353c1b9246a5",
            "input": "Step 1: For each row in Minor_in table, find corresponding rows in Student table and in Department table.\nStep 2: find the number of rows of each value of Major in the results of step 1.\nStep 3: find DName of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO GROUP BY T1.Major ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5580750d16a74dd99e847b077f3fd169",
            "input": "find the average Famous_Release_date in artist table whose Artist equals 25 or Artist equals Gorgoroth",
            "output": [
                "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist = \"Gorgoroth\" OR Artist = 25"
            ]
        },
        {
            "id": "task077-34dea64c22474b12837f33a0cc6e88a1",
            "input": "Step 1: For each row in countries table, find the corresponding rows in employees table.\nStep 2: find EMPLOYEE_ID, COUNTRY_NAME of the results of step 1 whose COUNTRY_NAME equals Argentina",
            "output": [
                "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = \"Argentina\""
            ]
        },
        {
            "id": "task077-0347e5475ec24f5dba245163fa091dbf",
            "input": "Step 1: find the number of rows of each value of City in city table.\nStep 2: find GDP, Regional_Population in city table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT GDP , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-148f9fd15a40447ba85b458bbfa0b6c9",
            "input": "Step 1: For each row in Statements table, find corresponding rows in Documents table and in Accounts table.\nStep 2: find Accounts's Statement_ID, Document_Description, Account_Details of the results of step 1",
            "output": [
                "SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID"
            ]
        },
        {
            "id": "task077-1f7fba4c38f94cf4937e2a8d54f6ab5b",
            "input": "Step 1: For each row in countries table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME, COUNTRY_NAME of the results of step 1",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2"
            ]
        },
        {
            "id": "task077-34584261310240099bb3ae18bd93d4ec",
            "input": "find the Document_Name, Document_Date of Documents table for which Document_Description equals Graph Database project",
            "output": [
                "SELECT Document_Name , Document_Date FROM Documents WHERE Document_Description = \"Graph Database project\""
            ]
        },
        {
            "id": "task077-d88974c739b1487cbb76e8e04df15385",
            "input": "Step 1: find the number of rows of each value of bedType in Rooms table.\nStep 2: find bedType of Rooms table with smallest value in the results of step 1",
            "output": [
                "SELECT bedType FROM Rooms GROUP BY bedType ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-099014cbbf534081bec17332dddd74f3",
            "input": "Step 1: For each row in Roles table, find the corresponding rows in Employees table.\nStep 2: find Employee_ID of the results of step 1 whose Role_Name equals Human Resource",
            "output": [
                "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name = \"Human Resource\""
            ]
        },
        {
            "id": "task077-b59a8b7fbab54f398ce33109f57409d4",
            "input": "find the number of different Budget_Type_Code in Documents_with_Expenses table",
            "output": [
                "SELECT Count ( DISTINCT Budget_Type_Code ) FROM Documents_with_Expenses"
            ]
        },
        {
            "id": "task077-c6f33db0cd4a42439f09564020daf34e",
            "input": "find the name, job, city of Person table ordered ascending by name",
            "output": [
                "SELECT name , job , city FROM Person ORDER BY name Asc"
            ]
        },
        {
            "id": "task077-2f86ce2b098e43699d660772a88e45c7",
            "input": "find the number of rows in Club table whose ClubName equals Pen and Paper Gaming and ClubName equals Bootup Baltimore",
            "output": [
                "SELECT Count ( * ) FROM Club WHERE ClubName = \"Bootup Baltimore\" AND ClubName = \"Pen and Paper Gaming\""
            ]
        },
        {
            "id": "task077-46187fdd623a4317a15e9304556d65b3",
            "input": "Step 1: For each row in Ref_Locations table, find the corresponding rows in Document_Locations table.\nStep 2: find the number of rows of each value of Document_Locations's Location_Code in the results of step 1.\nStep 3: find Location_Name, Location_Description of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.Location_Name , T1.Location_Description FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T2.Location_Code ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-ea2fb1b1a88841a09bc4ad38f8758d6b",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, HIRE_DATE, SALARY of the results of step 1 whose JOB_TITLE not equals M",
            "output": [
                "SELECT T2.FIRST_NAME , T2.HIRE_DATE , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = \"M\""
            ]
        },
        {
            "id": "task077-951eb47236134b77a4e34f338308c94b",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find Song of the results of step 1 whose Age equals 32 or Age equals 34",
            "output": [
                "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = 34 OR T1.Age = 32"
            ]
        },
        {
            "id": "task077-dbe8e91f84f44a85bda50c8e8bb61cf9",
            "input": "Step 1: For each row in Skills_Required_To_Fix table, find corresponding rows in Skills table and in Part_Faults table.\nStep 2: find the number of rows of each value of Part_Faults's part_fault_id in the results of step 1.\nStep 3: find Part_Faults's part_fault_id, skill_description, part_id of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T2.part_fault_id , T1.skill_description , T2.part_id FROM Skills AS T1 JOIN Part_Faults AS T2 JOIN Skills_Required_To_Fix AS T3 ON T1.skill_id = T3.skill_id AND T3.part_fault_id = T2.part_fault_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2136515d18a641728ffa010bdb22787f",
            "input": "Step 1: find rows in Documents table whose Document_Type_Code equals BK.\nStep 2: find each value of Document_ID the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Project_ID FROM Documents WHERE Document_Type_Code = \"BK\" GROUP BY Document_ID"
            ]
        },
        {
            "id": "task077-22d35202e56f44e992f40722af3c7fae",
            "input": "Step 1: find the number of rows of each value of Studio in film table.\nStep 2: find Title of film table with largest value in the results of step 1",
            "output": [
                "SELECT Title FROM film GROUP BY Studio ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-84d530704f924afe8522999ec46d5ef4",
            "input": "find each value of School_ID in school table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID"
            ]
        },
        {
            "id": "task077-0a8ccc81358d4772aa29705f29980879",
            "input": "Step 1: find the number of rows of each value of Account_Details in Accounts table.\nStep 2: find Account_Details, Account_ID of Accounts table ordered descending by the results of step 1.\nStep 3: find Account_Details of Accounts table ordered descending by the results of step 3.\nStep 4: only keep the first row of the results of step 4.\nStep 5: show the rows that are in both the results of step 2 and the results of step 5.\nStep 6: only show the first row of the results",
            "output": [
                "SELECT Account_Details , Account_ID FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT 1 INTERSECT SELECT Account_Details FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6218253c3fec4c90840ba18574187613",
            "input": "find the number of rows in Student table whose Fname equals Linda and LName equals Smith",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Fname = \"Linda\" AND LName = \"Smith\""
            ]
        },
        {
            "id": "task077-77d4b02455f649ddbd1cceb921f07249",
            "input": "find each value of Destruction_Authorised_by_Employee_ID in Documents_to_be_Destroyed table along with the number of Document_ID of the corresponding rows to each value",
            "output": [
                "SELECT Destruction_Authorised_by_Employee_ID , Count ( DISTINCT Document_ID ) FROM Documents_to_be_Destroyed GROUP BY Destruction_Authorised_by_Employee_ID"
            ]
        },
        {
            "id": "task077-6fb743df41b14f12b4b42db9f9d28964",
            "input": "Step 1: For each row in Problems table, find the corresponding rows in Problem_Log table.\nStep 2: find problem_log_id, problem_description of the results of step 1",
            "output": [
                "SELECT T1.problem_log_id , T2.problem_description FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id"
            ]
        },
        {
            "id": "task077-051ffa7e21714db1bb1ef9faf4b6b751",
            "input": "find the Music_Festival of music_festival table for which Category equals Best Song",
            "output": [
                "SELECT Music_Festival FROM music_festival WHERE Category = \"Best Song\""
            ]
        },
        {
            "id": "task077-55ebec4fd3f54cc1a22fda7a21804ead",
            "input": "Step 1: For each row in operate_company table, find the corresponding rows in flight table.\nStep 2: find without repetition Type of the results of step 1 whose Velocity less than or equals 200",
            "output": [
                "SELECT DISTINCT T1.Type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id WHERE T2.Velocity < = 200"
            ]
        },
        {
            "id": "task077-dcd889fc30894729ad22f93f66f5e179",
            "input": "Step 1: For each row in Projects table, find the corresponding rows in Documents table.\nStep 2: find Document_Description, Document_Name of the results of step 1 whose Project_Details equals Private Project",
            "output": [
                "SELECT T2.Document_Description , T2.Document_Name FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID WHERE T1.Project_Details = \"Private Project\""
            ]
        },
        {
            "id": "task077-2f6d1e74da204881b641d8c76c7067b8",
            "input": "find the maximum Age and the minimum Age in artist table",
            "output": [
                "SELECT Max ( Age ) , Min ( Age ) FROM artist"
            ]
        },
        {
            "id": "task077-76e48d8cfac24fa093696a3416d3c863",
            "input": "find the roomName of Rooms table ordered descending by basePrice",
            "output": [
                "SELECT roomName FROM Rooms ORDER BY basePrice Desc"
            ]
        },
        {
            "id": "task077-771c93e7e2224daeb288c21116a9bb40",
            "input": "Step 1: For each row in Tracklists table, find corresponding rows in Songs table and in Albums table.\nStep 2: find Songs's Title of the results of step 1 whose Year less than A Kiss Before You Go: Live in Hamburg",
            "output": [
                "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year < \"A Kiss Before You Go: Live in Hamburg\""
            ]
        },
        {
            "id": "task077-556d4e537c5f496680d09c0e6cd47175",
            "input": "Step 1: For each row in Engineer_Skills table, find corresponding rows in Skills table and in Maintenance_Engineers table.\nStep 2: find first_name, last_name, skill_description of the results of step 1",
            "output": [
                "SELECT T2.first_name , T2.last_name , T1.skill_description FROM Skills AS T1 JOIN Maintenance_Engineers AS T2 JOIN Engineer_Skills AS T3 ON T1.skill_id = T3.skill_id AND T3.engineer_id = T2.engineer_id"
            ]
        },
        {
            "id": "task077-8ee8ffd0f0b546f998bd14b43f569201",
            "input": "Step 1: For each row in Product table, find the corresponding rows in Problems table.\nStep 2: find the number of rows of each value of Problems's product_id in the results of step 1.\nStep 3: find product_name of step 1 results ordered descending by the results of step 2.\nStep 4: only show the first 3 rows of the results",
            "output": [
                "SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-bf8ae2d5ada7490b9250c87ea283df2e",
            "input": "Step 1: find the number of rows of each value of DEPARTMENT_ID in employees table.\nStep 2: find DEPARTMENT_ID in employees table whose corresponding value in step 1 is greater than 4",
            "output": [
                "SELECT DEPARTMENT_ID FROM employees GROUP BY DEPARTMENT_ID HAVING Count ( * ) > 4"
            ]
        },
        {
            "id": "task077-9c240267f8634a43bf4a15896a9aef22",
            "input": "Step 1: find the minimum year in PersonFriend table.\nStep 2: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 3: find PersonFriend's name in the results of step 2 whose age equals the results of step 1",
            "output": [
                "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )"
            ]
        },
        {
            "id": "task077-7227d1f8df334291948d1b7a28d8a3cf",
            "input": "Step 1: find the EMPLOYEE_ID of job_history table.\nStep 2: find the average SALARY in employees table whose employees's EMPLOYEE_ID not one of the results of step 1",
            "output": [
                "SELECT Avg ( T1.SALARY ) FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )"
            ]
        },
        {
            "id": "task077-bc54ad9a99374f9e87be27c8b9647bfd",
            "input": "Step 1: For each row in departments table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose DEPARTMENT_NAME equals 70 or DEPARTMENT_NAME equals 90",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = 90 OR T1.DEPARTMENT_NAME = 70"
            ]
        },
        {
            "id": "task077-66f9fcb5153b4f14bbb753d403a60358",
            "input": "find the number of rows in Student table whose Fname equals Eric and LName equals Tai",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Fname = \"Eric\" AND LName = \"Tai\""
            ]
        },
        {
            "id": "task077-e5328977927548c695a90430bff274cf",
            "input": "find the EMPLOYEE_ID, LAST_NAME of employees table with largest value of SALARY",
            "output": [
                "SELECT EMPLOYEE_ID , LAST_NAME FROM employees ORDER BY SALARY Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-58287c45d9024418b3d592de7ac036cd",
            "input": "Step 1: For each row in Minor_in table, find corresponding rows in Student table and in Department table.\nStep 2: find DName of the results of step 1 whose Major equals 600.\nStep 3: find DName of the results of step 1 whose Major equals 600.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T1.Major = 600 EXCEPT SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T1.Major = 600"
            ]
        },
        {
            "id": "task077-6d8f8c25fde24fb28e0f01e1058ba4c1",
            "input": "Step 1: find the number of rows of each value of decor in Rooms table.\nStep 2: find decor of Rooms table with smallest value in the results of step 1",
            "output": [
                "SELECT decor FROM Rooms GROUP BY decor ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-8f41f734d7184699bccacd83217fec15",
            "input": "Step 1: For each row in employees table, find the corresponding rows in locations table.\nStep 2: find FIRST_NAME, LAST_NAME, HIRE_DATE of the results of step 1 whose CITY not equals Clara",
            "output": [
                "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY ! = \"Clara\""
            ]
        },
        {
            "id": "task077-f4264ee240224c41964c1c7378c53ba5",
            "input": "Step 1: find the number of rows of each value of product_name in Product table.\nStep 2: find product_details, product_name of Product table with largest value in the results of step 1",
            "output": [
                "SELECT product_details , product_name FROM Product GROUP BY product_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7111281e2902425f915c48ab5669fa0f",
            "input": "Step 1: find the number of rows of each value of id in architect table.\nStep 2: find name, gender, gender in architect table whose corresponding value in step 1 is greater than or equals 1",
            "output": [
                "SELECT name , gender , gender FROM architect GROUP BY id HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-02bf7a6824fc42c4a5ea4b8c91640e39",
            "input": "find the Studio of film table for which Director equals Walter Hill",
            "output": [
                "SELECT Studio FROM film WHERE Director = \"Walter Hill\""
            ]
        },
        {
            "id": "task077-c185f69a65124194b172ba60dbbaf355",
            "input": "Step 1: find DName of Department table whose Division equals AS and Building equals Mergenthaler.\nStep 2: find DName of Department table whose Division equals EN and Building equals NEB.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT DName FROM Department WHERE Division = \"AS\" AND Building = \"Mergenthaler\" INTERSECT SELECT DName FROM Department WHERE Division = \"EN\" AND Building = \"NEB\""
            ]
        },
        {
            "id": "task077-8ffe0cddbdfe46b6bccd0de002a6dc15",
            "input": "Step 1: For each row in departments table, find the corresponding rows in job_history table.\nStep 2: find the number of different EMPLOYEE_ID of each value of job_history's DEPARTMENT_ID in the results of step 1.\nStep 3: find without repetition departments's DEPARTMENT_ID in the results of step 1 whose corresponding value in step 2 is greater than or equals 4",
            "output": [
                "SELECT DISTINCT T1.DEPARTMENT_ID FROM departments AS T1 JOIN job_history AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( DISTINCT T2.EMPLOYEE_ID ) > = 4"
            ]
        },
        {
            "id": "task077-e1f2972594e341f0acce2f2e62a4a0b4",
            "input": "find City of city table whose Regional_Population greater than 5000000 or Regional_Population greater than 10000000",
            "output": [
                "SELECT City FROM city WHERE Regional_Population > 10000000 OR Regional_Population > 5000000"
            ]
        },
        {
            "id": "task077-81aa4f9f439b4eeba7cc43653871d3df",
            "input": "Step 1: For each row in Roles table, find the corresponding rows in Employees table.\nStep 2: find Role_Name, Employees's Role_Code, Date_of_Birth of the results of step 1 whose Employee_Name equals Armani",
            "output": [
                "SELECT T1.Role_Name , T2.Role_Code , T2.Date_of_Birth FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T2.Employee_Name = \"Armani\""
            ]
        },
        {
            "id": "task077-081749129f444aa994c500bdd78c99a6",
            "input": "Step 1: For each row in Band table, find the corresponding rows in Vocals table.\nStep 2: find Type of the results of step 1 whose Firstname equals Solveig",
            "output": [
                "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Firstname = \"Solveig\""
            ]
        },
        {
            "id": "task077-5e14ed0c462e4388b783b5f31d6e1325",
            "input": "Step 1: find the staff_name, staff_id of Staff table.\nStep 2: find the staff_name, staff_id of Staff table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT staff_name , staff_id FROM Staff EXCEPT SELECT staff_name , staff_id FROM Staff"
            ]
        },
        {
            "id": "task077-0b7c2699b3b74d0b8099f11a4956fc59",
            "input": "Step 1: find the average MIN_SALARY of each value of JOB_ID in jobs table.\nStep 2: find JOB_ID in jobs table whose corresponding value in step 1 is greater than 8000",
            "output": [
                "SELECT JOB_ID FROM jobs GROUP BY JOB_ID HAVING Avg ( MIN_SALARY ) > 8000"
            ]
        },
        {
            "id": "task077-3294673aec094dec813bddf41b9fe345",
            "input": "find without repetition the Fname of Student table for which LName contains a",
            "output": [
                "SELECT DISTINCT Fname FROM Student WHERE LName LIKE \"a\""
            ]
        },
        {
            "id": "task077-3afa7ac598054169b2a82ffd6a91fe03",
            "input": "find without repetition the skill_description, skill_description of Skills table",
            "output": [
                "SELECT DISTINCT skill_description , skill_description FROM Skills"
            ]
        },
        {
            "id": "task077-617b5e26a10d4fbc9d30fdb02823cb25",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MAX_SALARY equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MAX_SALARY = 12000"
            ]
        },
        {
            "id": "task077-a0d44a01e07c4864a27747edd6f45a6d",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find EMPLOYEE_ID, JOB_TITLE of the results of step 1 whose SALARY equals 80",
            "output": [
                "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = 80"
            ]
        },
        {
            "id": "task077-7a546a6179914c4ebcb835ef95f77107",
            "input": "Step 1: find the decor of Rooms table for which decor equals modern.\nStep 2: find the decor of Rooms table for which bedType equals Recluse and defiance.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT decor FROM Rooms WHERE decor = \"modern\" INTERSECT SELECT decor FROM Rooms WHERE bedType = \"Recluse and defiance\""
            ]
        },
        {
            "id": "task077-76288f4380074b1e9407601c771ba76e",
            "input": "find the average Age in Student table whose LName equals Smith",
            "output": [
                "SELECT Avg ( Age ) FROM Student WHERE LName = \"Smith\""
            ]
        },
        {
            "id": "task077-7f976fdaafb948289ba567f872af0564",
            "input": "find the name of Person table for which age greater than engineer ordered ascending by name",
            "output": [
                "SELECT name FROM Person WHERE age > \"engineer\" ORDER BY name Asc"
            ]
        },
        {
            "id": "task077-79d5fc93bcfe4a429cc0d29122fb8d3f",
            "input": "find the FIRST_NAME, LAST_NAME of employees table for which COMMISSION_PCT equals null",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = \"null\""
            ]
        },
        {
            "id": "task077-a2e883d1d2d049c6962c76adbf103738",
            "input": "Step 1: find the Famous_Title of artist table.\nStep 2: For each row in artist table, find the corresponding rows in volume table.\nStep 3: find Famous_Title of the results of step 2 whose Weeks_on_Top less than 2.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Famous_Title FROM artist AS T1 EXCEPT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2"
            ]
        },
        {
            "id": "task077-9f506ada3a344eddb60a15db6fce1165",
            "input": "Step 1: find the number of rows of each value of route_id in Delivery_Routes table.\nStep 2: find route_name of Delivery_Routes table with largest value in the results of step 1",
            "output": [
                "SELECT route_name FROM Delivery_Routes GROUP BY route_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0fc591f5d18a426b9f5b23553660888c",
            "input": "find the Author of submission table with smallest value of Scores",
            "output": [
                "SELECT Author FROM submission ORDER BY Scores Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-cc1f8782e7554cd889886270b75db8e1",
            "input": "find the job of Person table with smallest value of age",
            "output": [
                "SELECT job FROM Person ORDER BY age Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-e15557d08f3c4bb6b0c0161c7c4cdfdb",
            "input": "Step 1: For each row in Ref_Document_Types table, find the corresponding rows in Documents table.\nStep 2: find Ref_Document_Types's Document_Type_Code, Document_Type_Name, Document_Type_Description of the results of step 1 whose Document_Name equals Noel CV or Document_Name equals King Book",
            "output": [
                "SELECT T1.Document_Type_Code , T1.Document_Type_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = \"King Book\" OR T2.Document_Name = \"Noel CV\""
            ]
        },
        {
            "id": "task077-e92ff0cfbe11495f9b7f999416c4f08f",
            "input": "Step 1: For each row in Ref_Document_Types table, find the corresponding rows in Documents table.\nStep 2: find Document_Name, Document_Type_Description, Document_Date of the results of step 1",
            "output": [
                "SELECT T2.Document_Name , T1.Document_Type_Description , T2.Document_Date FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code"
            ]
        },
        {
            "id": "task077-ce1638da2e17438788d9206616809acb",
            "input": "Step 1: find without repetition the SongId of Tracklists table.\nStep 2: find without repetition the Title of Songs table whose Songs's SongId not one of the results of step 1",
            "output": [
                "SELECT DISTINCT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT DISTINCT T2.SongId FROM Tracklists AS T2 )"
            ]
        },
        {
            "id": "task077-cca942e35991489b9b851545da040827",
            "input": "find the Employee_ID of Employees table",
            "output": [
                "SELECT Employee_ID FROM Employees"
            ]
        },
        {
            "id": "task077-2f4700b0a7e34b90b974e785e7bf6161",
            "input": "find the age of Person table for which name equals doctor",
            "output": [
                "SELECT age FROM Person WHERE name = \"doctor\""
            ]
        },
        {
            "id": "task077-42d3a84602cb446fbe7b372c40f0bb13",
            "input": "find the number of rows in Engineer_Visits table whose fault_status equals Waiting",
            "output": [
                "SELECT Count ( * ) FROM Engineer_Visits WHERE fault_status = \"Waiting\""
            ]
        },
        {
            "id": "task077-afab32cb88c1491daebe5962c17ffc3f",
            "input": "Step 1: find the average age in Person table.\nStep 2: find the name, age of Person table whose age greater than the results of step 1",
            "output": [
                "SELECT name , age FROM Person WHERE age > ( SELECT Avg ( age ) FROM Person )"
            ]
        },
        {
            "id": "task077-b6e4ad0fcbbb499d90b71538f18d8da5",
            "input": "find the name of Person table for which job equals doctor",
            "output": [
                "SELECT name FROM Person WHERE job = \"doctor\""
            ]
        },
        {
            "id": "task077-e98c3000267b4ef394fa777679ae7a12",
            "input": "Step 1: For each row in volume table, find the corresponding rows in music_festival table.\nStep 2: find Song of the results of step 1 whose Category equals Nominated",
            "output": [
                "SELECT T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume WHERE T2.Category = \"Nominated\""
            ]
        },
        {
            "id": "task077-24d56d4b57ab4209845d25303786a61b",
            "input": "find the number of different Document_Type_Code in All_Documents table",
            "output": [
                "SELECT Count ( DISTINCT Document_Type_Code ) FROM All_Documents"
            ]
        },
        {
            "id": "task077-b52e2b91287e42f099394196b3e494f0",
            "input": "Step 1: For each row in Minor_in table, find corresponding rows in Student table and in Department table.\nStep 2: find Fname, LName of the results of step 1 whose DName equals 140",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T2.DName = 140"
            ]
        },
        {
            "id": "task077-f3b4d35f83c54795bd44a5f2a53d8043",
            "input": "find FIRST_NAME, LAST_NAME of employees table whose JOB_ID equals AD_PRES and SALARY greater than 163",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE JOB_ID = \"AD_PRES\" AND SALARY > 163"
            ]
        },
        {
            "id": "task077-bcef7a8a943441169452e7a5bb56a386",
            "input": "find each value of state_province_county in Addresses table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT state_province_county , Count ( * ) FROM Addresses GROUP BY state_province_county"
            ]
        },
        {
            "id": "task077-18d676b500ed4be2899b6511577cb63b",
            "input": "find the name, age of Person table ordered ascending by age",
            "output": [
                "SELECT name , age FROM Person ORDER BY age Asc"
            ]
        },
        {
            "id": "task077-fee76f6c98d84122b54e1b2db676d9ec",
            "input": "Step 1: For each row in Rooms table, find the corresponding rows in Reservations table.\nStep 2: find roomName of the results of step 1 whose FirstName equals ROY",
            "output": [
                "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = \"ROY\""
            ]
        },
        {
            "id": "task077-09fa47f21a4247338c502c94d1bc211e",
            "input": "Step 1: find the number of rows of each value of Project_ID in Projects table.\nStep 2: find Project_ID, Project_Details in Projects table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-e4a6828f86ae459286a0211f4b1cb7a5",
            "input": "Step 1: For each row in Enrolled_in table, find corresponding rows in Student table and in Gradeconversion table.\nStep 2: find without repetition Fname of the results of step 1 whose Major equals 3.8 or gradepoint greater than 4",
            "output": [
                "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID JOIN Gradeconversion AS T3 ON T2.Grade = T3.lettergrade WHERE T1.Major = 3.8 OR T3.gradepoint > 4"
            ]
        },
        {
            "id": "task077-fa245eb25fd04dbfa430c277061c82b1",
            "input": "find the number of rows in flight table whose destination equals Los Angeles",
            "output": [
                "SELECT Count ( * ) FROM flight WHERE destination = \"Los Angeles\""
            ]
        },
        {
            "id": "task077-aa5d23f4b03841058160420f37ac15d9",
            "input": "Step 1: find the distance of flight table ordered ascending by distance.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT distance FROM flight ORDER BY distance Asc LIMIT 3"
            ]
        },
        {
            "id": "task077-4c9b5146d82641819ef6a6153ffc4a7d",
            "input": "find the number of different Comptroller in party table",
            "output": [
                "SELECT Count ( DISTINCT Comptroller ) FROM party"
            ]
        },
        {
            "id": "task077-123605885ed947f1842b0c44c4e594ee",
            "input": "Step 1: For each row in team table, find the corresponding rows in match_season table.\nStep 2: find without repetition Position of the results of step 1 whose Name equals UCLA or Name equals Duke",
            "output": [
                "SELECT DISTINCT T2.Position FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team WHERE T1.Name = \"Duke\" OR T1.Name = \"UCLA\""
            ]
        },
        {
            "id": "task077-4428cca0ef8844b2a9d43e7cde1d60d4",
            "input": "Step 1: find the Name of Patient table.\nStep 2: find the Name of Patient table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM Patient EXCEPT SELECT Name FROM Patient"
            ]
        },
        {
            "id": "task077-a361db86efa44d11af62892e8717cc3d",
            "input": "Step 1: find the average total_value_purchased of each value of product_id in Product_Suppliers table.\nStep 2: find supplier_id in Product_Suppliers table whose corresponding value in step 1 is greater than 50000",
            "output": [
                "SELECT supplier_id FROM Product_Suppliers GROUP BY product_id HAVING Avg ( total_value_purchased ) > 50000"
            ]
        },
        {
            "id": "task077-64e2625586d44a28b8e7b2d38c3c9031",
            "input": "find School_name of School table whose Enrollment greater than 10 or Enrollment less than 495",
            "output": [
                "SELECT School_name FROM School WHERE Enrollment > 495 OR Enrollment < 10"
            ]
        },
        {
            "id": "task077-b725d8526bdb49ee8c2584398b32e8e4",
            "input": "Step 1: For each row in wrestler table, find the corresponding rows in Elimination table.\nStep 2: find Team of the results of step 1 whose Name equals Orton.\nStep 3: find Team of the results of step 1 whose Name equals Benjamin.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = \"Orton\" INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = \"Benjamin\""
            ]
        },
        {
            "id": "task077-3322219559db4dccb09af4d05b98ae90",
            "input": "Step 1: find the number of rows of each value of country in country table.\nStep 2: find country in country table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT country FROM country GROUP BY country HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-07e14e7340e54730a1fdab62489b2efa",
            "input": "find the number of rows in Player_Attributes table",
            "output": [
                "SELECT Count ( * ) FROM Player_Attributes"
            ]
        },
        {
            "id": "task077-6cb4f8d22ab1460b9d12ae07c9a90233",
            "input": "Step 1: find the number of rows of each value of dept_store_id in Departments table.\nStep 2: find dept_store_id of Departments table ordered descending by the results of step 1.\nStep 3: only show the first 2 rows of the results",
            "output": [
                "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Desc LIMIT 2"
            ]
        },
        {
            "id": "task077-db6836b4580349febf1f9ce9351a34a7",
            "input": "find the Population of city table for which Status not equals Village",
            "output": [
                "SELECT Population FROM city WHERE Status ! = \"Village\""
            ]
        },
        {
            "id": "task077-2d84707011f94f92a602f01263c91903",
            "input": "find the eid, name of employee table",
            "output": [
                "SELECT eid , name FROM employee"
            ]
        },
        {
            "id": "task077-7b6b64303abf4e069c521d77ffa3d67f",
            "input": "Step 1: find the number of rows of each value of product_id in Product_Suppliers table.\nStep 2: find product_id in Product_Suppliers table whose corresponding value in step 1 is greater than 80000",
            "output": [
                "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > 80000"
            ]
        },
        {
            "id": "task077-f3fa41fdf6d142029fa1cea700d4a5b5",
            "input": "find the number of different Official_native_language in country table",
            "output": [
                "SELECT Count ( DISTINCT Official_native_language ) FROM country"
            ]
        },
        {
            "id": "task077-9fd9055b1abc4996a4069a9ce510ec65",
            "input": "find the order_id, customer_id, customer_id of Customer_Orders table for which order_status_code equals Cancelled ordered ascending by order_date",
            "output": [
                "SELECT order_id , customer_id , customer_id FROM Customer_Orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date Asc"
            ]
        },
        {
            "id": "task077-78ecaac1d40147008821c91576c45fb9",
            "input": "find the number of rows in follows table",
            "output": [
                "SELECT Count ( * ) FROM follows"
            ]
        },
        {
            "id": "task077-982277daf6ec49c68ae9e5587896519c",
            "input": "find each value of Name in Physician table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Name , Count ( * ) FROM Physician GROUP BY Name"
            ]
        },
        {
            "id": "task077-249c022abf1c4769aa25f49059cec679",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find Physician's Name of the results of step 1 whose Nurse's Position equals senior",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Position = \"senior\""
            ]
        },
        {
            "id": "task077-8e23456b7ad84755a994fd87fbac5fec",
            "input": "find the Name of wrestler table for which Days_held equals 100",
            "output": [
                "SELECT Name FROM wrestler WHERE Days_held = 100"
            ]
        },
        {
            "id": "task077-45834f5fcc3844c1b19772b6bb98ccc7",
            "input": "find without repetition the BlockCode of Room table",
            "output": [
                "SELECT DISTINCT BlockCode FROM Room"
            ]
        },
        {
            "id": "task077-5adf0334d20c4a958466e1ef9550687a",
            "input": "Step 1: find the Name of channel table.\nStep 2: find the Name of channel table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM channel EXCEPT SELECT Name FROM channel"
            ]
        },
        {
            "id": "task077-6cdf06276c5a4ddaa51ab2bedb49a2fd",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find Nurse's Name of the results of step 1 whose Physician's Name equals John Dorian",
            "output": [
                "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T1.Name = \"John Dorian\""
            ]
        },
        {
            "id": "task077-7c7a7e525e9e462ba57a8ac041f460fb",
            "input": "find the product_id, product_name of Products table for which product_price equals or between 600 and 900",
            "output": [
                "SELECT product_id , product_name FROM Products WHERE product_price BETWEEN 900 AND 600"
            ]
        },
        {
            "id": "task077-906d7ea3439a4a23b53ee13626b53a9d",
            "input": "find the average Num_Employees in department table whose Ranking less than 10 or Ranking less than 15",
            "output": [
                "SELECT Avg ( Num_Employees ) FROM department WHERE Ranking < 15 OR Ranking < 10"
            ]
        },
        {
            "id": "task077-efb5195a485f40629269d32d9a5523ea",
            "input": "Step 1: find the name of employee table.\nStep 2: find the name of employee table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT name FROM employee EXCEPT SELECT name FROM employee"
            ]
        },
        {
            "id": "task077-d5fae4043b564f318f5fbe5bf1e0c22e",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find the number of rows of each value of Physician's Position in the results of step 1.\nStep 3: find Nurse's Name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7ff229758de9409faede3d14eb814444",
            "input": "Step 1: find the number of rows of each value of id in mountain table.\nStep 2: find id, name in mountain table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT id , name FROM mountain GROUP BY id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-005e1580d6ca45c88ec420aacb6b6cfb",
            "input": "find the staff_name, staff_gender of Staff table for which staff_name equals 2016%",
            "output": [
                "SELECT staff_name , staff_gender FROM Staff WHERE staff_name = \"2016%\""
            ]
        },
        {
            "id": "task077-cea6cd644be24b39992abd71ce10e75a",
            "input": "Step 1: find the number of rows of each value of product_id in Product_Suppliers table.\nStep 2: find product_id of Product_Suppliers table with largest value in the results of step 1",
            "output": [
                "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e112c43b673241bd80fc471b054fb7da",
            "input": "find the Name of building table for which Height_feet equals or between 200 and 20",
            "output": [
                "SELECT Name FROM building WHERE Height_feet BETWEEN 20 AND 200"
            ]
        },
        {
            "id": "task077-1a719c294b0549688f9b4f1c81b5b461",
            "input": "Step 1: For each row in School table, find the corresponding rows in endowment table.\nStep 2: find School_name of the results of step 1 whose amount greater than 8.5",
            "output": [
                "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > 8.5"
            ]
        },
        {
            "id": "task077-1946bdfdfa9146ccb62d0ad08b1ae7c7",
            "input": "Step 1: For each row in county table, find the corresponding rows in election table.\nStep 2: find the number of different Committee in the results of step 1 whose Population greater than 50000",
            "output": [
                "SELECT Count ( DISTINCT T2.Committee ) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > 50000"
            ]
        },
        {
            "id": "task077-1c04bd2211f14a16b2741075bfd38995",
            "input": "Step 1: find the number of rows of each value of customer_name in Customers table.\nStep 2: find customer_name in Customers table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-52ab842115444143bdfcc57187a8cb71",
            "input": "find without repetition the Status of city table ordered ascending by Area_km_2",
            "output": [
                "SELECT DISTINCT Status FROM city ORDER BY Area_km_2 Asc"
            ]
        },
        {
            "id": "task077-ae8af0ecf1064038938fd0ae79750a42",
            "input": "find the Governor, Party of party table",
            "output": [
                "SELECT Governor , Party FROM party"
            ]
        },
        {
            "id": "task077-fb76131fb6174522bcfc05b0dbae6e58",
            "input": "Step 1: For each row in party table, find the corresponding rows in election table.\nStep 2: find Comptroller of the results of step 1 whose Committee equals 1 or Committee equals 2",
            "output": [
                "SELECT T1.Comptroller FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = 2 OR T2.Committee = 1"
            ]
        },
        {
            "id": "task077-a287c39a0b7f4857adef7a297d762aeb",
            "input": "find the text of tweets table for which text equals intern",
            "output": [
                "SELECT text FROM tweets WHERE text = \"intern\""
            ]
        },
        {
            "id": "task077-6120eb4cd095441d828dab62e23be570",
            "input": "find without repetition the Name of Physician table",
            "output": [
                "SELECT DISTINCT Name FROM Physician"
            ]
        },
        {
            "id": "task077-c72d62c850f440999f7be57faf660fdb",
            "input": "Step 1: For each row in actor table, find the corresponding rows in film_actor table.\nStep 2: find the number of rows of each value of film_actor's actor_id in the results of step 1.\nStep 3: find first_name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.first_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f8df31628d3f4578938c48269a17d670",
            "input": "find the first_name, last_name of customer table with smallest value of first_name",
            "output": [
                "SELECT first_name , last_name FROM customer ORDER BY first_name Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-661ba7618b6f4d2fbba245813851b9ad",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find the number of rows of each value of Physician's Position in the results of step 1.\nStep 3: find Nurse's Name, Physician's Position of the results of step 1 with smallest value in the results of step 2",
            "output": [
                "SELECT T2.Name , T1.Position FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-40ed927575714642a5f795f7426ca9b3",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Patient table.\nStep 2: find Patient's Name of the results of step 1 whose Physician's Name equals Surgery.\nStep 3: find Patient's Name of the results of step 1 whose Physician's Name equals Psychiatry.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = \"Surgery\" INTERSECT SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = \"Psychiatry\""
            ]
        },
        {
            "id": "task077-58bcb6697c974c0ab107d210d23a815f",
            "input": "Step 1: find the number of rows of each value of name in aircraft table.\nStep 2: find name in aircraft table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-e3851a32877c4140b5879e45d6df2d28",
            "input": "find the average price in flight table whose destination equals Los Angeles",
            "output": [
                "SELECT Avg ( price ) FROM flight WHERE destination = \"Los Angeles\""
            ]
        },
        {
            "id": "task077-46678668234145189115388ef9054274",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Department table.\nStep 2: find Physician's Name of the results of step 1 whose Department's Name equals Surgery or Department's Name equals Psychiatry",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = \"Psychiatry\" OR T2.Name = \"Surgery\""
            ]
        },
        {
            "id": "task077-e0c8693d53804b3f81a6a18394e094a9",
            "input": "Step 1: For each row in Player table, find the corresponding rows in Player_Attributes table.\nStep 2: find player_name of the results of step 1 whose overall_rating greater than 80",
            "output": [
                "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > 80"
            ]
        },
        {
            "id": "task077-c3898744759849febf16822f0efa19c3",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find Physician's Name of the results of step 1 whose Nurse's Name equals Thesisin",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Name = \"Thesisin\""
            ]
        },
        {
            "id": "task077-b6e49d79162e4241acb4696a496a64d5",
            "input": "find each value of Institution in Institution table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Institution , Count ( * ) FROM Institution GROUP BY Institution"
            ]
        },
        {
            "id": "task077-d497306823284e7eaadb3d6244efd0d3",
            "input": "Step 1: find the number of rows of each value of catalog_id in Catalogs table.\nStep 2: find catalog_name of Catalogs table with largest value in the results of step 1",
            "output": [
                "SELECT catalog_name FROM Catalogs GROUP BY catalog_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-34efc6ae157642e49f07ceaa87967ccf",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find Physician's Name of the results of step 1 ordered descending by Nurse's Name.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4f90e4d3cfe74bc087177cc0c4987b97",
            "input": "find each value of Party in party table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Party , Count ( * ) FROM party GROUP BY Party"
            ]
        },
        {
            "id": "task077-87b9e5aa3fd14bb4ac340524f9c00b7c",
            "input": "find the number of rows in channel table whose Name equals Night",
            "output": [
                "SELECT Count ( * ) FROM channel WHERE Name = \"Night\""
            ]
        },
        {
            "id": "task077-abbb1c86315c42b1b8e361b0d7acf633",
            "input": "find each value of County_name in county table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT County_name , Count ( * ) FROM county GROUP BY County_name"
            ]
        },
        {
            "id": "task077-c2fe168956174aa793edfa9005c67c0f",
            "input": "Step 1: For each row in wrestler table, find the corresponding rows in Elimination table.\nStep 2: find the number of rows of each value of Wrestler_ID in the results of step 1.\nStep 3: find Event of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f0a6fae7d9ec435cab5088b30d6e1e8e",
            "input": "find the name of club table with largest value of Start_year",
            "output": [
                "SELECT name FROM club ORDER BY Start_year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2a473184e5814e9485194032bb80c50a",
            "input": "Step 1: For each row in wrestler table, find the corresponding rows in Elimination table.\nStep 2: find the number of rows of each value of Wrestler_ID in the results of step 1.\nStep 3: find Name of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-a29851eb32e9400e9d8ac098ea010bcb",
            "input": "Step 1: For each row in program table, find the corresponding rows in broadcast table.\nStep 2: find program's Owner of the results of step 1 whose Time_of_day equals Morning.\nStep 3: For each row in channel table, find the corresponding rows in broadcast table.\nStep 4: find channel's Owner of the results of step 3 whose Time_of_day equals Night.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = \"Morning\" INTERSECT SELECT T3.Owner FROM channel AS T3 JOIN broadcast AS T2 ON T3.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = \"Night\""
            ]
        },
        {
            "id": "task077-64a2e5abdf8e41f0808416c4fc04a307",
            "input": "Step 1: For each row in aircraft table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of destination in the results of step 1.\nStep 3: find name of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-9b22c67957964a08abb9ff3dccd7232f",
            "input": "find the attribute_name, attribute_id of Attribute_Definitions table for which attribute_data_type equals 0",
            "output": [
                "SELECT attribute_name , attribute_id FROM Attribute_Definitions WHERE attribute_data_type = 0"
            ]
        },
        {
            "id": "task077-ae89a901f793485ead96a3b0c2bc17f7",
            "input": "find the rows of county table",
            "output": [
                "SELECT * FROM county"
            ]
        },
        {
            "id": "task077-b330d688fe5644f28450f8d444172a4b",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of Physician in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-bbb71e091f55429596ad6b1110979dcf",
            "input": "Step 1: For each row in team table, find the corresponding rows in match_season table.\nStep 2: find the number of rows of each value of College in the results of step 1.\nStep 3: find Name in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-1a4302d01ae2463d84f67c25b5e2b39c",
            "input": "find the number of rows in Appointment table whose ExaminationRoom equals 112",
            "output": [
                "SELECT Count ( * ) FROM Appointment WHERE ExaminationRoom = 112"
            ]
        },
        {
            "id": "task077-9334d0d897c24a47be74cbe55efc104b",
            "input": "Step 1: find the maximum followers in user_profiles table whose name equals Tyler Swift.\nStep 2: find the name of user_profiles table whose followers greater than the results of step 1",
            "output": [
                "SELECT name FROM user_profiles WHERE followers > ( SELECT Max ( followers ) FROM user_profiles WHERE name = \"Tyler Swift\" )"
            ]
        },
        {
            "id": "task077-770a944daa3e4b00b412e0a53e278b49",
            "input": "find the name of category table",
            "output": [
                "SELECT name FROM category"
            ]
        },
        {
            "id": "task077-8e543b16d5ee4757862aeb9c1758a412",
            "input": "Step 1: For each row in Patient table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of Physician in the results of step 1.\nStep 3: find Name, Phone in the results of step 1 whose corresponding value in step 2 is greater than 1",
            "output": [
                "SELECT T1.Name , T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient GROUP BY T2.Physician HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-a70ebf1677cc4dd3a22f29441f96ea2f",
            "input": "Step 1: For each row in aircraft table, find the corresponding rows in flight table.\nStep 2: find arrival_date, departure_date of the results of step 1 whose name equals Los Angeles",
            "output": [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Los Angeles\""
            ]
        },
        {
            "id": "task077-35e0f392a1c64e2c84030316ca6afecb",
            "input": "Step 1: find the Medication of Prescribes table.\nStep 2: find the number of rows in Patient table whose SSN not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )"
            ]
        },
        {
            "id": "task077-abe00aa1c95242889e9bc40dc1762f9c",
            "input": "find the catalog_name of Catalogs table",
            "output": [
                "SELECT catalog_name FROM Catalogs"
            ]
        },
        {
            "id": "task077-73ac2c02e60e470a8ec299c3dd4b347e",
            "input": "find Party of party table whose Comptroller equals 1 or Comptroller equals 2",
            "output": [
                "SELECT Party FROM party WHERE Comptroller = 2 OR Comptroller = 1"
            ]
        },
        {
            "id": "task077-6faf2905db784ed98c06c1ecb2716d82",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_name of the results of step 1 whose price_in_pounds equals 8",
            "output": [
                "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = 8"
            ]
        },
        {
            "id": "task077-8c1ead0eb2ca40998ad45d9044399087",
            "input": "Step 1: find the Type of Institution table for which Enrollment greater than 1000.\nStep 2: find the Type of Institution table for which Enrollment less than 1990.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Type FROM Institution WHERE Enrollment > 1000 INTERSECT SELECT Type FROM Institution WHERE Enrollment < 1990"
            ]
        },
        {
            "id": "task077-3babc3ef36ce4f5096343a1c070635dc",
            "input": "find the EmployeeID of Nurse table",
            "output": [
                "SELECT EmployeeID FROM Nurse"
            ]
        },
        {
            "id": "task077-05d37585bada41de9bc3d0e6e46516cb",
            "input": "Step 1: For each row in party table, find the corresponding rows in election table.\nStep 2: find the number of rows of each value of District in the results of step 1.\nStep 3: find Attorney_General of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Attorney_General FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6c66de86ee0945188b659bd8085727ae",
            "input": "Step 1: For each row in user_profiles table, find the corresponding rows in tweets table.\nStep 2: find the number of rows of each value of tweets's uid in the results of step 1.\nStep 3: find name, tweets's uid in the results of step 1 whose corresponding value in step 2 is greater than 2",
            "output": [
                "SELECT T2.name , T1.uid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-ab44fdb5b2f44f77918f640b0dd4fbea",
            "input": "Step 1: For each row in management table, find corresponding rows in department table and in head table.\nStep 2: find Name, born_state, Num_Employees of the results of step 1 ordered ascending by age",
            "output": [
                "SELECT T1.Name , T2.born_state , T1.Num_Employees FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc"
            ]
        },
        {
            "id": "task077-f6925a1aa4674c3cafd12a2ed3dbafb6",
            "input": "Step 1: For each row in Prescribes table, find corresponding rows in Physician table and in Medication table.\nStep 2: find Medication's Name, Physician's Name of the results of step 1",
            "output": [
                "SELECT T2.Name , T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code"
            ]
        },
        {
            "id": "task077-bcd0d8ee986b414d94cd9835ae2627db",
            "input": "find the price, distance of flight table with largest value of price",
            "output": [
                "SELECT price , distance FROM flight ORDER BY price Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-bfba25167b6145c5a9f3ae044168d6aa",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Prescribes table.\nStep 2: find the number of rows of each value of Physician in the results of step 1.\nStep 3: find SSN of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.SSN FROM Physician AS T1 JOIN Prescribes AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-f2a7f16cc9524af49c2eefd1d2fe3f78",
            "input": "find the average Silver and the average Gold in club_rank table",
            "output": [
                "SELECT Avg ( Silver ) , Avg ( Gold ) FROM club_rank"
            ]
        },
        {
            "id": "task077-376f02b9ff82414896ae3ae9f7299816",
            "input": "Step 1: find the number of rows of each value of supplier_name in Suppliers table.\nStep 2: find supplier_name in Suppliers table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT supplier_name FROM Suppliers GROUP BY supplier_name HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-f93d5f87e6864852bec2dcc4859523b3",
            "input": "Step 1: find the mountain_id of photos table.\nStep 2: find the number of rows in mountain table whose mountain's id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )"
            ]
        },
        {
            "id": "task077-24af9c91622f49c096361ef22b06f14e",
            "input": "find the number of rows in member table",
            "output": [
                "SELECT Count ( * ) FROM member"
            ]
        },
        {
            "id": "task077-1bf194366aec4555accc3a69f284f08c",
            "input": "Step 1: find the number of rows of each value of Department_ID in department table.\nStep 2: find rows of department table with largest value in the results of step 1",
            "output": [
                "SELECT * FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f8f0a804b42646babd1df401978c996f",
            "input": "Step 1: For each row in team table, find the corresponding rows in match_season table.\nStep 2: find without repetition Season, Name, Name of the results of step 1",
            "output": [
                "SELECT DISTINCT T2.Season , T1.Name , T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team"
            ]
        },
        {
            "id": "task077-da5368d921a94ebaa7a96280aa6e4e29",
            "input": "find the aid, name of aircraft table",
            "output": [
                "SELECT aid , name FROM aircraft"
            ]
        },
        {
            "id": "task077-f95c8fe39d0d4846ab5cc17e912d8ed1",
            "input": "Step 1: For each row in actor table, find the corresponding rows in film_actor table.\nStep 2: find the number of rows of each value of film_actor's actor_id in the results of step 1.\nStep 3: find first_name, last_name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.first_name , T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6511f8590c3e4c7caa1e4c477ca1c10e",
            "input": "Step 1: for each value of camera_lens_id in photos table, calculate number of rows.\nStep 2: show each value of camera_lens_id in photos table along with the corresponding number of rows ordered ascending by the results of step 1",
            "output": [
                "SELECT name , Count ( * ) FROM photos GROUP BY camera_lens_id ORDER BY Count ( * ) Asc"
            ]
        },
        {
            "id": "task077-d230f2e26aaa4b2dafb7cf7db6fe3bda",
            "input": "Step 1: find the party's Party of party table for which Comptroller equals Appropriations.\nStep 2: For each row in party table, find the corresponding rows in election table.\nStep 3: find party's Party of the results of step 2 whose Committee equals Economic Matters.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Party FROM party AS T1 WHERE T1.Comptroller = \"Appropriations\" INTERSECT SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = \"Economic Matters\""
            ]
        },
        {
            "id": "task077-762f45e9c808400b8e524298e3674f16",
            "input": "find catalog_entry_name of Catalog_Contents table whose length greater than 3 or length less than 5",
            "output": [
                "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > 5 OR length < 3"
            ]
        },
        {
            "id": "task077-30ee029a3725431ea053ac3f67e931c8",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Patient table.\nStep 2: find the number of rows in the results of step 1 whose Patient's Name equals John Dorian and Physician's Name equals John Dorian",
            "output": [
                "SELECT Count ( * ) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = \"John Dorian\" AND T1.Name = \"John Dorian\""
            ]
        },
        {
            "id": "task077-a7c495ac41864f9aaa5c0c5c04e078b2",
            "input": "find the maximum followers and the average followers in user_profiles table",
            "output": [
                "SELECT Max ( followers ) , Avg ( followers ) FROM user_profiles"
            ]
        },
        {
            "id": "task077-e35759251f3c4119b82f7352de25729d",
            "input": "Step 1: For each row in broadcast table, find corresponding rows in program table and in channel table.\nStep 2: find channel's Name of the results of step 1 with largest value of Launch",
            "output": [
                "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-81e131e576e54ad28ce3e485f0100ee6",
            "input": "find each value of Country_name in country table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Country_name , Count ( * ) FROM country GROUP BY Country_name"
            ]
        },
        {
            "id": "task077-88d4d50e7c6f42e28b86ae74e3a3b223",
            "input": "Step 1: For each row in county table, find the corresponding rows in election table.\nStep 2: find Delegate of the results of step 1 whose Population greater than 100000",
            "output": [
                "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > 100000"
            ]
        },
        {
            "id": "task077-ae38c9dbf5514f339216090e9bcf2cd3",
            "input": "find the name of photos table for which name contains Digital",
            "output": [
                "SELECT name FROM photos WHERE name LIKE \"Digital\""
            ]
        },
        {
            "id": "task077-166632f86e5441e7bdd427656816c86a",
            "input": "find the height of Catalog_Contents table with smallest value of price_in_dollars",
            "output": [
                "SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-1e631643cf4540c38c21ecb300d010f0",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of Physician in the results of step 1.\nStep 3: find Name in the results of step 1 whose corresponding value in step 2 is greater than 1",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-5db39ee6022f4f46ba4075de27bcb56b",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find Physician's Name of the results of step 1 with largest value of Registered",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Registered Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7a4d55a3295d46d4a01cdd7f46e96ac5",
            "input": "find Lieutenant_Governor of party table whose Party equals Democratic and Comptroller equals Carl McCall",
            "output": [
                "SELECT Lieutenant_Governor FROM party WHERE Party = \"Democratic\" AND Comptroller = \"Carl McCall\""
            ]
        },
        {
            "id": "task077-c85f7394f1974214bca2fb02c9163673",
            "input": "Step 1: For each row in Products table, find the corresponding rows in Product_Suppliers table.\nStep 2: find the average product_price of each value of Product_Suppliers's product_id in the results of step 1.\nStep 3: find Product_Suppliers's product_id in the results of step 1 whose corresponding value in step 2 is greater than 2",
            "output": [
                "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING Avg ( T1.product_price ) > 2"
            ]
        },
        {
            "id": "task077-520c8e748cf24f40a02fc82a02a24639",
            "input": "find the donator_name of endowment table for which amount less than 9",
            "output": [
                "SELECT donator_name FROM endowment WHERE amount < 9"
            ]
        },
        {
            "id": "task077-a2f41e29648a447687dd287f66db3df9",
            "input": "Step 1: For each row in film table, find the corresponding rows in inventory table.\nStep 2: for each value of inventory's film_id in the results of step 1, calculate number of rows.\nStep 3: show each value of inventory's film_id in the results of step 1 along with the maximum rental_rate with largest value in the results of step 2",
            "output": [
                "SELECT T1.rating , Max ( T1.rental_rate ) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-55dac1cb4b6a40cf88d4af3ea1e9bd93",
            "input": "Step 1: For each row in ship table, find the corresponding rows in mission table.\nStep 2: find Code, Name of the results of step 1",
            "output": [
                "SELECT T1.Code , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID"
            ]
        },
        {
            "id": "task077-03e1942a37a24f888e8536706a6ac733",
            "input": "find the Governor of party table for which Party equals Democratic",
            "output": [
                "SELECT Governor FROM party WHERE Party = \"Democratic\""
            ]
        },
        {
            "id": "task077-3c5c9383c18746179dcaae62c910ab12",
            "input": "find the average Sheep_and_Goats in farm table whose Total_Horses greater than 5000",
            "output": [
                "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > 5000"
            ]
        },
        {
            "id": "task077-f6f2337ccb744ddfaa712344914cddcd",
            "input": "find the district of address table for which address equals 1",
            "output": [
                "SELECT district FROM address WHERE address = 1"
            ]
        },
        {
            "id": "task077-40b1c8200801409d8fb8878e9ccca3b7",
            "input": "Step 1: for each value of Farm_ID in farm table, calculate summation of Total_Horses.\nStep 2: show each value of Farm_ID in farm table along with the corresponding summation of Sheep_and_Goats ordered ascending by the results of step 1",
            "output": [
                "SELECT Pigs , Sum ( Sheep_and_Goats ) FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc"
            ]
        },
        {
            "id": "task077-078df70f72d246e59a22933dd4d19524",
            "input": "find the name, name of Country table",
            "output": [
                "SELECT name , name FROM Country"
            ]
        },
        {
            "id": "task077-084be064e7384fc1b095e7013bc74c73",
            "input": "find the number of rows in payment table whose amount equals 1",
            "output": [
                "SELECT Count ( * ) FROM payment WHERE amount = 1"
            ]
        },
        {
            "id": "task077-b2ce0ac85c3547ccbbbc70f7c0157065",
            "input": "Step 1: For each row in team table, find corresponding rows in match_season table and in player table.\nStep 2: find player's Player of the results of step 1 ordered ascending by Season",
            "output": [
                "SELECT T3.Player FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team ORDER BY T2.Season Asc"
            ]
        },
        {
            "id": "task077-9e938cebc91b413688ce158e31343b12",
            "input": "Step 1: find the number of rows of each value of County_name in county table.\nStep 2: find County_name in county table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-94fb8c3d127141628bd4e2646108ef9d",
            "input": "Step 1: find the number of rows of each value of date_of_publication in Catalogs table.\nStep 2: find date_of_publication in Catalogs table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT date_of_publication FROM Catalogs GROUP BY date_of_publication HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-6d49ab38c6e74c1bacd5da62236e222b",
            "input": "Step 1: For each row in Staff_Department_Assignments table, find corresponding rows in Staff table and in Departments table.\nStep 2: find Staff's staff_id, staff_gender of the results of step 1 whose department_name equals Department Manager",
            "output": [
                "SELECT T1.staff_id , T1.staff_gender FROM Staff AS T1 JOIN Departments AS T2 JOIN Staff_Department_Assignments AS T3 ON T1.staff_id = T3.staff_id AND T3.department_id = T2.department_id WHERE T2.department_name = \"Department Manager\""
            ]
        },
        {
            "id": "task077-63824aaa65d340fa85f61184b2cc909b",
            "input": "find the summation of Share_in_percent in channel table",
            "output": [
                "SELECT Sum ( Share_in_percent ) FROM channel"
            ]
        },
        {
            "id": "task077-c6684212908749f0ab50b0c1692c8ce8",
            "input": "find without repetition the Committee of election table",
            "output": [
                "SELECT DISTINCT Committee FROM election"
            ]
        },
        {
            "id": "task077-c13803bee13646519cbdd57141c1e5d0",
            "input": "Step 1: find the number of rows of each value of name in aircraft table.\nStep 2: find name of aircraft table with smallest value in the results of step 1",
            "output": [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-ab877ca9c4a546b4845b81f1c3887528",
            "input": "find the payment_date of payment table",
            "output": [
                "SELECT payment_date FROM payment"
            ]
        },
        {
            "id": "task077-e1575aafdb4c4607b2a7592dfdfc8ba9",
            "input": "find the Reign of wrestler table for which Days_held greater than 50",
            "output": [
                "SELECT Reign FROM wrestler WHERE Days_held > 50"
            ]
        },
        {
            "id": "task077-baf0b66f0ff943f0865277401ac2fa98",
            "input": "Step 1: For each row in department table, find the corresponding rows in management table.\nStep 2: find without repetition Creation of the results of step 1 whose temporary_acting equals Alabama",
            "output": [
                "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = \"Alabama\""
            ]
        },
        {
            "id": "task077-ff20fc66355044b3ab4bd869c7dc6665",
            "input": "Step 1: find the number of rows of each value of name in photos table.\nStep 2: find name of photos table with largest value in the results of step 1",
            "output": [
                "SELECT name FROM photos GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-69bf556744fe4911b11e468b4e79a4f8",
            "input": "find the name of language table for which name equals AIRPORT POLLOCK",
            "output": [
                "SELECT name FROM language WHERE name = \"AIRPORT POLLOCK\""
            ]
        },
        {
            "id": "task077-fa35211d09a9428dac4e1c5c66cb1085",
            "input": "find the Physician of Trained_In table with largest value of CertificationDate",
            "output": [
                "SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-94f17b04c59e44c1ae47368923ca3a64",
            "input": "find the number of rows in aircraft table whose distance greater than 2000",
            "output": [
                "SELECT Count ( * ) FROM aircraft WHERE distance > 2000"
            ]
        },
        {
            "id": "task077-b9c2b6a2446a4a21b8e13ce528af1cbb",
            "input": "find the average overall_rating in Player_Attributes table",
            "output": [
                "SELECT Avg ( overall_rating ) FROM Player_Attributes"
            ]
        },
        {
            "id": "task077-7ecbd1bfa5964fd087864040bc4ac49d",
            "input": "find the Draft_Pick_Number, Season of match_season table for which Position equals Defender",
            "output": [
                "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = \"Defender\""
            ]
        },
        {
            "id": "task077-dd0dcf57f86349c5939ec37bc965fcff",
            "input": "Step 1: For each row in aircraft table, find the corresponding rows in flight table.\nStep 2: find flno, origin, name of the results of step 1 ordered ascending by destination",
            "output": [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc"
            ]
        },
        {
            "id": "task077-fcc308f23693467bb0144a805f85f6a7",
            "input": "Step 1: find the average product_price in Products table.\nStep 2: For each row in Products table, find the corresponding rows in Product_Suppliers table.\nStep 3: find Product_Suppliers's product_id in the results of step 2 whose product_price greater than the results of step 1",
            "output": [
                "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price > ( SELECT Avg ( T1.product_price ) FROM Products AS T1 )"
            ]
        },
        {
            "id": "task077-3d7e33a67b8e457d9b530b39db58f0e6",
            "input": "Step 1: find the Player's id of Player table for which height greater than 180.\nStep 2: For each row in Player table, find the corresponding rows in Player_Attributes table.\nStep 3: find Player_Attributes's player_api_id of the results of step 2 whose height less than 85.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.id FROM Player AS T1 WHERE T1.height > 180 INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < 85"
            ]
        },
        {
            "id": "task077-6ff1550815274d83af59ac834a1d2eba",
            "input": "find the number of rows in Room table whose RoomType equals 112",
            "output": [
                "SELECT Count ( * ) FROM Room WHERE RoomType = 112"
            ]
        },
        {
            "id": "task077-798cf3acb95e40fba07f6196368b1d76",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find Physician's Name of the results of step 1 whose Nurse's Name equals Surgery or Nurse's Name equals Psychiatry",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Name = \"Psychiatry\" OR T2.Name = \"Surgery\""
            ]
        },
        {
            "id": "task077-dd187509546a4075b652dac6274ad163",
            "input": "find the Enrollment of School table for which Mascot equals Glenn",
            "output": [
                "SELECT Enrollment FROM School WHERE Mascot = \"Glenn\""
            ]
        },
        {
            "id": "task077-b27f0f9c722247ab8cc1b6e4ccb61d78",
            "input": "Step 1: For each row in management table, find corresponding rows in department table and in head table.\nStep 2: find Name of the results of step 1 whose born_state not equals California",
            "output": [
                "SELECT T1.Name FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID WHERE T2.born_state ! = \"California\""
            ]
        },
        {
            "id": "task077-b72a78b32be34023a9a69b36e5eb727c",
            "input": "Step 1: For each row in School table, find the corresponding rows in budget table.\nStep 2: find School_name, total_budget_percent_budgeted, Year of the results of step 1 whose Year greater than 2002",
            "output": [
                "SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Year FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > 2002"
            ]
        },
        {
            "id": "task077-e4d9e35f4f074de2b303778122b71b98",
            "input": "find the average price_in_euros and the maximum price_in_pounds in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-8dd17cebc3554d8d9de10d301a299d07",
            "input": "find the Party of party table for which Comptroller equals 1",
            "output": [
                "SELECT Party FROM party WHERE Comptroller = 1"
            ]
        },
        {
            "id": "task077-077e7daca5464522825fa1f55532d983",
            "input": "find the average Gold and the maximum Gold in club_rank table",
            "output": [
                "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank"
            ]
        },
        {
            "id": "task077-c70f95c155dd42eb854e5153a99fd75c",
            "input": "Step 1: find the number of rows of each value of customer_id in customer table.\nStep 2: find first_name, last_name, customer_id in customer table whose corresponding value in step 1 is greater than or equals 1",
            "output": [
                "SELECT first_name , last_name , customer_id FROM customer GROUP BY customer_id HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-7c04c1e55a0740a9ac75c4231560a85c",
            "input": "Step 1: find the rows of Prescribes table for which Prescribes's Physician equals John Wen.\nStep 2: For each row in Undergoes table, find corresponding rows in Procedures table and in Nurse table.\nStep 3: find Nurse's Name of the results of step 2 whose Cost greater than 1000.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT * FROM Prescribes AS T1 WHERE T1.Physician = \"John Wen\" EXCEPT SELECT T3.Name FROM Procedures AS T2 JOIN Nurse AS T3 JOIN Undergoes AS T4 ON T2.Code = T4.Procedures AND T4.AssistingNurse = T3.EmployeeID WHERE T2.Cost > 1000"
            ]
        },
        {
            "id": "task077-be0210c91d334a868acc88d6f6d57635",
            "input": "find the Name, Event of wrestler table",
            "output": [
                "SELECT Name , Event FROM wrestler"
            ]
        },
        {
            "id": "task077-f586adb63c9040d99de6afd06f4c3f60",
            "input": "find the maximum customer_phone and the minimum customer_phone in Customers table",
            "output": [
                "SELECT Max ( customer_phone ) , Min ( customer_phone ) FROM Customers"
            ]
        },
        {
            "id": "task077-f168873cdfc84257b2dab4813dd7802f",
            "input": "find the Name of channel table",
            "output": [
                "SELECT Name FROM channel"
            ]
        },
        {
            "id": "task077-83b4e450e4824d5a95ff0835e549483d",
            "input": "Step 1: find the number of rows of each value of birthday in Player table.\nStep 2: find player_name, birthday of Player table ordered descending by the results of step 1.\nStep 3: only show the first 5 rows of the results",
            "output": [
                "SELECT player_name , birthday FROM Player GROUP BY birthday ORDER BY Count ( * ) Desc LIMIT 5"
            ]
        },
        {
            "id": "task077-5e622d910ad9449299c8b6154bf45494",
            "input": "find the player_name of Player table with largest value of height",
            "output": [
                "SELECT player_name FROM Player ORDER BY height Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6d34e6c585d347c29f0687712f6679f8",
            "input": "Step 1: For each row in Stay table, find corresponding rows in Patient table and in Room table.\nStep 2: find Name of the results of step 1 whose BlockFloor equals 111",
            "output": [
                "SELECT T1.Name FROM Patient AS T1 JOIN Room AS T2 JOIN Stay AS T3 ON T1.SSN = T3.Patient AND T3.Room = T2.RoomNumber WHERE T2.BlockFloor = 111"
            ]
        },
        {
            "id": "task077-da15c98dbd1c4ed7aa1065094da6a1e5",
            "input": "find the number of rows in department table",
            "output": [
                "SELECT Count ( * ) FROM department"
            ]
        },
        {
            "id": "task077-88d095fe9a474df19bc632f4064bc2d8",
            "input": "Step 1: find the first_name of customer table.\nStep 2: For each row in customer table, find the corresponding rows in rental table.\nStep 3: find first_name of the results of step 2 whose return_date greater than 2005-08-23 02:06:01.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.first_name FROM customer AS T1 EXCEPT SELECT T1.first_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.return_date > \"2005-08-23 02:06:01\""
            ]
        },
        {
            "id": "task077-363d80d5cfc54025ade974ee29302f3b",
            "input": "Step 1: For each row in aircraft table, find the corresponding rows in flight table.\nStep 2: find name of the results of step 1 ordered descending by price.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-4493137118744d3ba6b49f84f488e9bf",
            "input": "Step 1: For each row in Player table, find the corresponding rows in Player_Attributes table.\nStep 2: find player_name of the results of step 1 whose overall_rating greater than 90",
            "output": [
                "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > 90"
            ]
        },
        {
            "id": "task077-b77b2d3201dd40cc91af1e8d2765db3d",
            "input": "find without repetition the age of head table",
            "output": [
                "SELECT DISTINCT age FROM head"
            ]
        },
        {
            "id": "task077-43aed796d3914b0eb78870b2c774d2e6",
            "input": "find without repetition the Year of party table for which Comptroller equals Eliot Spitzer",
            "output": [
                "SELECT DISTINCT Year FROM party WHERE Comptroller = \"Eliot Spitzer\""
            ]
        },
        {
            "id": "task077-7db4bcfcb6244db8a6ccc14df210c1d2",
            "input": "find the staff_name, staff_gender of Staff table",
            "output": [
                "SELECT staff_name , staff_gender FROM Staff"
            ]
        },
        {
            "id": "task077-8dccdcfb63294c2aa3e079f85a39be33",
            "input": "find without repetition the product_name of Products table",
            "output": [
                "SELECT DISTINCT product_name FROM Products"
            ]
        },
        {
            "id": "task077-d05ae4437c5343d396adecfabdf2b36f",
            "input": "find the number of different Program_ID in broadcast table",
            "output": [
                "SELECT Count ( DISTINCT Program_ID ) FROM broadcast"
            ]
        },
        {
            "id": "task077-85e62683424e41dc92eea203ee0de1a2",
            "input": "Step 1: find the name of aircraft table ordered descending by distance.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT name FROM aircraft ORDER BY distance Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-c3c7ddd5846b4669b187cf930913ab92",
            "input": "Step 1: find the journal_committee's Editor_ID of journal_committee table for which Journal_ID equals 13.\nStep 2: find the Name of editor table whose editor's Editor_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = 13 )"
            ]
        },
        {
            "id": "task077-0ec91efc9f3543d4a1c3add3f416ba48",
            "input": "find the customer_name, customer_id of Customers table for which customer_address equals TN",
            "output": [
                "SELECT customer_name , customer_id FROM Customers WHERE customer_address = \"TN\""
            ]
        },
        {
            "id": "task077-b8df677a05b642d688e5e03b230faac9",
            "input": "find the first_name, last_name of actor table for which last_update greater than 30",
            "output": [
                "SELECT first_name , last_name FROM actor WHERE last_update > 30"
            ]
        },
        {
            "id": "task077-1ced28fc43f440b98ffbf29bc38b3e21",
            "input": "Step 1: For each row in film table, find the corresponding rows in film_actor table.\nStep 2: find the number of rows of each value of film_actor's film_id in the results of step 1.\nStep 3: find title, actor_id, description of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.title , T2.actor_id , T1.description FROM film AS T1 JOIN film_actor AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-de825b4af9ae402cb64579a6e6aa2e52",
            "input": "find the Name of channel table for which Owner not equals Beijing",
            "output": [
                "SELECT Name FROM channel WHERE Owner ! = \"Beijing\""
            ]
        },
        {
            "id": "task077-0d165d44954e4ec28c7622dd0d2d3e61",
            "input": "find the Name of channel table ordered ascending by Name",
            "output": [
                "SELECT Name FROM channel ORDER BY Name Asc"
            ]
        },
        {
            "id": "task077-fd04ad8cf99641ff8575e13e05e478e1",
            "input": "find the number of rows in journal table",
            "output": [
                "SELECT Count ( * ) FROM journal"
            ]
        },
        {
            "id": "task077-62ab18638ef1484696aa0c32bd50681c",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Appointment table.\nStep 2: find Name of the results of step 1 with largest value of End",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician ORDER BY T2.End Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-43da1ff719c1458abe9aac254d7e9cd8",
            "input": "Step 1: For each row in Trained_In table, find corresponding rows in Physician table and in Procedures table.\nStep 2: find Procedures's Name of the results of step 1 whose Physician's Name equals John Wen.\nStep 3: find the Procedures's Name of Procedures table for which Cost greater than 1000.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T2.Name FROM Physician AS T1 JOIN Procedures AS T2 JOIN Trained_In AS T3 ON T1.EmployeeID = T3.Physician AND T3.Treatment = T2.Code WHERE T1.Name = \"John Wen\" EXCEPT SELECT T2.Name FROM Procedures AS T2 WHERE T2.Cost > 1000"
            ]
        },
        {
            "id": "task077-5f9752e49f5c4ec989286c64955d5cb3",
            "input": "find the catalog_entry_name, height of Catalog_Contents table for which price_in_pounds greater than 700",
            "output": [
                "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_pounds > 700"
            ]
        },
        {
            "id": "task077-6edcedca70214a9b826089b00f74d78e",
            "input": "Step 1: find the number of rows of each value of name in user_profiles table.\nStep 2: find name in user_profiles table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT name FROM user_profiles GROUP BY name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-9ff78c952f424d9aa876456ee597e98f",
            "input": "Step 1: For each row in actor table, find the corresponding rows in film_actor table.\nStep 2: find the number of rows of each value of film_actor's actor_id in the results of step 1.\nStep 3: find first_name, film_actor's actor_id, film_actor's actor_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.first_name , T2.actor_id , T2.actor_id FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2a3f5d98a9e84d3ba684d0b590a3a360",
            "input": "find without repetition the Name of Department table",
            "output": [
                "SELECT DISTINCT Name FROM Department"
            ]
        },
        {
            "id": "task077-7df2087c399c46b1aa3f28e4b2b17a17",
            "input": "Step 1: For each row in mountain table, find the corresponding rows in photos table.\nStep 2: find the number of different color in the results of step 1 whose Country equals Ethiopia",
            "output": [
                "SELECT Count ( DISTINCT T2.color ) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.Country = \"Ethiopia\""
            ]
        },
        {
            "id": "task077-8256c0cc06ee4a03ac9577a429cfb6f8",
            "input": "Step 1: For each row in building table, find the corresponding rows in Institution table.\nStep 2: find rows in the results of step 1 whose Founded greater than 1880.\nStep 3: find the number of rows of each value of Institution in step 1 rsults.\nStep 4: find Name, Height_feet in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.Name , T1.Height_feet FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id WHERE T2.Founded > 1880 GROUP BY T2.Institution HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-bacc111b1163449b81d9f1e8dd1ef63b",
            "input": "find the Name of Nurse table",
            "output": [
                "SELECT Name FROM Nurse"
            ]
        },
        {
            "id": "task077-767956a4244f4f28878b2f0e238f61b3",
            "input": "find each value of City_ID in city table along with the average Population of the corresponding rows to each value",
            "output": [
                "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID"
            ]
        },
        {
            "id": "task077-4b123a12f9894007913047c78930ae87",
            "input": "Step 1: find the Channel_ID of broadcast_share table.\nStep 2: find the Name of channel table whose channel's Channel_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM channel AS T1 WHERE T1.Channel_ID NOT IN ( SELECT T2.Channel_ID FROM broadcast_share AS T2 )"
            ]
        },
        {
            "id": "task077-ee93c4b6fe7640078db0960200e6ab66",
            "input": "find the staff_id of Staff_Department_Assignments table for which date_assigned_to less than Clerical Staff",
            "output": [
                "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < \"Clerical Staff\""
            ]
        },
        {
            "id": "task077-56c7888c76bd446284cef05ad29dec95",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_name of the results of step 1 whose parent_entry_id greater than 8",
            "output": [
                "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.parent_entry_id > 8"
            ]
        },
        {
            "id": "task077-2f6f7174166b4492b4de98141bff4663",
            "input": "Step 1: find the number of rows of each value of destination in flight table.\nStep 2: find destination of flight table with largest value in the results of step 1",
            "output": [
                "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ec5f4a1973d64a1587f0344faf34c4ec",
            "input": "find the supplier_name, supplier_phone of Suppliers table ordered ascending by supplier_name",
            "output": [
                "SELECT supplier_name , supplier_phone FROM Suppliers ORDER BY supplier_name Asc"
            ]
        },
        {
            "id": "task077-e329d9487f044cadbaab24a4609a8486",
            "input": "Step 1: For each row in wrestler table, find the corresponding rows in Elimination table.\nStep 2: find Time of the results of step 1 whose Name equals Punk or Name equals Orton",
            "output": [
                "SELECT T2.Time FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = \"Orton\" OR T1.Name = \"Punk\""
            ]
        },
        {
            "id": "task077-0a494da5b2c14235b431e74a64234c02",
            "input": "find without repetition the Name of Patient table ordered ascending by Name",
            "output": [
                "SELECT DISTINCT Name FROM Patient ORDER BY Name Asc"
            ]
        },
        {
            "id": "task077-284437dfb4c846ec8c80aeaba86d38c0",
            "input": "Step 1: find the average total_value_purchased of each value of supplier_id in Product_Suppliers table.\nStep 2: find supplier_id in Product_Suppliers table whose corresponding value in step 1 is greater than 50000",
            "output": [
                "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING Avg ( total_value_purchased ) > 50000"
            ]
        },
        {
            "id": "task077-583c168fc5e340bc8687f1ce9d5280b7",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_name in Customers table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT customer_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-1c9fc30406b0471dae049ce9b4b7c9c4",
            "input": "find the number of rows in club_rank table whose Gold less than 10",
            "output": [
                "SELECT Count ( * ) FROM club_rank WHERE Gold < 10"
            ]
        },
        {
            "id": "task077-e519d8505d6f45038f7a72c0e7ee595b",
            "input": "Step 1: find the number of rows of each value of email in user_profiles table.\nStep 2: find name, email in user_profiles table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT name , email FROM user_profiles GROUP BY email HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-0314dda658cc467299bdca373dfef356",
            "input": "Step 1: For each row in School table, find corresponding rows in budget table and in endowment table.\nStep 2: find total_budget_percent_budgeted, donator_name of the results of step 1 with largest value of amount",
            "output": [
                "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d8eadfbb81d640beaa330314f7408e65",
            "input": "find the title of film table",
            "output": [
                "SELECT title FROM film"
            ]
        },
        {
            "id": "task077-d5402ff2330b4f8db4ae55d88a45b475",
            "input": "Step 1: find the SSN of Patient table for which Name equals Procrastin-X.\nStep 2: find the number of rows in Patient table whose SSN not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Patient WHERE SSN NOT IN ( SELECT SSN FROM Patient WHERE Name = \"Procrastin-X\" )"
            ]
        },
        {
            "id": "task077-1c7bc5805eda4e3aa5dba13f3ca8434a",
            "input": "find the first_name of customer table for which create_date greater than 2005-08-23 02:06:01",
            "output": [
                "SELECT first_name FROM customer WHERE create_date > \"2005-08-23 02:06:01\""
            ]
        },
        {
            "id": "task077-cb7f145f29614a6dbe5b6019a7087432",
            "input": "find the catalog_name of Catalogs table for which catalog_name starts with 2",
            "output": [
                "SELECT catalog_name FROM Catalogs WHERE catalog_name LIKE \"2%\""
            ]
        },
        {
            "id": "task077-301c979748dd489ab005fc6f61ac103a",
            "input": "Step 1: For each row in match_season table, find corresponding rows in country table and in team table.\nStep 2: find Name, Season, Country_name of the results of step 1",
            "output": [
                "SELECT T2.Name , T3.Season , T1.Country_name FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id AND T1.Country_id = T3.Country"
            ]
        },
        {
            "id": "task077-9f6c04f2d0834aac95992a9e8e48e648",
            "input": "Step 1: For each row in Nurse table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of Physician in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6f353e49bda6407e94da2f4950f7dfa6",
            "input": "find the number of rows in mountain table whose Height greater than 15",
            "output": [
                "SELECT Count ( * ) FROM mountain WHERE Height > 15"
            ]
        },
        {
            "id": "task077-f33bdca3e9d14ef79314769895e29557",
            "input": "Step 1: For each row in broadcast table, find corresponding rows in program table and in channel table.\nStep 2: find channel's Name of the results of step 1 ordered ascending by Launch",
            "output": [
                "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Asc"
            ]
        },
        {
            "id": "task077-d124fa0afeb04710bac5aed45736b472",
            "input": "Step 1: For each row in channel table, find the corresponding rows in broadcast table.\nStep 2: find the number of rows of each value of broadcast's Channel_ID in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e8195e61639a4b059c012b872d12bd0f",
            "input": "Step 1: For each row in channel table, find the corresponding rows in broadcast table.\nStep 2: find channel's Owner of the results of step 1 whose Time_of_day equals Morning.\nStep 3: For each row in program table, find the corresponding rows in broadcast table.\nStep 4: find program's Owner of the results of step 3 whose Time_of_day equals Night.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.Owner FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = \"Morning\" INTERSECT SELECT T3.Owner FROM program AS T3 JOIN broadcast AS T2 ON T3.Program_ID = T2.Program_ID WHERE T2.Time_of_day = \"Night\""
            ]
        },
        {
            "id": "task077-10e8a2e26df44654b2612bcdcebc25be",
            "input": "find the height of Catalog_Contents table with smallest value of price_in_pounds",
            "output": [
                "SELECT height FROM Catalog_Contents ORDER BY price_in_pounds Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-bdc2333097b54391884e9217cc44b0c6",
            "input": "Step 1: For each row in team table, find corresponding rows in match_season table and in player table.\nStep 2: find College of the results of step 1 whose player's Player equals Midfielder.\nStep 3: find College of the results of step 1 whose player's Player equals Defender.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = \"Midfielder\" INTERSECT SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = \"Defender\""
            ]
        },
        {
            "id": "task077-512ae22588ac4637b56cdf63b230e729",
            "input": "Step 1: find the number of rows of each value of Name in channel table.\nStep 2: find Name of channel table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM channel GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a0396f88881a4a70aa2f7aa46389eff0",
            "input": "find the product_name of Products table for which product_description equals white",
            "output": [
                "SELECT product_name FROM Products WHERE product_description = \"white\""
            ]
        },
        {
            "id": "task077-81a351b738e54d289bf8211b6b060195",
            "input": "find the customer_name of Customers table with largest value of payment_method",
            "output": [
                "SELECT customer_name FROM Customers ORDER BY payment_method Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2ebb6441ccb949e1a7fee3be560e340c",
            "input": "Step 1: find the Name of Manufacturers table.\nStep 2: find the Name of Manufacturers table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM Manufacturers EXCEPT SELECT Name FROM Manufacturers"
            ]
        },
        {
            "id": "task077-49da5c8872f34e08a3f68227a76d2521",
            "input": "Step 1: find the number of rows of each value of Station_ID in station table.\nStep 2: find Name, Main_Services of station table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT Name , Main_Services FROM station GROUP BY Station_ID ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-bcf8b008ab4e4aa6b03eff83e7404d8f",
            "input": "Step 1: find the maximum Price in wine table whose Winery equals John Anthony.\nStep 2: find without repetition the Name of wine table whose Price greater than the results of step 1",
            "output": [
                "SELECT DISTINCT Name FROM wine WHERE Price > ( SELECT Max ( Price ) FROM wine WHERE Winery = \"John Anthony\" )"
            ]
        },
        {
            "id": "task077-3cf0a48017f943f48524a1a4a77c7439",
            "input": "find the number of rows in Customer_Orders table whose order_status equals Cancelled",
            "output": [
                "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = \"Cancelled\""
            ]
        },
        {
            "id": "task077-b9182bcb1b804905bf5833a996215691",
            "input": "Step 1: find the number of rows of each value of amenity_name in Dorm_amenity table.\nStep 2: find amenity_name of Dorm_amenity table with largest value in the results of step 1",
            "output": [
                "SELECT amenity_name FROM Dorm_amenity GROUP BY amenity_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f026daf2f77246c8873a8fad5fb9c0d8",
            "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: find each value of Tryout's cName in the results of step 1 along with the summation of enr of the corresponding rows to each value",
            "output": [
                "SELECT Sum ( T1.enr ) , T2.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName GROUP BY T2.cName"
            ]
        },
        {
            "id": "task077-a538685fb4e94a18a173be36900f0ff2",
            "input": "Step 1: find the number of rows of each value of Headquarter in Manufacturers table.\nStep 2: find Name, Revenue of Manufacturers table with largest value in the results of step 1",
            "output": [
                "SELECT Name , Revenue FROM Manufacturers GROUP BY Headquarter ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5939e4e9c42c4704ae05149649543386",
            "input": "find rows of roller_coaster table whose Height greater than 3300 or Height greater than 100",
            "output": [
                "SELECT * FROM roller_coaster WHERE Height > 100 OR Height > 3300"
            ]
        },
        {
            "id": "task077-03fa3ee54cf54766ac1dc26c87d95a3b",
            "input": "Step 1: For each row in Customer_Addresses table, find corresponding rows in Addresses table and in Customers table.\nStep 2: find customer_name of the results of step 1 whose city equals Colorado",
            "output": [
                "SELECT T2.customer_name FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T1.city = \"Colorado\""
            ]
        },
        {
            "id": "task077-acbabdb8cc494cd0a22224fcc40cd059",
            "input": "Step 1: For each row in Has_amenity table, find corresponding rows in Dorm table and in Dorm_amenity table.\nStep 2: find dorm_name of the results of step 1 whose amenity_name not equals TV Lounge",
            "output": [
                "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name ! = \"TV Lounge\""
            ]
        },
        {
            "id": "task077-02540e775174407f8be00f68239b1cae",
            "input": "find cName, enr of College table whose enr greater than 10000 or state equals LA",
            "output": [
                "SELECT cName , enr FROM College WHERE enr > 10000 OR state = \"LA\""
            ]
        },
        {
            "id": "task077-50022324490e406c8bc7963b4464e323",
            "input": "Step 1: find the number of rows of each value of Station_ID in station table.\nStep 2: find Name in station table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Name FROM station GROUP BY Station_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-e71ca4c533b348f59b3aeefaf1d2d330",
            "input": "find the Name of wine table for which Year greater than 2008",
            "output": [
                "SELECT Name FROM wine WHERE Year > 2008"
            ]
        },
        {
            "id": "task077-00f0f39180614e5db5f60e2b1b5f7291",
            "input": "Step 1: For each row in Ref_Characteristic_Types table, find the corresponding rows in Characteristics table.\nStep 2: find characteristic_type_description of the results of step 1 whose characteristic_name contains t",
            "output": [
                "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name LIKE \"t\""
            ]
        },
        {
            "id": "task077-3449c33cdab94a489728515160b14328",
            "input": "Step 1: find the average Revenue in Manufacturers table.\nStep 2: For each row in Manufacturers table, find the corresponding rows in Products table.\nStep 3: find Products's Name in the results of step 2 whose Revenue greater than the results of step 1",
            "output": [
                "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )"
            ]
        },
        {
            "id": "task077-374a0a917c0e4c8cbe8536d9d941a5f1",
            "input": "find each value of Manufacturer in Products table along with the average Price of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( Price ) , Manufacturer FROM Products GROUP BY Manufacturer"
            ]
        },
        {
            "id": "task077-b5dc21a5e5094ee0b1b0e8dcc7743ae0",
            "input": "Step 1: For each row in Tryout table, find corresponding rows in College table and in Player table.\nStep 2: find pName of the results of step 1 with largest value of enr",
            "output": [
                "SELECT T2.pName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T1.enr Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-db9aff3168cf4a979439e3cfb5c5ce89",
            "input": "find the number of rows in Player table whose pName equals goalie",
            "output": [
                "SELECT Count ( * ) FROM Player WHERE pName = \"goalie\""
            ]
        },
        {
            "id": "task077-fce36a95b698445a89f29c7ce0ac54ba",
            "input": "Step 1: For each row in country table, find the corresponding rows in roller_coaster table.\nStep 2: find each value of Country_ID in the results of step 1 along with the average Speed of the corresponding rows to each value",
            "output": [
                "SELECT T2.Name , Avg ( T1.Speed ) FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Country_ID"
            ]
        },
        {
            "id": "task077-f2bafae59469437d8c4496266fce9861",
            "input": "Step 1: find the Rank of captain table.\nStep 2: find the Rank of captain table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Rank FROM captain EXCEPT SELECT Rank FROM captain"
            ]
        },
        {
            "id": "task077-0f99f80287d641c29e749ac655552558",
            "input": "Step 1: find the Customer_Name of Clients table.\nStep 2: find the Customer_Name of Clients table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients"
            ]
        },
        {
            "id": "task077-8d65c9bc3c2440e2997c8626e53b62d8",
            "input": "find the Name of roller_coaster table ordered ascending by Height",
            "output": [
                "SELECT Name FROM roller_coaster ORDER BY Height Asc"
            ]
        },
        {
            "id": "task077-b7df3b897d334520b5bd45cbe35e03d2",
            "input": "find the number of rows in College table whose enr greater than yes",
            "output": [
                "SELECT Count ( * ) FROM College WHERE enr > \"yes\""
            ]
        },
        {
            "id": "task077-becd57c727a744599e3ce21f9c947efb",
            "input": "find the Revenue, Revenue of Manufacturers table",
            "output": [
                "SELECT Revenue , Revenue FROM Manufacturers"
            ]
        },
        {
            "id": "task077-2578e072dead4890a6c41e3797f6b0f0",
            "input": "Step 1: find the number of rows of each value of payment_method in Customers table.\nStep 2: find payment_method of Customers table with smallest value in the results of step 1",
            "output": [
                "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-b5fd62a16607469bbe908856dd2b1e15",
            "input": "Step 1: find the Name, City of branch table.\nStep 2: find the Name, City of branch table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name , City FROM branch EXCEPT SELECT Name , City FROM branch"
            ]
        },
        {
            "id": "task077-1c41580a439c4017918aaab0bb2b8c01",
            "input": "find the Title, Director of movie table for which Gross_worldwide greater than or equals 2000 with largest value of Gross_worldwide",
            "output": [
                "SELECT Title , Director FROM movie WHERE Gross_worldwide > = 2000 ORDER BY Gross_worldwide Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1d658d7d029342b29709f76a142058d4",
            "input": "Step 1: For each row in Player table, find the corresponding rows in Tryout table.\nStep 2: find pName, pPos of the results of step 1 whose HS less than 1500",
            "output": [
                "SELECT T1.pName , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS < 1500"
            ]
        },
        {
            "id": "task077-898823ce0fdc421c9656f63645a9013b",
            "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: find state of the results of step 1 whose pPos equals goalie.\nStep 3: find the Tryout's cName of Tryout table for which pPos equals mid.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = \"goalie\" INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = \"mid\""
            ]
        },
        {
            "id": "task077-5b11a63374e74f909c78615cb631f0e0",
            "input": "Step 1: find the pID of Tryout table.\nStep 2: find the average HS in Player table whose Player's pID not one of the results of step 1",
            "output": [
                "SELECT Avg ( T1.HS ) FROM Player AS T1 WHERE T1.pID NOT IN ( SELECT T2.pID FROM Tryout AS T2 )"
            ]
        },
        {
            "id": "task077-42be5cd399bb4e9f95a7f6ef3c40ccef",
            "input": "Step 1: For each row in Invoices table, find corresponding rows in Customer_Orders table and in Invoice_Items table.\nStep 2: find Order_Date of the results of step 1 whose Invoice_Items's Order_Quantity equals 1",
            "output": [
                "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = 1"
            ]
        },
        {
            "id": "task077-16e74e2afaec48eca26c575eab7655e6",
            "input": "Step 1: For each row in branch table, find the corresponding rows in membership_register_branch table.\nStep 2: find the number of rows of each value of membership_register_branch's Branch_ID in the results of step 1.\nStep 3: find Name, Open_year of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name , T1.Open_year FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID GROUP BY T2.Branch_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-bf3679be79974eb7ab92a53833ff47bc",
            "input": "find the pName, HS of Player table",
            "output": [
                "SELECT pName , HS FROM Player"
            ]
        },
        {
            "id": "task077-4aeaa041c7104eaabc6f101635c2d98d",
            "input": "find each value of Name in Products table along with the average Price of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( Price ) , Name FROM Products GROUP BY Name"
            ]
        },
        {
            "id": "task077-ce268079e5fc4a319a1a0ec18cf724a4",
            "input": "find the decision of Tryout table for which pPos equals striker",
            "output": [
                "SELECT decision FROM Tryout WHERE pPos = \"striker\""
            ]
        },
        {
            "id": "task077-c3d8f11a7d9542dfb2a41f0db59a9c16",
            "input": "Step 1: For each row in Manufacturers table, find the corresponding rows in Products table.\nStep 2: find Headquarter of the results of step 1 whose Products's Name equals James",
            "output": [
                "SELECT T1.Headquarter FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Name = \"James\""
            ]
        },
        {
            "id": "task077-b50dd3b08b0f426fbc8373008e1870e4",
            "input": "find the Store_Name of Stores table",
            "output": [
                "SELECT Store_Name FROM Stores"
            ]
        },
        {
            "id": "task077-295cb57bb50141bf9e73580dd82057e6",
            "input": "find the average HS and the maximum HS in Player table",
            "output": [
                "SELECT Avg ( HS ) , Max ( HS ) FROM Player"
            ]
        },
        {
            "id": "task077-0fa7c00c7d434c86b67ce534103063cb",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Performers table.\nStep 2: find Customer_Email_Address of the results of step 1 whose State_County equals Alaska",
            "output": [
                "SELECT T2.Customer_Email_Address FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = \"Alaska\""
            ]
        },
        {
            "id": "task077-8a8707ec5c294cc6a3c97304a2af9b2d",
            "input": "Step 1: find the Rank of captain table for which captain's Class equals Cutter.\nStep 2: For each row in Ship table, find the corresponding rows in captain table.\nStep 3: find Rank of the results of step 2 whose Type equals Armed schooner.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Rank FROM captain AS T1 WHERE T1.Class = \"Cutter\" INTERSECT SELECT T1.Rank FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Type = \"Armed schooner\""
            ]
        },
        {
            "id": "task077-c4ee84d6a95446d9a790a95096f8b7bb",
            "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: find the average Price in the results of step 1 whose appellations's State equals Sonoma",
            "output": [
                "SELECT Avg ( T2.Price ) FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T1.State = \"Sonoma\""
            ]
        },
        {
            "id": "task077-f17f81b96f3441aa93980a9eaf5ac28c",
            "input": "Step 1: For each row in Player table, find the corresponding rows in Tryout table.\nStep 2: find each value of pPos in the results of step 1 along with the maximum HS of the corresponding rows to each value",
            "output": [
                "SELECT Max ( T1.HS ) , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID GROUP BY T2.pPos"
            ]
        },
        {
            "id": "task077-427acf4beee34c2ba163618b6c7891ea",
            "input": "Step 1: find the Railway_ID of train table.\nStep 2: find the number of rows in railway table whose railway's Railway_ID not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM railway AS T1 WHERE T1.Railway_ID NOT IN ( SELECT T2.Railway_ID FROM train AS T2 )"
            ]
        },
        {
            "id": "task077-8514e09c3f6b46149d7e14f64098af05",
            "input": "Step 1: For each row in Customer_Address_History table, find corresponding rows in Addresses table and in Customers table.\nStep 2: find customer_name, city, state_province_county of the results of step 1",
            "output": [
                "SELECT T2.customer_name , T1.city , T1.state_province_county FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Address_History AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id"
            ]
        },
        {
            "id": "task077-81b17bffbac74907b28cdb99e56b010e",
            "input": "find the Name, Name of member table ordered ascending by Card_Number",
            "output": [
                "SELECT Name , Name FROM member ORDER BY Card_Number Asc"
            ]
        },
        {
            "id": "task077-f70bb03be862401b959a616129df9a8a",
            "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: find College's cName of the results of step 1 whose pPos equals striker.\nStep 3: For each row in Player table, find the corresponding rows in Tryout table.\nStep 4: find pName of the results of step 3 whose pPos equals yes.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = \"striker\" INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = \"yes\""
            ]
        },
        {
            "id": "task077-799b4b59ad134f4d8377dde5e75464d9",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Contact_Channels table.\nStep 2: find the number of rows of each value of Customers's customer_id in the results of step 1.\nStep 3: find channel_code, date_became_customer of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.channel_code , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-79bc72aca2464d6c86963f88dda4b2bf",
            "input": "Step 1: For each row in culture_company table, find corresponding rows in book_club table and in movie table.\nStep 2: find movie's Year, Title, Publisher of the results of step 1 ordered descending by movie's Year",
            "output": [
                "SELECT T2.Year , T2.Title , T1.Publisher FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id ORDER BY T2.Year Desc"
            ]
        },
        {
            "id": "task077-52bac206c3df4c99be5cbb8e6470a3c8",
            "input": "find the Name, Appelation, Score of wine table for which Score greater than 93 ordered ascending by Name",
            "output": [
                "SELECT Name , Appelation , Score FROM wine WHERE Score > 93 ORDER BY Name Asc"
            ]
        },
        {
            "id": "task077-5c23356060d643ef8cece1369d470abe",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Performers table.\nStep 2: find Customer_Name of the results of step 1 whose City_Town equals Feliciaberg",
            "output": [
                "SELECT T2.Customer_Name FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = \"Feliciaberg\""
            ]
        },
        {
            "id": "task077-01cd91a875fa49dcb19edfe16214ab10",
            "input": "Step 1: find the maximum enr in College table.\nStep 2: find the state of College table whose enr greater than the results of step 1",
            "output": [
                "SELECT state FROM College WHERE enr > ( SELECT Max ( enr ) FROM College )"
            ]
        },
        {
            "id": "task077-51850c701f0a4a87b612d43ea8a8ee44",
            "input": "Step 1: For each row in membership_register_branch table, find corresponding rows in member table and in branch table.\nStep 2: find member's Name, Hometown of the results of step 1 whose branch's Name equals 2016",
            "output": [
                "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Name = 2016"
            ]
        },
        {
            "id": "task077-3f766dbd72c14566b2f5a33c506514da",
            "input": "find the average Price and the average Score in wine table whose Year equals 2009",
            "output": [
                "SELECT Avg ( Price ) , Avg ( Score ) FROM wine WHERE Year = 2009"
            ]
        },
        {
            "id": "task077-03c5a3d0dec046bdacf1b426b68c11d0",
            "input": "Step 1: find the Name of member table.\nStep 2: find the branch's Name, City of branch table whose Branch_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name , T1.City FROM branch AS T1 WHERE T1.Branch_ID NOT IN ( SELECT T2.Name FROM member AS T2 )"
            ]
        },
        {
            "id": "task077-7934f1ab44ef47a189194bb864d7782f",
            "input": "find each value of product_id in Products table along with the summation of product_price of the corresponding rows to each value",
            "output": [
                "SELECT product_name , Sum ( product_price ) FROM Products GROUP BY product_id"
            ]
        },
        {
            "id": "task077-085497e30bf549359a6481c078c3b1a6",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find product_name of the results of step 1 whose characteristic_data_type equals yellow",
            "output": [
                "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = \"yellow\""
            ]
        },
        {
            "id": "task077-9bfb80f2544045e989f3727d52820608",
            "input": "find the number of rows in Products table whose color_code equals hot",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE color_code = \"hot\""
            ]
        },
        {
            "id": "task077-6621cf5b668349a7972983572434d502",
            "input": "find without repetition the Appelation of wine table",
            "output": [
                "SELECT DISTINCT Appelation FROM wine"
            ]
        },
        {
            "id": "task077-26147e0dba0d4fa9a9a7bb0a7f800e1c",
            "input": "find the characteristic_type_description of Ref_Characteristic_Types table",
            "output": [
                "SELECT characteristic_type_description FROM Ref_Characteristic_Types"
            ]
        },
        {
            "id": "task077-5a818ab545a9483eb48e3211e381b2eb",
            "input": "find the number of rows in Ref_Characteristic_Types table whose characteristic_type_description equals red",
            "output": [
                "SELECT Count ( * ) FROM Ref_Characteristic_Types WHERE characteristic_type_description = \"red\""
            ]
        },
        {
            "id": "task077-75a0e81ab13f44a2b7d8081df3def352",
            "input": "find the Card_Number, Name, Hometown of member table ordered descending by Card_Number",
            "output": [
                "SELECT Card_Number , Name , Hometown FROM member ORDER BY Card_Number Desc"
            ]
        },
        {
            "id": "task077-bfe26a7fe4994e8e97e05b66a43f1b6f",
            "input": "find each value of city_code in Student table along with the average Age of the corresponding rows to each value",
            "output": [
                "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code"
            ]
        },
        {
            "id": "task077-61bf53261d3d4a6faa28674024581da6",
            "input": "find date_became_customer of Customers table whose customer_id equals 10 or customer_id equals 20",
            "output": [
                "SELECT date_became_customer FROM Customers WHERE customer_id = 20 OR customer_id = 10"
            ]
        },
        {
            "id": "task077-5a1b5dc33b7444a5a01dcb6d25b6a950",
            "input": "find the number of rows in member table whose Hometown contains Kentucky",
            "output": [
                "SELECT Count ( * ) FROM member WHERE Hometown LIKE \"Kentucky\""
            ]
        },
        {
            "id": "task077-b3dbccb3e7ff4b97b34d9fc88bcb01b4",
            "input": "Step 1: find the dorm_name of Dorm table.\nStep 2: find the dorm_name of Dorm table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT dorm_name FROM Dorm EXCEPT SELECT dorm_name FROM Dorm"
            ]
        },
        {
            "id": "task077-68713eeb693d4d9e838d0b82f4a0e817",
            "input": "Step 1: find the cName of College table.\nStep 2: find the cName of Tryout table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT T1.cName FROM College AS T1 INTERSECT SELECT T2.cName FROM Tryout AS T2"
            ]
        },
        {
            "id": "task077-6f7cb58aedb543aa9db6d3d158fe8b2f",
            "input": "find the Winery of wine table for which Score greater than 90",
            "output": [
                "SELECT Winery FROM wine WHERE Score > 90"
            ]
        },
        {
            "id": "task077-fda26adccf0a4110b50d74fea3465031",
            "input": "Step 1: find the number of rows of each value of name in swimmer table.\nStep 2: find name in swimmer table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT name FROM swimmer GROUP BY name HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-65f8c5dfb7584176a35dfd7d90875f3c",
            "input": "Step 1: find the number of rows of each value of Open_year in branch table.\nStep 2: find Name, Open_year of branch table with largest value in the results of step 1",
            "output": [
                "SELECT Name , Open_year FROM branch GROUP BY Open_year ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6b4c4bb5583b417ab6909d1aac76d190",
            "input": "find the Fname of Student table for which Age equals or between 20 and 25",
            "output": [
                "SELECT Fname FROM Student WHERE Age BETWEEN 25 AND 20"
            ]
        },
        {
            "id": "task077-c7b32b6bc44c42c093a67b10eabed7be",
            "input": "Step 1: For each row in Customer_Addresses table, find corresponding rows in Addresses table and in Customers table.\nStep 2: find address_content of the results of step 1 whose customer_name contains Maudie Kertzmann",
            "output": [
                "SELECT T1.address_content FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name LIKE \"Maudie Kertzmann\""
            ]
        },
        {
            "id": "task077-4d189b9ca2f94fa9b6fad3c23be771b5",
            "input": "find each value of Builder in railway table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Built , Count ( * ) FROM railway GROUP BY Builder"
            ]
        },
        {
            "id": "task077-7d26f181221b465cbc5a86ee2312238f",
            "input": "find each value of City_Town in Addresses table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town"
            ]
        },
        {
            "id": "task077-3b2012a3fe6343b58503f884fb9d492e",
            "input": "Step 1: For each row in station table, find the corresponding rows in train_station table.\nStep 2: for each value of train_station's Station_ID in the results of step 1, find the number of rows along with Name and Location",
            "output": [
                "SELECT T1.Name , T1.Location , Count ( * ) FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID GROUP BY T2.Station_ID"
            ]
        },
        {
            "id": "task077-3489d02c559c4bbba16f4293fae41eb2",
            "input": "Step 1: For each row in grapes table, find the corresponding rows in wine table.\nStep 2: find Winery of the results of step 1 whose Price greater than 50 and Color equals Red",
            "output": [
                "SELECT T2.Winery FROM grapes AS T1 JOIN wine AS T2 ON T1.Grape = T2.Grape WHERE T2.Price > 50 AND T1.Color = \"Red\""
            ]
        },
        {
            "id": "task077-2dd9db2d0c9c40a29982e79f860ea75d",
            "input": "Step 1: For each row in member table, find the corresponding rows in purchase table.\nStep 2: find the summation of Total_pounds in the results of step 1 whose Level equals 6",
            "output": [
                "SELECT Sum ( T2.Total_pounds ) FROM member AS T1 JOIN purchase AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Level = 6"
            ]
        },
        {
            "id": "task077-30c4b80dcec94dc088e03044ac162f40",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Contact_Channels table.\nStep 2: find the active_from_date in the results of step 1 whose customer_name equals Tillman Ernser with largest value of active_to_date",
            "output": [
                "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Tillman Ernser\" ORDER BY T2.active_to_date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7a378d48011e45f9baf2e62fe514ee8a",
            "input": "Step 1: For each row in Ref_Product_Categories table, find the corresponding rows in Products table.\nStep 2: find the number of rows in the results of step 1 whose Products's product_category_code equals Spices and product_category_description greater than 1000",
            "output": [
                "SELECT Count ( * ) FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_category_code = \"Spices\" AND T1.product_category_description > 1000"
            ]
        },
        {
            "id": "task077-138357add76c463dbb630925256ba151",
            "input": "find the number of rows in Products table whose product_name equals laurel",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE product_name = \"laurel\""
            ]
        },
        {
            "id": "task077-604a13f742624c4f8af1c1ce20f165b0",
            "input": "Step 1: find the rows in wine table whose Appelation equals White.\nStep 2: find each value of Winery in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT Winery FROM wine WHERE Appelation = \"White\" GROUP BY Appelation ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-40ef47bc06ce41de8331cc0868ed2ac8",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Contact_Channels table.\nStep 2: find the active_from_date in the results of step 1 whose customer_name equals Tillman Ernser with largest value of date_became_customer",
            "output": [
                "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Tillman Ernser\" ORDER BY T1.date_became_customer Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-358b7573f6b847398f7bcb832962bb26",
            "input": "find the average Revenue, the minimum Revenue and the maximum Revenue in Manufacturers table",
            "output": [
                "SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers"
            ]
        },
        {
            "id": "task077-de7f690356ee4d96b54ba726a0bfbac8",
            "input": "find the Other_Product_Service_Details of Products table for which Product_Price greater than 2000",
            "output": [
                "SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > 2000"
            ]
        },
        {
            "id": "task077-9ebd5aca558d403b8c44d79333009ddf",
            "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: find Winery of the results of step 1 whose Price less than 50 and appellations's State equals Monterey and County equals Sonoma",
            "output": [
                "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < 50 AND T1.State = \"Monterey\" AND T1.County = \"Sonoma\""
            ]
        },
        {
            "id": "task077-86851d72e3de45b5a29006cd0d303ec1",
            "input": "find the customer_name, date_became_customer of Customers table for which customer_name equals Email",
            "output": [
                "SELECT customer_name , date_became_customer FROM Customers WHERE customer_name = \"Email\""
            ]
        },
        {
            "id": "task077-d45d4e33c0ac4563a2c22955249d80f2",
            "input": "Step 1: find the Tryout's cName of Tryout table for which pPos equals goalie.\nStep 2: find the state of College table whose state not one of the results of step 1",
            "output": [
                "SELECT T1.state FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = \"goalie\" )"
            ]
        },
        {
            "id": "task077-dc926f8ffb3c42bfba67298e769b0ccf",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find product_name of the results of step 1 whose characteristic_data_type equals Handful.\nStep 3: find product_name of the results of step 1 whose characteristic_data_type equals white.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = \"Handful\" EXCEPT SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = \"white\""
            ]
        },
        {
            "id": "task077-d401418120bd4eb0b86cc8ad0bd821cd",
            "input": "Step 1: find the yCard of Player table.\nStep 2: find the summation of enr in College table whose state not one of the results of step 1",
            "output": [
                "SELECT Sum ( T1.enr ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.yCard FROM Player AS T2 )"
            ]
        },
        {
            "id": "task077-597d5c824ba9410da75df9b1af09c276",
            "input": "Step 1: find the cName of Tryout table.\nStep 2: find the summation of enr in College table whose state not one of the results of step 1",
            "output": [
                "SELECT Sum ( T1.enr ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 )"
            ]
        },
        {
            "id": "task077-3a5a8d4f50004e4eb64c598014d1b427",
            "input": "find the summation of Product_Price in Products table whose Product_Name equals photo",
            "output": [
                "SELECT Sum ( Product_Price ) FROM Products WHERE Product_Name = \"photo\""
            ]
        },
        {
            "id": "task077-60e6476e01064dc98fde25b6f590c6c6",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics"
            ]
        },
        {
            "id": "task077-6c098df892b14ac9ab53c87907a4f9a5",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Lives_in table.\nStep 2: find Fname of the results of step 1 with largest value of room_number",
            "output": [
                "SELECT T1.Fname FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid ORDER BY T2.room_number Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d74da69ecbbc4908918c08be6d4b4edf",
            "input": "Step 1: find the product_id of Product_Characteristics table.\nStep 2: find the number of rows in Products table whose Products's product_id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )"
            ]
        },
        {
            "id": "task077-8671a7e51aff4b4ca29b2e351ccaa646",
            "input": "Step 1: find the City of branch table.\nStep 2: For each row in branch table, find the corresponding rows in purchase table.\nStep 3: find City of the results of step 2 whose Total_pounds greater than 100.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM branch AS T1 JOIN purchase AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T2.Total_pounds > 100"
            ]
        },
        {
            "id": "task077-4e265681493247c096a2725656e62f47",
            "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: find rows in the results of step 1 whose enr greater than FL.\nStep 3: find the number of rows of each value of Tryout's cName in step 1 rsults.\nStep 4: find College's cName in the results of step 1 whose corresponding value in step 2 is greater than or equals 1",
            "output": [
                "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > \"FL\" GROUP BY T2.cName HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-15c86403f7ef4aeb96c38bd549a84ead",
            "input": "find the average Price in wine table whose State equals Sonoma",
            "output": [
                "SELECT Avg ( Price ) FROM wine WHERE State = \"Sonoma\""
            ]
        },
        {
            "id": "task077-982ecf5cebe9420c815599d42beb8a6e",
            "input": "Step 1: For each row in stadium table, find the corresponding rows in event table.\nStep 2: find Name of the results of step 1 with largest value of Opening_year",
            "output": [
                "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f345742e981c4e389af762e1e2428dfc",
            "input": "find the Name of station table with largest value of Number_of_Platforms",
            "output": [
                "SELECT Name FROM station ORDER BY Number_of_Platforms Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4de878f3eb5b416081146f9459d6a6ef",
            "input": "find the cName of Tryout table for which pPos equals yes",
            "output": [
                "SELECT cName FROM Tryout WHERE pPos = \"yes\""
            ]
        },
        {
            "id": "task077-fac07f73578548069a079f8b00d2e301",
            "input": "Step 1: find the number of rows of each value of Marketing_Region_Code in Marketing_Regions table.\nStep 2: find Marketing_Region_Name of Marketing_Regions table with largest value in the results of step 1",
            "output": [
                "SELECT Marketing_Region_Name FROM Marketing_Regions GROUP BY Marketing_Region_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7d6012c7d18c42c39ad90a1e51a4e1e5",
            "input": "find the customer_details of Customers table for which customer_details contains Miss",
            "output": [
                "SELECT customer_details FROM Customers WHERE customer_details LIKE \"Miss\""
            ]
        },
        {
            "id": "task077-b3f7bbc51d104740858729adb7f30103",
            "input": "find the number of rows in Ref_Payment_Methods table",
            "output": [
                "SELECT Count ( * ) FROM Ref_Payment_Methods"
            ]
        },
        {
            "id": "task077-b4109d883bcb44d482d239cc34521e0f",
            "input": "find the average active_from_date in Customer_Contact_Channels table",
            "output": [
                "SELECT Avg ( active_from_date ) FROM Customer_Contact_Channels"
            ]
        },
        {
            "id": "task077-e61fbb9a9a6241c9a5c8bafbd47ca5a0",
            "input": "find the number of different Headquarter in Manufacturers table",
            "output": [
                "SELECT Count ( DISTINCT Headquarter ) FROM Manufacturers"
            ]
        },
        {
            "id": "task077-fdc90038fd844b7e9a90da6861b34269",
            "input": "find the name, Nationality of swimmer table for which meter_100 greater than 1",
            "output": [
                "SELECT name , Nationality FROM swimmer WHERE meter_100 > 1"
            ]
        },
        {
            "id": "task077-41efe41ea19740a6bef40f2c589b8037",
            "input": "find the summation of Revenue in Manufacturers table whose Headquarter equals Austin",
            "output": [
                "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = \"Austin\""
            ]
        },
        {
            "id": "task077-37b5e9286a2b4e6ebd5691600f9890d1",
            "input": "Step 1: For each row in Lives_in table, find corresponding rows in Student table and in Dorm table.\nStep 2: find the number of rows in the results of step 1 whose Sex equals Smith Hall and gender equals F",
            "output": [
                "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = \"Smith Hall\" AND T2.gender = \"F\""
            ]
        },
        {
            "id": "task077-baefa64b926147499075b4b819337159",
            "input": "find LName of Student table whose city_code equals M or Age less than 20",
            "output": [
                "SELECT LName FROM Student WHERE city_code = \"M\" OR Age < 20"
            ]
        },
        {
            "id": "task077-e6cf573a481f48d09524e444d76412fc",
            "input": "Step 1: For each row in Manufacturers table, find the corresponding rows in Products table.\nStep 2: find each value of Founder in the results of step 1 along with the average Price of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( T2.Price ) , T1.Founder FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T1.Founder"
            ]
        },
        {
            "id": "task077-8584d177a77a4c06adb8813a579b612e",
            "input": "find the summation of Revenue in Manufacturers table whose Founder equals Andy",
            "output": [
                "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Founder = \"Andy\""
            ]
        },
        {
            "id": "task077-e1dcd2a7abd342779648b1a6219f7f01",
            "input": "Step 1: find the average enr in College table.\nStep 2: find the state of College table whose enr less than the results of step 1",
            "output": [
                "SELECT state FROM College WHERE enr < ( SELECT Avg ( enr ) FROM College )"
            ]
        },
        {
            "id": "task077-70935bca67434cd8a800f65dc67cab87",
            "input": "find address_content of Addresses table whose country equals Gleasonmouth and state_province_county equals Arizona",
            "output": [
                "SELECT address_content FROM Addresses WHERE country = \"Gleasonmouth\" AND state_province_county = \"Arizona\""
            ]
        },
        {
            "id": "task077-011522a964a147cfaf892791e2331a5c",
            "input": "find the number of rows in Characteristics table whose characteristic_name equals white or characteristic_name equals hot",
            "output": [
                "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = \"hot\" OR characteristic_name = \"white\""
            ]
        },
        {
            "id": "task077-ca056e0a9c7746d9998361897ddb62ef",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_name of Customers table with largest value in the results of step 1",
            "output": [
                "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-bfaffa30d5f3407e860e549a6447abf7",
            "input": "Step 1: find the number of rows of each value of Railway_ID in railway table.\nStep 2: find Railway_ID, Builder of railway table with largest value in the results of step 1",
            "output": [
                "SELECT Railway_ID , Builder FROM railway GROUP BY Railway_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-fcf0a533feb24fc689411a73ae6c3523",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Clients table.\nStep 2: find the number of rows of each value of Clients's Address_ID in the results of step 1.\nStep 3: find City_Town in the results of step 1 whose corresponding value in step 2 is less than or equals 1",
            "output": [
                "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) < = 1"
            ]
        },
        {
            "id": "task077-ccbf7c6502664409a373f393b688bbaa",
            "input": "find the average product_price in Products table",
            "output": [
                "SELECT Avg ( product_price ) FROM Products"
            ]
        },
        {
            "id": "task077-727cdcd5c46a48e69bd73c990805862e",
            "input": "Step 1: find the Tryout's cName of Tryout table for which pPos equals goalie.\nStep 2: find the number of different state in College table whose state not one of the results of step 1",
            "output": [
                "SELECT Count ( DISTINCT T1.state ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = \"goalie\" )"
            ]
        },
        {
            "id": "task077-5bfda67f90894a57a40c96a7d076d438",
            "input": "Step 1: find the Name of Manufacturers table for which Founder equals Creative Labs.\nStep 2: find the Name of Manufacturers table for which Founder equals Sony.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Name FROM Manufacturers WHERE Founder = \"Creative Labs\" INTERSECT SELECT Name FROM Manufacturers WHERE Founder = \"Sony\""
            ]
        },
        {
            "id": "task077-812bf09f2632439fa80051a4ae87da86",
            "input": "Step 1: find the number of rows of each value of characteristic_type_code in Characteristics table.\nStep 2: find characteristic_name in Characteristics table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_type_code HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-ea709a41e2f645e985cf77704257c7df",
            "input": "find the Planned_Delivery_Date, Order_Date of Bookings table",
            "output": [
                "SELECT Planned_Delivery_Date , Order_Date FROM Bookings"
            ]
        },
        {
            "id": "task077-d30407958f1a4695aab5b3dd3bed6601",
            "input": "Step 1: find the number of rows of each value of Railway_ID in railway table.\nStep 2: find Railway_ID, Location in railway table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Railway_ID , Location FROM railway GROUP BY Railway_ID HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-2a72f97d41cd4ff5a15f7cf47eecaa01",
            "input": "Step 1: For each row in Products table, find the corresponding rows in Product_Characteristics table.\nStep 2: find product_name of the results of step 1 whose product_characteristic_value equals Handful.\nStep 3: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 4: find product_name of the results of step 3 whose characteristic_data_type equals white.\nStep 5: show the rows that are in the results of step 2 but not in the results of step 4",
            "output": [
                "SELECT T1.product_name FROM Products AS T1 JOIN Product_Characteristics AS T2 ON T1.product_id = T2.product_id WHERE T2.product_characteristic_value = \"Handful\" EXCEPT SELECT T1.product_name FROM Characteristics AS T3 JOIN Products AS T1 JOIN Product_Characteristics AS T2 ON T3.characteristic_id = T2.characteristic_id AND T2.product_id = T1.product_id WHERE T3.characteristic_data_type = \"white\""
            ]
        },
        {
            "id": "task077-f1d96b12230c48d08e553563b07937e3",
            "input": "find the pName of Player table ordered descending by HS",
            "output": [
                "SELECT pName FROM Player ORDER BY HS Desc"
            ]
        },
        {
            "id": "task077-e9df5bb58b4a4f1ab709b5209882331e",
            "input": "find the average active_to_date in Customer_Contact_Channels table",
            "output": [
                "SELECT Avg ( active_to_date ) FROM Customer_Contact_Channels"
            ]
        },
        {
            "id": "task077-3c2aae28411b4613b00e3c1ab8a7702c",
            "input": "find the Speed of roller_coaster table with largest value of Height",
            "output": [
                "SELECT Speed FROM roller_coaster ORDER BY Height Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-92e9ad0ff6c9448d9891f22789f9ca60",
            "input": "find without repetition the payment_method_code of Invoices table",
            "output": [
                "SELECT DISTINCT payment_method_code FROM Invoices"
            ]
        },
        {
            "id": "task077-4bc7f021f01c4122b8c0cd167b25efaa",
            "input": "Step 1: For each row in Lives_in table, find corresponding rows in Student table and in Dorm table.\nStep 2: find dorm_name of the results of step 1 whose LName equals Smith",
            "output": [
                "SELECT T2.dorm_name FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.LName = \"Smith\""
            ]
        },
        {
            "id": "task077-c79c73385b054d60aa42e5a6c3e67cdc",
            "input": "find without repetition the Winery of wine table for which Year greater than or equals 2000",
            "output": [
                "SELECT DISTINCT Winery FROM wine WHERE Year > = 2000"
            ]
        },
        {
            "id": "task077-7a09f461a2b546a9a38086d00a58760f",
            "input": "find the summation of Product_Price in Products table",
            "output": [
                "SELECT Sum ( Product_Price ) FROM Products"
            ]
        },
        {
            "id": "task077-44f04264182b46dc868bc3293155efe4",
            "input": "Step 1: find the state of College table.\nStep 2: find the decision of Tryout table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT T1.state FROM College AS T1 INTERSECT SELECT T2.decision FROM Tryout AS T2"
            ]
        },
        {
            "id": "task077-218cbff517254512bea0fa64d42b6cb1",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find characteristic_name of the results of step 1 whose product_name equals Herbs",
            "output": [
                "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = \"Herbs\""
            ]
        },
        {
            "id": "task077-81f65be50ae948bcb2441df27c5d7f58",
            "input": "find the product_name, typical_buying_price of Products table for which product_description equals yellow",
            "output": [
                "SELECT product_name , typical_buying_price FROM Products WHERE product_description = \"yellow\""
            ]
        },
        {
            "id": "task077-7b271cd814c64173b93c1eeba8ba018c",
            "input": "find the number of rows in appellations table whose Appelation equals Napa",
            "output": [
                "SELECT Count ( * ) FROM appellations WHERE Appelation = \"Napa\""
            ]
        },
        {
            "id": "task077-2acb2d97c4ad497bb57684efa17f2ed5",
            "input": "find the Name of wine table for which Score greater than 90",
            "output": [
                "SELECT Name FROM wine WHERE Score > 90"
            ]
        },
        {
            "id": "task077-21be3a78d5374b8899c6ff1b6ed98def",
            "input": "Step 1: For each row in Characteristics table, find the corresponding rows in Product_Characteristics table.\nStep 2: find the number of rows of each value of Product_Characteristics's characteristic_id in the results of step 1.\nStep 3: find characteristic_name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-eff81e944e7e4e33b2e657211b50a609",
            "input": "find the number of rows in Player table whose pName equals yes",
            "output": [
                "SELECT Count ( * ) FROM Player WHERE pName = \"yes\""
            ]
        },
        {
            "id": "task077-a4f2ab93b0be4729b4bf35eb9eb97d0b",
            "input": "find the Name of wine table for which Grape equals Red",
            "output": [
                "SELECT Name FROM wine WHERE Grape = \"Red\""
            ]
        },
        {
            "id": "task077-938c87f578c04ff6ae8404d49ce10ccf",
            "input": "Step 1: For each row in Ref_Characteristic_Types table, find the corresponding rows in Characteristics table.\nStep 2: find characteristic_type_description of the results of step 1 whose Characteristics's characteristic_type_code equals sesame",
            "output": [
                "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_type_code = \"sesame\""
            ]
        },
        {
            "id": "task077-3345fe48081645f297a7438f824a58fb",
            "input": "Step 1: For each row in Lives_in table, find corresponding rows in Student table and in Dorm table.\nStep 2: find the number of rows in the results of step 1 whose gender equals M and Sex equals F",
            "output": [
                "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T2.gender = \"M\" AND T1.Sex = \"F\""
            ]
        },
        {
            "id": "task077-700e2f1481274643b2c7067a03dff3e1",
            "input": "Step 1: For each row in movie table, find the corresponding rows in culture_company table.\nStep 2: find Title, Company_name of the results of step 1 whose Company_name equals China",
            "output": [
                "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = \"China\""
            ]
        },
        {
            "id": "task077-12d074941501430a8f2ce450e3eb2fc2",
            "input": "Step 1: find the number of rows of each value of City in branch table.\nStep 2: find without repetition City in branch table whose corresponding value in step 1 is greater than or equals 100",
            "output": [
                "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > = 100"
            ]
        },
        {
            "id": "task077-d79de2c0ac6c4b49912c5347a32aba0c",
            "input": "Step 1: find the number of rows of each value of Name in member table.\nStep 2: find Name of member table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT Name FROM member GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-503b3caf3eff41358b94cc2cf12c097f",
            "input": "Step 1: find the number of rows of each value of Product_ID in Invoices table.\nStep 2: find Order_ID of Invoices table with largest value in the results of step 1",
            "output": [
                "SELECT Order_ID FROM Invoices GROUP BY Product_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-431f15599e194f58a0dfe62b61f19f29",
            "input": "find the number of rows in Products table whose Price greater than 180 or Price less than 240",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE Price > 240 OR Price < 180"
            ]
        },
        {
            "id": "task077-470b3ce985934a64a9d74744d3299495",
            "input": "Step 1: find the number of rows of each value of product_id in Products table.\nStep 2: find product_id of Products table with largest value in the results of step 1",
            "output": [
                "SELECT product_id FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c7fdbac7c99646b49c9534372bf28842",
            "input": "find each value of Station_ID in station table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Name , Count ( * ) FROM station GROUP BY Station_ID"
            ]
        },
        {
            "id": "task077-860ed77d806c48bdb8a4e19a0e3e517a",
            "input": "Step 1: find the number of rows of each value of Marketing_Region_Code in Stores table.\nStep 2: find Marketing_Region_Code of Stores table with largest value in the results of step 1",
            "output": [
                "SELECT Marketing_Region_Code FROM Stores GROUP BY Marketing_Region_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a2bf0e70cda64e70a7cb043eaaaa208f",
            "input": "Step 1: find the customer_name of Customers table for which payment_method_code equals 2.\nStep 2: find the customer_name of Customers table for which payment_method_code greater than Credit Card.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT customer_name FROM Customers WHERE payment_method_code = 2 INTERSECT SELECT customer_name FROM Customers WHERE payment_method_code > \"Credit Card\""
            ]
        },
        {
            "id": "task077-4706c54b107d4040b6406ba0bc6522a4",
            "input": "find the number of rows in College table",
            "output": [
                "SELECT Count ( * ) FROM College"
            ]
        },
        {
            "id": "task077-c59a76aec2e049d0bd7d31d0b5e4f10c",
            "input": "Step 1: For each row in culture_company table, find corresponding rows in book_club table and in movie table.\nStep 2: find Title, Author_or_Editor of the results of step 1 whose movie's Year greater than 1989",
            "output": [
                "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T2.Year > 1989"
            ]
        },
        {
            "id": "task077-2ef5f8b7bda249b6b41f444bcf0f560e",
            "input": "Step 1: For each row in Tryout table, find corresponding rows in College table and in Player table.\nStep 2: find College's cName, enr of the results of step 1 whose pName equals yes",
            "output": [
                "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = \"yes\""
            ]
        },
        {
            "id": "task077-f283a4228cc24d7db8bc93286ec06a26",
            "input": "find the state of College table for which cName equals Charles",
            "output": [
                "SELECT state FROM College WHERE cName = \"Charles\""
            ]
        },
        {
            "id": "task077-2889a7f43f284c61b088ff211e5609bc",
            "input": "find the cName of Tryout table for which pPos equals mid",
            "output": [
                "SELECT cName FROM Tryout WHERE pPos = \"mid\""
            ]
        },
        {
            "id": "task077-617fb4747ce74bbab836245c75b30fac",
            "input": "find the product_name of Products table with largest value of product_price",
            "output": [
                "SELECT product_name FROM Products ORDER BY product_price Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-da4453c5283c4ef385f4679db555e706",
            "input": "Step 1: find the number of rows of each value of name in stadium table.\nStep 2: find name of stadium table with largest value in the results of step 1",
            "output": [
                "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ac07171dce5f44ddbf0426dca06b3350",
            "input": "Step 1: For each row in Tryout table, find corresponding rows in College table and in Player table.\nStep 2: find College's cName of the results of step 1 ordered descending by HS.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T2.HS Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-0b97a51ab2c94e5d86b2148faa507de4",
            "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: only keep the results of step 1 whose Year less than 2010.\nStep 3: find the number of rows of each value of Area in the results of step 2.\nStep 4: find Area of the results of step 2 with largest value in the results of step 3",
            "output": [
                "SELECT T1.Area FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Year < 2010 GROUP BY T1.Area ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ed419f5d208a48dfa8424108f44655b1",
            "input": "find the name of swimmer table",
            "output": [
                "SELECT name FROM swimmer"
            ]
        },
        {
            "id": "task077-74e5c8519bff4caa94570e39b75251a7",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Stores table.\nStep 2: find State_County of the results of step 1 whose Marketing_Region_Code equals CA or Marketing_Region_Code equals IN",
            "output": [
                "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = \"IN\" OR T2.Marketing_Region_Code = \"CA\""
            ]
        },
        {
            "id": "task077-5999aa8948274f4889220ac5507f2076",
            "input": "Step 1: find the number of rows of each value of country in Addresses table.\nStep 2: find country in Addresses table whose corresponding value in step 1 is greater than 4",
            "output": [
                "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > 4"
            ]
        },
        {
            "id": "task077-fc2788d62bcd47588c2c0a0f02e529e6",
            "input": "Step 1: For each row in Tryout table, find corresponding rows in College table and in Player table.\nStep 2: find College's cName, enr, state of the results of step 1 whose HS greater than 10000",
            "output": [
                "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > 10000"
            ]
        },
        {
            "id": "task077-208d2dc8faae47248bc2367a3d1a77ff",
            "input": "find the Name of wine table for which Year less than Brander",
            "output": [
                "SELECT Name FROM wine WHERE Year < \"Brander\""
            ]
        },
        {
            "id": "task077-f5d20f7ef7c94728917b2f4fddb03d3f",
            "input": "find the dorm_name, student_capacity of Dorm table with smallest value of dorm_name",
            "output": [
                "SELECT dorm_name , student_capacity FROM Dorm ORDER BY dorm_name Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-ea95f0fff9064e65a8437acf5ff02ee1",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Orders table.\nStep 2: find customer_name, date_became_customer of the results of step 1 whose order_status equals Delivered",
            "output": [
                "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Delivered\""
            ]
        },
        {
            "id": "task077-c62525ca3e0c4ab491846c93e8db26ff",
            "input": "Step 1: find rows in Student table whose Sex equals F.\nStep 2: find each value of Sex in the results of step 1 along with the  the corresponding rows to each value",
            "output": [
                "SELECT Sex , Count ( * ) FROM Student WHERE Sex = \"F\" GROUP BY Sex"
            ]
        },
        {
            "id": "task077-171e24b9faea45ad9fc28fda58310e3c",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Contact_Channels table.\nStep 2: find customer_name, date_became_customer of the results of step 1 whose channel_code equals Email",
            "output": [
                "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T2.channel_code = \"Email\""
            ]
        },
        {
            "id": "task077-b387bdbe886d4c258cc7eac4d7ca3b42",
            "input": "find the Name, Time of train table ordered descending by Time",
            "output": [
                "SELECT Name , Time FROM train ORDER BY Time Desc"
            ]
        },
        {
            "id": "task077-604ba0d90dfd4e50ae47b8c7ebf1bd4e",
            "input": "Step 1: For each row in Manufacturers table, find the corresponding rows in Products table.\nStep 2: find Revenue, Manufacturer of the results of step 1",
            "output": [
                "SELECT T1.Revenue , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer"
            ]
        },
        {
            "id": "task077-1e81b8d1eb694d468ef2cc0fa411770b",
            "input": "find without repetition the Company_name of culture_company table for which Type equals Alyson",
            "output": [
                "SELECT DISTINCT Company_name FROM culture_company WHERE Type = \"Alyson\""
            ]
        },
        {
            "id": "task077-9f1c93d70e6d4aa39fa02bab030e5ba7",
            "input": "Step 1: find the number of rows of each value of Name in branch table.\nStep 2: find Name of branch table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT Name FROM branch GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-db1727f45eaf47658f3163552c4de90a",
            "input": "Step 1: For each row in Player table, find the corresponding rows in Tryout table.\nStep 2: find the number of different cName in the results of step 1 whose pName equals mid and pPos equals goalie",
            "output": [
                "SELECT Count ( DISTINCT T2.cName ) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.pName = \"mid\" AND T2.pPos = \"goalie\""
            ]
        },
        {
            "id": "task077-579a831da54d4869990854a5cfc2ac9e",
            "input": "Step 1: find the dormid of Has_amenity table.\nStep 2: find the dorm_name of Dorm table whose Dorm's dormid not one of the results of step 1",
            "output": [
                "SELECT T1.dorm_name FROM Dorm AS T1 WHERE T1.dormid NOT IN ( SELECT T2.dormid FROM Has_amenity AS T2 )"
            ]
        },
        {
            "id": "task077-1a619408541f44dfb753d59214eb9bc2",
            "input": "Step 1: For each row in membership_register_branch table, find corresponding rows in member table and in branch table.\nStep 2: find member's Name, Hometown of the results of step 1 whose Open_year equals 2016",
            "output": [
                "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = 2016"
            ]
        },
        {
            "id": "task077-3ee7bd0996414ab3b92cf5eadf26cf19",
            "input": "find without repetition the cName of College table ordered ascending by cName",
            "output": [
                "SELECT DISTINCT cName FROM College ORDER BY cName Asc"
            ]
        },
        {
            "id": "task077-d0cade83a40c4b5bb93fc4c8b47e54e7",
            "input": "find the minimum Order_Quantity and the maximum Order_Quantity in Invoice_Items table",
            "output": [
                "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) FROM Invoice_Items"
            ]
        },
        {
            "id": "task077-d2f3f77c4d204ef996d5cb9ff0dd0ce1",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_id, customer_details in Customers table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT customer_id , customer_details FROM Customers GROUP BY customer_id HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-40305df0f1c74e7d9ef25525704c261b",
            "input": "find the number of rows in Products table whose Price less than 180",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE Price < 180"
            ]
        },
        {
            "id": "task077-52e971be3eb343efb2a19bbcfc30d47b",
            "input": "find the Customer_Event_ID, date_moved_in, date_moved_in of Customer_Events table",
            "output": [
                "SELECT Customer_Event_ID , date_moved_in , date_moved_in FROM Customer_Events"
            ]
        },
        {
            "id": "task077-70deb2d23c134b5c97cc504a3656d9e5",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find without repetition product_name of the results of step 1 whose characteristic_data_type contains warm",
            "output": [
                "SELECT DISTINCT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type LIKE \"warm\""
            ]
        },
        {
            "id": "task077-acd555b9b3544cc289deb5ad9307bf8c",
            "input": "find the date_moved_in of Residents table with smallest value of date_moved_out",
            "output": [
                "SELECT date_moved_in FROM Residents ORDER BY date_moved_out Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-0dd8c338720b4010bc65766376054508",
            "input": "Step 1: find the Location of station table.\nStep 2: find the number of rows of each value of Location in station table.\nStep 3: find Location in station table whose corresponding value in step 2 is greater than or equals 15.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT Location FROM station EXCEPT SELECT Location FROM station GROUP BY Location HAVING Count ( * ) > = 15"
            ]
        },
        {
            "id": "task077-21acaa9b177848019aaeca72f4507db5",
            "input": "find the Winery, Name of wine table",
            "output": [
                "SELECT Winery , Name FROM wine"
            ]
        },
        {
            "id": "task077-1625c09fea294f71bf768f5224adb99e",
            "input": "Step 1: find the customer_id, customer_name of Customers table for which payment_method_code equals Credit Card.\nStep 2: find the customer_id, customer_name of Customers table for which payment_method_code equals WY.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = \"Credit Card\" EXCEPT SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = \"WY\""
            ]
        },
        {
            "id": "task077-74cec9f4f7ea490297f0a2e91d0f22cd",
            "input": "find the amenity_name of Dorm_amenity table ordered ascending by amenity_name",
            "output": [
                "SELECT amenity_name FROM Dorm_amenity ORDER BY amenity_name Asc"
            ]
        },
        {
            "id": "task077-1cabe8c27d2a4963a70789db19221aff",
            "input": "Step 1: For each row in Characteristics table, find the corresponding rows in Product_Characteristics table.\nStep 2: find the number of rows of each value of Product_Characteristics's characteristic_id in the results of step 1.\nStep 3: find characteristic_name in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-065654c30ac4484e954f0884e22ae898",
            "input": "find the Built, Location of railway table",
            "output": [
                "SELECT Built , Location FROM railway"
            ]
        },
        {
            "id": "task077-20f060e80bad4437b677a815b5855e05",
            "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: only keep the results of step 1 whose enr greater than 18000.\nStep 3: find the number of rows of each value of Tryout's cName in the results of step 2.\nStep 4: find College's cName of the results of step 2 ordered descending by the results of step 3",
            "output": [
                "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > 18000 GROUP BY T2.cName ORDER BY Count ( * ) Desc"
            ]
        },
        {
            "id": "task077-2cbdc9af1cbb4bc69254e5298a543931",
            "input": "find the Name of captain table ordered ascending by age",
            "output": [
                "SELECT Name FROM captain ORDER BY age Asc"
            ]
        },
        {
            "id": "task077-c243c37f854541909a36ecbf08d7fcf3",
            "input": "find the Name, Score of wine table for which Appelation equals White",
            "output": [
                "SELECT Name , Score FROM wine WHERE Appelation = \"White\""
            ]
        },
        {
            "id": "task077-6e33fbbb14db43acb715e6ab71e8d3b5",
            "input": "find without repetition the state of College table",
            "output": [
                "SELECT DISTINCT state FROM College"
            ]
        },
        {
            "id": "task077-4601b53eac9847318e8c7e40658b2aae",
            "input": "find the date_became_customer of Customers table for which customer_name contains Tillman Ernser",
            "output": [
                "SELECT date_became_customer FROM Customers WHERE customer_name LIKE \"Tillman Ernser\""
            ]
        },
        {
            "id": "task077-0dbc42f2697a44a79cdbcc65d81dcb81",
            "input": "find the cName of College table with smallest value of enr",
            "output": [
                "SELECT cName FROM College ORDER BY enr Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-30ff59f1fdee498cba6dc5b625c83fc1",
            "input": "Step 1: For each row in membership_register_branch table, find corresponding rows in member table and in branch table.\nStep 2: find branch's Name, member's Name of the results of step 1 whose Register_Year greater than 2015",
            "output": [
                "SELECT T2.Name , T1.Name FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID AND T1.Member_ID = T3.Member_ID WHERE T3.Register_Year > 2015"
            ]
        },
        {
            "id": "task077-0b6d993214134fbbba86744d5bd794d6",
            "input": "Step 1: find the number of rows of each value of City_Town in Addresses table.\nStep 2: find City_Town in Addresses table whose corresponding value in step 1 is less than or equals 1",
            "output": [
                "SELECT City_Town FROM Addresses GROUP BY City_Town HAVING Count ( * ) < = 1"
            ]
        },
        {
            "id": "task077-486560b794b54781b298d06b49048b5f",
            "input": "find the Company_name of culture_company table for which Type equals Alyson",
            "output": [
                "SELECT Company_name FROM culture_company WHERE Type = \"Alyson\""
            ]
        },
        {
            "id": "task077-9baa2ef9c5de4b4db210fc2f9237dbe3",
            "input": "find the number of rows in member table whose Level equals 6",
            "output": [
                "SELECT Count ( * ) FROM member WHERE Level = 6"
            ]
        },
        {
            "id": "task077-5a0c65ff89874f259f54db929df8c3b7",
            "input": "find Name of Products table whose Price greater than 200 or Price less than 240",
            "output": [
                "SELECT Name FROM Products WHERE Price > 240 OR Price < 200"
            ]
        },
        {
            "id": "task077-d912b7f13e424829bd87b295a9008099",
            "input": "Step 1: find the number of rows of each value of name in swimmer table.\nStep 2: find name of swimmer table with largest value in the results of step 1",
            "output": [
                "SELECT name FROM swimmer GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e9ab2ac8e82149a18c983acc58e36ecf",
            "input": "find the number of different state in College table",
            "output": [
                "SELECT Count ( DISTINCT state ) FROM College"
            ]
        },
        {
            "id": "task077-cb08c893ec204271b8ee1a8a36d11b94",
            "input": "find the Product_Name of Products table for which Product_Price less than 1000000",
            "output": [
                "SELECT Product_Name FROM Products WHERE Product_Price < 1000000"
            ]
        },
        {
            "id": "task077-f0da91df04f04cc58e3508573dd21bd5",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Staff_Department_Assignments table.\nStep 2: find staff_name, staff_gender of the results of step 1 whose job_title_code not equals Clerical Staff",
            "output": [
                "SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code ! = \"Clerical Staff\""
            ]
        },
        {
            "id": "task077-f7faa277e44a4496b2abf67a01ec64d5",
            "input": "find the Grape, Winery, Year of wine table for which Price greater than 100 ordered descending by Price",
            "output": [
                "SELECT Grape , Winery , Year FROM wine WHERE Price > 100 ORDER BY Price Desc"
            ]
        },
        {
            "id": "task077-4823c4392f25428da0fd06326c52b02c",
            "input": "find the Name, Headquarter of Manufacturers table ordered ascending by Revenue",
            "output": [
                "SELECT Name , Headquarter FROM Manufacturers ORDER BY Revenue Asc"
            ]
        },
        {
            "id": "task077-afc427d60bcf41708fffd30f1a710000",
            "input": "find each value of dorm_name in Dorm table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT dorm_name , Count ( * ) FROM Dorm GROUP BY dorm_name"
            ]
        },
        {
            "id": "task077-58c36bef44d341b982b321bbd7c224bf",
            "input": "find the product_name, typical_selling_price of Products table",
            "output": [
                "SELECT product_name , typical_selling_price FROM Products"
            ]
        },
        {
            "id": "task077-60838f87455b455fad40b835079ccb0f",
            "input": "Step 1: find the staff_id of Staff_Department_Assignments table.\nStep 2: find the staff_name, staff_gender of Staff table whose Staff's staff_id not one of the results of step 1",
            "output": [
                "SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 WHERE T1.staff_id NOT IN ( SELECT T2.staff_id FROM Staff_Department_Assignments AS T2 )"
            ]
        },
        {
            "id": "task077-c86837dbe0fb4a11b8d1230734c228f1",
            "input": "Step 1: find the number of rows of each value of ID in stadium table.\nStep 2: find name of stadium table with largest value in the results of step 1",
            "output": [
                "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e5e1b49481c9480bb38f5d71dd9b55b8",
            "input": "find each value of Founder in Manufacturers table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Founder FROM Manufacturers GROUP BY Founder"
            ]
        },
        {
            "id": "task077-8efa340260a8492f9a3a03af885608aa",
            "input": "find the Name of Products table for which Price greater than 200",
            "output": [
                "SELECT Name FROM Products WHERE Price > 200"
            ]
        },
        {
            "id": "task077-aa93a776b01f4627a6530352815f50f4",
            "input": "Step 1: find the Country_ID of roller_coaster table for which Height greater than 3000.\nStep 2: find the number of rows in country table whose Country_ID not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM country AS T1 WHERE T1.Country_ID NOT IN ( SELECT T2.Country_ID FROM roller_coaster AS T2 WHERE T2.Height > 3000 )"
            ]
        },
        {
            "id": "task077-83ea3170995c4958bbecea7c3e44babd",
            "input": "Step 1: For each row in Tryout table, find corresponding rows in College table and in Player table.\nStep 2: find the average HS in the results of step 1 whose state equals no",
            "output": [
                "SELECT Avg ( T2.HS ) FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T1.state = \"no\""
            ]
        },
        {
            "id": "task077-a21773ad605e48a6adde768459f3eebc",
            "input": "find the number of rows in Characteristics table whose characteristic_data_type equals flax",
            "output": [
                "SELECT Count ( * ) FROM Characteristics WHERE characteristic_data_type = \"flax\""
            ]
        },
        {
            "id": "task077-8f68b69820fc45cc95df420a16af74e4",
            "input": "Step 1: For each row in Manufacturers table, find the corresponding rows in Products table.\nStep 2: find Manufacturers's Name, Revenue of the results of step 1 with smallest value of Price",
            "output": [
                "SELECT T1.Name , T1.Revenue FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer ORDER BY T2.Price Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-50660f21bcef4656ac76cdadb176c88c",
            "input": "find the number of rows in book_club table",
            "output": [
                "SELECT Count ( * ) FROM book_club"
            ]
        },
        {
            "id": "task077-c4c82b38d6b6437c90b2ba66c4f2e1a1",
            "input": "find each value of Headquarter in Manufacturers table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Headquarter FROM Manufacturers GROUP BY Headquarter"
            ]
        },
        {
            "id": "task077-84612cdec7424ca08d5cefc50445ad06",
            "input": "find the Name of event table with largest value of Year",
            "output": [
                "SELECT Name FROM event ORDER BY Year Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-db62552fbaf146a49a73c0063f265af7",
            "input": "find the number of rows in Student table whose Age less than 25",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Age < 25"
            ]
        },
        {
            "id": "task077-4e7781416ae546e78412c3858a2548b6",
            "input": "find without repetition the membership_amount of branch table",
            "output": [
                "SELECT DISTINCT membership_amount FROM branch"
            ]
        },
        {
            "id": "task077-8fce7135f535465dadc5d642fb112c6a",
            "input": "Step 1: find the cName of Tryout table.\nStep 2: find the pName, HS of Player table whose Player's pID one of the results of step 1",
            "output": [
                "SELECT T1.pName , T1.HS FROM Player AS T1 WHERE T1.pID IN ( SELECT T2.cName FROM Tryout AS T2 )"
            ]
        },
        {
            "id": "task077-23fca04daf4f434099e181b423e02d7c",
            "input": "find Starting_Year of technician table whose Team equals CWS or Team equals CLE",
            "output": [
                "SELECT Starting_Year FROM technician WHERE Team = \"CLE\" OR Team = \"CWS\""
            ]
        },
        {
            "id": "task077-d2a111c7d12948fd9aeae39f920e8310",
            "input": "Step 1: For each row in Documents table, find corresponding rows in Ref_Document_Status table and in Documents_Mailed table.\nStep 2: find document_status_description of the results of step 1 whose Documents_Mailed's document_id equals 1",
            "output": [
                "SELECT T1.document_status_description FROM Ref_Document_Status AS T1 JOIN Documents AS T2 ON T1.document_status_code = T2.document_status_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = 1"
            ]
        },
        {
            "id": "task077-cd3ca22cfc1344d1a32273671fd539fc",
            "input": "Step 1: For each row in Documents table, find corresponding rows in Ref_Shipping_Agents table and in Documents_Mailed table.\nStep 2: find shipping_agent_name of the results of step 1 whose Documents_Mailed's document_id equals 2",
            "output": [
                "SELECT T1.shipping_agent_name FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = 2"
            ]
        },
        {
            "id": "task077-7360f46ce84748a19e17b0c86219165f",
            "input": "Step 1: find the number of rows of each value of Storm_ID in storm table.\nStep 2: find Name, Dates_active, Number_Deaths in storm table whose corresponding value in step 1 is greater than or equals 1",
            "output": [
                "SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Storm_ID HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-109f2d330a604e17bc5476f66feb763f",
            "input": "Step 1: For each row in musical table, find the corresponding rows in actor table.\nStep 2: find Nominee of the results of step 1 whose actor's Name equals Tony Award.\nStep 3: find Nominee of the results of step 1 whose actor's Name equals Drama Desk Award.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = \"Tony Award\" INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = \"Drama Desk Award\""
            ]
        },
        {
            "id": "task077-8568d23685094e408793c0871d3728bb",
            "input": "Step 1: find the summation of tot_cred of each value of dept_name in student table.\nStep 2: find name, dept_name of student table ordered ascending by the results of step 1",
            "output": [
                "SELECT name , dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Asc"
            ]
        },
        {
            "id": "task077-88659873862042a3a62f95c07a9e2487",
            "input": "Step 1: find the summation of tot_cred of each value of dept_name in student table.\nStep 2: find dept_name of student table with largest value in the results of step 1",
            "output": [
                "SELECT dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-edd2f0367464495b8f42106dabfc1f2f",
            "input": "find the maximum Milliseconds and the minimum Milliseconds in Track table",
            "output": [
                "SELECT Max ( Milliseconds ) , Min ( Milliseconds ) FROM Track"
            ]
        },
        {
            "id": "task077-61643d17b7f340f896154f8a39e8991f",
            "input": "find each value of employee_id in Circulation_History table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT employee_id , Count ( * ) FROM Circulation_History GROUP BY employee_id"
            ]
        },
        {
            "id": "task077-6f2b947216c942a6a3e0428139495b90",
            "input": "find the Team_Name of basketball_match table ordered descending by Team_Name",
            "output": [
                "SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc"
            ]
        },
        {
            "id": "task077-62c8d78d758c406ca376d9480ada6617",
            "input": "Step 1: For each row in Discount_Coupons table, find the corresponding rows in Customers table.\nStep 2: find coupon_amount of the results of step 1 whose first_name equals good.\nStep 3: find coupon_amount of the results of step 1 whose first_name equals bad.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = \"good\" INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = \"bad\""
            ]
        },
        {
            "id": "task077-b83d85ebe46e48059c529913807ee47d",
            "input": "Step 1: For each row in races table, find corresponding rows in circuits table and in constructorStandings table.\nStep 2: find the maximum positionText in the results of step 1 whose country equals Monaco Grand Prix",
            "output": [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = \"Monaco Grand Prix\""
            ]
        },
        {
            "id": "task077-6441c72fb01c4e0384963ed160194c81",
            "input": "find the country of circuits table ordered ascending by country",
            "output": [
                "SELECT country FROM circuits ORDER BY country Asc"
            ]
        },
        {
            "id": "task077-96cb5929e6964c409a093547e59eee43",
            "input": "Step 1: find the Company of entrepreneur table.\nStep 2: For each row in people table, find the corresponding rows in entrepreneur table.\nStep 3: find Company of the results of step 2 whose Name equals Rachel Elnaugh.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.Company FROM entrepreneur AS T1 EXCEPT SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name = \"Rachel Elnaugh\""
            ]
        },
        {
            "id": "task077-8411f30a03584fe38a6810a371f51fe1",
            "input": "find the average Milliseconds and the average Milliseconds in Track table",
            "output": [
                "SELECT Avg ( Milliseconds ) , Avg ( Milliseconds ) FROM Track"
            ]
        },
        {
            "id": "task077-ab3441a36b764dffacd1bca0eeca444b",
            "input": "find the student_id of Student_Course_Registrations table",
            "output": [
                "SELECT student_id FROM Student_Course_Registrations"
            ]
        },
        {
            "id": "task077-343267bfbf6b4ecba92e1b9ca467c56c",
            "input": "find each value of Name in actor table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Name , Count ( * ) FROM actor GROUP BY Name"
            ]
        },
        {
            "id": "task077-be9d3443b64f4b129f0553463ed770e4",
            "input": "find the first_name, last_name of People table",
            "output": [
                "SELECT first_name , last_name FROM People"
            ]
        },
        {
            "id": "task077-188673dd6e394931988018c9e3a706cd",
            "input": "find the constructorStandingsId, constructorId of constructorStandings table with largest value of constructorId",
            "output": [
                "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4a68698d7c044360b2fd62f345c257a8",
            "input": "Step 1: find the number of rows of each value of id in browser table.\nStep 2: find id, name of browser table with largest value in the results of step 1",
            "output": [
                "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-18178a92c82c415db8da0c222ac7a7d0",
            "input": "find School of university table whose Founded equals 1850 or Founded less than Public",
            "output": [
                "SELECT School FROM university WHERE Founded = \"Public\" OR Founded < 1850"
            ]
        },
        {
            "id": "task077-935740e952394127bc485f5df2a963b2",
            "input": "find without repetition the country of circuits table for which circuitRef equals or between 2014 and 2017",
            "output": [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN 2017 AND 2014"
            ]
        },
        {
            "id": "task077-4199f1508e5e4c288047a539a586b546",
            "input": "Step 1: For each row in Customer table, find the corresponding rows in Invoice table.\nStep 2: find without repetition FirstName of the results of step 1 whose BillingCountry equals Brazil",
            "output": [
                "SELECT DISTINCT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = \"Brazil\""
            ]
        },
        {
            "id": "task077-531eeb50c09c4587b928b2a13a51a0c7",
            "input": "Step 1: find the cmi_cross_ref_id of CMI_Cross_References table.\nStep 2: find the cmi_cross_ref_id of Rent_Arrears table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Rent_Arrears AS T2"
            ]
        },
        {
            "id": "task077-1dd935a2c566412f95049eb71ea64754",
            "input": "find the average Damage_millions_USD and the maximum Damage_millions_USD in storm table whose Max_speed greater than or equals 1000",
            "output": [
                "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = 1000"
            ]
        },
        {
            "id": "task077-72d0f4073f6c41a69103fd7752048476",
            "input": "find country of circuits table whose lat greater than 2017 and circuitRef equals Spain",
            "output": [
                "SELECT country FROM circuits WHERE lat > 2017 AND circuitRef = \"Spain\""
            ]
        },
        {
            "id": "task077-a166ac1d93684d7cac8b073f098bc91c",
            "input": "Step 1: find the number of rows of each value of Investor in entrepreneur table.\nStep 2: find Company of entrepreneur table with largest value in the results of step 1",
            "output": [
                "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2245b539e02d4fb99639b912785db8d6",
            "input": "find the Character, Name of actor table",
            "output": [
                "SELECT Character , Name FROM actor"
            ]
        },
        {
            "id": "task077-c3fb992e62cd446da255b4e12ad291ba",
            "input": "find the number of different Region_code in region table",
            "output": [
                "SELECT Count ( DISTINCT Region_code ) FROM region"
            ]
        },
        {
            "id": "task077-3ac856a2e5e342a9964e1c5d8401fb6e",
            "input": "find the Investor of entrepreneur table ordered descending by Money_Requested",
            "output": [
                "SELECT Investor FROM entrepreneur ORDER BY Money_Requested Desc"
            ]
        },
        {
            "id": "task077-01d0ea7246c944dcb9425718000e4297",
            "input": "find the product_description of Products_for_Hire table for which product_name equals 102.76",
            "output": [
                "SELECT product_description FROM Products_for_Hire WHERE product_name = 102.76"
            ]
        },
        {
            "id": "task077-8a24e7e396054662b748fd6817fa5f8e",
            "input": "Step 1: find the Membership_card of member table for which member's Address equals Hartford.\nStep 2: For each row in shop table, find the corresponding rows in member table.\nStep 3: find Membership_card of the results of step 2 whose shop's Address equals Waterbury.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = \"Hartford\" INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = \"Waterbury\""
            ]
        },
        {
            "id": "task077-9e35a74ee0d14f21a2c5d5c7b50b5469",
            "input": "Step 1: For each row in races table, find corresponding rows in circuits table and in constructorStandings table.\nStep 2: find positionText, country of the results of step 1 whose time equals Chinese Grand Prix and country not equals Australian Grand Prix",
            "output": [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T2.time = \"Chinese Grand Prix\" AND T1.country ! = \"Australian Grand Prix\""
            ]
        },
        {
            "id": "task077-ce81f864b3e54f1d9222624e76ee3d18",
            "input": "find the name, Location, Product of enzyme table for which name contains inhibitor",
            "output": [
                "SELECT name , Location , Product FROM enzyme WHERE name LIKE \"inhibitor\""
            ]
        },
        {
            "id": "task077-5b27f7bcdeb444fba9226a304cfc6533",
            "input": "find the Enrollment, School of university table with largest value of Enrollment",
            "output": [
                "SELECT Enrollment , School FROM university ORDER BY Enrollment Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7405e2e7d91244d199745b3f32525585",
            "input": "Step 1: find the name of instructor table.\nStep 2: find the name of instructor table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT name FROM instructor EXCEPT SELECT name FROM instructor"
            ]
        },
        {
            "id": "task077-841461f4a6a246c39fd37546e443698a",
            "input": "Step 1: find the student_id of Student_Course_Attendance table.\nStep 2: find the student_details of Students table whose Students's student_id not one of the results of step 1",
            "output": [
                "SELECT T1.student_details FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )"
            ]
        },
        {
            "id": "task077-4954b051d9584dd29e997a17d0fc06f6",
            "input": "find each value of qualifyId in qualifying table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId"
            ]
        },
        {
            "id": "task077-fb3daca1ce9c442fa20a2b141df2128b",
            "input": "find the country of circuits table for which circuitRef equals or between 2014 and 2017",
            "output": [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN 2017 AND 2014"
            ]
        },
        {
            "id": "task077-f71ddfd4982d4b3eb0093bd648a60fef",
            "input": "find each value of driverRef in drivers table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef"
            ]
        },
        {
            "id": "task077-67f5f70f50724395b76e3c7d108b604b",
            "input": "find the country of circuits table with largest value of lat",
            "output": [
                "SELECT country FROM circuits ORDER BY lat Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ba50d70a64b5448c8b3bee00f26903f5",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Visits_Restaurant table.\nStep 2: find the number of rows of each value of ResID in the results of step 1.\nStep 3: find Fname, LName of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID GROUP BY T2.ResID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8d4773f959d14939a6724cfdbab3df65",
            "input": "find Fname, LName of Student table whose Sex equals F and Age greater than 18",
            "output": [
                "SELECT Fname , LName FROM Student WHERE Sex = \"F\" AND Age > 18"
            ]
        },
        {
            "id": "task077-80d01f5494d740c3a90cc00435de9499",
            "input": "Step 1: For each row in game table, find the corresponding rows in injury_accident table.\nStep 2: find Competition, stadium_id of the results of step 1 whose Injury equals Foot injury or Injury equals Knee problem",
            "output": [
                "SELECT T1.Competition , T1.stadium_id FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.Injury = \"Knee problem\" OR T2.Injury = \"Foot injury\""
            ]
        },
        {
            "id": "task077-55fccbcb3f864a44be7b033939a02655",
            "input": "Step 1: For each row in phone table, find the corresponding rows in phone_market table.\nStep 2: find without repetition Carrier of the results of step 1 whose Num_of_stock greater than 32",
            "output": [
                "SELECT DISTINCT T1.Carrier FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > 32"
            ]
        },
        {
            "id": "task077-4040a03e6915486aa2200fd47e7b0090",
            "input": "find course_id of takes table whose year equals 2010 and semester equals Spring",
            "output": [
                "SELECT course_id FROM takes WHERE year = 2010 AND semester = \"Spring\""
            ]
        },
        {
            "id": "task077-a24406e77bf64da2af4271771154c896",
            "input": "find the role_code of Employees table for which employee_name equals Koby",
            "output": [
                "SELECT role_code FROM Employees WHERE employee_name = \"Koby\""
            ]
        },
        {
            "id": "task077-c2b0d4dbdaa348778a19cd7c21d3e870",
            "input": "Step 1: find the number of rows of each value of Investor in entrepreneur table.\nStep 2: find Entrepreneur_ID of entrepreneur table with largest value in the results of step 1",
            "output": [
                "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-35dbf8ea7ee040e1a3d397e7b5d4cf89",
            "input": "Step 1: For each row in section table, find the corresponding rows in takes table.\nStep 2: find section's sec_id of the results of step 1 whose takes's year equals 2009.\nStep 3: find the takes's course_id of takes table for which takes's year equals 2010.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = 2009 INTERSECT SELECT T2.course_id FROM takes AS T2 WHERE T2.year = 2010"
            ]
        },
        {
            "id": "task077-23ade80b980340da88dd74ac6a853fde",
            "input": "find the number of rows in circuits table whose circuitRef equals Australian Grand Prix and circuitRef equals 2009",
            "output": [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = 2009 AND circuitRef = \"Australian Grand Prix\""
            ]
        },
        {
            "id": "task077-d7099d2e386f455b9aeb5acc626cbbf5",
            "input": "Step 1: find the number of rows of each value of Name in storm table.\nStep 2: find Name, Max_speed of storm table with largest value in the results of step 1",
            "output": [
                "SELECT Name , Max_speed FROM storm GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-be41bb5753894d57a9b41488c77d6db0",
            "input": "find the Party of people table with largest value of Age",
            "output": [
                "SELECT Party FROM people ORDER BY Age Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9ebcd1dc9d524c519f7a531630259769",
            "input": "Step 1: For each row in phone table, find the corresponding rows in phone_market table.\nStep 2: find the  Name in the results of step 1 whose Num_of_stock greater than 2000 ordered descending by Name",
            "output": [
                "SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > 2000 ORDER BY T1.Name Desc"
            ]
        },
        {
            "id": "task077-91fce017924444a5a84fd5115006391e",
            "input": "find Sponsor_name of player table whose Residence equals Brandon or Sponsor_name equals Birtle",
            "output": [
                "SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Sponsor_name = \"Birtle\""
            ]
        },
        {
            "id": "task077-c637d628d95e4834b7920bd8b010fcf9",
            "input": "Step 1: find the Name of people table.\nStep 2: find the Name of people table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM people EXCEPT SELECT Name FROM people"
            ]
        },
        {
            "id": "task077-29f1ff6e264d405faf951590b1afea64",
            "input": "find the average transaction_amount in Financial_Transactions table",
            "output": [
                "SELECT Avg ( transaction_amount ) FROM Financial_Transactions"
            ]
        },
        {
            "id": "task077-94ae86dc1d48461dae81ac7ed8dbec3f",
            "input": "find the name, Client of Web_client_accelerator table for which Connection not equals Broadband",
            "output": [
                "SELECT name , Client FROM Web_client_accelerator WHERE Connection ! = \"Broadband\""
            ]
        },
        {
            "id": "task077-b0b0036c02cd4f34aab0a49b221d3e39",
            "input": "Step 1: For each row in department table, find the corresponding rows in student table.\nStep 2: find the summation of budget of each value of student's dept_name in the results of step 1.\nStep 3: find student's dept_name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name ORDER BY Sum ( T1.budget ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b418114ebf2149478c6bc9b27f8ba3fc",
            "input": "Step 1: For each row in Web_client_accelerator table, find the corresponding rows in accelerator_compatible_browser table.\nStep 2: find Connection, name of the results of step 1 ordered descending by compatible_since_year",
            "output": [
                "SELECT T1.Connection , T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id ORDER BY T2.compatible_since_year Desc"
            ]
        },
        {
            "id": "task077-dfa37dc02afc41f699a3e157f4437d49",
            "input": "Step 1: find the customer_id of Accounts table.\nStep 2: find the number of rows in Customers_Cards table whose Customers_Cards's customer_id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )"
            ]
        },
        {
            "id": "task077-3ded07b95f734ccb8329f7c8edfea938",
            "input": "find each value of building in department table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , budget FROM department GROUP BY building"
            ]
        },
        {
            "id": "task077-bc14431192a8472b975d13174f5641cb",
            "input": "Step 1: find the Address of Customer table for which Country equals Brazil.\nStep 2: For each row in Customer table, find the corresponding rows in Invoice table.\nStep 3: find Address of the results of step 2 whose BillingCountry equals Germany.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Address FROM Customer AS T1 WHERE T1.Country = \"Brazil\" INTERSECT SELECT T1.Address FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = \"Germany\""
            ]
        },
        {
            "id": "task077-173f12fe0f2c40bbb21f5b6c11087eb6",
            "input": "find the country of circuits table for which circuitRef equals 2017",
            "output": [
                "SELECT country FROM circuits WHERE circuitRef = 2017"
            ]
        },
        {
            "id": "task077-90a591a79ccf418a9e2ae11441b299ce",
            "input": "Step 1: For each row in accelerator_compatible_browser table, find corresponding rows in Web_client_accelerator table and in browser table.\nStep 2: find Web_client_accelerator's name of the results of step 1 ordered descending by market_share",
            "output": [
                "SELECT T1.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id ORDER BY T2.market_share Desc"
            ]
        },
        {
            "id": "task077-065cf8c1d1164b1abc7687111b2830a4",
            "input": "Step 1: find the Company of entrepreneur table for which Money_Requested greater than 140000.\nStep 2: find the Company of entrepreneur table for which Money_Requested less than 120000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Company FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < 120000"
            ]
        },
        {
            "id": "task077-34b067c62ec0417ab08e130ddcdf5e4f",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customers_Cards table.\nStep 2: find Customers's customer_id, customer_first_name of the results of step 1 whose card_number not equals Credit",
            "output": [
                "SELECT T1.customer_id , T1.customer_first_name FROM Customers AS T1 JOIN Customers_Cards AS T2 WHERE T2.card_number ! = \"Credit\""
            ]
        },
        {
            "id": "task077-437a1a62a5fe46198181ae0c1072dc43",
            "input": "Step 1: find the Name of actor table for which Character equals Tony Award.\nStep 2: find the Name of actor table for which Character equals Drama Desk Award.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Name FROM actor WHERE Character = \"Tony Award\" INTERSECT SELECT Name FROM actor WHERE Character = \"Drama Desk Award\""
            ]
        },
        {
            "id": "task077-b789e4e2ef01497e9d6864ae85c89244",
            "input": "find the ID of instructor table",
            "output": [
                "SELECT ID FROM instructor"
            ]
        },
        {
            "id": "task077-1217442a7f064c938bf4e159fa3386b1",
            "input": "Step 1: find the number of rows of each value of dept_name in course table.\nStep 2: find title, credits, dept_name in course table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT title , credits , dept_name FROM course GROUP BY dept_name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-92956b15203445219852e8fbac645fd5",
            "input": "Step 1: find the number of rows of each value of Weight in people table.\nStep 2: find Weight of people table with smallest value in the results of step 1",
            "output": [
                "SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-75ef96ac9f024ad090111585231ae9aa",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_id, customer_first_name, customer_last_name in Customers table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-c6b21c517e8142c6a4b07ba6bd58c3ee",
            "input": "Step 1: For each row in section table, find corresponding rows in course table and in takes table.\nStep 2: find title of the results of step 1 whose takes's year equals 2010 and takes's semester equals Chandler",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id JOIN takes AS T3 ON T2.year = T3.year WHERE T3.year = 2010 AND T3.semester = \"Chandler\""
            ]
        },
        {
            "id": "task077-e3476cf05e6a431f834433ac9c3f733b",
            "input": "find each value of dept_name in instructor table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , dept_name FROM instructor GROUP BY dept_name"
            ]
        },
        {
            "id": "task077-81fccc11005d4d879f0b65e99eb6d9f6",
            "input": "find the Membership_card of member table for which Membership_card greater than 5",
            "output": [
                "SELECT Membership_card FROM member WHERE Membership_card > 5"
            ]
        },
        {
            "id": "task077-05794ec8dc8647b3b04cb94098fb173d",
            "input": "Step 1: find the number of rows of each value of name in instructor table.\nStep 2: find name in instructor table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-3145bbafe9f74ea9ac1db766ed1854c7",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Documents_Mailed table.\nStep 2: find address_details of the results of step 1 whose document_id equals 7",
            "output": [
                "SELECT T1.address_details FROM Addresses AS T1 JOIN Documents_Mailed AS T2 ON T1.address_id = T2.mailed_to_address_id WHERE T2.document_id = 7"
            ]
        },
        {
            "id": "task077-aa55bb756f6645f4b89b5f6950dffe56",
            "input": "Step 1: For each row in student table, find the corresponding rows in time_slot table.\nStep 2: find name of the results of step 1 whose day equals 2010.\nStep 3: find name of the results of step 1 whose day equals 2009.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = 2010 INTERSECT SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = 2009"
            ]
        },
        {
            "id": "task077-f07b4a4d8e6a42b19eba41068ad19716",
            "input": "Step 1: For each row in Candidates table, find corresponding rows in People table and in Candidate_Assessments table.\nStep 2: find cell_mobile_number of the results of step 1 whose qualification equals Fail",
            "output": [
                "SELECT T1.cell_mobile_number FROM People AS T1 JOIN Candidates AS T2 ON T1.person_id = T2.candidate_id JOIN Candidate_Assessments AS T3 ON T2.candidate_id = T3.candidate_id WHERE T3.qualification = \"Fail\""
            ]
        },
        {
            "id": "task077-bf4df70adb3148439effd44e232c41ea",
            "input": "Step 1: find the Name of mountain table.\nStep 2: find the Name of mountain table for which Prominence equals 5885.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM mountain EXCEPT SELECT Name FROM mountain WHERE Prominence = 5885"
            ]
        },
        {
            "id": "task077-ae8bb021e33e4540801b946703c2c27e",
            "input": "find the title, title, credits of course table ordered ascending by title",
            "output": [
                "SELECT title , title , credits FROM course ORDER BY title Asc"
            ]
        },
        {
            "id": "task077-ce0088fe53b4478a9fc62e8d06543d66",
            "input": "find the number of rows in musical table",
            "output": [
                "SELECT Count ( * ) FROM musical"
            ]
        },
        {
            "id": "task077-b57f9a870cf549b0b95f9cf5af23eaca",
            "input": "Step 1: For each row in instructor table, find the corresponding rows in teaches table.\nStep 2: find the  name in the results of step 1 whose year equals 2008 ordered ascending by name",
            "output": [
                "SELECT T1.name , T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year = 2008 ORDER BY T1.name Asc"
            ]
        },
        {
            "id": "task077-964dca9730b54a91838131ae22a33bb8",
            "input": "find the number of rows in race table",
            "output": [
                "SELECT Count ( * ) FROM race"
            ]
        },
        {
            "id": "task077-8b53de49fb824b1299064f866d17153c",
            "input": "find the name of student table",
            "output": [
                "SELECT name FROM student"
            ]
        },
        {
            "id": "task077-33f306da90c642cbb8a83a67d3646d16",
            "input": "find the candidate_id of Candidates table for which candidate_details equals stanley.monahan@example.org",
            "output": [
                "SELECT candidate_id FROM Candidates WHERE candidate_details = \"stanley.monahan@example.org\""
            ]
        },
        {
            "id": "task077-3dc61d638bef4edcb4451a9b4041027e",
            "input": "find the id, name, Porphyria of enzyme table ordered descending by name",
            "output": [
                "SELECT id , name , Porphyria FROM enzyme ORDER BY name Desc"
            ]
        },
        {
            "id": "task077-cb755cd354aa4acd8bc82db95f0e29eb",
            "input": "find the Name, Date of race table",
            "output": [
                "SELECT Name , Date FROM race"
            ]
        },
        {
            "id": "task077-cba2fb64a9df4faa9b59d92b358346b8",
            "input": "find the name of instructor table",
            "output": [
                "SELECT name FROM instructor"
            ]
        },
        {
            "id": "task077-0d760e2c6c33422291bb7a44adde4c0b",
            "input": "Step 1: For each row in storm table, find the corresponding rows in affected_region table.\nStep 2: find the number of rows of each value of affected_region's Storm_ID in the results of step 1.\nStep 3: find Name in the results of step 1 whose corresponding value in step 2 is greater than or equals 10",
            "output": [
                "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = 10"
            ]
        },
        {
            "id": "task077-2c460ee30afe4503bd6007ba0e98eedd",
            "input": "find the Name of actor table ordered descending by age",
            "output": [
                "SELECT Name FROM actor ORDER BY age Desc"
            ]
        },
        {
            "id": "task077-dcccbc14f8634e4f80f216885d1adb09",
            "input": "find the Primary_conference of university table with smallest value of Enrollment",
            "output": [
                "SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-268bc19230104a83b3196867a68a9bc9",
            "input": "Step 1: For each row in people table, find the corresponding rows in entrepreneur table.\nStep 2: find Company of the results of step 1 with largest value of Weight",
            "output": [
                "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f0b30e3429934cff8b6b42433c30e109",
            "input": "find the source_system_code, master_customer_id of CMI_Cross_References table",
            "output": [
                "SELECT source_system_code , master_customer_id FROM CMI_Cross_References"
            ]
        },
        {
            "id": "task077-bf19ccd725aa42bd85cef93f55787cc1",
            "input": "find the customer_first_name, customer_last_name of Customers table",
            "output": [
                "SELECT customer_first_name , customer_last_name FROM Customers"
            ]
        },
        {
            "id": "task077-4b1a226a367040618adda41e332b4199",
            "input": "find the name of instructor table with smallest value of salary",
            "output": [
                "SELECT name FROM instructor ORDER BY salary Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-9835540ea671440db0a38c597a2ff378",
            "input": "Step 1: For each row in constructorStandings table, find the corresponding rows in results table.\nStep 2: find constructorStandings's positionText of the results of step 1 whose constructorStandings's position equals 1 and milliseconds greater than 1",
            "output": [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = 1 AND T2.milliseconds > 1"
            ]
        },
        {
            "id": "task077-9bcdc3e8d4954796b9f3636eb3a7a72b",
            "input": "find the title of course table for which dept_name equals International Finance",
            "output": [
                "SELECT title FROM course WHERE dept_name = \"International Finance\""
            ]
        },
        {
            "id": "task077-c9e555500dc144baa1bf668333c17f3c",
            "input": "Step 1: For each row in Ref_Shipping_Agents table, find the corresponding rows in Documents table.\nStep 2: find document_id, document_type_code of the results of step 1 whose shipping_agent_name equals done.\nStep 3: find document_id, document_type_code of the results of step 1 whose shipping_agent_name equals USPS.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = \"done\" INTERSECT SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = \"USPS\""
            ]
        },
        {
            "id": "task077-c1128cf911f44623956ed97e863ac853",
            "input": "find country of circuits table whose lat greater than 2000 and circuitRef equals Spain",
            "output": [
                "SELECT country FROM circuits WHERE lat > 2000 AND circuitRef = \"Spain\""
            ]
        },
        {
            "id": "task077-bf41c53f4de1430c8a218ad17c663cb6",
            "input": "Step 1: find the number of rows of each value of Name in storm table.\nStep 2: find Name, Dates_active, Number_Deaths in storm table whose corresponding value in step 1 is greater than or equals 1",
            "output": [
                "SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Name HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-af3f9d48b56245b89d47a1d24665a899",
            "input": "find the number of different source_system_code in CMI_Cross_References table whose source_system_code equals Rent",
            "output": [
                "SELECT Count ( DISTINCT source_system_code ) FROM CMI_Cross_References WHERE source_system_code = \"Rent\""
            ]
        },
        {
            "id": "task077-e5ef9b2ad6d24d3f933ac58b8fee5323",
            "input": "Step 1: find the number of rows of each value of year in takes table.\nStep 2: find year of takes table with largest value in the results of step 1",
            "output": [
                "SELECT year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-33bb1c889f794b288a9ac8491623bb56",
            "input": "find each value of name in enzyme table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , name FROM enzyme GROUP BY name"
            ]
        },
        {
            "id": "task077-e389d2848db543b3bccac702ef299fa9",
            "input": "Step 1: For each row in section table, find the corresponding rows in takes table.\nStep 2: find the number of rows of each value of takes's semester in the results of step 1.\nStep 3: find takes's semester, section's year of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T2.semester , T1.year FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year GROUP BY T2.semester ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-952d6f04bcc24944a38ff3bebf30919e",
            "input": "Step 1: find the average budget in department table.\nStep 2: For each row in department table, find the corresponding rows in instructor table.\nStep 3: find department's dept_name, instructor's dept_name in the results of step 2 whose budget greater than the results of step 1",
            "output": [
                "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )"
            ]
        },
        {
            "id": "task077-2956155bc06149f8beb4dbcf69869d88",
            "input": "Step 1: find the number of rows of each value of stadium_id in game table.\nStep 2: find id, Score, Date in game table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT id , Score , Date FROM game GROUP BY stadium_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-5e9cf03ce80340f7aef900cd903cdf17",
            "input": "Step 1: For each row in university table, find the corresponding rows in basketball_match table.\nStep 2: find Team_Name, Founded of the results of step 1 with largest value of Founded",
            "output": [
                "SELECT T1.Team_Name , T2.Founded FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-40707d61bd4648b3b0362dda99f4481e",
            "input": "find the number of rows in classroom table",
            "output": [
                "SELECT Count ( * ) FROM classroom"
            ]
        },
        {
            "id": "task077-768464307e8d40b792f759a493733a8f",
            "input": "find course_id of Student_Course_Attendance table whose student_id equals 121 or student_id equals 121",
            "output": [
                "SELECT course_id FROM Student_Course_Attendance WHERE student_id = 121 OR student_id = 121"
            ]
        },
        {
            "id": "task077-9fcee62d74ba4d5198be77e6a078d37e",
            "input": "Step 1: find the number of rows of each value of id in medicine table.\nStep 2: find name in medicine table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT name FROM medicine GROUP BY id HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-0e31dec464b8412ea1b6a2b58082788d",
            "input": "Step 1: find the number of rows of each value of student_id in Student_Course_Attendance table.\nStep 2: find student_id of Student_Course_Attendance table with smallest value in the results of step 1",
            "output": [
                "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-15213b55e3824c4787ff170416ec5351",
            "input": "Step 1: find the number of rows of each value of EmployeeId in Employee table.\nStep 2: find FirstName, EmployeeId in Employee table whose corresponding value in step 1 is greater than or equals 10",
            "output": [
                "SELECT FirstName , EmployeeId FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = 10"
            ]
        },
        {
            "id": "task077-535653f6079d4bffae21e1fa51ba896c",
            "input": "Step 1: For each row in party_host table, find corresponding rows in party table and in host table.\nStep 2: find Party_Theme, Location of the results of step 1 ordered ascending by Age",
            "output": [
                "SELECT T1.Party_Theme , T1.Location FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID ORDER BY T2.Age Asc"
            ]
        },
        {
            "id": "task077-668c720154804cc8a768a9f4be2c3745",
            "input": "Step 1: For each row in races table, find corresponding rows in constructorStandings table and in lapTimes table.\nStep 2: find positionText, name of the results of step 1 whose milliseconds less than 93000",
            "output": [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < 93000"
            ]
        },
        {
            "id": "task077-5349637ac39f49ed96d8d69f7fcd7510",
            "input": "Step 1: For each row in Student_Course_Registrations table, find corresponding rows in Courses table and in Student_Course_Attendance table.\nStep 2: find the number of rows of each value of Student_Course_Attendance's course_id in the results of step 1.\nStep 3: find course_name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id JOIN Student_Course_Attendance AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ba2aeca9f98f4015914f27893d7ebe39",
            "input": "find the account_id, customer_id, account_name, account_name of Accounts table",
            "output": [
                "SELECT account_id , customer_id , account_name , account_name FROM Accounts"
            ]
        },
        {
            "id": "task077-664cfe276c3c4b6dad4785a9d568bf55",
            "input": "find the number of rows in people table",
            "output": [
                "SELECT Count ( * ) FROM people"
            ]
        },
        {
            "id": "task077-317bc10072724091a5c46ac2f965828d",
            "input": "find the number of rows in game table whose Season greater than 2010",
            "output": [
                "SELECT Count ( * ) FROM game WHERE Season > 2010"
            ]
        },
        {
            "id": "task077-83f12e119e764d13b8f529efe6ab7024",
            "input": "find Year_Opened of track table whose Seating greater than 4000 or Seating greater than 5000",
            "output": [
                "SELECT Year_Opened FROM track WHERE Seating > 5000 OR Seating > 4000"
            ]
        },
        {
            "id": "task077-240d56b822b6427fad78db3391c05022",
            "input": "find the number of rows in Type_Of_Restaurant table whose ResTypeID equals Sandwich",
            "output": [
                "SELECT Count ( * ) FROM Type_Of_Restaurant WHERE ResTypeID = \"Sandwich\""
            ]
        },
        {
            "id": "task077-2e5950acb51847d18c283bc8fa9dbd1c",
            "input": "Step 1: For each row in races table, find the corresponding rows in lapTimes table.\nStep 2: find url, races's time of the results of step 1 whose milliseconds greater than 100000",
            "output": [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > 100000"
            ]
        },
        {
            "id": "task077-24abaefd0660492db0c75d8bdaac52ca",
            "input": "Step 1: For each row in department table, find corresponding rows in instructor table and in student table.\nStep 2: find the summation of tot_cred of each value of instructor's name in the results of step 1.\nStep 3: find instructor's name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name GROUP BY T2.name ORDER BY Sum ( T3.tot_cred ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4de7390624614f108ea113aa981ff79d",
            "input": "Step 1: For each row in section table, find the corresponding rows in takes table.\nStep 2: find section's sec_id of the results of step 1 whose takes's year equals 2010 or takes's semester equals Spring",
            "output": [
                "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = 2010 OR T2.semester = \"Spring\""
            ]
        },
        {
            "id": "task077-a9f1c33776714e2fba22375e42e45c6f",
            "input": "find without repetition the Name of mountain table for which Country equals West Germany",
            "output": [
                "SELECT DISTINCT Name FROM mountain WHERE Country = \"West Germany\""
            ]
        },
        {
            "id": "task077-eee875b6b00f486aa3538410a0ee960a",
            "input": "find without repetition the name, Location, Product of enzyme table for which name contains inhibitor",
            "output": [
                "SELECT DISTINCT name , Location , Product FROM enzyme WHERE name LIKE \"inhibitor\""
            ]
        },
        {
            "id": "task077-d1ae1262556b445386dc7c1e8fed9fee",
            "input": "find the summation of budget in department table whose dept_name equals Marketing",
            "output": [
                "SELECT Sum ( budget ) FROM department WHERE dept_name = \"Marketing\""
            ]
        },
        {
            "id": "task077-78c98c8a40bc445ea97b6c09184ca90d",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Visits_Restaurant table.\nStep 2: find Time of the results of step 1 whose Fname equals Linda and LName equals Smith",
            "output": [
                "SELECT T2.Time FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = \"Linda\" AND T1.LName = \"Smith\""
            ]
        },
        {
            "id": "task077-69dc56acf91a44468f9dd2e76e12eaa2",
            "input": "find the average UnitPrice in Track table",
            "output": [
                "SELECT Avg ( UnitPrice ) FROM Track"
            ]
        },
        {
            "id": "task077-88e9ae7ef3634088a1960f93762e50c4",
            "input": "Step 1: find the number of rows of each value of id in medicine table.\nStep 2: find id, name in medicine table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT id , name FROM medicine GROUP BY id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-bf2aaf3423b84f66b4caafd5496fb3f0",
            "input": "find each value of Character in actor table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Name FROM actor GROUP BY Character"
            ]
        },
        {
            "id": "task077-8bfc4226a8864c088ee4dbd3ac412410",
            "input": "find the Name, Date, Date of race table",
            "output": [
                "SELECT Name , Date , Date FROM race"
            ]
        },
        {
            "id": "task077-85a72ea801f642ccbe3048f3afd72e34",
            "input": "Step 1: For each row in Courses table, find the corresponding rows in Student_Course_Registrations table.\nStep 2: find student_id of the results of step 1 whose course_name greater than or equals statistics",
            "output": [
                "SELECT T2.student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name > = \"statistics\""
            ]
        },
        {
            "id": "task077-ed8b5bb853c641baaa410177c83eed5e",
            "input": "find the student_id of Student_Course_Registrations table ordered ascending by registration_date",
            "output": [
                "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Asc"
            ]
        },
        {
            "id": "task077-16f5b4dcf5f847aab88a5b489894a80b",
            "input": "Step 1: For each row in Student_Course_Registrations table, find the corresponding rows in Student_Course_Attendance table.\nStep 2: find Student_Course_Attendance's student_id of the results of step 1 with largest value of registration_date",
            "output": [
                "SELECT T2.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T1.registration_date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-63f155b2739c45a2876300163877658b",
            "input": "Step 1: For each row in races table, find corresponding rows in circuits table and in pitStops table.\nStep 2: find country, lat of the results of step 1 with largest value of milliseconds",
            "output": [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6fb39ba6b0884e4cbb8d251bc949909d",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Visits_Restaurant table.\nStep 2: find Fname, LName of the results of step 1 whose Spent equals 600",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T2.Spent = 600"
            ]
        },
        {
            "id": "task077-abf7a82ac61148c9adabc838317ebc9f",
            "input": "Step 1: For each row in Customers_Cards table, find the corresponding rows in Financial_Transactions table.\nStep 2: find the number of rows of each value of transaction_type in the results of step 1.\nStep 3: find card_type_code in the results of step 1 whose corresponding value in step 2 is greater than or equals 5",
            "output": [
                "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type HAVING Count ( * ) > = 5"
            ]
        },
        {
            "id": "task077-253e50e38d4e42ffa632ce45e6294428",
            "input": "find the Location, Location of university table",
            "output": [
                "SELECT Location , Location FROM university"
            ]
        },
        {
            "id": "task077-8025cd76a6d4490a82aeb8cde8cb0c1e",
            "input": "Step 1: find the number of rows of each value of cmi_cross_ref_id in CMI_Cross_References table.\nStep 2: find cmi_cross_ref_id, source_system_code in CMI_Cross_References table whose corresponding value in step 1 is greater than or equals 1",
            "output": [
                "SELECT cmi_cross_ref_id , source_system_code FROM CMI_Cross_References GROUP BY cmi_cross_ref_id HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-f5f0faae430b42d9bd1f63bb90ed8901",
            "input": "Step 1: For each row in section table, find the corresponding rows in takes table.\nStep 2: find section's sec_id of the results of step 1 whose takes's year not equals 2010",
            "output": [
                "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = 2010"
            ]
        },
        {
            "id": "task077-726becc9ee2f43dd9c2e5ad39bd7ca0e",
            "input": "Step 1: For each row in Products_Booked table, find corresponding rows in Bookings table and in Products_for_Hire table.\nStep 2: find booking_start_date, booking_start_date of the results of step 1 whose product_name equals Book collection A",
            "output": [
                "SELECT T1.booking_start_date , T1.booking_start_date FROM Bookings AS T1 JOIN Products_for_Hire AS T2 JOIN Products_Booked AS T3 ON T1.booking_id = T3.booking_id AND T3.product_id = T2.product_id WHERE T2.product_name = \"Book collection A\""
            ]
        },
        {
            "id": "task077-5cd653085a274c568e6d9d547be5be6c",
            "input": "Step 1: find the Chromosome of enzyme table.\nStep 2: find the number of rows in enzyme table whose id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Chromosome FROM enzyme )"
            ]
        },
        {
            "id": "task077-337b55da8ecd493eab0e0c8a01b513a5",
            "input": "find qualifyId, constructorId of qualifying table whose number equals France or number equals Belgium",
            "output": [
                "SELECT qualifyId , constructorId FROM qualifying WHERE number = \"Belgium\" OR number = \"France\""
            ]
        },
        {
            "id": "task077-b58e163f687c4f47a165268b8051cb14",
            "input": "Step 1: For each row in medicine_enzyme_interaction table, find corresponding rows in medicine table and in enzyme table.\nStep 2: find enzyme's name of the results of step 1 whose Porphyria equals Amisulpride and medicine's name contains inhibitor",
            "output": [
                "SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = \"Amisulpride\" AND T1.name LIKE \"inhibitor\""
            ]
        },
        {
            "id": "task077-1f4694b357b0451dabf66c95213b64c8",
            "input": "find the average Max_speed and the maximum Damage_millions_USD in storm table whose Max_speed greater than 1000",
            "output": [
                "SELECT Avg ( Max_speed ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > 1000"
            ]
        },
        {
            "id": "task077-86c9750ad1cd4c10916d066c7c328a5d",
            "input": "Step 1: For each row in department table, find corresponding rows in course table and in student table.\nStep 2: find name of the results of step 1 whose course's dept_name equals International Finance",
            "output": [
                "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = \"International Finance\""
            ]
        },
        {
            "id": "task077-219c7cc550d44762a5dbc1b0009dc471",
            "input": "Step 1: find the medicine's id of medicine table for which FDA_approved equals No.\nStep 2: find the number of rows in enzyme table whose enzyme's id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM enzyme AS T1 WHERE T1.id NOT IN ( SELECT T2.id FROM medicine AS T2 WHERE T2.FDA_approved = \"No\" )"
            ]
        },
        {
            "id": "task077-d06fd8070e6e4dbaad8b3c61abf582c3",
            "input": "find the name of enzyme table for which Porphyria contains ALA",
            "output": [
                "SELECT name FROM enzyme WHERE Porphyria LIKE \"ALA\""
            ]
        },
        {
            "id": "task077-6bfc179d8dc8453b99bec50c50a451a6",
            "input": "Step 1: find the ID of takes table.\nStep 2: find the name of student table whose student's ID not one of the results of step 1",
            "output": [
                "SELECT T1.name FROM student AS T1 WHERE T1.ID NOT IN ( SELECT T2.ID FROM takes AS T2 )"
            ]
        },
        {
            "id": "task077-95e700f32447435e80e866a24228d322",
            "input": "Step 1: For each row in Courses table, find the corresponding rows in Student_Course_Registrations table.\nStep 2: for each value of Student_Course_Registrations's course_id in the results of step 1, find the number of rows along with Courses's course_id and course_name",
            "output": [
                "SELECT T1.course_id , T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id"
            ]
        },
        {
            "id": "task077-32a273f11e25415a9860d6c619e8d211",
            "input": "find the name of races table ordered ascending by name",
            "output": [
                "SELECT name FROM races ORDER BY name Asc"
            ]
        },
        {
            "id": "task077-be888548becf402cb342fa2b24a5aea2",
            "input": "Step 1: find the Nationality of host table for which Age less than 45.\nStep 2: find the Nationality of host table for which Age greater than 35.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Nationality FROM host WHERE Age < 45 INTERSECT SELECT Nationality FROM host WHERE Age > 35"
            ]
        },
        {
            "id": "task077-943a4f7d366a4fa99c3f5121b9f625c1",
            "input": "find the dept_name, building of department table ordered ascending by budget",
            "output": [
                "SELECT dept_name , building FROM department ORDER BY budget Asc"
            ]
        },
        {
            "id": "task077-9b3dd62db71e4be78f54490e768ff520",
            "input": "Step 1: For each row in section table, find corresponding rows in course table and in takes table.\nStep 2: find title of the results of step 1 whose takes's year equals 2010 and building equals Chandler",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id AND T1.course_id = T2.course_id JOIN takes AS T3 ON T2.year = T3.year WHERE T3.year = 2010 AND T2.building = \"Chandler\""
            ]
        },
        {
            "id": "task077-a23c55a35ce04d8880f1bd5363cbd107",
            "input": "Step 1: For each row in people table, find the corresponding rows in entrepreneur table.\nStep 2: find Date_of_Birth of the results of step 1 whose Company equals Simon Woodroffe or Company equals Peter Jones",
            "output": [
                "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Company = \"Peter Jones\" OR T1.Company = \"Simon Woodroffe\""
            ]
        },
        {
            "id": "task077-9e9ae4879c104cba92e76fc4a8127883",
            "input": "Step 1: find the rows of circuits table for which circuitRef equals 2009.\nStep 2: find the number of rows in circuits table whose rows not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = 2009 )"
            ]
        },
        {
            "id": "task077-ece4f539888d4bb9969a384cb718924d",
            "input": "Step 1: For each row in stadium table, find the corresponding rows in game table.\nStep 2: find Season of the results of step 1 whose name equals Walter Samuel",
            "output": [
                "SELECT T2.Season FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T1.name = \"Walter Samuel\""
            ]
        },
        {
            "id": "task077-a0f1d0002ceb4f8fa2c95bffcef618c9",
            "input": "Step 1: For each row in people table, find the corresponding rows in debate_people table.\nStep 2: find each value of Affirmative in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.Name , Count ( * ) FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Affirmative GROUP BY T2.Affirmative"
            ]
        },
        {
            "id": "task077-46c7c0b6a5334c1fb33df8dead2700d3",
            "input": "find the Company of entrepreneur table for which Investor not equals Rachel Elnaugh",
            "output": [
                "SELECT Company FROM entrepreneur WHERE Investor ! = \"Rachel Elnaugh\""
            ]
        },
        {
            "id": "task077-a25c788c62814eb09a7e94b325b88667",
            "input": "find the Milliseconds, Milliseconds of Track table with smallest value of Milliseconds",
            "output": [
                "SELECT Milliseconds , Milliseconds FROM Track ORDER BY Milliseconds Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-13ca931df9c94841bcbd63b4bbbed543",
            "input": "Step 1: find the document_id of Documents table for which document_type_code equals done.\nStep 2: find the document_id of Documents table for which document_type_code equals USPS.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT document_id FROM Documents WHERE document_type_code = \"done\" EXCEPT SELECT document_id FROM Documents WHERE document_type_code = \"USPS\""
            ]
        },
        {
            "id": "task077-72ecb9bb37a64534b3d589db38171398",
            "input": "Step 1: find the number of rows of each value of Investor in entrepreneur table.\nStep 2: find Company in entrepreneur table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-fe7a8bf0b02b4558951ca36ed3029191",
            "input": "find without repetition the customer_first_name, customer_last_name of Customers table",
            "output": [
                "SELECT DISTINCT customer_first_name , customer_last_name FROM Customers"
            ]
        },
        {
            "id": "task077-351fea3f3d554e42b5781dbf7cfab55e",
            "input": "find the Email of Customer table for which City equals NY",
            "output": [
                "SELECT Email FROM Customer WHERE City = \"NY\""
            ]
        },
        {
            "id": "task077-d698092552bc4bba97593d9ad779ca9a",
            "input": "Step 1: For each row in technician table, find the corresponding rows in repair_assignment table.\nStep 2: find each value of repair_assignment's technician_id in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.Name , Count ( * ) FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id GROUP BY T2.technician_id"
            ]
        },
        {
            "id": "task077-6f88660a7c3940988a08d695bf9af00d",
            "input": "Step 1: find the number of rows of each value of EmployeeId in Employee table.\nStep 2: find FirstName, ReportsTo in Employee table whose corresponding value in step 1 is greater than or equals 10",
            "output": [
                "SELECT FirstName , ReportsTo FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = 10"
            ]
        },
        {
            "id": "task077-0ac629e3e63742318a6ba1ec38de8b95",
            "input": "find the Milliseconds, TrackId of Track table with smallest value of Milliseconds",
            "output": [
                "SELECT Milliseconds , TrackId FROM Track ORDER BY Milliseconds Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-4f7395c5fc924e4b9fac334858e984e0",
            "input": "find the Company of entrepreneur table",
            "output": [
                "SELECT Company FROM entrepreneur"
            ]
        },
        {
            "id": "task077-5bccbfbd5a464943808603c693ced256",
            "input": "Step 1: find the Invoice's CustomerId of Invoice table for which Total less than 20.\nStep 2: find the LastName of Customer table whose Customer's CustomerId not one of the results of step 1",
            "output": [
                "SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total < 20 )"
            ]
        },
        {
            "id": "task077-b0a71f1551464f8890c34cdc6e08bcb3",
            "input": "find the number of rows in bank table",
            "output": [
                "SELECT Count ( * ) FROM bank"
            ]
        },
        {
            "id": "task077-a1a1521d0f0b4c228706afd796edd03b",
            "input": "find the Name, Max_speed of storm table with largest value of Max_speed",
            "output": [
                "SELECT Name , Max_speed FROM storm ORDER BY Max_speed Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-db369aa6c64e40b9b4e76de62daeb601",
            "input": "Step 1: For each row in game table, find corresponding rows in stadium table and in injury_accident table.\nStep 2: find name of the results of step 1 whose Away_team equals Thiago Motta and Player equals Walter Samuel",
            "output": [
                "SELECT T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id AND T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T2.Away_team = \"Thiago Motta\" AND T3.Player = \"Walter Samuel\""
            ]
        },
        {
            "id": "task077-ccc55b53c1164f49a358eb6bbf8a491c",
            "input": "find the candidate_id of Candidate_Assessments table for which qualification equals Pass",
            "output": [
                "SELECT candidate_id FROM Candidate_Assessments WHERE qualification = \"Pass\""
            ]
        },
        {
            "id": "task077-77aeb0ef371a43d2907f920c2d99eceb",
            "input": "find each value of transaction_type in Financial_Transactions table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type"
            ]
        },
        {
            "id": "task077-c17eda74092f4a8ab0a67ba8f4aec41d",
            "input": "Step 1: find the course_id of prereq table.\nStep 2: find the sec_id of section table whose section's course_id not one of the results of step 1",
            "output": [
                "SELECT T1.sec_id FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )"
            ]
        },
        {
            "id": "task077-dc5bff7f2c1e4445a41a1870f50571ad",
            "input": "Step 1: For each row in storm table, find the corresponding rows in affected_region table.\nStep 2: find the number of rows of each value of affected_region's Storm_ID in the results of step 1.\nStep 3: find Name in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-4f21e14693f441ac9598b1cd4532758b",
            "input": "Step 1: For each row in department table, find the corresponding rows in student table.\nStep 2: find each value of student's dept_name in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T1.budget FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name"
            ]
        },
        {
            "id": "task077-42699320010246a284064a6474449532",
            "input": "Step 1: For each row in drivers table, find the corresponding rows in lapTimes table.\nStep 2: find without repetition drivers's driverId, driverRef of the results of step 1 whose milliseconds greater than 100000",
            "output": [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > 100000"
            ]
        },
        {
            "id": "task077-765c81330ade49bbadaaed1a8176909e",
            "input": "find the title of course table for which title equals Mobile Computing",
            "output": [
                "SELECT title FROM course WHERE title = \"Mobile Computing\""
            ]
        },
        {
            "id": "task077-e7309782cc7242859b50afec751d654e",
            "input": "Step 1: find the number of rows of each value of ArtistId in Artist table.\nStep 2: find Name, ArtistId in Artist table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT Name , ArtistId FROM Artist GROUP BY ArtistId HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-33ca96f69aba41339cbd2eb186260cad",
            "input": "Step 1: For each row in medicine_enzyme_interaction table, find corresponding rows in medicine table and in enzyme table.\nStep 2: find enzyme's name, Trade_Name of the results of step 1 whose FDA_approved equals Yes",
            "output": [
                "SELECT T2.name , T1.Trade_Name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = \"Yes\""
            ]
        },
        {
            "id": "task077-e3341c73bfd34db5ae58a8e0093c84fc",
            "input": "find the Company of entrepreneur table ordered descending by Money_Requested",
            "output": [
                "SELECT Company FROM entrepreneur ORDER BY Money_Requested Desc"
            ]
        },
        {
            "id": "task077-36f4c1c8dd3c46939c0ce7489823959e",
            "input": "find the Starting_Year of technician table with smallest value of Age",
            "output": [
                "SELECT Starting_Year FROM technician ORDER BY Age Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-7b2b4ed75c4d4d5db66b1abbc8f9bda6",
            "input": "Step 1: find the employee_name of Employees table.\nStep 2: find the employee_name of Employees table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT employee_name FROM Employees EXCEPT SELECT employee_name FROM Employees"
            ]
        },
        {
            "id": "task077-d3bc4de1794d4684919b2517a78d5ee5",
            "input": "find each value of Region_code in region table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Region_code , Count ( * ) FROM region GROUP BY Region_code"
            ]
        },
        {
            "id": "task077-a2bc2a797f1c40819c4699e2bf60f85b",
            "input": "Step 1: find the ArtistId of Album table.\nStep 2: find the Name of Artist table whose Artist's ArtistId not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM Artist AS T1 WHERE T1.ArtistId NOT IN ( SELECT T2.ArtistId FROM Album AS T2 )"
            ]
        },
        {
            "id": "task077-bb9e94d9ae3a41b096c721f8750cab0e",
            "input": "find the shipping_agent_code of Documents table for which receipt_number equals UPS",
            "output": [
                "SELECT shipping_agent_code FROM Documents WHERE receipt_number = \"UPS\""
            ]
        },
        {
            "id": "task077-372b0596aa58425fb114da2288302b53",
            "input": "Step 1: find the number of rows of each value of url in races table.\nStep 2: find circuitId, name of races table with smallest value in the results of step 1",
            "output": [
                "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-cd879621c8a24d748246553a203c94a0",
            "input": "Step 1: For each row in track table, find the corresponding rows in race table.\nStep 2: find track's Name, Location of the results of step 1 whose Class equals 1",
            "output": [
                "SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Class = 1"
            ]
        },
        {
            "id": "task077-972cb8ded0f6459c849750ac922f71ae",
            "input": "find the Player_name, Sponsor_name of player table for which Occupation not equals Researcher",
            "output": [
                "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = \"Researcher\""
            ]
        },
        {
            "id": "task077-be6041664d5b4cf69af7622567bb1b7a",
            "input": "Step 1: find the number of rows of each value of id in stadium table.\nStep 2: find id, name of stadium table with largest value in the results of step 1",
            "output": [
                "SELECT id , name FROM stadium GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-732e0adf976046e5bc8277496adf5824",
            "input": "Step 1: For each row in CMI_Cross_References table, find corresponding rows in Customer_Master_Index table and in Parking_Fines table.\nStep 2: find council_tax_id of the results of step 1 whose cmi_details equals Schmitt-Lang.\nStep 3: find council_tax_id of the results of step 1 whose cmi_details equals Schmidt ,  Kertzmann and Lubowitz.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = \"Schmitt-Lang\" EXCEPT SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = \"Schmidt ,  Kertzmann and Lubowitz\""
            ]
        },
        {
            "id": "task077-11946858b6b54e72809f0ba99e59aa7b",
            "input": "find the Founded of university table with largest value of Enrollment",
            "output": [
                "SELECT Founded FROM university ORDER BY Enrollment Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c521525f4d174a77b7361ed70bce20ec",
            "input": "Step 1: For each row in Roles table, find the corresponding rows in Employees table.\nStep 2: for each value of Employees's role_code in the results of step 1, find the number of rows along with role_description and employee_id",
            "output": [
                "SELECT T1.role_description , T2.employee_id , Count ( * ) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code"
            ]
        },
        {
            "id": "task077-43ea946c98454e90b98fbbd87c8f8ca9",
            "input": "find the Location of perpetrator table with largest value of Injured",
            "output": [
                "SELECT Location FROM perpetrator ORDER BY Injured Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e6766639b1e14a5ea92abbc10cfcfc78",
            "input": "find title of course table whose dept_name equals Psychology and dept_name not equals Statistics",
            "output": [
                "SELECT title FROM course WHERE dept_name = \"Statistics\" AND dept_name ! = \"Psychology\""
            ]
        },
        {
            "id": "task077-9f680732a00e4d55a0078104f6bec0d3",
            "input": "Step 1: For each row in instructor table, find the corresponding rows in advisor table.\nStep 2: find i_ID of the results of step 1 whose dept_name equals History",
            "output": [
                "SELECT T2.i_ID FROM instructor AS T1 JOIN advisor AS T2 ON T1.ID = T2.i_ID WHERE T1.dept_name = \"History\""
            ]
        },
        {
            "id": "task077-fb1fa254bc264684a0689623e65ee69c",
            "input": "find the Region_name of region table for which Region_code not equals Denmark",
            "output": [
                "SELECT Region_name FROM region WHERE Region_code ! = \"Denmark\""
            ]
        },
        {
            "id": "task077-8b8d939b1b2a4cbc97c8707a77283654",
            "input": "Step 1: For each row in party table, find the corresponding rows in party_host table.\nStep 2: find the number of rows of each value of party_host's Party_ID in the results of step 1.\nStep 3: find Party_Theme in the results of step 1 whose corresponding value in step 2 is greater than 20",
            "output": [
                "SELECT T1.Party_Theme FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID HAVING Count ( * ) > 20"
            ]
        },
        {
            "id": "task077-578b1987b6e6495a875e1b7e8a621577",
            "input": "find the School, Location of university table",
            "output": [
                "SELECT School , Location FROM university"
            ]
        },
        {
            "id": "task077-170367dad5f74097a95b62408184178e",
            "input": "find the number of rows in Customers table whose customer_first_name equals Blanche and customer_last_name equals Huels",
            "output": [
                "SELECT Count ( * ) FROM Customers WHERE customer_first_name = \"Blanche\" AND customer_last_name = \"Huels\""
            ]
        },
        {
            "id": "task077-41ad926663e944449fe4d8b75160a579",
            "input": "find the number of different Advisor in Student table",
            "output": [
                "SELECT Count ( DISTINCT Advisor ) FROM Student"
            ]
        },
        {
            "id": "task077-fc34f8b31ef04f1fb35c71ed473d5e93",
            "input": "Step 1: For each row in people table, find the corresponding rows in perpetrator table.\nStep 2: find Height of the results of step 1 ordered descending by Killed",
            "output": [
                "SELECT T2.Height FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Desc"
            ]
        },
        {
            "id": "task077-a47674c889144dd9992c895494782aa3",
            "input": "Step 1: find the sec_id of section table.\nStep 2: find the course_id of takes table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.sec_id FROM section AS T1 EXCEPT SELECT T2.course_id FROM takes AS T2"
            ]
        },
        {
            "id": "task077-3e7913b8a3cf4aaa93f774d1e8906abe",
            "input": "find the number of rows in university table whose Location equals NY",
            "output": [
                "SELECT Count ( * ) FROM university WHERE Location = \"NY\""
            ]
        },
        {
            "id": "task077-b45b0e94b0a5426595689b09087862cf",
            "input": "find the name of instructor table for which dept_name equals Math ordered ascending by salary",
            "output": [
                "SELECT name FROM instructor WHERE dept_name = \"Math\" ORDER BY salary Asc"
            ]
        },
        {
            "id": "task077-719749f094634fb3abd712471ff75666",
            "input": "find each value of card_type_code in Customers_Cards table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code"
            ]
        },
        {
            "id": "task077-97e1123f086c47be9419bc81a8d3a7f6",
            "input": "Step 1: For each row in Accounts table, find the corresponding rows in Customers table.\nStep 2: find the number of rows of each value of Accounts's customer_id in the results of step 1.\nStep 3: find Accounts's customer_id, customer_first_name, customer_last_name of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 GROUP BY T1.customer_id ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-66c5069a26864b7e92a352163d675f1e",
            "input": "Step 1: For each row in people table, find the corresponding rows in perpetrator table.\nStep 2: find Name of the results of step 1 whose Country equals China or Location equals Japan",
            "output": [
                "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = \"China\" OR T1.Location = \"Japan\""
            ]
        },
        {
            "id": "task077-011a872fef32469cae6f6bffbb9ba462",
            "input": "find country of circuits table whose lat greater than 2000 and circuitRef greater than Spain",
            "output": [
                "SELECT country FROM circuits WHERE lat > 2000 AND circuitRef > \"Spain\""
            ]
        },
        {
            "id": "task077-7de06f93e3d143bc9a7fd651a4971dc1",
            "input": "Step 1: find the Name of actor table.\nStep 2: find the Name of actor table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM actor EXCEPT SELECT Name FROM actor"
            ]
        },
        {
            "id": "task077-2e1d36778a1a4f329e1bc754e4d4cc02",
            "input": "Step 1: For each row in classroom table, find the corresponding rows in time_slot table.\nStep 2: find the number of rows in the results of step 1 whose end_hr greater than 50 and building equals Alumni",
            "output": [
                "SELECT Count ( * ) FROM classroom AS T1 JOIN time_slot AS T2 WHERE T2.end_hr > 50 AND T1.building = \"Alumni\""
            ]
        },
        {
            "id": "task077-67cd0f9ea9884fb8993e15496c750138",
            "input": "Step 1: For each row in enzyme table, find the corresponding rows in medicine_enzyme_interaction table.\nStep 2: find Product, Chromosome, interaction_type of the results of step 1 whose Location equals Cytosol",
            "output": [
                "SELECT T1.Product , T1.Chromosome , T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.Location = \"Cytosol\""
            ]
        },
        {
            "id": "task077-58f29437d6b64887877acd66e7b6cb28",
            "input": "find the title of course table for which dept_name equals Mobile Computing",
            "output": [
                "SELECT title FROM course WHERE dept_name = \"Mobile Computing\""
            ]
        },
        {
            "id": "task077-e57eefe4c3294a54bb4d0e41a934e233",
            "input": "find each value of student_id in Student_Course_Attendance table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT student_id , Count ( * ) FROM Student_Course_Attendance GROUP BY student_id"
            ]
        },
        {
            "id": "task077-7f0f8aca7aac428685fee77cda1cc448",
            "input": "find the Name of storm table for which Dates_active equals Denmark",
            "output": [
                "SELECT Name FROM storm WHERE Dates_active = \"Denmark\""
            ]
        },
        {
            "id": "task077-1f81d74bdcc24a229400ecb45234d970",
            "input": "find the source_system_code, cmi_cross_ref_id of CMI_Cross_References table ordered ascending by source_system_code",
            "output": [
                "SELECT source_system_code , cmi_cross_ref_id FROM CMI_Cross_References ORDER BY source_system_code Asc"
            ]
        },
        {
            "id": "task077-467219f2cba8476899e689960c4c6c7a",
            "input": "Step 1: For each row in Customers_Cards table, find the corresponding rows in Financial_Transactions table.\nStep 2: find the number of rows of each value of transaction_type in the results of step 1.\nStep 3: find card_type_code of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d3934ff91d3c4c638a7e0006922c26f2",
            "input": "find the number of rows in Documents_Mailed table whose document_id equals 2",
            "output": [
                "SELECT Count ( * ) FROM Documents_Mailed WHERE document_id = 2"
            ]
        },
        {
            "id": "task077-d09a360ce3044d3b9c3e3250aaf9174f",
            "input": "Step 1: For each row in accelerator_compatible_browser table, find corresponding rows in Web_client_accelerator table and in browser table.\nStep 2: find browser's name of the results of step 1 whose Connection equals Fasterfox and Web_client_accelerator's name equals CACHEbox",
            "output": [
                "SELECT T2.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id WHERE T1.Connection = \"Fasterfox\" AND T1.name = \"CACHEbox\""
            ]
        },
        {
            "id": "task077-37ba2f2737fd40ecad335c4a196f962a",
            "input": "find the number of rows in classroom table whose capacity greater than 50 and capacity less than Lamberton",
            "output": [
                "SELECT Count ( * ) FROM classroom WHERE capacity > \"Lamberton\" AND capacity < 50"
            ]
        },
        {
            "id": "task077-478bf5e187f8426d9ede66153868aa65",
            "input": "find course_id of takes table whose year equals 2010 or year equals 2009",
            "output": [
                "SELECT course_id FROM takes WHERE year = 2009 OR year = 2010"
            ]
        },
        {
            "id": "task077-93e17707079745d1b6fd2ac4de1207f7",
            "input": "find the Name of musical table for which Award equals Bob Fosse",
            "output": [
                "SELECT Name FROM musical WHERE Award = \"Bob Fosse\""
            ]
        },
        {
            "id": "task077-e55bfd760de24489b1b89a3906f15b09",
            "input": "Step 1: find the number of rows of each value of id in Web_client_accelerator table.\nStep 2: find id, name in Web_client_accelerator table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT id , name FROM Web_client_accelerator GROUP BY id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-f3bd748d471f47f48af208387c1c5d31",
            "input": "Step 1: For each row in races table, find the corresponding rows in constructorStandings table.\nStep 2: find constructorStandingsId, name of the results of step 1 with largest value of constructorId",
            "output": [
                "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-968da6f524d144cc80b4b53d34fdb175",
            "input": "Step 1: For each row in affected_region table, find corresponding rows in storm table and in region table.\nStep 2: find Region_name of the results of step 1 whose Number_Deaths less than 10",
            "output": [
                "SELECT T2.Region_name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T1.Number_Deaths < 10"
            ]
        },
        {
            "id": "task077-79ae6181072e426c9011c9419271a79f",
            "input": "Step 1: find the number of rows of each value of id, name in enzyme table.\nStep 2: find id, name of enzyme table with largest value in the results of step 1",
            "output": [
                "SELECT id , name FROM enzyme GROUP BY id , name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-91eb5f95529c4b0bb32ae8b7956efcc9",
            "input": "Step 1: For each row in track table, find the corresponding rows in race table.\nStep 2: find track's Name, Location of the results of step 1 whose Race_ID equals 1",
            "output": [
                "SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Race_ID = 1"
            ]
        },
        {
            "id": "task077-e11edc7706ec4da6818e21350575bcd1",
            "input": "find the name of instructor table for which salary greater than 80000",
            "output": [
                "SELECT name FROM instructor WHERE salary > 80000"
            ]
        },
        {
            "id": "task077-f9062e98a6c9415bb9cfcacfdb513c0e",
            "input": "Step 1: find the number of rows of each value of year in section table.\nStep 2: find year, year of section table with smallest value in the results of step 1",
            "output": [
                "SELECT year , year FROM section GROUP BY year ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-70a33a40e88a458dbe604785cd0cf82c",
            "input": "find the Time of climber table for which Country equals Uganda",
            "output": [
                "SELECT Time FROM climber WHERE Country = \"Uganda\""
            ]
        },
        {
            "id": "task077-38b24862dd304a62ad745d8e61fc384f",
            "input": "Step 1: For each row in medicine_enzyme_interaction table, find corresponding rows in medicine table and in enzyme table.\nStep 2: find enzyme's name of the results of step 1 whose Porphyria equals Amisulpride and medicine's name equals inhibitor",
            "output": [
                "SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = \"Amisulpride\" AND T1.name = \"inhibitor\""
            ]
        },
        {
            "id": "task077-4d9f8007eb514c08b59fe31094fa869f",
            "input": "find the number of rows in Web_client_accelerator table whose Connection equals Broadband, Satellite, Wireless, Fiber, DSL",
            "output": [
                "SELECT Count ( * ) FROM Web_client_accelerator WHERE Connection = \"Broadband, Satellite, Wireless, Fiber, DSL\""
            ]
        },
        {
            "id": "task077-15452daf6f9c4c1b8a11e96d9e6870aa",
            "input": "find without repetition the name of races table ordered ascending by name",
            "output": [
                "SELECT DISTINCT name FROM races ORDER BY name Asc"
            ]
        },
        {
            "id": "task077-a4411101b8a34e42a908d166bcc2a998",
            "input": "find Award of musical table whose Name equals Tony Award or Name equals Cleavant Derricks",
            "output": [
                "SELECT Award FROM musical WHERE Name = \"Cleavant Derricks\" OR Name = \"Tony Award\""
            ]
        },
        {
            "id": "task077-d0ce118f03bd4d1a8f50caaf1ffb51ab",
            "input": "find the council_tax_id, council_tax_id of Parking_Fines table for which council_tax_id equals 9",
            "output": [
                "SELECT council_tax_id , council_tax_id FROM Parking_Fines WHERE council_tax_id = 9"
            ]
        },
        {
            "id": "task077-a57ee21832ab460584dcd738b5fb1ce2",
            "input": "Step 1: For each row in party_host table, find corresponding rows in party table and in host table.\nStep 2: find Party_Theme of the results of step 1 whose Age greater than 50",
            "output": [
                "SELECT T1.Party_Theme FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID WHERE T2.Age > 50"
            ]
        },
        {
            "id": "task077-74e0426d42f84d67961df0ee3630e6df",
            "input": "find the Duration of actor table with smallest value of age",
            "output": [
                "SELECT Duration FROM actor ORDER BY age Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-6692df0151b44189ba6d4226f45302c0",
            "input": "find the number of rows in classroom table whose capacity greater than 50 and building equals Lamberton",
            "output": [
                "SELECT Count ( * ) FROM classroom WHERE capacity > 50 AND building = \"Lamberton\""
            ]
        },
        {
            "id": "task077-dcb7a57425a34e7d95debf351b2fc762",
            "input": "Step 1: For each row in musical table, find the corresponding rows in actor table.\nStep 2: find Nominee of the results of step 1 whose Award equals Tony Award or actor's Name equals Cleavant Derricks",
            "output": [
                "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T1.Award = \"Tony Award\" OR T2.Name = \"Cleavant Derricks\""
            ]
        },
        {
            "id": "task077-8a3864ac2f4149c691dc074508f56d23",
            "input": "find the Membership_card, Age, Address of member table ordered ascending by Time_of_purchase",
            "output": [
                "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc"
            ]
        },
        {
            "id": "task077-ea62c12a7f294db9b74542fbaf30a34f",
            "input": "Step 1: For each row in races table, find corresponding rows in constructorStandings table and in constructorResults table.\nStep 2: find without repetition positionText of the results of step 1 whose constructorResults's raceId equals 1",
            "output": [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = 1"
            ]
        },
        {
            "id": "task077-069577c9b05c40ce956979c00677ffb3",
            "input": "find the customer_id, card_id, card_number, other_card_details of Customers_Cards table",
            "output": [
                "SELECT customer_id , card_id , card_number , other_card_details FROM Customers_Cards"
            ]
        },
        {
            "id": "task077-77836fcb25b24dd2acd9635f17eb37ed",
            "input": "Step 1: For each row in constructorStandings table, find the corresponding rows in results table.\nStep 2: find constructorStandings's positionText of the results of step 1 whose fastestLap equals 1 and milliseconds greater than 1",
            "output": [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = 1 AND T2.milliseconds > 1"
            ]
        },
        {
            "id": "task077-aaa0b81c625e4f668cea0bbe7645c15e",
            "input": "Step 1: find rows in university table whose Founded less than 1850.\nStep 2: find each value of Affiliation the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < 1850 GROUP BY Affiliation"
            ]
        },
        {
            "id": "task077-b3df777359134da2a7d87c110ef44b65",
            "input": "Step 1: For each row in student table, find the corresponding rows in takes table.\nStep 2: find name of the results of step 1 whose year equals 2003",
            "output": [
                "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.year = 2003"
            ]
        },
        {
            "id": "task077-1840fb9a046d4d60adf38fc14fbc9885",
            "input": "find the number of rows in Customer_Master_Index table",
            "output": [
                "SELECT Count ( * ) FROM Customer_Master_Index"
            ]
        },
        {
            "id": "task077-5a1392cb116e4f6899b0ec6c49832033",
            "input": "find the Date of perpetrator table with largest value of Killed",
            "output": [
                "SELECT Date FROM perpetrator ORDER BY Killed Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e8fa59724a7a49c79248019dcdb622e3",
            "input": "Step 1: For each row in department table, find the corresponding rows in instructor table.\nStep 2: find each value of instructor's dept_name in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T1.budget FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name"
            ]
        },
        {
            "id": "task077-b91b4a149e204656ba483bedcbdf178b",
            "input": "find the name, salary of instructor table for which dept_name equals History",
            "output": [
                "SELECT name , salary FROM instructor WHERE dept_name = \"History\""
            ]
        },
        {
            "id": "task077-b3afde32c2bb4864b7c0dcb6a276f226",
            "input": "Step 1: For each row in people table, find the corresponding rows in perpetrator table.\nStep 2: find Name of the results of step 1 ordered ascending by Killed",
            "output": [
                "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Asc"
            ]
        },
        {
            "id": "task077-12e247b89f31406d8519f4ea9d7ef286",
            "input": "find the rows, Player, Source of injury_accident table for which Injury not equals Knee problem",
            "output": [
                "SELECT * , Player , Source FROM injury_accident WHERE Injury ! = \"Knee problem\""
            ]
        },
        {
            "id": "task077-f605e35a44ef45f385cec934e50442b3",
            "input": "Step 1: For each row in Customer_Master_Index table, find the corresponding rows in CMI_Cross_References table.\nStep 2: find without repetition source_system_code of the results of step 1 whose cmi_details equals Gottlieb ,  Becker and Wyman and cmi_details equals Schmitt-Lang",
            "output": [
                "SELECT DISTINCT T2.source_system_code FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = \"Schmitt-Lang\" AND T1.cmi_details = \"Gottlieb ,  Becker and Wyman\""
            ]
        },
        {
            "id": "task077-8e8fa3e1576d493692524ef77996f65f",
            "input": "find School of university table whose Founded greater than 1850 or Founded less than Public",
            "output": [
                "SELECT School FROM university WHERE Founded > \"Public\" OR Founded < 1850"
            ]
        },
        {
            "id": "task077-0e3e1d7d761f44688fc4eccb567329a0",
            "input": "find the Company, Investor of entrepreneur table ordered descending by Money_Requested",
            "output": [
                "SELECT Company , Investor FROM entrepreneur ORDER BY Money_Requested Desc"
            ]
        },
        {
            "id": "task077-489c002f71c1495b852cdd3f31676a5c",
            "input": "Step 1: find the number of rows of each value of Name in people table.\nStep 2: find Name in people table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-9e37dd59d1c44661ab5efbf4da533845",
            "input": "Step 1: For each row in medicine_enzyme_interaction table, find corresponding rows in medicine table and in enzyme table.\nStep 2: find Trade_Name, medicine's name of the results of step 1 whose Porphyria equals inhibitor.\nStep 3: find Trade_Name, medicine's name of the results of step 1 whose Porphyria equals activitor.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = \"inhibitor\" INTERSECT SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = \"activitor\""
            ]
        },
        {
            "id": "task077-142376b8e27249a8b3ce16ebdbb77f7b",
            "input": "Step 1: For each row in medicine_enzyme_interaction table, find corresponding rows in medicine table and in enzyme table.\nStep 2: find enzyme's name, Porphyria of the results of step 1 whose FDA_approved equals Yes",
            "output": [
                "SELECT T2.name , T2.Porphyria FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = \"Yes\""
            ]
        },
        {
            "id": "task077-783c81f4f5fd4e1c87572f24c16b859d",
            "input": "find the number of rows in medicine table",
            "output": [
                "SELECT Count ( * ) FROM medicine"
            ]
        },
        {
            "id": "task077-f8a4b4f448634614811b6d954bf4ad93",
            "input": "find the City of Customer table for which PostalCode equals 70174",
            "output": [
                "SELECT City FROM Customer WHERE PostalCode = 70174"
            ]
        },
        {
            "id": "task077-70b3ee2ee8e84511bd2e781fe9cdd736",
            "input": "Step 1: For each row in department table, find corresponding rows in instructor table and in student table.\nStep 2: find instructor's name of the results of step 1 ordered ascending by tot_cred",
            "output": [
                "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc"
            ]
        },
        {
            "id": "task077-ed344b2149814aa39ace08e26b81b046",
            "input": "Step 1: For each row in circuits table, find the corresponding rows in races table.\nStep 2: find the number of rows of each value of country in the results of step 1.\nStep 3: find races's url, country of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-167effaa774c49a8911d97c1eb0f0730",
            "input": "find the name of instructor table for which salary equals 80000",
            "output": [
                "SELECT name FROM instructor WHERE salary = 80000"
            ]
        },
        {
            "id": "task077-a8c1348266f148239592b5d4d848a1d7",
            "input": "Step 1: find the number of rows of each value of Name in actor table.\nStep 2: find Name in actor table whose corresponding value in step 1 is greater than or equals 3",
            "output": [
                "SELECT Name FROM actor GROUP BY Name HAVING Count ( * ) > = 3"
            ]
        },
        {
            "id": "task077-0e17ca544fe94023b85af7325cfb1fb6",
            "input": "find the student_id of Student_Course_Attendance table ordered ascending by date_of_attendance",
            "output": [
                "SELECT student_id FROM Student_Course_Attendance ORDER BY date_of_attendance Asc"
            ]
        },
        {
            "id": "task077-704c00b2c96b4fce99c09e590197be38",
            "input": "find the name, name of races table with smallest value of url",
            "output": [
                "SELECT name , name FROM races ORDER BY url Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-e77bc0652f1d46d6aae47804b0b4228c",
            "input": "Step 1: find the maximum salary in instructor table.\nStep 2: find without repetition the name of instructor table whose salary less than the results of step 1",
            "output": [
                "SELECT DISTINCT name FROM instructor WHERE salary < ( SELECT Max ( salary ) FROM instructor )"
            ]
        },
        {
            "id": "task077-f1ff14f4e2c54fd1a0c27b4583bb861f",
            "input": "Step 1: For each row in university table, find the corresponding rows in basketball_match table.\nStep 2: find Team_Name, School of the results of step 1 with smallest value of Founded",
            "output": [
                "SELECT T1.Team_Name , T2.School FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-ef0d6f73a1764abb8909578a04a4d9d4",
            "input": "find the account_id, customer_id, account_name, other_account_details of Accounts table",
            "output": [
                "SELECT account_id , customer_id , account_name , other_account_details FROM Accounts"
            ]
        },
        {
            "id": "task077-06317290804744dab75acb04c9de9851",
            "input": "find the Founded of university table with largest value of Founded",
            "output": [
                "SELECT Founded FROM university ORDER BY Founded Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0d4caecca49e4fb9856b6da62d1c6caa",
            "input": "find the Date of game table ordered descending by Date",
            "output": [
                "SELECT Date FROM game ORDER BY Date Desc"
            ]
        },
        {
            "id": "task077-d707bec6053e45e48ad037a17723149d",
            "input": "Step 1: find the rows in enzyme table whose Chromosome contains activitor.\nStep 2: find each value of id, name in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT id , name FROM enzyme WHERE Chromosome LIKE \"activitor\" GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c1e239f9c11c4944b1579e2c9c766947",
            "input": "find the first_name, last_name, gender_mf of Customers table ordered ascending by last_name",
            "output": [
                "SELECT first_name , last_name , gender_mf FROM Customers ORDER BY last_name Asc"
            ]
        },
        {
            "id": "task077-268d1401844b4bf9a9b9d421eb23a56b",
            "input": "Step 1: find the Connection of Web_client_accelerator table for which Connection equals Broadband, Satellite, Wireless, Fiber, DSL.\nStep 2: find the number of rows in Web_client_accelerator table whose id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Web_client_accelerator WHERE id NOT IN ( SELECT Connection FROM Web_client_accelerator WHERE Connection = \"Broadband, Satellite, Wireless, Fiber, DSL\" )"
            ]
        },
        {
            "id": "task077-2d83e376faac45d78c89986d943f3ed5",
            "input": "Step 1: For each row in drivers table, find the corresponding rows in lapTimes table.\nStep 2: find driverRef, driverRef of the results of step 1 whose milliseconds less than 93000",
            "output": [
                "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < 93000"
            ]
        },
        {
            "id": "task077-1cc13a430bc5426d822028e52303b93f",
            "input": "find the country of circuits table for which circuitRef greater than Spain",
            "output": [
                "SELECT country FROM circuits WHERE circuitRef > \"Spain\""
            ]
        },
        {
            "id": "task077-257354ee03704001b4ac794efb6487c6",
            "input": "Step 1: For each row in Documents table, find the corresponding rows in Documents_Mailed table.\nStep 2: find receipt_date of the results of step 1 whose Documents_Mailed's document_id equals 7",
            "output": [
                "SELECT T1.receipt_date FROM Documents AS T1 JOIN Documents_Mailed AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = 7"
            ]
        },
        {
            "id": "task077-3a13c8f45df04d378da25bed57455ff1",
            "input": "find the Company, Company of entrepreneur table ordered descending by Money_Requested",
            "output": [
                "SELECT Company , Company FROM entrepreneur ORDER BY Money_Requested Desc"
            ]
        },
        {
            "id": "task077-85ef0167ca434767a08869debf4e0c3d",
            "input": "Step 1: find the number of rows of each value of dept_name in course table.\nStep 2: find dept_name of course table with largest value in the results of step 1",
            "output": [
                "SELECT dept_name FROM course GROUP BY dept_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-98d0cbfc1cef41eb888543038345f7f2",
            "input": "Step 1: For each row in affected_region table, find corresponding rows in storm table and in region table.\nStep 2: find Name of the results of step 1 whose Region_code equals Afghanistan.\nStep 3: find Name of the results of step 1 whose Region_code equals Albania.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = \"Afghanistan\" INTERSECT SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = \"Albania\""
            ]
        },
        {
            "id": "task077-005ab6962f774326adcaa7531e2f0d82",
            "input": "find the average amount_paid in Payments table",
            "output": [
                "SELECT Avg ( amount_paid ) FROM Payments"
            ]
        },
        {
            "id": "task077-accbf8aad2174643af30f60ec3693247",
            "input": "find the Venue of debate table ordered ascending by Venue",
            "output": [
                "SELECT Venue FROM debate ORDER BY Venue Asc"
            ]
        },
        {
            "id": "task077-acd284dcb4a04b8fbd7e8735f8d0ed85",
            "input": "Step 1: For each row in player_coach table, find corresponding rows in player table and in coach table.\nStep 2: find Player_name of the results of step 1 whose coach's Rank equals 1 and player's Rank equals 2nd",
            "output": [
                "SELECT T1.Player_name FROM player AS T1 JOIN coach AS T2 JOIN player_coach AS T3 ON T1.Player_ID = T3.Player_ID AND T3.Coach_ID = T2.Coach_ID WHERE T2.Rank = 1 AND T1.Rank = \"2nd\""
            ]
        },
        {
            "id": "task077-eebbb06aa53045bf8901de78ea6195a2",
            "input": "find the Address of Customer table for which Country equals Germany",
            "output": [
                "SELECT Address FROM Customer WHERE Country = \"Germany\""
            ]
        },
        {
            "id": "task077-b930623122f644a7889cbb9c7a95d2c7",
            "input": "find the Name, Carrier of phone table",
            "output": [
                "SELECT Name , Carrier FROM phone"
            ]
        },
        {
            "id": "task077-6b199df362674bcfbe0c3a39668ed472",
            "input": "Step 1: For each row in debate_people table, find corresponding rows in people table and in debate table.\nStep 2: find Name of the results of step 1 whose Num_of_Audience greater than 342.\nStep 3: find Name of the results of step 1 whose Num_of_Audience greater than 200.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > 342 INTERSECT SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > 200"
            ]
        },
        {
            "id": "task077-ffa811d8d0554b12827e6e9b3d51eae0",
            "input": "Step 1: For each row in Employee table, find the corresponding rows in Customer table.\nStep 2: find the number of rows of each value of SupportRepId in the results of step 1.\nStep 3: find Employee's LastName in the results of step 1 whose corresponding value in step 2 is less than or equals 20",
            "output": [
                "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) < = 20"
            ]
        },
        {
            "id": "task077-9d7bda3fbbc84eb692b23901984632d4",
            "input": "Step 1: find the number of rows of each value of Region_name in region table.\nStep 2: find Region_name in region table whose corresponding value in step 1 is greater than Denmark",
            "output": [
                "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > \"Denmark\""
            ]
        },
        {
            "id": "task077-c26e985639434813bcb47b719f9d6332",
            "input": "find rows of Discount_Coupons table whose coupon_amount greater than 500 or coupon_amount less than 500",
            "output": [
                "SELECT * FROM Discount_Coupons WHERE coupon_amount > 500 OR coupon_amount < 500"
            ]
        },
        {
            "id": "task077-5fb01f1b37ec4c98a194ab01249523b7",
            "input": "Step 1: find the number of rows of each value of year in takes table.\nStep 2: find year, year of takes table with largest value in the results of step 1",
            "output": [
                "SELECT year , year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c2157f912b7b4c23ba69ef68df8ec7ac",
            "input": "find the average Killed in perpetrator table",
            "output": [
                "SELECT Avg ( Killed ) FROM perpetrator"
            ]
        },
        {
            "id": "task077-c3ecbeac26474fb5b7b887fa7cdacfd4",
            "input": "find the Name, Duration of actor table",
            "output": [
                "SELECT Name , Duration FROM actor"
            ]
        },
        {
            "id": "task077-41280a27ff854c6293c55f83b00b3572",
            "input": "Step 1: For each row in university table, find the corresponding rows in basketball_match table.\nStep 2: find Location, Enrollment of the results of step 1 whose Team_Name equals Clemson",
            "output": [
                "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = \"Clemson\""
            ]
        },
        {
            "id": "task077-75b475d819384afd86a5daa988caea59",
            "input": "Step 1: For each row in stadium table, find the corresponding rows in game table.\nStep 2: find Date, name of the results of step 1 ordered descending by Competition",
            "output": [
                "SELECT T2.Date , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id ORDER BY T2.Competition Desc"
            ]
        },
        {
            "id": "task077-94d485f0bce340848b364d72365aecf9",
            "input": "Step 1: For each row in Orders table, find corresponding rows in Order_Items table and in Shipments table.\nStep 2: find Order_Items's order_id of the results of step 1 with largest value of shipment_date",
            "output": [
                "SELECT T2.order_id FROM Orders AS T1 JOIN Order_Items AS T2 ON T2.order_id = T1.order_id JOIN Shipments AS T3 ON T1.order_id = T3.order_id ORDER BY T3.shipment_date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f2b62c3b635b4d06aa566f8c90801709",
            "input": "Step 1: find the number of rows of each value of city in airports table.\nStep 2: find city of airports table ordered ascending by the results of step 1",
            "output": [
                "SELECT city FROM airports GROUP BY city ORDER BY Count ( * ) Asc"
            ]
        },
        {
            "id": "task077-ddc165974a354a26a825dcc8b74b9acf",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find the number of rows of each value of song's country in the results of step 1.\nStep 3: find artist's country of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.country ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-f671cd39a0a847bf8ed493e8d1d8109b",
            "input": "Step 1: For each row in Shipments table, find corresponding rows in Invoices table and in Orders table.\nStep 2: find customer_id of the results of step 1 with largest value of invoice_date",
            "output": [
                "SELECT T2.customer_id FROM Invoices AS T1 JOIN Orders AS T2 JOIN Shipments AS T3 ON T1.invoice_number = T3.invoice_number AND T3.order_id = T2.order_id ORDER BY T1.invoice_date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-76783a6b38f24a57bdbbf573fa38ccae",
            "input": "Step 1: find the phone_number of Customers table.\nStep 2: find the phone_number of Staff table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT T1.phone_number FROM Customers AS T1 INTERSECT SELECT T2.phone_number FROM Staff AS T2"
            ]
        },
        {
            "id": "task077-533a47d87c6e4f5fad8b3ef309081734",
            "input": "Step 1: For each row in Parties table, find the corresponding rows in Party_Forms table.\nStep 2: find the number of rows of each value of Party_Forms's party_id in the results of step 1.\nStep 3: find party_email of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6703b98993c046ff943ad2ddf9040130",
            "input": "Step 1: for each value of document_name in Documents table, calculate number of rows.\nStep 2: show each value of document_name in Documents table along with the corresponding number of rows with largest value in the results of step 1",
            "output": [
                "SELECT document_name , Count ( * ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ee85b71c86fb461fa1b916578230b777",
            "input": "Step 1: For each row in bank table, find corresponding rows in customer table and in loan table.\nStep 2: find cust_name of the results of step 1 with largest value of amount",
            "output": [
                "SELECT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a525fd404e42453a86ecfc791538dd01",
            "input": "Step 1: For each row in Orders table, find the corresponding rows in Shipments table.\nStep 2: find Orders's order_id of the results of step 1 ordered ascending by shipment_date",
            "output": [
                "SELECT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc"
            ]
        },
        {
            "id": "task077-d5cde45aabef4af79f408200360842ce",
            "input": "find the number of rows in teachers table whose FirstName equals TARRING",
            "output": [
                "SELECT Count ( * ) FROM teachers WHERE FirstName = \"TARRING\""
            ]
        },
        {
            "id": "task077-0318212d43184d3dadc8b7dd387aa7b0",
            "input": "Step 1: For each row in bank table, find the corresponding rows in loan table.\nStep 2: find the summation of amount in the results of step 1 whose city equals New York",
            "output": [
                "SELECT Sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.city = \"New York\""
            ]
        },
        {
            "id": "task077-2a028eefc39f42a9808c2efff11ab7f8",
            "input": "find the Advisor of Student table for which Major equals Spring",
            "output": [
                "SELECT Advisor FROM Student WHERE Major = \"Spring\""
            ]
        },
        {
            "id": "task077-aa45f715cb114760995d93190e812b61",
            "input": "find the bname of bank table",
            "output": [
                "SELECT bname FROM bank"
            ]
        },
        {
            "id": "task077-c9798641b3ac45dba4879712fd13e899",
            "input": "find without repetition the Major of Student table",
            "output": [
                "SELECT DISTINCT Major FROM Student"
            ]
        },
        {
            "id": "task077-dcd561ce05e249d4b1df0a702383dc30",
            "input": "find the cust_name, credit_score of customer table",
            "output": [
                "SELECT cust_name , credit_score FROM customer"
            ]
        },
        {
            "id": "task077-28a27330adf143c889895dd999e54c80",
            "input": "find the number of rows in bank table whose city equals New York City",
            "output": [
                "SELECT Count ( * ) FROM bank WHERE city = \"New York City\""
            ]
        },
        {
            "id": "task077-b716347993894d26b8cb6e2bf8e11816",
            "input": "Step 1: find the FacID of Faculty table.\nStep 2: find the Advisor of Student table.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2"
            ]
        },
        {
            "id": "task077-8e3f70c62aeb4531af57231a228b78fa",
            "input": "Step 1: For each row in artist table, find the corresponding rows in files table.\nStep 2: find artist's artist_name, gender of the results of step 1 whose formats equals Mar",
            "output": [
                "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats = \"Mar\""
            ]
        },
        {
            "id": "task077-5d93b19270bb4eb0b1067bf36e5063ad",
            "input": "Step 1: find the number of rows of each value of user_id in Users table.\nStep 2: find user_name, user_name of Users table with largest value in the results of step 1",
            "output": [
                "SELECT user_name , user_name FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-74b262f864cd4db7bde573cc9bc7f18d",
            "input": "find each value of Address in Locations table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Address , Count ( * ) FROM Locations GROUP BY Address"
            ]
        },
        {
            "id": "task077-58bbd52de81d4eddabd87ab0da3b2af3",
            "input": "find the Address of Locations table for which Location_Name contains film",
            "output": [
                "SELECT Address FROM Locations WHERE Location_Name LIKE \"film\""
            ]
        },
        {
            "id": "task077-3107aed347b14a05b0d59ed89caebd46",
            "input": "find the number of rows in routes table",
            "output": [
                "SELECT Count ( * ) FROM routes"
            ]
        },
        {
            "id": "task077-8a36a5f4a73a465abb1a32f6fb0ae5c9",
            "input": "find the number of rows in festival_detail table",
            "output": [
                "SELECT Count ( * ) FROM festival_detail"
            ]
        },
        {
            "id": "task077-68a90056730246feb1c568c750271b04",
            "input": "find the number of rows in Activity table",
            "output": [
                "SELECT Count ( * ) FROM Activity"
            ]
        },
        {
            "id": "task077-67ef4f0b85fc4ef29967a13fc6cb479d",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: only keep the results of step 1 whose country equals China.\nStep 3: find the number of rows of each value of src_apid in the results of step 2.\nStep 4: find country of the results of step 2 with largest value in the results of step 3",
            "output": [
                "SELECT T2.country FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = \"China\" GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9521f1b633014ae9b609181155fa1053",
            "input": "Step 1: For each row in Tourist_Attractions table, find corresponding rows in Locations table and in Street_Markets table.\nStep 2: find Market_Details of the results of step 1 whose Address equals walk or Address equals bus",
            "output": [
                "SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = \"bus\" OR T1.Address = \"walk\""
            ]
        },
        {
            "id": "task077-437acb02a4d741ada50735e5db987279",
            "input": "Step 1: for each value of artist_name in song table, calculate number of rows.\nStep 2: show each value of artist_name in song table along with the corresponding number of rows ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT artist_name , Count ( * ) FROM song GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-27d260db36e14bd6b2442ecf245a14d3",
            "input": "Step 1: find the number of rows of each value of document_type_code in Documents table.\nStep 2: find document_type_code of Documents table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-b5bd492810814480a78a258858cf8631",
            "input": "find the number of rows in list table whose FirstName equals MADLOCK",
            "output": [
                "SELECT Count ( * ) FROM list WHERE FirstName = \"MADLOCK\""
            ]
        },
        {
            "id": "task077-529dd4fc897a40c19ef8547cf80cd765",
            "input": "Step 1: For each row in Ref_Hotel_Star_Ratings table, find the corresponding rows in Hotels table.\nStep 2: find star_rating_description, star_rating_description of the results of step 1 ordered ascending by price_range.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT 3"
            ]
        },
        {
            "id": "task077-bbcd5d9022f5406cbd45236227c5e257",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose languages equals modern or g_name equals english",
            "output": [
                "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.languages = \"modern\" OR T1.g_name = \"english\""
            ]
        },
        {
            "id": "task077-cce8bae6ace547f5a177959a2738d8b2",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_latest_logon, date_of_enrolment of the results of step 1 whose family_name equals Zieme and personal_name equals Bernie",
            "output": [
                "SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = \"Zieme\" AND T1.personal_name = \"Bernie\""
            ]
        },
        {
            "id": "task077-96b292023cc44eb8860a6c555188a66e",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose duration equals english or duration equals 4:%",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = \"4:%\" OR T1.duration = \"english\""
            ]
        },
        {
            "id": "task077-9c5858379ee3471fa8b2db49cb738657",
            "input": "find the Age, Age of Student table for which Major equals 600",
            "output": [
                "SELECT Age , Age FROM Student WHERE Major = 600"
            ]
        },
        {
            "id": "task077-ed7164e4a52544a6bfb0e8a639a2c11b",
            "input": "find the average Age in Student table whose Sex equals F and Sex equals Spring",
            "output": [
                "SELECT Avg ( Age ) FROM Student WHERE Sex = \"Spring\" AND Sex = \"F\""
            ]
        },
        {
            "id": "task077-e6d7289a645b4709a6ba0421dcaf3e50",
            "input": "Step 1: find rows in Faculty table whose Sex equals M.\nStep 2: find each value of Rank the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Rank FROM Faculty WHERE Sex = \"M\" GROUP BY Rank"
            ]
        },
        {
            "id": "task077-34ef4147d2cf4fc0a469cf9ef872565a",
            "input": "find the f_id of song table for which rating less than 8",
            "output": [
                "SELECT f_id FROM song WHERE rating < 8"
            ]
        },
        {
            "id": "task077-eecb7686afff4d88aaeeb69bb760d246",
            "input": "find the artist_name of files table ordered ascending by artist_name",
            "output": [
                "SELECT artist_name FROM files ORDER BY artist_name Asc"
            ]
        },
        {
            "id": "task077-f876165687e941adb48ade3a296bcdda",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find f_id, preferred_genre, song's artist_name of the results of step 1 ordered ascending by rating",
            "output": [
                "SELECT T2.f_id , T1.preferred_genre , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating Asc"
            ]
        },
        {
            "id": "task077-c7d15600be8747fcb5eaaf02080c82cd",
            "input": "Step 1: find the Fname of Faculty table.\nStep 2: find the Fname of Faculty table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Fname FROM Faculty EXCEPT SELECT Fname FROM Faculty"
            ]
        },
        {
            "id": "task077-4e886fd947fc472a8f67d82da94a938e",
            "input": "Step 1: For each row in station table, find the corresponding rows in route table.\nStep 2: find each value of station_id in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.network_name , Count ( * ) FROM station AS T1 JOIN route AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id"
            ]
        },
        {
            "id": "task077-3448980743b54046a10dfe9e96ba9991",
            "input": "find the bname of bank table for which city equals New York",
            "output": [
                "SELECT bname FROM bank WHERE city = \"New York\""
            ]
        },
        {
            "id": "task077-b5fd19189d75434db9a364f6ecc435c7",
            "input": "find the number of rows in Course_Authors_and_Tutors table",
            "output": [
                "SELECT Count ( * ) FROM Course_Authors_and_Tutors"
            ]
        },
        {
            "id": "task077-a905604d134c424d8e5730c9a935d140",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition LName of the results of step 1 whose President_Vote equals 1004",
            "output": [
                "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 1004"
            ]
        },
        {
            "id": "task077-afdfed20168a484abf97d035f02c4469",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: find the number of rows of each value of alid in the results of step 1.\nStep 3: find name of step 1 results ordered descending by the results of step 2.\nStep 4: only show the first 10 rows of the results",
            "output": [
                "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.alid ORDER BY Count ( * ) Desc LIMIT 10"
            ]
        },
        {
            "id": "task077-acfcf8509c5344aab9ba4773c213f09e",
            "input": "find the LName of Student table for which Major greater than 50",
            "output": [
                "SELECT LName FROM Student WHERE Major > 50"
            ]
        },
        {
            "id": "task077-1998d9da60d44a7aafde822cd956778a",
            "input": "Step 1: For each row in bank table, find the corresponding rows in loan table.\nStep 2: find each value of bank's branch_ID in the results of step 1 along with the summation of amount of the corresponding rows to each value",
            "output": [
                "SELECT Sum ( T2.amount ) , T2.branch_ID FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.branch_ID"
            ]
        },
        {
            "id": "task077-1a3376c309ed4b88b12cb1e713e9bf0f",
            "input": "Step 1: For each row in Staff table, find the corresponding rows in Complaints table.\nStep 2: find the number of rows of each value of Complaints's staff_id in the results of step 1.\nStep 3: find last_name of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T1.last_name FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-f3c300c54d3c42b79cc727864ad3693e",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find login_name, family_name, course_description of the results of step 1",
            "output": [
                "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id"
            ]
        },
        {
            "id": "task077-0ae1728690fa48ed8bdae7eef71bf948",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find artist's country of the results of step 1 whose gender equals Female and song_name equals bangla",
            "output": [
                "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.song_name = \"bangla\""
            ]
        },
        {
            "id": "task077-8f1a4094ca4449d486d6411ae0b10e34",
            "input": "Step 1: For each row in list table, find the corresponding rows in teachers table.\nStep 2: find FirstName, LastName of the results of step 1 whose FirstName not equals OTHA",
            "output": [
                "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName ! = \"OTHA\""
            ]
        },
        {
            "id": "task077-17af88357c8247348b86ff36df64a1d3",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: only keep the results of step 1 whose languages equals bangla.\nStep 3: find the number of rows of each value of files's artist_name in the results of step 2.\nStep 4: find song's artist_name of the results of step 2 ordered descending by the results of step 3.\nStep 5: only show the first 3 rows of the results",
            "output": [
                "SELECT T2.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.languages = \"bangla\" GROUP BY T1.artist_name ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-1fffef34ff2f4b12bb9b8404f6ec1650",
            "input": "find without repetition the Fname, LName of Student table for which Advisor equals 18",
            "output": [
                "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = 18"
            ]
        },
        {
            "id": "task077-ceea6cb57f6042d99ba856b238e0023a",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find the number of rows of each value of Tourist_Attractions's Location_ID in the results of step 1.\nStep 3: find Location_Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Location_Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b5cd7da6ba0049d995226703c3ef6086",
            "input": "find the invoice_date of Invoices table for which invoice_number equals 10",
            "output": [
                "SELECT invoice_date FROM Invoices WHERE invoice_number = 10"
            ]
        },
        {
            "id": "task077-7ae82a3b41cb4edcb3bab2388140a8c9",
            "input": "find the Fname, LName of Student table for which Advisor equals Michael",
            "output": [
                "SELECT Fname , LName FROM Student WHERE Advisor = \"Michael\""
            ]
        },
        {
            "id": "task077-fd0ff8932a3b4c9980336f972460ed56",
            "input": "Step 1: For each row in station table, find the corresponding rows in weekly_weather table.\nStep 2: find id, local_authority of the results of step 1 whose precipitation greater than 50",
            "output": [
                "SELECT T1.id , T1.local_authority FROM station AS T1 JOIN weekly_weather AS T2 ON T1.id = T2.station_id WHERE T2.precipitation > 50"
            ]
        },
        {
            "id": "task077-1f3b2cab26a14f93a7d13210e8340c08",
            "input": "Step 1: For each row in list table, find the corresponding rows in teachers table.\nStep 2: find the number of rows in the results of step 1 whose FirstName equals CHRISSY and FirstName equals NABOZNY",
            "output": [
                "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = \"CHRISSY\" AND T2.FirstName = \"NABOZNY\""
            ]
        },
        {
            "id": "task077-f4032f2c45f6492697dc703bc376ce51",
            "input": "Step 1: for each value of product_name in Products table, calculate number of rows.\nStep 2: show each value of product_name in Products table along with the corresponding number of rows ordered ascending by the results of step 1",
            "output": [
                "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name ORDER BY Count ( * ) Asc"
            ]
        },
        {
            "id": "task077-97eeea30c0ba409196aa2c7d39a1580c",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose duration equals english or duration less than 4:%",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = \"4:%\" OR T1.duration < \"english\""
            ]
        },
        {
            "id": "task077-7b8160743b5547bfba27b360023f13bd",
            "input": "Step 1: find the address_line_2, email_address of Customers table for which email_address equals hsteuber@example.org.\nStep 2: find the address_line_2, email_address of Customers table for which email_address equals vbogisich@example.org.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT address_line_2 , email_address FROM Customers WHERE email_address = \"hsteuber@example.org\" INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = \"vbogisich@example.org\""
            ]
        },
        {
            "id": "task077-cf95ae4087864883bab3f0e060b52822",
            "input": "Step 1: find the customer_id of Complaints table.\nStep 2: find the phone_number of Customers table whose Customers's customer_id one of the results of step 1",
            "output": [
                "SELECT T1.phone_number FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )"
            ]
        },
        {
            "id": "task077-201ed562e7b0404b8d935f3d844107a2",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find song's f_id of the results of step 1 whose formats equals mp4 or rating greater than 720",
            "output": [
                "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp4\" OR T2.rating > 720"
            ]
        },
        {
            "id": "task077-2007131dbc4d4a8e86740c24f847e065",
            "input": "find the number of rows in list table whose FirstName equals KAWA",
            "output": [
                "SELECT Count ( * ) FROM list WHERE FirstName = \"KAWA\""
            ]
        },
        {
            "id": "task077-2405557c2005436baebf49ff9983acab",
            "input": "find the number of rows in airports table whose country equals Canada",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE country = \"Canada\""
            ]
        },
        {
            "id": "task077-14c77b8c45024b06bba9f3db18279972",
            "input": "Step 1: find the number of rows of each value of document_type_code in Documents table.\nStep 2: find document_type_code in Documents table whose corresponding value in step 1 is greater than 10000",
            "output": [
                "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING Count ( * ) > 10000"
            ]
        },
        {
            "id": "task077-724eebc441dd400090142e794251b114",
            "input": "find the average Age in Student table whose city_code equals NYC and Major equals 600",
            "output": [
                "SELECT Avg ( Age ) FROM Student WHERE city_code = \"NYC\" AND Major = 600"
            ]
        },
        {
            "id": "task077-ed537890ea36484582b7a3d4b5647782",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Orders table.\nStep 2: find customer_name, customer_phone of the results of step 1 whose order_status_code equals No Response",
            "output": [
                "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"No Response\""
            ]
        },
        {
            "id": "task077-b5fa4326f8f043dc9630c9f0ebcb3f7a",
            "input": "find the number of rows in train table",
            "output": [
                "SELECT Count ( * ) FROM train"
            ]
        },
        {
            "id": "task077-1bfda17a85674947bb9e850eaa686d95",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find the average duration in the results of step 1 whose resolution less than 800",
            "output": [
                "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800"
            ]
        },
        {
            "id": "task077-d6e57adf7f2048b0989d173e9797c112",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find song's f_id of the results of step 1 whose formats equals mp4 or resolution greater than 720",
            "output": [
                "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp4\" OR T2.resolution > 720"
            ]
        },
        {
            "id": "task077-35f8e41a9446413f8539722c2b81c5e5",
            "input": "find each value of Classroom in teachers table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Classroom FROM teachers GROUP BY Classroom"
            ]
        },
        {
            "id": "task077-3fa9b0ea99b147a4b8920f5348f24ca8",
            "input": "find the number of rows in Roles table",
            "output": [
                "SELECT Count ( * ) FROM Roles"
            ]
        },
        {
            "id": "task077-626688cb05b34e9a95f0a3a3704d0092",
            "input": "Step 1: For each row in Faculty_Participates_in table, find corresponding rows in Activity table and in Faculty table.\nStep 2: find activity_name of the results of step 1 whose Lname equals Mark and Lname equals Giuliano",
            "output": [
                "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = \"Giuliano\" AND T3.Lname = \"Mark\""
            ]
        },
        {
            "id": "task077-bac0bc9031db47008aab23eff554eb43",
            "input": "Step 1: find the number of rows of each value of party_phone in Parties table.\nStep 2: find party_email of Parties table with largest value in the results of step 1",
            "output": [
                "SELECT party_email FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-36c8b431a3aa4dcca0f3ac3a950b6fe2",
            "input": "Step 1: For each row in Orders table, find corresponding rows in Customers table and in Shipments table.\nStep 2: find shipment_date of the results of step 1 whose customer_name equals Jeramie",
            "output": [
                "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = \"Jeramie\""
            ]
        },
        {
            "id": "task077-46dc2945a3364638aeca098760b5d55d",
            "input": "Step 1: For each row in Documents table, find the corresponding rows in Document_Sections table.\nStep 2: for each value of section_title in the results of step 1, calculate number of rows.\nStep 3: show each value of section_title in the results of step 1 along with the average access_count with smallest value in the results of step 2",
            "output": [
                "SELECT T1.access_count , Avg ( T1.access_count ) FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T2.section_title ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-72e43260c6224cb7977315c3ef588a76",
            "input": "find each value of activity_name in Activity table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT activity_name , Count ( * ) FROM Activity GROUP BY activity_name"
            ]
        },
        {
            "id": "task077-418d18297e8345c98ad07e5ee98544a7",
            "input": "find without repetition the cust_name of customer table ordered ascending by acc_bal",
            "output": [
                "SELECT DISTINCT cust_name FROM customer ORDER BY acc_bal Asc"
            ]
        },
        {
            "id": "task077-8a6ff2624c8e456fad1cf708ec2ad1cd",
            "input": "Step 1: find the customer_id of Complaints table.\nStep 2: find the email_address of Customers table whose Customers's customer_id one of the results of step 1",
            "output": [
                "SELECT T1.email_address FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )"
            ]
        },
        {
            "id": "task077-83e3e7fafe7a4c878db474f3e4ead7a6",
            "input": "Step 1: find the number of rows of each value of Type in school table.\nStep 2: find Type in school table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Type FROM school GROUP BY Type HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-c6c65f3d66864dc3bbbf5bfda42002ad",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find file_size, formats of the results of step 1 whose rating less than 800",
            "output": [
                "SELECT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < 800"
            ]
        },
        {
            "id": "task077-99a66a91a1d64f80a291f224ed0d8422",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find without repetition files's artist_name of the results of step 1 whose resolution greater than english",
            "output": [
                "SELECT DISTINCT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution > \"english\""
            ]
        },
        {
            "id": "task077-6fb862e662664a3dab7e667e6525811e",
            "input": "Step 1: For each row in Invoices table, find the corresponding rows in Shipments table.\nStep 2: find invoice_date of the results of step 1 whose shipment_tracking_number equals 3452",
            "output": [
                "SELECT T1.invoice_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.shipment_tracking_number = 3452"
            ]
        },
        {
            "id": "task077-723ad4ccb89b42bebc8ff2d14b6f7e12",
            "input": "Step 1: For each row in list table, find the corresponding rows in teachers table.\nStep 2: find the number of rows of each value of Classroom in the results of step 1.\nStep 3: find FirstName, LastName of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 GROUP BY T1.Classroom ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d1bf317724ff42f5ad0ab0587c9daeec",
            "input": "Step 1: for each value of city in airports table, calculate number of rows.\nStep 2: show each value of city in airports table along with the corresponding number of rows ordered descending by the results of step 1",
            "output": [
                "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc"
            ]
        },
        {
            "id": "task077-6d052c74aade4e76914daeeb3f9eea49",
            "input": "Step 1: For each row in Student_Course_Enrolment table, find corresponding rows in Students table and in Student_Tests_Taken table.\nStep 2: find date_of_latest_logon, test_result of the results of step 1",
            "output": [
                "SELECT T1.date_of_latest_logon , T3.test_result FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id"
            ]
        },
        {
            "id": "task077-389d73f72918441c83a6c01f218f4d23",
            "input": "Step 1: For each row in Courses table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_enrolment of the results of step 1 whose course_name equals Pass",
            "output": [
                "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Pass\""
            ]
        },
        {
            "id": "task077-93fb88b78d014cb6a1bbbd8f253986c8",
            "input": "find the stuid of Participates_in table",
            "output": [
                "SELECT stuid FROM Participates_in"
            ]
        },
        {
            "id": "task077-e5de674bc4e443d39ec42d1a6eef493f",
            "input": "Step 1: For each row in Tourist_Attractions table, find corresponding rows in Locations table and in Street_Markets table.\nStep 2: find Market_Details, Address of the results of step 1 whose Address equals 660 Shea Crescent",
            "output": [
                "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = \"660 Shea Crescent\""
            ]
        },
        {
            "id": "task077-fff46dd7c1044012acd15c9e226ec0f6",
            "input": "Step 1: find the LastName of list table for which FirstName equals JEROME.\nStep 2: find the LastName of list table for which FirstName equals COVIN.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT LastName FROM list WHERE FirstName = \"JEROME\" EXCEPT SELECT LastName FROM list WHERE FirstName = \"COVIN\""
            ]
        },
        {
            "id": "task077-e323880fc3a64d258c94c21c8e2c28f4",
            "input": "find the number of rows in festival_detail table whose Year equals 2008 or Year equals 2010",
            "output": [
                "SELECT Count ( * ) FROM festival_detail WHERE Year = 2010 OR Year = 2008"
            ]
        },
        {
            "id": "task077-ad6efc14701f4c5bbb3dbbaa48a6e773",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Individuals table.\nStep 2: find state_province_county of the results of step 1 whose individual_first_name equals 6862 Kaitlyn Knolls",
            "output": [
                "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Individuals AS T2 WHERE T2.individual_first_name = \"6862 Kaitlyn Knolls\""
            ]
        },
        {
            "id": "task077-5c05a87e4a214551ba69fc6604dab260",
            "input": "Step 1: find the Visits's Tourist_Attraction_ID of Visits table for which Visit_Details equals Rosalind.\nStep 2: find the Name of Tourist_Attractions table whose Tourist_Attractions's Tourist_Attraction_ID not one of the results of step 1",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = \"Rosalind\" )"
            ]
        },
        {
            "id": "task077-0115fa05ba1b45eb9898e203b303e4a8",
            "input": "Step 1: find the Chair_Name of festival_detail table ordered descending by Year.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Chair_Name FROM festival_detail ORDER BY Year Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-8a5204028ca943c9a0fd7550410c2268",
            "input": "Step 1: For each row in Student_Course_Enrolment table, find corresponding rows in Students table and in Student_Tests_Taken table.\nStep 2: find date_of_registration of the results of step 1 whose test_result equals Pass",
            "output": [
                "SELECT T1.date_of_registration FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = \"Pass\""
            ]
        },
        {
            "id": "task077-67621a85b3d54aad83cd1bb31a40c836",
            "input": "Step 1: find the number of rows of each value of country in airports table.\nStep 2: find country of airports table with largest value in the results of step 1",
            "output": [
                "SELECT country FROM airports GROUP BY country ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-837a4600543547aeb8bcddf539de1845",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_latest_logon, date_of_enrolment of the results of step 1 whose personal_name equals Karson",
            "output": [
                "SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.personal_name = \"Karson\""
            ]
        },
        {
            "id": "task077-4fe55bc1b703428e9454ba36d593370a",
            "input": "find the invoice_number of Invoices table for which invoice_date greater than or equals 1989-09-03",
            "output": [
                "SELECT invoice_number FROM Invoices WHERE invoice_date > = \"1989-09-03\""
            ]
        },
        {
            "id": "task077-ac5d2b18831145679fc75557c5161f7a",
            "input": "find the number of rows in airports table whose country equals Greenland",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE country = \"Greenland\""
            ]
        },
        {
            "id": "task077-eaf9652a4ebe4d13a4ac1cc933b14476",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find the number of rows of each value of Courses's author_id in the results of step 1.\nStep 3: find course_name, family_name, course_description of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.course_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6cf5ba07856745ce89ea9da71a12d384",
            "input": "Step 1: For each row in company table, find the corresponding rows in employment table.\nStep 2: find Name, Year_working of the results of step 1 ordered descending by Year_working",
            "output": [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc"
            ]
        },
        {
            "id": "task077-1bf1e7bcfa2e4bc0b23b55b4d2624407",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find artist's artist_name of the results of step 1 whose song's country equals UK.\nStep 3: find the song's artist_name of song table for which song's country equals english.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = \"UK\" INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = \"english\""
            ]
        },
        {
            "id": "task077-9b9cb99a9da74cff8a3eef947ce69f68",
            "input": "find the duration, duration, formats of files table ordered ascending by duration",
            "output": [
                "SELECT duration , duration , formats FROM files ORDER BY duration Asc"
            ]
        },
        {
            "id": "task077-4eabea464d784e1bb042c870605d860f",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find formats of the results of step 1 whose resolution less than 1000",
            "output": [
                "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 1000"
            ]
        },
        {
            "id": "task077-d6179eeba37b41fb814298ca7432190f",
            "input": "find the number of rows in airports table whose country equals Italy",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE country = \"Italy\""
            ]
        },
        {
            "id": "task077-e10e719d10df4dfdbb996259498a2477",
            "input": "find the maximum low_temperature and the average low_temperature in weekly_weather table",
            "output": [
                "SELECT Max ( low_temperature ) , Avg ( low_temperature ) FROM weekly_weather"
            ]
        },
        {
            "id": "task077-5b3a17c09eca48a89955ab4ac715fd16",
            "input": "find each value of Classroom in list table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom"
            ]
        },
        {
            "id": "task077-bb3242e471244c7cad03ba323bde024d",
            "input": "find the number of rows in Faculty table whose Sex equals F and Sex equals Professor",
            "output": [
                "SELECT Count ( * ) FROM Faculty WHERE Sex = \"Professor\" AND Sex = \"F\""
            ]
        },
        {
            "id": "task077-3de636aab3804848ac17840b890b749d",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find course_description, course_name of the results of step 1 ordered ascending by personal_name",
            "output": [
                "SELECT T2.course_description , T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc"
            ]
        },
        {
            "id": "task077-5349a2e1ca544d629bab6ff25c02e33d",
            "input": "find the Name, Description of Tourist_Attractions table for which Name equals film festival",
            "output": [
                "SELECT Name , Description FROM Tourist_Attractions WHERE Name = \"film festival\""
            ]
        },
        {
            "id": "task077-2aa1ddb2bffe43909cdeb3bdbce5bf61",
            "input": "find the organization_name of Organizations table with smallest value of date_formed",
            "output": [
                "SELECT organization_name FROM Organizations ORDER BY date_formed Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-08e1983d65bf45518a2867af68c5d959",
            "input": "Step 1: find the number of rows of each value of cust_name in customer table.\nStep 2: find cust_name in customer table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT cust_name FROM customer GROUP BY cust_name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-be46e4191d8e49b48ba5546bc8a7327a",
            "input": "find the Room of Faculty table",
            "output": [
                "SELECT Room FROM Faculty"
            ]
        },
        {
            "id": "task077-9ce20de3cef845af9896ee0e27e1b3e5",
            "input": "Step 1: For each row in Individuals table, find the corresponding rows in Organization_Contact_Individuals table.\nStep 2: find individual_last_name of the results of step 1 with largest value of date_contact_to",
            "output": [
                "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id ORDER BY T2.date_contact_to Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4fccbb77e61b4a1183810df29530dbea",
            "input": "Step 1: find the number of rows of each value of section_code in Document_Sections table.\nStep 2: find section_code of Document_Sections table with smallest value in the results of step 1",
            "output": [
                "SELECT section_code FROM Document_Sections GROUP BY section_code ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-abc7d80fbf204a8b984970bb601fa1f4",
            "input": "find the cust_name, credit_score of customer table for which cust_name contains a",
            "output": [
                "SELECT cust_name , credit_score FROM customer WHERE cust_name LIKE \"a\""
            ]
        },
        {
            "id": "task077-78d29bccdd2944e89c73a99808a13e0c",
            "input": "find the number of rows in airports table whose country equals John F Kennedy International Airport",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE country = \"John F Kennedy International Airport\""
            ]
        },
        {
            "id": "task077-fdc040f1008343b480889a06af7a7eba",
            "input": "find the price_range of Hotels table",
            "output": [
                "SELECT price_range FROM Hotels"
            ]
        },
        {
            "id": "task077-40f6d2d60bf34582acc0c259eae0583a",
            "input": "find the Name of artwork table for which Type equals Program Talent Show",
            "output": [
                "SELECT Name FROM artwork WHERE Type = \"Program Talent Show\""
            ]
        },
        {
            "id": "task077-6708f65cff7048e9b5892185fc329604",
            "input": "Step 1: For each row in Documents table, find the corresponding rows in Document_Sections table.\nStep 2: find the number of rows of each value of document_name in the results of step 1.\nStep 3: find section_title of step 1 results with smallest value in the results of step 2",
            "output": [
                "SELECT T2.section_title FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T1.document_name ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-5e5e84bb9c64455fbf2af03054353cac",
            "input": "Step 1: find the Year of festival_detail table for which Location equals United States.\nStep 2: find the Year of festival_detail table for which Location equals United States.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Year FROM festival_detail WHERE Location = \"United States\" INTERSECT SELECT Year FROM festival_detail WHERE Location = \"United States\""
            ]
        },
        {
            "id": "task077-fc48ae8b3b7647309e1d62703f0b66f8",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition President_Vote of the results of step 1 whose Fname equals Linda and Advisor equals 1121",
            "output": [
                "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = \"Linda\" AND T1.Advisor = 1121"
            ]
        },
        {
            "id": "task077-d84b3dbfe05d4da79883ea04bb2a2d9d",
            "input": "Step 1: find the cust_name of customer table.\nStep 2: find the cust_name of customer table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT cust_name FROM customer INTERSECT SELECT cust_name FROM customer"
            ]
        },
        {
            "id": "task077-fdcd79f7d94e4951989be9c8f6ad4880",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find Name, Opening_Hours of the results of step 1 whose Location_Name equals bus or Location_Name equals walk",
            "output": [
                "SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = \"walk\" OR T1.Location_Name = \"bus\""
            ]
        },
        {
            "id": "task077-b720421fa3c94293ad221c943cb97750",
            "input": "find without repetition the Building of Faculty table for which Room equals 224",
            "output": [
                "SELECT DISTINCT Building FROM Faculty WHERE Room = 224"
            ]
        },
        {
            "id": "task077-323e32a48fd647f580548478bb4cdc15",
            "input": "find the average credit_score in customer table",
            "output": [
                "SELECT Avg ( credit_score ) FROM customer"
            ]
        },
        {
            "id": "task077-8707746249e64bc3a7503269b20c2619",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: find rid, dst_ap of the results of step 1 whose country equals United States",
            "output": [
                "SELECT T1.rid , T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = \"United States\""
            ]
        },
        {
            "id": "task077-0b489a2173864cc2bce296c8f6731e7e",
            "input": "Step 1: For each row in Orders table, find the corresponding rows in Shipments table.\nStep 2: find without repetition Orders's order_id of the results of step 1 ordered ascending by shipment_date",
            "output": [
                "SELECT DISTINCT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc"
            ]
        },
        {
            "id": "task077-bf3d3fb619bc4b999022759a633abd8d",
            "input": "find without repetition the invoice_details of Invoices table for which invoice_date greater than or equals 1989-09-03",
            "output": [
                "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date > = \"1989-09-03\""
            ]
        },
        {
            "id": "task077-c1db6d5dd855479a8543c91c0440c86f",
            "input": "find the Name of company table for which Sales_in_Billion greater than 200",
            "output": [
                "SELECT Name FROM company WHERE Sales_in_Billion > 200"
            ]
        },
        {
            "id": "task077-1324bcb7153c44cf9e1f4b58d071aad0",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find f_id, g_name, artist_name of the results of step 1 ordered ascending by song's rating",
            "output": [
                "SELECT T2.f_id , T1.g_name , T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is ORDER BY T2.rating Asc"
            ]
        },
        {
            "id": "task077-aabebd0b6bb84f219cc5ec78c7789e24",
            "input": "Step 1: find the artist's artist_name of artist table for which artist's country equals UK.\nStep 2: For each row in artist table, find the corresponding rows in song table.\nStep 3: find artist's artist_name of the results of step 2 whose song's country equals english.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = \"english\""
            ]
        },
        {
            "id": "task077-a7b50c646e4c45c2a38a46a2577f8b00",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find each value of Tourist_Attractions's Location_ID in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.Address , Count ( * ) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID"
            ]
        },
        {
            "id": "task077-3f85fdcdc92b4c0a94e10ea0ea11713b",
            "input": "Step 1: For each row in bank table, find corresponding rows in customer table and in loan table.\nStep 2: find cust_name, credit_score of the results of step 1 whose amount greater than 5000",
            "output": [
                "SELECT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > 5000"
            ]
        },
        {
            "id": "task077-36389570dd234a6b896f398d5e4c6c31",
            "input": "find the number of different product_category_code in Products table",
            "output": [
                "SELECT Count ( DISTINCT product_category_code ) FROM Products"
            ]
        },
        {
            "id": "task077-d5b9e35809be4bcaa99184639b9d3652",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: find the number of different rid in the results of step 1 whose country equals American Airlines",
            "output": [
                "SELECT Count ( DISTINCT T1.rid ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = \"American Airlines\""
            ]
        },
        {
            "id": "task077-f99d12e186d34faeb0e5996c98534a31",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Orders table.\nStep 2: find customer_name, payment_method of the results of step 1 whose order_status_code equals Order.\nStep 3: find customer_name, payment_method of the results of step 1 whose order_status_code equals No Response.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Order\" INTERSECT SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"No Response\""
            ]
        },
        {
            "id": "task077-afaa45a81ca4462faa924bd37a0db7d0",
            "input": "find each value of country in airports table along with the average y of the corresponding rows to each value",
            "output": [
                "SELECT country , Avg ( y ) FROM airports GROUP BY country"
            ]
        },
        {
            "id": "task077-e1f7d001fb4e45dbbdcbcd67bb9f885a",
            "input": "Step 1: For each row in Faculty table, find the corresponding rows in Faculty_Participates_in table.\nStep 2: find the number of rows of each value of Faculty_Participates_in's FacID in the results of step 1.\nStep 3: find Fname, Lname in the results of step 1 whose corresponding value in step 2 is greater than or equals 1",
            "output": [
                "SELECT T2.Fname , T2.Lname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-174689a9bb78476bb7550e9fea21450b",
            "input": "Step 1: find the number of rows of each value of Product_Name in Products table.\nStep 2: find Product_Name in Products table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-6394d1f85fa54b9baa8d15f9f15c74ba",
            "input": "find the Classroom of list table for which Grade equals 5 ordered ascending by Grade",
            "output": [
                "SELECT Classroom FROM list WHERE Grade = 5 ORDER BY Grade Asc"
            ]
        },
        {
            "id": "task077-729f20a149a04c55aee02fd5910f7eb6",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Orders table.\nStep 2: find customer_name of the results of step 1 whose order_status_code equals Paid.\nStep 3: find customer_name of the results of step 1 whose order_status_code equals FedEx.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Paid\" INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"FedEx\""
            ]
        },
        {
            "id": "task077-90af5a25c4ba4de9b5d40495b3b00284",
            "input": "Step 1: For each row in bank table, find the corresponding rows in customer table.\nStep 2: find the number of rows of each value of customer's state in the results of step 1.\nStep 3: find bank's state of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.state FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2d662671628e41b2b289a004caffb4ff",
            "input": "Step 1: For each row in Invoices table, find the corresponding rows in Shipments table.\nStep 2: find order_id of the results of step 1 whose invoice_date greater than 2000-01-01",
            "output": [
                "SELECT T2.order_id FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T1.invoice_date > \"2000-01-01\""
            ]
        },
        {
            "id": "task077-a2e5a8ff66374f8a917c595a1ab4a8a8",
            "input": "find each value of Rank in Faculty table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank"
            ]
        },
        {
            "id": "task077-9ccfb5749c8043e2b25892aef7ed3329",
            "input": "Step 1: For each row in Tourist_Attraction_Features table, find corresponding rows in Features table and in Tourist_Attractions table.\nStep 2: find Name of the results of step 1 whose Feature_Details equals shopping or Feature_Details equals park",
            "output": [
                "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = \"park\" OR T1.Feature_Details = \"shopping\""
            ]
        },
        {
            "id": "task077-ad9d12bc6f544c23ad1a9fc44e6e68b8",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find Name of the results of step 1 whose Address equals 254 Ottilie Junction or Address equals bus",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"bus\" OR T1.Address = \"254 Ottilie Junction\""
            ]
        },
        {
            "id": "task077-9853a7c537304ceb99b28480a0fb4cb8",
            "input": "Step 1: find the service_name of Services table.\nStep 2: find the service_name of Services table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT service_name FROM Services EXCEPT SELECT service_name FROM Services"
            ]
        },
        {
            "id": "task077-2c2b88e47d4544e5981ebe7ef0a09192",
            "input": "find the number of rows in Student table whose Fname equals Mark and LName equals Giuliano",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Fname = \"Mark\" AND LName = \"Giuliano\""
            ]
        },
        {
            "id": "task077-29d28cadb2334f788d59879683b6b0d3",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Orders table.\nStep 2: find rows in the results of step 1 whose order_status_code equals Order.\nStep 3: find the number of rows of each value of Customer_Orders's customer_id in step 1 rsults.\nStep 4: find customer_name in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Order\" GROUP BY T2.customer_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-4a22d534b8ff4c1790930a8f631d6e80",
            "input": "Step 1: For each row in Student_Course_Enrolment table, find corresponding rows in Students table and in Courses table.\nStep 2: find date_of_latest_logon of the results of step 1 whose course_name equals Fail",
            "output": [
                "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T2.course_name = \"Fail\""
            ]
        },
        {
            "id": "task077-5a51a3ac440647a8a6b319b59559eb03",
            "input": "Step 1: find the personal_name of Course_Authors_and_Tutors table.\nStep 2: find the personal_name of Course_Authors_and_Tutors table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Course_Authors_and_Tutors"
            ]
        },
        {
            "id": "task077-67585fd4b384493da3b4e14e6281db72",
            "input": "find the Fname, Lname of Faculty table",
            "output": [
                "SELECT Fname , Lname FROM Faculty"
            ]
        },
        {
            "id": "task077-adb3dfc98821401c92e55f648c3d8741",
            "input": "Step 1: For each row in Parties table, find the corresponding rows in Party_Services table.\nStep 2: find the number of rows of each value of customer_id in the results of step 1.\nStep 3: find party_email of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Services AS T2 ON T1.party_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9f3aae92c4d7435ea9a705c25ed0ca0a",
            "input": "Step 1: find the number of rows of each value of city in airports table.\nStep 2: find city in airports table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-a9292bc555914cae9c83f2794ca0ad63",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find the number of rows of each value of Student_Course_Enrolment's student_id in the results of step 1.\nStep 3: find Student_Course_Enrolment's student_id, middle_name of step 1 results ordered descending by the results of step 2.\nStep 4: only show the first 2 rows of the results",
            "output": [
                "SELECT T2.student_id , T1.middle_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT 2"
            ]
        },
        {
            "id": "task077-fd8ecde7f2b44779beb0ed50e4c556df",
            "input": "find the f_id of song table for which song_name equals mp3",
            "output": [
                "SELECT f_id FROM song WHERE song_name = \"mp3\""
            ]
        },
        {
            "id": "task077-9f4dbae9417d433cac5cb2e160e6fbe0",
            "input": "Step 1: find without repetition the LName of Student table.\nStep 2: find the LName of Student table for which Advisor equals 2192.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT DISTINCT LName FROM Student EXCEPT SELECT LName FROM Student WHERE Advisor = 2192"
            ]
        },
        {
            "id": "task077-374b8387d491451bbe46c669dd923d2c",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find Fname, LName of the results of step 1 whose Sex equals F and President_Vote equals 1004",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = \"F\" AND T2.President_Vote = 1004"
            ]
        },
        {
            "id": "task077-2fae7e8669af4367b96bc7ff02c40148",
            "input": "Step 1: For each row in bank table, find corresponding rows in customer table and in loan table.\nStep 2: find the summation of amount of each value of cust_name in the results of step 1.\nStep 3: find cust_name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID GROUP BY T2.cust_name ORDER BY Sum ( T3.amount ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-393eb0451ba5405997b5d228d26305c8",
            "input": "find the Building of Faculty table for which Building equals NEB",
            "output": [
                "SELECT Building FROM Faculty WHERE Building = \"NEB\""
            ]
        },
        {
            "id": "task077-2e3a80bd62fa4180a8286de81badff5d",
            "input": "find the number of rows in Faculty table whose Sex equals AsstProf and Rank equals Instructor",
            "output": [
                "SELECT Count ( * ) FROM Faculty WHERE Sex = \"AsstProf\" AND Rank = \"Instructor\""
            ]
        },
        {
            "id": "task077-dd874f610d964fc7b8f58bfa7e65eaad",
            "input": "find the number of rows in Faculty table whose Building equals Professor",
            "output": [
                "SELECT Count ( * ) FROM Faculty WHERE Building = \"Professor\""
            ]
        },
        {
            "id": "task077-07aca472c0654a499c6b8e33fcb9e0c3",
            "input": "find the acc_bal, credit_score of customer table for which cust_name contains a",
            "output": [
                "SELECT acc_bal , credit_score FROM customer WHERE cust_name LIKE \"a\""
            ]
        },
        {
            "id": "task077-fee067cf4a1f461a9d734c690ce112e9",
            "input": "find without repetition the product_id of Order_Items table for which order_id equals or between 1975-01-01 and 1976-01-01",
            "output": [
                "SELECT DISTINCT product_id FROM Order_Items WHERE order_id BETWEEN \"1976-01-01\" AND \"1975-01-01\""
            ]
        },
        {
            "id": "task077-74d0a9aabeb64340b0c6c03784f9e459",
            "input": "Step 1: For each row in Courses table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find each value of Student_Course_Enrolment's course_id in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id"
            ]
        },
        {
            "id": "task077-8139b0a1aa154b65ab676f39624eb725",
            "input": "Step 1: For each row in bank table, find the corresponding rows in customer table.\nStep 2: find the number of rows of each value of customer's branch_ID in the results of step 1.\nStep 3: find bname of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.branch_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-608aa3953a6447f4a2706eb7f019e2c2",
            "input": "find the LastName of teachers table for which Classroom equals 111",
            "output": [
                "SELECT LastName FROM teachers WHERE Classroom = 111"
            ]
        },
        {
            "id": "task077-3eb497dd51dc42189f0fa5e966f26771",
            "input": "Step 1: find the number of rows of each value of city in airports table.\nStep 2: find city in airports table whose corresponding value in step 1 is greater than 3",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > 3"
            ]
        },
        {
            "id": "task077-5cd578327ad349d78a8da204a41ecb2f",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find the number of rows of each value of Tourist_Attractions's Location_ID in the results of step 1.\nStep 3: find Address of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ae6c8429762d4cd6a538ef3792675d86",
            "input": "find the LastName of teachers table for which FirstName equals GELL",
            "output": [
                "SELECT LastName FROM teachers WHERE FirstName = \"GELL\""
            ]
        },
        {
            "id": "task077-645971cc73544ab29465be400b3d325b",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find Name of the results of step 1 whose Address equals game1",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"game1\""
            ]
        },
        {
            "id": "task077-d2c7d76d88454859a421e80e7b8e0a30",
            "input": "Step 1: find the rows in Student table whose Sex equals F.\nStep 2: find each value of Sex in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT Sex FROM Student WHERE Sex = \"F\" GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f8b2c4f0204f4f74ae68381c1879a165",
            "input": "find the document_name, access_count of Documents table ordered ascending by document_name",
            "output": [
                "SELECT document_name , access_count FROM Documents ORDER BY document_name Asc"
            ]
        },
        {
            "id": "task077-dc39a139cf6a42d1b822d0214b7ceea9",
            "input": "find without repetition the LName of Student table for which Advisor equals 8741",
            "output": [
                "SELECT DISTINCT LName FROM Student WHERE Advisor = 8741"
            ]
        },
        {
            "id": "task077-9e100ad9dfb243079e5dff1bc7a04a2c",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find formats of the results of step 1 whose rating less than 1000",
            "output": [
                "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < 1000"
            ]
        },
        {
            "id": "task077-02a5002ddd874a60ad7f2f3d39c00924",
            "input": "find the order_id, customer_id of Orders table with largest value of customer_id",
            "output": [
                "SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6d7cb48ef72640a0a053538ff69b145d",
            "input": "Step 1: For each row in Ref_Hotel_Star_Ratings table, find the corresponding rows in Hotels table.\nStep 2: find hotel_id, star_rating_description, price_range of the results of step 1 ordered ascending by price_range",
            "output": [
                "SELECT T2.hotel_id , T1.star_rating_description , T2.price_range FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc"
            ]
        },
        {
            "id": "task077-d13e7aad5c0547bf86ecc311358bd1f6",
            "input": "find the StuID of Student table for which Advisor equals Professor",
            "output": [
                "SELECT StuID FROM Student WHERE Advisor = \"Professor\""
            ]
        },
        {
            "id": "task077-a1bff190315a4ab1b6e6ccc29c635e68",
            "input": "find the FirstName, LastName of list table for which FirstName equals OTHA",
            "output": [
                "SELECT FirstName , LastName FROM list WHERE FirstName = \"OTHA\""
            ]
        },
        {
            "id": "task077-d23a36897bb14aa482591201b8dcb402",
            "input": "Step 1: For each row in artwork table, find the corresponding rows in nomination table.\nStep 2: find the number of rows of each value of Festival_ID in the results of step 1.\nStep 3: find artwork's Artwork_ID, Name in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.Artwork_ID , T1.Name FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-0711c1f52ddf4c1fa28cdacbeac6e2cd",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find artist's artist_name, artist's country of the results of step 1 whose rating greater than 900",
            "output": [
                "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 900"
            ]
        },
        {
            "id": "task077-919e8b9e1ca4440fbd86f6cdf7b35220",
            "input": "find without repetition the Major of Student table for which Advisor equals 1121",
            "output": [
                "SELECT DISTINCT Major FROM Student WHERE Advisor = 1121"
            ]
        },
        {
            "id": "task077-a369337e7013493d94fb1fdf2a824457",
            "input": "Step 1: For each row in Student_Course_Enrolment table, find the corresponding rows in Student_Tests_Taken table.\nStep 2: find date_of_enrolment, test_result of the results of step 1",
            "output": [
                "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id"
            ]
        },
        {
            "id": "task077-bc50107865264ca4ac7f611c0a598813",
            "input": "find each value of Grade in list table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Grade FROM list GROUP BY Grade"
            ]
        },
        {
            "id": "task077-1651d23b3b364e20b45703a413d26275",
            "input": "find the number of rows in Student table whose Major equals NYC",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Major = \"NYC\""
            ]
        },
        {
            "id": "task077-1dd9edf19a7b42b2aad8fe0d3efd36be",
            "input": "find the train_number, time of train table ordered ascending by time",
            "output": [
                "SELECT train_number , time FROM train ORDER BY time Asc"
            ]
        },
        {
            "id": "task077-c6143da28fd94ec5b8262087080e2d7a",
            "input": "find the Classroom of list table for which Grade equals 4 ordered ascending by Classroom",
            "output": [
                "SELECT Classroom FROM list WHERE Grade = 4 ORDER BY Classroom Asc"
            ]
        },
        {
            "id": "task077-0a47b6298c8045799b804c853abbe59b",
            "input": "find the Address of Locations table for which Location_Name equals UK Gallery",
            "output": [
                "SELECT Address FROM Locations WHERE Location_Name = \"UK Gallery\""
            ]
        },
        {
            "id": "task077-18e41ddf2b1d4a45ab6297bbc3095bb3",
            "input": "Step 1: find rows in customer table whose credit_score less than 50.\nStep 2: find each value of acc_type in the results of step 1 along with the  no_of_loans of the corresponding rows to each value",
            "output": [
                "SELECT acc_type , Avg ( no_of_loans ) FROM customer WHERE credit_score < 50 GROUP BY acc_type"
            ]
        },
        {
            "id": "task077-e75b029ba168499f94f65490e7c43498",
            "input": "Step 1: find the number of rows of each value of FacID in Faculty table.\nStep 2: find Fname, Lname of Faculty table with largest value in the results of step 1",
            "output": [
                "SELECT Fname , Lname FROM Faculty GROUP BY FacID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9db91fee28514991952e1a70e831f76a",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: find the number of rows of each value of airline in the results of step 1.\nStep 3: find name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.airline ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-46bf7b27757d4a66b7689f06563ed2de",
            "input": "find the number of different Name in Tourist_Attractions table",
            "output": [
                "SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions"
            ]
        },
        {
            "id": "task077-1d67444bbbed4228b35a66a50f7deb03",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find the number of rows of each value of Tourist_Attractions's Location_ID in the results of step 1.\nStep 3: find Name, Address of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c9652d468d074b91aa493db8494a4fed",
            "input": "find the email_address, phone_number of Customers table ordered ascending by email_address",
            "output": [
                "SELECT email_address , phone_number FROM Customers ORDER BY email_address Asc"
            ]
        },
        {
            "id": "task077-b7b76e9ceb27481fbbefb1b729041643",
            "input": "find the number of rows in train table whose name equals Express",
            "output": [
                "SELECT Count ( * ) FROM train WHERE name = \"Express\""
            ]
        },
        {
            "id": "task077-1461a93fe0d24e919052fe83092feb91",
            "input": "Step 1: For each row in Faculty table, find the corresponding rows in Faculty_Participates_in table.\nStep 2: find the number of rows of each value of Faculty_Participates_in's FacID in the results of step 1.\nStep 3: find Fname in the results of step 1 whose corresponding value in step 2 is greater than or equals Canoeing",
            "output": [
                "SELECT T2.Fname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = \"Canoeing\""
            ]
        },
        {
            "id": "task077-91851843849745708a19bccb7bbaf819",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find artist's artist_name of the results of step 1 whose rating greater than 7.\nStep 3: find the song's artist_name of song table for which song's country equals Bangladesh.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 7 EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = \"Bangladesh\""
            ]
        },
        {
            "id": "task077-b8ef3c29c789446f844fabaa3022bc90",
            "input": "Step 1: For each row in Student_Course_Enrolment table, find corresponding rows in Students table and in Courses table.\nStep 2: find date_of_latest_logon, course_name of the results of step 1 whose personal_name equals Karson and course_name equals database",
            "output": [
                "SELECT T1.date_of_latest_logon , T2.course_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T1.personal_name = \"Karson\" AND T2.course_name = \"database\""
            ]
        },
        {
            "id": "task077-8c2246ebbc7048599da7194aadd32824",
            "input": "find the number of rows in list table",
            "output": [
                "SELECT Count ( * ) FROM list"
            ]
        },
        {
            "id": "task077-3333d069f38342fe91dde6994b70f3ac",
            "input": "Step 1: find the cust_name of customer table.\nStep 2: find the cust_name of customer table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer"
            ]
        },
        {
            "id": "task077-c1a116a5a9b84b27bb5aa997a812a662",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find course_description, personal_name of the results of step 1 ordered ascending by personal_name",
            "output": [
                "SELECT T2.course_description , T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc"
            ]
        },
        {
            "id": "task077-6451fb69404940d487752b64808ef089",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Complaints table.\nStep 2: find the number of rows of each value of Complaints's customer_id in the results of step 1.\nStep 3: find email_address of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8f7570ea907d4cf28f1bdeb8d272b463",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: for each value of dst_apid in the results of step 1, calculate number of rows.\nStep 3: show each value of dst_apid in the results of step 1 along with the number of rows ordered descending by the results of step 2",
            "output": [
                "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc"
            ]
        },
        {
            "id": "task077-0fadea236eb44c1d9acc7b2212926588",
            "input": "Step 1: find the Tourist_Attraction_ID of Visits table.\nStep 2: find the number of rows in Tourist_Attractions table whose Tourist_Attractions's Tourist_Attraction_ID not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 )"
            ]
        },
        {
            "id": "task077-391bdd3a078a43f780643a2e031f906c",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find the number of rows of each value of song's f_id in the results of step 1.\nStep 3: find files's artist_name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.f_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ab4e626d580c467eb7ddddbf8ad7bd69",
            "input": "Step 1: find the rows in song table whose resolution greater than 500.\nStep 2: find each value of artist_name in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT artist_name FROM song WHERE resolution > 500 GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4432b4d67843470a93b9d4c2e046ef08",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find without repetition artist's artist_name of the results of step 1 whose rating greater than 7",
            "output": [
                "SELECT DISTINCT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 7"
            ]
        },
        {
            "id": "task077-a53e2406b7584e4490deed240d6470cb",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find Name of the results of step 1 whose Address equals 660 Shea Crescent or Address equals walk",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"walk\" OR T1.Address = \"660 Shea Crescent\""
            ]
        },
        {
            "id": "task077-f217b0bcbb2b47dda9c0b65a264d9ceb",
            "input": "find each value of Product_Name in Products table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name"
            ]
        },
        {
            "id": "task077-6917b592f51745c1822b3b4bc236b1a1",
            "input": "Step 1: For each row in Products table, find the corresponding rows in Complaints table.\nStep 2: find each value of Complaints's product_id in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.product_name , Count ( * ) FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"
            ]
        },
        {
            "id": "task077-feaa442121534c8c865e2aea84d72897",
            "input": "Step 1: For each row in Tourist_Attractions table, find corresponding rows in Shops table and in Visits table.\nStep 2: find Visit_Date, Visit_Details of the results of step 1 whose Shop_Details equals Vincent",
            "output": [
                "SELECT T3.Visit_Date , T3.Visit_Details FROM Tourist_Attractions AS T1 JOIN Shops AS T2 ON T2.Shop_ID = T1.Tourist_Attraction_ID JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T2.Shop_Details = \"Vincent\""
            ]
        },
        {
            "id": "task077-de2a1cba1693417ea11b5789e71880f8",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find each value of languages in the results of step 1 along with the average song's rating of the corresponding rows to each value",
            "output": [
                "SELECT T1.rating , Avg ( T2.rating ) FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T2.languages"
            ]
        },
        {
            "id": "task077-adadc7066d764f53a1fa626c819de738",
            "input": "Step 1: find the number of rows of each value of Attraction_Type_Code in Ref_Attraction_Types table.\nStep 2: find Attraction_Type_Description, Attraction_Type_Code of Ref_Attraction_Types table with largest value in the results of step 1",
            "output": [
                "SELECT Attraction_Type_Description , Attraction_Type_Code FROM Ref_Attraction_Types GROUP BY Attraction_Type_Code ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-38e6cc16501343af8e26a937dd9a9d04",
            "input": "find the number of rows in Student table whose Sex equals M and Sex equals Fall",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Sex = \"Fall\" AND Sex = \"M\""
            ]
        },
        {
            "id": "task077-af208ae0772c409798cb6a4a4cca9297",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: find the number of rows of each value of rid in the results of step 1.\nStep 3: find name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.rid ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-938c5232c5124706948ab3cba9ade128",
            "input": "find the average rating and the average resolution in song table",
            "output": [
                "SELECT Avg ( rating ) , Avg ( resolution ) FROM song"
            ]
        },
        {
            "id": "task077-0c5db3e528784cf38c312b0923fe80c9",
            "input": "find the individual_last_name of Individuals table",
            "output": [
                "SELECT individual_last_name FROM Individuals"
            ]
        },
        {
            "id": "task077-dfa24611988147ff832ebe552a4ea50a",
            "input": "Step 1: for each value of artist_name in files table, calculate number of rows.\nStep 2: show each value of artist_name in files table along with the corresponding number of rows ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-867f7810220040469bd9d01b9ccc22be",
            "input": "find the number of rows in Ref_Hotel_Star_Ratings table",
            "output": [
                "SELECT Count ( * ) FROM Ref_Hotel_Star_Ratings"
            ]
        },
        {
            "id": "task077-9ad174d890904247b75a61656789da86",
            "input": "Step 1: For each row in Student_Course_Enrolment table, find corresponding rows in Students table and in Courses table.\nStep 2: find without repetition course_name, login_name of the results of step 1",
            "output": [
                "SELECT DISTINCT T2.course_name , T1.login_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id"
            ]
        },
        {
            "id": "task077-26741bb2d6034af09eaf7153146cf4f6",
            "input": "Step 1: For each row in Customer_Orders table, find the corresponding rows in Order_Items table.\nStep 2: find product_id, customer_id of the results of step 1 whose order_status_code equals Cancelled or order_status_code equals Paid",
            "output": [
                "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = \"Paid\" OR T1.order_status_code = \"Cancelled\""
            ]
        },
        {
            "id": "task077-3089a39e50ac451fa5ce8d90aba97b0f",
            "input": "Step 1: For each row in Ref_Hotel_Star_Ratings table, find the corresponding rows in Hotels table.\nStep 2: find the average price_range in the results of step 1 whose star_rating_description equals 5",
            "output": [
                "SELECT Avg ( T2.price_range ) FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.star_rating_description = 5"
            ]
        },
        {
            "id": "task077-6d2a5a0164824c14bc0de6e770e768f4",
            "input": "find without repetition the bname of bank table",
            "output": [
                "SELECT DISTINCT bname FROM bank"
            ]
        },
        {
            "id": "task077-8bff9f29673847ea83f348fb5aae349b",
            "input": "Step 1: find the rows in song table whose languages equals bangla.\nStep 2: find each value of artist_name in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT artist_name FROM song WHERE languages = \"bangla\" GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-2fcabc0b80654792ab91251c3a6c70d1",
            "input": "find the document_name of Documents table ordered ascending by access_count",
            "output": [
                "SELECT document_name FROM Documents ORDER BY access_count Asc"
            ]
        },
        {
            "id": "task077-17515342fc554e3f8ab0a8ad9d6b8164",
            "input": "find the number of different rid in routes table whose airline equals American Airlines",
            "output": [
                "SELECT Count ( DISTINCT rid ) FROM routes WHERE airline = \"American Airlines\""
            ]
        },
        {
            "id": "task077-5ddf2812e1b04ac09f18082f3e11c2b5",
            "input": "Step 1: For each row in list table, find the corresponding rows in teachers table.\nStep 2: find FirstName, LastName of the results of step 1 whose FirstName equals OTHA and FirstName not equals MOYER",
            "output": [
                "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = \"OTHA\" AND T2.FirstName ! = \"MOYER\""
            ]
        },
        {
            "id": "task077-d02c9356696e42c3b61c90767ab80d42",
            "input": "find the summation of credit_score in customer table whose state equals Utah or state equals Texas",
            "output": [
                "SELECT Sum ( credit_score ) FROM customer WHERE state = \"Texas\" OR state = \"Utah\""
            ]
        },
        {
            "id": "task077-1c55315aa4e447e58976abf21e0276d8",
            "input": "find the name, country, elevation of airports table for which city equals New York",
            "output": [
                "SELECT name , country , elevation FROM airports WHERE city = \"New York\""
            ]
        },
        {
            "id": "task077-c4f04880faa246bb8f4497a3f0da1871",
            "input": "find the maximum y in airports table whose country equals Iceland",
            "output": [
                "SELECT Max ( y ) FROM airports WHERE country = \"Iceland\""
            ]
        },
        {
            "id": "task077-1270b2f14223442890db3f807e24accf",
            "input": "find the Name of Tourist_Attractions table",
            "output": [
                "SELECT Name FROM Tourist_Attractions"
            ]
        },
        {
            "id": "task077-7b475f819e104da4a3c7098aefc673d4",
            "input": "Step 1: find rows in customer table whose credit_score greater than 100.\nStep 2: find each value of state in the results of step 1 along with the  no_of_loans of the corresponding rows to each value",
            "output": [
                "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > 100 GROUP BY state"
            ]
        },
        {
            "id": "task077-239f7c9fde064abf8f9da7bf175fdb8d",
            "input": "find the number of rows in genre table",
            "output": [
                "SELECT Count ( * ) FROM genre"
            ]
        },
        {
            "id": "task077-3b3f500c053e4f5993ba2eb76c77efd6",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_enrolment, date_of_enrolment of the results of step 1 whose family_name equals Zieme and personal_name equals Bernie",
            "output": [
                "SELECT T2.date_of_enrolment , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = \"Zieme\" AND T1.personal_name = \"Bernie\""
            ]
        },
        {
            "id": "task077-26042654d7d14e2daa9f0db148a04379",
            "input": "find address_line_1 of Course_Authors_and_Tutors table whose personal_name equals Cathrine or personal_name equals Cathrine",
            "output": [
                "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = \"Cathrine\" OR personal_name = \"Cathrine\""
            ]
        },
        {
            "id": "task077-4a90b0274c584b649260b6558ef9ea05",
            "input": "Step 1: For each row in bank table, find corresponding rows in customer table and in loan table.\nStep 2: find without repetition cust_name of the results of step 1 ordered ascending by amount",
            "output": [
                "SELECT DISTINCT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Asc"
            ]
        },
        {
            "id": "task077-c29f63bce3b44bf3a23ddad134f5728b",
            "input": "Step 1: find the Fname of Faculty table.\nStep 2: find the Fname of Faculty table.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT Fname FROM Faculty UNION SELECT Fname FROM Faculty"
            ]
        },
        {
            "id": "task077-eca058094f9f48daa74abede50eb9360",
            "input": "find the number of rows in Student table whose city_code equals NYC and Major equals 600",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE city_code = \"NYC\" AND Major = 600"
            ]
        },
        {
            "id": "task077-5c0420e34795413796595eb2f3739401",
            "input": "find the f_id of song table for which resolution greater than 8",
            "output": [
                "SELECT f_id FROM song WHERE resolution > 8"
            ]
        },
        {
            "id": "task077-6ad9d9c8efee4982be5a8a839b9ba0a5",
            "input": "Step 1: For each row in list table, find the corresponding rows in teachers table.\nStep 2: find the number of rows in the results of step 1 whose FirstName equals MADLOCK and FirstName equals RAY",
            "output": [
                "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = \"MADLOCK\" AND T2.FirstName = \"RAY\""
            ]
        },
        {
            "id": "task077-362e0ea3b40945ff81fe64d20c5e0fd7",
            "input": "find the order_id of Order_Items table for which product_id equals 11",
            "output": [
                "SELECT order_id FROM Order_Items WHERE product_id = 11"
            ]
        },
        {
            "id": "task077-8d1d7471303e48a5bafb37fc65914298",
            "input": "Step 1: For each row in Faculty_Participates_in table, find corresponding rows in Activity table and in Faculty table.\nStep 2: find activity_name of the results of step 1 whose Lname equals Mark",
            "output": [
                "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = \"Mark\""
            ]
        },
        {
            "id": "task077-d20efca95aec463d97a35ec872ebae4f",
            "input": "Step 1: For each row in bank table, find the corresponding rows in customer table.\nStep 2: find the average credit_score in the results of step 1 whose bank's state equals Utah",
            "output": [
                "SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.state = \"Utah\""
            ]
        },
        {
            "id": "task077-72207379b81c4e66b4d22ce3993388e1",
            "input": "find without repetition the LName of Student table for which Advisor not equals 2192",
            "output": [
                "SELECT DISTINCT LName FROM Student WHERE Advisor ! = 2192"
            ]
        },
        {
            "id": "task077-4a3498e4a3564498b1bccbad86bfb030",
            "input": "find the LastName of list table for which Grade equals 5",
            "output": [
                "SELECT LastName FROM list WHERE Grade = 5"
            ]
        },
        {
            "id": "task077-931e591f92294e69b8905155e09cd99c",
            "input": "Step 1: find the LastName of list table ordered ascending by Grade.\nStep 2: only show the first 5 rows of the results",
            "output": [
                "SELECT LastName FROM list ORDER BY Grade Asc LIMIT 5"
            ]
        },
        {
            "id": "task077-774e2acf1ee040ce84d44aaa080d7559",
            "input": "Step 1: For each row in bank table, find the corresponding rows in customer table.\nStep 2: find city, cust_name of the results of step 1",
            "output": [
                "SELECT T1.city , T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID"
            ]
        },
        {
            "id": "task077-cc022110bc7249d1851a3b7893eda419",
            "input": "Step 1: For each row in Courses table, find corresponding rows in Subjects table and in Student_Course_Enrolment table.\nStep 2: find date_of_enrolment of the results of step 1 whose subject_name equals Spanish",
            "output": [
                "SELECT T3.date_of_enrolment FROM Subjects AS T1 JOIN Courses AS T2 ON T1.subject_id = T2.subject_id JOIN Student_Course_Enrolment AS T3 ON T2.course_id = T3.course_id WHERE T1.subject_name = \"Spanish\""
            ]
        },
        {
            "id": "task077-8b0b10f2d0494d0d983a28ae8d7f127f",
            "input": "find without repetition the FirstName of list table for which Grade equals 1",
            "output": [
                "SELECT DISTINCT FirstName FROM list WHERE Grade = 1"
            ]
        },
        {
            "id": "task077-1a944f8205ae47b298178b7716854fe5",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Orders table.\nStep 2: find the number of rows of each value of Orders's customer_id in the results of step 1.\nStep 3: find customer_name in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-e5653657bfaa4cd98bac9b7d96cc7be6",
            "input": "Step 1: For each row in list table, find the corresponding rows in teachers table.\nStep 2: find FirstName, LastName of the results of step 1 whose FirstName equals EVELINA",
            "output": [
                "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = \"EVELINA\""
            ]
        },
        {
            "id": "task077-9330148a136542c6805fc12ac9b97d4b",
            "input": "Step 1: For each row in Tourist_Attractions table, find corresponding rows in Locations table and in Street_Markets table.\nStep 2: find Market_Details of the results of step 1 whose Market_Details equals walk or Location_Name equals bus",
            "output": [
                "SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T3.Market_Details = \"walk\" OR T1.Location_Name = \"bus\""
            ]
        },
        {
            "id": "task077-306cc979715c4a35b0c23ddad892657c",
            "input": "Step 1: For each row in Ref_Attraction_Types table, find the corresponding rows in Hotels table.\nStep 2: find each value of Attraction_Type_Code in the results of step 1 along with the average price_range of the corresponding rows to each value",
            "output": [
                "SELECT T2.price_range , Avg ( T2.price_range ) FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code"
            ]
        },
        {
            "id": "task077-dfb83a9a1a464ef8b64eb5948e59a74d",
            "input": "Step 1: find the number of rows of each value of customer_name in Customers table.\nStep 2: find customer_name of Customers table with largest value in the results of step 1",
            "output": [
                "SELECT customer_name FROM Customers GROUP BY customer_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-811e39e996084b67bf3d1b34e60f1fbd",
            "input": "Step 1: find the number of rows of each value of user_id in Users table.\nStep 2: find user_id, user_id of Users table with largest value in the results of step 1",
            "output": [
                "SELECT user_id , user_id FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2654a56c6eac498787e0e8ad022dad99",
            "input": "Step 1: find the number of rows of each value of FirstName in list table.\nStep 2: find FirstName of list table with largest value in the results of step 1",
            "output": [
                "SELECT FirstName FROM list GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d7a28506c803446492136546794b6c94",
            "input": "find the Address of Locations table",
            "output": [
                "SELECT Address FROM Locations"
            ]
        },
        {
            "id": "task077-0513a48f155d4a62a73dd2356e09b2ad",
            "input": "find without repetition the Advisor of Student table for which Major equals Fall",
            "output": [
                "SELECT DISTINCT Advisor FROM Student WHERE Major = \"Fall\""
            ]
        },
        {
            "id": "task077-b28e1f529f364d6194a7c92e0fc63f33",
            "input": "find the g_name of genre table ordered ascending by rating",
            "output": [
                "SELECT g_name FROM genre ORDER BY rating Asc"
            ]
        },
        {
            "id": "task077-a14376c319e247e7b7f019857cbc289c",
            "input": "Step 1: For each row in Organizations table, find the corresponding rows in Organization_Contact_Individuals table.\nStep 2: find the number of rows of each value of Organization_Contact_Individuals's organization_id in the results of step 1.\nStep 3: find organization_name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.organization_name FROM Organizations AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-23c76b6beddc4a02883f420976936a1a",
            "input": "Step 1: For each row in bank table, find the corresponding rows in customer table.\nStep 2: find bname of the results of step 1 whose credit_score less than 100",
            "output": [
                "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.credit_score < 100"
            ]
        },
        {
            "id": "task077-d4f00c6a2b1f4ea384627a91c769225e",
            "input": "Step 1: find the minimum rating in song table.\nStep 2: find the song_name of song table whose rating less than the results of step 1",
            "output": [
                "SELECT song_name FROM song WHERE rating < ( SELECT Min ( rating ) FROM song )"
            ]
        },
        {
            "id": "task077-a9533343577d4cc593f82267445f38ab",
            "input": "Step 1: For each row in route table, find corresponding rows in train table and in station table.\nStep 2: find name, network_name of the results of step 1 whose network_name equals Chiltern",
            "output": [
                "SELECT T1.name , T2.network_name FROM train AS T1 JOIN station AS T2 JOIN route AS T3 ON T1.id = T3.train_id AND T3.station_id = T2.id WHERE T2.network_name = \"Chiltern\""
            ]
        },
        {
            "id": "task077-3d442a50404145c1b8e60f2c75175e41",
            "input": "Step 1: find the product_price of Products table.\nStep 2: find the product_price of Products table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products"
            ]
        },
        {
            "id": "task077-fc4ec04126094012a2d5ee820ec8f72c",
            "input": "find the number of rows in routes table whose src_ap equals John F Kennedy International Airport",
            "output": [
                "SELECT Count ( * ) FROM routes WHERE src_ap = \"John F Kennedy International Airport\""
            ]
        },
        {
            "id": "task077-e64388a1edb040f2ad8f84cc440d872a",
            "input": "find the Shop_Details of Shops table",
            "output": [
                "SELECT Shop_Details FROM Shops"
            ]
        },
        {
            "id": "task077-1b7f35477f8840a7a618c254fbfadcf2",
            "input": "find without repetition the Age of Student table for which Major equals Fall",
            "output": [
                "SELECT DISTINCT Age FROM Student WHERE Major = \"Fall\""
            ]
        },
        {
            "id": "task077-6cef983047ec471fb2ede1cce2c9bd02",
            "input": "find the Chair_Name, Location of festival_detail table",
            "output": [
                "SELECT Chair_Name , Location FROM festival_detail"
            ]
        },
        {
            "id": "task077-cc6654ec8ccc4b49a19f9a34945f59b3",
            "input": "Step 1: find the rows in airports table whose country equals China.\nStep 2: find each value of name in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first row of the results",
            "output": [
                "SELECT name FROM airports WHERE country = \"China\" GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9d1284951ef94dfba2a63bc6a23be22a",
            "input": "find without repetition Fname of Student table whose Advisor equals PIT and Advisor not equals 1121",
            "output": [
                "SELECT DISTINCT Fname FROM Student WHERE Advisor = 1121 AND Advisor ! = \"PIT\""
            ]
        },
        {
            "id": "task077-26ffc635a41b4a5ba8a6d1db9d0bd269",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find the number of rows of each value of Tourist_Attractions's Location_ID in the results of step 1.\nStep 3: find Name, Address in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-530b968ebcf54c47bc70131e4edf3445",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find Fname, LName of the results of step 1 whose Election_Cycle equals Spring and President_Vote equals 18",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Election_Cycle = \"Spring\" AND T2.President_Vote = 18"
            ]
        },
        {
            "id": "task077-71da983152374f2a8b23c7976ebc2db2",
            "input": "Step 1: find the number of rows of each value of document_name in Documents table.\nStep 2: find document_name of Documents table with largest value in the results of step 1",
            "output": [
                "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ee11dcbe17cb41d2a52dc42b23d00a56",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find song's f_id of the results of step 1 whose formats equals mp4 and rating less than 1000",
            "output": [
                "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp4\" AND T2.rating < 1000"
            ]
        },
        {
            "id": "task077-b2e32659e26f4df7a421ae44fd8025c5",
            "input": "find the login_name of Students table",
            "output": [
                "SELECT login_name FROM Students"
            ]
        },
        {
            "id": "task077-5aca24d970b14ea9912399caf4ef8665",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose g_name equals modern or g_name equals english",
            "output": [
                "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = \"english\" OR T1.g_name = \"modern\""
            ]
        },
        {
            "id": "task077-caa9a7a223684afcb47ea4a0001e7b23",
            "input": "Step 1: For each row in bank table, find corresponding rows in customer table and in loan table.\nStep 2: find the average credit_score in the results of step 1 whose loan_type equals Mortgages",
            "output": [
                "SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = \"Mortgages\""
            ]
        },
        {
            "id": "task077-1f7940323920465083194fbeb6271ae9",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find course_name, course_description of the results of step 1 whose login_name equals Computer Science",
            "output": [
                "SELECT T2.course_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.login_name = \"Computer Science\""
            ]
        },
        {
            "id": "task077-d18ca873ce76474195426632b9858cb5",
            "input": "Step 1: find the number of rows of each value of party_phone in Parties table.\nStep 2: find party_phone of Parties table with largest value in the results of step 1",
            "output": [
                "SELECT party_phone FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b433f3bf49664b808b96e614b051317f",
            "input": "find each value of course_name in Courses table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name"
            ]
        },
        {
            "id": "task077-ed6957b694a94a8aa72d6890c08fef3b",
            "input": "Step 1: For each row in bank table, find corresponding rows in customer table and in loan table.\nStep 2: find cust_name, acc_bal of the results of step 1 whose amount greater than 5000",
            "output": [
                "SELECT T2.cust_name , T2.acc_bal FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > 5000"
            ]
        },
        {
            "id": "task077-820b7c7153ae49e4b4f288066221ec19",
            "input": "Step 1: For each row in bank table, find corresponding rows in customer table and in loan table.\nStep 2: find cust_name, city of the results of step 1 whose loan_type equals Business",
            "output": [
                "SELECT T2.cust_name , T1.city FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = \"Business\""
            ]
        },
        {
            "id": "task077-39123695065c4645a24bf7311993de3a",
            "input": "find the StuID of Student table for which Age equals or between 20 and 18",
            "output": [
                "SELECT StuID FROM Student WHERE Age BETWEEN 18 AND 20"
            ]
        },
        {
            "id": "task077-4ad84267224d4194a88e9abda3ce30c8",
            "input": "find without repetition the product_id of Order_Items table for which order_item_id equals or between 1975-01-01 and 1976-01-01",
            "output": [
                "SELECT DISTINCT product_id FROM Order_Items WHERE order_item_id BETWEEN \"1976-01-01\" AND \"1975-01-01\""
            ]
        },
        {
            "id": "task077-46d55f95c2db4772904d7f4938298db1",
            "input": "Step 1: For each row in Tourist_Attractions table, find the corresponding rows in Visits table.\nStep 2: find Name of the results of step 1 whose Visit_Details equals Marcelle",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Visit_Details = \"Marcelle\""
            ]
        },
        {
            "id": "task077-f7d091cad2f94dd6871c6f32470c716d",
            "input": "find each value of FacID in Faculty table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID"
            ]
        },
        {
            "id": "task077-dd808999774c49e988a83f0d6496c748",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname of the results of step 1 whose President_Vote equals 1004",
            "output": [
                "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 1004"
            ]
        },
        {
            "id": "task077-63f66f3af84b458fa86af6007d613d28",
            "input": "find the number of rows in list table whose FirstName equals LORIA and LastName equals ONDERSMA",
            "output": [
                "SELECT Count ( * ) FROM list WHERE FirstName = \"LORIA\" AND LastName = \"ONDERSMA\""
            ]
        },
        {
            "id": "task077-97d948775494469a904dfc81964dfa7d",
            "input": "Step 1: For each row in Ref_Hotel_Star_Ratings table, find the corresponding rows in Hotels table.\nStep 2: find hotel_id, star_rating_description, star_rating_description of the results of step 1 ordered ascending by price_range",
            "output": [
                "SELECT T2.hotel_id , T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc"
            ]
        },
        {
            "id": "task077-33324a3cf9f541b1ad4555f183678f4f",
            "input": "find the number of rows in Faculty table whose Sex equals F",
            "output": [
                "SELECT Count ( * ) FROM Faculty WHERE Sex = \"F\""
            ]
        },
        {
            "id": "task077-e0f3e98755c340e6bec111c42dea4e11",
            "input": "Step 1: for each value of Product_Name in Products table, calculate number of rows.\nStep 2: show each value of Product_Name in Products table along with the corresponding number of rows ordered descending by the results of step 1",
            "output": [
                "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name ORDER BY Count ( * ) Desc"
            ]
        },
        {
            "id": "task077-164a6de1f9ae4050b38ef5968427768e",
            "input": "Step 1: find the number of rows of each value of party_email in Parties table.\nStep 2: find party_email of Parties table with largest value in the results of step 1",
            "output": [
                "SELECT party_email FROM Parties GROUP BY party_email ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-57114648ba754809a5014ab8ba985641",
            "input": "find the f_id of song table with largest value of releasedate",
            "output": [
                "SELECT f_id FROM song ORDER BY releasedate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-367cdc2f55a240baa2e89912a9915d01",
            "input": "Step 1: find the artist_name, country of song table ordered descending by rating.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT artist_name , country FROM song ORDER BY rating Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-3fc6a513654d4573a85ca5ac0be88260",
            "input": "Step 1: For each row in Document_Functional_Areas table, find corresponding rows in Functional_Areas table and in Documents table.\nStep 2: find the average access_count in the results of step 1 whose parent_functional_area_code equals Acknowledgement",
            "output": [
                "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = \"Acknowledgement\""
            ]
        },
        {
            "id": "task077-55e2646a2041461eb4048aba3b499f56",
            "input": "Step 1: find Name of driver table whose Home_city equals Hartford and Age less than 40.\nStep 2: find the Name of driver table for which Age greater than 40.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Name FROM driver WHERE Home_city = \"Hartford\" AND Age < 40 INTERSECT SELECT Name FROM driver WHERE Age > 40"
            ]
        },
        {
            "id": "task077-16cb6407bcd446909572055caa1ba4e8",
            "input": "find the average rows in artist table whose gender equals Female",
            "output": [
                "SELECT Avg ( * ) FROM artist WHERE gender = \"Female\""
            ]
        },
        {
            "id": "task077-6943354b08344dcaaa43b1f716e8854f",
            "input": "Step 1: For each row in Organization_Contact_Individuals table, find corresponding rows in Individuals table and in Organizations table.\nStep 2: find individual_last_name of the results of step 1 with largest value of uk_vat_number",
            "output": [
                "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id ORDER BY T2.uk_vat_number Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-be208e4e98b048c3b6c06c137717a5fd",
            "input": "find the artist_name of song table with smallest value of rating",
            "output": [
                "SELECT artist_name FROM song ORDER BY rating Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-89d959c783194fe8b85d1b9008a786bd",
            "input": "Step 1: find the document_code of Documents table.\nStep 2: find the document_type_code of Documents table for which access_count greater than 10000.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT document_code FROM Documents EXCEPT SELECT document_type_code FROM Documents WHERE access_count > 10000"
            ]
        },
        {
            "id": "task077-c819d6aa006149b786ceec71cb12d18e",
            "input": "Step 1: find the average resolution in song table.\nStep 2: find the f_id of song table whose resolution greater than the results of step 1",
            "output": [
                "SELECT f_id FROM song WHERE resolution > ( SELECT Avg ( resolution ) FROM song )"
            ]
        },
        {
            "id": "task077-465c5a81b7e34e5ebb0aced58d218b0b",
            "input": "find the Fname of Faculty table",
            "output": [
                "SELECT Fname FROM Faculty"
            ]
        },
        {
            "id": "task077-80f09eaaec0b4cdaa37a88c95e0edffe",
            "input": "find the number of rows in files table whose duration less than 4:%",
            "output": [
                "SELECT Count ( * ) FROM files WHERE duration < \"4:%\""
            ]
        },
        {
            "id": "task077-a3be32d668c2458087edb97e45f83411",
            "input": "find name, country, elevation of airports table whose city equals New York or city equals Goroka",
            "output": [
                "SELECT name , country , elevation FROM airports WHERE city = \"Goroka\" OR city = \"New York\""
            ]
        },
        {
            "id": "task077-36f4185d4c86434cb58c7222120603cb",
            "input": "find without repetition the individual_last_name of Individuals table",
            "output": [
                "SELECT DISTINCT individual_last_name FROM Individuals"
            ]
        },
        {
            "id": "task077-6319dc79010d47a1942a08a8e5c8e260",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find artist's artist_name, artist's country of the results of step 1 whose song_name equals love",
            "output": [
                "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = \"love\""
            ]
        },
        {
            "id": "task077-20910fb27b1947f0b897eec36b10d589",
            "input": "Step 1: For each row in list table, find the corresponding rows in teachers table.\nStep 2: find the number of rows in the results of step 1 whose FirstName equals LORIA and FirstName equals ONDERSMA",
            "output": [
                "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = \"LORIA\" AND T2.FirstName = \"ONDERSMA\""
            ]
        },
        {
            "id": "task077-e90c591e1e864fcba29cbcaf8d2bb04a",
            "input": "find the state, acc_type, credit_score of customer table for which cust_name equals 0",
            "output": [
                "SELECT state , acc_type , credit_score FROM customer WHERE cust_name = 0"
            ]
        },
        {
            "id": "task077-dc9844eb64c04f33acb60736958f7e30",
            "input": "Step 1: For each row in artwork table, find the corresponding rows in nomination table.\nStep 2: for each value of Festival_ID in the results of step 1, find the number of rows along with artwork's Artwork_ID and Name",
            "output": [
                "SELECT T1.Artwork_ID , T1.Name , Count ( * ) FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID"
            ]
        },
        {
            "id": "task077-d67eb1060b7f4f358e3db02a6fde942a",
            "input": "find the number of different loan_type in loan table",
            "output": [
                "SELECT Count ( DISTINCT loan_type ) FROM loan"
            ]
        },
        {
            "id": "task077-bd0fd3936d0f48d8903cc45646ec85b0",
            "input": "Step 1: find the artist_name of artist table.\nStep 2: find the song's artist_name of song table for which rating greater than 8.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.rating > 8"
            ]
        },
        {
            "id": "task077-b1bfb559282946c8913bba3fa95d64e1",
            "input": "find the number of rows in Staff table",
            "output": [
                "SELECT Count ( * ) FROM Staff"
            ]
        },
        {
            "id": "task077-49a2f4a13bfb49d3acb235f4263889d9",
            "input": "find FacID of Faculty table whose Sex equals M and Sex equals M",
            "output": [
                "SELECT FacID FROM Faculty WHERE Sex = \"M\" AND Sex = \"M\""
            ]
        },
        {
            "id": "task077-e9da807cd60e48dc9ab983cb939c3eae",
            "input": "find the number of rows in artist table whose gender equals Male",
            "output": [
                "SELECT Count ( * ) FROM artist WHERE gender = \"Male\""
            ]
        },
        {
            "id": "task077-46aa3dc751864dbd9de929322bd1bce8",
            "input": "Step 1: find the cust_name of customer table.\nStep 2: find the cust_name of customer table whose cust_ID not one of the results of step 1",
            "output": [
                "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )"
            ]
        },
        {
            "id": "task077-0d33242b04854beeb484bcdbff937371",
            "input": "find the train_number, time of train table for which destination equals Chennai",
            "output": [
                "SELECT train_number , time FROM train WHERE destination = \"Chennai\""
            ]
        },
        {
            "id": "task077-400b059649aa4284aafa31579139b8d8",
            "input": "Step 1: find without repetition the artist_name of song table.\nStep 2: find the artist_name of song table for which rating greater than 8.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT DISTINCT artist_name FROM song EXCEPT SELECT artist_name FROM song WHERE rating > 8"
            ]
        },
        {
            "id": "task077-28e6864417584dde9e5e7a132ebd4a01",
            "input": "find the number of rows in routes table whose airline equals American Airlines",
            "output": [
                "SELECT Count ( * ) FROM routes WHERE airline = \"American Airlines\""
            ]
        },
        {
            "id": "task077-47bba7c394d549f69b664892c419e515",
            "input": "find the invoice_date of Invoices table for which invoice_number less than 10",
            "output": [
                "SELECT invoice_date FROM Invoices WHERE invoice_number < 10"
            ]
        },
        {
            "id": "task077-2a5f6a2659944101b90c4479a4f25071",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition President_Vote of the results of step 1 whose Fname equals 08/30/2015",
            "output": [
                "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = \"08/30/2015\""
            ]
        },
        {
            "id": "task077-1d5c7f0fecd34afd9dcbb1a9e1a79b82",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find personal_name of the results of step 1 whose course_name equals advanced database",
            "output": [
                "SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"advanced database\""
            ]
        },
        {
            "id": "task077-8a1397b08467406bbb82c7637748e520",
            "input": "find each value of product_category in Products table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT product_category , Count ( * ) FROM Products GROUP BY product_category"
            ]
        },
        {
            "id": "task077-e825acfc0a7445cc9d816f30efa82ce3",
            "input": "find FirstName, LastName of list table whose FirstName equals MARROTTE and LastName equals KIRK",
            "output": [
                "SELECT FirstName , LastName FROM list WHERE FirstName = \"MARROTTE\" AND LastName = \"KIRK\""
            ]
        },
        {
            "id": "task077-01b2b9db70544140a14f0e7de2976cdd",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find Name of the results of step 1 whose Address equals Marcelle",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"Marcelle\""
            ]
        },
        {
            "id": "task077-51246677b2be46fcb1d0108421f1e71d",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: find each value of dst_apid in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid"
            ]
        },
        {
            "id": "task077-a4ac8bee1bb44704962402800f9b88e4",
            "input": "Step 1: For each row in artist table, find the corresponding rows in files table.\nStep 2: find artist's artist_name, gender of the results of step 1 whose formats contains Mar",
            "output": [
                "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats LIKE \"Mar\""
            ]
        },
        {
            "id": "task077-9c1944c187104d06a54fab6d33b376bb",
            "input": "Step 1: find the number of rows of each value of document_name in Documents table.\nStep 2: find document_name of Documents table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-197885edffda4a5a9d6df98ede0397b0",
            "input": "Step 1: For each row in Tourist_Attractions table, find corresponding rows in Locations table and in Visits table.\nStep 2: find Visit_Date, Visit_Details of the results of step 1 whose Locations's Other_Details equals Vincent",
            "output": [
                "SELECT T3.Visit_Date , T3.Visit_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Visits AS T3 ON T2.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T1.Other_Details = \"Vincent\""
            ]
        },
        {
            "id": "task077-c14f7d103cb54812b001ab8e9621097c",
            "input": "Step 1: find the stuid of Participates_in table for which actid equals Canoeing.\nStep 2: find the stuid of Participates_in table for which actid equals Kayaking.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT stuid FROM Participates_in WHERE actid = \"Canoeing\" INTERSECT SELECT stuid FROM Participates_in WHERE actid = \"Kayaking\""
            ]
        },
        {
            "id": "task077-b38304bfb05e41c3a73c37524dd958a2",
            "input": "Step 1: For each row in company table, find the corresponding rows in employment table.\nStep 2: find each value of employment's Company_ID in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID"
            ]
        },
        {
            "id": "task077-1b669b0e02d8417eb8b2fbe3a85dae92",
            "input": "Step 1: find Party of driver table whose Home_city equals Hartford and Age greater than 40.\nStep 2: find the Party of driver table for which Age greater than 40.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Party FROM driver WHERE Home_city = \"Hartford\" AND Age > 40 INTERSECT SELECT Party FROM driver WHERE Age > 40"
            ]
        },
        {
            "id": "task077-0d157a643c3f4f34b75b28994c4a6284",
            "input": "Step 1: find the email_address, phone_number of Staff table.\nStep 2: find the email_address, phone_number of Staff table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT email_address , phone_number FROM Staff EXCEPT SELECT email_address , phone_number FROM Staff"
            ]
        },
        {
            "id": "task077-3c13545f26d644118c3e83219fd9f2a1",
            "input": "Step 1: For each row in Locations table, find the corresponding rows in Tourist_Attractions table.\nStep 2: find Address of the results of step 1 whose Name equals UK Gallery",
            "output": [
                "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T2.Name = \"UK Gallery\""
            ]
        },
        {
            "id": "task077-739f40b374ec4413b50efb378f18ae0a",
            "input": "find the average price_range in Hotels table",
            "output": [
                "SELECT Avg ( price_range ) FROM Hotels"
            ]
        },
        {
            "id": "task077-7515cdc4a95b42dabdabb8456ca6564f",
            "input": "Step 1: find the loan's cust_ID of loan table for which loan_type equals Mortgages.\nStep 2: find the average credit_score in customer table whose cust_name not one of the results of step 1",
            "output": [
                "SELECT Avg ( T1.credit_score ) FROM customer AS T1 WHERE T1.cust_name NOT IN ( SELECT T2.cust_ID FROM loan AS T2 WHERE T2.loan_type = \"Mortgages\" )"
            ]
        },
        {
            "id": "task077-4a9b1888b6f14628bd0a7e73685d1b48",
            "input": "Step 1: find the number of rows of each value of city in airports table.\nStep 2: find city in airports table whose corresponding value in step 1 is greater than 2",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-0ea160a215bb489a938797d7b8b78961",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition LName of the results of step 1 whose President_Vote equals 8741 and Secretary_Vote equals 1010",
            "output": [
                "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 8741 AND T2.Secretary_Vote = 1010"
            ]
        },
        {
            "id": "task077-60300092d1df4b89a1950643cbab3ff2",
            "input": "find artist_name of artist table whose gender equals UK and gender equals Male",
            "output": [
                "SELECT artist_name FROM artist WHERE gender = \"Male\" AND gender = \"UK\""
            ]
        },
        {
            "id": "task077-825dc986395e4d49bb807884576b33ff",
            "input": "find each value of day_of_week in weekly_weather table along with the average low_temperature of the corresponding rows to each value",
            "output": [
                "SELECT day_of_week , Avg ( low_temperature ) FROM weekly_weather GROUP BY day_of_week"
            ]
        },
        {
            "id": "task077-d9577006fe6f49fa89aa5e4ee42325a2",
            "input": "Step 1: For each row in Faculty table, find the corresponding rows in Faculty_Participates_in table.\nStep 2: for each value of Faculty_Participates_in's FacID in the results of step 1, find the number of rows along with Fname and Lname",
            "output": [
                "SELECT T2.Fname , T2.Lname , Count ( * ) FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID"
            ]
        },
        {
            "id": "task077-16fc2dad55ed450c92835318e75552eb",
            "input": "Step 1: For each row in Organization_Contact_Individuals table, find corresponding rows in Individuals table and in Organizations table.\nStep 2: find individual_last_name of the results of step 1 whose organization_name equals Labour Party",
            "output": [
                "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id WHERE T2.organization_name = \"Labour Party\""
            ]
        },
        {
            "id": "task077-899ef205a689480d9aff70de01231827",
            "input": "Step 1: find the customer_id of Customer_Orders table.\nStep 2: find the customer_name, customer_phone of Customers table whose Customers's customer_id not one of the results of step 1",
            "output": [
                "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Customer_Orders AS T2 )"
            ]
        },
        {
            "id": "task077-8f7ec4375e3d428ba952654dc721f726",
            "input": "find the Name of company table for which Profits_in_Billion greater than 200 ordered descending by Sales_in_Billion",
            "output": [
                "SELECT Name FROM company WHERE Profits_in_Billion > 200 ORDER BY Sales_in_Billion Desc"
            ]
        },
        {
            "id": "task077-c5bfb5ae2a8344cc8c02709281b6946c",
            "input": "find each value of Type in school table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Type , Count ( * ) FROM school GROUP BY Type"
            ]
        },
        {
            "id": "task077-6bbc665494144e579af191995b9dce2f",
            "input": "find the song_name of song table",
            "output": [
                "SELECT song_name FROM song"
            ]
        },
        {
            "id": "task077-067dd607dd4e4158b0c532fdb0f5d47a",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find files's artist_name of the results of step 1 with largest value of releasedate",
            "output": [
                "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id ORDER BY T2.releasedate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a27ebf86d0504151956cc2cd5cce8f58",
            "input": "find the cust_name of customer table with largest value of credit_score",
            "output": [
                "SELECT cust_name FROM customer ORDER BY credit_score Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e7bf44bb6b1f486ca9b4e4034084f5fa",
            "input": "find the state, acc_type, credit_score of customer table",
            "output": [
                "SELECT state , acc_type , credit_score FROM customer"
            ]
        },
        {
            "id": "task077-978d6343d6214be7aebb22ab7fae4296",
            "input": "find the shipment_date of Shipments table for which shipment_tracking_number equals 3452",
            "output": [
                "SELECT shipment_date FROM Shipments WHERE shipment_tracking_number = 3452"
            ]
        },
        {
            "id": "task077-c04294e52b34495a95167e0f7b968bdd",
            "input": "Step 1: For each row in Tourist_Attractions table, find corresponding rows in Locations table and in Shops table.\nStep 2: find Address of the results of step 1 whose Shop_Details equals Vincent",
            "output": [
                "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Shops AS T3 ON T2.Tourist_Attraction_ID = T3.Shop_ID WHERE T3.Shop_Details = \"Vincent\""
            ]
        },
        {
            "id": "task077-f7a21360b46b4448b173bf01e33dee41",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find artist's artist_name, song_name of the results of step 1 whose song_name contains love",
            "output": [
                "SELECT T1.artist_name , T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE \"love\""
            ]
        },
        {
            "id": "task077-0bff4ddb7f5f4041bb041c733a45f3fe",
            "input": "Step 1: find the number of rows of each value of Location in festival_detail table.\nStep 2: find Location of festival_detail table with largest value in the results of step 1",
            "output": [
                "SELECT Location FROM festival_detail GROUP BY Location ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9a6684bdebfd49848286ccadb375556a",
            "input": "Step 1: find the Name of driver table.\nStep 2: find the Name of driver table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM driver EXCEPT SELECT Name FROM driver"
            ]
        },
        {
            "id": "task077-f8f1e78ff7064c61ac82e4d1110314c9",
            "input": "find artist_name of song table whose song_name equals mp3 and rating less than 1000",
            "output": [
                "SELECT artist_name FROM song WHERE song_name = \"mp3\" AND rating < 1000"
            ]
        },
        {
            "id": "task077-05fac781a7b44558aa5d8a39d66de659",
            "input": "Step 1: For each row in bank table, find corresponding rows in customer table and in loan table.\nStep 2: find without repetition cust_name, credit_score of the results of step 1 whose loan_type equals Mortgages",
            "output": [
                "SELECT DISTINCT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = \"Mortgages\""
            ]
        },
        {
            "id": "task077-3a525a6cf7bd423fbfdbe27bb73d2866",
            "input": "find each value of name in airports table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT name , Count ( * ) FROM airports GROUP BY name"
            ]
        },
        {
            "id": "task077-8ff38345a5444cb9b65bc4e52712ec8d",
            "input": "Step 1: find the number of rows of each value of state in customer table.\nStep 2: find state of customer table with largest value in the results of step 1",
            "output": [
                "SELECT state FROM customer GROUP BY state ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8b182d515e9f42368b26b3808051d8c4",
            "input": "Step 1: For each row in Tourist_Attractions table, find the corresponding rows in Visits table.\nStep 2: find Name, Visit_Date of the results of step 1 whose Name equals Vincent or Name equals Vivian",
            "output": [
                "SELECT T1.Name , T2.Visit_Date FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"Vivian\" OR T1.Name = \"Vincent\""
            ]
        },
        {
            "id": "task077-f7eba1a13d19412189107afa9053c647",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find gender, song's artist_name of the results of step 1 with smallest value of song_name",
            "output": [
                "SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-b5807d796d654aed8d024482916d703b",
            "input": "Step 1: find the cust_ID of loan table.\nStep 2: find the average credit_score in customer table whose cust_name not one of the results of step 1",
            "output": [
                "SELECT Avg ( T1.credit_score ) FROM customer AS T1 WHERE T1.cust_name NOT IN ( SELECT T2.cust_ID FROM loan AS T2 )"
            ]
        },
        {
            "id": "task077-68c21d49fe2a459f836df864fc338415",
            "input": "find without repetition the Advisor of Student table for which Major equals Spring",
            "output": [
                "SELECT DISTINCT Advisor FROM Student WHERE Major = \"Spring\""
            ]
        },
        {
            "id": "task077-024a3316573a4ecaad10c436424ad574",
            "input": "find each value of artist_name in files table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name"
            ]
        },
        {
            "id": "task077-bdf8913d75c847c487cd3e3dbb16033a",
            "input": "Step 1: For each row in airports table, find the corresponding rows in routes table.\nStep 2: only keep the results of step 1 whose country equals China.\nStep 3: find the number of rows of each value of dst_ap in the results of step 2.\nStep 4: find dst_ap of the results of step 2 with largest value in the results of step 3",
            "output": [
                "SELECT T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = \"China\" GROUP BY T1.dst_ap ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a4ff44cd40bb494398df23438619c4bf",
            "input": "find the Building of Faculty table for which Rank greater than or equals Professor",
            "output": [
                "SELECT Building FROM Faculty WHERE Rank > = \"Professor\""
            ]
        },
        {
            "id": "task077-f18903ae79c74fefb98db0a2b91e31da",
            "input": "find the number of rows in Student table whose Sex equals M and Major equals 600",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Sex = \"M\" AND Major = 600"
            ]
        },
        {
            "id": "task077-25bce54ae7b04c78b15cde9560ccf662",
            "input": "Step 1: find the average CHECKING's balance in CHECKING table.\nStep 2: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 3: find name in the results of step 2 whose SAVINGS's balance less than the results of step 1",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )"
            ]
        },
        {
            "id": "task077-906ef0bfd6a340de99d574e96afd2e2a",
            "input": "Step 1: find the date, mean_temperature_f, max_wind_Speed_mph of weather table ordered descending by max_wind_Speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-e90437ad559143899451bb819924606d",
            "input": "find the cust_name, acc_bal of customer table for which no_of_loans greater than 5000",
            "output": [
                "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > 5000"
            ]
        },
        {
            "id": "task077-5494a16ca0d54be199f37c87ab4a34bc",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find without repetition Person's name, age of the results of step 1 whose friend not equals Dan",
            "output": [
                "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend ! = \"Dan\""
            ]
        },
        {
            "id": "task077-ef9e38a6d67e420c8840c1631e191cda",
            "input": "find the Player of match_season table for which Player contains English",
            "output": [
                "SELECT Player FROM match_season WHERE Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-21d79d432284480a9961e06421aa7b98",
            "input": "find the problem_log_id, log_entry_date of Problem_Log table for which problem_log_id equals 10",
            "output": [
                "SELECT problem_log_id , log_entry_date FROM Problem_Log WHERE problem_log_id = 10"
            ]
        },
        {
            "id": "task077-c616fcb67c3545909d30459f61fa56aa",
            "input": "Step 1: For each row in Addresses table, find corresponding rows in Drama_Workshop_Groups table and in Stores table.\nStep 2: find the number of different Currency_Code in the results of step 1 whose Stores's Store_Name equals FJA Filming",
            "output": [
                "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = \"FJA Filming\""
            ]
        },
        {
            "id": "task077-1fa53f546e584afd98f12ee32a9b8ec3",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose duration equals english or duration starts with 4:",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = \"4:%\" OR T1.duration LIKE \"english\""
            ]
        },
        {
            "id": "task077-795c3edcae1c49f7849bb2b3e439bfc4",
            "input": "find the average price_in_euros and the minimum price_in_dollars in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_euros ) , Min ( price_in_dollars ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-633e495f5cf94894be6eaa8d55443e0b",
            "input": "Step 1: For each row in volume table, find the corresponding rows in music_festival table.\nStep 2: find Issue_Date, Music_Festival of the results of step 1",
            "output": [
                "SELECT T1.Issue_Date , T2.Music_Festival FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume"
            ]
        },
        {
            "id": "task077-03e247365f38479ebb20c722af061974",
            "input": "Step 1: For each row in city table, find the corresponding rows in address table.\nStep 2: find the number of rows of each value of address's city_id in the results of step 1.\nStep 3: find address, city, address's city_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.address , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-7e58d2033c5249b48b136854e0d3906c",
            "input": "find the Market_Details of Street_Markets table",
            "output": [
                "SELECT Market_Details FROM Street_Markets"
            ]
        },
        {
            "id": "task077-8ecb55715599415d8c891b9a2a623e25",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose languages equals modern or preferred_genre equals english",
            "output": [
                "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"modern\" OR T1.preferred_genre = \"english\""
            ]
        },
        {
            "id": "task077-67895f3612444c2f87f425c9d9611b0c",
            "input": "Step 1: find the number of rows of each value of Location_ID in Tourist_Attractions table.\nStep 2: find Name of Tourist_Attractions table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM Tourist_Attractions GROUP BY Location_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c218a8b22c964e289d91ec50aa63f951",
            "input": "find the maximum Gold and the minimum Silver in club_rank table",
            "output": [
                "SELECT Max ( Gold ) , Min ( Silver ) FROM club_rank"
            ]
        },
        {
            "id": "task077-c2b2bd6a23474374abedef835ed80ff2",
            "input": "find the Issue_Date, Song of volume table",
            "output": [
                "SELECT Issue_Date , Song FROM volume"
            ]
        },
        {
            "id": "task077-9b911cf01c7e453fa9d05a0a680b3c5c",
            "input": "find the staff_id of Staff_Department_Assignments table for which date_assigned_to greater than or equals Clerical Staff",
            "output": [
                "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > = \"Clerical Staff\""
            ]
        },
        {
            "id": "task077-529a26344d454deab1f1efc503113572",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname, LName of the results of step 1 whose Advisor equals 18 and Treasurer_Vote equals 1035",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = 18 AND T2.Treasurer_Vote = 1035"
            ]
        },
        {
            "id": "task077-ecece2bb25da459d99feb2c6f6c10fe5",
            "input": "Step 1: For each row in All_Documents table, find the corresponding rows in Document_Locations table.\nStep 2: find Date_in_Locaton_To of the results of step 1 whose Document_Name equals Marry CV",
            "output": [
                "SELECT T2.Date_in_Locaton_To FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = \"Marry CV\""
            ]
        },
        {
            "id": "task077-631f5ca3df2a450da97d4f0e1961c6ee",
            "input": "find the minimum Order_Quantity and the summation of Order_Quantity in Invoice_Items table",
            "output": [
                "SELECT Min ( Order_Quantity ) , Sum ( Order_Quantity ) FROM Invoice_Items"
            ]
        },
        {
            "id": "task077-9251029ca4764e96b725c055f68ece7c",
            "input": "find the Date_of_ceremony, Date_of_ceremony of music_festival table",
            "output": [
                "SELECT Date_of_ceremony , Date_of_ceremony FROM music_festival"
            ]
        },
        {
            "id": "task077-0b063ecf930240e2b612da7748a1bf0d",
            "input": "find the average other_customer_details in Customers table",
            "output": [
                "SELECT Avg ( other_customer_details ) FROM Customers"
            ]
        },
        {
            "id": "task077-be82ddb8c1c6426da877ebc39946f740",
            "input": "Step 1: For each row in School table, find the corresponding rows in budget table.\nStep 2: find School_name, Budgeted, total_budget_percent_invested of the results of step 1 whose Year greater than or equals 2002",
            "output": [
                "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = 2002"
            ]
        },
        {
            "id": "task077-9acd69dbb9a64226af1cbbd4a04af87d",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Orders table.\nStep 2: find customer_name of the results of step 1 whose shipping_method_code equals Paid.\nStep 3: find customer_name of the results of step 1 whose order_status_code equals FedEx.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.shipping_method_code = \"Paid\" INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"FedEx\""
            ]
        },
        {
            "id": "task077-c45b38121f6f4b1596c4f15aa9bb0c0c",
            "input": "Step 1: For each row in county table, find the corresponding rows in election table.\nStep 2: find Committee of the results of step 1 whose Population less than 100000",
            "output": [
                "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population < 100000"
            ]
        },
        {
            "id": "task077-4514f57dbfc348b0b0c25a5d7273bb9e",
            "input": "Step 1: find the artist's artist_name of artist table for which artist's country equals UK.\nStep 2: find the song's artist_name of song table for which song's country equals english.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = \"UK\" INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = \"english\""
            ]
        },
        {
            "id": "task077-3ba937d0d95f4aac8d4809883246dc6f",
            "input": "Step 1: find the cmi_cross_ref_id of CMI_Cross_References table.\nStep 2: find the cmi_cross_ref_id of Business_Rates table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Business_Rates AS T2"
            ]
        },
        {
            "id": "task077-0d16b8cb027246e4835e1861deebae2d",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than or equals 8000 and MAX_SALARY less than or equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = 8000 AND T1.MAX_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-8731307b89094faf80650d90d92bfbec",
            "input": "find the pName of Player table ordered ascending by pName",
            "output": [
                "SELECT pName FROM Player ORDER BY pName Asc"
            ]
        },
        {
            "id": "task077-01d5f79c4e004cb6aef84d94bdac6cbe",
            "input": "Step 1: For each row in broadcast table, find corresponding rows in program table and in channel table.\nStep 2: find program's Name, channel's Owner, program's Owner of the results of step 1",
            "output": [
                "SELECT T1.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID"
            ]
        },
        {
            "id": "task077-f77bdbc187a44145a86b4561bcaf7353",
            "input": "find title of film table whose replacement_cost greater than 200 or rental_rate less than 100",
            "output": [
                "SELECT title FROM film WHERE replacement_cost > 200 OR rental_rate < 100"
            ]
        },
        {
            "id": "task077-3a948bcaaeaa4acab24fea8e7451c5c1",
            "input": "find the rows of jobs table for which MIN_SALARY greater than 2500",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY > 2500"
            ]
        },
        {
            "id": "task077-d8a4d1b08c82402e91d68a5f5fdbe07c",
            "input": "find the average price_in_euros and the maximum price_in_dollars in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_euros ) , Max ( price_in_dollars ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-f427ffca437b45f79410cdb871179294",
            "input": "Step 1: For each row in Institution table, find the corresponding rows in protein table.\nStep 2: find protein_name, Type of the results of step 1",
            "output": [
                "SELECT T2.protein_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id"
            ]
        },
        {
            "id": "task077-cfba44cf44c842d886fa9f0fbdd166e1",
            "input": "Step 1: find the Porphyria of enzyme table.\nStep 2: find the number of rows in enzyme table whose id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Porphyria FROM enzyme )"
            ]
        },
        {
            "id": "task077-96f9012e38694cabae0dbb087e3fa3fa",
            "input": "find without repetition the Fname, Age of Student table for which Advisor equals 18",
            "output": [
                "SELECT DISTINCT Fname , Age FROM Student WHERE Advisor = 18"
            ]
        },
        {
            "id": "task077-a911f847d97c490496f2c7439b0baa9c",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find the summation of age of each value of friend in the results of step 1.\nStep 3: find PersonFriend's name in the results of step 1 whose corresponding value in step 2 is greater than or equals engineer",
            "output": [
                "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = \"engineer\""
            ]
        },
        {
            "id": "task077-79ad187ca7c3496888476aa8f8dbb1a4",
            "input": "Step 1: find the date, mean_temperature_f, min_temperature_f of weather table ordered descending by mean_wind_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-7e7e34d4a77f45598c06677ae70355e2",
            "input": "find the average Famous_Release_date in artist table whose Age greater than or equals 25",
            "output": [
                "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Age > = 25"
            ]
        },
        {
            "id": "task077-d5f531a3bdbf46999c637f37ec542471",
            "input": "find the City of city table for which Regional_Population greater than 2010",
            "output": [
                "SELECT City FROM city WHERE Regional_Population > 2010"
            ]
        },
        {
            "id": "task077-e0f1f3b0ef704aff930b583f641972b8",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find the average Weeks_on_Top in the results of step 1 whose Artist equals Gorgoroth or Age equals 25",
            "output": [
                "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = \"Gorgoroth\" OR T1.Age = 25"
            ]
        },
        {
            "id": "task077-f68eee8b5ae642c1993c9f8fd3e8dee3",
            "input": "find JOB_TITLE, MIN_SALARY of jobs table whose MIN_SALARY contains 12000 and MAX_SALARY less than or equals 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE 12000 AND MAX_SALARY < = 18000"
            ]
        },
        {
            "id": "task077-c8c84dd15ce84d7abd24b8b5bace2c3a",
            "input": "Step 1: find the Boys_or_Girls of school table for which Founded greater than 1890.\nStep 2: find the Denomination of school table for which Founded less than 1900.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Boys_or_Girls FROM school WHERE Founded > 1890 INTERSECT SELECT Denomination FROM school WHERE Founded < 1900"
            ]
        },
        {
            "id": "task077-1fef40512e2e4b5fa203425c2f95ac75",
            "input": "find the EMPLOYEE_ID of employees table",
            "output": [
                "SELECT EMPLOYEE_ID FROM employees"
            ]
        },
        {
            "id": "task077-8143b6174b1a45c3b0c2ad9a538abc97",
            "input": "Step 1: find the Unsure_rate of candidate table ordered descending by Oppose_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Unsure_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-48119e72f0ed4a5a9ed86d4ed0dd9a88",
            "input": "find the Name, Name of Products table with largest value of Price",
            "output": [
                "SELECT Name , Name FROM Products ORDER BY Price Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-581233ee94bb4f56a7c8e044f25c578c",
            "input": "find the date of weather table for which wind_dir_degrees greater than 85",
            "output": [
                "SELECT date FROM weather WHERE wind_dir_degrees > 85"
            ]
        },
        {
            "id": "task077-22e87e3276274e19b2f0d4db0cc4034e",
            "input": "Step 1: find the minimum date_assigned_from in Staff_Department_Assignments table.\nStep 2: find the staff_id of Staff_Department_Assignments table whose date_assigned_to less than the results of step 1",
            "output": [
                "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_from ) FROM Staff_Department_Assignments )"
            ]
        },
        {
            "id": "task077-b5d3aa352be34e31b3308aaf3009ba15",
            "input": "find the average Sheep_and_Goats in farm table whose Cows greater than 5000",
            "output": [
                "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Cows > 5000"
            ]
        },
        {
            "id": "task077-72af1f328cb24b919a1d9bc4009a84d4",
            "input": "find the pName, HS of Player table for which yCard equals yes",
            "output": [
                "SELECT pName , HS FROM Player WHERE yCard = \"yes\""
            ]
        },
        {
            "id": "task077-9fff64f70e0c4fe4ace167bb7988734c",
            "input": "find the average Total_Horses in farm table whose Sheep_and_Goats greater than 5000",
            "output": [
                "SELECT Avg ( Total_Horses ) FROM farm WHERE Sheep_and_Goats > 5000"
            ]
        },
        {
            "id": "task077-8fb4e1fc517040a681bb803564bdcacf",
            "input": "Step 1: For each row in Problems table, find the corresponding rows in Problem_Log table.\nStep 2: find problem_log_id, date_problem_reported of the results of step 1 whose Problem_Log's problem_id equals 10",
            "output": [
                "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = 10"
            ]
        },
        {
            "id": "task077-8afcea0c609d4de5bdb9bef17b43e5a2",
            "input": "Step 1: find the number of rows of each value of Nominee in musical table.\nStep 2: find Award of musical table with largest value in the results of step 1",
            "output": [
                "SELECT Award FROM musical GROUP BY Nominee ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3eeaf3f12b514bbc9534ea584b546a8a",
            "input": "Step 1: for each value of document_type_code in Documents table, calculate number of rows.\nStep 2: show each value of document_type_code in Documents table along with the corresponding average access_count with smallest value in the results of step 1",
            "output": [
                "SELECT access_count , Avg ( access_count ) FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-d733261748d64533a03863bb6dc8e8e6",
            "input": "Step 1: find the average min_visibility_miles of each value of zip_code in weather table.\nStep 2: find zip_code in weather table whose corresponding value in step 1 is greater than 10",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) > 10"
            ]
        },
        {
            "id": "task077-8d95592778e74c129e3081519d97fa76",
            "input": "Step 1: find the average duration in trip table whose zip_code equals 94103.\nStep 2: find the id of trip table whose duration greater than the results of step 1",
            "output": [
                "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE zip_code = 94103 )"
            ]
        },
        {
            "id": "task077-fc7393a5e18a4ab3abeb280d203f3bb4",
            "input": "Step 1: For each row in Manufacturers table, find the corresponding rows in Products table.\nStep 2: find the  Products's Name in the results of step 1 whose Revenue greater than or equals 180 ordered descending by Price",
            "output": [
                "SELECT T2.Name , T2.Price FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > = 180 ORDER BY T2.Price Desc"
            ]
        },
        {
            "id": "task077-d97fb5493d524cf486b5f5bafc8ae29d",
            "input": "find the number of different payment_method_code in Ref_Payment_Methods table whose payment_method_description equals credit",
            "output": [
                "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods WHERE payment_method_description = \"credit\""
            ]
        },
        {
            "id": "task077-98ae69acb5e349d585a3bcee2298fd6e",
            "input": "find the Document_Type_Code, Document_Type_Description of Ref_Document_Types table",
            "output": [
                "SELECT Document_Type_Code , Document_Type_Description FROM Ref_Document_Types"
            ]
        },
        {
            "id": "task077-258173e50b6044dfa20a91d0f7aee1ea",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport's id in the results of step 1.\nStep 3: find airport's id, name, Pilot of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b567a38a24da430889bb7121f2ef1e62",
            "input": "find the customer_name of Customers table for which customer_details equals or between 2009-01-01 and 2010-01-01",
            "output": [
                "SELECT customer_name FROM Customers WHERE customer_details BETWEEN \"2010-01-01\" AND \"2009-01-01\""
            ]
        },
        {
            "id": "task077-9cb99548fb424773a0e0de5c8168395d",
            "input": "Step 1: find the address_line_1, email_address of Customers table for which email_address equals hsteuber@example.org.\nStep 2: find the address_line_1, email_address of Customers table for which email_address equals vbogisich@example.org.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT address_line_1 , email_address FROM Customers WHERE email_address = \"hsteuber@example.org\" INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = \"vbogisich@example.org\""
            ]
        },
        {
            "id": "task077-6bb13062bfe144b6863bb8987002b476",
            "input": "find the average min_sea_level_pressure_inches in weather table",
            "output": [
                "SELECT Avg ( min_sea_level_pressure_inches ) FROM weather"
            ]
        },
        {
            "id": "task077-0b75a096d7ce466fb45361d94f63bddb",
            "input": "find the number of rows in storm table whose Name greater than or equals 0",
            "output": [
                "SELECT Count ( * ) FROM storm WHERE Name > = 0"
            ]
        },
        {
            "id": "task077-3090a5b1f9f14e88b1048f1796c5aea5",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table for which characteristic_name equals slow.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics WHERE characteristic_name = \"slow\" EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics"
            ]
        },
        {
            "id": "task077-1926038b4321410c9701a115899a5f36",
            "input": "find the catalog_name of Catalogs table for which catalog_id greater than 8",
            "output": [
                "SELECT catalog_name FROM Catalogs WHERE catalog_id > 8"
            ]
        },
        {
            "id": "task077-23c50793b4b6434e93f27d2d83ba877e",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find the summation of age of each value of friend in the results of step 1.\nStep 3: find PersonFriend's name in the results of step 1 whose corresponding value in step 2 is greater than engineer",
            "output": [
                "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > \"engineer\""
            ]
        },
        {
            "id": "task077-01d40578e6d149b79e8047d18d27afbc",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose g_name equals modern or genre_is equals english",
            "output": [
                "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = \"modern\" OR T2.genre_is = \"english\""
            ]
        },
        {
            "id": "task077-67897b7d36814423a943ebd451004eae",
            "input": "find rows of employees table whose SALARY greater than 8000 or SALARY less than 12000",
            "output": [
                "SELECT * FROM employees WHERE SALARY > 12000 OR SALARY < 8000"
            ]
        },
        {
            "id": "task077-4529549feb324024b7acb4a83c6916f6",
            "input": "find the catalog_entry_name, price_in_euros of Catalog_Contents table for which price_in_pounds greater than 700",
            "output": [
                "SELECT catalog_entry_name , price_in_euros FROM Catalog_Contents WHERE price_in_pounds > 700"
            ]
        },
        {
            "id": "task077-3911e0bd0e924c6aacc43c90b4b61e4b",
            "input": "find the name of bridge table ordered descending by length_meters",
            "output": [
                "SELECT name FROM bridge ORDER BY length_meters Desc"
            ]
        },
        {
            "id": "task077-af544d35cf6b4b7cae5ed210fb6bc90a",
            "input": "find cName of College table whose enr greater than 15000 or state equals LA",
            "output": [
                "SELECT cName FROM College WHERE enr > 15000 OR state = \"LA\""
            ]
        },
        {
            "id": "task077-d3918412867a4374abd703de7513af2d",
            "input": "Step 1: For each row in Product table, find the corresponding rows in Problems table.\nStep 2: find rows in the results of step 1 whose problem_id greater than 1986-11-13.\nStep 3: find each value of Product's product_id the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.problem_id > \"1986-11-13\" GROUP BY T1.product_id"
            ]
        },
        {
            "id": "task077-b1173da5488f4f84a4bd7e451b566d2f",
            "input": "Step 1: find the CName of Course table for which Credits equals 1.\nStep 2: find the CName of Course table for which Days equals MTW.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT CName FROM Course WHERE Credits = 1 UNION SELECT CName FROM Course WHERE Days = \"MTW\""
            ]
        },
        {
            "id": "task077-e58d90dd5eb5416c8bc8c51066db7dd8",
            "input": "Step 1: For each row in Projects table, find the corresponding rows in Documents table.\nStep 2: find the number of rows of each value of Projects's Project_ID in the results of step 1.\nStep 3: find Documents's Project_ID, Project_Details in the results of step 1 whose corresponding value in step 2 is greater than or equals 2",
            "output": [
                "SELECT T2.Project_ID , T1.Project_Details FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-ca0594726461437ab99e0befd5bbcb22",
            "input": "Step 1: find the FIRST_NAME, LAST_NAME of employees table.\nStep 2: find the FIRST_NAME, LAST_NAME of employees table for which COMMISSION_PCT equals null.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = \"null\""
            ]
        },
        {
            "id": "task077-7b214912e25b4559b43eaec820341663",
            "input": "find the problem_id of Problems table",
            "output": [
                "SELECT problem_id FROM Problems"
            ]
        },
        {
            "id": "task077-9cf1e1cee86a4da7854bcbe38d3f38b6",
            "input": "find the order_id, customer_id, order_date of Customer_Orders table for which order_status_code equals Cancelled ordered ascending by order_date",
            "output": [
                "SELECT order_id , customer_id , order_date FROM Customer_Orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date Asc"
            ]
        },
        {
            "id": "task077-46620f29474d4501af8b35750eccb71d",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 2: find the characteristic_name, characteristic_name, other_characteristic_details of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , characteristic_name , other_characteristic_details FROM Characteristics"
            ]
        },
        {
            "id": "task077-0a9d297223634c97b8d73c3a31d5491d",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find each value of g_name in the results of step 1 along with the average song's rating of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( T2.rating ) , T2.languages FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T1.g_name"
            ]
        },
        {
            "id": "task077-cfd5875a045240db91594d4630367daa",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Sex equals M and Faculty's Building equals NEB.\nStep 3: find DName, Lname of the results of step 1 whose Department's Building equals M and Faculty's Building equals NEB.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = \"M\" AND T1.Building = \"NEB\" INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"M\" AND T1.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-a434235bed614ff4b286ecb073549782",
            "input": "find the Name of Patient table",
            "output": [
                "SELECT Name FROM Patient"
            ]
        },
        {
            "id": "task077-026f2cfdbb14410796a9666839166fb3",
            "input": "find JOB_TITLE, MIN_SALARY, MAX_SALARY of jobs table whose JOB_TITLE equals President and MAX_SALARY greater than 12000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE = \"President\" AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-a9d59c3b74ac47139eb2bea346d1a928",
            "input": "Step 1: find the address_line_2, email_address of Customers table for which email_address equals hsteuber@example.org.\nStep 2: find the address_line_1, email_address of Customers table for which email_address equals vbogisich@example.org.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT address_line_2 , email_address FROM Customers WHERE email_address = \"hsteuber@example.org\" INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = \"vbogisich@example.org\""
            ]
        },
        {
            "id": "task077-45badcbe5dde43579fbb6b6bad8ee0c3",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Sex equals M and Faculty's Building equals NEB",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = \"M\" AND T1.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-459f8e15068840d5b5ae68f9edd788e6",
            "input": "find the number of rows in wine table whose Winery equals Napa",
            "output": [
                "SELECT Count ( * ) FROM wine WHERE Winery = \"Napa\""
            ]
        },
        {
            "id": "task077-5188ac70157e451eaa25757f19552628",
            "input": "find rows of jobs table whose MIN_SALARY greater than 2500 and MIN_SALARY less than 20000",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY > 20000 AND MIN_SALARY < 2500"
            ]
        },
        {
            "id": "task077-ea19d5819cfa47d195076549592eafbe",
            "input": "find the rows of match_season table for which Draft_Class contains English",
            "output": [
                "SELECT * FROM match_season WHERE Draft_Class LIKE \"English\""
            ]
        },
        {
            "id": "task077-ad6ce1ddc02f4f7f8e5a0b0d53ab81bc",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY less than 8000 or MAX_SALARY greater than 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < 8000 OR T1.MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-bc9a4bd6d3b34858854643b36465e6a0",
            "input": "find roomName, decor of Rooms table whose basePrice greater than 160 and basePrice greater than 2",
            "output": [
                "SELECT roomName , decor FROM Rooms WHERE basePrice > 2 AND basePrice > 160"
            ]
        },
        {
            "id": "task077-4a937db820c3440c93a596320ea167e4",
            "input": "Step 1: find the Oppose_rate of candidate table ordered descending by Consider_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Oppose_rate FROM candidate ORDER BY Consider_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-4c06b5c445e744fc8981c608137b70cf",
            "input": "find the Unsure_rate, Consider_rate, Oppose_rate of candidate table ordered ascending by Consider_rate",
            "output": [
                "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Consider_rate Asc"
            ]
        },
        {
            "id": "task077-19366f05ea414116bf4e1287d29df2e2",
            "input": "Step 1: find the date, mean_temperature_f, max_gust_speed_mph of weather table ordered descending by max_gust_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_gust_speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-6d0db987ea854e05ba6d15f71817aefb",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_station_id of the results of step 1 whose duration greater than 60 and events equals A",
            "output": [
                "SELECT T1.start_station_id FROM trip AS T1 JOIN weather AS T2 WHERE T1.duration > 60 AND T2.events = \"A\""
            ]
        },
        {
            "id": "task077-917376ef3b7547cf819807b636ab79cc",
            "input": "find name, Client of Web_client_accelerator table whose Connection equals Broadband and Connection not equals Broadband, Satellite, Wireless, Fiber, DSL",
            "output": [
                "SELECT name , Client FROM Web_client_accelerator WHERE Connection = \"Broadband, Satellite, Wireless, Fiber, DSL\" AND Connection ! = \"Broadband\""
            ]
        },
        {
            "id": "task077-384239e3795246489d417f7dca28c870",
            "input": "find each value of genre_is in song table along with the average rating of the corresponding rows to each value",
            "output": [
                "SELECT Avg ( rating ) , languages FROM song GROUP BY genre_is"
            ]
        },
        {
            "id": "task077-68e0b55fce6f41739db24105b5990b98",
            "input": "find JOB_TITLE of jobs table whose MIN_SALARY greater than 12000 and MAX_SALARY greater than 40000",
            "output": [
                "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 12000 AND MAX_SALARY > 40000"
            ]
        },
        {
            "id": "task077-a0533ef91e3247f985417022f31905e7",
            "input": "find the rows of employees table for which SALARY less than or equals D ordered descending by SALARY",
            "output": [
                "SELECT * FROM employees WHERE SALARY < = \"D\" ORDER BY SALARY Desc"
            ]
        },
        {
            "id": "task077-d862b6c7494746dc8470954286de9a61",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average duration in the results of step 1 whose min_temperature_f greater than 50",
            "output": [
                "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > 50"
            ]
        },
        {
            "id": "task077-6e3b805a88b2491abfb7d0e08c73f6d6",
            "input": "Step 1: For each row in Services table, find corresponding rows in Ref_Service_Types table and in Drama_Workshop_Groups table.\nStep 2: find the number of different Currency_Code in the results of step 1 whose Service_Type_Description equals provide photo service",
            "output": [
                "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Service_Type_Description = \"provide photo service\""
            ]
        },
        {
            "id": "task077-70940da0029b49b0a92d663570010d03",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Department's Building equals M and Department's Building equals NEB",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"NEB\" AND T2.Building = \"M\""
            ]
        },
        {
            "id": "task077-8250e8d1b4ce4a3291d71803a0c2b3d0",
            "input": "find without repetition Fname, LName of Student table whose Advisor equals 18 and Advisor equals 1121",
            "output": [
                "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = 1121 AND Advisor = 18"
            ]
        },
        {
            "id": "task077-83ffe1fea3f245ab9816649eac8907a8",
            "input": "find the number of rows in Student table whose Sex equals HKG or city_code equals CHI",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Sex = \"HKG\" OR city_code = \"CHI\""
            ]
        },
        {
            "id": "task077-27eb459648e3402388868ff3ad98afe1",
            "input": "find the Date_of_ceremony of music_festival table",
            "output": [
                "SELECT Date_of_ceremony FROM music_festival"
            ]
        },
        {
            "id": "task077-3db1dbbff46e4a27820a9e7b3bfa0c55",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MIN_SALARY greater than or equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MIN_SALARY > = 12000"
            ]
        },
        {
            "id": "task077-331e9154973240b093068e2f5bd60be1",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the max_temperature_f of weather table for which max_temperature_f less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT max_temperature_f FROM weather WHERE max_temperature_f < 50"
            ]
        },
        {
            "id": "task077-c7fbe6aa3afd4c578438a6f15b02a911",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find the  rows in the results of step 1 whose SALARY less than or equals D ordered descending by MAX_SALARY",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = \"D\" ORDER BY T1.MAX_SALARY Desc"
            ]
        },
        {
            "id": "task077-50bb0b9422eb460f95e57e0878434716",
            "input": "find the catalog_entry_name, height of Catalog_Contents table for which price_in_dollars greater than 700",
            "output": [
                "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_dollars > 700"
            ]
        },
        {
            "id": "task077-c43b741727a54ae5a3c30ffc56d46cd1",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of AppointmentID in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-554441a7090549bbb66620aa3ceeee0a",
            "input": "find the f_id, song_name, artist_name of song table ordered ascending by rating",
            "output": [
                "SELECT f_id , song_name , artist_name FROM song ORDER BY rating Asc"
            ]
        },
        {
            "id": "task077-e88c7009486b4d78b024827ec5c9b210",
            "input": "find the Name of Physician table with largest value of Name",
            "output": [
                "SELECT Name FROM Physician ORDER BY Name Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3f925d5809ab4051a6ba454c28a2a995",
            "input": "Step 1: For each row in Document_Structures table, find the corresponding rows in Documents table.\nStep 2: for each value of Document_Structures's document_structure_code in the results of step 1, calculate number of rows.\nStep 3: show each value of Document_Structures's document_structure_code in the results of step 1 along with the average access_count with smallest value in the results of step 2",
            "output": [
                "SELECT T2.access_count , Avg ( T2.access_count ) FROM Document_Structures AS T1 JOIN Documents AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-4e510409125948df8310be71c333f8e7",
            "input": "Step 1: For each row in Product table, find the corresponding rows in Problems table.\nStep 2: find rows in the results of step 1 whose Problems's product_id greater than 1986-11-13.\nStep 3: find each value of Product's product_id the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > \"1986-11-13\" GROUP BY T1.product_id"
            ]
        },
        {
            "id": "task077-d4ed99448fe04be2948c11a21706cce7",
            "input": "Step 1: For each row in Services table, find corresponding rows in Ref_Service_Types table and in Drama_Workshop_Groups table.\nStep 2: find the number of different Currency_Code in the results of step 1 whose Parent_Service_Type_Code equals 1",
            "output": [
                "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = 1"
            ]
        },
        {
            "id": "task077-7452a6e87c58488f93dae76bc4a37cec",
            "input": "find zip_code of weather table whose precipitation_inches greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT zip_code FROM weather WHERE precipitation_inches > 80 OR min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-1126e694ab9249148e2f0c3735c445eb",
            "input": "Step 1: find the average MAX_SALARY in jobs table.\nStep 2: find the EMPLOYEE_ID of employees table whose SALARY greater than the results of step 1",
            "output": [
                "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MAX_SALARY ) FROM jobs AS T2 )"
            ]
        },
        {
            "id": "task077-bbbe4c65f884405fa1f8fc662abc4b79",
            "input": "find without repetition the rank of results table",
            "output": [
                "SELECT DISTINCT rank FROM results"
            ]
        },
        {
            "id": "task077-96081eba67954c6d9b7f761b9a0097d9",
            "input": "find song_name of song table whose languages equals modern or languages equals english",
            "output": [
                "SELECT song_name FROM song WHERE languages = \"english\" OR languages = \"modern\""
            ]
        },
        {
            "id": "task077-c34c127cddc241e1844a48c3bc80c045",
            "input": "find the date of weather table for which mean_dew_point_f greater than 85",
            "output": [
                "SELECT date FROM weather WHERE mean_dew_point_f > 85"
            ]
        },
        {
            "id": "task077-f89a817d128e4ffa8f5e888d3b7834e4",
            "input": "find the date of weather table for which max_dew_point_f greater than 85",
            "output": [
                "SELECT date FROM weather WHERE max_dew_point_f > 85"
            ]
        },
        {
            "id": "task077-ac3e0e84e40e4a90a8918593ab5a4337",
            "input": "Step 1: For each row in Fault_Log table, find corresponding rows in Assets table and in Engineer_Visits table.\nStep 2: find other_asset_details of the results of step 1 ordered ascending by visit_start_datetime",
            "output": [
                "SELECT T1.other_asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc"
            ]
        },
        {
            "id": "task077-6eeb107d2ee540f781097877f9669a88",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MAX_SALARY greater than 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-9ea4f4ee1a394478b5f366ab82370618",
            "input": "Step 1: find the Unsure_rate of candidate table ordered descending by Unsure_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Unsure_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-4fcc54b14efd426698265008846deebd",
            "input": "Step 1: find the number of rows of each value of user_id in Users table.\nStep 2: find user_name, user_id of Users table with largest value in the results of step 1",
            "output": [
                "SELECT user_name , user_id FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4c52c7b33ad843679c6022a580832b39",
            "input": "Step 1: For each row in School table, find corresponding rows in budget table and in endowment table.\nStep 2: find Budgeted, donator_name of the results of step 1 with largest value of amount",
            "output": [
                "SELECT T2.Budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e639fd6b42ca4c58aaf64edc08617675",
            "input": "find the Name, Headquarter, Founder of Manufacturers table ordered descending by Revenue",
            "output": [
                "SELECT Name , Headquarter , Founder FROM Manufacturers ORDER BY Revenue Desc"
            ]
        },
        {
            "id": "task077-2311bc7a1e1d46b5b6ac95fc2be218c5",
            "input": "Step 1: For each row in Player table, find the corresponding rows in Player_Attributes table.\nStep 2: find Player_Attributes's player_api_id of the results of step 1 whose height greater than 180.\nStep 3: find the Player_Attributes's player_api_id of Player_Attributes table for which overall_rating less than 85.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.height > 180 INTERSECT SELECT T1.player_api_id FROM Player_Attributes AS T1 WHERE T1.overall_rating < 85"
            ]
        },
        {
            "id": "task077-2b6d056d78ac410b9a7b8d142b85c617",
            "input": "Step 1: For each row in people table, find the corresponding rows in candidate table.\nStep 2: find Sex, Consider_rate, Oppose_rate of the results of step 1 ordered ascending by Unsure_rate",
            "output": [
                "SELECT T2.Sex , T1.Consider_rate , T1.Oppose_rate FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-55399f7c138d4ec18b260d37147497e5",
            "input": "Step 1: find the Oppose_rate of candidate table ordered descending by Support_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Oppose_rate FROM candidate ORDER BY Support_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-e0b18e5bab6b4383a8b181bc4c84fe66",
            "input": "Step 1: find the number of rows of each value of Position in Physician table.\nStep 2: find Name of Physician table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM Physician GROUP BY Position ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0ddf4119379048feae1480aa434c1ec1",
            "input": "Step 1: find the customer_name, customer_address of Customers table.\nStep 2: find the customer_name of Customers table.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT customer_name , customer_address FROM Customers INTERSECT SELECT customer_name FROM Customers"
            ]
        },
        {
            "id": "task077-299c3b3d2dc84f5bb599e35c404c6a63",
            "input": "find the number of rows in Student table whose Major equals 600 and Sex equals M",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Major = 600 AND Sex = \"M\""
            ]
        },
        {
            "id": "task077-3487b663b91346728cb6412aeba14361",
            "input": "find the other_asset_details of Assets table ordered ascending by other_asset_details",
            "output": [
                "SELECT other_asset_details FROM Assets ORDER BY other_asset_details Asc"
            ]
        },
        {
            "id": "task077-487cc3c9f9134e8da3fdd3735dfd730f",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find product_name, other_characteristic_details, characteristic_data_type of the results of step 1.\nStep 3: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1"
            ]
        },
        {
            "id": "task077-510cd9e7dc314e948464970d060f3531",
            "input": "find the Player of player table for which Player contains English",
            "output": [
                "SELECT Player FROM player WHERE Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-8f576a32eb7f4a38b6344192047bd7e7",
            "input": "Step 1: find the date of weather table ordered descending by max_sea_level_pressure_inches.\nStep 2: only show the first 5 rows of the results",
            "output": [
                "SELECT date FROM weather ORDER BY max_sea_level_pressure_inches Desc LIMIT 5"
            ]
        },
        {
            "id": "task077-00962c2ccd36408ca5b49049d47b1ab5",
            "input": "Step 1: find the Unsure_rate of candidate table ordered descending by Consider_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Unsure_rate FROM candidate ORDER BY Consider_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-e332c875d14e4d01971e083ec706a149",
            "input": "Step 1: For each row in Drama_Workshop_Groups table, find corresponding rows in Addresses table and in Services table.\nStep 2: find City_Town of the results of step 1 whose Product_Name equals FJA Filming",
            "output": [
                "SELECT T1.City_Town FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID JOIN Services AS T3 ON T2.Workshop_Group_ID = T3.Workshop_Group_ID WHERE T3.Product_Name = \"FJA Filming\""
            ]
        },
        {
            "id": "task077-517a07a64aa040ddb5e7485f2cc7f36d",
            "input": "find JOB_TITLE, MIN_SALARY of jobs table whose MAX_SALARY contains 12000 and MAX_SALARY less than or equals 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE 18000 AND MAX_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-36f726a32e1d4ee1895b195b348ea1d0",
            "input": "Step 1: find the Person's name, age of Person table for which job equals Dan.\nStep 2: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 3: find Person's name, age of the results of step 2 whose friend equals Alice.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = \"Dan\" INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = \"Alice\""
            ]
        },
        {
            "id": "task077-34ad1d9c7813467794b5cec27eb6c16c",
            "input": "find the Position of match_season table for which Player contains English",
            "output": [
                "SELECT Position FROM match_season WHERE Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-24bc8be6c3c240068399b0c471271c4c",
            "input": "find the Fname, Lname of Faculty table for which Fname equals Linda",
            "output": [
                "SELECT Fname , Lname FROM Faculty WHERE Fname = \"Linda\""
            ]
        },
        {
            "id": "task077-6cb48d990f9249dfac6a3bb1581b0a10",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find SALARY, MAX_SALARY of the results of step 1",
            "output": [
                "SELECT T2.SALARY , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID"
            ]
        },
        {
            "id": "task077-3c0f3136d3ee46cfa3283c1d7952ec4e",
            "input": "Step 1: For each row in Asset_Parts table, find corresponding rows in Parts table and in Assets table.\nStep 2: find other_asset_details of the results of step 1 ordered ascending by chargeable_amount",
            "output": [
                "SELECT T2.other_asset_details FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T1.chargeable_amount Asc"
            ]
        },
        {
            "id": "task077-886de373b7dd440d9cd8c0d7f36d5e2e",
            "input": "find the Name, Seating of track table for which Year_Opened greater than 2000 ordered ascending by Name",
            "output": [
                "SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Name Asc"
            ]
        },
        {
            "id": "task077-35cc49eae48c4fb9ad51c0032a10b653",
            "input": "Step 1: find the Name of actor table.\nStep 2: find the Name of actor table whose Actor_ID not one of the results of step 1",
            "output": [
                "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Name FROM actor )"
            ]
        },
        {
            "id": "task077-7a9fcd25f6a248d99e81c71b882da435",
            "input": "find the meter_600, meter_200 of swimmer table for which Nationality equals Australia",
            "output": [
                "SELECT meter_600 , meter_200 FROM swimmer WHERE Nationality = \"Australia\""
            ]
        },
        {
            "id": "task077-94b30164284e406abb9665305b776c87",
            "input": "Step 1: find the Name of actor table.\nStep 2: find the Name of actor table whose Name not one of the results of step 1",
            "output": [
                "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Name FROM actor )"
            ]
        },
        {
            "id": "task077-ebc6c700f3904543b265c03caaf59a14",
            "input": "Step 1: find the decor of Rooms table for which bedType equals King.\nStep 2: find the decor of Rooms table for which bedType equals Recluse and defiance.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT decor FROM Rooms WHERE bedType = \"King\" INTERSECT SELECT decor FROM Rooms WHERE bedType = \"Recluse and defiance\""
            ]
        },
        {
            "id": "task077-88fac8fc36284223bda5652c89482284",
            "input": "find the document_type_code of Documents table",
            "output": [
                "SELECT document_type_code FROM Documents"
            ]
        },
        {
            "id": "task077-872a3bfd86564a6683d24acc398d5a90",
            "input": "Step 1: find the rows of medicine table.\nStep 2: find the number of rows in enzyme table whose enzyme's id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM enzyme AS T1 WHERE T1.id NOT IN ( SELECT * FROM medicine AS T2 )"
            ]
        },
        {
            "id": "task077-b510dbcbcd914b5fbcef04d9c7c820bd",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find artist's artist_name of the results of step 1 whose song's country equals UK.\nStep 3: find artist's artist_name of the results of step 1 whose song's country equals english.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = \"english\""
            ]
        },
        {
            "id": "task077-c7771defbc9e4d0e8dcaf81d13202b2e",
            "input": "find start_station_id of trip table whose duration greater than 60 and end_station_name equals San Francisco Caltrain 2 (330 Townsend)",
            "output": [
                "SELECT start_station_id FROM trip WHERE duration > 60 AND end_station_name = \"San Francisco Caltrain 2 (330 Townsend)\""
            ]
        },
        {
            "id": "task077-52f28b884c584db6ab1d32e80b9de0bf",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table for which characteristic_name equals slow.\nStep 2: For each row in Characteristics table, find the corresponding rows in Product_Characteristics table.\nStep 3: find the number of rows of each value of Product_Characteristics's characteristic_id in the results of step 2.\nStep 4: find characteristic_name, other_characteristic_details, characteristic_data_type in the results of step 3 whose corresponding value in step 3 is equals 1.\nStep 5: show the rows that are in the results of step 1 but not in the results of step 4",
            "output": [
                "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 WHERE T1.characteristic_name = \"slow\" EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = 1"
            ]
        },
        {
            "id": "task077-959a2e88ac564aada36ff5d3ae5d5e27",
            "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: find Winery of the results of step 1 whose Price greater than 50 and County equals Monterey",
            "output": [
                "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price > 50 AND T1.County = \"Monterey\""
            ]
        },
        {
            "id": "task077-53fb47629b7c4c16874f4e2af62cd93c",
            "input": "find the rows of jobs table for which MIN_SALARY greater than 12000",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY > 12000"
            ]
        },
        {
            "id": "task077-d370cddaf95440ab8eed216c5dea994e",
            "input": "find start_station_id of trip table whose duration greater than 60 and start_date equals 8/21/2015 17:03",
            "output": [
                "SELECT start_station_id FROM trip WHERE duration > 60 AND start_date = \"8/21/2015 17:03\""
            ]
        },
        {
            "id": "task077-dc071a03aeeb4f25ad9f358ca473e99c",
            "input": "Step 1: find the average salary in employee table.\nStep 2: For each row in employee table, find the corresponding rows in certificate table.\nStep 3: find certificate's eid in the results of step 2 whose salary greater than the results of step 1",
            "output": [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Avg ( T1.salary ) FROM employee AS T1 )"
            ]
        },
        {
            "id": "task077-0db5887a60c14dfe9d8be76d05d07288",
            "input": "find the city of station table ordered descending by long",
            "output": [
                "SELECT city FROM station ORDER BY long Desc"
            ]
        },
        {
            "id": "task077-8957a13024ae4c77971a8ce2338ab2d4",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname, LName of the results of step 1 whose President_Vote equals 18 and President_Vote equals 1004",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 1004 AND T2.President_Vote = 18"
            ]
        },
        {
            "id": "task077-69e6895f2a3c490997d851acf633832a",
            "input": "Step 1: find the SupportRepId of Customer table for which Customer's LastName greater than 20.\nStep 2: find the Employee's LastName of Employee table whose EmployeeId not one of the results of step 1",
            "output": [
                "SELECT T1.LastName FROM Employee AS T1 WHERE T1.EmployeeId NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > 20 )"
            ]
        },
        {
            "id": "task077-de0582fc847744d4a0e108c823065aaa",
            "input": "find without repetition the Winery of wine table for which Score equals or between 50 and 100",
            "output": [
                "SELECT DISTINCT Winery FROM wine WHERE Score BETWEEN 100 AND 50"
            ]
        },
        {
            "id": "task077-db7444645d9340538577fd79cf013f62",
            "input": "find rows of jobs table whose JOB_TITLE equals President and MAX_SALARY greater than 12000",
            "output": [
                "SELECT * FROM jobs WHERE JOB_TITLE = \"President\" AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-9687b0c150a043db95f73f35b562a176",
            "input": "Step 1: find the number of rows of each value of city in station table.\nStep 2: find city of station table ordered descending by the results of step 1",
            "output": [
                "SELECT city FROM station GROUP BY city ORDER BY Count ( * ) Desc"
            ]
        },
        {
            "id": "task077-ed11411693604ca8954346005764e958",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME, MAX_SALARY of the results of step 1 whose SALARY less than 6000",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < 6000"
            ]
        },
        {
            "id": "task077-f17c1952e1b34ce998a5fe60751c9571",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics"
            ]
        },
        {
            "id": "task077-cac9d1dd856c4c05920b8114c3c99e4a",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_name, catalog_publisher of the results of step 1 whose price_in_dollars greater than 700",
            "output": [
                "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > 700"
            ]
        },
        {
            "id": "task077-f27f13a69cec47f19984e1d22fa48837",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics"
            ]
        },
        {
            "id": "task077-df455c6c4e574f9397dd4fd288c02ed2",
            "input": "find the average distance and the average price in flight table whose destination equals Los Angeles",
            "output": [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = \"Los Angeles\""
            ]
        },
        {
            "id": "task077-2a3f58c600704ace965f9f6428a4d3ec",
            "input": "find the Consider_rate, Consider_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Consider_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-3b435b5653924d39a584fc51a25bbba5",
            "input": "find the Draft_Class of match_season table for which Player contains English",
            "output": [
                "SELECT Draft_Class FROM match_season WHERE Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-72953c2df2c44277a80202d5c024a057",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics"
            ]
        },
        {
            "id": "task077-2d761da269fc41a7ab39e245784f8a1a",
            "input": "find the Candidate_ID, Consider_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-4f30ce9ea6c24cc292b5ee02b55312c2",
            "input": "Step 1: For each row in volume table, find the corresponding rows in music_festival table.\nStep 2: find Music_Festival, Issue_Date of the results of step 1",
            "output": [
                "SELECT T2.Music_Festival , T1.Issue_Date FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume"
            ]
        },
        {
            "id": "task077-b15c0ec2b52d44baa1a1a5f7e04e6c3a",
            "input": "Step 1: find the Consider_rate of candidate table ordered descending by Support_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-fc8902e8991049ca8321b632bee230c0",
            "input": "Step 1: For each row in list table, find the corresponding rows in teachers table.\nStep 2: find FirstName of the results of step 1 whose Classroom equals 110",
            "output": [
                "SELECT T2.FirstName FROM list AS T1 JOIN teachers AS T2 WHERE T1.Classroom = 110"
            ]
        },
        {
            "id": "task077-19ac7d81bd294d81b91aa74bee5857a7",
            "input": "find Music_Festival of music_festival table whose Category equals Best Song and Result equals Awarded",
            "output": [
                "SELECT Music_Festival FROM music_festival WHERE Category = \"Best Song\" AND Result = \"Awarded\""
            ]
        },
        {
            "id": "task077-b204a620623546c19c303b0b0c947cca",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_name, customer_email in Customers table whose corresponding value in step 1 is equals New.\nStep 3: find customer_name, customer_address in Customers table whose corresponding value in step 1 is less than Pending.\nStep 4: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) = \"New\" INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < \"Pending\""
            ]
        },
        {
            "id": "task077-4944b105f95643a0ba665752eee9faa8",
            "input": "Step 1: For each row in School table, find corresponding rows in budget table and in endowment table.\nStep 2: find total_budget_percent_invested, donator_name of the results of step 1 with largest value of amount",
            "output": [
                "SELECT T2.total_budget_percent_invested , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b4166e75deb6423c9e2c2b5236fd5156",
            "input": "find Fname of Student table whose Age greater than or equals 20 and Age less than or equals 25",
            "output": [
                "SELECT Fname FROM Student WHERE Age > = 25 AND Age < = 20"
            ]
        },
        {
            "id": "task077-46e9e4915c4a4ae7a8db586b3a4fa80e",
            "input": "Step 1: find the number of rows of each value of Entrepreneur_ID in entrepreneur table.\nStep 2: find Entrepreneur_ID of entrepreneur table with largest value in the results of step 1",
            "output": [
                "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2c7765e06b9442089f531a42ddc0d7f3",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find the  rows in the results of step 1 whose MIN_SALARY less than or equals D ordered descending by SALARY",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = \"D\" ORDER BY T2.SALARY Desc"
            ]
        },
        {
            "id": "task077-4247788003fa486e98c2c0fe468eae3e",
            "input": "find the average Famous_Release_date in artist table whose Famous_Release_date greater than or equals 25",
            "output": [
                "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Famous_Release_date > = 25"
            ]
        },
        {
            "id": "task077-4e324c32e3a3427c81e5c0100a22ff6f",
            "input": "Step 1: find the number of rows of each value of Entrepreneur_ID in entrepreneur table.\nStep 2: find Investor of entrepreneur table with largest value in the results of step 1",
            "output": [
                "SELECT Investor FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-243eb0549c73432292ee5d6ecb789b64",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY equals 8000 or MAX_SALARY greater than 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = 8000 OR T1.MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-3e01501f99e84bb2bc6565ee0ef7cdcb",
            "input": "find the rows of Assets table ordered ascending by asset_details",
            "output": [
                "SELECT * FROM Assets ORDER BY asset_details Asc"
            ]
        },
        {
            "id": "task077-2debb24af7cf4340a76844a91111f620",
            "input": "Step 1: For each row in Manufacturers table, find the corresponding rows in Products table.\nStep 2: find Manufacturers's Name of the results of step 1 whose Price greater than 200 or Price less than 240",
            "output": [
                "SELECT T1.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Price > 240 OR T2.Price < 200"
            ]
        },
        {
            "id": "task077-05642ed913b34640994ad1bf605480a3",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose g_name equals modern or languages equals english",
            "output": [
                "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = \"modern\" OR T2.languages = \"english\""
            ]
        },
        {
            "id": "task077-6d1b483fb03744f693f65f7dd9869560",
            "input": "Step 1: find the cust_name of customer table.\nStep 2: find the cust_name of customer table for which acc_type equals Mortgages.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = \"Mortgages\""
            ]
        },
        {
            "id": "task077-552585be03444151a5ed754bbf3bfc8c",
            "input": "Step 1: find the Name of Manufacturers table.\nStep 2: find the Name of Products table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Manufacturers AS T1 EXCEPT SELECT T2.Name FROM Products AS T2"
            ]
        },
        {
            "id": "task077-8255573248af4e919015cd031c6756ce",
            "input": "Step 1: find the number of rows of each value of id in airport table.\nStep 2: find id, name, IATA of airport table with largest value in the results of step 1",
            "output": [
                "SELECT id , name , IATA FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-38e2bdc4a4294e44b76e62d55769a0d5",
            "input": "find the rows of team table for which Name contains English",
            "output": [
                "SELECT * FROM team WHERE Name LIKE \"English\""
            ]
        },
        {
            "id": "task077-a9804c0a2a044761ac07475f9e3943b7",
            "input": "Step 1: find the number of rows of each value of id in airport table.\nStep 2: find id, name, name of airport table with largest value in the results of step 1",
            "output": [
                "SELECT id , name , name FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6e4a54c920b04b3dbda6054983f4018e",
            "input": "Step 1: For each row in volume table, find corresponding rows in artist table and in music_festival table.\nStep 2: find Famous_Release_date, Date_of_ceremony of the results of step 1",
            "output": [
                "SELECT T1.Famous_Release_date , T3.Date_of_ceremony FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume"
            ]
        },
        {
            "id": "task077-720a36d57ff641669c34341a1b8fbcf5",
            "input": "find the average length_meters in bridge table whose name equals Xian Ren Qiao (Fairy Bridge)",
            "output": [
                "SELECT Avg ( length_meters ) FROM bridge WHERE name = \"Xian Ren Qiao (Fairy Bridge)\""
            ]
        },
        {
            "id": "task077-0d5d4ec1690d4e25b89d74f9dcf38f91",
            "input": "find the Author, Author of submission table ordered ascending by Scores",
            "output": [
                "SELECT Author , Author FROM submission ORDER BY Scores Asc"
            ]
        },
        {
            "id": "task077-01e1ac38bfb449f6907acdd1b7f22206",
            "input": "Step 1: find the Support_rate of candidate table ordered descending by Unsure_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Support_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-323f513cb73b4e97bacf1cbffc0e2cc3",
            "input": "find the maximum Oppose_rate in candidate table",
            "output": [
                "SELECT Max ( Oppose_rate ) FROM candidate"
            ]
        },
        {
            "id": "task077-6e00b2cc3b0748e3810c7e44021bc350",
            "input": "find the FIRST_NAME, LAST_NAME, MANAGER_ID, SALARY of employees table",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , SALARY FROM employees"
            ]
        },
        {
            "id": "task077-f313a7d2760541efad582bbe442e8c85",
            "input": "find the start_station_id of trip table for which duration greater than 60",
            "output": [
                "SELECT start_station_id FROM trip WHERE duration > 60"
            ]
        },
        {
            "id": "task077-c58ccda94d9f4d978d73b73a6decb9d5",
            "input": "Step 1: For each row in volume table, find the corresponding rows in music_festival table.\nStep 2: find Date_of_ceremony, Song of the results of step 1",
            "output": [
                "SELECT T2.Date_of_ceremony , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume"
            ]
        },
        {
            "id": "task077-466e3eff58b64146ae0e21e70403dc4f",
            "input": "find zip_code of weather table whose min_humidity greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT zip_code FROM weather WHERE min_humidity > 80 OR min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-08131ac038744f12b8a447bcbebfc43b",
            "input": "find the Votes of election table ordered descending by Vote_Percent",
            "output": [
                "SELECT Votes FROM election ORDER BY Vote_Percent Desc"
            ]
        },
        {
            "id": "task077-e9c7a42d25c24f60b965fc49b39d4044",
            "input": "Step 1: find the number of rows of each value of Position in Nurse table.\nStep 2: find Name of Nurse table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM Nurse GROUP BY Position ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c054fd97f04942ba9c52fbd3af1d5d5f",
            "input": "Step 1: find the summation of credit_score of each value of cust_name in customer table.\nStep 2: find cust_name of customer table with largest value in the results of step 1",
            "output": [
                "SELECT cust_name FROM customer GROUP BY cust_name ORDER BY Sum ( credit_score ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-554c1f8459aa4cedbf5c954cc7ed4328",
            "input": "find the average length_meters in bridge table whose location equals Guangxi , China",
            "output": [
                "SELECT Avg ( length_meters ) FROM bridge WHERE location = \"Guangxi , China\""
            ]
        },
        {
            "id": "task077-74cac6c742ee481cb0d9f4dc707b5ebc",
            "input": "find the Consider_rate, Unsure_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Consider_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-53c1df70182345e0925724d0bd86980e",
            "input": "find the average price_in_euros and the minimum price_in_pounds in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-ece7b6f56ce04af49896c2c89b464b04",
            "input": "Step 1: find the number of rows of each value of Comptroller in party table.\nStep 2: find Lieutenant_Governor of party table with largest value in the results of step 1",
            "output": [
                "SELECT Lieutenant_Governor FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d659f985d371463b81560acc23a8b07d",
            "input": "find the Team_Name of basketball_match table ordered descending by All_Games_Percent",
            "output": [
                "SELECT Team_Name FROM basketball_match ORDER BY All_Games_Percent Desc"
            ]
        },
        {
            "id": "task077-969353ca46fa45da887872e9da861b5b",
            "input": "find the date of weather table for which min_humidity greater than 85",
            "output": [
                "SELECT date FROM weather WHERE min_humidity > 85"
            ]
        },
        {
            "id": "task077-5c02daacf35048889d5394e440925f32",
            "input": "find Fname, LName of Student table whose Sex equals F and Age equals 18",
            "output": [
                "SELECT Fname , LName FROM Student WHERE Sex = \"F\" AND Age = 18"
            ]
        },
        {
            "id": "task077-5ded33a46b7444a3a612385299e4ba1a",
            "input": "Step 1: find the number of rows of each value of School_ID in school table.\nStep 2: find Boys_or_Girls in school table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT Boys_or_Girls FROM school GROUP BY School_ID HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-05630af90fc64b6da81f9064ae29294e",
            "input": "find the FIRST_NAME, LAST_NAME, SALARY, MANAGER_ID of employees table",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME , SALARY , MANAGER_ID FROM employees"
            ]
        },
        {
            "id": "task077-015d99aa36fa42018a3a658b0a5bea1b",
            "input": "find the number of rows in airlines table whose active equals John F Kennedy International Airport",
            "output": [
                "SELECT Count ( * ) FROM airlines WHERE active = \"John F Kennedy International Airport\""
            ]
        },
        {
            "id": "task077-f263c2724d334efdb5bef28c2f2e8c2d",
            "input": "find the number of rows in Courses table whose course_name equals Fail",
            "output": [
                "SELECT Count ( * ) FROM Courses WHERE course_name = \"Fail\""
            ]
        },
        {
            "id": "task077-745247a84c1241b0821d3f9d864a3a79",
            "input": "Step 1: find the rows of employees table for which SALARY greater than 24000.\nStep 2: find the JOB_TITLE of jobs table for which MAX_SALARY greater than 12000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT * FROM employees AS T1 WHERE T1.SALARY > 24000 INTERSECT SELECT T2.JOB_TITLE FROM jobs AS T2 WHERE T2.MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-4d844236ac67467a942e6ae42425e3c1",
            "input": "find the number of rows in camera_lens table whose max_aperture greater than 15",
            "output": [
                "SELECT Count ( * ) FROM camera_lens WHERE max_aperture > 15"
            ]
        },
        {
            "id": "task077-4baa42db0d7a4294aa10d69f167401a9",
            "input": "find without repetition the supplier_name of Suppliers table",
            "output": [
                "SELECT DISTINCT supplier_name FROM Suppliers"
            ]
        },
        {
            "id": "task077-132684f8948047c2b7d5ba7aaa3942ab",
            "input": "Step 1: find the date, mean_temperature_f, mean_wind_speed_mph of weather table ordered descending by max_gust_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , mean_wind_speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-139bcec56c934f7fb0ffdb609adccd28",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname, LName of the results of step 1 whose Treasurer_Vote equals 18",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Treasurer_Vote = 18"
            ]
        },
        {
            "id": "task077-9c6c7fdbc5e14b138f99564ad9e28e3c",
            "input": "Step 1: find the DName of Department table.\nStep 2: find the DName of Department table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT DName FROM Department EXCEPT SELECT DName FROM Department"
            ]
        },
        {
            "id": "task077-1b41793045cf41dd8237038e56381fed",
            "input": "Step 1: For each row in Customer_Orders table, find the corresponding rows in Order_Items table.\nStep 2: find product_id, customer_id of the results of step 1 whose order_status_code equals Cancelled or order_item_status_code equals Paid",
            "output": [
                "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = \"Cancelled\" OR T2.order_item_status_code = \"Paid\""
            ]
        },
        {
            "id": "task077-b61d95f98ae347d793a53a03d8497372",
            "input": "Step 1: For each row in Things table, find the corresponding rows in Timed_Status_of_Things table.\nStep 2: find without repetition Things's thing_id, service_type_code of the results of step 1 whose Status_of_Thing_Code equals Close or Date_and_Date less than 2017-06-19 02:59:21",
            "output": [
                "SELECT DISTINCT T1.thing_id , T1.service_type_code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = \"Close\" OR T2.Date_and_Date < \"2017-06-19 02:59:21\""
            ]
        },
        {
            "id": "task077-13742721f8d64a788406fff1320757a3",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_latest_logon, date_of_completion of the results of step 1 whose family_name equals Zieme and personal_name equals Bernie",
            "output": [
                "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = \"Zieme\" AND T1.personal_name = \"Bernie\""
            ]
        },
        {
            "id": "task077-37259442927d46efbdd7e0b9c30b50a5",
            "input": "Step 1: find the Unsure_rate of candidate table ordered descending by Support_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Unsure_rate FROM candidate ORDER BY Support_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-11dafb883f424344bf2b790e3e3919da",
            "input": "Step 1: find the minimum year in PersonFriend table.\nStep 2: find the name of PersonFriend table whose year equals the results of step 1",
            "output": [
                "SELECT name FROM PersonFriend WHERE year = ( SELECT Min ( year ) FROM PersonFriend )"
            ]
        },
        {
            "id": "task077-8987bcf153ef4b0cb983cec7e11b3fc0",
            "input": "Step 1: find the number of rows of each value of Department_ID in department table.\nStep 2: find Name of department table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ba7dd80f187d4f879f5c5b792753e0a7",
            "input": "find the Attorney_General, Party of party table",
            "output": [
                "SELECT Attorney_General , Party FROM party"
            ]
        },
        {
            "id": "task077-7c12fc54a62942b88b08ee184cd1fe65",
            "input": "Step 1: For each row in browser table, find the corresponding rows in accelerator_compatible_browser table.\nStep 2: find name of the results of step 1 whose compatible_since_year greater than 1998",
            "output": [
                "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id WHERE T2.compatible_since_year > 1998"
            ]
        },
        {
            "id": "task077-3d545a0194af4b169b481f1e546e6e65",
            "input": "find the number of different payment_method_code in Ref_Payment_Methods table",
            "output": [
                "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods"
            ]
        },
        {
            "id": "task077-3bd82e1d2b0b4a3fa7cfefa25786d937",
            "input": "find the rows of jobs table for which MAX_SALARY less than 2500",
            "output": [
                "SELECT * FROM jobs WHERE MAX_SALARY < 2500"
            ]
        },
        {
            "id": "task077-552af322fc01476598d5550d9ec660e3",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 2500 and MIN_SALARY less than 20000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 2500 AND T1.MIN_SALARY < 20000"
            ]
        },
        {
            "id": "task077-50df900f2d9b40b9b7318d71fe851782",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than or equals 8000 and MIN_SALARY less than or equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = 8000 AND T1.MIN_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-5289927e0a55428ab356e0c23010ccea",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the min_sea_level_pressure_inches of weather table for which max_sea_level_pressure_inches less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT min_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < 50"
            ]
        },
        {
            "id": "task077-366d9adf461e4768b59e0967a85772d5",
            "input": "find without repetition the Fname, LName of Student table for which Age equals 18",
            "output": [
                "SELECT DISTINCT Fname , LName FROM Student WHERE Age = 18"
            ]
        },
        {
            "id": "task077-bbb898d66dc346049ca62b78c2a7483b",
            "input": "find the name, nationality, id of architect table ordered ascending by gender",
            "output": [
                "SELECT name , nationality , id FROM architect ORDER BY gender Asc"
            ]
        },
        {
            "id": "task077-7fbc2c9f9d054934ad077d702850ab0b",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 2500 and MAX_SALARY less than 40000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 2500 AND T1.MAX_SALARY < 40000"
            ]
        },
        {
            "id": "task077-2413767d42e24cd8bb41fc64caf87de1",
            "input": "find the Major of Student table for which Sex equals M",
            "output": [
                "SELECT Major FROM Student WHERE Sex = \"M\""
            ]
        },
        {
            "id": "task077-bb4ae48458cd4d448aa9c1ddfe6dd459",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY contains 8000 and MAX_SALARY less than or equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE 8000 AND T1.MAX_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-6d822aaa8dc448c9b7dbbc88f17b1bad",
            "input": "find the distance, distance of flight table with largest value of price",
            "output": [
                "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-606377f8269d4f7eac878bebbcb356d7",
            "input": "find the address of address table",
            "output": [
                "SELECT address FROM address"
            ]
        },
        {
            "id": "task077-db9e6ca8e361461e883c94caae6865d4",
            "input": "find the number of rows in trip table whose duration greater than 50",
            "output": [
                "SELECT Count ( * ) FROM trip WHERE duration > 50"
            ]
        },
        {
            "id": "task077-06b6a4fa98464655ade26befd74652a7",
            "input": "Step 1: For each row in Residents table, find the corresponding rows in Customer_Events table.\nStep 2: find Customer_Event_ID, Customer_Events's date_moved_in, Residents's date_moved_in of the results of step 1",
            "output": [
                "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.date_moved_in FROM Residents AS T1 JOIN Customer_Events AS T2 ON T1.date_moved_in = T2.date_moved_in"
            ]
        },
        {
            "id": "task077-48af5e9671384a7398e2945a5d9ccfd7",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find artist_name of the results of step 1 whose genre_is equals modern or g_name equals english",
            "output": [
                "SELECT T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = \"modern\" OR T1.g_name = \"english\""
            ]
        },
        {
            "id": "task077-227523e834d945ba94f94389e6a9403d",
            "input": "find the HIRE_DATE of employees table for which FIRST_NAME contains M",
            "output": [
                "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME LIKE \"M\""
            ]
        },
        {
            "id": "task077-d9750e34a451442d96617dbdeaa4b382",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find the number of rows of each value of Physician's Name in the results of step 1.\nStep 3: find Nurse's Name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a95c8a37d7a74703ad729795d5a4c01c",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find each value of DEPARTMENT_ID in the results of step 1 along with the average MIN_SALARY of the corresponding rows to each value",
            "output": [
                "SELECT T1.JOB_TITLE , Avg ( T1.MIN_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID"
            ]
        },
        {
            "id": "task077-866bda5f782d43369472a2715a10ad2a",
            "input": "find the EMAIL of employees table",
            "output": [
                "SELECT EMAIL FROM employees"
            ]
        },
        {
            "id": "task077-73cf7e917f4d45f883d12e9c5c140353",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find login_name, personal_name, course_description of the results of step 1",
            "output": [
                "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id"
            ]
        },
        {
            "id": "task077-9456404423fa40fd922ab8e1ea63eac6",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname, LName of the results of step 1 whose Advisor equals 18 and President_Vote equals 1004",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = 18 AND T2.President_Vote = 1004"
            ]
        },
        {
            "id": "task077-c7e4482cbdcc4ae48415792dbc31a5ff",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport's id in the results of step 1.\nStep 3: find airport's id, name, Vehicle_Flight_number of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-367cc25b71ff40d79478574f55cbd0dc",
            "input": "Step 1: For each row in Product table, find the corresponding rows in Problems table.\nStep 2: find the number of rows of each value of Problems's product_id in the results of step 1.\nStep 3: find product_details, product_name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.product_details , T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-f05de7e0b1ab487197a5335553241ffc",
            "input": "Step 1: For each row in Courses table, find the corresponding rows in Student_Course_Registrations table.\nStep 2: find student_id of the results of step 1 whose course_name equals statistics or course_name equals statistics",
            "output": [
                "SELECT T2.student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" OR T1.course_name = \"statistics\""
            ]
        },
        {
            "id": "task077-638774a428684bb7a815753de9876afe",
            "input": "Step 1: For each row in user_profiles table, find the corresponding rows in tweets table.\nStep 2: find the number of rows of each value of tweets's uid in the results of step 1.\nStep 3: find name, partitionid in the results of step 1 whose corresponding value in step 2 is greater than 2",
            "output": [
                "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > 2"
            ]
        },
        {
            "id": "task077-9364f2aba83641ccb86d2af933b3227d",
            "input": "find rows of jobs table whose MIN_SALARY greater than 12000 and MAX_SALARY greater than 40000",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY > 12000 AND MAX_SALARY > 40000"
            ]
        },
        {
            "id": "task077-255a009e0d8c44488b0b3a8cd513846c",
            "input": "Step 1: find the number of rows of each value of FirstName in list table.\nStep 2: find FirstName, LastName of list table with largest value in the results of step 1",
            "output": [
                "SELECT FirstName , LastName FROM list GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a2dc20174f6d4e359e1fb62a16356720",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MAX_SALARY contains 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MAX_SALARY LIKE 12000"
            ]
        },
        {
            "id": "task077-50a3b4b4d875437e927ec2da92bad548",
            "input": "Step 1: For each row in city table, find the corresponding rows in address table.\nStep 2: find the number of rows of each value of address's city_id in the results of step 1.\nStep 3: find address_id, city, address's city_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.address_id , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-700f3aaa31aa4a6ca49a8b6d4976144f",
            "input": "find the date of weather table for which min_dew_point_f greater than 85",
            "output": [
                "SELECT date FROM weather WHERE min_dew_point_f > 85"
            ]
        },
        {
            "id": "task077-77c3de5ace2746d2a698fd2330ce87b9",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the min_temperature_f of weather table for which max_sea_level_pressure_inches less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT min_temperature_f FROM weather WHERE max_sea_level_pressure_inches < 50"
            ]
        },
        {
            "id": "task077-4e57b7b940a54a90900b5ce14284b4eb",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_enrolment, date_of_latest_logon of the results of step 1 whose family_name equals Zieme and personal_name equals Bernie",
            "output": [
                "SELECT T2.date_of_enrolment , T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = \"Zieme\" AND T1.personal_name = \"Bernie\""
            ]
        },
        {
            "id": "task077-5bfd0fc2e86d48999293abe4a40606e2",
            "input": "find the minimum Age, the maximum Age and the minimum Age in Student table",
            "output": [
                "SELECT Min ( Age ) , Max ( Age ) , Min ( Age ) FROM Student"
            ]
        },
        {
            "id": "task077-853bc3e51ebd4e01a66f35f248ab18b1",
            "input": "find the Name of musical table",
            "output": [
                "SELECT Name FROM musical"
            ]
        },
        {
            "id": "task077-e27b4ac41bba46cf9a90338bcb4d64c8",
            "input": "find rows of Procedures table whose Cost greater than 5000 and Cost greater than 1500",
            "output": [
                "SELECT * FROM Procedures WHERE Cost > 1500 AND Cost > 5000"
            ]
        },
        {
            "id": "task077-8d5e3ebd36af429b97eeca14e4c49102",
            "input": "find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics"
            ]
        },
        {
            "id": "task077-284311628fc14e2a87e8e84b21a9d522",
            "input": "Step 1: For each row in Employee table, find the corresponding rows in Customer table.\nStep 2: find the number of CustomerId of each value of SupportRepId in the results of step 1.\nStep 3: find Employee's LastName in the results of step 1 whose corresponding value in step 2 is greater than 20",
            "output": [
                "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( T1.CustomerId ) > 20"
            ]
        },
        {
            "id": "task077-592406c429f34a8c9bcc07c82db8b58b",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME, SALARY of the results of step 1 whose MIN_SALARY less than 6000",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < 6000"
            ]
        },
        {
            "id": "task077-ecd018023d214fe98469349cf4e370c2",
            "input": "find JOB_TITLE of jobs table whose MIN_SALARY greater than 12000 or MAX_SALARY greater than 40000",
            "output": [
                "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 12000 OR MAX_SALARY > 40000"
            ]
        },
        {
            "id": "task077-7153234366a94688bd68f33d3d557e85",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find PHONE_NUMBER of the results of step 1 whose SALARY greater than 8000 and MAX_SALARY less than 12000",
            "output": [
                "SELECT T2.PHONE_NUMBER FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 AND T1.MAX_SALARY < 12000"
            ]
        },
        {
            "id": "task077-a37858bb4ae14f33a55b3a3483e49911",
            "input": "Step 1: find the maximum Oppose_rate in candidate table.\nStep 2: find the Poll_Source of candidate table whose Oppose_rate equals the results of step 1",
            "output": [
                "SELECT Poll_Source FROM candidate WHERE Oppose_rate = ( SELECT Max ( Oppose_rate ) FROM candidate )"
            ]
        },
        {
            "id": "task077-829f2b5144dd4f1a81898b09a6f8eafc",
            "input": "find the start_date of trip table with largest value of bike_id",
            "output": [
                "SELECT start_date FROM trip ORDER BY bike_id Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ac4b6831d3a2483590c9ff31c041ea09",
            "input": "find the Name of company table for which Sales_in_Billion greater than 200 ordered descending by Sales_in_Billion",
            "output": [
                "SELECT Name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion Desc"
            ]
        },
        {
            "id": "task077-68a17bf8e7864c3bb5e8f2aaecf5ec1e",
            "input": "Step 1: find the average min_humidity of each value of zip_code in weather table.\nStep 2: find zip_code in weather table whose corresponding value in step 1 is less than 10",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) < 10"
            ]
        },
        {
            "id": "task077-2c9bf2dc34cb467cbe6f92291ee21b46",
            "input": "Step 1: For each row in employee table, find the corresponding rows in certificate table.\nStep 2: find certificate's eid of the results of step 1 whose salary greater than 100000",
            "output": [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > 100000"
            ]
        },
        {
            "id": "task077-fc0b9113f6d247b48a9aa5076f827b27",
            "input": "find the maximum low_temperature and the maximum wind_speed_mph in weekly_weather table",
            "output": [
                "SELECT Max ( low_temperature ) , Max ( wind_speed_mph ) FROM weekly_weather"
            ]
        },
        {
            "id": "task077-8e35cbd8a90948b5a9cffdef6c431108",
            "input": "Step 1: For each row in employees table, find the corresponding rows in job_history table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or job_history's DEPARTMENT_ID equals 12000",
            "output": [
                "SELECT * FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T1.SALARY > 8000 OR T2.DEPARTMENT_ID = 12000"
            ]
        },
        {
            "id": "task077-0e5b68afe11a4bdfaf25d890cf2310bc",
            "input": "Step 1: find the number of rows of each value of Market_Details in Street_Markets table.\nStep 2: find Market_Details in Street_Markets table whose corresponding value in step 1 is greater than or equals walk",
            "output": [
                "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = \"walk\""
            ]
        },
        {
            "id": "task077-4e26dbe036da47d491763dd5bef9be73",
            "input": "Step 1: find the Nickname of school_details table.\nStep 2: find the Nickname of school_details table for which Division equals Division 1.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Nickname FROM school_details EXCEPT SELECT Nickname FROM school_details WHERE Division = \"Division 1\""
            ]
        },
        {
            "id": "task077-ddbabaf6984d4f9e92cb38eb0f6d168f",
            "input": "Step 1: For each row in employees table, find the corresponding rows in job_history table.\nStep 2: find the number of different job_history's EMPLOYEE_ID of each value of employees's DEPARTMENT_ID in the results of step 1.\nStep 3: find without repetition job_history's DEPARTMENT_ID in the results of step 1 whose corresponding value in step 2 is greater than or equals 4",
            "output": [
                "SELECT DISTINCT T2.DEPARTMENT_ID FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID GROUP BY T1.DEPARTMENT_ID HAVING Count ( DISTINCT T2.EMPLOYEE_ID ) > = 4"
            ]
        },
        {
            "id": "task077-8a8669872fac4cfe9d709fa10c8ea94e",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport_id in the results of step 1.\nStep 3: find airport's id, name, Vehicle_Flight_number of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3b9505bee91047f29447dc8de826938e",
            "input": "Step 1: find the number of rows of each value of Award in musical table.\nStep 2: find Award of musical table with largest value in the results of step 1",
            "output": [
                "SELECT Award FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b7b98d4a62a7488c97d839caa1f4936b",
            "input": "find without repetition the cust_name of customer table ordered ascending by credit_score",
            "output": [
                "SELECT DISTINCT cust_name FROM customer ORDER BY credit_score Asc"
            ]
        },
        {
            "id": "task077-2a6cabb73d0f49fa9e421bd2d05729f0",
            "input": "find the Music_Festival of music_festival table",
            "output": [
                "SELECT Music_Festival FROM music_festival"
            ]
        },
        {
            "id": "task077-5f499a768e494897a77b1c9a10068595",
            "input": "find the average price_in_dollars and the maximum price_in_euros in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_dollars ) , Max ( price_in_euros ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-f3121976e8df4670b9592fb8665bdce1",
            "input": "Step 1: find the date of weather table ordered descending by min_sea_level_pressure_inches.\nStep 2: only show the first 5 rows of the results",
            "output": [
                "SELECT date FROM weather ORDER BY min_sea_level_pressure_inches Desc LIMIT 5"
            ]
        },
        {
            "id": "task077-33304aa7b62f4423a419f9572517bf3e",
            "input": "Step 1: For each row in Things table, find the corresponding rows in Timed_Status_of_Things table.\nStep 2: find without repetition organization_id, Type_of_Thing_Code of the results of step 1 whose Status_of_Thing_Code equals Close or Date_and_Date less than 2017-06-19 02:59:21",
            "output": [
                "SELECT DISTINCT T1.organization_id , T1.Type_of_Thing_Code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = \"Close\" OR T2.Date_and_Date < \"2017-06-19 02:59:21\""
            ]
        },
        {
            "id": "task077-3db0248e4aef44fe8f24d530957d48dd",
            "input": "Step 1: find the number of rows of each value of Denomination in school table.\nStep 2: find Denomination of school table with largest value in the results of step 1",
            "output": [
                "SELECT Denomination FROM school GROUP BY Denomination ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-438ebb48458b43b0aef60e51d0d12446",
            "input": "Step 1: For each row in Residents table, find corresponding rows in Residents_Services table and in Customer_Events table.\nStep 2: find Customer_Event_ID, Customer_Events's date_moved_in, Residents_Services's date_moved_in of the results of step 1",
            "output": [
                "SELECT T3.Customer_Event_ID , T3.date_moved_in , T2.date_moved_in FROM Residents AS T1 JOIN Residents_Services AS T2 ON T2.date_moved_in = T1.date_moved_in JOIN Customer_Events AS T3 ON T1.date_moved_in = T3.date_moved_in"
            ]
        },
        {
            "id": "task077-616dd30ef11e4febac8cf5b956a0d288",
            "input": "find the number of rows in Products table whose product_name equals hot",
            "output": [
                "SELECT Count ( * ) FROM Products WHERE product_name = \"hot\""
            ]
        },
        {
            "id": "task077-d7a325b271b64e7e8733f6db412aefa7",
            "input": "find the catalog_entry_name, price_in_dollars of Catalog_Contents table for which price_in_pounds greater than 700",
            "output": [
                "SELECT catalog_entry_name , price_in_dollars FROM Catalog_Contents WHERE price_in_pounds > 700"
            ]
        },
        {
            "id": "task077-00f454540b4a4147988204e255552d24",
            "input": "Step 1: find the Customer_ID of Customers table.\nStep 2: find the Customer_Details of Customers table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Customer_ID FROM Customers EXCEPT SELECT Customer_Details FROM Customers"
            ]
        },
        {
            "id": "task077-5f8a5adaff154344ad238f4bea56a548",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average duration in the results of step 1 whose min_sea_level_pressure_inches greater than 50",
            "output": [
                "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > 50"
            ]
        },
        {
            "id": "task077-9aa75ae688f04e51a25b320a648c4648",
            "input": "find the average Total_Cattle in farm table whose Sheep_and_Goats greater than 5000",
            "output": [
                "SELECT Avg ( Total_Cattle ) FROM farm WHERE Sheep_and_Goats > 5000"
            ]
        },
        {
            "id": "task077-5fcc504cd34343639ed000f074b6cbec",
            "input": "Step 1: find the date, mean_temperature_f, max_gust_speed_mph of weather table ordered descending by max_wind_Speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_gust_speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-3937de7a9679460e9fa3602fe9ae61b2",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Complaints table.\nStep 2: find the number of rows of each value of Complaints's customer_id in the results of step 1.\nStep 3: find phone_number of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.phone_number FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1688a42a0d234ba3ba5cabe3bb000fd4",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MAX_SALARY less than or equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MAX_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-f0ed0ae94def41b28e03e8685c904729",
            "input": "find Market_Details of Street_Markets table whose Market_Details equals walk or Market_Details equals bus",
            "output": [
                "SELECT Market_Details FROM Street_Markets WHERE Market_Details = \"bus\" OR Market_Details = \"walk\""
            ]
        },
        {
            "id": "task077-24a99207afb94fcfb37fe5ba954259f9",
            "input": "find rows of employees table whose SALARY greater than 8000 or DEPARTMENT_ID equals 12000",
            "output": [
                "SELECT * FROM employees WHERE SALARY > 8000 OR DEPARTMENT_ID = 12000"
            ]
        },
        {
            "id": "task077-2fdbd072cfaf482bb840006df864f7ea",
            "input": "Step 1: For each row in volume table, find corresponding rows in artist table and in music_festival table.\nStep 2: find Famous_Release_date, Result of the results of step 1",
            "output": [
                "SELECT T1.Famous_Release_date , T3.Result FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume"
            ]
        },
        {
            "id": "task077-a369e44724924538a0ff80bead3488fc",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find trip's zip_code of the results of step 1 whose precipitation_inches greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.precipitation_inches > 80 OR T2.min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-4694e6e624e14c1b8c34bd7d2e341467",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_entry_name, catalog_publisher of the results of step 1 whose price_in_pounds greater than 700",
            "output": [
                "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > 700"
            ]
        },
        {
            "id": "task077-33c479e4bfb84ca98724d087c2eaf4f1",
            "input": "find the artist_name of files table",
            "output": [
                "SELECT artist_name FROM files"
            ]
        },
        {
            "id": "task077-0bffb3c3ac194812a8733ba4deb8263c",
            "input": "find the maximum low_temperature and the maximum high_temperature in weekly_weather table",
            "output": [
                "SELECT Max ( low_temperature ) , Max ( high_temperature ) FROM weekly_weather"
            ]
        },
        {
            "id": "task077-e447ba43370a470b9e6a760d978a6345",
            "input": "find the problem_log_id, problem_id of Problem_Log table with smallest value of problem_log_id",
            "output": [
                "SELECT problem_log_id , problem_id FROM Problem_Log ORDER BY problem_log_id Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-e88ef0e08a344c95927b87bb2ed10e45",
            "input": "find the catalog_name of Catalogs table for which date_of_latest_revision greater than 8",
            "output": [
                "SELECT catalog_name FROM Catalogs WHERE date_of_latest_revision > 8"
            ]
        },
        {
            "id": "task077-e1e7af6d2ee1414f86d8fc81fd9397f2",
            "input": "Step 1: find the date, mean_temperature_f, max_dew_point_f of weather table ordered descending by max_gust_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-eb7350685a084b52b9390de767a6d617",
            "input": "find the cName, enr of College table for which enr greater than 10000",
            "output": [
                "SELECT cName , enr FROM College WHERE enr > 10000"
            ]
        },
        {
            "id": "task077-e2d6b4ef382a4d62a20201712cca2a66",
            "input": "find Fname, Lname of Faculty table whose Rank equals M and Sex equals NEB",
            "output": [
                "SELECT Fname , Lname FROM Faculty WHERE Rank = \"M\" AND Sex = \"NEB\""
            ]
        },
        {
            "id": "task077-734b46f8ff7f4a5b99224d982eb149b5",
            "input": "Step 1: find the OMIM of enzyme table.\nStep 2: find the number of rows in enzyme table whose id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )"
            ]
        },
        {
            "id": "task077-a1e5b235cad74bd9845379795f133d25",
            "input": "Step 1: find the SupportRepId of Customer table for which Customer's LastName greater than 20.\nStep 2: find the Employee's LastName of Employee table whose ReportsTo not one of the results of step 1",
            "output": [
                "SELECT T1.LastName FROM Employee AS T1 WHERE T1.ReportsTo NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > 20 )"
            ]
        },
        {
            "id": "task077-28f8cddad41b404b8902656ec449b643",
            "input": "Step 1: find the Support_rate of candidate table ordered descending by Consider_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Support_rate FROM candidate ORDER BY Consider_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-6e821c50b2fa44ad87a84274eaebf158",
            "input": "Step 1: find the Oppose_rate of candidate table ordered descending by Oppose_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Oppose_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-e1b6ff0848774b87a2fe103e514da91a",
            "input": "find the average length_meters in bridge table",
            "output": [
                "SELECT Avg ( length_meters ) FROM bridge"
            ]
        },
        {
            "id": "task077-c454c06badd744d1b370fd97a80bd523",
            "input": "Step 1: find the number of rows of each value of driverId in pitStops table.\nStep 2: find driverId, driverId in pitStops table whose corresponding value in step 1 is greater than 5",
            "output": [
                "SELECT driverId , driverId FROM pitStops GROUP BY driverId HAVING Count ( * ) > 5"
            ]
        },
        {
            "id": "task077-52a0b53438854290892ad333a8d20712",
            "input": "Step 1: find the date, mean_temperature_f, mean_wind_speed_mph of weather table ordered descending by max_wind_Speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , mean_wind_speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-2df0601ffcd143aa88c5e8ffe3ce1c70",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average duration in the results of step 1 whose max_humidity greater than 50",
            "output": [
                "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_humidity > 50"
            ]
        },
        {
            "id": "task077-5bca66df1c94410090f14b38839141f1",
            "input": "find the average Age in artist table whose Age greater than or equals 25",
            "output": [
                "SELECT Avg ( Age ) FROM artist WHERE Age > = 25"
            ]
        },
        {
            "id": "task077-a39bc38a859a4899a0533d3b06178acd",
            "input": "find the product_name, typical_buying_price, typical_buying_price of Products table for which product_description equals yellow",
            "output": [
                "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = \"yellow\""
            ]
        },
        {
            "id": "task077-dc93e6d3626c485cad0053fd90da2fdc",
            "input": "find the start_date of trip table with largest value of start_station_id",
            "output": [
                "SELECT start_date FROM trip ORDER BY start_station_id Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-96c9288a29304f5dba9f24422fe34a0e",
            "input": "Step 1: find the summation of Total_Horses of each value of Farm_ID in farm table.\nStep 2: find Total_Horses, Pigs of farm table ordered ascending by the results of step 1",
            "output": [
                "SELECT Total_Horses , Pigs FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc"
            ]
        },
        {
            "id": "task077-bbc1bdde6a2345a29ee1782d7bf199d4",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Department's Building equals Mergenthaler and Faculty's Building equals NEB.\nStep 3: find DName, Lname of the results of step 1 whose Sex equals M and Faculty's Building equals NEB.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"Mergenthaler\" AND T1.Building = \"NEB\" INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = \"M\" AND T1.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-6d890047956249ec90c9ade44572407c",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Nurse table and in Prescribes table.\nStep 2: find the number of rows of each value of Prescribes's Physician in the results of step 1.\nStep 3: find Name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse JOIN Prescribes AS T3 ON T2.AppointmentID = T3.Appointment GROUP BY T3.Physician ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-dab4bffc4a54437587e03dcfb19c17fb",
            "input": "find the number of rows in airports table whose country equals American Airlines",
            "output": [
                "SELECT Count ( * ) FROM airports WHERE country = \"American Airlines\""
            ]
        },
        {
            "id": "task077-effeb2c160204018b004663721084dd7",
            "input": "Step 1: For each row in wine table, find corresponding rows in grapes table and in appellations table.\nStep 2: find without repetition County of the results of step 1 whose Color equals Red",
            "output": [
                "SELECT DISTINCT T2.County FROM grapes AS T1 JOIN appellations AS T2 JOIN wine AS T3 ON T1.Grape = T3.Grape AND T3.Appelation = T2.Appelation WHERE T1.Color = \"Red\""
            ]
        },
        {
            "id": "task077-c7d69951a17249ccb688f3bea3f4d1fd",
            "input": "Step 1: find the date, mean_temperature_f, mean_dew_point_f of weather table ordered descending by max_wind_Speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , mean_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-c48c8ab370fe48fba125549d22eab277",
            "input": "Step 1: For each row in game table, find corresponding rows in stadium table and in injury_accident table.\nStep 2: find name, Player, Source of the results of step 1 whose Injury not equals Knee problem",
            "output": [
                "SELECT T1.name , T3.Player , T3.Source FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T3.Injury ! = \"Knee problem\""
            ]
        },
        {
            "id": "task077-35ed9affb0814b5999e27948d9041adc",
            "input": "Step 1: find the number of rows of each value of Investor in entrepreneur table.\nStep 2: find Investor of entrepreneur table with largest value in the results of step 1",
            "output": [
                "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9ec140c228294a73988d45a686588639",
            "input": "find the average rows in weather table whose min_visibility_miles greater than 50",
            "output": [
                "SELECT Avg ( * ) FROM weather WHERE min_visibility_miles > 50"
            ]
        },
        {
            "id": "task077-faa5447e022c40eca72164622bd43d30",
            "input": "Step 1: find the Company of entrepreneur table for which Money_Requested greater than 140000.\nStep 2: find the Investor of entrepreneur table for which Money_Requested less than 120000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Company FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000"
            ]
        },
        {
            "id": "task077-9a04d34a74dd4208ace3e82ac85f12b1",
            "input": "Step 1: find the Musical_ID of actor table.\nStep 2: find the Name of actor table whose Actor_ID not one of the results of step 1",
            "output": [
                "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Musical_ID FROM actor )"
            ]
        },
        {
            "id": "task077-ff1211f1cd4146b99ff81623fe5eac5e",
            "input": "Step 1: For each row in Customer_Orders table, find corresponding rows in Customers table and in Order_Items table.\nStep 2: find the summation of order_quantity in the results of step 1 whose date_became_customer less than 2018-03-17 07:13:53",
            "output": [
                "SELECT Sum ( T3.order_quantity ) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id WHERE T1.date_became_customer < \"2018-03-17 07:13:53\""
            ]
        },
        {
            "id": "task077-91181eaa93704e6e89cc37e02e9c6be5",
            "input": "find the average stamina in Player_Attributes table",
            "output": [
                "SELECT Avg ( stamina ) FROM Player_Attributes"
            ]
        },
        {
            "id": "task077-2f6d062190984fe2b7144eb4e4ec125a",
            "input": "Step 1: find the enzyme_id of medicine_enzyme_interaction table.\nStep 2: find the number of rows in medicine table whose rows not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM medicine AS T1 WHERE * NOT IN ( SELECT T2.enzyme_id FROM medicine_enzyme_interaction AS T2 )"
            ]
        },
        {
            "id": "task077-98513bca25874ca982b056a71bc6d369",
            "input": "Step 1: find the flno of flight table ordered ascending by price.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT flno FROM flight ORDER BY price Asc LIMIT 3"
            ]
        },
        {
            "id": "task077-16f85b2eaf7f47149d4f15344ed875db",
            "input": "find the date of weather table for which mean_sea_level_pressure_inches greater than 85",
            "output": [
                "SELECT date FROM weather WHERE mean_sea_level_pressure_inches > 85"
            ]
        },
        {
            "id": "task077-83931c8298ca4fb288f072edeb3e1f08",
            "input": "Step 1: For each row in Ref_Document_Types table, find the corresponding rows in Documents table.\nStep 2: find Document_Type_Name, Other_Details, Document_Description of the results of step 1 whose Document_Name equals Noel CV or Document_Name equals King Book",
            "output": [
                "SELECT T1.Document_Type_Name , T2.Other_Details , T2.Document_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = \"King Book\" OR T2.Document_Name = \"Noel CV\""
            ]
        },
        {
            "id": "task077-30fc5a21c4b447ce81c766ff1fb52159",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the max_sea_level_pressure_inches of weather table for which max_temperature_f less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_temperature_f < 50"
            ]
        },
        {
            "id": "task077-e22d17eb9ef8418ca5ed285a3d1b0a79",
            "input": "find the zip_code, min_temperature_f of weather table for which min_visibility_miles less than 80",
            "output": [
                "SELECT zip_code , min_temperature_f FROM weather WHERE min_visibility_miles < 80"
            ]
        },
        {
            "id": "task077-900cdb7d56ee45b086d05361755c9520",
            "input": "Step 1: find the rows in weather table whose zip_code equals 94107.\nStep 2: find each value of events in the results of step 1 ordered descending by number of rows that correspond of each value.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT events FROM weather WHERE zip_code = 94107 GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-47dd69874d5a47589ef29530531b77ae",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find the number of rows of each value of Nurse's Position in the results of step 1.\nStep 3: find Physician's Name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Position ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6237075a6d6e454e841c6483770fc0d7",
            "input": "find start_station_id of trip table whose duration greater than 60 and duration greater than 384",
            "output": [
                "SELECT start_station_id FROM trip WHERE duration > 384 AND duration > 60"
            ]
        },
        {
            "id": "task077-23b81b9f6c2f4f13ba0c195be9f49e78",
            "input": "find without repetition the product_category of Products table",
            "output": [
                "SELECT DISTINCT product_category FROM Products"
            ]
        },
        {
            "id": "task077-ad18802fc46341bea5a27bb125f40533",
            "input": "find the rows of jobs table for which MAX_SALARY greater than 2500",
            "output": [
                "SELECT * FROM jobs WHERE MAX_SALARY > 2500"
            ]
        },
        {
            "id": "task077-2e11774ab21e434fa4d5770caf095d97",
            "input": "Step 1: find the number of different EMPLOYEE_ID of each value of DEPARTMENT_ID in job_history table.\nStep 2: find without repetition DEPARTMENT_ID in job_history table whose corresponding value in step 1 is greater than or equals 4",
            "output": [
                "SELECT DISTINCT DEPARTMENT_ID FROM job_history GROUP BY DEPARTMENT_ID HAVING Count ( DISTINCT EMPLOYEE_ID ) > = 4"
            ]
        },
        {
            "id": "task077-a7cb306bed2249319ad086aaae00aa32",
            "input": "Step 1: find the rows of employees table for which SALARY greater than 24000.\nStep 2: find the JOB_TITLE of jobs table for which MIN_SALARY greater than 12000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT * FROM employees AS T1 WHERE T1.SALARY > 24000 INTERSECT SELECT T2.JOB_TITLE FROM jobs AS T2 WHERE T2.MIN_SALARY > 12000"
            ]
        },
        {
            "id": "task077-8107e88cc0744c70ba6e73386d3d4a8b",
            "input": "Step 1: For each row in Customer_Events table, find corresponding rows in Customers table and in Residents table.\nStep 2: find Customers's customer_id, Customer_Events's date_moved_in, date_moved_out of the results of step 1",
            "output": [
                "SELECT T1.customer_id , T3.date_moved_in , T2.date_moved_out FROM Customers AS T1 JOIN Residents AS T2 JOIN Customer_Events AS T3 ON T1.customer_id = T3.customer_id AND T3.date_moved_in = T2.date_moved_in AND T1.customer_id = T3.customer_id"
            ]
        },
        {
            "id": "task077-610d2277d53b41858fa664e8ddabfa41",
            "input": "Step 1: find the minimum date_assigned_to in Staff_Department_Assignments table.\nStep 2: find the staff_id of Staff_Department_Assignments table whose date_assigned_to less than the results of step 1",
            "output": [
                "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )"
            ]
        },
        {
            "id": "task077-d3082f9e41f242d1943026d211cbc55b",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MIN_SALARY equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MIN_SALARY = 12000"
            ]
        },
        {
            "id": "task077-e7e6957e9f144737915a1796b1d6c64e",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Sex equals M and Faculty's Building equals NEB.\nStep 3: find DName, Lname of the results of step 1 whose Sex equals M and Faculty's Building equals NEB.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = \"M\" AND T1.Building = \"NEB\" INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = \"M\" AND T1.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-d53fe38eedd145fe95162e67212df4bb",
            "input": "find the id of trip table for which duration greater than 60",
            "output": [
                "SELECT id FROM trip WHERE duration > 60"
            ]
        },
        {
            "id": "task077-1679a2cacc9d4331bacc36ae953db926",
            "input": "Step 1: For each row in Type_Of_Restaurant table, find corresponding rows in Restaurant table and in Restaurant_Type table.\nStep 2: find Address of the results of step 1 whose ResTypeName equals Subway",
            "output": [
                "SELECT T1.Address FROM Restaurant AS T1 JOIN Type_Of_Restaurant AS T2 ON T1.ResID = T2.ResID JOIN Restaurant_Type AS T3 ON T2.ResTypeID = T3.ResTypeID WHERE T3.ResTypeName = \"Subway\""
            ]
        },
        {
            "id": "task077-59aae9f099c3423e8faab722bb6864bc",
            "input": "find the minimum Support_rate, the maximum Consider_rate and the minimum Oppose_rate in candidate table",
            "output": [
                "SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Min ( Oppose_rate ) FROM candidate"
            ]
        },
        {
            "id": "task077-5c0bcea4d9344d0282b09745b1821ff9",
            "input": "Step 1: find the course_id of prereq table.\nStep 2: find the number of rows in section table whose section's course_id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )"
            ]
        },
        {
            "id": "task077-9e8f4fcec15747d9acd165b8e0465e69",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find gender, artist's artist_name of the results of step 1 with smallest value of song_name",
            "output": [
                "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-63425de3d64141f8ad558a2e2be3ae8e",
            "input": "find the name of enzyme table for which Porphyria not equals Heme",
            "output": [
                "SELECT name FROM enzyme WHERE Porphyria ! = \"Heme\""
            ]
        },
        {
            "id": "task077-19e9758b28f8448fa8479de83b88b563",
            "input": "find the address_line_1, email_address of Customers table for which email_address equals vbogisich@example.org",
            "output": [
                "SELECT address_line_1 , email_address FROM Customers WHERE email_address = \"vbogisich@example.org\""
            ]
        },
        {
            "id": "task077-e1fe73f0eec847ad8999423e14e2f8d0",
            "input": "find zip_code of weather table whose min_temperature_f greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT zip_code FROM weather WHERE min_temperature_f > 80 OR min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-7be29be4b7b14891b14c537bf3f89613",
            "input": "Step 1: find the City of city table for which Regional_Population greater than 23019148.\nStep 2: For each row in city table, find the corresponding rows in hosting_city table.\nStep 3: find City of the results of step 2 whose Year equals 2008.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population > 23019148 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008"
            ]
        },
        {
            "id": "task077-b091f517974145699e98e082ff7046a8",
            "input": "find the zip_code, min_temperature_f of weather table for which min_visibility_miles greater than 80",
            "output": [
                "SELECT zip_code , min_temperature_f FROM weather WHERE min_visibility_miles > 80"
            ]
        },
        {
            "id": "task077-1a26f57a3d324121bc13412075338f8a",
            "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: find College's cName of the results of step 1 whose pPos equals mid.\nStep 3: For each row in Player table, find the corresponding rows in Tryout table.\nStep 4: find Tryout's cName of the results of step 3 whose HS equals 1200.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = \"mid\" INTERSECT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = 1200"
            ]
        },
        {
            "id": "task077-91a140a77075405f89e9a394a8a0bea4",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname, LName of the results of step 1 whose President_Vote equals 18",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 18"
            ]
        },
        {
            "id": "task077-a6e75825486b44bf9cd8add875fdca9b",
            "input": "find the Candidate_ID of candidate table with smallest value of Unsure_rate",
            "output": [
                "SELECT Candidate_ID FROM candidate ORDER BY Unsure_rate Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-7461276e1b3d48a0a159684fb94639b1",
            "input": "find the average price_in_dollars and the minimum price_in_euros in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_dollars ) , Min ( price_in_euros ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-00ed6535e9ec4020b621d1e53baf7e20",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find the  rows in the results of step 1 whose MAX_SALARY less than or equals D ordered descending by SALARY",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY < = \"D\" ORDER BY T2.SALARY Desc"
            ]
        },
        {
            "id": "task077-3ec03a85c07d49bca916ed2f99dba85c",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date of the results of step 1 whose min_sea_level_pressure_inches greater than 85",
            "output": [
                "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > 85"
            ]
        },
        {
            "id": "task077-eae1c5150e404b848c236add1fb67186",
            "input": "find the average price_in_euros and the maximum price_in_euros in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_euros ) , Max ( price_in_euros ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-fe718d2a97f7464b8744694f171d1c80",
            "input": "find the number of rows in budget table whose total_budget_percent_budgeted less than 2",
            "output": [
                "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted < 2"
            ]
        },
        {
            "id": "task077-f0b2ca6c3d2940e88eccd2299f083c83",
            "input": "find the events of weather table for which zip_code equals 3",
            "output": [
                "SELECT events FROM weather WHERE zip_code = 3"
            ]
        },
        {
            "id": "task077-b36a83fe44e0496b91af000b4331842f",
            "input": "Step 1: For each row in School table, find the corresponding rows in budget table.\nStep 2: find School_name, total_budget_percent_budgeted, Invested of the results of step 1 whose Year greater than or equals 2002",
            "output": [
                "SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = 2002"
            ]
        },
        {
            "id": "task077-72b1edcf66504e8a8276873d72e3eee4",
            "input": "Step 1: find the number of rows of each value of Department_ID in department table.\nStep 2: find Num_Employees of department table with largest value in the results of step 1",
            "output": [
                "SELECT Num_Employees FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-3b96de873b2840e98243ff8d6a287565",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find characteristic_name of the results of step 1 whose product_category_code equals Herbs",
            "output": [
                "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = \"Herbs\""
            ]
        },
        {
            "id": "task077-584c3ac94d984af0965789a7ac48ba91",
            "input": "Step 1: find the Support_rate of candidate table ordered descending by Oppose_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-ee27b75377fd4d40b97e8b8b8ef66626",
            "input": "find Fname, Lname of Faculty table whose Fname equals Linda and Lname equals Smith",
            "output": [
                "SELECT Fname , Lname FROM Faculty WHERE Fname = \"Linda\" AND Lname = \"Smith\""
            ]
        },
        {
            "id": "task077-e4323c95d9e3467496fb792573155509",
            "input": "Step 1: find the Name of actor table.\nStep 2: find the Name of actor table whose Musical_ID not one of the results of step 1",
            "output": [
                "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )"
            ]
        },
        {
            "id": "task077-a3cc01b6b08247b584aa192c4e2e7b1f",
            "input": "find start_date of trip table whose duration greater than 60 and start_date equals 8/21/2015 17:03",
            "output": [
                "SELECT start_date FROM trip WHERE duration > 60 AND start_date = \"8/21/2015 17:03\""
            ]
        },
        {
            "id": "task077-93981ad4777a45dfafc33fc45333ffc8",
            "input": "Step 1: For each row in School table, find the corresponding rows in endowment table.\nStep 2: find School_name of the results of step 1 whose amount greater than 10 or Enrollment less than 495",
            "output": [
                "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > 10 OR T1.Enrollment < 495"
            ]
        },
        {
            "id": "task077-044f85b5b9d0475788721b62f13fb43c",
            "input": "find the date of weather table for which min_visibility_miles greater than 85",
            "output": [
                "SELECT date FROM weather WHERE min_visibility_miles > 85"
            ]
        },
        {
            "id": "task077-73eded80b5174b18867ed9f8ff664f88",
            "input": "Step 1: find the Year of wine table for which Winery equals Brander.\nStep 2: find the Name of wine table whose Year less than the results of step 1",
            "output": [
                "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = \"Brander\" )"
            ]
        },
        {
            "id": "task077-7d639608f61548d1996e2bb8acecba11",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find the average Weeks_on_Top in the results of step 1 whose Famous_Release_date greater than or equals 25",
            "output": [
                "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date > = 25"
            ]
        },
        {
            "id": "task077-a4a6074f30d9424a94057191aa35b79c",
            "input": "Step 1: For each row in broadcast table, find corresponding rows in program table and in channel table.\nStep 2: find channel's Owner of the results of step 1 whose program's Name equals Morning.\nStep 3: For each row in program table, find the corresponding rows in broadcast table.\nStep 4: find program's Owner of the results of step 3 whose Time_of_day equals Night.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Name = \"Morning\" INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = \"Night\""
            ]
        },
        {
            "id": "task077-620ff4811ec74523a80262e2d2c49c8e",
            "input": "find the product_name, typical_selling_price, typical_selling_price of Products table for which product_description equals yellow",
            "output": [
                "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = \"yellow\""
            ]
        },
        {
            "id": "task077-eff5bb79fe7d4a88a3d150c1303ea1b2",
            "input": "find the average price_in_pounds and the minimum price_in_euros in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_pounds ) , Min ( price_in_euros ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-652749e2be9e484abb50be3d73ca38fc",
            "input": "find the Date, Unsure_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Date , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-8c8ac8ebf89f4d4fbc24f65aaf9c84bd",
            "input": "find the FIRST_NAME, LAST_NAME, DEPARTMENT_ID, DEPARTMENT_ID of employees table",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME , DEPARTMENT_ID , DEPARTMENT_ID FROM employees"
            ]
        },
        {
            "id": "task077-c3f71d3e8a074ed8925cd754d4d60c60",
            "input": "find the Name of actor table",
            "output": [
                "SELECT Name FROM actor"
            ]
        },
        {
            "id": "task077-cc364c090e3a45ea8f85089e8eca2a56",
            "input": "find the Fname, LName of Student table for which Advisor equals 18",
            "output": [
                "SELECT Fname , LName FROM Student WHERE Advisor = 18"
            ]
        },
        {
            "id": "task077-bdf82f5a80a340e3954714a24b7386d1",
            "input": "Step 1: For each row in Addresses table, find corresponding rows in Drama_Workshop_Groups table and in Stores table.\nStep 2: find the number of different Currency_Code in the results of step 1 whose Stores's Marketing_Region_Code equals IN",
            "output": [
                "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Marketing_Region_Code = \"IN\""
            ]
        },
        {
            "id": "task077-4d7289c6bbf441ac8c0a761f92b4ee48",
            "input": "find the number of different Currency_Code in Drama_Workshop_Groups table whose Currency_Code equals EU",
            "output": [
                "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Currency_Code = \"EU\""
            ]
        },
        {
            "id": "task077-432c3f68c7b4492baaff28482a4ecb12",
            "input": "Step 1: find the average salary in employee table.\nStep 2: find the eid of employee table whose salary greater than the results of step 1",
            "output": [
                "SELECT eid FROM employee WHERE salary > ( SELECT Avg ( salary ) FROM employee )"
            ]
        },
        {
            "id": "task077-063ec1f256694cac9c389f14fd3718d7",
            "input": "find the Date_of_ceremony, Music_Festival of music_festival table",
            "output": [
                "SELECT Date_of_ceremony , Music_Festival FROM music_festival"
            ]
        },
        {
            "id": "task077-22c1d9cc791543e396025394d790e46b",
            "input": "Step 1: find the artist_name of artist table for which country equals UK.\nStep 2: find the artist_name of artist table for which country equals english.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT artist_name FROM artist WHERE country = \"english\""
            ]
        },
        {
            "id": "task077-f78065f00409430083df5284b24a7765",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date of the results of step 1 whose mean_sea_level_pressure_inches greater than 85",
            "output": [
                "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > 85"
            ]
        },
        {
            "id": "task077-c9e04d7f8fe047ad86b89d144604de94",
            "input": "find the average price_in_pounds and the maximum price_in_euros in Catalog_Contents table",
            "output": [
                "SELECT Avg ( price_in_pounds ) , Max ( price_in_euros ) FROM Catalog_Contents"
            ]
        },
        {
            "id": "task077-b4f698aca6784657ad5b623faa28bf10",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find EMPLOYEE_ID, JOB_TITLE of the results of step 1",
            "output": [
                "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID"
            ]
        },
        {
            "id": "task077-4eef1ab7c0254e069894f743b1b50474",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find without repetition Person's name, age of the results of step 1 whose job equals Dan or friend equals Alice",
            "output": [
                "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = \"Dan\" OR T2.friend = \"Alice\""
            ]
        },
        {
            "id": "task077-768328a7bb9c49d6bd3d47df627cf59d",
            "input": "find order_id, customer_id of Customer_Orders table whose order_status_code equals Cancelled or order_status_code equals Paid",
            "output": [
                "SELECT order_id , customer_id FROM Customer_Orders WHERE order_status_code = \"Paid\" OR order_status_code = \"Cancelled\""
            ]
        },
        {
            "id": "task077-30761b4833354c5ab5c8242ac7109cc6",
            "input": "Step 1: find the date, mean_temperature_f, min_dew_point_f of weather table ordered descending by mean_wind_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-ebcec45432604b34b0bec7ab507c36c8",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport_id in the results of step 1.\nStep 3: find airport's id, name, Date of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-e27ecea482dd4f149c8e6cd678807304",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname, LName of the results of step 1 whose President_Vote equals 18 and Advisor equals 1121",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 18 AND T1.Advisor = 1121"
            ]
        },
        {
            "id": "task077-a374955c89094f25bd37269c5588f446",
            "input": "find JOB_TITLE, MAX_SALARY, MAX_SALARY of jobs table whose JOB_TITLE contains President and MAX_SALARY greater than 12000",
            "output": [
                "SELECT JOB_TITLE , MAX_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE \"President\" AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-079e2112a0394da4a67bd173e236a246",
            "input": "Step 1: For each row in match_season table, find corresponding rows in country table and in team table.\nStep 2: find Official_native_language of the results of step 1 whose Name contains English",
            "output": [
                "SELECT T1.Official_native_language FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id WHERE T2.Name LIKE \"English\""
            ]
        },
        {
            "id": "task077-dff0d0d5941d4a09b939182c50dacdf5",
            "input": "find the Name of Nurse table with largest value of Registered",
            "output": [
                "SELECT Name FROM Nurse ORDER BY Registered Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-cb2c784ab4324b57971106176dd86621",
            "input": "Step 1: find the number of rows of each value of County_Id in county table.\nStep 2: find County_name in county table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT County_name FROM county GROUP BY County_Id HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-da3537e1b9c8433c84dfc4211f249c3c",
            "input": "Step 1: For each row in musical table, find the corresponding rows in actor table.\nStep 2: find Character of the results of step 1 whose Award equals Tony Award or actor's Name equals Cleavant Derricks",
            "output": [
                "SELECT T2.Character FROM musical AS T1 JOIN actor AS T2 WHERE T1.Award = \"Tony Award\" OR T2.Name = \"Cleavant Derricks\""
            ]
        },
        {
            "id": "task077-d67a07f79a2e47e3935e9a54460e2338",
            "input": "find cName, enr of College table whose state equals LA or enr greater than 10000",
            "output": [
                "SELECT cName , enr FROM College WHERE state = \"LA\" OR enr > 10000"
            ]
        },
        {
            "id": "task077-6cb9f791540d4e7b850a36270f9f74d4",
            "input": "find the maximum rows and the minimum customer_phone in Customers table",
            "output": [
                "SELECT Max ( * ) , Min ( customer_phone ) FROM Customers"
            ]
        },
        {
            "id": "task077-18fcee393faa494b9ab989f0ce68bbe9",
            "input": "Step 1: For each row in school table, find the corresponding rows in school_details table.\nStep 2: find School of the results of step 1 whose Division not equals Division 1",
            "output": [
                "SELECT T1.School FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID WHERE T2.Division ! = \"Division 1\""
            ]
        },
        {
            "id": "task077-29301585bbf6468c9e6925654499f610",
            "input": "find the number of rows in Student table whose Sex equals M",
            "output": [
                "SELECT Count ( * ) FROM Student WHERE Sex = \"M\""
            ]
        },
        {
            "id": "task077-13f77beb85db457fb4ca12c532b4a365",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name, balance of the results of step 1 whose balance less than 200000",
            "output": [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000"
            ]
        },
        {
            "id": "task077-67437232146943a98b317646fe95c08c",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date of the results of step 1 whose mean_dew_point_f greater than 85",
            "output": [
                "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_dew_point_f > 85"
            ]
        },
        {
            "id": "task077-7cf0ed7d06de47d5bbd2976257c9e9dc",
            "input": "find without repetition the Eliminated_By of Elimination table for which Team not equals Tokyo , Japan",
            "output": [
                "SELECT DISTINCT Eliminated_By FROM Elimination WHERE Team ! = \"Tokyo , Japan\""
            ]
        },
        {
            "id": "task077-612f38dbfbd24773bb98bb85dbf6eb48",
            "input": "find without repetition the Name of Physician table ordered ascending by Name",
            "output": [
                "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc"
            ]
        },
        {
            "id": "task077-a4d8eeaa0ada4842a805611981cb1794",
            "input": "Step 1: find the number of rows of each value of id in airport table.\nStep 2: find id, name, ICAO of airport table with largest value in the results of step 1",
            "output": [
                "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-60be9c8cd22d45e1a0b35c5a364ba973",
            "input": "find JOB_TITLE, MIN_SALARY, MAX_SALARY of jobs table whose MAX_SALARY greater than 12000 and MIN_SALARY less than or equals 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > 12000 AND MIN_SALARY < = 18000"
            ]
        },
        {
            "id": "task077-0f732c7e447040e78c374bd4826ff3c7",
            "input": "find JOB_TITLE, MIN_SALARY, MAX_SALARY of jobs table whose MIN_SALARY contains 12000 and MAX_SALARY greater than 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE 12000 AND MAX_SALARY > 18000"
            ]
        },
        {
            "id": "task077-e7013c788c6d4064b021791ee1097c6c",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY equals 8000 or MIN_SALARY greater than 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = 8000 OR T1.MIN_SALARY > 12000"
            ]
        },
        {
            "id": "task077-8dd72805d34e4496a4b46db02a09acf0",
            "input": "find start_date of trip table whose duration greater than 60 and end_station_name equals San Francisco Caltrain 2 (330 Townsend)",
            "output": [
                "SELECT start_date FROM trip WHERE duration > 60 AND end_station_name = \"San Francisco Caltrain 2 (330 Townsend)\""
            ]
        },
        {
            "id": "task077-630c321b7f3f4050989e85baeb5f4ff3",
            "input": "Step 1: For each row in Ref_Characteristic_Types table, find the corresponding rows in Characteristics table.\nStep 2: find characteristic_name, other_characteristic_details, characteristic_type_description of the results of step 1.\nStep 3: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T2.characteristic_name , T2.other_characteristic_details , T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code EXCEPT SELECT T2.characteristic_name , T2.other_characteristic_details , T2.characteristic_data_type FROM Characteristics AS T2"
            ]
        },
        {
            "id": "task077-fbf5a9204caf47fc9e6bd3f5dee7dc6f",
            "input": "find the average length_feet in bridge table whose name equals Xian Ren Qiao (Fairy Bridge)",
            "output": [
                "SELECT Avg ( length_feet ) FROM bridge WHERE name = \"Xian Ren Qiao (Fairy Bridge)\""
            ]
        },
        {
            "id": "task077-ec123cd9dde7482ebc254c59bb621929",
            "input": "Step 1: For each row in Employee table, find the corresponding rows in Customer table.\nStep 2: find Employee's LastName of the results of step 1 whose Customer's LastName greater than 20",
            "output": [
                "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.LastName > 20"
            ]
        },
        {
            "id": "task077-67a7d4662ac04a2c9d93827a34c5cdc5",
            "input": "Step 1: find the number of rows of each value of Department_ID in department table.\nStep 2: find Creation of department table with largest value in the results of step 1",
            "output": [
                "SELECT Creation FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-d83967adbabf4e7a8a910c45501ae6aa",
            "input": "Step 1: For each row in country table, find the corresponding rows in match_season table.\nStep 2: find Official_native_language of the results of step 1 whose Player contains English",
            "output": [
                "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-f2e0664231a642b883003ceb2c1e5280",
            "input": "Step 1: For each row in Organizations table, find corresponding rows in Services table and in Things table.\nStep 2: find without repetition Services's service_type_code of the results of step 1 whose Things's service_details equals Denesik and Sons Party",
            "output": [
                "SELECT DISTINCT T2.service_type_code FROM Organizations AS T1 JOIN Services AS T2 ON T2.organization_id = T1.organization_id JOIN Things AS T3 ON T1.organization_id = T3.organization_id WHERE T3.service_details = \"Denesik and Sons Party\""
            ]
        },
        {
            "id": "task077-1cedb71f520744158ab1ececda3d2311",
            "input": "Step 1: find the City of city table.\nStep 2: For each row in city table, find the corresponding rows in hosting_city table.\nStep 3: find City of the results of step 2 whose Year equals 2008.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.City FROM city AS T1 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008"
            ]
        },
        {
            "id": "task077-04e013442c3440adab792fcfee5945b7",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find SALARY, MIN_SALARY of the results of step 1",
            "output": [
                "SELECT T2.SALARY , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID"
            ]
        },
        {
            "id": "task077-a4aa8a71a62f4928ba7122247d424202",
            "input": "Step 1: For each row in volume table, find corresponding rows in artist table and in music_festival table.\nStep 2: find Famous_Release_date, Music_Festival of the results of step 1",
            "output": [
                "SELECT T1.Famous_Release_date , T3.Music_Festival FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume"
            ]
        },
        {
            "id": "task077-72ab4aab16444517a1afa1cff2474f0d",
            "input": "find the average Sheep_and_Goats in farm table whose Pigs greater than 5000",
            "output": [
                "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Pigs > 5000"
            ]
        },
        {
            "id": "task077-abe3769bd46e48ff86002fd946b1da75",
            "input": "find bike_id of trip table whose duration greater than 60 and duration greater than 384",
            "output": [
                "SELECT bike_id FROM trip WHERE duration > 384 AND duration > 60"
            ]
        },
        {
            "id": "task077-75ad6d64392b48df850d084305de8b91",
            "input": "Step 1: For each row in station table, find the corresponding rows in weather table.\nStep 2: find zip_code of the results of step 1 whose long greater than 80 or mean_sea_level_pressure_inches greater than 30.02",
            "output": [
                "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > 80 OR T2.mean_sea_level_pressure_inches > 30.02"
            ]
        },
        {
            "id": "task077-29198ff43c97479aa21b67e6d259a5cd",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name of the results of step 1 whose balance less than 200000",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000"
            ]
        },
        {
            "id": "task077-dc0620b853c546889d7163979efb5d85",
            "input": "find JOB_TITLE, MIN_SALARY of jobs table whose MAX_SALARY contains 12000 and MAX_SALARY greater than 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE 18000 AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-b2303e1eadf14231a53e3b7ff966a339",
            "input": "Step 1: For each row in country table, find the corresponding rows in match_season table.\nStep 2: find Country_name of the results of step 1 whose Position equals Defender",
            "output": [
                "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\""
            ]
        },
        {
            "id": "task077-be7753df532349ebbf1c93e2b240b19c",
            "input": "find the cust_name, no_of_loans of customer table",
            "output": [
                "SELECT cust_name , no_of_loans FROM customer"
            ]
        },
        {
            "id": "task077-61cc00de98ce4db18b1a7a07894652e8",
            "input": "find the cust_name of customer table ordered ascending by acc_bal",
            "output": [
                "SELECT cust_name FROM customer ORDER BY acc_bal Asc"
            ]
        },
        {
            "id": "task077-b126cef3e2b04387be9c502e307998c6",
            "input": "find the maximum Consider_rate in candidate table",
            "output": [
                "SELECT Max ( Consider_rate ) FROM candidate"
            ]
        },
        {
            "id": "task077-2d673a2d49d24dea8928ef567795c6f0",
            "input": "find JOB_TITLE, MAX_SALARY of jobs table whose JOB_TITLE equals President and MAX_SALARY greater than 12000",
            "output": [
                "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE JOB_TITLE = \"President\" AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-3447a1a1eabb4dd58ef8b7d64ed00a7a",
            "input": "Step 1: find the number of rows of each value of Name in Physician table.\nStep 2: find Name of Physician table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM Physician GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-bcd076d8c3d845c784f7a0c4a4958079",
            "input": "Step 1: For each row in Documents table, find corresponding rows in Ref_Document_Types table and in Documents_with_Expenses table.\nStep 2: find Budget_Type_Code, Document_Type_Description of the results of step 1",
            "output": [
                "SELECT T3.Budget_Type_Code , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T2.Document_ID = T3.Document_ID"
            ]
        },
        {
            "id": "task077-6e1ed3fa94524ad08c066af2a3a3e2ad",
            "input": "Step 1: For each row in city table, find the corresponding rows in address table.\nStep 2: find the number of rows of each value of address's city_id in the results of step 1.\nStep 3: find district, city, city's city_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b3553a9f53c04a58a56c6de7fda2bdd2",
            "input": "Step 1: find the City of city table for which GDP greater than 1919.57.\nStep 2: For each row in city table, find the corresponding rows in hosting_city table.\nStep 3: find City of the results of step 2 whose Year equals 2008.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.City FROM city AS T1 WHERE T1.GDP > 1919.57 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008"
            ]
        },
        {
            "id": "task077-35ba29df308343ee865c0501da721ca3",
            "input": "find rows of jobs table whose JOB_TITLE equals President and MIN_SALARY greater than 12000",
            "output": [
                "SELECT * FROM jobs WHERE JOB_TITLE = \"President\" AND MIN_SALARY > 12000"
            ]
        },
        {
            "id": "task077-c948cd87dc594313b7496ae9bd6731b1",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find the number of rows of each value of Nurse's Name in the results of step 1.\nStep 3: find Physician's Name of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c2adab84649e4c90b60975c6f9d7547e",
            "input": "find JOB_TITLE, MIN_SALARY of jobs table whose JOB_TITLE equals President and MAX_SALARY greater than 12000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE JOB_TITLE = \"President\" AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-6a4ac9c9bea94d9a98e8ac90621b2863",
            "input": "find the meter_700, meter_400 of swimmer table for which Nationality equals Australia",
            "output": [
                "SELECT meter_700 , meter_400 FROM swimmer WHERE Nationality = \"Australia\""
            ]
        },
        {
            "id": "task077-f0d8390a12f14498863c58afe44a10dc",
            "input": "find id of trip table whose duration greater than 60 and duration greater than 384",
            "output": [
                "SELECT id FROM trip WHERE duration > 384 AND duration > 60"
            ]
        },
        {
            "id": "task077-daa606a978a24cf0ac15ec8f0cde36c9",
            "input": "Step 1: For each row in Residents table, find the corresponding rows in Customer_Events table.\nStep 2: find Customer_Event_ID, Customer_Events's date_moved_in, date_moved_out of the results of step 1",
            "output": [
                "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.date_moved_out FROM Residents AS T1 JOIN Customer_Events AS T2 ON T1.date_moved_in = T2.date_moved_in"
            ]
        },
        {
            "id": "task077-d7bd2c0590554001926f67481721fdaa",
            "input": "find the catalog_entry_name of Catalog_Contents table with largest value of price_in_euros",
            "output": [
                "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_euros Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b1dd0d80ac31490193b130eb9c7d35d3",
            "input": "find rows of jobs table whose MIN_SALARY greater than 2500 and MAX_SALARY less than 40000",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY > 2500 AND MAX_SALARY < 40000"
            ]
        },
        {
            "id": "task077-86e4d36b2dbd48ba897a23c169d1cc14",
            "input": "find the login_name of Course_Authors_and_Tutors table",
            "output": [
                "SELECT login_name FROM Course_Authors_and_Tutors"
            ]
        },
        {
            "id": "task077-261a0e62ea8a436a8a2e75ee757cb257",
            "input": "find each value of budget in department table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , budget FROM department GROUP BY budget"
            ]
        },
        {
            "id": "task077-ed8b987d7f3946edb599883e8ad100cf",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find Fname, LName of the results of step 1 whose President_Vote equals 18",
            "output": [
                "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 18"
            ]
        },
        {
            "id": "task077-1c40008d85aa4e6091b002f562bb425d",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition LName of the results of step 1 whose Advisor equals 8741 and Secretary_Vote equals 1010",
            "output": [
                "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = 8741 AND T2.Secretary_Vote = 1010"
            ]
        },
        {
            "id": "task077-f259b31260e34723998ac66af1ba9e60",
            "input": "Step 1: find the Actor_ID of actor table.\nStep 2: find the Name of actor table whose Name not one of the results of step 1",
            "output": [
                "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Actor_ID FROM actor )"
            ]
        },
        {
            "id": "task077-35ee09ab487b413e903b44117be178ac",
            "input": "find the Employee_ID of Employees table for which Employee_Name equals Leo",
            "output": [
                "SELECT Employee_ID FROM Employees WHERE Employee_Name = \"Leo\""
            ]
        },
        {
            "id": "task077-3561c45f268a46bf9c2af4fc5010f182",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Faculty's Building equals M and Department's Building equals NEB",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = \"M\" AND T2.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-903b0bead8c94b9eb37d867da58acf0e",
            "input": "find JOB_TITLE, MIN_SALARY, MAX_SALARY of jobs table whose MAX_SALARY contains 12000 and MAX_SALARY greater than 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY LIKE 18000 AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-7e40c1c2de8d4618b9ef5eea10eea47f",
            "input": "find the average Age in artist table whose Famous_Release_date greater than or equals 25",
            "output": [
                "SELECT Avg ( Age ) FROM artist WHERE Famous_Release_date > = 25"
            ]
        },
        {
            "id": "task077-9c817d05bbde41428333608e5ecc74cf",
            "input": "Step 1: find the address_line_1, email_address of Customers table for which email_address equals hsteuber@example.org.\nStep 2: find the address_line_2, email_address of Customers table for which email_address equals vbogisich@example.org.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT address_line_1 , email_address FROM Customers WHERE email_address = \"hsteuber@example.org\" INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = \"vbogisich@example.org\""
            ]
        },
        {
            "id": "task077-f5fa5b4cfc88458490f59cdc2f8ca916",
            "input": "find the City, City of city table with smallest value of GDP",
            "output": [
                "SELECT City , City FROM city ORDER BY GDP Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-19262f025e43489eb37fd01bb6080326",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MIN_SALARY contains 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MIN_SALARY LIKE 12000"
            ]
        },
        {
            "id": "task077-835769f6552e4b19a3a8311efabb754d",
            "input": "Step 1: For each row in volume table, find the corresponding rows in music_festival table.\nStep 2: find Issue_Date, Date_of_ceremony of the results of step 1",
            "output": [
                "SELECT T1.Issue_Date , T2.Date_of_ceremony FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume"
            ]
        },
        {
            "id": "task077-a42722f0238f4dd2bf90723695ac25fe",
            "input": "find the Name, Score of wine table for which Grape equals White",
            "output": [
                "SELECT Name , Score FROM wine WHERE Grape = \"White\""
            ]
        },
        {
            "id": "task077-1cc39f90903642d5b3ca5b1f046b83db",
            "input": "find dorm_name, gender of Dorm table whose student_capacity equals 300 or student_capacity less than 100",
            "output": [
                "SELECT dorm_name , gender FROM Dorm WHERE student_capacity = 100 OR student_capacity < 300"
            ]
        },
        {
            "id": "task077-269e180e86ef4b13a790a07bce1afd0a",
            "input": "find the average Total_Horses in farm table whose Total_Horses greater than 5000",
            "output": [
                "SELECT Avg ( Total_Horses ) FROM farm WHERE Total_Horses > 5000"
            ]
        },
        {
            "id": "task077-0ab5fd70671c4109977ed17755874772",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Department's Building equals M and Faculty's Building equals NEB",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"M\" AND T1.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-6a59ea6fa6e644d79811b7abc3817acd",
            "input": "Step 1: For each row in Nurse table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of AppointmentID in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-fbb0a82a514b4427820b57b39a36579c",
            "input": "Step 1: find the Consider_rate of candidate table ordered descending by Oppose_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Consider_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-34ed7f9abb534952ac303e454736a0f4",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find characteristic_name, other_characteristic_details, characteristic_type_code of the results of step 1 whose product_name equals cumin.\nStep 3: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = \"cumin\" EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1"
            ]
        },
        {
            "id": "task077-e74dffe2e8c147dbbced901b34f085ab",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY contains 8000 and MIN_SALARY less than or equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE 8000 AND T1.MIN_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-f21fa78cde364866a72dfc0b1d5af0ff",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the rows of weather table for which max_sea_level_pressure_inches greater than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT * FROM weather WHERE max_sea_level_pressure_inches > 50"
            ]
        },
        {
            "id": "task077-c736014dd4214e86b99a0b6b9ff6689f",
            "input": "find the asset_details of Assets table ordered ascending by other_asset_details",
            "output": [
                "SELECT asset_details FROM Assets ORDER BY other_asset_details Asc"
            ]
        },
        {
            "id": "task077-e5b60f4cf35d442ca1dd62bf47c07888",
            "input": "Step 1: For each row in Has_amenity table, find corresponding rows in Dorm table and in Dorm_amenity table.\nStep 2: find student_capacity, gender of the results of step 1 whose amenity_name contains Donor",
            "output": [
                "SELECT T1.student_capacity , T1.gender FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name LIKE \"Donor\""
            ]
        },
        {
            "id": "task077-0f9916dd90774ad3a2f43cbdd9a681cc",
            "input": "Step 1: For each row in Nurse table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of ExaminationRoom in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.ExaminationRoom ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-2ff61f81e37242c8b187fdd75399521a",
            "input": "Step 1: find the rows of jobs table for which MIN_SALARY greater than 20000.\nStep 2: find the JOB_TITLE of jobs table for which MIN_SALARY greater than 12000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY > 20000 INTERSECT SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 12000"
            ]
        },
        {
            "id": "task077-3509b486de57458ca09bc162c258b9c3",
            "input": "find without repetition first_name of customers table whose first_name equals Eduardo and last_name equals Martins",
            "output": [
                "SELECT DISTINCT first_name FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\""
            ]
        },
        {
            "id": "task077-790a74b31f6f46da83f9c20b55f17085",
            "input": "Step 1: find the number of rows of each value of name in user_profiles table.\nStep 2: find name, email in user_profiles table whose corresponding value in step 1 is greater than 1",
            "output": [
                "SELECT name , email FROM user_profiles GROUP BY name HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-b826d59cf83d41b6abc1d3291865b29c",
            "input": "find JOB_TITLE of jobs table whose MIN_SALARY greater than 12000 and MIN_SALARY greater than 20000",
            "output": [
                "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 20000 AND MIN_SALARY > 12000"
            ]
        },
        {
            "id": "task077-46d744cb80a249898eb9ced73fe7f1fc",
            "input": "find JOB_TITLE, MIN_SALARY, MIN_SALARY of jobs table whose MAX_SALARY greater than 12000 and MAX_SALARY less than or equals 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY , MIN_SALARY FROM jobs WHERE MAX_SALARY > 18000 AND MAX_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-2cb8ce1a7ea846c5b01a52d150284ea4",
            "input": "Step 1: find the number of rows of each value of Order_ID in Invoices table.\nStep 2: find Product_ID of Invoices table with largest value in the results of step 1",
            "output": [
                "SELECT Product_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c0679cf2f5e14d6e895d4fb543608abf",
            "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: find Name of the results of step 1 whose Price less than 50 and appellations's State equals Monterey and County equals Sonoma",
            "output": [
                "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < 50 AND T1.State = \"Monterey\" AND T1.County = \"Sonoma\""
            ]
        },
        {
            "id": "task077-a4a4cbdfaca84f5da7fd7f177732217a",
            "input": "find the FIRST_NAME, LAST_NAME, MANAGER_ID, DEPARTMENT_ID of employees table",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , DEPARTMENT_ID FROM employees"
            ]
        },
        {
            "id": "task077-82f41a239eec4700b6f50e063065061b",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find friend of the results of step 1 whose job equals Alice and gender equals female",
            "output": [
                "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = \"Alice\" AND T1.gender = \"female\""
            ]
        },
        {
            "id": "task077-82b500e626454dc39d237b8f8eee2168",
            "input": "find the Unsure_rate, Date, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Unsure_rate , Date , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-60aea2fc985e418987da03beba8139ce",
            "input": "find the date of weather table for which min_temperature_f equals or between 30.3 and 31",
            "output": [
                "SELECT date FROM weather WHERE min_temperature_f BETWEEN 31 AND 30.3"
            ]
        },
        {
            "id": "task077-be267058580947e6a491f1dc2248f2c0",
            "input": "Step 1: find the number of rows of each value of Name in Nurse table.\nStep 2: find Name of Nurse table with largest value in the results of step 1",
            "output": [
                "SELECT Name FROM Nurse GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-ca975d4ca9d24f04a7464c73ceb7ddf3",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find the average Weeks_on_Top in the results of step 1 whose Artist equals 25 or Artist equals Gorgoroth",
            "output": [
                "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = \"Gorgoroth\" OR T1.Artist = 25"
            ]
        },
        {
            "id": "task077-fd527e8cc896443dbe0071c7bd925155",
            "input": "find the number of different Currency_Code in Drama_Workshop_Groups table whose Marketing_Region_Code equals FR",
            "output": [
                "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Marketing_Region_Code = \"FR\""
            ]
        },
        {
            "id": "task077-d3ef28b83ec14cdb9a294f3b38284ecc",
            "input": "find the bike_id of trip table for which duration greater than 60",
            "output": [
                "SELECT bike_id FROM trip WHERE duration > 60"
            ]
        },
        {
            "id": "task077-5769a8a604ee43f79fad3d43666814e7",
            "input": "find the Name of Physician table for which Position equals senior",
            "output": [
                "SELECT Name FROM Physician WHERE Position = \"senior\""
            ]
        },
        {
            "id": "task077-837d0c8e110642dc84ce11682e66053e",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MAX_SALARY greater than or equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MAX_SALARY > = 12000"
            ]
        },
        {
            "id": "task077-7d5e170399f64656ad2fd5df21f2bdff",
            "input": "Step 1: find the City of branch table.\nStep 2: For each row in membership_register_branch table, find corresponding rows in member table and in branch table.\nStep 3: find City of the results of step 2 whose Level greater than 100.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM member AS T2 JOIN branch AS T1 JOIN membership_register_branch AS T3 ON T2.Member_ID = T3.Member_ID AND T3.Branch_ID = T1.Branch_ID WHERE T2.Level > 100"
            ]
        },
        {
            "id": "task077-edda83535e964d1781030ab5a40b0770",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose preferred_genre equals modern or languages equals english",
            "output": [
                "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = \"modern\" OR T2.languages = \"english\""
            ]
        },
        {
            "id": "task077-2a41ec17244c4cb886fd95bcd3c75f74",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average duration in the results of step 1 whose max_sea_level_pressure_inches greater than 50",
            "output": [
                "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_sea_level_pressure_inches > 50"
            ]
        },
        {
            "id": "task077-9ec2da825ea343db89d19e1a181802b6",
            "input": "find the state_province_county of Addresses table for which town_city equals 6862 Kaitlyn Knolls",
            "output": [
                "SELECT state_province_county FROM Addresses WHERE town_city = \"6862 Kaitlyn Knolls\""
            ]
        },
        {
            "id": "task077-b4a80150c2b74846ad7768fbf125548f",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the mean_sea_level_pressure_inches of weather table for which max_sea_level_pressure_inches less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < 50"
            ]
        },
        {
            "id": "task077-4fa12662854a4900b1407bece0a590e8",
            "input": "find the FirstName, LastName of teachers table for which FirstName equals EVELINA",
            "output": [
                "SELECT FirstName , LastName FROM teachers WHERE FirstName = \"EVELINA\""
            ]
        },
        {
            "id": "task077-de4f6cc651b841ddbd48559076b16e7a",
            "input": "Step 1: find the Oppose_rate of candidate table ordered descending by Unsure_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-33a8301373c04083846fd21eaa5e9a1b",
            "input": "find the Candidate_ID of candidate table with smallest value of Consider_rate",
            "output": [
                "SELECT Candidate_ID FROM candidate ORDER BY Consider_rate Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-6d12c1ea69eb419787e5621e92d4e858",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_entry_name, catalog_name of the results of step 1 whose price_in_pounds greater than 700",
            "output": [
                "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > 700"
            ]
        },
        {
            "id": "task077-1e0e2eab8cc04b768e36f8776b04bea7",
            "input": "find the average Gold and the average Gold in club_rank table",
            "output": [
                "SELECT Avg ( Gold ) , Avg ( Gold ) FROM club_rank"
            ]
        },
        {
            "id": "task077-f9099096103947c38964d7b8f15af5a2",
            "input": "Step 1: find the date, mean_temperature_f, max_dew_point_f of weather table ordered descending by max_wind_Speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-ddb06a7d524c49f9b1cfbeb7f57736ba",
            "input": "find the state, enr of College table",
            "output": [
                "SELECT state , enr FROM College"
            ]
        },
        {
            "id": "task077-90de02bfea084c2f97fcfbca93226545",
            "input": "Step 1: For each row in Fault_Log table, find corresponding rows in Assets table and in Engineer_Visits table.\nStep 2: find asset_details of the results of step 1 ordered ascending by visit_start_datetime",
            "output": [
                "SELECT T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc"
            ]
        },
        {
            "id": "task077-d934f1835f384e47b81070579da92aa8",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average duration in the results of step 1 whose min_humidity greater than 50",
            "output": [
                "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > 50"
            ]
        },
        {
            "id": "task077-030fbd06a9b74f679879e9c08c0ad3c2",
            "input": "find the Country, Number_cities of market table",
            "output": [
                "SELECT Country , Number_cities FROM market"
            ]
        },
        {
            "id": "task077-64785c954a0b4022b03a87835037e02f",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_enrolment, date_of_registration of the results of step 1 whose family_name equals Zieme and personal_name equals Bernie",
            "output": [
                "SELECT T2.date_of_enrolment , T1.date_of_registration FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = \"Zieme\" AND T1.personal_name = \"Bernie\""
            ]
        },
        {
            "id": "task077-086945a521ca4be0b18c140689ff55a9",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname, LName of the results of step 1 whose President_Vote equals 18 and Treasurer_Vote equals 1035",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 18 AND T2.Treasurer_Vote = 1035"
            ]
        },
        {
            "id": "task077-7fb12b4a620b40fba2e6ae3ce836383d",
            "input": "find the JOB_TITLE, MAX_SALARY of jobs table for which MAX_SALARY equals or between 12000 and 18000",
            "output": [
                "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN 18000 AND 12000"
            ]
        },
        {
            "id": "task077-dc416b8b48dc4a1198670eaa8a17397a",
            "input": "Step 1: For each row in city table, find the corresponding rows in address table.\nStep 2: find the number of rows of each value of address's city_id in the results of step 1.\nStep 3: find rows, city, address's city_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT * , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-06778630b79f4d0f943a0891bad7711f",
            "input": "Step 1: find the pName of Player table for which HS equals or between 1500 and 1200.\nStep 2: find the pName of Player table for which HS greater than 500.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT pName FROM Player WHERE HS BETWEEN 1200 AND 1500 INTERSECT SELECT pName FROM Player WHERE HS > 500"
            ]
        },
        {
            "id": "task077-48e1931f94b44de4bf8762eeeb91aad7",
            "input": "find rows of Albums table whose Year equals 2010 and Year equals 0",
            "output": [
                "SELECT * FROM Albums WHERE Year = 0 AND Year = 2010"
            ]
        },
        {
            "id": "task077-5294905d80d546b7a986e880665d77c5",
            "input": "Step 1: find the Player's player_api_id of Player table for which height greater than 180.\nStep 2: find the Player_Attributes's player_api_id of Player_Attributes table for which overall_rating less than 85.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > 180 INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < 85"
            ]
        },
        {
            "id": "task077-93b9071bb30042ff9608ce4d0cc66e33",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MIN_SALARY less than 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MIN_SALARY < 12000"
            ]
        },
        {
            "id": "task077-4c2f3943e6c941b88b489847ea6f4025",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Undergoes table.\nStep 2: find each value of Physician in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT T1.Name , Count ( * ) FROM Physician AS T1 JOIN Undergoes AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician"
            ]
        },
        {
            "id": "task077-587e18303eca4e97b393d225b7248352",
            "input": "Step 1: find the student_id of Student_Course_Attendance table.\nStep 2: find the Students's student_id of Students table whose Students's student_id not one of the results of step 1",
            "output": [
                "SELECT T1.student_id FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )"
            ]
        },
        {
            "id": "task077-68886a8130614a5eaa18390c8f569a25",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average duration in the results of step 1 whose mean_visibility_miles greater than 50",
            "output": [
                "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_visibility_miles > 50"
            ]
        },
        {
            "id": "task077-53317ec7ed504f45bf2905ac0794f47e",
            "input": "Step 1: find the number of rows of each value of Season in match_season table.\nStep 2: find College of match_season table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results",
            "output": [
                "SELECT College FROM match_season GROUP BY Season ORDER BY Count ( * ) Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-a8d0e276befd42e684f0ba7c7c962085",
            "input": "Step 1: find cName of College table whose enr greater than 13000 and state equals AZ.\nStep 2: find cName of College table whose enr greater than 15000 and state equals LA.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT cName FROM College WHERE enr > 13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\""
            ]
        },
        {
            "id": "task077-f2cbd631472b413989ac4162f6d232e1",
            "input": "find the average Famous_Release_date in artist table",
            "output": [
                "SELECT Avg ( Famous_Release_date ) FROM artist"
            ]
        },
        {
            "id": "task077-1c9bb973bd774a82a1bffd958f763e4d",
            "input": "find the rows of jobs table for which MIN_SALARY less than 2500",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY < 2500"
            ]
        },
        {
            "id": "task077-c89f915ea1e4426db290ecc67a89f5d7",
            "input": "Step 1: For each row in employees table, find the corresponding rows in job_history table.\nStep 2: find employees's EMPLOYEE_ID, END_DATE of the results of step 1 whose SALARY equals 24000",
            "output": [
                "SELECT T1.EMPLOYEE_ID , T2.END_DATE FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T1.SALARY = 24000"
            ]
        },
        {
            "id": "task077-90cf58040bcc443f94de86fee6edfb60",
            "input": "find the date of weather table for which min_sea_level_pressure_inches greater than 85",
            "output": [
                "SELECT date FROM weather WHERE min_sea_level_pressure_inches > 85"
            ]
        },
        {
            "id": "task077-351c949d18f14486a164320a9d98bbd4",
            "input": "Step 1: For each row in station table, find the corresponding rows in trip table.\nStep 2: find name, subscription_type, duration of the results of step 1",
            "output": [
                "SELECT T1.name , T2.subscription_type , T2.duration FROM station AS T1 JOIN trip AS T2"
            ]
        },
        {
            "id": "task077-42c98628aa8b4d7aab2cdb25f7466837",
            "input": "find the number of different payment_method_code in Invoices table",
            "output": [
                "SELECT Count ( DISTINCT payment_method_code ) FROM Invoices"
            ]
        },
        {
            "id": "task077-1fd31fe928c2466dbb25424cedc1fbe2",
            "input": "find the protein_name, protein_name of protein table",
            "output": [
                "SELECT protein_name , protein_name FROM protein"
            ]
        },
        {
            "id": "task077-4ed6413c55324a4cba97341eca8a70e7",
            "input": "find each value of bedType in Rooms table along with the average maxOccupancy of the corresponding rows to each value",
            "output": [
                "SELECT bedType , Avg ( maxOccupancy ) FROM Rooms GROUP BY bedType"
            ]
        },
        {
            "id": "task077-0c18962df9684e7cae37a70f4b28268a",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose preferred_genre equals modern or genre_is equals english",
            "output": [
                "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = \"modern\" OR T2.genre_is = \"english\""
            ]
        },
        {
            "id": "task077-d638353809834963b059f79d108e7e3b",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Has_Allergy table.\nStep 2: find without repetition Fname, city_code of the results of step 1 whose Sex equals Milk or Allergy equals Cat",
            "output": [
                "SELECT DISTINCT T2.Fname , T2.city_code FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = \"Milk\" OR T1.Allergy = \"Cat\""
            ]
        },
        {
            "id": "task077-f284d3ce2cae42d99abed79ad48dc130",
            "input": "Step 1: For each row in Addresses table, find the corresponding rows in Clients table.\nStep 2: find the number of rows of each value of Clients's Address_ID in the results of step 1.\nStep 3: find City_Town in the results of step 1 whose corresponding value in step 2 is greater than or equals 1.\nStep 4: find the City_Town of Addresses table.\nStep 5: show the rows that are in the results of step 3 but not in the results of step 4",
            "output": [
                "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) > = 1 EXCEPT SELECT T1.City_Town FROM Addresses AS T1"
            ]
        },
        {
            "id": "task077-96c90a1ddb6c485793328a33a08dfe80",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the max_temperature_f of weather table for which max_sea_level_pressure_inches less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < 50"
            ]
        },
        {
            "id": "task077-cde85caa519c4718aeb9c0e0542b4311",
            "input": "find rows of employees table whose SALARY greater than or equals 8000 and SALARY less than or equals 12000",
            "output": [
                "SELECT * FROM employees WHERE SALARY > = 12000 AND SALARY < = 8000"
            ]
        },
        {
            "id": "task077-3cf35f1edc15403fa55320473a074293",
            "input": "Step 1: find the School_ID of basketball_match table for which ACC_Road equals 8–0.\nStep 2: find the number of rows in university table whose School_ID not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = \"8–0\" )"
            ]
        },
        {
            "id": "task077-53926ced0ab043ecb1deb2e6aef1e1fa",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Contact_Channels table.\nStep 2: find customer_name of the results of step 1 with largest value of active_to_date",
            "output": [
                "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.active_to_date Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-179adbc8970044b5b49ba17eba69607f",
            "input": "find the asset_details of Assets table ordered ascending by asset_acquired_date",
            "output": [
                "SELECT asset_details FROM Assets ORDER BY asset_acquired_date Asc"
            ]
        },
        {
            "id": "task077-210d76fe24b94e74bb1599fbb6491621",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY less than 8000 or MIN_SALARY greater than 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < 8000 OR T1.MIN_SALARY > 12000"
            ]
        },
        {
            "id": "task077-ca1855cbed5b456295dc60e4f42498be",
            "input": "find the College of match_season table for which Player contains English",
            "output": [
                "SELECT College FROM match_season WHERE Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-afca033acba44ca7917947a74fb1715d",
            "input": "find without repetition the Season of match_season table",
            "output": [
                "SELECT DISTINCT Season FROM match_season"
            ]
        },
        {
            "id": "task077-f3d3f395e13b48368a7c64a67aef3a46",
            "input": "Step 1: For each row in departments table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or DEPARTMENT_NAME equals null",
            "output": [
                "SELECT * FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.SALARY > 8000 OR T1.DEPARTMENT_NAME = \"null\""
            ]
        },
        {
            "id": "task077-142abde9e2f34b59a0702a02abf0460f",
            "input": "find the product_name, typical_selling_price of Products table for which product_description equals yellow",
            "output": [
                "SELECT product_name , typical_selling_price FROM Products WHERE product_description = \"yellow\""
            ]
        },
        {
            "id": "task077-b51f10f1a7274460882b59fffb23589d",
            "input": "find the Employee_Name, Date_of_Birth of Employees table",
            "output": [
                "SELECT Employee_Name , Date_of_Birth FROM Employees"
            ]
        },
        {
            "id": "task077-dd6eff96ef61453b9b274f997340abd4",
            "input": "find start_date of trip table whose duration greater than 60 and start_station_name equals Howard at 2nd",
            "output": [
                "SELECT start_date FROM trip WHERE duration > 60 AND start_station_name = \"Howard at 2nd\""
            ]
        },
        {
            "id": "task077-3900f8d0b2d24586bf7266a7ce081890",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_entry_name, catalog_publisher of the results of step 1 whose price_in_euros greater than 700",
            "output": [
                "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > 700"
            ]
        },
        {
            "id": "task077-4f17da05e40f47299fd830be1e26c8fb",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date of the results of step 1 whose min_dew_point_f greater than 85",
            "output": [
                "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_dew_point_f > 85"
            ]
        },
        {
            "id": "task077-12b5ca2ae56e4ab2b18e5a04df7ec075",
            "input": "find rows of employees table whose SALARY contains 8000 and SALARY less than or equals 12000",
            "output": [
                "SELECT * FROM employees WHERE SALARY LIKE 12000 AND SALARY < = 8000"
            ]
        },
        {
            "id": "task077-5e5d36163f1441cb933957ad3668cf3c",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Faculty's Building equals M and Faculty's Building equals NEB",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = \"NEB\" AND T1.Building = \"M\""
            ]
        },
        {
            "id": "task077-b76515927e6d40518321d0b2fff67afa",
            "input": "find the Candidate_ID, Consider_rate, Consider_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Candidate_ID , Consider_rate , Consider_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-db4fe406835a4da3ab14ce38bc7aa9d1",
            "input": "find JOB_TITLE, MIN_SALARY of jobs table whose MAX_SALARY greater than 12000 and MAX_SALARY less than or equals 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY > 18000 AND MAX_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-b6ffb5a1cd2e4c969466f04abf6d5ca4",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of ExaminationRoom in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.ExaminationRoom ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-abb35f41626540fe86c4a866d92a31d9",
            "input": "Step 1: find the average SALARY in employees table.\nStep 2: For each row in jobs table, find the corresponding rows in employees table.\nStep 3: find EMPLOYEE_ID in the results of step 2 whose MIN_SALARY greater than the results of step 1",
            "output": [
                "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )"
            ]
        },
        {
            "id": "task077-46fe91ab1b124d57995c7b45415b7d63",
            "input": "find the Name of Nurse table with largest value of Name",
            "output": [
                "SELECT Name FROM Nurse ORDER BY Name Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-32c029052bd54beb9bf7c52cf1467997",
            "input": "find the date of weather table for which precipitation_inches greater than 85",
            "output": [
                "SELECT date FROM weather WHERE precipitation_inches > 85"
            ]
        },
        {
            "id": "task077-3c26e6d6b3ab41bd9f3c0d22f9bda6b9",
            "input": "find JOB_TITLE, MIN_SALARY of jobs table whose MIN_SALARY contains 12000 and MAX_SALARY greater than 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE 12000 AND MAX_SALARY > 18000"
            ]
        },
        {
            "id": "task077-0de814d9692b4b2eaf65916afedbff26",
            "input": "Step 1: find the date, mean_temperature_f, min_temperature_f of weather table ordered descending by max_wind_Speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-7639aba381c2444995dd025cf0a230f3",
            "input": "Step 1: For each row in course table, find the corresponding rows in prereq table.\nStep 2: find the number of rows of each value of prereq's course_id in the results of step 1.\nStep 3: find title in the results of step 1 whose corresponding value in step 2 is greater than 1",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > 1"
            ]
        },
        {
            "id": "task077-687dbe9a968249c48e6bec85b3d9a97d",
            "input": "find the SALARY, SALARY of employees table",
            "output": [
                "SELECT SALARY , SALARY FROM employees"
            ]
        },
        {
            "id": "task077-63637bbe39674b5780cb43df64a48e7a",
            "input": "Step 1: find the Name of Products table.\nStep 2: find the Name of Manufacturers table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Products AS T1 EXCEPT SELECT T2.Name FROM Manufacturers AS T2"
            ]
        },
        {
            "id": "task077-d9e4008795774427968030ac37a7978c",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average duration in the results of step 1 whose mean_sea_level_pressure_inches greater than 50",
            "output": [
                "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > 50"
            ]
        },
        {
            "id": "task077-f74b3b877dec47e58773d27337afc91d",
            "input": "find the SALARY, HIRE_DATE of employees table for which LAST_NAME equals or between 2007-11-05 and 2009-07-05",
            "output": [
                "SELECT SALARY , HIRE_DATE FROM employees WHERE LAST_NAME BETWEEN \"2009-07-05\" AND \"2007-11-05\""
            ]
        },
        {
            "id": "task077-625cf94c21ee4f2591f405eb9de6ddeb",
            "input": "Step 1: find the minimum department_id in Staff_Department_Assignments table.\nStep 2: find the staff_id of Staff_Department_Assignments table whose date_assigned_to less than the results of step 1",
            "output": [
                "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( department_id ) FROM Staff_Department_Assignments )"
            ]
        },
        {
            "id": "task077-4eca76fdaee044e8bae7655d6dcee22a",
            "input": "find the Season of match_season table for which Player contains English",
            "output": [
                "SELECT Season FROM match_season WHERE Player LIKE \"English\""
            ]
        },
        {
            "id": "task077-b1a62b4372904804b5fd5613d9748b06",
            "input": "Step 1: find the number of rows of each value of LastName in teachers table.\nStep 2: find FirstName, LastName of teachers table with largest value in the results of step 1",
            "output": [
                "SELECT FirstName , LastName FROM teachers GROUP BY LastName ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-b50200e0141a49209f5eb6ece4e6eed5",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_name, catalog_name of the results of step 1 whose price_in_dollars greater than 700",
            "output": [
                "SELECT T1.catalog_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > 700"
            ]
        },
        {
            "id": "task077-5b4551334e2f4a5695af7d4c4eed4ee4",
            "input": "find the number of rows in budget table whose total_budget_percent_budgeted greater than 3000 or Year less than 2001",
            "output": [
                "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted > 3000 OR Year < 2001"
            ]
        },
        {
            "id": "task077-5a48b90e80c64f50bae952d12a774883",
            "input": "Step 1: find the Name of Products table.\nStep 2: find the Name of Products table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT Name FROM Products EXCEPT SELECT Name FROM Products"
            ]
        },
        {
            "id": "task077-897f93330036413689579a9ca1ee9a54",
            "input": "Step 1: For each row in Employees table, find the corresponding rows in Documents_to_be_Destroyed table.\nStep 2: find the number of rows of each value of Employee_ID in the results of step 1.\nStep 3: find Destroyed_by_Employee_ID in the results of step 1 whose corresponding value in step 2 is equals 1",
            "output": [
                "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = 1"
            ]
        },
        {
            "id": "task077-204cc0e62768410ab0d4100623335b2d",
            "input": "find the minimum low_temperature and the maximum high_temperature in weekly_weather table",
            "output": [
                "SELECT Min ( low_temperature ) , Max ( high_temperature ) FROM weekly_weather"
            ]
        },
        {
            "id": "task077-8f6f45efe2a54c9ca5ea6d3f9323829f",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the mean_sea_level_pressure_inches of weather table for which max_temperature_f less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_temperature_f < 50"
            ]
        },
        {
            "id": "task077-dccd6d71fada4376ab7ea502ded41a44",
            "input": "Step 1: find the number of rows in weather table whose min_sea_level_pressure_inches greater than 8.\nStep 2: find the max_sea_level_pressure_inches of weather table for which max_sea_level_pressure_inches less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_sea_level_pressure_inches > 8 INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < 50"
            ]
        },
        {
            "id": "task077-cf84af615bb7456dae71d7ae2798077d",
            "input": "find the name, id of station table",
            "output": [
                "SELECT name , id FROM station"
            ]
        },
        {
            "id": "task077-62d715672f03408888fa31369bae204c",
            "input": "find the product_name of Products table for which product_description equals yellow",
            "output": [
                "SELECT product_name FROM Products WHERE product_description = \"yellow\""
            ]
        },
        {
            "id": "task077-73ac357ec825470e934680023ca4ddd9",
            "input": "Step 1: find the date, mean_temperature_f, max_dew_point_f of weather table ordered descending by mean_wind_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-129307ab02534588a96cde01689be865",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find address_line_1 of the results of step 1 whose course_name equals database or course_name equals database",
            "output": [
                "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"database\" OR T2.course_name = \"database\""
            ]
        },
        {
            "id": "task077-00de3c34a171444c9db4e5bd4673aa4f",
            "input": "find the state, acc_type, no_of_loans of customer table for which cust_name equals 0",
            "output": [
                "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = 0"
            ]
        },
        {
            "id": "task077-a43862a8e05145baaf3a62c2fa19f5b1",
            "input": "Step 1: find the average budget in department table.\nStep 2: For each row in department table, find the corresponding rows in student table.\nStep 3: find department's dept_name, student's dept_name in the results of step 2 whose budget greater than the results of step 1",
            "output": [
                "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )"
            ]
        },
        {
            "id": "task077-0a5e8573100d41408b335759e6c4c7ad",
            "input": "Step 1: For each row in Maintenance_Contracts table, find the corresponding rows in Assets table.\nStep 2: find asset_details of the results of step 1 ordered ascending by contract_start_date",
            "output": [
                "SELECT T2.asset_details FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id ORDER BY T1.contract_start_date Asc"
            ]
        },
        {
            "id": "task077-deebc10f1a194a489056596ad2d91a0a",
            "input": "find the title, credits, credits of course table ordered ascending by title",
            "output": [
                "SELECT title , credits , credits FROM course ORDER BY title Asc"
            ]
        },
        {
            "id": "task077-88d7b5a9da8949e2b047fadca212d9dc",
            "input": "find artist_name of song table whose languages equals modern or genre_is equals english",
            "output": [
                "SELECT artist_name FROM song WHERE languages = \"modern\" OR genre_is = \"english\""
            ]
        },
        {
            "id": "task077-ddcd62cff2e44d04a3108d887e632bee",
            "input": "Step 1: For each row in Asset_Parts table, find corresponding rows in Parts table and in Assets table.\nStep 2: find chargeable_amount of the results of step 1 ordered ascending by other_asset_details",
            "output": [
                "SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.other_asset_details Asc"
            ]
        },
        {
            "id": "task077-4360b59e7a9d43e3b1bc34ecfaa77521",
            "input": "Step 1: find the Team of player table ordered ascending by Age.\nStep 2: only show the first 5 rows of the results",
            "output": [
                "SELECT Team FROM player ORDER BY Age Asc LIMIT 5"
            ]
        },
        {
            "id": "task077-1e528b4fa9a64c97b8a0d344e0ba47dc",
            "input": "Step 1: find the average SALARY in employees table.\nStep 2: For each row in jobs table, find the corresponding rows in employees table.\nStep 3: find EMPLOYEE_ID in the results of step 2 whose MAX_SALARY greater than the results of step 1",
            "output": [
                "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )"
            ]
        },
        {
            "id": "task077-55b8de2876d34a2b8da7bd3e309beb1f",
            "input": "Step 1: For each row in university table, find the corresponding rows in basketball_match table.\nStep 2: find Location, Location of the results of step 1 whose Team_Name equals Clemson",
            "output": [
                "SELECT T2.Location , T2.Location FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = \"Clemson\""
            ]
        },
        {
            "id": "task077-fca1fd6aa5ae4b1b8656244b93db6e16",
            "input": "find the problem_id, log_entry_date of Problem_Log table for which problem_log_id equals 10",
            "output": [
                "SELECT problem_id , log_entry_date FROM Problem_Log WHERE problem_log_id = 10"
            ]
        },
        {
            "id": "task077-62885c8d66b948b1b0e90e40417c35be",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose preferred_genre equals modern or preferred_genre equals english",
            "output": [
                "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = \"english\" OR T1.preferred_genre = \"modern\""
            ]
        },
        {
            "id": "task077-41e6ce850cc2432db44dba57d2874895",
            "input": "Step 1: For each row in School table, find corresponding rows in budget table and in endowment table.\nStep 2: find Invested, donator_name of the results of step 1 with largest value of amount",
            "output": [
                "SELECT T2.Invested , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5e7b8bc29f484f6e9accb96372fc97ce",
            "input": "find without repetition the country of circuits table ordered ascending by country",
            "output": [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc"
            ]
        },
        {
            "id": "task077-d1d2d3b305d34bfbbbe20f7b727c1c32",
            "input": "find the mean_temperature_f of weather table for which zip_code equals 3",
            "output": [
                "SELECT mean_temperature_f FROM weather WHERE zip_code = 3"
            ]
        },
        {
            "id": "task077-e203738a5ddd4670a7d734248a774e13",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_entry_name, catalog_name of the results of step 1 whose price_in_euros greater than 700",
            "output": [
                "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > 700"
            ]
        },
        {
            "id": "task077-b884cd952d37475f84a604d25b281845",
            "input": "Step 1: find the number of rows of each value of customer_id in Customers table.\nStep 2: find customer_name, customer_address in Customers table whose corresponding value in step 1 is equals New.\nStep 3: find customer_name, customer_email in Customers table whose corresponding value in step 1 is less than Pending.\nStep 4: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = \"New\" INTERSECT SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) < \"Pending\""
            ]
        },
        {
            "id": "task077-4e64642de0404495b89ea3365f7d4192",
            "input": "Step 1: find the Winery of wine table for which Year less than Brander.\nStep 2: find the Name of wine table whose Year less than the results of step 1",
            "output": [
                "SELECT Name FROM wine WHERE Year < ( SELECT Winery FROM wine WHERE Year < \"Brander\" )"
            ]
        },
        {
            "id": "task077-e4c0b29c306c449c9014de1c15b134fa",
            "input": "find zip_code of weather table whose min_dew_point_f greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT zip_code FROM weather WHERE min_dew_point_f > 80 OR min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-e2ba45bfd8fe45e0a4ef284f48354b3c",
            "input": "find EMPLOYEE_ID of employees table whose HIRE_DATE greater than 1987-09-07 and HIRE_DATE greater than 1987-06-17",
            "output": [
                "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > \"1987-06-17\" AND HIRE_DATE > \"1987-09-07\""
            ]
        },
        {
            "id": "task077-9169796c0cbe4e17839b27c224714013",
            "input": "find the FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID of employees table for which FIRST_NAME not equals M",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME ! = \"M\""
            ]
        },
        {
            "id": "task077-f4a0500ec4c54597979223c335719338",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport_id in the results of step 1.\nStep 3: find airport's id, name, name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T1.name FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a20a428feb414061ab407e152e3c01e9",
            "input": "Step 1: For each row in station table, find the corresponding rows in weather table.\nStep 2: find zip_code of the results of step 1 whose long greater than 80 or min_humidity greater than 57",
            "output": [
                "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > 80 OR T2.min_humidity > 57"
            ]
        },
        {
            "id": "task077-39affe7b650f4e189c8b0a5118d523e4",
            "input": "Step 1: find the date, mean_temperature_f, min_dew_point_f of weather table ordered descending by max_wind_Speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-b932e47d7c234bf98602058d48f5ba37",
            "input": "Step 1: find the date, mean_temperature_f, max_temperature_f of weather table ordered descending by mean_wind_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-7b75b4834767417489a4d1b7218aabff",
            "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: find College's cName of the results of step 1 whose pPos equals goalie.\nStep 3: For each row in Player table, find the corresponding rows in Tryout table.\nStep 4: find Tryout's cName of the results of step 3 whose HS equals 1200.\nStep 5: show the rows that are in the results of step 2 but not in the results of step 4",
            "output": [
                "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = \"goalie\" EXCEPT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = 1200"
            ]
        },
        {
            "id": "task077-5fcbbd86b44349ffb45f47ab2de31e80",
            "input": "Step 1: For each row in Customer_Orders table, find the corresponding rows in Invoices table.\nStep 2: find Order_Date of the results of step 1 whose Order_Quantity equals 1",
            "output": [
                "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1"
            ]
        },
        {
            "id": "task077-a2e9162306fe47dd9a2623686fbc137f",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport_id in the results of step 1.\nStep 3: find airport's id, name, airport_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-89665393953946b19b81799762589c04",
            "input": "Step 1: For each row in management table, find corresponding rows in department table and in head table.\nStep 2: find Name, born_state, age of the results of step 1 ordered ascending by age",
            "output": [
                "SELECT T1.Name , T2.born_state , T2.age FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc"
            ]
        },
        {
            "id": "task077-195abb49c499406da87c52feb17d6fa5",
            "input": "Step 1: For each row in Student_Course_Enrolment table, find corresponding rows in Students table and in Student_Tests_Taken table.\nStep 2: find date_of_latest_logon of the results of step 1 whose test_result equals Fail",
            "output": [
                "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = \"Fail\""
            ]
        },
        {
            "id": "task077-d70871650498445f9a050e6af5ff3b47",
            "input": "find the average balance in SAVINGS table",
            "output": [
                "SELECT Avg ( balance ) FROM SAVINGS"
            ]
        },
        {
            "id": "task077-133d5e0fb62644d1ba56e39911c9c424",
            "input": "find the Employee_ID of Employees table for which Role_Code equals HR",
            "output": [
                "SELECT Employee_ID FROM Employees WHERE Role_Code = \"HR\""
            ]
        },
        {
            "id": "task077-513f5db73ea74d449832c14b64bee5db",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Sex equals M and Faculty's Building equals NEB.\nStep 3: find DName, Lname of the results of step 1 whose Department's Building equals M and Department's Building equals NEB.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = \"M\" AND T1.Building = \"NEB\" INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"NEB\" AND T2.Building = \"M\""
            ]
        },
        {
            "id": "task077-7e473caffa2f4e638d5d6c5adc9690d5",
            "input": "find the state of College table for which enr less than 18000",
            "output": [
                "SELECT state FROM College WHERE enr < 18000"
            ]
        },
        {
            "id": "task077-29d97af550f64f96bf6bcfab18af3918",
            "input": "Step 1: find the number of rows of each value of Classroom in list table.\nStep 2: find FirstName, LastName of list table with largest value in the results of step 1",
            "output": [
                "SELECT FirstName , LastName FROM list GROUP BY Classroom ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8cfef70563db4bf482f7e3adafa1aeb7",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport's id in the results of step 1.\nStep 3: find airport's id, name, airport_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-0ba48cbbf09f4caca579eb02c3f888d1",
            "input": "find zip_code of weather table whose precipitation_inches greater than 80 or mean_sea_level_pressure_inches greater than 30.02",
            "output": [
                "SELECT zip_code FROM weather WHERE precipitation_inches > 80 OR mean_sea_level_pressure_inches > 30.02"
            ]
        },
        {
            "id": "task077-3711d6fdf98f43bd8d0db393656c657d",
            "input": "Step 1: find the average SAVINGS's balance in SAVINGS table.\nStep 2: For each row in ACCOUNTS table, find the corresponding rows in CHECKING table.\nStep 3: find name in the results of step 2 whose CHECKING's balance less than the results of step 1",
            "output": [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )"
            ]
        },
        {
            "id": "task077-846e4f7f968645d693fe50ed9fdc7c3a",
            "input": "Step 1: For each row in albums table, find the corresponding rows in tracks table.\nStep 2: find the summation of milliseconds of each value of album_id in the results of step 1.\nStep 3: find title in the results of step 1 whose corresponding value in step 2 is greater than 10",
            "output": [
                "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T2.album_id HAVING Sum ( T2.milliseconds ) > 10"
            ]
        },
        {
            "id": "task077-7f0b7582505e42ac83aa68e9c3cd36e2",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 2: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 3: find product_name, other_characteristic_details, characteristic_data_type of the results of step 2.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3",
            "output": [
                "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 EXCEPT SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id"
            ]
        },
        {
            "id": "task077-96c345192d514d808f25f590a62a35f8",
            "input": "Step 1: For each row in artist table, find corresponding rows in files table and in song table.\nStep 2: find artist's artist_name, files's artist_name of the results of step 1 whose song_name contains love",
            "output": [
                "SELECT T1.artist_name , T2.artist_name FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name JOIN song AS T3 ON T1.artist_name = T3.artist_name WHERE T3.song_name LIKE \"love\""
            ]
        },
        {
            "id": "task077-c33f9fa57dff4e72bcc159909134a275",
            "input": "find the maximum Unsure_rate in candidate table",
            "output": [
                "SELECT Max ( Unsure_rate ) FROM candidate"
            ]
        },
        {
            "id": "task077-8a52b4627b75486385492d802dff046c",
            "input": "Step 1: find the rows of jobs table for which MAX_SALARY greater than 40000.\nStep 2: find the JOB_TITLE of jobs table for which MAX_SALARY greater than 12000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT * FROM jobs WHERE MAX_SALARY > 40000 INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-ed2032f4afa840958971c6fb205ad86e",
            "input": "find the MANAGER_ID of employees table",
            "output": [
                "SELECT MANAGER_ID FROM employees"
            ]
        },
        {
            "id": "task077-0a8e3d173a104475b3e57ce751ebfe70",
            "input": "Step 1: For each row in people table, find the corresponding rows in candidate table.\nStep 2: find Name, Sex of the results of step 1 with largest value of Consider_rate",
            "output": [
                "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Consider_rate Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a94a1501ddb54f3192538f2fe23a6594",
            "input": "find rows of employees table whose SALARY greater than 8000 or SALARY contains 12000",
            "output": [
                "SELECT * FROM employees WHERE SALARY > 12000 OR SALARY LIKE 8000"
            ]
        },
        {
            "id": "task077-9056fee161c34b23b47d86b87e4b7613",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the min_temperature_f of weather table for which max_temperature_f less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT min_temperature_f FROM weather WHERE max_temperature_f < 50"
            ]
        },
        {
            "id": "task077-8f3422ac7a7348e29c21dc0c045abc00",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Department's Building equals Mergenthaler.\nStep 3: find DName, Lname of the results of step 1 whose Sex equals M and Faculty's Building equals NEB.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"Mergenthaler\" INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = \"M\" AND T1.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-51f983af52e940238e1d57416d1f0ad6",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find the summation of age of each value of friend in the results of step 1.\nStep 3: find Person's name in the results of step 1 whose corresponding value in step 2 is greater than or equals engineer",
            "output": [
                "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = \"engineer\""
            ]
        },
        {
            "id": "task077-354eae2398ce48f1894c183feab6fc7f",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Voting_record table.\nStep 2: find without repetition Fname, Age of the results of step 1 whose President_Vote equals 18",
            "output": [
                "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 18"
            ]
        },
        {
            "id": "task077-177b8641b3604f22b3a73bf33e1a4930",
            "input": "Step 1: find the Player's player_api_id of Player table for which height greater than 180.\nStep 2: For each row in Player table, find the corresponding rows in Player_Attributes table.\nStep 3: find Player_Attributes's player_api_id of the results of step 2 whose height less than 85.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > 180 INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < 85"
            ]
        },
        {
            "id": "task077-0e548be0cef647e9b807a60c34b12bb5",
            "input": "Step 1: For each row in country table, find the corresponding rows in match_season table.\nStep 2: find Season, Country_name, Country_name of the results of step 1",
            "output": [
                "SELECT T2.Season , T1.Country_name , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country"
            ]
        },
        {
            "id": "task077-d72da4a79e4c430b8ecf1d6298125620",
            "input": "find the average Silver and the maximum Gold in club_rank table",
            "output": [
                "SELECT Avg ( Silver ) , Max ( Gold ) FROM club_rank"
            ]
        },
        {
            "id": "task077-0d0a0780d90048428d75796b9d87885d",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Orders table.\nStep 2: find without repetition customer_name of the results of step 1 ordered ascending by Customer_Orders's customer_id",
            "output": [
                "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_id Asc"
            ]
        },
        {
            "id": "task077-bc97251c07ca44dd88e0c7fafe5c65fb",
            "input": "find the product_name, typical_buying_price, typical_selling_price of Products table for which product_description equals yellow",
            "output": [
                "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = \"yellow\""
            ]
        },
        {
            "id": "task077-be01e1f8b3ef461f99dacdecc44efb17",
            "input": "Step 1: find the name of enzyme table.\nStep 2: find the number of rows in enzyme table whose id not one of the results of step 1",
            "output": [
                "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT name FROM enzyme )"
            ]
        },
        {
            "id": "task077-63d253f009ab447cbe8bd1ac1beb1540",
            "input": "find the Name, Name of driver table",
            "output": [
                "SELECT Name , Name FROM driver"
            ]
        },
        {
            "id": "task077-672f6e30c0944cbbab39e999893ffebc",
            "input": "find the Issue_Date of volume table",
            "output": [
                "SELECT Issue_Date FROM volume"
            ]
        },
        {
            "id": "task077-6e39eae6ce7d4530a0823694090d24cf",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table for which characteristic_name equals slow.\nStep 2: For each row in Characteristics table, find the corresponding rows in Product_Characteristics table.\nStep 3: find the number of rows of each value of Product_Characteristics's characteristic_id in the results of step 2.\nStep 4: find characteristic_name, other_characteristic_details, characteristic_data_type in the results of step 3 whose corresponding value in step 3 is equals 1.\nStep 5: show the rows that are in the results of step 1 but not in the results of step 4",
            "output": [
                "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 WHERE T1.characteristic_name = \"slow\" EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = 1"
            ]
        },
        {
            "id": "task077-2ad12200f3ae4bb38ffbd303e5bb2779",
            "input": "find Lieutenant_Governor of party table whose Comptroller equals Democratic and Comptroller equals Carl McCall",
            "output": [
                "SELECT Lieutenant_Governor FROM party WHERE Comptroller = \"Carl McCall\" AND Comptroller = \"Democratic\""
            ]
        },
        {
            "id": "task077-a321e1b1f3fb4483a54f7b95e99a15cc",
            "input": "Step 1: For each row in Asset_Parts table, find corresponding rows in Parts table and in Assets table.\nStep 2: find asset_details of the results of step 1 ordered ascending by chargeable_amount",
            "output": [
                "SELECT T2.asset_details FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T1.chargeable_amount Asc"
            ]
        },
        {
            "id": "task077-81917937a16b4b8ca16eba40a2f6e27b",
            "input": "find the zip_code of weather table for which zip_code equals 3",
            "output": [
                "SELECT zip_code FROM weather WHERE zip_code = 3"
            ]
        },
        {
            "id": "task077-360efa7daba34be38d2f51d4c46229fc",
            "input": "Step 1: For each row in Customers table, find the corresponding rows in Customer_Events table.\nStep 2: find Customers's customer_id, date_moved_in, date_moved_in of the results of step 1",
            "output": [
                "SELECT T1.customer_id , T2.date_moved_in , T2.date_moved_in FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id"
            ]
        },
        {
            "id": "task077-d3cddc32443e44f08ae1aac26dc7d6a0",
            "input": "Step 1: find the StuID of Student table.\nStep 2: find the Sex of Student table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT StuID FROM Student EXCEPT SELECT Sex FROM Student"
            ]
        },
        {
            "id": "task077-060c49655d1d48728636ff4fbeac9a29",
            "input": "find the SALARY, HIRE_DATE of employees table for which HIRE_DATE equals or between 2007-11-05 and 2009-07-05",
            "output": [
                "SELECT SALARY , HIRE_DATE FROM employees WHERE HIRE_DATE BETWEEN \"2009-07-05\" AND \"2007-11-05\""
            ]
        },
        {
            "id": "task077-7c939730cbd9414caee7de3a61f68753",
            "input": "find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics"
            ]
        },
        {
            "id": "task077-a3633d80023b40e8b6a7ae9bedda409b",
            "input": "Step 1: find the number of rows of each value of Headquarters in company table.\nStep 2: find Headquarters in company table whose corresponding value in step 1 is greater than or equals 2",
            "output": [
                "SELECT Headquarters FROM company GROUP BY Headquarters HAVING Count ( * ) > = 2"
            ]
        },
        {
            "id": "task077-0576709a31854c2a92ba694d06f54981",
            "input": "find address_content of Addresses table whose address_content equals Gleasonmouth and state_province_county equals Arizona",
            "output": [
                "SELECT address_content FROM Addresses WHERE address_content = \"Gleasonmouth\" AND state_province_county = \"Arizona\""
            ]
        },
        {
            "id": "task077-b806cd074c264ae7921103d906a59ae7",
            "input": "Step 1: For each row in Ref_Document_Types table, find the corresponding rows in Documents table.\nStep 2: find Document_Type_Name, Document_Type_Description, Document_Description of the results of step 1 whose Document_Name equals Noel CV or Document_Name equals King Book",
            "output": [
                "SELECT T1.Document_Type_Name , T1.Document_Type_Description , T2.Document_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = \"King Book\" OR T2.Document_Name = \"Noel CV\""
            ]
        },
        {
            "id": "task077-95c4aa248ca64da8b278eacfe94eec47",
            "input": "Step 1: For each row in Residents table, find corresponding rows in Residents_Services table and in Customer_Events table.\nStep 2: find Customer_Event_ID, Customer_Events's date_moved_in, date_requested of the results of step 1",
            "output": [
                "SELECT T3.Customer_Event_ID , T3.date_moved_in , T2.date_requested FROM Residents AS T1 JOIN Residents_Services AS T2 ON T2.date_moved_in = T1.date_moved_in JOIN Customer_Events AS T3 ON T1.date_moved_in = T3.date_moved_in"
            ]
        },
        {
            "id": "task077-43ca13b6c6b04297b2ef8294d0316aba",
            "input": "Step 1: find the number of rows of each value of student_id in Student_Course_Attendance table.\nStep 2: find student_id in Student_Course_Attendance table whose corresponding value in step 1 is greater than or equals 1",
            "output": [
                "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id HAVING Count ( * ) > = 1"
            ]
        },
        {
            "id": "task077-ad1d09764427419289bcc0d208b0eff6",
            "input": "Step 1: For each row in city table, find the corresponding rows in address table.\nStep 2: find the number of rows of each value of address's city_id in the results of step 1.\nStep 3: find district, city, address's city_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.district , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-6e516cd268ba49be8402999e6dd2e7db",
            "input": "Step 1: For each row in School table, find the corresponding rows in budget table.\nStep 2: find School_name, Budgeted, total_budget_percent_budgeted of the results of step 1 whose Year greater than or equals 2002",
            "output": [
                "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_budgeted FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = 2002"
            ]
        },
        {
            "id": "task077-8c0c4adab22f44829e0a9317b4bc3fff",
            "input": "find the maximum start_date in trip table",
            "output": [
                "SELECT Max ( start_date ) FROM trip"
            ]
        },
        {
            "id": "task077-dd1f0975ae9149d69979d9cdcd8b5af0",
            "input": "find the number of rows in Dorm table whose gender equals M and gender equals X",
            "output": [
                "SELECT Count ( * ) FROM Dorm WHERE gender = \"X\" AND gender = \"M\""
            ]
        },
        {
            "id": "task077-22653123ac84410eb06ab769b846532e",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_name, height of the results of step 1 whose price_in_dollars greater than 700",
            "output": [
                "SELECT T1.catalog_name , T3.height FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > 700"
            ]
        },
        {
            "id": "task077-2ef9e09b413a4dab9db8e3c7e7a732c4",
            "input": "Step 1: find the average min_visibility_miles of each value of zip_code in weather table.\nStep 2: find zip_code in weather table whose corresponding value in step 1 is less than 10",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) < 10"
            ]
        },
        {
            "id": "task077-f2e19a983ffa48be8a0b4e8968c7d3b1",
            "input": "find the Date, Consider_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Date , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-8a1be2463403486ea9e424531079477c",
            "input": "Step 1: find the cName of Tryout table for which pPos equals mid.\nStep 2: For each row in Player table, find the corresponding rows in Tryout table.\nStep 3: find cName of the results of step 2 whose HS equals 1200.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.cName FROM Tryout AS T1 WHERE T1.pPos = \"mid\" INTERSECT SELECT T1.cName FROM Player AS T2 JOIN Tryout AS T1 ON T2.pID = T1.pID WHERE T2.HS = 1200"
            ]
        },
        {
            "id": "task077-5c1587a1c96b46c0a824190c67003270",
            "input": "Step 1: find the rows of Activity table.\nStep 2: find the Advisor of Student table.\nStep 3: show the rows that are in any of the results of step 1 or the results of step 2",
            "output": [
                "SELECT * FROM Activity AS T1 UNION SELECT T2.Advisor FROM Student AS T2"
            ]
        },
        {
            "id": "task077-18c322b11f324a8983186b51779666f2",
            "input": "Step 1: For each row in Nurse table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of Patient in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Patient ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-01e22b68836641e385cc2af3789595f7",
            "input": "Step 1: For each row in station table, find the corresponding rows in weather table.\nStep 2: find zip_code of the results of step 1 whose lat greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.lat > 80 OR T2.min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-ecdceca0317c42e2a1ca405dc0541748",
            "input": "find each value of Team in machine table along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , Team FROM machine GROUP BY Team"
            ]
        },
        {
            "id": "task077-bd182a2c3eda49ad9c82fbd797e4a048",
            "input": "find without repetition the service_type_code of Services table for which service_details equals Denesik and Sons Party",
            "output": [
                "SELECT DISTINCT service_type_code FROM Services WHERE service_details = \"Denesik and Sons Party\""
            ]
        },
        {
            "id": "task077-d5e73e5dfcda4a48bf404bc68c936b7c",
            "input": "Step 1: For each row in Ref_Document_Types table, find the corresponding rows in Documents table.\nStep 2: find Document_Type_Name, Document_Name, Document_Type_Description of the results of step 1",
            "output": [
                "SELECT T1.Document_Type_Name , T2.Document_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code"
            ]
        },
        {
            "id": "task077-46c767c54e3b4681a01b694a831980ce",
            "input": "Step 1: For each row in routes table, find corresponding rows in airports table and in airlines table.\nStep 2: find the number of rows of each value of airports's country in the results of step 1.\nStep 3: find airlines's country of the results of step 1 with largest value in the results of step 2",
            "output": [
                "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-42e6b80ea9be469b876f2f94d63b2751",
            "input": "Step 1: For each row in School table, find the corresponding rows in budget table.\nStep 2: find School_name, Budgeted, Invested of the results of step 1 whose Year greater than 2002",
            "output": [
                "SELECT T1.School_name , T2.Budgeted , T2.Invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > 2002"
            ]
        },
        {
            "id": "task077-2f23e4dc2f014cf4a3387d80bdd5504b",
            "input": "find the School_name of School table",
            "output": [
                "SELECT School_name FROM School"
            ]
        },
        {
            "id": "task077-3b454940edb14179b0194ac56fe2398e",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID of the results of step 1 whose JOB_TITLE not equals M",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = \"M\""
            ]
        },
        {
            "id": "task077-c748a14446844ba1a873b722f0c11090",
            "input": "Step 1: find the channel's Owner of channel table for which channel's Name equals Morning.\nStep 2: For each row in program table, find the corresponding rows in broadcast table.\nStep 3: find program's Owner of the results of step 2 whose Time_of_day equals Night.\nStep 4: show the rows that are in both the results of step 1 and the results of step 3",
            "output": [
                "SELECT T1.Owner FROM channel AS T1 WHERE T1.Name = \"Morning\" INTERSECT SELECT T2.Owner FROM program AS T2 JOIN broadcast AS T3 ON T2.Program_ID = T3.Program_ID WHERE T3.Time_of_day = \"Night\""
            ]
        },
        {
            "id": "task077-e9f78d4571aa4d4c9e8cf2532d44962f",
            "input": "Step 1: for each value of School_ID in school table, calculate number of rows.\nStep 2: show each value of School_ID in school table along with the corresponding number of rows ordered descending by the results of step 1",
            "output": [
                "SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID ORDER BY Count ( * ) Desc"
            ]
        },
        {
            "id": "task077-d413a081e82a4e5791f431c7578fa5c0",
            "input": "Step 1: for each value of document_name in Documents table, calculate number of rows.\nStep 2: show each value of document_name in Documents table along with the corresponding average access_count with smallest value in the results of step 1",
            "output": [
                "SELECT access_count , Avg ( access_count ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-c523171638ec4c179ab900e474ae94ad",
            "input": "Step 1: For each row in culture_company table, find corresponding rows in book_club table and in movie table.\nStep 2: find Title, Author_or_Editor of the results of step 1 whose book_club's Year greater than 1989",
            "output": [
                "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > 1989"
            ]
        },
        {
            "id": "task077-31fd6dfae7c841a990433a85f7131757",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport's id in the results of step 1.\nStep 3: find airport's id, name, Date of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-8cf7a274361543f686690ca40d28bc4f",
            "input": "find the start_date of trip table for which duration greater than 60",
            "output": [
                "SELECT start_date FROM trip WHERE duration > 60"
            ]
        },
        {
            "id": "task077-2e5328feb71c43e98040a4c3366d19f0",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find the average Weeks_on_Top in the results of step 1 whose Artist equals 25 or Famous_Release_date equals November 2007",
            "output": [
                "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = 25 OR T1.Famous_Release_date = \"November 2007\""
            ]
        },
        {
            "id": "task077-3577a8a361184c7db3a3b3b75d1b0fd6",
            "input": "find the Music_Festival, Date_of_ceremony of music_festival table",
            "output": [
                "SELECT Music_Festival , Date_of_ceremony FROM music_festival"
            ]
        },
        {
            "id": "task077-261eefe0a00848dbbb6fc013efb55f94",
            "input": "Step 1: find the date, mean_temperature_f, min_temperature_f of weather table ordered descending by max_gust_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-80c73fe4a59244b1918c5cab6cd950ab",
            "input": "find the summation of Age in artist table",
            "output": [
                "SELECT Sum ( Age ) FROM artist"
            ]
        },
        {
            "id": "task077-eb55ad4ade4c48ecba3ab4c0d682a61c",
            "input": "Step 1: find the date, mean_temperature_f, max_temperature_f of weather table ordered descending by max_gust_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-f608e832da254529ae4d2151da28c662",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose genre_is equals modern or preferred_genre equals english",
            "output": [
                "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.genre_is = \"modern\" OR T1.preferred_genre = \"english\""
            ]
        },
        {
            "id": "task077-4af772c9386b4daa9a2ea6a5b1359045",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_entry_name, catalog_publisher of the results of step 1 whose price_in_dollars greater than 700",
            "output": [
                "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > 700"
            ]
        },
        {
            "id": "task077-67f4ecbe083c4fd3b691ceeede9e452f",
            "input": "find the catalog_name of Catalogs table for which date_of_publication greater than 8",
            "output": [
                "SELECT catalog_name FROM Catalogs WHERE date_of_publication > 8"
            ]
        },
        {
            "id": "task077-962544d36f3346a38a756d7a77d1f640",
            "input": "Step 1: For each row in election table, find corresponding rows in county table and in party table.\nStep 2: find Governor, County_name of the results of step 1",
            "output": [
                "SELECT T2.Governor , T1.County_name FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID"
            ]
        },
        {
            "id": "task077-5e6d642c93a548f3806361b8da5e111c",
            "input": "Step 1: find the Consider_rate of candidate table ordered descending by Unsure_rate.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT Consider_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-53a554f5321f4bbdb1babd1406564333",
            "input": "find the date of weather table for which mean_temperature_f greater than 85",
            "output": [
                "SELECT date FROM weather WHERE mean_temperature_f > 85"
            ]
        },
        {
            "id": "task077-f6753a92c08746b09dce778385dccd04",
            "input": "Step 1: For each row in Bookings table, find the corresponding rows in Payments table.\nStep 2: find the number of rows of each value of Payments's booking_id in the results of step 1.\nStep 3: find Bookings's booking_id, amount_paid of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.booking_id , T2.amount_paid FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5ebc1a0920e244398edecb2a748b6260",
            "input": "Step 1: For each row in volume table, find the corresponding rows in music_festival table.\nStep 2: find Music_Festival, Song of the results of step 1",
            "output": [
                "SELECT T2.Music_Festival , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume"
            ]
        },
        {
            "id": "task077-9e5949bdfe26435eacd4b88c60fe9574",
            "input": "Step 1: find the Musical_ID of actor table.\nStep 2: find the Name of actor table whose Name not one of the results of step 1",
            "output": [
                "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Musical_ID FROM actor )"
            ]
        },
        {
            "id": "task077-6f9c9000c2194ccca0eec83266e9487f",
            "input": "find School_name of School table whose Enrollment less than 10 or Enrollment greater than 495",
            "output": [
                "SELECT School_name FROM School WHERE Enrollment < 495 OR Enrollment > 10"
            ]
        },
        {
            "id": "task077-9b7df715acff4d9da54e221050a6997d",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the rows of weather table for which mean_sea_level_pressure_inches greater than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT * FROM weather WHERE mean_sea_level_pressure_inches > 50"
            ]
        },
        {
            "id": "task077-f1762c57bd2c451188802ac1db852e9e",
            "input": "find the average agility in Player_Attributes table",
            "output": [
                "SELECT Avg ( agility ) FROM Player_Attributes"
            ]
        },
        {
            "id": "task077-17fc9d34e66a46f4ae75dac72db855df",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find trip's zip_code of the results of step 1 whose min_sea_level_pressure_inches greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > 29.97 OR T2.min_sea_level_pressure_inches > 80"
            ]
        },
        {
            "id": "task077-526d39e06fa14d558b44eb8e0f3b2e22",
            "input": "Step 1: For each row in Member_of table, find corresponding rows in Faculty table and in Department table.\nStep 2: find DName, Lname of the results of step 1 whose Sex equals M and Department's Building equals NEB",
            "output": [
                "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = \"M\" AND T2.Building = \"NEB\""
            ]
        },
        {
            "id": "task077-9c2d50c95475451ba27511306155f24e",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_completion, date_of_completion of the results of step 1 whose family_name equals Zieme and personal_name equals Bernie",
            "output": [
                "SELECT T2.date_of_completion , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = \"Zieme\" AND T1.personal_name = \"Bernie\""
            ]
        },
        {
            "id": "task077-9acd942e584c44b1a92205d229258f48",
            "input": "Step 1: For each row in ACCOUNTS table, find the corresponding rows in SAVINGS table.\nStep 2: find name, name of the results of step 1 with smallest value of balance",
            "output": [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-7e38471571004750ac01a7950297f24f",
            "input": "find the asset_details of Assets table ordered ascending by asset_details",
            "output": [
                "SELECT asset_details FROM Assets ORDER BY asset_details Asc"
            ]
        },
        {
            "id": "task077-905a77f076ca407cbbb285fb85e56502",
            "input": "Step 1: For each row in Things table, find the corresponding rows in Customer_Events table.\nStep 2: find Customer_Event_ID, date_moved_in, organization_id of the results of step 1",
            "output": [
                "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.organization_id FROM Things AS T1 JOIN Customer_Events AS T2 ON T1.thing_id = T2.thing_id"
            ]
        },
        {
            "id": "task077-f33400a8f2984d35bc99ad382b62f1f8",
            "input": "Step 1: For each row in Physician table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of PrepNurse in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-9238d3a0693445d9aa14c921e3e1eeae",
            "input": "Step 1: For each row in hosting_city table, find corresponding rows in city table and in match table.\nStep 2: find City of the results of step 1 whose Competition equals 1994 FIFA World Cup qualification and Year equals 2008",
            "output": [
                "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID AND T1.City_ID = T3.Host_City WHERE T2.Competition = \"1994 FIFA World Cup qualification\" AND T3.Year = 2008"
            ]
        },
        {
            "id": "task077-2bdddc2aaa034e8e9357b026809b9d48",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find the average start_date in the results of step 1 whose min_visibility_miles greater than 50",
            "output": [
                "SELECT Avg ( T1.start_date ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_visibility_miles > 50"
            ]
        },
        {
            "id": "task077-2e18ada907e94b21aaf419279c64c10f",
            "input": "find id of trip table whose duration greater than 60 and zip_code equals 94041",
            "output": [
                "SELECT id FROM trip WHERE duration > 60 AND zip_code = 94041"
            ]
        },
        {
            "id": "task077-8dd6b349c8cc43da893fc4a16522412a",
            "input": "Step 1: For each row in Students table, find the corresponding rows in Student_Course_Enrolment table.\nStep 2: find date_of_registration, date_of_completion of the results of step 1 whose family_name equals Zieme and personal_name equals Bernie",
            "output": [
                "SELECT T1.date_of_registration , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = \"Zieme\" AND T1.personal_name = \"Bernie\""
            ]
        },
        {
            "id": "task077-4264223cf0924151b2d6d4e18c644b41",
            "input": "Step 1: For each row in broadcast table, find corresponding rows in program table and in channel table.\nStep 2: find channel's Owner of the results of step 1 whose program's Owner equals Morning.\nStep 3: For each row in program table, find the corresponding rows in broadcast table.\nStep 4: find program's Owner of the results of step 3 whose Time_of_day equals Night.\nStep 5: show the rows that are in both the results of step 2 and the results of step 4",
            "output": [
                "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Owner = \"Morning\" INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = \"Night\""
            ]
        },
        {
            "id": "task077-0d4ff7e8b3e641c580c86daba3ee0694",
            "input": "find the zip_code, min_dew_point_f of weather table for which min_visibility_miles less than 80",
            "output": [
                "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles < 80"
            ]
        },
        {
            "id": "task077-abc6256f8920430fb55b4ddd77247b2d",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport_id in the results of step 1.\nStep 3: find airport's id, name, Pilot of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-1c3add2347c64831821ef16b8e94ba0f",
            "input": "find the rows of employees table ordered descending by SALARY",
            "output": [
                "SELECT * FROM employees ORDER BY SALARY Desc"
            ]
        },
        {
            "id": "task077-5e4ebd6807134afa965d07fa02e5ceb6",
            "input": "find the number of rows in enzyme table whose Porphyria equals No",
            "output": [
                "SELECT Count ( * ) FROM enzyme WHERE Porphyria = \"No\""
            ]
        },
        {
            "id": "task077-668c1c002b424b99adeb7ae8609fa186",
            "input": "Step 1: For each row in Ref_Payment_Methods table, find the corresponding rows in Invoices table.\nStep 2: find the number of different Invoices's payment_method_code in the results of step 1 whose payment_method_description equals credit",
            "output": [
                "SELECT Count ( DISTINCT T2.payment_method_code ) FROM Ref_Payment_Methods AS T1 JOIN Invoices AS T2 ON T1.payment_method_code = T2.payment_method_code WHERE T1.payment_method_description = \"credit\""
            ]
        },
        {
            "id": "task077-8db94984e21d4700960e36dbd5b2b6a8",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find the summation of age of each value of friend in the results of step 1.\nStep 3: find Person's name in the results of step 1 whose corresponding value in step 2 is greater than engineer",
            "output": [
                "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > \"engineer\""
            ]
        },
        {
            "id": "task077-403b450de54f450185fc20fcd7b4de02",
            "input": "find without repetition the positionText of constructorStandings table",
            "output": [
                "SELECT DISTINCT positionText FROM constructorStandings"
            ]
        },
        {
            "id": "task077-3ca3a1cd1a18473bad954b985ca6df87",
            "input": "find each value of city in Person table along with the average age of the corresponding rows to each value",
            "output": [
                "SELECT job , Avg ( age ) FROM Person GROUP BY city"
            ]
        },
        {
            "id": "task077-92d2455537a0446d96080e9886ec76e9",
            "input": "find the average length_feet in bridge table whose location equals Guangxi , China",
            "output": [
                "SELECT Avg ( length_feet ) FROM bridge WHERE location = \"Guangxi , China\""
            ]
        },
        {
            "id": "task077-29f679544725430a91ec331bdcac730f",
            "input": "find the gender, artist_name of artist table with smallest value of gender",
            "output": [
                "SELECT gender , artist_name FROM artist ORDER BY gender Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-668ce59257f548bc9ef154ae9dd5cc70",
            "input": "Step 1: For each row in city table, find the corresponding rows in address table.\nStep 2: find the number of rows of each value of address's city_id in the results of step 1.\nStep 3: find address, city, city's city_id of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.address , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-5e502e39cd5643a290311649cbdf2a62",
            "input": "find the rows of employees table for which SALARY greater than 2500",
            "output": [
                "SELECT * FROM employees WHERE SALARY > 2500"
            ]
        },
        {
            "id": "task077-c03a8052b892465cb735636360a48d9b",
            "input": "Step 1: find the Name of Scientists table.\nStep 2: find the Name of Scientists table whose Name not one of the results of step 1",
            "output": [
                "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )"
            ]
        },
        {
            "id": "task077-ae872dd8097046869c8f224890d56ba5",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find trip's zip_code of the results of step 1 whose min_humidity greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > 80 OR T2.min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-411382073d174f719fc301f0644b4bb1",
            "input": "Step 1: find the StuID of Student table.\nStep 2: find the StuID of Student table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Student"
            ]
        },
        {
            "id": "task077-c533e244bb9d4f028265035a2b346af9",
            "input": "Step 1: For each row in Product_Characteristics table, find corresponding rows in Characteristics table and in Products table.\nStep 2: find characteristic_name, other_characteristic_details, characteristic_data_type of the results of step 1 whose product_name equals cumin.\nStep 3: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 4: show the rows that are in the results of step 2 but not in the results of step 3",
            "output": [
                "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = \"cumin\" EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1"
            ]
        },
        {
            "id": "task077-d91b3b1c47f340068674547e3e017f9f",
            "input": "find JOB_TITLE, MAX_SALARY of jobs table whose MAX_SALARY contains 12000 and MAX_SALARY greater than 18000",
            "output": [
                "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY LIKE 18000 AND MAX_SALARY > 12000"
            ]
        },
        {
            "id": "task077-779f5ac1c4664e3697d4ffcffe751147",
            "input": "find the Music_Festival, Music_Festival of music_festival table",
            "output": [
                "SELECT Music_Festival , Music_Festival FROM music_festival"
            ]
        },
        {
            "id": "task077-6bdbbd2661ea49f39284fc5aa5e62565",
            "input": "Step 1: find the date, mean_temperature_f, max_temperature_f of weather table ordered descending by max_wind_Speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-64fa92dea693427e86bf98fdb6725f7f",
            "input": "Step 1: For each row in station table, find the corresponding rows in weather table.\nStep 2: find zip_code of the results of step 1 whose long greater than 80 or precipitation_inches greater than 0",
            "output": [
                "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > 80 OR T2.precipitation_inches > 0"
            ]
        },
        {
            "id": "task077-c7a1291f69b54cff8867029f03e11d18",
            "input": "find Country of manager table whose Age greater than 50 or Age greater than 46",
            "output": [
                "SELECT Country FROM manager WHERE Age > 46 OR Age > 50"
            ]
        },
        {
            "id": "task077-5f1a69c60b1b485aaeabd30d1a4debdf",
            "input": "Step 1: find the Musical_ID of actor table.\nStep 2: find the Name of actor table whose Musical_ID not one of the results of step 1",
            "output": [
                "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Musical_ID FROM actor )"
            ]
        },
        {
            "id": "task077-6056a6a0b4c140a5ba3608447f6b5337",
            "input": "find the Classroom of list table for which Grade equals 5 ordered ascending by Classroom",
            "output": [
                "SELECT Classroom FROM list WHERE Grade = 5 ORDER BY Classroom Asc"
            ]
        },
        {
            "id": "task077-71bc821dced9421da08a893ad59d4800",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find FIRST_NAME, LAST_NAME of the results of step 1 whose SALARY equals 6000 and MIN_SALARY less than 20000",
            "output": [
                "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = 6000 AND T1.MIN_SALARY < 20000"
            ]
        },
        {
            "id": "task077-118937202ba441e4a8f2cf70217e2ba8",
            "input": "find the Season of match_season table",
            "output": [
                "SELECT Season FROM match_season"
            ]
        },
        {
            "id": "task077-72a2c74ab36e438d87aa5dca10b541a7",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find start_date of the results of step 1 whose duration greater than 60 and events equals A",
            "output": [
                "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T1.duration > 60 AND T2.events = \"A\""
            ]
        },
        {
            "id": "task077-619a183c0b3646899be77b951ff594bc",
            "input": "find song_name of song table whose genre_is equals modern or genre_is equals english",
            "output": [
                "SELECT song_name FROM song WHERE genre_is = \"english\" OR genre_is = \"modern\""
            ]
        },
        {
            "id": "task077-c15a50086ba7483aab0e20ae0af39a66",
            "input": "Step 1: For each row in jobs table, find the corresponding rows in employees table.\nStep 2: find rows of the results of step 1 whose SALARY greater than 8000 or MIN_SALARY less than or equals 12000",
            "output": [
                "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MIN_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-600740d27e1547458709454462425e80",
            "input": "Step 1: find the number of rows of each value of Order_ID in Invoices table.\nStep 2: find Order_ID of Invoices table with largest value in the results of step 1",
            "output": [
                "SELECT Order_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-a8f45cc5a09540728fb403a852a737bc",
            "input": "find the Unsure_rate, Consider_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-75d5b8717b1c407b9bf56fb3850b871a",
            "input": "Step 1: find the Classroom of list table for which Grade equals 2.\nStep 2: find the Classroom of list table for which Grade equals 4.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Classroom FROM list WHERE Grade = 2 INTERSECT SELECT Classroom FROM list WHERE Grade = 4"
            ]
        },
        {
            "id": "task077-31422a04fd024a8682b00c5cba10db4d",
            "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the min_humidity of weather table for which max_sea_level_pressure_inches less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT min_humidity FROM weather WHERE max_sea_level_pressure_inches < 50"
            ]
        },
        {
            "id": "task077-233ea7abd2e84d3683eb599c5b401b8c",
            "input": "find rows of jobs table whose MAX_SALARY greater than 2500 and MIN_SALARY less than 20000",
            "output": [
                "SELECT * FROM jobs WHERE MAX_SALARY > 2500 AND MIN_SALARY < 20000"
            ]
        },
        {
            "id": "task077-5191e87e738249558fdfd17835ad6b4e",
            "input": "Step 1: For each row in volume table, find the corresponding rows in music_festival table.\nStep 2: find Issue_Date, Result of the results of step 1",
            "output": [
                "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume"
            ]
        },
        {
            "id": "task077-719800dccecb46e3a49a108f56df70b7",
            "input": "find the average Famous_Release_date in artist table whose Artist greater than or equals 25",
            "output": [
                "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist > = 25"
            ]
        },
        {
            "id": "task077-fe89720f19204ba2a126ace15ac5d86b",
            "input": "find Venue of match table whose Competition equals Nanjing ( Jiangsu ) and Competition equals 1994 FIFA World Cup qualification",
            "output": [
                "SELECT Venue FROM match WHERE Competition = \"1994 FIFA World Cup qualification\" AND Competition = \"Nanjing ( Jiangsu )\""
            ]
        },
        {
            "id": "task077-ca77f064b2d04a94a15bd8e940e783a0",
            "input": "Step 1: For each row in Student table, find the corresponding rows in Has_Allergy table.\nStep 2: find the number of rows in the results of step 1 whose Sex equals F and Allergy equals Milk",
            "output": [
                "SELECT Count ( * ) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = \"F\" AND T1.Allergy = \"Milk\""
            ]
        },
        {
            "id": "task077-d61615afaafa48e3a2122b3bf88fc62b",
            "input": "find name, Client of Web_client_accelerator table whose Connection equals Broadband or Connection equals Broadband, Satellite, Wireless, Fiber, DSL",
            "output": [
                "SELECT name , Client FROM Web_client_accelerator WHERE Connection = \"Broadband, Satellite, Wireless, Fiber, DSL\" OR Connection = \"Broadband\""
            ]
        },
        {
            "id": "task077-7ab21b8e2f1f499e9d34f58b45bb29bb",
            "input": "Step 1: find the Player's id of Player table for which height greater than 180.\nStep 2: find the Player_Attributes's player_api_id of Player_Attributes table for which overall_rating less than 85.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2",
            "output": [
                "SELECT T1.id FROM Player AS T1 WHERE T1.height > 180 INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < 85"
            ]
        },
        {
            "id": "task077-6cb5a7438e5e49ecaaa9c75e0e60e4f1",
            "input": "find the Location_Name of Ref_Locations table for which Location_Name equals Robin CV",
            "output": [
                "SELECT Location_Name FROM Ref_Locations WHERE Location_Name = \"Robin CV\""
            ]
        },
        {
            "id": "task077-1b1af52ccd4b473d83d5cf0fb452d1c7",
            "input": "Step 1: For each row in Institution table, find the corresponding rows in protein table.\nStep 2: find common_name, Type of the results of step 1",
            "output": [
                "SELECT T2.common_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id"
            ]
        },
        {
            "id": "task077-a68668b51fac4d8fbcefb4422910e306",
            "input": "find the f_id, artist_name, artist_name of song table ordered ascending by rating",
            "output": [
                "SELECT f_id , artist_name , artist_name FROM song ORDER BY rating Asc"
            ]
        },
        {
            "id": "task077-ac30723a05044aec9e0d965c2ec78649",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find each value of weather's zip_code in the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T1.zip_code FROM trip AS T1 JOIN weather AS T2 GROUP BY T2.zip_code"
            ]
        },
        {
            "id": "task077-a0380a89982f4c1bbdae575a517061ef",
            "input": "find FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID of employees table whose FIRST_NAME equals M or LAST_NAME equals King",
            "output": [
                "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME = \"M\" OR LAST_NAME = \"King\""
            ]
        },
        {
            "id": "task077-b68d9a2826644548b3b3cefa22ec7c62",
            "input": "Step 1: For each row in genre table, find the corresponding rows in song table.\nStep 2: find song_name of the results of step 1 whose genre_is equals modern or g_name equals english",
            "output": [
                "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = \"modern\" OR T1.g_name = \"english\""
            ]
        },
        {
            "id": "task077-44f5a3bee0314d879296fa58d9a1713b",
            "input": "find rows of jobs table whose MIN_SALARY equals 12000 and MAX_SALARY greater than 40000",
            "output": [
                "SELECT * FROM jobs WHERE MIN_SALARY = 12000 AND MAX_SALARY > 40000"
            ]
        },
        {
            "id": "task077-566de4de95ba452bad0e2da30546838d",
            "input": "find the rows of employees table for which SALARY equals or between 2500 and 24000",
            "output": [
                "SELECT * FROM employees WHERE SALARY BETWEEN 24000 AND 2500"
            ]
        },
        {
            "id": "task077-88e26db3e51f4af19d22c93b801d2996",
            "input": "find the number of different Currency_Code in Drama_Workshop_Groups table whose Store_Name equals Amely Cafe",
            "output": [
                "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Store_Name = \"Amely Cafe\""
            ]
        },
        {
            "id": "task077-681b15bb03a24e22bad8122d68a445db",
            "input": "Step 1: For each row in Employee table, find the corresponding rows in Customer table.\nStep 2: find the number of rows of each value of SupportRepId in the results of step 1.\nStep 3: find Employee's LastName in the results of step 1 whose corresponding value in step 2 is greater than 20",
            "output": [
                "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) > 20"
            ]
        },
        {
            "id": "task077-7d514a039ff44bf188aab1368ce43fdb",
            "input": "Step 1: For each row in airport table, find the corresponding rows in flight table.\nStep 2: find the number of rows of each value of airport_id in the results of step 1.\nStep 3: find airport's id, name, ICAO of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.id , T1.name , T1.ICAO FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-52e1046f89ef48daa4e6a0ca24df36c3",
            "input": "find rows of jobs table whose MAX_SALARY greater than 2500 and MAX_SALARY less than 40000",
            "output": [
                "SELECT * FROM jobs WHERE MAX_SALARY > 40000 AND MAX_SALARY < 2500"
            ]
        },
        {
            "id": "task077-c6eab4d9953c4f108ea4595214250f50",
            "input": "find the student_id of Student_Course_Attendance table",
            "output": [
                "SELECT student_id FROM Student_Course_Attendance"
            ]
        },
        {
            "id": "task077-5fa01314fbad4c7e82d4b4fc2f317ed9",
            "input": "Step 1: For each row in Problems table, find the corresponding rows in Problem_Log table.\nStep 2: find problem_log_id, date_problem_reported of the results of step 1 whose problem_log_id equals 10",
            "output": [
                "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = 10"
            ]
        },
        {
            "id": "task077-9c9c96835169477da85342282513e43f",
            "input": "find the date of weather table for which max_sea_level_pressure_inches greater than 85",
            "output": [
                "SELECT date FROM weather WHERE max_sea_level_pressure_inches > 85"
            ]
        },
        {
            "id": "task077-46e31798140747f9a30c29ef045fc62c",
            "input": "Step 1: For each row in broadcast table, find corresponding rows in program table and in channel table.\nStep 2: find channel's Name, Origin, program's Owner of the results of step 1",
            "output": [
                "SELECT T2.Name , T1.Origin , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID"
            ]
        },
        {
            "id": "task077-7db75200cae44d3fb69ce88e9b41a965",
            "input": "Step 1: For each row in Catalog_Structure table, find corresponding rows in Catalogs table and in Catalog_Contents table.\nStep 2: find catalog_entry_name, catalog_name of the results of step 1 whose price_in_dollars greater than 700",
            "output": [
                "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > 700"
            ]
        },
        {
            "id": "task077-aefc09719c9642c29a5445647eccaba7",
            "input": "find the email, phone of customers table for which first_name equals Astrid",
            "output": [
                "SELECT email , phone FROM customers WHERE first_name = \"Astrid\""
            ]
        },
        {
            "id": "task077-148c0f04fe8d42dc875f6a6dc71564cb",
            "input": "find start_station_id of trip table whose duration greater than 60 and start_station_name equals Howard at 2nd",
            "output": [
                "SELECT start_station_id FROM trip WHERE duration > 60 AND start_station_name = \"Howard at 2nd\""
            ]
        },
        {
            "id": "task077-2480a1fdbb74449faf9d4c2073d63b70",
            "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table for which characteristic_name equals slow.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics WHERE characteristic_name = \"slow\" EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics"
            ]
        },
        {
            "id": "task077-558efafda9744c3e8d3d6404e3e26da5",
            "input": "Step 1: find the characteristic_name, characteristic_name, other_characteristic_details of Characteristics table.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2",
            "output": [
                "SELECT characteristic_name , characteristic_name , other_characteristic_details FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics"
            ]
        },
        {
            "id": "task077-62960e87cc0e4611b4be7933dd554f43",
            "input": "find the maximum date in weather table",
            "output": [
                "SELECT Max ( date ) FROM weather"
            ]
        },
        {
            "id": "task077-fec43265825f4cc790b4af428390bf60",
            "input": "find the cust_name of customer table ordered ascending by credit_score",
            "output": [
                "SELECT cust_name FROM customer ORDER BY credit_score Asc"
            ]
        },
        {
            "id": "task077-1d720d32badb496585a27414ae6e3fed",
            "input": "find JOB_TITLE, MAX_SALARY of jobs table whose MIN_SALARY contains 12000 and MAX_SALARY greater than 18000",
            "output": [
                "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE 12000 AND MAX_SALARY > 18000"
            ]
        },
        {
            "id": "task077-6fc9cec4277d4a29b08e1a14c8b2383b",
            "input": "Step 1: For each row in School table, find the corresponding rows in budget table.\nStep 2: find School_name, Budgeted, Budget_invested_percent of the results of step 1 whose Year greater than or equals 2002",
            "output": [
                "SELECT T1.School_name , T2.Budgeted , T2.Budget_invested_percent FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = 2002"
            ]
        },
        {
            "id": "task077-27841e207ea349fa9af4552e0955f5f6",
            "input": "find the asset_details of Assets table ordered ascending by asset_disposed_date",
            "output": [
                "SELECT asset_details FROM Assets ORDER BY asset_disposed_date Asc"
            ]
        },
        {
            "id": "task077-9721cd06d06849048a9f536308351bd7",
            "input": "find Country of manager table whose Age greater than 50 or Manager_ID equals 46",
            "output": [
                "SELECT Country FROM manager WHERE Age > 50 OR Manager_ID = 46"
            ]
        },
        {
            "id": "task077-ef6ebb38b9de42c49ecb231acbc7b51b",
            "input": "find the zip_code, min_humidity of weather table for which min_visibility_miles greater than 80",
            "output": [
                "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > 80"
            ]
        },
        {
            "id": "task077-359de4290afb4890b2b435f8349f176b",
            "input": "find the name of bridge table ordered descending by length_feet",
            "output": [
                "SELECT name FROM bridge ORDER BY length_feet Desc"
            ]
        },
        {
            "id": "task077-357637a0e20b4d45b745111a138997ca",
            "input": "Step 1: find the number of rows of each value of Entrepreneur_ID in entrepreneur table.\nStep 2: find Company of entrepreneur table with largest value in the results of step 1",
            "output": [
                "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c068c27c019d4a1685628adba2514c7f",
            "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find trip's zip_code of the results of step 1 whose min_temperature_f greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > 80 OR T2.min_sea_level_pressure_inches > 29.97"
            ]
        },
        {
            "id": "task077-83d2d6f4210f4110b07a6fdc45fe18f2",
            "input": "find Country of manager table whose Age greater than 50 or Age equals 46",
            "output": [
                "SELECT Country FROM manager WHERE Age > 46 OR Age = 50"
            ]
        },
        {
            "id": "task077-571e405edeb143b89ee04b1469e552cf",
            "input": "Step 1: For each row in Course_Authors_and_Tutors table, find the corresponding rows in Courses table.\nStep 2: find the number of rows of each value of Courses's author_id in the results of step 1.\nStep 3: find personal_name, family_name, course_description of step 1 results with largest value in the results of step 2",
            "output": [
                "SELECT T1.personal_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-c7d86e8c3a1447db80a33b29aee9e242",
            "input": "find the Unsure_rate, Oppose_rate, Oppose_rate of candidate table ordered ascending by Unsure_rate",
            "output": [
                "SELECT Unsure_rate , Oppose_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc"
            ]
        },
        {
            "id": "task077-323a9a3b6a05412f8d8589d7fd092604",
            "input": "Step 1: find the number of rows of each value of FirstName in teachers table.\nStep 2: find FirstName, LastName of teachers table with largest value in the results of step 1",
            "output": [
                "SELECT FirstName , LastName FROM teachers GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-52f64814238d442190541d90450a9ef1",
            "input": "Step 1: find the minimum date_assigned_to in Staff_Department_Assignments table.\nStep 2: find the staff_id of Staff_Department_Assignments table whose date_assigned_to greater than the results of step 1",
            "output": [
                "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )"
            ]
        },
        {
            "id": "task077-390a5fc570684b8a901b354927ad41ee",
            "input": "Step 1: find the date, mean_temperature_f, mean_dew_point_f of weather table ordered descending by max_gust_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , mean_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-f8bb349e73ea4946ade145bcd0c509bc",
            "input": "Step 1: find the SupportRepId of Customer table for which Customer's LastName greater than 20.\nStep 2: find the Employee's LastName of Employee table whose Employee's LastName not one of the results of step 1",
            "output": [
                "SELECT T1.LastName FROM Employee AS T1 WHERE T1.LastName NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > 20 )"
            ]
        },
        {
            "id": "task077-2c32d4082241453796ef4a83d48dbc76",
            "input": "Step 1: For each row in game table, find the corresponding rows in injury_accident table.\nStep 2: find Date, Player of the results of step 1 ordered descending by Competition",
            "output": [
                "SELECT T1.Date , T2.Player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.Competition Desc"
            ]
        },
        {
            "id": "task077-702c853da57645e0835c8dcc5f77221c",
            "input": "find the name of aircraft table for which name contains 99",
            "output": [
                "SELECT name FROM aircraft WHERE name LIKE 99"
            ]
        },
        {
            "id": "task077-384de87ff59c41caa0a65d513f8c3595",
            "input": "Step 1: For each row in Documents table, find the corresponding rows in Documents_with_Expenses table.\nStep 2: find rows in the results of step 1 whose Document_Type_Code equals BK.\nStep 3: find each value of Documents's Document_ID the results of step 1 along with the number of the corresponding rows to each value",
            "output": [
                "SELECT Count ( * ) , T2.Budget_Type_Code FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = \"BK\" GROUP BY T1.Document_ID"
            ]
        },
        {
            "id": "task077-54cf3cf967334d6e8ad156f239b37d96",
            "input": "find each value of dept_name in student table along with the summation of tot_cred of the corresponding rows to each value",
            "output": [
                "SELECT Sum ( tot_cred ) , dept_name FROM student GROUP BY dept_name"
            ]
        },
        {
            "id": "task077-b0850d6b4e3542f09a4b8111e1f0eeed",
            "input": "Step 1: find the number of rows of each value of product_id in Products table.\nStep 2: find product_details of Products table with largest value in the results of step 1",
            "output": [
                "SELECT product_details FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-efd3b2a5ef834375b5765aeb134fcb43",
            "input": "Step 1: find the average min_sea_level_pressure_inches of each value of zip_code in weather table.\nStep 2: find zip_code in weather table whose corresponding value in step 1 is greater than 10",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) > 10"
            ]
        },
        {
            "id": "task077-7eab2f611eb64ceb81e29a9c7c1a2581",
            "input": "Step 1: For each row in Has_amenity table, find corresponding rows in Dorm table and in Dorm_amenity table.\nStep 2: find amenity_name of the results of step 1 whose student_capacity greater than 300",
            "output": [
                "SELECT T2.amenity_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T1.student_capacity > 300"
            ]
        },
        {
            "id": "task077-0478b9bf513d423b8922722cd52f47db",
            "input": "find the cust_name, credit_score of customer table for which no_of_loans greater than 5000",
            "output": [
                "SELECT cust_name , credit_score FROM customer WHERE no_of_loans > 5000"
            ]
        },
        {
            "id": "task077-5761ba02d8914d629da482fdb6dd4945",
            "input": "find the Employee_Name, Other_Details of Employees table",
            "output": [
                "SELECT Employee_Name , Other_Details FROM Employees"
            ]
        },
        {
            "id": "task077-8ac456681fca40b99641adec3585f813",
            "input": "find the other_asset_details of Assets table ordered ascending by asset_details",
            "output": [
                "SELECT other_asset_details FROM Assets ORDER BY asset_details Asc"
            ]
        },
        {
            "id": "task077-7ebc17132f4a4e58b05bdfc32e1c9346",
            "input": "Step 1: For each row in artist table, find the corresponding rows in song table.\nStep 2: find gender, song's artist_name of the results of step 1 with smallest value of gender",
            "output": [
                "SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T1.gender Asc LIMIT 1"
            ]
        },
        {
            "id": "task077-51ba09a008fd4032be5e735096b7fe88",
            "input": "find zip_code of weather table whose min_sea_level_pressure_inches greater than 80 or min_sea_level_pressure_inches greater than 29.97",
            "output": [
                "SELECT zip_code FROM weather WHERE min_sea_level_pressure_inches > 29.97 OR min_sea_level_pressure_inches > 80"
            ]
        },
        {
            "id": "task077-47101e6e2b3c4d229ab2c2e2aa225edb",
            "input": "Step 1: For each row in artist table, find the corresponding rows in volume table.\nStep 2: find the average Weeks_on_Top in the results of step 1 whose Age greater than or equals 25",
            "output": [
                "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age > = 25"
            ]
        },
        {
            "id": "task077-9ed08ba36f0b4b87841ef0e61834136e",
            "input": "Step 1: For each row in genre table, find corresponding rows in artist table and in song table.\nStep 2: find song_name of the results of step 1 whose preferred_genre equals modern or g_name equals english",
            "output": [
                "SELECT T3.song_name FROM genre AS T1 JOIN artist AS T2 ON T1.g_name = T2.preferred_genre JOIN song AS T3 ON T1.g_name = T3.genre_is WHERE T2.preferred_genre = \"modern\" OR T1.g_name = \"english\""
            ]
        },
        {
            "id": "task077-6d114feb26a245b3bfb619c1db6e3dbb",
            "input": "Step 1: For each row in Appointment table, find corresponding rows in Physician table and in Nurse table.\nStep 2: find without repetition Physician's Name of the results of step 1 ordered ascending by Nurse's Name",
            "output": [
                "SELECT DISTINCT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Asc"
            ]
        },
        {
            "id": "task077-810251ccddb946e381eaff0244c4e12a",
            "input": "find JOB_TITLE, MIN_SALARY, MAX_SALARY of jobs table whose MAX_SALARY greater than 12000 and MAX_SALARY less than or equals 18000",
            "output": [
                "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > 18000 AND MAX_SALARY < = 12000"
            ]
        },
        {
            "id": "task077-15043f54a34d41e68be4940d1651db1a",
            "input": "Step 1: For each row in files table, find the corresponding rows in song table.\nStep 2: find files's artist_name of the results of step 1 whose resolution less than 1000",
            "output": [
                "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 1000"
            ]
        },
        {
            "id": "task077-3fc4339be5b34b0b9f2a588f0045c033",
            "input": "find the average Total_Cattle in farm table whose Total_Horses greater than 5000",
            "output": [
                "SELECT Avg ( Total_Cattle ) FROM farm WHERE Total_Horses > 5000"
            ]
        },
        {
            "id": "task077-d18a8645754e4968a73412027c3fb572",
            "input": "Step 1: find the date, mean_temperature_f, max_wind_Speed_mph of weather table ordered descending by max_gust_speed_mph.\nStep 2: only show the first 3 rows of the results",
            "output": [
                "SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT 3"
            ]
        },
        {
            "id": "task077-ad03720a8d4a47878ee7e1c7b18537fb",
            "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find Person's name, age of the results of step 1 whose friend equals Dan.\nStep 3: find the Person's name, age of Person table for which job equals Alice.\nStep 4: show the rows that are in both the results of step 2 and the results of step 3",
            "output": [
                "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = \"Dan\" INTERSECT SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = \"Alice\""
            ]
        },
        {
            "id": "task077-6efe890ec1a14ece92836ab2709dd2a9",
            "input": "Step 1: find the number of rows of each value of City in city table.\nStep 2: find City of city table with largest value in the results of step 1",
            "output": [
                "SELECT City FROM city GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1"
            ]
        },
        {
            "id": "task077-4610f2124d96417d95e75bbc72981a02",
            "input": "Step 1: For each row in Customer_Addresses table, find corresponding rows in Addresses table and in Customers table.\nStep 2: find address_details of the results of step 1 whose customer_name equals 10",
            "output": [
                "SELECT T1.address_details FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name = 10"
            ]
        }
    ]
}
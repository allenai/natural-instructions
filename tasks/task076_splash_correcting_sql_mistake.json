{
    "Contributors": [
        "Kirby Kuznia"
    ],
    "Source": [
        "SPLASH"
    ],
    "Categories": [
        "Structered Query Generation",
        "Text Modification"
    ],
    "Definition": "In this task you are expected to fix an SQL query based on feedback. You will be given an SQL statement and an English description with what is wrong about that SQL statement. You must correct the SQL statement based off of the feedback. An SQL query works by selecting data from a table where certain conditions apply. A table contains columns where every row in that table must have a value for each column. Every table has a primary key that uniquely identifies each row, usually an id. To choose which columns are returned you specify that after the \"SELECT\" statement. Next, you use a \"FROM\" statement to specify what tables you want to select the data from. When you specify a table you can rename it with the \"AS\" statement. You can reference that table by whatever name follows the \"AS\" statement. If you want to select data from multiple tables you need to use the \"JOIN\" statement. This will join the tables together by pairing a row in one table with every row in the other table (Cartesian Product). To limit the number of rows returned you should use the \"ON\" statement. This will only return rows where the condition specified after the statement is true, this is usually an equals operator with primary keys. You can also use the \"WHERE\" statement to specify that only rows with column values statisfying a certain condition, should be returned. The \"GROUP BY\" statement will group rows together that have equal column values for whatever columns follows the statement. The \"HAVING\" statement will return groups that statisfy whatever condition follows the statement. Any column(s) being returned from grouped rows must either be an aggregate function, (AVG, MAX, COUNT, SUM, ...) of a column, or the column(s) that the data was grouped by. To sort the returned data you can use the \"ORDER BY\" command which will order the data by whatever aggregate function or column follows the statement. The \"DESC\" statement will sort in descending order and the \"ASC\" statement will sort in ascending order. Finally, you can use the \"LIMIT\" statement to return a certain number of rows. When \"*\" is used in an SQL statement every column is returned. For example, SELECT * FROM table WHERE attribute = 1, will select every column from rows with the attribute column equal to 1. ",
    "Positive Examples": [
        {
            "input": "SQL: SELECT avg ( Area ) , max ( Capacity ) FROM stadium\nFeedback: Swap the average of \"Area\" with the average of \"Capacity\"",
            "output": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
            "explanation": "The SQL statement was adjusted to find the average of the capacity. This is a good example."
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = \"M\" AND T1.AllergyType = \"food\"\nFeedback: need to count different stuid to avoid double counting students",
            "output": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
            "explanation": "This output SQL statement added another SQL statement to prevent double counting students. This is exactly what the feedback suggested. This is a good example."
        },
        {
            "input": "SQL: SELECT Name FROM channel ORDER BY Rating_in_percent Asc\nFeedback: Arrangement must be declining.",
            "output": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
            "explanation": "The feedback asks to change the sort function to descending, and the output correctly applies the change."
        }
    ],
    "Negative Examples": [
        {
            "input": "SQL: SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > 9000\nFeedback: it should be min salary",
            "output": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > 9000",
            "explanation": "This output SQL query did not change from the input. You must change the SQL input based on the feedback given."
        },
        {
            "input": "SQL: SELECT SALARY , MANAGER_ID FROM employees\nFeedback: assert each employee has a manger",
            "output": "SELECT salary ,  manager_id FROM employees WHERE manager_id is NULL",
            "explanation": "The output SQL query asserts that the \"manager_id\" is equal to null. It should assert that the \"manager_id\" is not equal to null."
        }
    ],
    "Instances": [
        {
            "input": "SQL: SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > 3 UNION SELECT product_id FROM Product_Suppliers WHERE total_value_purchased < 80000\nFeedback: In step 1 swap product suppliers with order items , in step 3 total amount purchased should be greater than 80000.",
            "output": [
                "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000"
            ]
        },
        {
            "input": "SQL: SELECT cName FROM College WHERE enr > 13000 INTERSECT SELECT cName FROM College WHERE enr < 15000\nFeedback: Step 1 greater than 15000 with state equals LA , step 2 less than 13000 with state equals AZ .",
            "output": [
                "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
            ]
        },
        {
            "input": "SQL: SELECT title FROM film WHERE title LIKE \"Deleted Scenes\"\nFeedback: It should be special features contains Deleted Scenes\" instead of \"title contains Deleted Scenes\".",
            "output": [
                "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Origin ! = \"Beijing\"\nFeedback: The \"channel's Name\" is wrong . Use \"program's Name\" instead .",
            "output": [
                "SELECT name FROM program WHERE origin != 'Beijing'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand\nFeedback: It should corresponds to number of rows of each value of medication medication in prescribes table .",
            "output": [
                "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"
            ]
        },
        {
            "input": "SQL: SELECT attribute_name , attribute_id FROM Attribute_Definitions\nFeedback: Make sure attribute value equals 0.",
            "output": [
                "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0"
            ]
        },
        {
            "input": "SQL: SELECT country FROM circuits WHERE lat > \"09:00:00\" OR lat < \"12:00:00\"\nFeedback: Substitute altitude with status , circuits with races , both \"lat\" with \"time\".",
            "output": [
                "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
            ]
        },
        {
            "input": "SQL: SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = \"New\" INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < \"Pending\"\nFeedback: Search Customers' supplier name and product type code for which date assigned from equals New and Pending both .",
            "output": [
                "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
            ]
        },
        {
            "input": "SQL: SELECT T2.dept_name FROM department AS T1 JOIN course AS T2 ON T1.dept_name = T2.dept_name ORDER BY T1.budget Desc LIMIT 3\nFeedback: In step 2 find number of rows of each value of course 's department name in descending order .",
            "output": [
                "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM budget WHERE Invested > 8.5\nFeedback: Find number of rows endowment for which school id appears more than once . Replace invested with amount .",
            "output": [
                "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Genre GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 exchange name with genre id , and genre table with track table .",
            "output": [
                "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT state_province_county , country FROM Addresses WHERE zip_postcode = \"4%\"\nFeedback: Be sure that zip postcode starting with 4.",
            "output": [
                "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\""
            ]
        },
        {
            "input": "SQL: SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = \"Herbs\"\nFeedback: Rather than product characteristics table use reference colors table in step 1 , Instead of other characteristic details use color description in step 2.",
            "output": [
                "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\""
            ]
        },
        {
            "input": "SQL: SELECT Name , Price FROM Products ORDER BY Price Desc LIMIT 1\nFeedback: Ensure to find for each manufacturer along with Manufacturers's name ahead of name , price .",
            "output": [
                "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"
            ]
        },
        {
            "input": "SQL: SELECT Fname FROM Student WHERE city_code = \"Smith Hall\"\nFeedback: first name should be Smith Hall , not student id .",
            "output": [
                "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM flight\nFeedback: Find number of rows of distinct price in certificate table .",
            "output": [
                "SELECT count(DISTINCT eid) FROM Certificate"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( distance ) , Avg ( price ) FROM flight\nFeedback: Confirming that origin equals Los Angeles .",
            "output": [
                "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""
            ]
        },
        {
            "input": "SQL: SELECT customer_id , other_customer_details FROM Customers ORDER BY date_became_customer Asc LIMIT 1\nFeedback: Exchange customer id , other customer details , customers table with channel code , contact number , customer contact channels and find largest value of difference between active from date and active to date .",
            "output": [
                "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM actor\nFeedback: Find number of rows of distinct language id in film table .",
            "output": [
                "SELECT count(DISTINCT language_id) FROM film"
            ]
        },
        {
            "input": "SQL: SELECT student_id FROM Students\nFeedback: Ensure student id should be present in student course attendance table or student course registrations table .",
            "output": [
                "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
            ]
        },
        {
            "input": "SQL: SELECT Service_Type_Description , Service_Type_Code FROM Ref_Service_Types GROUP BY Service_Type_Code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 replace service type code with service id , drama workshop groups table with Service table .",
            "output": [
                "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Accounts\nFeedback: Remove accounts table and Use customers table instead of it .",
            "output": [
                "SELECT count(*) FROM Customers"
            ]
        },
        {
            "input": "SQL: SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT 1\nFeedback: Put capacity in place of height .",
            "output": [
                "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: In step 1 and 2 replace supplier id with product id .",
            "output": [
                "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: There should be governor , not party in step 1.",
            "output": [
                "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM program AS T1 WHERE T1.Program_ID NOT IN ( SELECT T2.Program_ID FROM broadcast_share AS T2 )\nFeedback: In step 1 Substitute broadcast share table with broadcast table and for which time of day equals morning .",
            "output": [
                "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\""
            ]
        },
        {
            "input": "SQL: SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = \"Study Room\"\nFeedback: Ensure amenity name equals TV Lounge in step 1.",
            "output": [
                "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT customer_name FROM Customers\nFeedback: Also add Products' product name equals keyboard which purchased by customers .",
            "output": [
                "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\""
            ]
        },
        {
            "input": "SQL: SELECT Major , Count ( * ) FROM Student GROUP BY Major\nFeedback: Need to find number of distinct major and distinct city code for each student .",
            "output": [
                "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student"
            ]
        },
        {
            "input": "SQL: SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = \"catnip\"\nFeedback: Change reference characteristic types table , characteristics table , characteristic type description , characteristic name to products table , reference colors table , color description and product name .",
            "output": [
                "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""
            ]
        },
        {
            "input": "SQL: SELECT T2.product_type_code , T2.product_name , T2.product_price FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id WHERE T1.supplier_name = 3\nFeedback: Use supplier id rather than supplier name in step 2.",
            "output": [
                "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3"
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers WHERE payment_method = \"Latte\" INTERSECT SELECT customer_name FROM Customers WHERE payment_method = \"Americano\"\nFeedback: Both payment method are to be replaced by product details , verify that customer has bought Latte and Americano .",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( student_capacity ) , Min ( student_capacity ) FROM Dorm WHERE gender = \"X\"\nFeedback: Replace \" minimum student capacity with \"total student capacity\".",
            "output": [
                "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'"
            ]
        },
        {
            "input": "SQL: SELECT characteristic_name FROM Characteristics GROUP BY characteristic_data_type ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace characteristic data type , characteristics table with characteristic id , product characteristics in step 1.",
            "output": [
                "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Characteristic_Types\nFeedback: Exchange reference characteristic types with characteristics .",
            "output": [
                "SELECT count(*) FROM CHARACTERISTICS"
            ]
        },
        {
            "input": "SQL: SELECT Park FROM roller_coaster ORDER BY Height Desc LIMIT 1\nFeedback: Exchange height with speed .",
            "output": [
                "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Use reign in place of event In step 1 and 2.",
            "output": [
                "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name FROM student ORDER BY tot_cred Desc LIMIT 1\nFeedback: Make sure department name equals History .",
            "output": [
                "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = \"red\"\nFeedback: Ensure for the product corresponding Ref Colors's color description equals red and product characteristics product characteristic value equals slow .",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\""
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT 10\nFeedback: Instead of airports table use airlines table in step 1. Replace source airport with airline in step 2.",
            "output": [
                "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"
            ]
        },
        {
            "input": "SQL: SELECT T3.Name FROM Playlist AS T1 JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name LIKE \"you\"\nFeedback: In step 2 supersede playlist with track .",
            "output": [
                "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT name ) FROM instructor\nFeedback: Be sure that instructor's id should be present in teaches table .",
            "output": [
                "SELECT COUNT (DISTINCT id) FROM teaches"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM storm\nFeedback: Assure that number deaths doesn't have null value .",
            "output": [
                "SELECT count(*) FROM storm WHERE Number_Deaths  >  0"
            ]
        },
        {
            "input": "SQL: SELECT name , Count ( * ) FROM aircraft GROUP BY name\nFeedback: It should display number of corresponding rows for each airline id in flight table .",
            "output": [
                "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
            ]
        },
        {
            "input": "SQL: SELECT T1.Location FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: It should be party 's number of hosts in place of party host 's party id in step 2.",
            "output": [
                "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T2.Position FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Check for department 's head who has smallest number of physician and nurse working under him or her .",
            "output": [
                "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM student AS T1 EXCEPT SELECT T1.name FROM department AS T2 JOIN course AS T3 ON T3.dept_name = T2.dept_name JOIN student AS T1 ON T2.dept_name = T1.dept_name WHERE T3.dept_name = \"Biology\"\nFeedback: Change department table with takes classes table in Step 2.",
            "output": [
                "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
            ]
        },
        {
            "input": "SQL: SELECT T1.semester FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = 2010\nFeedback: Substitute semester with course id , Ensure it equals semester fall and year 2009 , not equals semester Spring .",
            "output": [
                "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT Governor , Count ( * ) FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 2 , Only need to find comptroller not each value of comptroller .",
            "output": [
                "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Code , T2.Name , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID\nFeedback: Exchange second name with fate in step 2.",
            "output": [
                "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID"
            ]
        },
        {
            "input": "SQL: SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode\nFeedback: Find different Room's block code with number of corresponding rows to each value in room room table .",
            "output": [
                "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Name FROM Nurse\nFeedback: Change nurse nurse table with department department table and Verify it's corresponding value of primary affiliation equals 1.",
            "output": [
                "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"
            ]
        },
        {
            "input": "SQL: SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_pounds Desc LIMIT 1\nFeedback: The required parameter is price in dollars , not price in pounds .",
            "output": [
                "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = 2\nFeedback: Exchange products table with product characteristics table in step 1 , and need to find color description not product description .",
            "output": [
                "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Comptroller , Party FROM party\nFeedback: Swap comptroller with election's delegate .",
            "output": [
                "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID"
            ]
        },
        {
            "input": "SQL: SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_name = \"red\"\nFeedback: Put reference colors instead of product characteristics table , replace characteristic name with color description , mention that characteristic name equals fast .",
            "output": [
                "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\""
            ]
        },
        {
            "input": "SQL: SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: wine's state is wrong . Take appellations's county in place of it in step 3.",
            "output": [
                "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.FacID FROM Faculty AS T1 EXCEPT SELECT T2.FacID FROM Faculty_Participates_in AS T2\nFeedback: In step 2 ensure corresponding value of is faculty id present under Student's advisor .",
            "output": [
                "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM MediaType WHERE Name = \"MPEG audio file\" AND Name = \"AAC audio file\"\nFeedback: Find number of rows in track table whose corresponding MediaType's name equals AAC audio file .",
            "output": [
                "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM people WHERE Height > 1.84\nFeedback: Calculate summation of killed of perpetrator table for people id whose height greater than 1. 84.",
            "output": [
                "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84"
            ]
        },
        {
            "input": "SQL: SELECT cName FROM College ORDER BY cName Asc\nFeedback: Find player name of player table in ascending ordered whose player id present in tryout table .",
            "output": [
                "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName"
            ]
        },
        {
            "input": "SQL: SELECT T1.card_type_code , Count ( * ) FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type\nFeedback: Change transaction type with card type code , Ensure that number of corresponding rows to each value of customers cards table .",
            "output": [
                "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code"
            ]
        },
        {
            "input": "SQL: SELECT catalog_entry_name FROM Catalog_Contents WHERE parent_entry_id > 8\nFeedback: Supersede parent entry id with next entry id .",
            "output": [
                "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM member EXCEPT SELECT Name FROM member\nFeedback: Find the name of member table whose member id present in membership register branch table in step 2.",
            "output": [
                "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"
            ]
        },
        {
            "input": "SQL: SELECT T1.role_description FROM Roles AS T1 JOIN Users AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Specify that users ' user login equals 1.",
            "output": [
                "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM program\nFeedback: Ensure to find distinct channel's owner instead of program table .",
            "output": [
                "SELECT count(DISTINCT OWNER) FROM channel"
            ]
        },
        {
            "input": "SQL: SELECT product_type_code FROM Products WHERE product_price > ( SELECT Avg ( product_price ) FROM Products )\nFeedback: In step 2 find product type code whose average product price larger than step 1 's results .",
            "output": [
                "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"
            ]
        },
        {
            "input": "SQL: SELECT eid , salary FROM employee\nFeedback: Be certain name equals Mark Young .",
            "output": [
                "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"
            ]
        },
        {
            "input": "SQL: SELECT City FROM branch WHERE Open_year = 100 INTERSECT SELECT City FROM branch WHERE membership_amount > 2001\nFeedback: Find city which membership amount greater than 100 and open year equals 2001.",
            "output": [
                "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"
            ]
        },
        {
            "input": "SQL: SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id ORDER BY T2.product_name Asc\nFeedback: Change product suppliers table , products table and product name to addresses table , supplier addresses table and date supplied to respectively .",
            "output": [
                "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details"
            ]
        },
        {
            "input": "SQL: SELECT name FROM enzyme WHERE Chromosome ! = \"Heme\"\nFeedback: Exchange chromosome with product .",
            "output": [
                "SELECT name FROM enzyme WHERE product != 'Heme'"
            ]
        },
        {
            "input": "SQL: SELECT * FROM Procedures WHERE Cost > 5000\nFeedback: Find name of physician physician who trained in a procedure which cost greater than 5000.",
            "output": [
                "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000"
            ]
        },
        {
            "input": "SQL: SELECT email , last_update FROM customer WHERE first_name = \"LINDA\" AND last_name = \"SMITH\"\nFeedback: Omit last update and last name equals SMITH . Not only find email but also find address , address 2 , district .",
            "output": [
                "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'"
            ]
        },
        {
            "input": "SQL: SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Substitute days held , wrestler table with time , elimination table in step 2.",
            "output": [
                "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT product_category_code , typical_selling_price FROM Products WHERE typical_buying_price = \"cumin\"\nFeedback: Add typical buying price and Take product name equals cumin instead of typical buying price equals cumin\".",
            "output": [
                "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\""
            ]
        },
        {
            "input": "SQL: SELECT characteristic_name FROM Characteristics WHERE characteristic_type_code = \"sesame\"\nFeedback: product name should be sesame not characteristic type code . Verify that characteristic type code equals 'Grade' as well .",
            "output": [
                "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Party_Theme ) FROM party\nFeedback: Find the number of rows in party table .",
            "output": [
                "SELECT count(*) FROM party"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Physician WHERE Name = \"Thesisin\"\nFeedback: Find name of physician physician table who prescribes medication medication for which name equals Thesisin .",
            "output": [
                "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\""
            ]
        },
        {
            "input": "SQL: SELECT Season , Competition , Home_team FROM game\nFeedback: The required parameter is away team not competition .",
            "output": [
                "SELECT season ,  home_team ,  away_team FROM game"
            ]
        },
        {
            "input": "SQL: SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.inventory_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Add rental table in step 1 and confirm to find rental's inventory id in step 2.",
            "output": [
                "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers WHERE customer_first_name = \"Art\" AND customer_last_name = \"Turcotte\"\nFeedback: accounts table should be use in place of customers table .",
            "output": [
                "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < 50 AND T1.County = \"Sonoma\" AND T1.County = \"Monterey\"\nFeedback: no need to find county equals Sonoma so remove it .",
            "output": [
                "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50"
            ]
        },
        {
            "input": "SQL: SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Duke\" OR T2.College = \"Maryland\"\nFeedback: Discard country name and include official native language instead .",
            "output": [
                "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\""
            ]
        },
        {
            "input": "SQL: SELECT name , distance FROM aircraft WHERE distance BETWEEN 8430 AND 5000\nFeedback: Ensure count of airline id in certificate table is minimum 5 , find all whose distance above 5000.",
            "output": [
                "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
            ]
        },
        {
            "input": "SQL: SELECT Player_name , Sponsor_name FROM player ORDER BY Votes Desc\nFeedback: Use player name rather than sponsor name .",
            "output": [
                "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM customer ORDER BY create_date Asc LIMIT 1\nFeedback: It should use rental rate in place of create date .",
            "output": [
                "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( price_in_dollars ) , Max ( price_in_pounds ) FROM Catalog_Contents\nFeedback: Exchange price in dollars with price in euros , maximum with minimum , price in pounds with price in euros .",
            "output": [
                "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM track AS T1 WHERE T1.Track_ID NOT IN ( SELECT T2.Track_ID FROM race AS T2 WHERE T2.Class = \"GT\" )\nFeedback: Remove \"of track table\" phrase from step .",
            "output": [
                "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"
            ]
        },
        {
            "input": "SQL: SELECT StuID FROM Student WHERE Age = 18 INTERSECT SELECT StuID FROM Student WHERE Age = 20\nFeedback: Find Student's student id student id those are present in participates in table and age less than 20.",
            "output": [
                "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM captain\nFeedback: Swap captain table with ship table .",
            "output": [
                "SELECT count(*) FROM ship"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Attribute_Definitions\nFeedback: Find result from attribute definitions table is totally wrong use catalog contents table instead of attribute definitions table .",
            "output": [
                "SELECT count(*) FROM catalog_contents"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Price ) FROM wine WHERE State ! = \"Sonoma\"\nFeedback: county should be take instead of state .",
            "output": [
                "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"
            ]
        },
        {
            "input": "SQL: SELECT T1.catalog_name , T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > 5\nFeedback: Exchange price in pounds with catalog level number in step 2.",
            "output": [
                "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = \"Denmark\"\nFeedback: region name equals Denmark , not region code .",
            "output": [
                "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
            ]
        },
        {
            "input": "SQL: SELECT title FROM course\nFeedback: Also indicate that course's prerequisite course name equals Differential Geometry .",
            "output": [
                "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses WHERE city = \"Lake Geovannyton\"\nFeedback: Instead of addresses table , Use customers table .",
            "output": [
                "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\""
            ]
        },
        {
            "input": "SQL: SELECT T1.supplier_name , Avg ( T2.total_value_purchased ) FROM Suppliers AS T1 JOIN Product_Suppliers AS T2 ON T1.supplier_id = T2.supplier_id GROUP BY T1.supplier_name ORDER BY Avg ( T2.total_value_purchased ) Desc LIMIT 1\nFeedback: Count number of rows for supplier id in product suppliers table , find average total amount purchased , total value purchased for highest count .",
            "output": [
                "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Physician WHERE Name = \"John Dorian\"\nFeedback: Find number of rows of prescribes table whose corresponding Physician's name equals John Dorian",
            "output": [
                "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\""
            ]
        },
        {
            "input": "SQL: SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: There should be inventory table instead of film table in step 1.",
            "output": [
                "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers WHERE other_customer_details = \"Second time\"\nFeedback: Interchange customers table with customer orders table and other customer details with order details .",
            "output": [
                "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\""
            ]
        },
        {
            "input": "SQL: SELECT city FROM Addresses EXCEPT SELECT city FROM Addresses\nFeedback: In step 2 , need to mention that customer id should present in customer addresses table .",
            "output": [
                "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed > 60 INTERSECT SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed = 55\nFeedback: Need to find for country who has two roller coasters with highest speed .",
            "output": [
                "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM actor\nFeedback: Show distinct rating of film table .",
            "output": [
                "SELECT count(DISTINCT rating) FROM film"
            ]
        },
        {
            "input": "SQL: SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) , Avg ( Order_Quantity ) FROM Invoice_Items\nFeedback: invoice items table is wrong . Take invoices table in place of it .",
            "output": [
                "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( strength ) FROM Player_Attributes\nFeedback: Interchange strength with weight , player attributes table with player table .",
            "output": [
                "SELECT avg(weight) FROM Player"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Budgeted ) FROM budget WHERE Year = \"Glenn\"\nFeedback: Instead of year use school name .",
            "output": [
                "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE 99\nFeedback: Confirm that flight number equals 99 not flight number contains 99.",
            "output": [
                "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = \"Tokyo , Japan\"\nFeedback: reign and location should be used instead of name and team respectively .",
            "output": [
                "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM country WHERE country = \"Australia\"\nFeedback: Find number of rows in city table whose country id's corresponding country's country equals Australia .",
            "output": [
                "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM flight\nFeedback: Use aircraft table on behalf of flight table .",
            "output": [
                "SELECT count(*) FROM Aircraft"
            ]
        },
        {
            "input": "SQL: SELECT T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.name = \"ALA synthase\" AND T1.Porphyria = \"Aripiprazole\"\nFeedback: In step 1 , include medicine table , mention that enzyme's name equals ALA synthase and medicine's name equals Aripiprazole .",
            "output": [
                "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"
            ]
        },
        {
            "input": "SQL: SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < 90 INTERSECT SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < 85\nFeedback: Satisfy overall rating less than 90 and greater than 85 in step 2 , preferred foot equals left in step 3.",
            "output": [
                "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Physician\nFeedback: Make sure Physicians have took any employee id .",
            "output": [
                "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID"
            ]
        },
        {
            "input": "SQL: SELECT T2.building , T2.room_number , T2.year FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = \"Psychology\" ORDER BY T1.title Asc\nFeedback: Also find room number , semester , year along with building .",
            "output": [
                "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"
            ]
        },
        {
            "input": "SQL: SELECT Draft_Class , Season FROM match_season WHERE Position = \"Defender\"\nFeedback: It should be draft pick number , not season .",
            "output": [
                "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\""
            ]
        },
        {
            "input": "SQL: SELECT catalog_name FROM Catalogs GROUP BY catalog_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 , change catalog name in catalogs to catalog entry id in catalog contents additional attributes , instep 2 find catalog entry name of catalog contents table instead .",
            "output": [
                "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT Position FROM player WHERE Points > 20\nFeedback: Need to confirm that average points greater than 20.",
            "output": [
                "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Dorm WHERE gender = \"M\"\nFeedback: Need to find for summation of total students living in dorm whose gender equals M .",
            "output": [
                "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM wine WHERE Grape = \"Red\" INTERSECT SELECT Name FROM wine WHERE Price > 50\nFeedback: Replace grape with grapes' color in step 1.",
            "output": [
                "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"
            ]
        },
        {
            "input": "SQL: SELECT * FROM player WHERE Player LIKE \"English\"\nFeedback: Ensure to use country's official native language in place of player table and Exchange player with official native language .",
            "output": [
                "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer\nFeedback: Be sure to find name of manufacturer instead of manufacturer .",
            "output": [
                "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( followers ) FROM user_profiles\nFeedback: Make sure to find for users who have corresponding email in tweets table .",
            "output": [
                "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM city\nFeedback: Find the number of rows of distinct status .",
            "output": [
                "SELECT count(DISTINCT Status) FROM city"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Physician GROUP BY Name HAVING Count ( * ) > 1\nFeedback: Change name in physician physician table with pcp in patient patient table .",
            "output": [
                "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: In step 1 for each staff id in staff department assignments , find difference between date assigned to and date assigned from .",
            "output": [
                "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT id , market_share FROM browser ORDER BY market_share Asc LIMIT 1\nFeedback: Remove \"with smallest value of market share\". Ensure browser's name equals Safari .",
            "output": [
                "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'"
            ]
        },
        {
            "input": "SQL: SELECT Nickname FROM university WHERE Enrollment < ( SELECT Avg ( Enrollment ) FROM university )\nFeedback: nickname of university table is wrong . It should be team name of basketball match table .",
            "output": [
                "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID ORDER BY T2.Time_of_day Asc\nFeedback: Change channel table with program table in step 1 and time of day with launch .",
            "output": [
                "SELECT name FROM program ORDER BY launch"
            ]
        },
        {
            "input": "SQL: SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank\nFeedback: The minimum silver is the right term , not minimum gold .",
            "output": [
                "SELECT max(Silver) ,  min(Silver) FROM club_rank"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Physician\nFeedback: Exchange physician physician table with appointment appointment table .",
            "output": [
                "SELECT count(*) FROM appointment"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.Order_Quantity ) FROM Invoices AS T1 JOIN Invoice_Items AS T2 ON T1.Invoice_ID = T2.Invoice_ID WHERE T1.payment_method_code = \"MasterCard\"\nFeedback: The required parameter is Invoices' order quantity , not Invoice Items's order quantity in step 2.",
            "output": [
                "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = \"white\" OR T1.characteristic_type_description = \"hot\"\nFeedback: Add characteristics in step 1 , exchange reference characteristic types table with products table , characteristic name with color description , characteristic type description with characteristic name .",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Products WHERE Price > 150 OR Manufacturer < 5\nFeedback: Display manufacturers name whose products' average price equals or greater than $ 150.",
            "output": [
                "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT city FROM Addresses\nFeedback: Ensure to find city only for students .",
            "output": [
                "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code WHERE T2.Name = \"Procrastin-X\"\nFeedback: Need to find Nurse's name whose corresponding employee id is present in Undergoes's assisting nurse .",
            "output": [
                "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID"
            ]
        },
        {
            "input": "SQL: SELECT T2.pName , T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID\nFeedback: Also satisfy Tryout's decision equals yes .",
            "output": [
                "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = \"John Williams\"\nFeedback: Add employee table in step 1 , interchange origin with employee's name , ensure employee's employee id present in certificate table .",
            "output": [
                "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
            ]
        },
        {
            "input": "SQL: SELECT id , name , Porphyria FROM enzyme ORDER BY Porphyria Desc\nFeedback: Find id , name and fda approved of medicine table ordered descending by medicine id , Ensure that fda approved equals Yes .",
            "output": [
                "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC"
            ]
        },
        {
            "input": "SQL: SELECT staff_name FROM Staff\nFeedback: Confirm that count of staff id is more than one time in staff department assignments table .",
            "output": [
                "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T1.Name Asc\nFeedback: It should be Nurse's name , not Physician's name in step 2.",
            "output": [
                "SELECT DISTINCT name FROM nurse ORDER BY name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Artist WHERE Name = \"Metallica\"\nFeedback: It should be album table in place of artist table .",
            "output": [
                "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
            ]
        },
        {
            "input": "SQL: SELECT date_of_publication FROM Catalogs GROUP BY catalog_name HAVING Count ( * ) > 1\nFeedback: Interchange catalog name with date of latest revision .",
            "output": [
                "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T2.stadium_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: The game table and stadium id must be replaced by injury accident table and injury accident's id .",
            "output": [
                "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Institution WHERE Type = \"Private\" OR Founded > 1880\nFeedback: Rather than institution table , Use protein table .",
            "output": [
                "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
            ]
        },
        {
            "input": "SQL: SELECT protein_name , common_name FROM protein\nFeedback: Instead of common name use Institution's institution .",
            "output": [
                "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id"
            ]
        },
        {
            "input": "SQL: SELECT id , Trade_Name FROM medicine GROUP BY id HAVING Count ( * ) > = 3\nFeedback: Use medicine id in medicine enzyme interaction table in place of id in medicine table in step 1.",
            "output": [
                "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT name , name FROM employee WHERE salary > 5000 GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Change salary with distance and name , name with name , salary , find number of rows that correspond of certificate .",
            "output": [
                "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.School_name FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.total_budget_percent_budgeted > 100 OR T1.Enrollment > 10\nFeedback: Find correspondence in endowment table , ensure budgeted greater than 100 or amount greater than 10.",
            "output": [
                "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM flight WHERE distance > 2000\nFeedback: There should be flight number to be found not the number of rows of table .",
            "output": [
                "SELECT flno FROM Flight WHERE distance  >  2000"
            ]
        },
        {
            "input": "SQL: SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = 2010\nFeedback: Ensure that semester equals Fall , year equals 2009 but semester not equals Spring , year not equals 2010.",
            "output": [
                "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT Winery , Name , Score FROM wine WHERE Score > 93 ORDER BY Score Asc\nFeedback: Take grape and appelation instead of winery and score , Ensure that ordered ascending by name .",
            "output": [
                "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM takes WHERE year = 2010\nFeedback: Use teaches table in place of takes classes table , Ensure semester equals Spring .",
            "output": [
                "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , year FROM takes GROUP BY year\nFeedback: Need to find number of rows in section table for each semester and each year .",
            "output": [
                "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM repair\nFeedback: Put technician table . The repair table is wrong .",
            "output": [
                "SELECT count(*) FROM technician"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = \"M\" GROUP BY city_code\nFeedback: For each city code need to find average age where Student's sex equals M .",
            "output": [
                "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"
            ]
        },
        {
            "input": "SQL: SELECT name FROM stadium WHERE Country = \"Australia\"\nFeedback: Substitute country with swimmer's nationality .",
            "output": [
                "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'"
            ]
        },
        {
            "input": "SQL: SELECT customer_name , customer_phone , customer_email FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Exchange customers table with customer orders table in step 1.",
            "output": [
                "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions\nFeedback: Replace transaction type , financial transactions table with card type code , customers cards table .",
            "output": [
                "SELECT count(DISTINCT card_type_code) FROM Customers_Cards"
            ]
        },
        {
            "input": "SQL: SELECT candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 , need to find assessment date for each candidate id .",
            "output": [
                "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name , salary FROM instructor WHERE dept_name = \"Math\"\nFeedback: Assure that instructor's id present in advisor table .",
            "output": [
                "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
            ]
        },
        {
            "input": "SQL: SELECT T1.shipping_agent_name , Count ( * ) FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code GROUP BY T2.shipping_agent_code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Use reference shipping agents shipping agent name on behalf of Documents's shipping agent code in step 3.",
            "output": [
                "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM member WHERE Hometown = \"Louisville ,  Kentucky\" INTERSECT SELECT Name FROM member WHERE Hometown = \"Hiram ,  Georgia\"\nFeedback: In step 1 and 2 replace member with branch .",
            "output": [
                "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'"
            ]
        },
        {
            "input": "SQL: SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > 700\nFeedback: Substitute capacity and price in dollars in place of height and price in euros .",
            "output": [
                "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700"
            ]
        },
        {
            "input": "SQL: SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Find employee id of physician physician who is head of department department with smallest number of employee .",
            "output": [
                "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.School_name , T1.Location , T2.donator_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id\nFeedback: Change donator name with mascot in step 2.",
            "output": [
                "SELECT school_name ,  LOCATION ,  mascot FROM school"
            ]
        },
        {
            "input": "SQL: SELECT id FROM Player WHERE height BETWEEN 190 AND 180\nFeedback: Omit \"equals or\" and add \"is\". Also Mention player attributes preferred foot equals left .",
            "output": [
                "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\""
            ]
        },
        {
            "input": "SQL: SELECT Award FROM musical GROUP BY Award HAVING Count ( * ) > 2\nFeedback: Modify award with nominee in both step .",
            "output": [
                "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Manufacturer FROM Products GROUP BY Manufacturer\nFeedback: Need each name of manufacturer and number of corresponding rows in products table .",
            "output": [
                "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM enzyme WHERE Porphyria ! = \"No\"\nFeedback: find the number of rows in medicine table whose fda approved equals No .",
            "output": [
                "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"
            ]
        },
        {
            "input": "SQL: SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = \"marketing\" INTERSECT SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = \"managing\"\nFeedback: Exchange department name with department id and department store chain name with department name in both steps .",
            "output": [
                "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\""
            ]
        },
        {
            "input": "SQL: SELECT Nominee FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: award is wrong use nominee instead of that .",
            "output": [
                "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 2008 AND T1.country = \"Monaco Grand Prix\"\nFeedback: Add results table , Interchange lap with fastest lap speed , 1st country with races's name and 2nd country with year .",
            "output": [
                "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
            ]
        },
        {
            "input": "SQL: SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Change product id with customer id in step 2.",
            "output": [
                "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( total ) FROM invoices WHERE billing_city = \"Chicago\"\nFeedback: also make sure billing state equals IL",
            "output": [
                "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\""
            ]
        },
        {
            "input": "SQL: SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType\nFeedback: should find the number of corresponding rows in has allergy table",
            "output": [
                "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM company\nFeedback: need to find the number of station id of each company",
            "output": [
                "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1\nFeedback: in step 1 , it should be checking instead of savings",
            "output": [
                "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Customer_ID FROM Customers AS T1 EXCEPT SELECT T2.Customer_ID FROM Policies AS T2\nFeedback: should show customer details instead of customer id as they question is asking about the names",
            "output": [
                "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
            ]
        },
        {
            "input": "SQL: SELECT name , Count ( * ) FROM genres GROUP BY name ORDER BY Count ( * ) Desc LIMIT 5\nFeedback: should find genres of tracks",
            "output": [
                "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5"
            ]
        },
        {
            "input": "SQL: SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT 1\nFeedback: in step 2 , remove the summation of amount claimed",
            "output": [
                "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)"
            ]
        },
        {
            "input": "SQL: SELECT milliseconds FROM tracks\nFeedback: should find unit price of tracks whose name equals Fast As a Shark",
            "output": [
                "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\""
            ]
        },
        {
            "input": "SQL: SELECT title FROM albums ORDER BY title Asc\nFeedback: make sure title starts with A",
            "output": [
                "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( duration ) , Sum ( duration ) FROM trip WHERE bike_id = 636\nFeedback: Replace second \"summation of duration\" with \"maximum duration\".",
            "output": [
                "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = \"San Jose\"\nFeedback: It should be latitude in place of one of the longitude .",
            "output": [
                "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
            ]
        },
        {
            "input": "SQL: SELECT Rank , Market_Value , Profits_billion FROM company WHERE Sales_billion = \"Banking\" ORDER BY Sales_billion Asc\nFeedback: Replace profits billion with company , first sales billion with main industry , also add profits billion with sales billion .",
            "output": [
                "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = \"Nancy\" AND T2.last_name = \"Edwards\"\nFeedback: Discard the last part and add reports to equal Nancy Edwards .",
            "output": [
                "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\""
            ]
        },
        {
            "input": "SQL: SELECT zip_code FROM weather WHERE zip_code = 94107 GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: Replace zip code with cloud cover in step 2.",
            "output": [
                "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Age ) FROM Student WHERE Sex = \"F\" AND Sex = \"F\"\nFeedback: Replace Last sex equals F with sex equals M .",
            "output": [
                "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
            ]
        },
        {
            "input": "SQL: SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name\nFeedback: Make sure to count number of pilot's records too .",
            "output": [
                "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name"
            ]
        },
        {
            "input": "SQL: SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = \"Open\"\nFeedback: Replace claim status code with claim status name .",
            "output": [
                "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\""
            ]
        },
        {
            "input": "SQL: SELECT start_date FROM trip EXCEPT SELECT start_date FROM trip WHERE zip_code = 94107\nFeedback: Replace start date with date of weather , step 1 events equal foggy or rained , step 3 replace butnot with and .",
            "output": [
                "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM aircraft\nFeedback: Replace aircraft table with pilot table .",
            "output": [
                "SELECT count(*) FROM pilot"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city ! = \"Palo Alto\"\nFeedback: Replace trip table with status table , duration with bikes available .",
            "output": [
                "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
            ]
        },
        {
            "input": "SQL: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY Avg ( min_humidity ) Asc LIMIT 1\nFeedback: Replace min humidity with mean sea level pressure inches .",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name , city , long FROM station ORDER BY long Asc LIMIT 1\nFeedback: Replace events with date for both .",
            "output": [
                "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1\nFeedback: Make sure to find CHECKING's balance .",
            "output": [
                "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.title , T1.phone , T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.first_name = \"Nancy\" AND T2.last_name = \"Edwards\"\nFeedback: In step 2 , replace customers with employees .",
            "output": [
                "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""
            ]
        },
        {
            "input": "SQL: SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid\nFeedback: Replace customer id with name , also need to find corresponding checking accounts from checking table .",
            "output": [
                "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
            ]
        },
        {
            "input": "SQL: SELECT * FROM candidate\nFeedback: Replace candidate table with people table .",
            "output": [
                "SELECT * FROM people"
            ]
        },
        {
            "input": "SQL: SELECT Company , Main_Industry FROM company EXCEPT SELECT Company , Main_Industry FROM company\nFeedback: Make sure it does not have gas station",
            "output": [
                "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
            ]
        },
        {
            "input": "SQL: SELECT T1.roomName , T2.LastName , T2.CheckIn FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT 1\nFeedback: Need to use rate instead of last name , also need to find check out .",
            "output": [
                "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Avg ( T2.bikes_available ) > 14\nFeedback: Or make sure stations must have installed bikes in December .",
            "output": [
                "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Allergy_Type\nFeedback: There should be student table instead of allergy name table .",
            "output": [
                "SELECT count(*) FROM Student"
            ]
        },
        {
            "input": "SQL: SELECT name FROM station WHERE long < -121.90178200000001 AND city = \"San Jose\" UNION SELECT name FROM station WHERE long > 10 AND city = \"San Jose\"\nFeedback: Need to find bikes available instead of longitude and city does not equals San Jose .",
            "output": [
                "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
            ]
        },
        {
            "input": "SQL: SELECT Min ( Company ) , Max ( Market_Value ) , Avg ( Market_Value ) FROM company\nFeedback: Replace minimum company with minimum market value .",
            "output": [
                "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T2.start_station_id FROM station AS T1 JOIN trip AS T2 WHERE T2.start_date = \"8/%\" GROUP BY T2.start_station_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace name with start station name and start date equals August .",
            "output": [
                "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT roomName FROM Rooms WHERE basePrice < 2 INTERSECT SELECT roomName FROM Rooms WHERE basePrice > 160\nFeedback: Replace base price with beds in step 1 , replace greater with smaller",
            "output": [
                "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'"
            ]
        },
        {
            "input": "SQL: SELECT name FROM tracks EXCEPT SELECT name FROM tracks\nFeedback: In step 1 , name of tracks whose playlists is movies and step 2 , whose playlists is music .",
            "output": [
                "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM invoices WHERE billing_city = \"Chicago\"\nFeedback: also add billing city equals IL .",
            "output": [
                "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT 1\nFeedback: It should be support rate in place of unsure rate .",
            "output": [
                "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = \"Deputy\"\nFeedback: Replace claim status code to policy type code .",
            "output": [
                "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM employees\nFeedback: also need to find total number of people reporting to them .",
            "output": [
                "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace sex in Students table with allergy of has allergy table .",
            "output": [
                "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) < 10\nFeedback: Replace min sea level pressure inches with mean visibility miles .",
            "output": [
                "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"
            ]
        },
        {
            "input": "SQL: SELECT Sex , Count ( * ) FROM Student GROUP BY Sex\nFeedback: Need to find number of students with allergy",
            "output": [
                "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"
            ]
        },
        {
            "input": "SQL: SELECT start_date , duration FROM trip ORDER BY duration Asc LIMIT 1\nFeedback: Find day when gap of max min temperature is smallest , also note difference of temperature .",
            "output": [
                "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT bike_id FROM trip GROUP BY bike_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: consider only trips in zip code equals 94002.",
            "output": [
                "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM sqlite_sequence WHERE seq = \"Billy Cobham\"\nFeedback: Need to find albums released by Billy Cobam",
            "output": [
                "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\""
            ]
        },
        {
            "input": "SQL: SELECT Major FROM Student WHERE Age > 20\nFeedback: Find stuid instead of major .",
            "output": [
                "SELECT StuID FROM Student WHERE age  >  20"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Age ) , Max ( Age ) FROM artist WHERE Country = \"United States\"\nFeedback: Need to replace maximum with minimum .",
            "output": [
                "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Fname , city_code FROM Student WHERE Sex = \"Cat\" OR Sex = \"Milk\"\nFeedback: Need to replace sex with first name for both of has allergy table .",
            "output": [
                "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > 200000\nFeedback: make sure checking customer id greater than savings customer id .",
            "output": [
                "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance"
            ]
        },
        {
            "input": "SQL: SELECT Dependent_name FROM dependent\nFeedback: Make sure to find names of dependent with spouse employee relation .",
            "output": [
                "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'"
            ]
        },
        {
            "input": "SQL: SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > 12\nFeedback: Replace station id with bikes available .",
            "output": [
                "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
            ]
        },
        {
            "input": "SQL: SELECT Major FROM Student ORDER BY Age Asc LIMIT 1\nFeedback: Replace major with stuid , replace smallest with largest .",
            "output": [
                "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )\nFeedback: step 2 , checking table instead of savings table . Step 3 , balance of checking table instead of name .",
            "output": [
                "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < 0.2\nFeedback: There should be support rate instead of unsure rate and oppose rate instead of 0. 2.",
            "output": [
                "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.roomName = \"2010-10-23\" AND T2.LastName = \"SELBIG\" AND T2.LastName = \"CONRAD\"\nFeedback: There should be check in date instead of room name and first name equals SELBIG .",
            "output": [
                "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\""
            ]
        },
        {
            "input": "SQL: SELECT T3.Fname , T3.Sex FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.Allergy = \"Cat\" AND T1.AllergyType = \"Milk\"\nFeedback: Make sure allergy not equals Cat , replace allergy type allergy type with allergy .",
            "output": [
                "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
            ]
        },
        {
            "input": "SQL: SELECT custid , name FROM ACCOUNTS WHERE name < \"Brown\"\nFeedback: Remove last part . and make sure customer checking balance is not more than highest checking balance .",
            "output": [
                "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)"
            ]
        },
        {
            "input": "SQL: SELECT title FROM albums\nFeedback: Need to make sure those albums are of Aerosmith .",
            "output": [
                "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\""
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\"\nFeedback: Also need to make sure that the media type equals MPEG .",
            "output": [
                "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , zip_code FROM trip GROUP BY zip_code\nFeedback: Make sure to find number of rows when max wind speed mph equals 25.",
            "output": [
                "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Reservations WHERE LastName = \"ROY\"\nFeedback: Replace last name with first name , also need to add last name equals SWEAZY with \"and\".",
            "output": [
                "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\""
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc\nFeedback: Make sure only top 3 accounts are needed .",
            "output": [
                "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Name , Count ( * ) FROM artist GROUP BY Name\nFeedback: In place of name in artist table , there should be exhibition id in exhibition table .",
            "output": [
                "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id"
            ]
        },
        {
            "input": "SQL: SELECT start_date FROM trip ORDER BY duration Desc LIMIT 1\nFeedback: Replace start date with id , duration with dock count .",
            "output": [
                "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , Count ( * ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID GROUP BY T1.Representative_ID\nFeedback: Also need to find party name .",
            "output": [
                "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Movies\" INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Music\"\nFeedback: Replace genres's name with playlists's name in both step 2 and 4.",
            "output": [
                "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Sex = \"Cat\"\nFeedback: Replace student with has allergy , replace sex with allergy .",
            "output": [
                "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
            ]
        },
        {
            "input": "SQL: SELECT Fname , LName FROM Student WHERE Sex = \"F\"\nFeedback: Also need to find ages for student .",
            "output": [
                "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T2.genre_id HAVING Sum ( T2.milliseconds ) > 100\nFeedback: Need to find playlist list .",
            "output": [
                "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100"
            ]
        },
        {
            "input": "SQL: SELECT start_date FROM trip WHERE duration > 384 AND duration > 60\nFeedback: Replace start date with id , duration with average mean temperature of weather , include zip code and omit last part .",
            "output": [
                "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name LIKE \"Led\"\nFeedback: Need to make sure name is from artist table .",
            "output": [
                "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM station AS T1 EXCEPT SELECT T1.name FROM station AS T1 JOIN trip AS T2 WHERE T1.city = \"Palo Alto\" AND T2.duration > 100\nFeedback: Remove step 4 , and replace duration with end station name , end station name less than or equal to 100.",
            "output": [
                "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"
            ]
        },
        {
            "input": "SQL: SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > 100 INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < 500\nFeedback: step 2: attendance less than 100 and step 4:Attendance greater than 500.",
            "output": [
                "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Oppose_rate > 0.43\nFeedback: Need to find oppose rate of candidate . No need of greater than part .",
            "output": [
                "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM albums AS T1 JOIN media_types AS T2 JOIN tracks AS T3 ON T1.id = T3.album_id AND T3.media_type_id = T2.id WHERE T2.name = \"Balls to the Wall\"\nFeedback: Replace \"media types's name\" with \"tracks's name\".",
            "output": [
                "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\""
            ]
        },
        {
            "input": "SQL: SELECT Company , Sales_billion FROM company ORDER BY Sales_billion Desc LIMIT 1\nFeedback: Replace sales billion with main industry and find largest value of market value instead of sales billion .",
            "output": [
                "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Major FROM Student GROUP BY Major HAVING Count ( * ) > = 2\nFeedback: Replace major with stuid , and find allergy in has allergy instead of major in student table .",
            "output": [
                "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT city , Max ( long ) FROM station GROUP BY city\nFeedback: Replace longitude with latitude .",
            "output": [
                "SELECT city ,  max(lat) FROM station GROUP BY city"
            ]
        },
        {
            "input": "SQL: SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.CheckIn = \"TRACHSEL\" AND T2.LastName = \"SELBIG\" INTERSECT SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = \"2010-09-21\" AND T2.LastName = \"DAMIEN\"\nFeedback: Find kids instead of decor , check in equals 2010 09 21 , whose full name equals DAMIEN TRACHSEL .",
            "output": [
                "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\""
            ]
        },
        {
            "input": "SQL: SELECT T1.roomName , T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.basePrice > 160 AND T2.Adults > 2\nFeedback: There should be room id instead of decor .",
            "output": [
                "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2"
            ]
        },
        {
            "input": "SQL: SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc LIMIT 3\nFeedback: Replace market value by assets billion .",
            "output": [
                "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc\nFeedback: Show balance of saving and checking . Order descending with summation of checking and savings balances",
            "output": [
                "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM trip WHERE start_date = \"Mountain View\" AND end_date = \"Palo Alto\"\nFeedback: Make sure start point is Mountain View name and end point is Palo Alto name .",
            "output": [
                "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
            ]
        },
        {
            "input": "SQL: SELECT billing_state , Count ( * ) FROM invoices GROUP BY billing_state\nFeedback: Make sure to find number of rows of invoices .",
            "output": [
                "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\"\nFeedback: Make sure they are on MPEG audio files .",
            "output": [
                "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\""
            ]
        },
        {
            "input": "SQL: SELECT Claim_Outcome_Code FROM Claims_Processing GROUP BY Claim_Outcome_Code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace claim outcome code with claim status name in claims processing stages for both .",
            "output": [
                "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.id FROM station AS T1 WHERE T1.long > 37.4 INTERSECT SELECT T2.station_id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.long < 7\nFeedback: Replace longitude with latitude , step 3: Replace longitude with bikes available , make sure more than or quals 7 bike available .",
            "output": [
                "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = \"Eduardo\" AND T2.last_name = \"Martins\"\nFeedback: Replace employees's first name with customers's company .",
            "output": [
                "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Allergy_Type\nFeedback: Need to count number of students , also make sure allergy name equals food .",
            "output": [
                "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
            ]
        },
        {
            "input": "SQL: SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles > 80\nFeedback: Replace min dew point f with date and min visibility miles greater than 80\" with max temperature f equals 80\".",
            "output": [
                "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code\nFeedback: Replace trip table with weather table and duration with mean temperature f , Make sure specific for august .",
            "output": [
                "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
            ]
        },
        {
            "input": "SQL: SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\"\nFeedback: Also need to add checking table with savings .",
            "output": [
                "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.End_Date Desc LIMIT 1\nFeedback: Replace end date with start date .",
            "output": [
                "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"
            ]
        },
        {
            "input": "SQL: SELECT LName , Age FROM Student WHERE Sex = \"Milk\" INTERSECT SELECT LName , Age FROM Student WHERE Sex = \"Cat\"\nFeedback: Replace sex with allergy in both steps .",
            "output": [
                "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM exhibition WHERE Year > 2004 OR Year > 2005\nFeedback: There should be year equals 2005 instead of greater than 2004.",
            "output": [
                "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM employees GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace first name in employees table with support rep id in customers .",
            "output": [
                "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM people WHERE Height > 190 OR Height > 200\nFeedback: Replace \"Height greater than 190\" with \"Height less than 190\".",
            "output": [
                "SELECT name FROM people WHERE height  >  200 OR height  <  190"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Rooms\nFeedback: Make sure to find number of beds for which bed Type equals king .",
            "output": [
                "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'"
            ]
        },
        {
            "input": "SQL: SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room GROUP BY T2.Room ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to find highest number of reservations instead of decor .",
            "output": [
                "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T2.start_station_name FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id ORDER BY Count ( * ) Asc LIMIT 3\nFeedback: Replace name with the end station name .",
            "output": [
                "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Company FROM company\nFeedback: In place of company , it should be main industry .",
            "output": [
                "SELECT DISTINCT main_industry FROM company"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Participant_ID FROM Participants_in_Events\nFeedback: Make sure participants attended at least one event .",
            "output": [
                "SELECT count(DISTINCT participant_id) FROM participants_in_Events"
            ]
        },
        {
            "input": "SQL: SELECT * FROM Allergy_Type AS T1 EXCEPT SELECT T2.StuID FROM Student AS T2\nFeedback: Replace allergy name table with has allergy table and interchange words step 1 and step 2 in step 3.",
            "output": [
                "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
            ]
        },
        {
            "input": "SQL: SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT 1\nFeedback: Make sure the highest balance should be of checking table .",
            "output": [
                "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT start_station_id FROM trip ORDER BY duration Asc LIMIT 1\nFeedback: Replace start station id with id .",
            "output": [
                "SELECT id FROM trip ORDER BY duration LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name , Count ( * ) FROM genres GROUP BY name\nFeedback: Make sure to find total number of tracks .",
            "output": [
                "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Claim_Headers WHERE Claim_Type_Code = \"Handphone Subsidy\"\nFeedback: Need to find total number of claim stage id in claims processing stages instead of claim type code equals Handphone Subsidy .",
            "output": [
                "SELECT count(*) FROM claims_processing_stages"
            ]
        },
        {
            "input": "SQL: SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Make sure state is one of the US country .",
            "output": [
                "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Customer_ID FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = \"Uniform\" OR T3.Claim_Status_Code = \"Deputy\"\nFeedback: Replace customer id with customer details and claim status code of claim headers with policy type code of policies table .",
            "output": [
                "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""
            ]
        },
        {
            "input": "SQL: SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc\nFeedback: Replace candidate id with support rate , unsure rate with consider rate .",
            "output": [
                "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id\nFeedback: need to final longitude of station as well",
            "output": [
                "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = \"F\" OR T1.AllergyType = \"Milk\"\nFeedback: Replace \"or\" between sex and allergy name with \"and\" , make sure allergy name equals Milk or egg",
            "output": [
                "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
            ]
        },
        {
            "input": "SQL: SELECT date FROM weather ORDER BY min_humidity Desc LIMIT 5\nFeedback: There should be cloud cover instead of min humidity and also find cloud cover rates .",
            "output": [
                "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
            ]
        },
        {
            "input": "SQL: SELECT T1.seq FROM sqlite_sequence AS T1 JOIN tracks AS T2 WHERE T2.name = \"Fast As a Shark\"\nFeedback: Need to replace name with composer .",
            "output": [
                "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Sex ) FROM Student\nFeedback: Replace sex with first name , student table with allergy name table .",
            "output": [
                "SELECT count(DISTINCT allergytype) FROM Allergy_type"
            ]
        },
        {
            "input": "SQL: SELECT city , Count ( * ) FROM employees WHERE city = \"IT Staff\" GROUP BY city\nFeedback: Replace city with title in 1st step , also need to find numbers of employees .",
            "output": [
                "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT 1\nFeedback: Remove CHECKING's customer id and make sure to find addition of SAVING's and CHECKING's customer id .",
            "output": [
                "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT roomName , decor FROM Rooms ORDER BY basePrice Asc LIMIT 1\nFeedback: Replace decor with base price .",
            "output": [
                "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT date FROM weather WHERE min_temperature_f > 85\nFeedback: Replace min temperature f with max temperature f .",
            "output": [
                "SELECT date FROM weather WHERE max_temperature_f  >  85"
            ]
        },
        {
            "input": "SQL: SELECT T2.Location FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID WHERE T1.Sales_billion > 100\nFeedback: Replace sales billion with market value .",
            "output": [
                "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT name FROM station EXCEPT SELECT DISTINCT name FROM station\nFeedback: Remove step 2 and 3 , and make sure station had or have 7 bikes available .",
            "output": [
                "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
            ]
        },
        {
            "input": "SQL: SELECT Position FROM pilot WHERE Join_Year > 2000 INTERSECT SELECT Position FROM pilot WHERE Join_Year < 2005\nFeedback: Make sure join year less than 2000 and greater than 2005.",
            "output": [
                "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Age > 18 AND Sex = \"food\" EXCEPT SELECT Sex FROM Student WHERE Age > 18\nFeedback: find allergy name not quals to food or animal instead of sex , remove step 2 and 3.",
            "output": [
                "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
            ]
        },
        {
            "input": "SQL: SELECT name FROM tracks\nFeedback: Replace tracks with playlists .",
            "output": [
                "SELECT name FROM playlists"
            ]
        },
        {
            "input": "SQL: SELECT T1.id , T1.name FROM station AS T1 JOIN trip AS T2 WHERE T2.duration > = 200\nFeedback: Replace station with trip , name with start station name .",
            "output": [
                "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
            ]
        },
        {
            "input": "SQL: SELECT Customer_Details FROM Customers GROUP BY Customer_Details ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Make sure the customer has maximum number of policies .",
            "output": [
                "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Event_ID , Event_Details FROM Events GROUP BY Event_ID HAVING Count ( * ) > 1\nFeedback: Replace event id in events table with event id in participants in events .",
            "output": [
                "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Allergy_Type\nFeedback: Make sure it has allergy type equal to animal .",
            "output": [
                "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( total ) , Sum ( total ) FROM invoices\nFeedback: Replace \"summation of total with number of rows of invoices table .",
            "output": [
                "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\""
            ]
        },
        {
            "input": "SQL: SELECT start_date FROM trip WHERE duration BETWEEN 31 AND 30.3\nFeedback: Replace start date of trip table with time of weather , replace longitude equals with mean sea level pressure inches .",
            "output": [
                "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Allergy_Type\nFeedback: Replace allergy type allergy type table with student table .",
            "output": [
                "SELECT count(DISTINCT advisor) FROM Student"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Adults ) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\"\nFeedback: Need to replace adults with kids .",
            "output": [
                "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\""
            ]
        },
        {
            "input": "SQL: SELECT Headquarters FROM company EXCEPT SELECT Headquarters FROM company WHERE Company = \"Banking\"\nFeedback: Need to make sure company not equals NULL , also company should be from banking industry .",
            "output": [
                "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Participants WHERE Participant_Details = \"Dr.\"\nFeedback: Replace equals with contains .",
            "output": [
                "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM employees GROUP BY state ORDER BY Count ( * ) Desc LIMIT 10\nFeedback: Make sure to replace state with hire date . step 1 is unneeded",
            "output": [
                "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10"
            ]
        },
        {
            "input": "SQL: SELECT Headquarters FROM company WHERE Main_Industry = \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Company = \"Oil and gas\"\nFeedback: Replace company with main industry .",
            "output": [
                "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"
            ]
        },
        {
            "input": "SQL: SELECT start_date FROM trip\nFeedback: Replace start date with installation date , need to make sure it has end station id .",
            "output": [
                "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( milliseconds ) FROM tracks\nFeedback: Make sure name of track is Fast As a Shark .",
            "output": [
                "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\""
            ]
        },
        {
            "input": "SQL: SELECT T2.start_station_id , T1.name , T2.subscription_type FROM station AS T1 JOIN trip AS T2\nFeedback: Replace start station id with duration , subscription type of trip with latitude of station table , add end station id .",
            "output": [
                "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.last_name = \"Lucas\"\nFeedback: Replace employees table with invoices , hire date with total of invoices , make sure customer's fullname equals Lucas Mancini .",
            "output": [
                "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT AllergyType FROM Allergy_Type\nFeedback: Make sure allergy type allergy type quals to food .",
            "output": [
                "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM station WHERE long < 37.5\nFeedback: Replace longitude with latitude .",
            "output": [
                "SELECT name FROM station WHERE lat  <  37.5"
            ]
        },
        {
            "input": "SQL: SELECT id , name FROM architect GROUP BY id HAVING Count ( * ) > = 3\nFeedback: Replace architect table with bridge table and id with architect id in step 1",
            "output": [
                "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT Firstname , Lastname FROM Band WHERE Firstname = \"Le Pop\"\nFeedback: In last part , there should be title of songs instead of first name .",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Document_Types\nFeedback: There should be projects table instead of documents with expenses table .",
            "output": [
                "SELECT count(*) FROM Projects"
            ]
        },
        {
            "input": "SQL: SELECT T1.DName FROM Department AS T1 WHERE T1.DNO NOT IN ( SELECT T2.Major FROM Student AS T2 )\nFeedback: Replace instructor with room , student table with minor in table .",
            "output": [
                "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO"
            ]
        },
        {
            "input": "SQL: SELECT Famous_Title FROM artist WHERE Famous_Release_date = \"Triumfall\"\nFeedback: Replace famous release date with artist .",
            "output": [
                "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\""
            ]
        },
        {
            "input": "SQL: SELECT problem_id FROM Problem_Log WHERE log_entry_date > \"1978-06-26\"\nFeedback: Replace log entry date with date problem reported .",
            "output": [
                "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\""
            ]
        },
        {
            "input": "SQL: SELECT bedType , roomName FROM Rooms\nFeedback: Make sure decor equals traditional .",
            "output": [
                "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\""
            ]
        },
        {
            "input": "SQL: SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 24000 AND T1.JOB_TITLE = \"PU_MAN\"\nFeedback: Also find job title , employee id , Make sure salary greater than those employee whose job title equals PU MAN .",
            "output": [
                "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )"
            ]
        },
        {
            "input": "SQL: SELECT Document_Type_Name , Document_Type_Name , Document_Type_Description FROM Ref_Document_Types\nFeedback: Replace first document type name with document type code , also make sure to find for distinct documents .",
            "output": [
                "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types"
            ]
        },
        {
            "input": "SQL: SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees\nFeedback: Also find salary of employees table , Make sure those employees does not pay for commission .",
            "output": [
                "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\""
            ]
        },
        {
            "input": "SQL: SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations\nFeedback: Find number of rows of summation of adults and kids whose max occupancy is maximum .",
            "output": [
                "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids"
            ]
        },
        {
            "input": "SQL: SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = \"Badlands\"\nFeedback: Make sure to add stage position of performance table equals back stage .",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Product WHERE product_name = \"voluptatem\"\nFeedback: Need to find number of problems for \"voluptatem\".",
            "output": [
                "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.date_problem_closed > \"1986-11-13\" GROUP BY T1.product_id\nFeedback: Replace date problem closed with date problem reported .",
            "output": [
                "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.asset_details Asc\nFeedback: Also find asset make , asset model , asset details , remove chergeable amount and replace asset details with asset disposed date .",
            "output": [
                "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC"
            ]
        },
        {
            "input": "SQL: SELECT Project_ID FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = 2\nFeedback: Replace projects table with documents table in step 1.",
            "output": [
                "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T1.Name , T2.Hours FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T1.Name Asc\nFeedback: Make sure find Projects's name before Scientists's name .",
            "output": [
                "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Vocals WHERE Type = \"Le Pop\"\nFeedback: Find number of type of vocals table and replace type with title of songs table .",
            "output": [
                "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = \"Der Kapitan\"\nFeedback: Make sure that artist performed back stage .",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\""
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID WHERE T2.Competition = \"Friendly match\" AND T2.Competition = \"1994 FIFA World Cup qualification\"\nFeedback: Replace city with match id of hosting city and remove competition equals Friendly match\".",
            "output": [
                "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\""
            ]
        },
        {
            "input": "SQL: SELECT Fname , LName FROM Student WHERE Major = \"Bootup Baltimore\"\nFeedback: Replace major with club name of club table , and need to make sure major equals 600.",
            "output": [
                "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM PersonFriend WHERE friend = \"Bob\"\nFeedback: There should be person table instead of person friend table .",
            "output": [
                "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Products\nFeedback: Replace products table with customers table . and find the total number of customers .",
            "output": [
                "SELECT count(*) FROM customers"
            ]
        },
        {
            "input": "SQL: SELECT gradepoint , gradepoint FROM Gradeconversion WHERE lettergrade LIKE \"A\"\nFeedback: Replace grade point , grade point with \"maximum and minimum of grade point , need to find for all letter grade .",
            "output": [
                "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Person WHERE job = \"Alice\" AND gender = \"female\"\nFeedback: Replace name of persontable and job with friend of person friend and name of Persontable respectively .",
            "output": [
                "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"
            ]
        },
        {
            "input": "SQL: SELECT * FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )\nFeedback: Replace employee id of job history with department id of employees , step 2: condition should be \"not result of step 1 .",
            "output": [
                "SELECT * FROM employees WHERE department_id  =  \"null\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM Person WHERE job = \"Zach\" AND gender = \"female\"\nFeedback: Replace job with PersonFriend's friend .",
            "output": [
                "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'"
            ]
        },
        {
            "input": "SQL: SELECT T1.log_entry_description FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"\nFeedback: Replace log entry description with problem id , Make sure to show log entry description .",
            "output": [
                "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM city AS T1 WHERE T1.City_ID > 1 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008\nFeedback: Step 1:replace last part with mar lower than dec of temperaturetable . Step 3:instead of last part add who have hosted .",
            "output": [
                "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT city ) FROM Person\nFeedback: Replace city with job .",
            "output": [
                "SELECT count(DISTINCT job) FROM Person"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Document_Types\nFeedback: Need to count locations from reference locations table .",
            "output": [
                "SELECT count(*) FROM Ref_locations"
            ]
        },
        {
            "input": "SQL: SELECT T1.FIRST_NAME , T1.LAST_NAME , T2.STATE_PROVINCE FROM employees AS T1 JOIN locations AS T2\nFeedback: Make sure to display department name , city .",
            "output": [
                "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Reservations WHERE CheckIn = \"King\"\nFeedback: Replace reservations table with rooms table , check in with bed Type .",
            "output": [
                "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\""
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = \"Shanghai\" AND T2.Year = 2008\nFeedback: Remove year part , and find jan of temperature table .",
            "output": [
                "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Person WHERE age > \"engineer\"\nFeedback: Make sure to find the total number of people .",
            "output": [
                "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
            ]
        },
        {
            "input": "SQL: SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = \"Heilo\"\nFeedback: Need to make Songs's title equals Badlands .",
            "output": [
                "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\""
            ]
        },
        {
            "input": "SQL: SELECT City FROM city WHERE Regional_Population > 10000000 OR Regional_Population < 5000000\nFeedback: Replace 5000000 with 8000000 and 10000000 with 5000000.",
            "output": [
                "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000"
            ]
        },
        {
            "input": "SQL: SELECT Type , High_Estimate FROM film_market_estimation\nFeedback: Replace type with low estimate .",
            "output": [
                "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation"
            ]
        },
        {
            "input": "SQL: SELECT DEPARTMENT_ID FROM departments GROUP BY DEPARTMENT_ID HAVING Count ( * ) > = 4\nFeedback: Replace department id in departments table with manager id in employees table . find distinct value of department id .",
            "output": [
                "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Major = \"B\"\nFeedback: Make sure to count number of students , and replace major with Enrolled in's grade .",
            "output": [
                "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\""
            ]
        },
        {
            "input": "SQL: SELECT Fname , Lname FROM Faculty ORDER BY Rank Desc LIMIT 3\nFeedback: Make sure to find number of courses instead of rank .",
            "output": [
                "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Document_Types\nFeedback: Replace documents with expenses with reference document types . find the total of reference document types .",
            "output": [
                "SELECT count(*) FROM Documents_with_expenses"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Person WHERE age > 30\nFeedback: Make sure only to count number of engineers .",
            "output": [
                "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'"
            ]
        },
        {
            "input": "SQL: SELECT name , Count ( * ) FROM airport GROUP BY name\nFeedback: Make sure to find operating companies in airline industry .",
            "output": [
                "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id"
            ]
        },
        {
            "input": "SQL: SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = \"Finance\"\nFeedback: Replace salary with job id .",
            "output": [
                "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'"
            ]
        },
        {
            "input": "SQL: SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = \"D\" ORDER BY T1.MIN_SALARY Desc\nFeedback: find information about employees whose first name contains D or S . Replace last min salary with salary .",
            "output": [
                "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.Grade ) FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = \"Smith\"\nFeedback: Replace enrolled in table with grade conversion table , grade with grade point .",
            "output": [
                "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\""
            ]
        },
        {
            "input": "SQL: SELECT asset_id , asset_details , other_asset_details FROM Assets\nFeedback: Remove other part details , add asset make and asset model .",
            "output": [
                "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = \"Alice\"\nFeedback: Make sure friends are of all Alice's friends .",
            "output": [
                "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'"
            ]
        },
        {
            "input": "SQL: SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Champlin\" AND T2.staff_first_name = \"Lacey\" INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Kenton\"\nFeedback: In step 3 , replace step3 with step 1 , staff full name equals Lacey Bosco and Kenton Champlin .",
            "output": [
                "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , bedType FROM Rooms GROUP BY bedType\nFeedback: Replace bed Type with decor , should be corresponding rows to each value of bed Type equals King .",
            "output": [
                "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor"
            ]
        },
        {
            "input": "SQL: SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID\nFeedback: Need to make sure employees authorised destruction and destroyed corresponding documents .",
            "output": [
                "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id"
            ]
        },
        {
            "input": "SQL: SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name ! = \"Human Resource\"\nFeedback: Make sure role name equals Human Resource or Manager .",
            "output": [
                "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\""
            ]
        },
        {
            "input": "SQL: SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = \"Clara\"\nFeedback: Replace city with first name .",
            "output": [
                "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")"
            ]
        },
        {
            "input": "SQL: SELECT * FROM regions\nFeedback: Need to find all the rows for managers .",
            "output": [
                "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id"
            ]
        },
        {
            "input": "SQL: SELECT Date_of_ceremony FROM music_festival GROUP BY Music_Festival HAVING Count ( * ) > 2\nFeedback: Replace music festival with weeks on top , music festival table with volume table .",
            "output": [
                "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2"
            ]
        },
        {
            "input": "SQL: SELECT T2.ClubName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T1.Fname = \"Davis\"\nFeedback: Add last name equals Steven .",
            "output": [
                "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Employee_ID FROM Employees AS T1 EXCEPT SELECT T2.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T2\nFeedback: Replace destroyed by employee id with destruction authorised by employee id .",
            "output": [
                "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
            ]
        },
        {
            "input": "SQL: SELECT * FROM employees ORDER BY SALARY Asc LIMIT 2500\nFeedback: Make sure salary in range of smallest salary to 2500 and remove 2nd step .",
            "output": [
                "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500"
            ]
        },
        {
            "input": "SQL: SELECT name , age FROM Person ORDER BY gender Asc\nFeedback: Should find only for male gender , replace gender with age .",
            "output": [
                "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Person WHERE city = \"new york city\"\nFeedback: There should be person friend table instead of person table .",
            "output": [
                "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = 520\nFeedback: Replace department name with department number .",
            "output": [
                "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520"
            ]
        },
        {
            "input": "SQL: SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT 1\nFeedback: Replace volume with song .",
            "output": [
                "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Fname = \"Bootup Baltimore\" AND Age > 18\nFeedback: Replace first name with club name .",
            "output": [
                "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18"
            ]
        },
        {
            "input": "SQL: SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Instead of last name in band table , it should be bandmate of performance table .",
            "output": [
                "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Person EXCEPT SELECT name FROM Person\nFeedback: Replace person table with person friend in step 2.",
            "output": [
                "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'"
            ]
        },
        {
            "input": "SQL: SELECT FIRST_NAME , LAST_NAME FROM employees WHERE FIRST_NAME LIKE \"z\"\nFeedback: Also find city of Location table .",
            "output": [
                "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Fname = \"Tracy\" AND LName = \"Kim\"\nFeedback: Should count total number of clubs .",
            "output": [
                "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\""
            ]
        },
        {
            "input": "SQL: SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.SALARY FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = \"London\"\nFeedback: Make sure employee working in departments .",
            "output": [
                "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Artist ) FROM artist\nFeedback: Need to make sure artists have volumes .",
            "output": [
                "SELECT COUNT(DISTINCT Artist_ID) FROM volume"
            ]
        },
        {
            "input": "SQL: SELECT HIRE_DATE FROM employees WHERE FIRST_NAME ! = \"M\"\nFeedback: There should be first name does not contains letter M instead of first name not equals M .",
            "output": [
                "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
            ]
        },
        {
            "input": "SQL: SELECT DEPARTMENT_NAME FROM departments GROUP BY DEPARTMENT_NAME HAVING Count ( * ) > = 1\nFeedback: Need to make sure departments have one or more employee",
            "output": [
                "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = \"CV\"\nFeedback: Also add \"or document type code equals BK\" at last .",
            "output": [
                "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Room FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Rank = \"Professor\" AND T1.Building = \"NEB\"\nFeedback: There should be Faculty's room instead of Department's room .",
            "output": [
                "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\""
            ]
        },
        {
            "input": "SQL: SELECT City FROM city ORDER BY Regional_Population Desc LIMIT 1\nFeedback: Replace city with gdp .",
            "output": [
                "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Industry FROM Companies ORDER BY Industry Desc\nFeedback: Replace \"descending by Industry\" with \"descending by number of companies\"",
            "output": [
                "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID FROM Documents WHERE Document_Description = \"Government\"\nFeedback: Replace document description with budget type description .",
            "output": [
                "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\""
            ]
        },
        {
            "input": "SQL: SELECT maintenance_contract_company_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id\nFeedback: Should find corresponding rows to each value of assets .",
            "output": [
                "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id"
            ]
        },
        {
            "input": "SQL: SELECT EMAIL FROM employees WHERE SALARY > = 12000 AND SALARY < = 7000\nFeedback: Make sure commission pct equals 0 and department id equals 50.",
            "output": [
                "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
            ]
        },
        {
            "input": "SQL: SELECT * FROM jobs WHERE MIN_SALARY > 20000 INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > 12000\nFeedback: Replace \"greater than 20000\" with \"equals 12000\" , step 2 should find all the rows",
            "output": [
                "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > \"engineer\" GROUP BY T2.friend HAVING Count ( * ) > = 1\nFeedback: The steps are completely unrelated to questions . Hence all the steps are defective .",
            "output": [
                "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age"
            ]
        },
        {
            "input": "SQL: SELECT Title FROM Songs GROUP BY Title ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace title in songs table with type in vocals .",
            "output": [
                "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT COUNTRY_ID , COUNTRY_NAME FROM countries\nFeedback: Replace country id with employee id , make sure employees work in that country .",
            "output": [
                "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"
            ]
        },
        {
            "input": "SQL: SELECT Author , Scores FROM submission\nFeedback: Also find result of acceptance table instead of scores .",
            "output": [
                "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID FROM Documents WHERE Document_Type_Code = \"SF\"\nFeedback: Replace documents table with documents with expenses table , document type code with budget type code .",
            "output": [
                "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'"
            ]
        },
        {
            "input": "SQL: SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_end_date Asc LIMIT 1\nFeedback: Replace contract end date with contract start date .",
            "output": [
                "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Venue FROM match WHERE Competition = \"Nanjing ( Jiangsu )\" AND Score = \"1994 FIFA World Cup qualification\"\nFeedback: Replace Nanjing(Jiangsu ) with 1994 FIFA World Cup qualification\" and hosting city equals \"Nanjing(Jiangsu )\".",
            "output": [
                "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student\nFeedback: Replace student table with course , find course whose credits greater than 2.",
            "output": [
                "SELECT count(*) FROM COURSE WHERE Credits  >  2"
            ]
        },
        {
            "input": "SQL: SELECT T2.Country , T3.Year FROM film AS T1 JOIN market AS T2 JOIN film_market_estimation AS T3 ON T1.Film_ID = T3.Film_ID AND T3.Market_ID = T2.Market_ID AND T1.Film_ID = T3.Film_ID WHERE T1.Title = \"ET the Extra-Terrestrial\"\nFeedback: Remove title equals ET the Extra Terrestrial part .",
            "output": [
                "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID"
            ]
        },
        {
            "input": "SQL: SELECT T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code WHERE T1.Location_Name = \"Brazil\" AND T1.Location_Name = \"Robin CV\"\nFeedback: Replace reference locations with all documents , also find date in location from , replace location name with document name , remove location name equals Brazil",
            "output": [
                "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Title ) FROM Songs\nFeedback: Make sure they have shared vocals .",
            "output": [
                "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\""
            ]
        },
        {
            "input": "SQL: SELECT Host_City FROM hosting_city ORDER BY Year Desc\nFeedback: Replace host city with venue , hosting city table with match table , year with date .",
            "output": [
                "SELECT venue FROM MATCH ORDER BY date DESC"
            ]
        },
        {
            "input": "SQL: SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > 2\nFeedback: Need to make sure project has more than two documents .",
            "output": [
                "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"
            ]
        },
        {
            "input": "SQL: SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = \"Le Pop\" AND T1.Lastname = \"Heilo\"\nFeedback: Replace band with songs in step 1 , replace second \"Lastname\" with title in step 2.",
            "output": [
                "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\""
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM Maintenance_Engineers EXCEPT SELECT first_name , last_name FROM Maintenance_Engineers\nFeedback: Make sure engineers did not visited to maintain the assets . remove step 2 and 3.",
            "output": [
                "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)"
            ]
        },
        {
            "input": "SQL: SELECT name , Count ( * ) FROM Companies GROUP BY Industry\nFeedback: Should find corresponding rows to each value of name .",
            "output": [
                "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry"
            ]
        },
        {
            "input": "SQL: SELECT FirstName , LastName FROM Reservations WHERE Rate > 0\nFeedback: Make sure rate is greater than Rooms' base price .",
            "output": [
                "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Document_Types\nFeedback: Need to find summation of employees .",
            "output": [
                "SELECT count(*) FROM Employees"
            ]
        },
        {
            "input": "SQL: SELECT gender , Count ( * ) FROM Person GROUP BY gender\nFeedback: Should ask to make sure that the age of person in below 40.",
            "output": [
                "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender"
            ]
        },
        {
            "input": "SQL: SELECT id , name , nationality FROM architect GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: There should be mill table instead of architect table in step 1.",
            "output": [
                "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Fname FROM Student EXCEPT SELECT Fname FROM Student\nFeedback: Replace first name with student id for both , step 2 student with enrolled in , find first name in step 3",
            "output": [
                "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"
            ]
        },
        {
            "input": "SQL: SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date\nFeedback: Replace actual destruction date with date stored .",
            "output": [
                "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date"
            ]
        },
        {
            "input": "SQL: SELECT name FROM buildings GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace name of building table with company id of office locations in step 1.",
            "output": [
                "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT MIN_SALARY FROM jobs WHERE MAX_SALARY > 300\nFeedback: Find job history's job id which are done more than once with duration more than 300 days",
            "output": [
                "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2"
            ]
        },
        {
            "input": "SQL: SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees GROUP BY EMPLOYEE_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace employee id with salary , step 2:Replace employee id with department id and also find salary .",
            "output": [
                "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T2.length_feet > 80\nFeedback: Replace architect's name and length feet with mill's name and length meters respectively .",
            "output": [
                "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80"
            ]
        },
        {
            "input": "SQL: SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )\nFeedback: Make sure song does not contain lead vocal .",
            "output": [
                "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM workshop\nFeedback: There should be submission table instead of workshop table .",
            "output": [
                "SELECT count(*) FROM submission"
            ]
        },
        {
            "input": "SQL: SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Adults Desc LIMIT 1\nFeedback: Replace adults with max occupancy .",
            "output": [
                "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Kids ) FROM Reservations\nFeedback: find the number of raws of rooms which are not reserved in this inn .",
            "output": [
                "SELECT count(*) FROM Rooms"
            ]
        },
        {
            "input": "SQL: SELECT T3.EMPLOYEE_ID , T2.JOB_TITLE FROM departments AS T1 JOIN jobs AS T2 JOIN employees AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID AND T3.JOB_ID = T2.JOB_ID AND T1.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = 80\nFeedback: Replace department name with department id .",
            "output": [
                "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80"
            ]
        },
        {
            "input": "SQL: SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )\nFeedback: Make sure that songs does not have a back vocal .",
            "output": [
                "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Songs WHERE Title = \"Badlands\"\nFeedback: Also , need to find the different instrument instruments from instrument instruments table .",
            "output": [
                "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\""
            ]
        },
        {
            "input": "SQL: SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 OR T1.MAX_SALARY < 12000\nFeedback: Replace max salary with salary , \u00f6r\"with \u00e4nd \" , which commission pct not null or department id not 40.",
            "output": [
                "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM flight WHERE Pilot ! = \"Thompson\"\nFeedback: Need to count airports .",
            "output": [
                "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' )"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT 1\nFeedback: Need to find scientist not working on a project with maximum hours",
            "output": [
                "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"
            ]
        },
        {
            "input": "SQL: SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MIN_SALARY ) FROM jobs AS T2 )\nFeedback: Replace min salary with salary .",
            "output": [
                "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)"
            ]
        },
        {
            "input": "SQL: SELECT T2.problem_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\" AND T2.date_problem_closed > 1995\nFeedback: Replace date problem closed with date problem reported .",
            "output": [
                "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\""
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City ORDER BY T2.Year Desc LIMIT 1\nFeedback: Replace city with city id .",
            "output": [
                "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Club WHERE ClubName = \"Tennis Club\"\nFeedback: Make sure to find the total number of members in member of club table .",
            "output": [
                "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008 UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008\nFeedback: Make sure temperature is greater in February than June or city served as host cities",
            "output": [
                "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
            ]
        },
        {
            "input": "SQL: SELECT Document_Type_Name , Document_Type_Description FROM Ref_Document_Types\nFeedback: Make sure document type code equals RV .",
            "output": [
                "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace temperature table with hosting city in both and city id with host city .",
            "output": [
                "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Author , Count ( * ) FROM submission GROUP BY Author\nFeedback: Should have corresponding rows to each value of workshop id of acceptance table .",
            "output": [
                "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 WHERE T1.id NOT IN ( SELECT T2.architect_id FROM mill AS T2 )\nFeedback: Remove \"not one of the \" part .",
            "output": [
                "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = \"Clara\" AND T1.LAST_NAME = \"Clara\"\nFeedback: Also find hire date , make sure only find for departments with Clara , and don't include Clara .",
            "output": [
                "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = 3\nFeedback: replace Ref Locations's location code with Document Locations's location code",
            "output": [
                "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT T2.problem_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = \"Lysanne\" AND T1.staff_last_name = \"Turcotte\"\nFeedback: Need to find the problem id which are reported prior to problem id reported in step 2.",
            "output": [
                "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID , Document_Description FROM Documents\nFeedback: Replace document id with statement id , document description with statement details , documents table with statements table .",
            "output": [
                "SELECT STATEMENT_ID ,  statement_details FROM Statements"
            ]
        },
        {
            "input": "SQL: SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist\nFeedback: Make sure artists does not contain volume .",
            "output": [
                "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)"
            ]
        },
        {
            "input": "SQL: SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = \"aut\"\nFeedback: Also , need to find the problems reported for product name equals rem .",
            "output": [
                "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT company_type FROM Third_Party_Companies\nFeedback: Replace company type of third party companies table with asset model of assets .",
            "output": [
                "SELECT DISTINCT asset_model FROM Assets"
            ]
        },
        {
            "input": "SQL: SELECT Fname , LName FROM Student WHERE Major = 140\nFeedback: Make sure to find Minor in's room equals 140 instead of instructor equals 140 .",
            "output": [
                "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140"
            ]
        },
        {
            "input": "SQL: SELECT Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: step 1: Replace reference locations table with document locations table .",
            "output": [
                "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Document_Type_Code FROM Ref_Document_Types GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace documents with expenses table with documents table for both .",
            "output": [
                "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = 2012\nFeedback: Replace songs 's title with albums ' title .",
            "output": [
                "SELECT * FROM Albums WHERE YEAR  =  2012"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Document_Types\nFeedback: Replace reference document types table with roles table , Make sure to Find the total number all roles .",
            "output": [
                "SELECT count(*) FROM ROLES"
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year < = 2008 UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008\nFeedback: Make sure temperature's mar less than jul or greater than oct for a city",
            "output": [
                "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct"
            ]
        },
        {
            "input": "SQL: SELECT T1.Document_Type_Name , T1.Document_Type_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = \"King Book\" OR T2.Document_Name = \"Noel CV\"\nFeedback: Replace first document type name with document type code .",
            "output": [
                "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'"
            ]
        },
        {
            "input": "SQL: SELECT Max ( T2.length_feet ) FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T1.name = \"Frank Lloyd Wright\"\nFeedback: Replace length feet with length meters , find architect's names for bridge , remove whole last part of step 2.",
            "output": [
                "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > 40 INTERSECT SELECT T1.name FROM Person AS T1 WHERE T1.age < 30\nFeedback: step 2: find person name . step 2 and 3: Need to find person's friend age instead of person .",
            "output": [
                "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"
            ]
        },
        {
            "input": "SQL: SELECT Author , Scores FROM submission ORDER BY Scores Asc\nFeedback: Do not need to find scores .",
            "output": [
                "SELECT Author FROM submission ORDER BY Scores ASC"
            ]
        },
        {
            "input": "SQL: SELECT * FROM employees WHERE HIRE_DATE BETWEEN \"1987-06-17\" AND \"2002-06-21\"\nFeedback: Only need to find for hire date less than June 21 , 2002.",
            "output": [
                "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'"
            ]
        },
        {
            "input": "SQL: SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top Desc LIMIT 1\nFeedback: Replace largest with smallest .",
            "output": [
                "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Songs WHERE Title = \"Flash\"\nFeedback: Make sure to find number of bandmate in performance table instead of songs table .",
            "output": [
                "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\""
            ]
        },
        {
            "input": "SQL: SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"Mergenthaler\" AND T1.Building = \"NEB\" INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = \"M\" AND T1.Building = \"NEB\"\nFeedback: Make sure find Faculty's last name last name , first name for male gender and residing in building NEB .",
            "output": [
                "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""
            ]
        },
        {
            "input": "SQL: SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 8000\nFeedback: Replace job title with job id and replace min salary with average salary of employees table .",
            "output": [
                "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID FROM Documents WHERE Document_Name LIKE \"s\"\nFeedback: Make sure those documents are available in reference document types table .",
            "output": [
                "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"
            ]
        },
        {
            "input": "SQL: SELECT T1.DEPARTMENT_NAME , Count ( * ) FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID\nFeedback: Replace employees's department id with departments's department name , should find summation of employees working in it",
            "output": [
                "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"
            ]
        },
        {
            "input": "SQL: SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code\nFeedback: Find the number of corresponding rows of document locations table and also the number of documents .",
            "output": [
                "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = \"modern\"\nFeedback: Replace adults and bed Type with max occupancy of rooms table and decor respectively .",
            "output": [
                "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'"
            ]
        },
        {
            "input": "SQL: SELECT Author FROM submission GROUP BY Author HAVING Count ( * ) > 1\nFeedback: Replace author in submission table with author in acceptance table",
            "output": [
                "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT DName FROM Department WHERE Building = 268\nFeedback: Replace department name with department phone .",
            "output": [
                "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268"
            ]
        },
        {
            "input": "SQL: SELECT MAX_SALARY , MIN_SALARY FROM jobs\nFeedback: Replace max salary with salary , min salary with manager id , jobs table with employees table",
            "output": [
                "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T3.Document_ID FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T1.Document_ID = T3.Document_ID WHERE T2.Document_Type_Name = \"CV\"\nFeedback: Make sure document type code equals CV .",
            "output": [
                "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"
            ]
        },
        {
            "input": "SQL: SELECT T2.Colors FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID ORDER BY T1.Enrollment Desc LIMIT 1\nFeedback: Replace colors with school colors of school table .",
            "output": [
                "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.name = \"Cargo\" INTERSECT SELECT T3.name FROM airport AS T1 JOIN operate_company AS T3 JOIN flight AS T2 ON T1.id = T2.airport_id AND T2.company_id = T3.id WHERE T1.name = \"Catering services\"\nFeedback: Replace airport's name with operate company's principal activities for both , step 4: replace operate company's name with pilot .",
            "output": [
                "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'"
            ]
        },
        {
            "input": "SQL: SELECT Team FROM player ORDER BY Age Asc LIMIT 1\nFeedback: Replace smallest value of age with largest value of age .",
            "output": [
                "SELECT Team FROM player ORDER BY Age DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Building FROM Faculty GROUP BY Building ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to find for the instructor who teaches highest number of courses .",
            "output": [
                "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Denomination FROM school WHERE Founded > 1890 INTERSECT SELECT Denomination FROM school WHERE Founded < 1900\nFeedback: Replace greater than to less than and less than to greater than in step 1 and 2.",
            "output": [
                "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Document_Types\nFeedback: Replace reference document types table with statements table .",
            "output": [
                "SELECT count(*) FROM Statements"
            ]
        },
        {
            "input": "SQL: SELECT Location FROM school GROUP BY Location HAVING Count ( * ) > 1\nFeedback: Replace location with school id , school with player in step 1.",
            "output": [
                "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT name , age FROM Person WHERE job = \"Dan\" INTERSECT SELECT name , age FROM Person WHERE job = \"Alice\"\nFeedback: Replace job with friend for all steps .",
            "output": [
                "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
            ]
        },
        {
            "input": "SQL: SELECT name , Industry FROM Companies ORDER BY name Asc\nFeedback: Replace industry with assets billion .",
            "output": [
                "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC"
            ]
        },
        {
            "input": "SQL: SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Title = \"Gorgoroth\"\nFeedback: Replace famous title with artist .",
            "output": [
                "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\""
            ]
        },
        {
            "input": "SQL: SELECT Title FROM film GROUP BY Title ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace title with studio in both .",
            "output": [
                "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = \"Heilo\"\nFeedback: Also add songs table in step 1 , also make sure title equals Der Kapitan .",
            "output": [
                "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM buildings GROUP BY name HAVING Count ( * ) > 1\nFeedback: Instep 1 , there should be company id of office locations instead of name in buildings table .",
            "output": [
                "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = \"Badlands\"\nFeedback: Replace instrument instruments table with performance table to make sure song performed by artist .",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\""
            ]
        },
        {
            "input": "SQL: SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE \"%m\"\nFeedback: Also find salary , Replace \"JOB TITLE\" with first name",
            "output": [
                "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
            ]
        },
        {
            "input": "SQL: SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT 1\nFeedback: No need to find summation of chargeable amount in step 2 , replace part fault id with chargeable amount .",
            "output": [
                "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = 2008 AND T1.Regional_Population < 23019148\nFeedback: Remove condition , Also find city whose temperature's mar is lower than jul and hosted any event .",
            "output": [
                "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT 1\nFeedback: Replace Projects's name with Scientists's ssn .",
            "output": [
                "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT staff_first_name , staff_last_name FROM Staff WHERE staff_id = 1\nFeedback: Replace staff id with problem id of Problem Log's table .",
            "output": [
                "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"
            ]
        },
        {
            "input": "SQL: SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY BETWEEN 24000 AND 6000\nFeedback: Also need to find salary and make sure salary is lower than 6000.",
            "output": [
                "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000"
            ]
        },
        {
            "input": "SQL: SELECT EMPLOYEE_ID , HIRE_DATE FROM employees WHERE SALARY = 24000\nFeedback: Replace hire date with end date of job history table and remove \" salary equals 24000\".",
            "output": [
                "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Document_Types\nFeedback: Replace reference document types table with reference calendar table .",
            "output": [
                "SELECT count(*) FROM Ref_calendar"
            ]
        },
        {
            "input": "SQL: SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees\nFeedback: Also need to find hire date and make sure first name should not contain letter M .",
            "output": [
                "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"
            ]
        },
        {
            "input": "SQL: SELECT EMPLOYEE_ID , LAST_NAME FROM employees WHERE FIRST_NAME LIKE \"T\"\nFeedback: Also find first name ahead of last name , employee should have another employee containing letter T in ( same)department",
            "output": [
                "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )"
            ]
        },
        {
            "input": "SQL: SELECT Location_Name , Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: In step 1 , Replace reference locations table with document locations table .",
            "output": [
                "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Type FROM Vocals\nFeedback: Replace type with instrument instruments , vocals table with instrument instruments table .",
            "output": [
                "SELECT DISTINCT instrument FROM Instruments"
            ]
        },
        {
            "input": "SQL: SELECT name , age , city FROM Person ORDER BY age Desc LIMIT 1\nFeedback: Only need to make sure these persons are friends with Alice for largest time .",
            "output": [
                "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')"
            ]
        },
        {
            "input": "SQL: SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = \"GV\" INTERSECT SELECT T2.Document_Details FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = \"SF\"\nFeedback: Replace document type code with budget type code in both step 1 and 3 , and document details with document date .",
            "output": [
                "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'"
            ]
        },
        {
            "input": "SQL: SELECT City , Hanyu_Pinyin FROM city ORDER BY GDP Asc LIMIT 1\nFeedback: Replace hanyu pinyin with gdp .",
            "output": [
                "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Location_Code , T2.Date_in_Location_From , T3.Actual_Destruction_Date FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T2.Document_ID = T1.Document_ID JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID\nFeedback: Replace actual destruction date with date in locaton to of document locations table .",
            "output": [
                "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations"
            ]
        },
        {
            "input": "SQL: SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO GROUP BY T1.Major ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to find Minor instead of each value of major .",
            "output": [
                "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist = \"Gorgoroth\" OR Artist = 25\nFeedback: Replace famous release date with average weeks on top of volumes table , age equal or lower than 25 , remove last part .",
            "output": [
                "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25"
            ]
        },
        {
            "input": "SQL: SELECT GDP , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > 1\nFeedback: Replace city in city table with host city in hosting city .",
            "output": [
                "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID AND T1.StuID = T3.StuID WHERE T2.ClubName = \"Bootup Baltimore\" AND T3.Position = \"F\"\nFeedback: Replace position with sex of student table , make sure females are member of the club .",
            "output": [
                "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\""
            ]
        },
        {
            "input": "SQL: SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID\nFeedback: Remove document description , also find Statements's statement details ahead of account details .",
            "output": [
                "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id"
            ]
        },
        {
            "input": "SQL: SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2\nFeedback: Should also find employee id , make sure country should be printed in which employees residing currently",
            "output": [
                "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"
            ]
        },
        {
            "input": "SQL: SELECT Document_Name , Document_Date FROM Documents WHERE Document_Description = \"Graph Database project\"\nFeedback: Replace document description with project details .",
            "output": [
                "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"
            ]
        },
        {
            "input": "SQL: SELECT bedType FROM Rooms GROUP BY bedType ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Replace bed Type with decor for both .",
            "output": [
                "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Budget_Type_Code ) FROM Documents_with_Expenses\nFeedback: Replace documents with expenses table with reference budget codes .",
            "output": [
                "SELECT count(*) FROM Ref_budget_codes"
            ]
        },
        {
            "input": "SQL: SELECT name , job , city FROM Person ORDER BY name Asc\nFeedback: Need to remove city .",
            "output": [
                "SELECT name ,  job FROM Person ORDER BY name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Club WHERE ClubName = \"Bootup Baltimore\" AND ClubName = \"Pen and Paper Gaming\"\nFeedback: Find the total StudID of member of club who is member of Pen and Paper Gaming club .",
            "output": [
                "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Person WHERE city = \"Austin\"\nFeedback: Make sure to find those people who have no friends in Austin .",
            "output": [
                "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = \"Hopkins Student Enterprises\"\nFeedback: Find the student's full name whose position equals CTO of member of club table .",
            "output": [
                "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = 34 OR T1.Age = 32\nFeedback: Make sure artist 's age equals or greater than 32.",
            "output": [
                "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32"
            ]
        },
        {
            "input": "SQL: SELECT T2.part_fault_id , T1.skill_description , T2.part_id FROM Skills AS T1 JOIN Part_Faults AS T2 JOIN Skills_Required_To_Fix AS T3 ON T1.skill_id = T3.skill_id AND T3.part_fault_id = T2.part_fault_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to find fault log entry id , fault description , fault log entry datetime instead of Part Faults's part fault id , skill description , part id .",
            "output": [
                "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Person ORDER BY age Asc LIMIT 1\nFeedback: Need to find on basis of largest value of age of that person's friend .",
            "output": [
                "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Project_ID FROM Documents WHERE Document_Type_Code = \"BK\" GROUP BY Document_ID\nFeedback: Should be corresponding rows to each value of product id .",
            "output": [
                "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id"
            ]
        },
        {
            "input": "SQL: SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID\nFeedback: Need to replace school id with denomination , and should find numbers of schools associated with it .",
            "output": [
                "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination"
            ]
        },
        {
            "input": "SQL: SELECT Account_Details , Account_ID FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT 1 INTERSECT SELECT Account_Details FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: account details should contain character 5 , remove account id , step 3 , 5 , 6 and step 4 replace step 4 with step 2.",
            "output": [
                "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Fname = \"Linda\" AND LName = \"Smith\"\nFeedback: Need to find number of clubs linda smith is member of .",
            "output": [
                "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\""
            ]
        },
        {
            "input": "SQL: SELECT Destruction_Authorised_by_Employee_ID , Count ( DISTINCT Document_ID ) FROM Documents_to_be_Destroyed GROUP BY Destruction_Authorised_by_Employee_ID\nFeedback: Replace destruction authorised by employee id with destroyed by employee id",
            "output": [
                "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"
            ]
        },
        {
            "input": "SQL: SELECT name FROM buildings WHERE Status = \"on-hold\" ORDER BY name Asc\nFeedback: Replace name with stories .",
            "output": [
                "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = \"Bootup Baltimore\"\nFeedback: Also need to mention the position equals president .",
            "output": [
                "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\""
            ]
        },
        {
            "input": "SQL: SELECT T1.problem_log_id , T2.problem_description FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id\nFeedback: Replace problem description with log entry description",
            "output": [
                "SELECT problem_log_id ,  log_entry_description FROM problem_log"
            ]
        },
        {
            "input": "SQL: SELECT Music_Festival FROM music_festival WHERE Category = \"Best Song\"\nFeedback: Replace music festival with date of ceremony and make sure to add result equals Awarded .",
            "output": [
                "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id WHERE T2.Velocity < = 200\nFeedback: velocity should be less than 200 and not equals to 200.",
            "output": [
                "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200"
            ]
        },
        {
            "input": "SQL: SELECT T2.Document_Description , T2.Document_Name FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID WHERE T1.Project_Details = \"Private Project\"\nFeedback: Replace document description with statement details , and project details with statement details .",
            "output": [
                "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Songs\nFeedback: Replace songs table with band table .",
            "output": [
                "SELECT count(*) FROM Band"
            ]
        },
        {
            "input": "SQL: SELECT Max ( Age ) , Min ( Age ) FROM artist\nFeedback: Replace age with weeks on top and replace artist table with volume table .",
            "output": [
                "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume"
            ]
        },
        {
            "input": "SQL: SELECT roomName FROM Rooms ORDER BY basePrice Desc\nFeedback: Replace descending order with ascending order .",
            "output": [
                "SELECT roomName FROM Rooms ORDER BY basePrice"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Songs WHERE Title = \"Le Pop\"\nFeedback: Replace songs table with instrument instruments table and make sure to find number of instrument instruments .",
            "output": [
                "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Band WHERE Lastname = \"Heilo\"\nFeedback: Replace band table with instrument instruments , make sure to find total number of instrument instruments .",
            "output": [
                "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year < \"A Kiss Before You Go: Live in Hamburg\"\nFeedback: Replace \"Year less than\" with \"Album's title equals\"",
            "output": [
                "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\""
            ]
        },
        {
            "input": "SQL: SELECT T2.first_name , T2.last_name , T1.skill_description FROM Skills AS T1 JOIN Maintenance_Engineers AS T2 JOIN Engineer_Skills AS T3 ON T1.skill_id = T3.skill_id AND T3.engineer_id = T2.engineer_id\nFeedback: Also need to find other details of maintenance engineers .",
            "output": [
                "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Weber\" OR T2.staff_first_name = \"Jolie\"\nFeedback: Also add staff first name equals Dameon and staff last name equals Frami , replace \u00f6r\"with\"and\" , last staff first name with staff last name .",
            "output": [
                "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
            ]
        },
        {
            "input": "SQL: SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: Replace Problems's product id with problem id .",
            "output": [
                "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT CName FROM Course GROUP BY CID HAVING Count ( * ) > = 5\nFeedback: Replace course table with enrolled in table .",
            "output": [
                "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )\nFeedback: Only find for persons who are friends with Alice .",
            "output": [
                "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T1.SALARY ) FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )\nFeedback: Remove step 1 and last part of step 2 , Make sure to find commission pct does not equals to null .",
            "output": [
                "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Vocals WHERE Type = \"lead\"\nFeedback: Make sure to find number of songs in songs table .",
            "output": [
                "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\""
            ]
        },
        {
            "input": "SQL: SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = 90 OR T1.DEPARTMENT_NAME = 70\nFeedback: Replace department name with department id for both .",
            "output": [
                "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Fname = \"Eric\" AND LName = \"Tai\"\nFeedback: Find number of clubs and make sure Eric Tai is student of that clubs .",
            "output": [
                "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""
            ]
        },
        {
            "input": "SQL: SELECT Date , Venue FROM workshop ORDER BY Date Asc\nFeedback: Replace date with venue .",
            "output": [
                "SELECT Date ,  Venue FROM workshop ORDER BY Venue"
            ]
        },
        {
            "input": "SQL: SELECT product_details , product_name FROM Product GROUP BY product_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: find number of problems instead of product details .",
            "output": [
                "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name , gender , gender FROM architect GROUP BY id HAVING Count ( * ) > = 1\nFeedback: Replace first gender with id , Remove last part , Make sure architect build two bridges or one mill .",
            "output": [
                "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1"
            ]
        },
        {
            "input": "SQL: SELECT Studio FROM film WHERE Director = \"Walter Hill\"\nFeedback: Also find for director equals Nicholas Meyer .",
            "output": [
                "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""
            ]
        },
        {
            "input": "SQL: SELECT DName FROM Department WHERE Division = \"AS\" AND Building = \"Mergenthaler\" INTERSECT SELECT DName FROM Department WHERE Division = \"EN\" AND Building = \"NEB\"\nFeedback: step 1 , replace and building equals Mergenthaler\" with \"or division equals EN\" , Remove \"Division equals EN and\" step 2.",
            "output": [
                "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Songs\nFeedback: Make sure songs are in studio albums .",
            "output": [
                "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Role_Name , T2.Role_Code , T2.Date_of_Birth FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T2.Employee_Name = \"Armani\"\nFeedback: Replace role name with employee name .",
            "output": [
                "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Firstname = \"Solveig\"\nFeedback: Make sure to include title equals \"A Bar in Amsterdam\" of songs table .",
            "output": [
                "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\""
            ]
        },
        {
            "input": "SQL: SELECT staff_name , staff_id FROM Staff EXCEPT SELECT staff_name , staff_id FROM Staff\nFeedback: Step 1:staff who has recorded any Fault . Step 2:staff who has contacted any visiting engineer .",
            "output": [
                "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student\nFeedback: Replace student table with club table .",
            "output": [
                "SELECT count(*) FROM club"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Fname FROM Student WHERE LName LIKE \"a\"\nFeedback: Replace last name last name with first name .",
            "output": [
                "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT skill_description , skill_description FROM Skills\nFeedback: Make sure to replace skill description with fault short name of part faults table .",
            "output": [
                "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"
            ]
        },
        {
            "input": "SQL: SELECT decor FROM Rooms WHERE decor = \"modern\" INTERSECT SELECT decor FROM Rooms WHERE bedType = \"Recluse and defiance\"\nFeedback: Remove 1st and 3rd steps , Replace bed Type with room name .",
            "output": [
                "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Famous_Title FROM artist AS T1 EXCEPT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2\nFeedback: Replace less than 2 with quals to 2.",
            "output": [
                "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2"
            ]
        },
        {
            "input": "SQL: SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace document type code in documents table with budget type code in documents with expenses for all .",
            "output": [
                "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT route_name FROM Delivery_Routes GROUP BY route_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace delivery routes table with delivery route locations table .",
            "output": [
                "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Author FROM submission ORDER BY Scores Asc LIMIT 1\nFeedback: Replace smallest with largest .",
            "output": [
                "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT job FROM Person ORDER BY age Asc LIMIT 1\nFeedback: Make sure to find for each job .",
            "output": [
                "SELECT min(age) ,  job FROM Person GROUP BY job"
            ]
        },
        {
            "input": "SQL: SELECT T2.Document_Name , T1.Document_Type_Description , T2.Document_Date FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code\nFeedback: Replace document name with document type name .",
            "output": [
                "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code"
            ]
        },
        {
            "input": "SQL: SELECT Employee_ID FROM Employees\nFeedback: Make sure find those employees have authorized destruction .",
            "output": [
                "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
            ]
        },
        {
            "input": "SQL: SELECT FIRST_NAME , LAST_NAME FROM employees ORDER BY SALARY Asc LIMIT 1\nFeedback: Also need to find department id and make sure to find the details for each departments .",
            "output": [
                "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"
            ]
        },
        {
            "input": "SQL: SELECT Max ( Age ) , Min ( Age ) FROM Student WHERE city_code = \"NYC\"\nFeedback: Replace age with grade point in both .",
            "output": [
                "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\""
            ]
        },
        {
            "input": "SQL: SELECT Famous_Title FROM artist GROUP BY Famous_Title HAVING Count ( * ) > 2\nFeedback: In step 1 , replace famous title in artist table with weeks on top of volume table .",
            "output": [
                "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2"
            ]
        },
        {
            "input": "SQL: SELECT age FROM Person WHERE name = \"doctor\"\nFeedback: Make sure for which job equals doctor and name equals Zach .",
            "output": [
                "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Engineer_Visits WHERE fault_status = \"Waiting\"\nFeedback: Replace engineer visits table with fault log parts table and remove the last part .",
            "output": [
                "SELECT DISTINCT fault_status FROM Fault_Log_Parts"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Scientists\nFeedback: Count projects along with scientists name assigned to him or her .",
            "output": [
                "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name"
            ]
        },
        {
            "input": "SQL: SELECT name , age FROM Person WHERE age > ( SELECT Avg ( age ) FROM Person )\nFeedback: Replace name of person table with friend of person friend .",
            "output": [
                "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)"
            ]
        },
        {
            "input": "SQL: SELECT T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume WHERE T2.Category = \"Nominated\"\nFeedback: Replace category with result .",
            "output": [
                "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Document_Type_Code ) FROM All_Documents\nFeedback: Replace document type code with document id .",
            "output": [
                "SELECT count(*) FROM Ref_document_types"
            ]
        },
        {
            "input": "SQL: SELECT FIRST_NAME , LAST_NAME FROM employees WHERE JOB_ID = \"AD_PRES\" AND SALARY > 163\nFeedback: Make sure the salary is greater than that of Employee whose employee id equals 163.",
            "output": [
                "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )"
            ]
        },
        {
            "input": "SQL: SELECT state_province_county , Count ( * ) FROM Addresses GROUP BY state_province_county\nFeedback: The corresponding rows should be of customer addresses table and need to count total customers .",
            "output": [
                "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
            ]
        },
        {
            "input": "SQL: SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = \"ROY\"\nFeedback: Replace \"equals\" with \"contains\" in step 2.",
            "output": [
                "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"
            ]
        },
        {
            "input": "SQL: SELECT EMPLOYEE_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = 2\nFeedback: Replace employees table with job history table in step 1.",
            "output": [
                "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID JOIN Gradeconversion AS T3 ON T2.Grade = T3.lettergrade WHERE T1.Major = 3.8 OR T3.gradepoint > 4\nFeedback: Remove condition , make sure grade point equals or above 3. 8 in minimum one course .",
            "output": [
                "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( followers ) , name FROM user_profiles GROUP BY name\nFeedback: should replace name with uid",
            "output": [
                "SELECT count(*) FROM follows GROUP BY f1"
            ]
        },
        {
            "input": "SQL: SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: step 1 should find the number of rows of each value of department id in staff department assignments table",
            "output": [
                "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM flight WHERE destination = \"Los Angeles\"\nFeedback: Replace destination with origin and find flight number instead of the number of rows",
            "output": [
                "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
            ]
        },
        {
            "input": "SQL: SELECT distance FROM flight ORDER BY distance Asc LIMIT 3\nFeedback: Replace First \"distance\" word with airline id and remove \" 3\" in step 2.",
            "output": [
                "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Comptroller ) FROM party\nFeedback: Replace comptroller with governor .",
            "output": [
                "SELECT count(DISTINCT Governor) FROM party"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.Position FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team WHERE T1.Name = \"Duke\" OR T1.Name = \"UCLA\"\nFeedback: Replace name with college in both .",
            "output": [
                "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM actor\nFeedback: Replace actor table with store table .",
            "output": [
                "SELECT count(*) FROM store"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Patient EXCEPT SELECT Name FROM Patient\nFeedback: Replace name of patient patient table with name of medication medication equals Procrastin X in step 2.",
            "output": [
                "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'"
            ]
        },
        {
            "input": "SQL: SELECT supplier_id FROM Product_Suppliers GROUP BY product_id HAVING Avg ( total_value_purchased ) > 50000\nFeedback: Replace total value purchased with total amount purchased , corresponding step 1 value should be greater than 50000 or less than 30000.",
            "output": [
                "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"
            ]
        },
        {
            "input": "SQL: SELECT School_name FROM School WHERE Enrollment > 495 OR Enrollment < 10\nFeedback: Remove enrollment part and Make sure endowment's amount less than or quals to 10.",
            "output": [
                "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10"
            ]
        },
        {
            "input": "SQL: SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = \"Orton\" INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = \"Benjamin\"\nFeedback: Replace name with eliminated by in all steps and replace \"step 3\" word with \"step 1\".",
            "output": [
                "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
            ]
        },
        {
            "input": "SQL: SELECT country FROM country GROUP BY country HAVING Count ( * ) > = 3\nFeedback: Replace country in country table with city in city table in step 1.",
            "output": [
                "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Player_Attributes\nFeedback: Replace player attributes table with league table and make sure Country's name equals England .",
            "output": [
                "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""
            ]
        },
        {
            "input": "SQL: SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Desc LIMIT 2\nFeedback: In step 2 , replace department store id of departments table with department store chain id in department stores table .",
            "output": [
                "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2"
            ]
        },
        {
            "input": "SQL: SELECT Population FROM city WHERE Status ! = \"Village\"\nFeedback: Replace population with census ranking .",
            "output": [
                "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""
            ]
        },
        {
            "input": "SQL: SELECT eid , name FROM employee\nFeedback: Make sure salary of employee is largest .",
            "output": [
                "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Official_native_language ) FROM country\nFeedback: Make sure to find for those player's position equals Defender .",
            "output": [
                "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Products WHERE product_name = \"South\"\nFeedback: Replace products table and product name with department stores table and department store chain id of department store chain table respectively .",
            "output": [
                "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
            ]
        },
        {
            "input": "SQL: SELECT order_id , customer_id , customer_id FROM Customer_Orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date Asc\nFeedback: Remove one of the \"customer id\".",
            "output": [
                "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM follows\nFeedback: Replace follows table with tweets table , make sure users had posted tweets .",
            "output": [
                "SELECT count(DISTINCT UID) FROM tweets"
            ]
        },
        {
            "input": "SQL: SELECT Name , Count ( * ) FROM Physician GROUP BY Name\nFeedback: Should corresponds to the number of patients treated by physician physician .",
            "output": [
                "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Position = \"senior\"\nFeedback: Remove \"Nurse's position equals senior\" and add condition \"Physician's position contains senior\".",
            "output": [
                "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM wrestler WHERE Days_held = 100\nFeedback: Make sure days held less than 100 instead of days held equals 100.",
            "output": [
                "SELECT Name FROM wrestler WHERE Days_held  <  100"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT BlockCode FROM Room\nFeedback: Make sure rooms which are not reserved .",
            "output": [
                "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM channel EXCEPT SELECT Name FROM channel\nFeedback: In step 2 , make sure owner equals CCTV .",
            "output": [
                "SELECT name FROM channel WHERE OWNER != 'CCTV'"
            ]
        },
        {
            "input": "SQL: SELECT product_id , product_name FROM Products WHERE product_price BETWEEN 900 AND 600\nFeedback: Make sure product price Less than 600 or greater than 900 , remove Last part .",
            "output": [
                "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Num_Employees ) FROM department WHERE Ranking < 15 OR Ranking < 10\nFeedback: Replace \"less than 10\" with \"greater than 10\" and replace or with \"and\".",
            "output": [
                "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"
            ]
        },
        {
            "input": "SQL: SELECT name FROM employee EXCEPT SELECT name FROM employee\nFeedback: Need to make sure employees does not have certificate for aircraft's distance equals Boeing 737 800.",
            "output": [
                "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace Physician's position with Appointment's appointment id .",
            "output": [
                "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM actor\nFeedback: Make sure to find number of stock item in inventory table whose store id equals 1.",
            "output": [
                "SELECT count(*) FROM inventory WHERE store_id  =  1"
            ]
        },
        {
            "input": "SQL: SELECT id , name FROM mountain GROUP BY id HAVING Count ( * ) > = 2\nFeedback: Replace mountain table with photos .",
            "output": [
                "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT staff_name , staff_gender FROM Staff WHERE staff_name = \"2016%\"\nFeedback: Replace staff name with date assigned from of staff department assignments table .",
            "output": [
                "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""
            ]
        },
        {
            "input": "SQL: SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace product suppliers table with order items in step 1.",
            "output": [
                "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM building WHERE Height_feet BETWEEN 20 AND 200\nFeedback: Make sure height feet equals or greater than 200 and floors equals or greater than 20.",
            "output": [
                "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20"
            ]
        },
        {
            "input": "SQL: SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > 8.5\nFeedback: Also make sure that schools have greater than one donator .",
            "output": [
                "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT T2.Committee ) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > 50000\nFeedback: Replace committee with delegate of election table .",
            "output": [
                "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = 3\nFeedback: Need to make sure customers have bought at least three distinct products .",
            "output": [
                "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm\nFeedback: Replace sheep and goats with cows .",
            "output": [
                "SELECT max(Cows) ,  min(Cows) FROM farm"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Status FROM city ORDER BY Area_km_2 Asc\nFeedback: Need to find frequency instead of Area km 2.",
            "output": [
                "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
            ]
        },
        {
            "input": "SQL: SELECT T1.Comptroller FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = 2 OR T2.Committee = 1\nFeedback: Replace committee with district for both and make sure they are associated delegates .",
            "output": [
                "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2"
            ]
        },
        {
            "input": "SQL: SELECT text FROM tweets WHERE text = \"intern\"\nFeedback: Make sure topic of text is intern .",
            "output": [
                "SELECT text FROM tweets WHERE text LIKE '%intern%'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Name FROM Physician\nFeedback: Replace physician physician with patient patient , need to make sure they made an appointment appointment .",
            "output": [
                "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM follows\nFeedback: Should find tweets .",
            "output": [
                "SELECT count(*) FROM tweets"
            ]
        },
        {
            "input": "SQL: SELECT Delegate FROM election WHERE Committee = 1\nFeedback: Replace committee with district .",
            "output": [
                "SELECT Delegate FROM election WHERE District  =  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to make sure the actors are most popular .",
            "output": [
                "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc\nFeedback: Also need to make sure Customer Orders's order status code equals pending for customers .",
            "output": [
                "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = \"Surgery\" INTERSECT SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = \"Psychiatry\"\nFeedback: Need to find Physician's name associated with both Surgery and Psychiatry block floor . Show their names .",
            "output": [
                "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'"
            ]
        },
        {
            "input": "SQL: SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = 2\nFeedback: Replace distance with airline id in step 1 , aircraft table with flight table in step 1.",
            "output": [
                "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( price ) FROM flight WHERE destination = \"Los Angeles\"\nFeedback: Make sure whose employee id equals LA , arrival date equals Honolulu instead of Los Angeles .",
            "output": [
                "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = \"Psychiatry\" OR T2.Name = \"Surgery\"\nFeedback: Make sure that the Physicians need to affiliated with relevant department department .",
            "output": [
                "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'"
            ]
        },
        {
            "input": "SQL: SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > 80\nFeedback: Also find number of right footed and left footed Players .",
            "output": [
                "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot"
            ]
        },
        {
            "input": "SQL: SELECT Institution , Count ( * ) FROM Institution GROUP BY Institution\nFeedback: Should find corresponding rows to number of proteins .",
            "output": [
                "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Desc LIMIT 1\nFeedback: Replace Nurse's name with Prescribes's dose .",
            "output": [
                "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Party , Count ( * ) FROM party GROUP BY Party\nFeedback: Should corresponds to each value of delegates from that party .",
            "output": [
                "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM channel WHERE Name = \"Night\"\nFeedback: Replace channel table with broadcast's program id , and name with time of day . Make sure find a different programs .",
            "output": [
                "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'"
            ]
        },
        {
            "input": "SQL: SELECT County_name , Count ( * ) FROM county GROUP BY County_name\nFeedback: Should find the number of corresponding rows of delegate in election table for each county .",
            "output": [
                "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id"
            ]
        },
        {
            "input": "SQL: SELECT name FROM club ORDER BY Start_year Desc LIMIT 1\nFeedback: There should be smallest value instead of largest value .",
            "output": [
                "SELECT name FROM club ORDER BY Start_year ASC"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Replace wrestler id with days held .",
            "output": [
                "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = \"Morning\" INTERSECT SELECT T3.Owner FROM channel AS T3 JOIN broadcast AS T2 ON T3.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = \"Night\"\nFeedback: Replace channel with program in step 4.",
            "output": [
                "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\""
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: replace name with destination . only use flight table",
            "output": [
                "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT * FROM county\nFeedback: Replace county table with election table .",
            "output": [
                "SELECT * FROM election"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace appointment appointment table with procedures procedures , physician physician with cost in step 2 , Make sure find Physician's name in step 3.",
            "output": [
                "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = 2\nFeedback: remove team table , replace name with college and order should be in descending .",
            "output": [
                "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Appointment WHERE ExaminationRoom = 112\nFeedback: Replace appointment appointment with stay stay , examination room with room room , count number of patients staying in it .",
            "output": [
                "SELECT count(patient) FROM stay WHERE room  =  112"
            ]
        },
        {
            "input": "SQL: SELECT name FROM user_profiles WHERE followers > ( SELECT Max ( followers ) FROM user_profiles WHERE name = \"Tyler Swift\" )\nFeedback: Remove maximum and find total number of followers in step 1.",
            "output": [
                "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')"
            ]
        },
        {
            "input": "SQL: SELECT name FROM category\nFeedback: Make sure to find it for film's title equals HUNGER ROOF .",
            "output": [
                "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient GROUP BY T2.Physician HAVING Count ( * ) > 1\nFeedback: Replace physician physician with appointment id .",
            "output": [
                "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Los Angeles\"\nFeedback: Replace name with origin , also make sure destination equals Honolulu .",
            "output": [
                "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )\nFeedback: Replace medication medication of prescribes with name equals Procrastin X of medication medication and remove \"SSN\".",
            "output": [
                "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )"
            ]
        },
        {
            "input": "SQL: SELECT catalog_name FROM Catalogs\nFeedback: Replace catalog name of catalogs table with catalog entry name of catalog contents .",
            "output": [
                "SELECT distinct(catalog_entry_name) FROM catalog_contents"
            ]
        },
        {
            "input": "SQL: SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = 8\nFeedback: Replace catalog name with catalog entry name , and price in pounds with catalog level number .",
            "output": [
                "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
            ]
        },
        {
            "input": "SQL: SELECT Type FROM Institution WHERE Enrollment > 1000 INTERSECT SELECT Type FROM Institution WHERE Enrollment < 1990\nFeedback: enrollment greater than or equals 1000 step1 , founded greater than 1990 instead enrollment less than 1990 step 2.",
            "output": [
                "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000"
            ]
        },
        {
            "input": "SQL: SELECT EmployeeID FROM Nurse\nFeedback: Need to find the Physician's employee id and department department \u00edd along with primary affiliation .",
            "output": [
                "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Attorney_General FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to find governor elected for highest times .",
            "output": [
                "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.name , T1.uid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > 2\nFeedback: In step 3 , replace tweets's email with user profiles partition id and replace \"greater\" with \"less\".",
            "output": [
                "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T2.born_state , T1.Num_Employees FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc\nFeedback: Replace name with name , num employees with age .",
            "output": [
                "SELECT name ,  born_state ,  age FROM head ORDER BY age"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code\nFeedback: Replace prescribes table and Medication's name with department department table and Department's name respectively , remove medication medication table .",
            "output": [
                "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1"
            ]
        },
        {
            "input": "SQL: SELECT price , distance FROM flight ORDER BY price Desc LIMIT 1\nFeedback: Replace airline id with airline id .",
            "output": [
                "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Silver ) , Avg ( Gold ) FROM club_rank\nFeedback: no need to find average of silver .",
            "output": [
                "SELECT avg(Gold) FROM club_rank"
            ]
        },
        {
            "input": "SQL: SELECT supplier_name FROM Suppliers GROUP BY supplier_name HAVING Count ( * ) > = 2\nFeedback: In step 1 , replace supplier name in suppliers with distinct customer id of customer orders , step 2 , replace supplier namein suppliers with product name of products .",
            "output": [
                "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )\nFeedback: Replace mountain id with camera lens id in step 1 , mountain with camera lens for both in step 2.",
            "output": [
                "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM member\nFeedback: Replace member table with performance table .",
            "output": [
                "SELECT count(*) FROM performance"
            ]
        },
        {
            "input": "SQL: SELECT * FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace department id with creation .",
            "output": [
                "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.Season , T1.Name , T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team\nFeedback: Replace 2nd name with player .",
            "output": [
                "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id"
            ]
        },
        {
            "input": "SQL: SELECT aid , name FROM aircraft\nFeedback: Make sure aircraft should correspond to maximum distance .",
            "output": [
                "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name , T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace film actor's actor id with actor's first name and last name .",
            "output": [
                "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name , Count ( * ) FROM photos GROUP BY camera_lens_id ORDER BY Count ( * ) Asc\nFeedback: Replace camera lens id with id in step 1 , and camera lens id in photos table with name in camera lens .",
            "output": [
                "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)"
            ]
        },
        {
            "input": "SQL: SELECT T1.Party FROM party AS T1 WHERE T1.Comptroller = \"Appropriations\" INTERSECT SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = \"Economic Matters\"\nFeedback: In step 1 , replace comptroller with committee , interchange step1 and step 2. In step 3 , replace \"step 2\" word with step1.",
            "output": [
                "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""
            ]
        },
        {
            "input": "SQL: SELECT catalog_entry_name FROM Catalog_Contents WHERE length > 5 OR length < 3\nFeedback: Replace 3 with 5 , replace 5 with 3.",
            "output": [
                "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
            ]
        },
        {
            "input": "SQL: SELECT Max ( followers ) , Avg ( followers ) FROM user_profiles\nFeedback: Replace average followers with summation of followers .",
            "output": [
                "SELECT max(followers) ,  sum(followers) FROM user_profiles"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT 1\nFeedback: Replace channel's name with program's name .",
            "output": [
                "SELECT name FROM program ORDER BY launch DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Country_name , Count ( * ) FROM country GROUP BY Country_name\nFeedback: Should find number of players belonging to each country .",
            "output": [
                "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
            ]
        },
        {
            "input": "SQL: SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > 100000\nFeedback: Replace population greater than 100000\" with population smaller than 100000\".",
            "output": [
                "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"
            ]
        },
        {
            "input": "SQL: SELECT name FROM photos WHERE name LIKE \"Digital\"\nFeedback: Replace photos table with camera lens table .",
            "output": [
                "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = \"X\"\nFeedback: Replace Patient's name and Patienttable with Medication's brand and medication medication table respectively , physician physician had prescribed medication medication .",
            "output": [
                "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\""
            ]
        },
        {
            "input": "SQL: SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT 1\nFeedback: Replace height with catalog level name , catalog contents with catalog structure .",
            "output": [
                "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM follows\nFeedback: Replace follows table with user profiles table .",
            "output": [
                "SELECT count(*) FROM user_profiles"
            ]
        },
        {
            "input": "SQL: SELECT Lieutenant_Governor FROM party WHERE Party = \"Democratic\" AND Comptroller = \"Carl McCall\"\nFeedback: Should also find comptroller ahead of lieutenant governor , remove \"and comptroller equals Carl McCall\" part .",
            "output": [
                "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
            ]
        },
        {
            "input": "SQL: SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING Avg ( T1.product_price ) > 2\nFeedback: Replace product suppliers with products table , step 3:corresponding value is greater than step 2 and Make sure whose supplier id is 2.",
            "output": [
                "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"
            ]
        },
        {
            "input": "SQL: SELECT donator_name FROM endowment WHERE amount < 9\nFeedback: Replace \"less than\" with \"greater than or equals\".",
            "output": [
                "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9"
            ]
        },
        {
            "input": "SQL: SELECT T1.rating , Max ( T1.rental_rate ) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace inventory's film id with film's rental rate for step 2 and 3 , replace rental rate with title .",
            "output": [
                "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > 5000\nFeedback: Replace sheep and goats with working horses .",
            "output": [
                "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
            ]
        },
        {
            "input": "SQL: SELECT district FROM address WHERE address = 1\nFeedback: Replace district with address , address with store's store id .",
            "output": [
                "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1"
            ]
        },
        {
            "input": "SQL: SELECT Pigs , Sum ( Sheep_and_Goats ) FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc\nFeedback: Replace sheep and goats with total horses . Remove \"summation\" word .",
            "output": [
                "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"
            ]
        },
        {
            "input": "SQL: SELECT name , name FROM Country\nFeedback: Remove one of the \"name\" , should also find League's name ahead .",
            "output": [
                "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id"
            ]
        },
        {
            "input": "SQL: SELECT T3.Player FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team ORDER BY T2.Season Asc\nFeedback: Replace player's player and season with match season's player and college respectively .",
            "output": [
                "SELECT player FROM match_season ORDER BY College ASC"
            ]
        },
        {
            "input": "SQL: SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = 2\nFeedback: Replace county name in county table with delegate of election table in step 1.",
            "output": [
                "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.staff_id , T1.staff_gender FROM Staff AS T1 JOIN Departments AS T2 JOIN Staff_Department_Assignments AS T3 ON T1.staff_id = T3.staff_id AND T3.department_id = T2.department_id WHERE T2.department_name = \"Department Manager\"\nFeedback: Replace department name with job title code .",
            "output": [
                "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Share_in_percent ) FROM channel\nFeedback: Make sure whose owner equals CCTV .",
            "output": [
                "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = 2\nFeedback: Should make sure college has two or more players .",
            "output": [
                "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Committee FROM election\nFeedback: Replace committee with district .",
            "output": [
                "SELECT DISTINCT District FROM election"
            ]
        },
        {
            "input": "SQL: SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Replace name in aircraft table with employee id in certificate table .",
            "output": [
                "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT payment_date FROM payment\nFeedback: Should find for the smallest value of payment date .",
            "output": [
                "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Reign FROM wrestler WHERE Days_held > 50\nFeedback: Replace reign of wrestler table with time of elimination table .",
            "output": [
                "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = \"Alabama\"\nFeedback: Replace temporary acting with born state , make sure only to find for secretary managing department .",
            "output": [
                "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'"
            ]
        },
        {
            "input": "SQL: SELECT name FROM photos GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Should make sure to find camera lens's name only for mountainous photos",
            "output": [
                "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name FROM language WHERE name = \"AIRPORT POLLOCK\"\nFeedback: Replace 2nd name with title .",
            "output": [
                "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'"
            ]
        },
        {
            "input": "SQL: SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT 1\nFeedback: Replace physician physician with patient patient , trained in with stay stay , certification date with stay start , find for room room equals 111.",
            "output": [
                "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( overall_rating ) FROM Player_Attributes\nFeedback: Make sure find for preferred foot right and left .",
            "output": [
                "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_date < \"Cancelled\"\nFeedback: Remove last part and make sure orders are reordered after for those order status code equals Cancelled .",
            "output": [
                "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")"
            ]
        },
        {
            "input": "SQL: SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc\nFeedback: Replace name with destination , replace destination with origin .",
            "output": [
                "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"
            ]
        },
        {
            "input": "SQL: SELECT T1.id FROM Player AS T1 WHERE T1.height > 180 INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < 85\nFeedback: height greater than or equals to 180 , Replace Player Attributes's player api id with Player's id , overall rating should be greater than 85.",
            "output": [
                "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85"
            ]
        },
        {
            "input": "SQL: SELECT Enrollment FROM School WHERE Mascot = \"Glenn\"\nFeedback: Make sure to find number of rows of endowment table and replace mascot with school name .",
            "output": [
                "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID WHERE T2.born_state ! = \"California\"\nFeedback: Make sure to find name of head table .",
            "output": [
                "SELECT name FROM head WHERE born_state != 'California'"
            ]
        },
        {
            "input": "SQL: SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Year FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > 2002\nFeedback: Replace total budget percent budgeted with budgeted , 1st year with invested , make sure year greater than or equals to 2002.",
            "output": [
                "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002"
            ]
        },
        {
            "input": "SQL: SELECT Party FROM party WHERE Comptroller = 1\nFeedback: Replace comptroller with district and make sure they were served as governor .",
            "output": [
                "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name , customer_id FROM customer GROUP BY customer_id HAVING Count ( * ) > = 1\nFeedback: Replace customer table with payment table in step 1 and make sure customer has spent lowest amount .",
            "output": [
                "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT * FROM Prescribes AS T1 WHERE T1.Physician = \"John Wen\" EXCEPT SELECT T3.Name FROM Procedures AS T2 JOIN Nurse AS T3 JOIN Undergoes AS T4 ON T2.Code = T4.Procedures AND T4.AssistingNurse = T3.EmployeeID WHERE T2.Cost > 1000\nFeedback: Make sure to find block code name for which John Wen is not Trained in .",
            "output": [
                "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
            ]
        },
        {
            "input": "SQL: SELECT Name , Event FROM wrestler\nFeedback: Remove event , and instead find elimination move of elimination table .",
            "output": [
                "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID"
            ]
        },
        {
            "input": "SQL: SELECT Max ( customer_phone ) , Min ( customer_phone ) FROM Customers\nFeedback: Replace customer phone with customer code .",
            "output": [
                "SELECT max(customer_code) ,  min(customer_code) FROM Customers"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM channel\nFeedback: Make sure time of day equals Morning .",
            "output": [
                "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'"
            ]
        },
        {
            "input": "SQL: SELECT player_name , birthday FROM Player GROUP BY birthday ORDER BY Count ( * ) Desc LIMIT 5\nFeedback: Replace birthday with potential and player with player attributes in step 1.",
            "output": [
                "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5"
            ]
        },
        {
            "input": "SQL: SELECT player_name FROM Player ORDER BY height Desc LIMIT 1\nFeedback: Replace height with Player Attributes's dribbling .",
            "output": [
                "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Patient AS T1 JOIN Room AS T2 JOIN Stay AS T3 ON T1.SSN = T3.Patient AND T3.Room = T2.RoomNumber WHERE T2.BlockFloor = 111\nFeedback: Replace room room with undergoes , block floor with roomnumber , make sure patient patient are present in undergoes table .",
            "output": [
                "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM department\nFeedback: Need to find distinct temporary acting status in management table .",
            "output": [
                "SELECT count(DISTINCT temporary_acting) FROM management"
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name FROM customer AS T1 EXCEPT SELECT T1.first_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.return_date > \"2005-08-23 02:06:01\"\nFeedback: Replace return date with rental date .",
            "output": [
                "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT 3\nFeedback: Replace \"descending by price\" with \"ascending by distance\".",
            "output": [
                "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > 90\nFeedback: Replace overall rating with crossing and make sure preferred foot equals right .",
            "output": [
                "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT age FROM head\nFeedback: Make sure to find only for the one with acting .",
            "output": [
                "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient WHERE T2.ExaminationRoom = 111\nFeedback: Replace patient patient , appointment appointment and examination room with medication medication , stay stay and room room respectively .",
            "output": [
                "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Year FROM party WHERE Comptroller = \"Eliot Spitzer\"\nFeedback: Replace comptroller with governor .",
            "output": [
                "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = 13 )\nFeedback: Remove \"for which journal id equals 13\" part from step 1.",
            "output": [
                "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)"
            ]
        },
        {
            "input": "SQL: SELECT customer_name , customer_id FROM Customers WHERE customer_address = \"TN\"\nFeedback: Replace customer address equals TN with customer address contains TN",
            "output": [
                "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\""
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM actor WHERE last_update > 30\nFeedback: Remove last update greater than 30\" , make sure actors have work in more than 30 films .",
            "output": [
                "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
            ]
        },
        {
            "input": "SQL: SELECT T1.title , T2.actor_id , T1.description FROM film AS T1 JOIN film_actor AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace actor id with film id .",
            "output": [
                "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM channel ORDER BY Name Asc\nFeedback: Replace name of channel with origin of program and remove \"by Name\".",
            "output": [
                "SELECT origin FROM program ORDER BY origin"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM journal\nFeedback: Replace journal table with editor table and make sure the editors are distinct .",
            "output": [
                "SELECT count(*) FROM editor"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician ORDER BY T2.End Desc LIMIT 1\nFeedback: Replace physician physician table with patient patient table and end with start of appointment appointment table .",
            "output": [
                "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name FROM user_profiles GROUP BY name HAVING Count ( * ) > 1\nFeedback: Replace name in user profiles table with id in tweets .",
            "output": [
                "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM flight\nFeedback: Replace flight table with employee table .",
            "output": [
                "SELECT count(*) FROM Employee"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT T2.color ) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.Country = \"Ethiopia\"\nFeedback: Need to find number of rows of camera lens id without repetition .",
            "output": [
                "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM city\nFeedback: Replace city table with farm table .",
            "output": [
                "SELECT count(*) FROM farm"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.Height_feet FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id WHERE T2.Founded > 1880 GROUP BY T2.Institution HAVING Count ( * ) > = 2\nFeedback: Remove \"and greater than\" and also add founded year is greater than 1880.",
            "output": [
                "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Nurse\nFeedback: Make sure to find only for nurses on call .",
            "output": [
                "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse"
            ]
        },
        {
            "input": "SQL: SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID\nFeedback: Replace city id with status .",
            "output": [
                "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
            ]
        },
        {
            "input": "SQL: SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < \"Clerical Staff\"\nFeedback: Make sure customer address less than that of whose customer phone equals Clerical staff .",
            "output": [
                "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')"
            ]
        },
        {
            "input": "SQL: SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace both destination with origin .",
            "output": [
                "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Time FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = \"Orton\" OR T1.Name = \"Punk\"\nFeedback: Replace both name with eliminated by .",
            "output": [
                "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Name FROM Patient ORDER BY Name Asc\nFeedback: Replace patient table with medication table .",
            "output": [
                "SELECT DISTINCT name FROM medication ORDER BY name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM club_rank WHERE Gold < 10\nFeedback: Replace gold with total .",
            "output": [
                "SELECT count(*) FROM club_rank WHERE Total  <  10"
            ]
        },
        {
            "input": "SQL: SELECT name , email FROM user_profiles GROUP BY email HAVING Count ( * ) > 1\nFeedback: Remove email in user profiles table , and make sure that user have follower is greater than 1.",
            "output": [
                "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT 1\nFeedback: Replace total budget percent budgeted with amount .",
            "output": [
                "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT title FROM film\nFeedback: Make sure rating equals to R .",
            "output": [
                "SELECT title FROM film WHERE rating  =  'R'"
            ]
        },
        {
            "input": "SQL: SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT 1\nFeedback: Replace physician physician of trained in table with patient patient of undergoes , and also replace certification date with date undergoes .",
            "output": [
                "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT catalog_name FROM Catalogs WHERE catalog_name LIKE \"2%\"\nFeedback: Replace catalog name contains 2% with Catalog Contents's product stock number equals 2%",
            "output": [
                "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T3.Season , T1.Country_name FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id AND T1.Country_id = T3.Country\nFeedback: Replace name with player .",
            "output": [
                "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID\nFeedback: Replace channel with program at both places in step 2.",
            "output": [
                "SELECT name ,  origin ,  OWNER FROM program"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM mountain WHERE Height > 15\nFeedback: Replace mountain with camera lens , height with focal length mm .",
            "output": [
                "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace channel and broadcast's channel id with program and broadcast's program id . name should be of program table .",
            "output": [
                "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = \"Midfielder\" INTERSECT SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = \"Defender\"\nFeedback: Replace player's player with match season's position for step 2 and 3 , \"3\" with \" 1\" in step 3",
            "output": [
                "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""
            ]
        },
        {
            "input": "SQL: SELECT product_name FROM Products WHERE product_description = \"white\"\nFeedback: it is color description not product description",
            "output": [
                "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\""
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers ORDER BY payment_method Desc LIMIT 1\nFeedback: Replace payment method with order quantity",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Manufacturers EXCEPT SELECT Name FROM Manufacturers\nFeedback: In step 2 , the manufacturer should have a Product with the name DVD drive",
            "output": [
                "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'"
            ]
        },
        {
            "input": "SQL: SELECT Name , Main_Services FROM station GROUP BY Station_ID ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: in step 2 , order by total passengers",
            "output": [
                "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Name FROM wine WHERE Price > ( SELECT Max ( Price ) FROM wine WHERE Winery = \"John Anthony\" )\nFeedback: should be minimum in step 1",
            "output": [
                "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customer_Orders WHERE order_status = \"Cancelled\"\nFeedback: should find the number of different customer id not the number of rows",
            "output": [
                "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\""
            ]
        },
        {
            "input": "SQL: SELECT amenity_name FROM Dorm_amenity GROUP BY amenity_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: step 1 should have amenity id instead of amenity name and has amenity instead of dorm amenity",
            "output": [
                "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T1.enr ) , T2.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName GROUP BY T2.cName\nFeedback: find the number of rows of each college name instead of enrollment summation . also order by that count .",
            "output": [
                "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC"
            ]
        },
        {
            "input": "SQL: SELECT Name , Revenue FROM Manufacturers GROUP BY Headquarter ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: order by revenues .",
            "output": [
                "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter"
            ]
        },
        {
            "input": "SQL: SELECT * FROM roller_coaster WHERE Height > 100 OR Height > 3300\nFeedback: Use length greater than 3300 instead of height greater than 3300 and only find status not the whole row",
            "output": [
                "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100"
            ]
        },
        {
            "input": "SQL: SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code GROUP BY T2.characteristic_type_code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace reference characteristic types table with reference colors , characteristics table with products , Characteristics's characteristic type code with color code , characteristic type description with color description",
            "output": [
                "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.customer_name FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T1.city = \"Colorado\"\nFeedback: state province county should be Colorado not city",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\""
            ]
        },
        {
            "input": "SQL: SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name ! = \"TV Lounge\"\nFeedback: need to make sure that none of the amenities of each dorm is TV Lounge",
            "output": [
                "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'"
            ]
        },
        {
            "input": "SQL: SELECT cName , enr FROM College WHERE enr > 10000 OR state = \"LA\"\nFeedback: should be and instead of or",
            "output": [
                "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM station GROUP BY Station_ID HAVING Count ( * ) > = 2\nFeedback: use train station table instead in step 1",
            "output": [
                "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM wine WHERE Year > 2008\nFeedback: Replace wine's name with appellations's appelation and make sure Appelation's area does not equals Central Coast .",
            "output": [
                "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""
            ]
        },
        {
            "input": "SQL: SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name LIKE \"t\"\nFeedback: Need to replace reference characteristic types with reference product categories , characteristics with products , characteristic type description with product category description , characteristic name with product description .",
            "output": [
                "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )\nFeedback: Use name of companies instead of Products' name .",
            "output": [
                "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Price ) , Manufacturer FROM Products GROUP BY Manufacturer\nFeedback: Make sure to find name of manufacturers along with average price of products for each .",
            "output": [
                "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"
            ]
        },
        {
            "input": "SQL: SELECT T2.pName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T1.enr Desc LIMIT 1\nFeedback: Only need to find for players whose player id is present in tryout table .",
            "output": [
                "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Player WHERE pName = \"goalie\"\nFeedback: Replace player name with player position .",
            "output": [
                "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , Avg ( T1.Speed ) FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Country_ID\nFeedback: Find country's name in place of country id in step 2.",
            "output": [
                "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name"
            ]
        },
        {
            "input": "SQL: SELECT Rank FROM captain EXCEPT SELECT Rank FROM captain\nFeedback: In step 2 , make sure tu find class equals to Third rate ship of the line .",
            "output": [
                "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'"
            ]
        },
        {
            "input": "SQL: SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients\nFeedback: In step 2 , make sure customers have bookings .",
            "output": [
                "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM roller_coaster ORDER BY Height Asc\nFeedback: Make sure ordered ascending by length .",
            "output": [
                "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM College WHERE enr > \"yes\"\nFeedback: Replace college table with tryout table and make sure decision equals yes .",
            "output": [
                "SELECT count(*) FROM tryout WHERE decision  =  'yes'"
            ]
        },
        {
            "input": "SQL: SELECT Revenue , Revenue FROM Manufacturers\nFeedback: Need to find all rows of products table and manufacturers table .",
            "output": [
                "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code"
            ]
        },
        {
            "input": "SQL: SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Find number of rows of customer id in customer orders table where order status equals purchased in step 1.",
            "output": [
                "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name , City FROM branch EXCEPT SELECT Name , City FROM branch\nFeedback: Only find for without any registered members in membership register branch .",
            "output": [
                "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"
            ]
        },
        {
            "input": "SQL: SELECT Title , Director FROM movie WHERE Gross_worldwide > = 2000 ORDER BY Gross_worldwide Desc LIMIT 1\nFeedback: Replace first gross worldwide with year and replace greater with lesser or equals to 2000",
            "output": [
                "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.pName , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS < 1500\nFeedback: Need to find training hours instead of player position .",
            "output": [
                "SELECT pName ,  HS FROM Player WHERE HS  <  1500"
            ]
        },
        {
            "input": "SQL: SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = \"goalie\" INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = \"mid\"\nFeedback: In step 3 , need to find \"state\" instead of \"Tryout's college name of tryout table\"",
            "output": [
                "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers WHERE customer_name = \"Rodrick Heaney\"\nFeedback: Make sure to find unique product id of order items .",
            "output": [
                "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T1.HS ) FROM Player AS T1 WHERE T1.pID NOT IN ( SELECT T2.pID FROM Tryout AS T2 )\nFeedback: In step 1 also make sure Tryout's decision equals Yes .",
            "output": [
                "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = 1\nFeedback: should be actual delivery date instead of order date",
            "output": [
                "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.Open_year FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID GROUP BY T2.Branch_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Add register year equals 2016.",
            "output": [
                "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT pName , HS FROM Player\nFeedback: Make sure Tryout's decision for those students equals yes .",
            "output": [
                "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Price ) , Name FROM Products GROUP BY Name\nFeedback: Replace products table with manufacturer table and should be corresponding rows to each product .",
            "output": [
                "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"
            ]
        },
        {
            "input": "SQL: SELECT decision FROM Tryout WHERE pPos = \"striker\"\nFeedback: Replace decision of tryout table with state of college table",
            "output": [
                "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Headquarter FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Name = \"James\"\nFeedback: Should replace \"Products' Name\" with \"Manufacturers's Founder\"",
            "output": [
                "SELECT headquarter FROM manufacturers WHERE founder  =  'James'"
            ]
        },
        {
            "input": "SQL: SELECT Store_Name FROM Stores\nFeedback: Replace stores table with reference service types .",
            "output": [
                "SELECT Store_Name FROM Drama_Workshop_Groups"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customer_Orders WHERE order_status = \"Cancelled\"\nFeedback: Need to find corresponding total number of products",
            "output": [
                "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers\nFeedback: In step 2 , there should be ordered product details equals Latte .",
            "output": [
                "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( HS ) , Max ( HS ) FROM Player\nFeedback: Find for students for whom Tryout's decision equals yes .",
            "output": [
                "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Customer_Email_Address FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = \"Alaska\"\nFeedback: change performers table with drama workshop groups also change customer email address with store email address",
            "output": [
                "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Characteristic_Types\nFeedback: Need to find summation of colors from reference colors",
            "output": [
                "SELECT count(*) FROM ref_colors"
            ]
        },
        {
            "input": "SQL: SELECT T1.Rank FROM captain AS T1 WHERE T1.Class = \"Cutter\" INTERSECT SELECT T1.Rank FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Type = \"Armed schooner\"\nFeedback: Should replace type with captain's class in step 3.",
            "output": [
                "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'"
            ]
        },
        {
            "input": "SQL: SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = 1\nFeedback: In step 2 , need to find largest value of major .",
            "output": [
                "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.Price ) FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T1.State = \"Sonoma\"\nFeedback: Need to replace state with county in step 2.",
            "output": [
                "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""
            ]
        },
        {
            "input": "SQL: SELECT Max ( T1.HS ) , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID GROUP BY T2.pPos\nFeedback: Make sure maximum training hours is greater than training hours of any student with training hours equals 1000.",
            "output": [
                "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM railway AS T1 WHERE T1.Railway_ID NOT IN ( SELECT T2.Railway_ID FROM train AS T2 )\nFeedback: It should find railway's objectnumber along with step 2 results .",
            "output": [
                "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
            ]
        },
        {
            "input": "SQL: SELECT T2.customer_name , T1.city , T1.state_province_county FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Address_History AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id\nFeedback: Remove state province county , also find date from and date to from customer address history table .",
            "output": [
                "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id"
            ]
        },
        {
            "input": "SQL: SELECT Name , Name FROM member ORDER BY Card_Number Asc\nFeedback: Replace first name and card number with branch's name and membership register branch respectively",
            "output": [
                "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year"
            ]
        },
        {
            "input": "SQL: SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = \"striker\" INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = \"yes\"\nFeedback: There should be college name instead of player name and decision instead of player position in step 3.",
            "output": [
                "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'"
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers ORDER BY date_became_customer Desc LIMIT 1\nFeedback: Replace date became customer with order date of customer orders table .",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Year , T2.Title , T1.Publisher FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id ORDER BY T2.Year Desc\nFeedback: replace movie table with book club table and title with book title",
            "output": [
                "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC"
            ]
        },
        {
            "input": "SQL: SELECT T2.Customer_Name FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = \"Feliciaberg\"\nFeedback: There should be addresses table instead of performers table , Replace customer name with store name .",
            "output": [
                "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\""
            ]
        },
        {
            "input": "SQL: SELECT state FROM College WHERE enr > ( SELECT Max ( enr ) FROM College )\nFeedback: Need to replace \"greater\" with \"smaller\" in step 2.",
            "output": [
                "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Name = 2016\nFeedback: Replace branch's name with membership register branch register year .",
            "output": [
                "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Price ) , Avg ( Score ) FROM wine WHERE Year = 2009\nFeedback: Replace score with cases also make sure grape equals Zinfandel",
            "output": [
                "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\""
            ]
        },
        {
            "input": "SQL: SELECT product_name , Sum ( product_price ) FROM Products GROUP BY product_id\nFeedback: Use product name instead of product id and order quantity instead of product price .",
            "output": [
                "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"
            ]
        },
        {
            "input": "SQL: SELECT cName FROM College ORDER BY cName Asc\nFeedback: Replace college table with tryout table and make sure they are distinct .",
            "output": [
                "SELECT DISTINCT cName FROM tryout ORDER BY cName"
            ]
        },
        {
            "input": "SQL: SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = \"yellow\"\nFeedback: Replace product characteristics table and characteristic data type with reference colors table and color description respectively",
            "output": [
                "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Products WHERE color_code = \"hot\"\nFeedback: There should be characteristic name instead of color code .",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Appelation FROM wine\nFeedback: Replace appelation with name and make sure grapes's color equals red .",
            "output": [
                "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\""
            ]
        },
        {
            "input": "SQL: SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Use city corresponding to customers step 1.",
            "output": [
                "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT characteristic_type_description FROM Ref_Characteristic_Types\nFeedback: Make sure to find color description of reference colors",
            "output": [
                "SELECT color_description FROM ref_colors"
            ]
        },
        {
            "input": "SQL: SELECT Card_Number , Name , Hometown FROM member ORDER BY Card_Number Desc\nFeedback: It should find descending order by level .",
            "output": [
                "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC"
            ]
        },
        {
            "input": "SQL: SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code\nFeedback: Instead finding each value of city code , Need to find count of students living in city .",
            "output": [
                "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code"
            ]
        },
        {
            "input": "SQL: SELECT date_became_customer FROM Customers WHERE customer_id = 20 OR customer_id = 10\nFeedback: Need to make sure customer id is between 10 to 20.",
            "output": [
                "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM member WHERE Hometown LIKE \"Kentucky\"\nFeedback: Make sure to find card number .",
            "output": [
                "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
            ]
        },
        {
            "input": "SQL: SELECT T1.cName FROM College AS T1 INTERSECT SELECT T2.cName FROM Tryout AS T2\nFeedback: In step 1 , student whose player position equals goalie and step 2 , decision of tryout equals yes .",
            "output": [
                "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'"
            ]
        },
        {
            "input": "SQL: SELECT Winery FROM wine WHERE Score > 90\nFeedback: Replace winery with grape and make sure Grape's color is white .",
            "output": [
                "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90"
            ]
        },
        {
            "input": "SQL: SELECT name FROM swimmer GROUP BY name HAVING Count ( * ) > = 2\nFeedback: Find number of rows of each value of id in record table in step 1.",
            "output": [
                "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Fname FROM Student WHERE Age BETWEEN 25 AND 20\nFeedback: Make sure whose city code equals PHL and age between 20 and 25.",
            "output": [
                "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25"
            ]
        },
        {
            "input": "SQL: SELECT T1.address_content FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name LIKE \"Maudie Kertzmann\"\nFeedback: There should be customer name equals Maudie Kertzmann in step 2.",
            "output": [
                "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\""
            ]
        },
        {
            "input": "SQL: SELECT T1.cName FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = \"goalie\" )\nFeedback: Need to find school name whose player position equals mid and player position not equals goalie .",
            "output": [
                "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'"
            ]
        },
        {
            "input": "SQL: SELECT Built , Count ( * ) FROM railway GROUP BY Builder\nFeedback: Make sure to find distinct value of builder , should correspond rows to number of railways .",
            "output": [
                "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder"
            ]
        },
        {
            "input": "SQL: SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town\nFeedback: Should find the number of corresponding rows of drama workshop groups table for each city town .",
            "output": [
                "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.Location , Count ( * ) FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID GROUP BY T2.Station_ID\nFeedback: also find number of platforms .",
            "output": [
                "SELECT name ,  LOCATION ,  number_of_platforms FROM station"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T2.Total_pounds ) FROM member AS T1 JOIN purchase AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Level = 6\nFeedback: Need to find number of rows of purchase table instead of summation of total pounds .",
            "output": [
                "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
            ]
        },
        {
            "input": "SQL: SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Tillman Ernser\" ORDER BY T2.active_to_date Desc LIMIT 1\nFeedback: Replace active from date with active to date . find first channel code of customer contact channels table in descending order of active to date .",
            "output": [
                "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_category_code = \"Spices\" AND T1.product_category_description > 1000\nFeedback: Need to find typical buying price in place of product category description in step 2.",
            "output": [
                "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Products WHERE product_name = \"laurel\"\nFeedback: Replace products table with characteristics table and make sure to find total number of characteristics .",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""
            ]
        },
        {
            "input": "SQL: SELECT Winery FROM wine WHERE Appelation = \"White\" GROUP BY Appelation ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: In step 1 find the rows in grapes table whose color equals White .",
            "output": [
                "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers\nFeedback: Replace the minimum revenue with summation of all revenue .",
            "output": [
                "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"
            ]
        },
        {
            "input": "SQL: SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > 2000\nFeedback: Replace other product service details with other item details .",
            "output": [
                "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000"
            ]
        },
        {
            "input": "SQL: SELECT customer_name , date_became_customer FROM Customers WHERE customer_name = \"Email\"\nFeedback: Replace date became customer and customer name with active from date of customer contact channels table and channel code respectively .",
            "output": [
                "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"
            ]
        },
        {
            "input": "SQL: SELECT T1.state FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = \"goalie\" )\nFeedback: In step 2 also need to make sure that player position equals mid .",
            "output": [
                "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'"
            ]
        },
        {
            "input": "SQL: SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = \"Handful\" EXCEPT SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = \"white\"\nFeedback: Replace product characteristics with reference colors , characteristics with reference product categories , characteristic data type(step 2) with unit of measure , characteristic data type(step 3) with color description , step 4 exchange\" 3\"with\" 2\" and \" 2\"with\" 3\".",
            "output": [
                "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T1.enr ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.yCard FROM Player AS T2 )\nFeedback: Remove step 1 andMake sure players player position equals goalie in step1. replace state with player id .",
            "output": [
                "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Product_Price ) FROM Products WHERE Product_Name = \"photo\"\nFeedback: Use order quantity in order items instead of product price in products table .",
            "output": [
                "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\""
            ]
        },
        {
            "input": "SQL: SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics\nFeedback: Make sure to find product's characteristics which have never been used .",
            "output": [
                "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid ORDER BY T2.room_number Desc LIMIT 1\nFeedback: Need to make sure students resides in dorm with highest amenities .",
            "output": [
                "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )\nFeedback: Find all raws of distinct color code of reference colors instead of product id of product characteristics table .",
            "output": [
                "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"
            ]
        },
        {
            "input": "SQL: SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName LIKE \"D%\"\nFeedback: replace \"contains\" with \"equals\".",
            "output": [
                "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'"
            ]
        },
        {
            "input": "SQL: SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM branch AS T1 JOIN purchase AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T2.Total_pounds > 100\nFeedback: Need to make sure city have branches with members smaller than 100.",
            "output": [
                "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100"
            ]
        },
        {
            "input": "SQL: SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > \"FL\" GROUP BY T2.cName HAVING Count ( * ) > = 1\nFeedback: Make sure colleges is greater one or more colleges of state equals Florida .",
            "output": [
                "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT 1\nFeedback: Replace opening year with year .",
            "output": [
                "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM station ORDER BY Number_of_Platforms Desc LIMIT 1\nFeedback: Need to find for the station with highest numbers of trains .",
            "output": [
                "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM station\nFeedback: use train table instead of station table",
            "output": [
                "SELECT count(*) FROM train"
            ]
        },
        {
            "input": "SQL: SELECT Marketing_Region_Name FROM Marketing_Regions GROUP BY Marketing_Region_Code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to replace marketing regions table with drama workshop groups Table and marketing region name with marketing region code .",
            "output": [
                "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT customer_details FROM Customers WHERE customer_details LIKE \"Miss\"\nFeedback: Replace customer details with other details in both and customers table with residents table .",
            "output": [
                "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Payment_Methods\nFeedback: Replace reference payment methods table with customers table .",
            "output": [
                "SELECT count(*) FROM CUSTOMERS"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( active_from_date ) FROM Customer_Contact_Channels\nFeedback: Find average difference of active to date to active from date .",
            "output": [
                "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Headquarter ) FROM Manufacturers\nFeedback: Need to find the number of distinct products manufacturers at different headquarter .",
            "output": [
                "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter"
            ]
        },
        {
            "input": "SQL: SELECT name , Nationality FROM swimmer WHERE meter_100 > 1\nFeedback: Replace \"meter 100 greater than 1\" with \"record's result equals Win\"",
            "output": [
                "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = \"Austin\"\nFeedback: revenue should be more than revenue of any company which are situated in Austin .",
            "output": [
                "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = \"Smith Hall\" AND T2.gender = \"F\"\nFeedback: There should be dorm name instead of sex and sex instead of gender .",
            "output": [
                "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'"
            ]
        },
        {
            "input": "SQL: SELECT LName FROM Student WHERE city_code = \"M\" OR Age < 20\nFeedback: Find \"Sex equals F or city code equals BAL\"or\"Sex equals M and age less than 20\".",
            "output": [
                "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Revenue ) FROM Manufacturers WHERE Founder = \"Andy\"\nFeedback: Remove \"whose founder equals Andy\" and make sure to find for any founder",
            "output": [
                "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder"
            ]
        },
        {
            "input": "SQL: SELECT address_content FROM Addresses WHERE country = \"Gleasonmouth\" AND state_province_county = \"Arizona\"\nFeedback: Make sure \"city equals East Julianaside , state province county equals\" Texas or \"city equals Gleasonmouth , state province county equals Arizona\"",
            "output": [
                "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Should find number of rows of each value of customer id in customer orders table in step 1.",
            "output": [
                "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Railway_ID , Builder FROM railway GROUP BY Railway_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace railway table with train table in step 1.",
            "output": [
                "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) < = 1\nFeedback: find customer id of customers table in step 2. make sure greater than or equals 1 in step 3 and city does not have performer .",
            "output": [
                "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( product_price ) FROM Products\nFeedback: Make sure product type code equals clothes .",
            "output": [
                "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT T1.state ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = \"goalie\" )\nFeedback: In step 1 also need to satisfies \"pPos not equals mid\" condition .",
            "output": [
                "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Manufacturers WHERE Founder = \"Creative Labs\" INTERSECT SELECT Name FROM Manufacturers WHERE Founder = \"Sony\"\nFeedback: Find products table in both step 1 and 2 instead of Manufacturers table , Replace founder with Manufacturers's name in step 1 and 2.",
            "output": [
                "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'"
            ]
        },
        {
            "input": "SQL: SELECT characteristic_name FROM Characteristics GROUP BY characteristic_type_code HAVING Count ( * ) > = 2\nFeedback: Need to make sure value of characters present in products are two or more .",
            "output": [
                "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Payment_Methods\nFeedback: Replace reference payment methods table with bookings table .",
            "output": [
                "SELECT count(*) FROM BOOKINGS"
            ]
        },
        {
            "input": "SQL: SELECT Planned_Delivery_Date , Order_Date FROM Bookings\nFeedback: Replace order date with actual delivery date .",
            "output": [
                "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS"
            ]
        },
        {
            "input": "SQL: SELECT Railway_ID , Location FROM railway GROUP BY Railway_ID HAVING Count ( * ) > 1\nFeedback: Replace railway table with train table .",
            "output": [
                "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT pName FROM Player ORDER BY HS Desc\nFeedback: Make sure yes card equals yes .",
            "output": [
                "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Characteristic_Types\nFeedback: products table instead of reference characteristic types table .",
            "output": [
                "SELECT count(*) FROM products"
            ]
        },
        {
            "input": "SQL: SELECT Speed FROM roller_coaster ORDER BY Height Desc LIMIT 1\nFeedback: There should be length instead of height .",
            "output": [
                "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT payment_method_code FROM Invoices\nFeedback: Also need to find total value of orders made through that methods .",
            "output": [
                "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code"
            ]
        },
        {
            "input": "SQL: SELECT T2.dorm_name FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.LName = \"Smith\"\nFeedback: Replace dorm table and first name with dorm amenity table and amenity name respectively .",
            "output": [
                "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Winery FROM wine WHERE Year > = 2000\nFeedback: Use \"Name\" in place of \"Winery\" , and ( make sure)Year smaller than 2000 or greater than 2010.",
            "output": [
                "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010"
            ]
        },
        {
            "input": "SQL: SELECT T1.state FROM College AS T1 INTERSECT SELECT T2.decision FROM Tryout AS T2\nFeedback: In step 1 college name of corresponding states are(present ) in tryout table , in step 2 decision(should ) equals yes .",
            "output": [
                "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "SQL: SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = \"Herbs\"\nFeedback: Replace product characteristics , characteristic name and product name with reference product categories , unit of measure and product category code . Remove \"in characteristics table and\".",
            "output": [
                "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\""
            ]
        },
        {
            "input": "SQL: SELECT product_name , typical_buying_price FROM Products WHERE product_description = \"yellow\"\nFeedback: Also find typical selling price , Replace product description with color description .",
            "output": [
                "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM appellations WHERE Appelation = \"Napa\"\nFeedback: It should be county instead of appelation .",
            "output": [
                "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = \"China\"\nFeedback: Also corresponds book club table . Need to find book title instead of 1st company name , Replace 2nd company name with incorporated in .",
            "output": [
                "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > = 100\nFeedback: In step 1 , there should be membership amount in place of city .",
            "output": [
                "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM member GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: In step 1 , replace name in member table with membership amount of branch . In step 2 , substitute branch table for member table .",
            "output": [
                "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = 3\nFeedback: There should be appellations's county instead of appelation in wine table .",
            "output": [
                "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM swimmer\nFeedback: Replace swimmer table with stadium table .",
            "output": [
                "SELECT count(*) FROM stadium"
            ]
        },
        {
            "input": "SQL: SELECT Order_ID FROM Invoices GROUP BY Product_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Exchange product id and order id with each other in step 2",
            "output": [
                "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Products WHERE Price > 240 OR Price < 180\nFeedback: \"less than 240\" needs to be replaced by \"equals 180\".",
            "output": [
                "SELECT count(*) FROM products WHERE price >= 180"
            ]
        },
        {
            "input": "SQL: SELECT product_id FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace products table with order items table in step 1.",
            "output": [
                "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name , Count ( * ) FROM station GROUP BY Station_ID\nFeedback: Should count total number of trains per station and station's name as well .",
            "output": [
                "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id"
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers WHERE payment_method_code = 2 INTERSECT SELECT customer_name FROM Customers WHERE payment_method_code > \"Credit Card\"\nFeedback: Replace\" 2\" with \"Credit Card\"instep 1 , find only those customer who made greater than 2 orders in step 2.",
            "output": [
                "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2"
            ]
        },
        {
            "input": "SQL: SELECT Store_Phone , Store_Email_Address FROM Stores\nFeedback: Replace stores with drama workshop groups and only find whose corresponding workshop group id is present in services table .",
            "output": [
                "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM College\nFeedback: Need to find summation of enrollment .",
            "output": [
                "SELECT sum(enr) FROM College"
            ]
        },
        {
            "input": "SQL: SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T2.Year > 1989\nFeedback: There should be book club's year instead of movie's year .",
            "output": [
                "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989"
            ]
        },
        {
            "input": "SQL: SELECT state FROM College WHERE cName = \"Charles\"\nFeedback: Need to find college name instead of player name .",
            "output": [
                "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"
            ]
        },
        {
            "input": "SQL: SELECT cName FROM Tryout WHERE pPos = \"mid\"\nFeedback: Need to make sure to find for player position equals mid and player position equals goal .",
            "output": [
                "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'"
            ]
        },
        {
            "input": "SQL: SELECT product_name FROM Products ORDER BY product_price Desc LIMIT 1\nFeedback: Make sure product type code equals Hardware .",
            "output": [
                "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to substitute name in stadium table with swimmer id of record table in step 1.",
            "output": [
                "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T2.HS Desc LIMIT 3\nFeedback: Make sure to find with descending order of player id instead of state in step 2.",
            "output": [
                "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT T1.Area FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Year < 2010 GROUP BY T1.Area ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 3 , substitute area with appelation of wine .",
            "output": [
                "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name FROM swimmer\nFeedback: Also find id , nationality , meter 100 of swimmer table .",
            "output": [
                "SELECT * FROM swimmer"
            ]
        },
        {
            "input": "SQL: SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = \"IN\" OR T2.Marketing_Region_Code = \"CA\"\nFeedback: Only need to find for marketing region code equals CA in step 2.",
            "output": [
                "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student\nFeedback: Need to find for dorm table with student table .",
            "output": [
                "SELECT count(*) FROM dorm"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Products WHERE product_name = \"sesame\"\nFeedback: It should be product characteristics table instead of products table .",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
            ]
        },
        {
            "input": "SQL: SELECT Founder FROM Manufacturers WHERE Founder = \"Sony\"\nFeedback: Replace 2nd founder with name .",
            "output": [
                "SELECT founder FROM manufacturers WHERE name  =  'Sony'"
            ]
        },
        {
            "input": "SQL: SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > 4\nFeedback: There should be different address content instead of number of rows in step 1.",
            "output": [
                "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM wine WHERE Year < \"Brander\"\nFeedback: It should find for year less year of winery equals Brander .",
            "output": [
                "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")"
            ]
        },
        {
            "input": "SQL: SELECT dorm_name , student_capacity FROM Dorm ORDER BY dorm_name Asc LIMIT 1\nFeedback: Make sure it have minimum number of amenities .",
            "output": [
                "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Delivered\"\nFeedback: Should find order date instead of date became customer in step 2.",
            "output": [
                "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM member\nFeedback: Make sure to find distinct number of level .",
            "output": [
                "SELECT count(DISTINCT LEVEL) FROM member"
            ]
        },
        {
            "input": "SQL: SELECT Sex , Count ( * ) FROM Student WHERE Sex = \"F\" GROUP BY Sex\nFeedback: In step 1 , find average age for both sex , in step 2 , find number of student whose age greater than step1 result .",
            "output": [
                "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"
            ]
        },
        {
            "input": "SQL: SELECT Name , Time FROM train ORDER BY Time Desc\nFeedback: Make sure station's location equals London .",
            "output": [
                "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Company_name FROM culture_company WHERE Type = \"Alyson\"\nFeedback: There should be book club's publisher instead of type .",
            "output": [
                "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT T2.cName ) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.pName = \"mid\" AND T2.pPos = \"goalie\"\nFeedback: There should be player id instead of college name .",
            "output": [
                "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )\nFeedback: Need to find Manufacturers's name equals Sony in step 1 , Replace manufacturer table with products table and code with name in step 2.",
            "output": [
                "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"
            ]
        },
        {
            "input": "SQL: SELECT customer_id , customer_details FROM Customers GROUP BY customer_id HAVING Count ( * ) > = 3\nFeedback: Replace customers table with customer events table in step 1.",
            "output": [
                "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT Customer_Event_ID , date_moved_in , date_moved_in FROM Customer_Events\nFeedback: Remove second \"date moved in\" and instead find property id .",
            "output": [
                "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type LIKE \"warm\"\nFeedback: Need to find for characteristic name instead of characteristic data type .",
            "output": [
                "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""
            ]
        },
        {
            "input": "SQL: SELECT date_moved_in FROM Residents ORDER BY date_moved_out Asc LIMIT 1\nFeedback: Should find with \"largest value of date moved in instead of \"smallest value of date moved out\".",
            "output": [
                "SELECT max(date_moved_in) FROM Residents"
            ]
        },
        {
            "input": "SQL: SELECT Location FROM station EXCEPT SELECT Location FROM station GROUP BY Location HAVING Count ( * ) > = 15\nFeedback: Instep 2 , there should be number of platforms instead of location .",
            "output": [
                "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15"
            ]
        },
        {
            "input": "SQL: SELECT Winery , Name FROM wine\nFeedback: Need to find grape and appelation instead of winery and name .",
            "output": [
                "SELECT Grape ,  Appelation FROM WINE"
            ]
        },
        {
            "input": "SQL: SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = \"Credit Card\" EXCEPT SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = \"WY\"\nFeedback: In step 1 , replace\"payment method code equals Credit Card\" with customer address contains WY state , in step 2 , replace \"WY\" with Credit Card .",
            "output": [
                "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
            ]
        },
        {
            "input": "SQL: SELECT amenity_name FROM Dorm_amenity ORDER BY amenity_name Asc\nFeedback: Make sure to find for dorm 's dorm name equals Anonymous Donor Hall , sort only alphabetically .",
            "output": [
                "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name"
            ]
        },
        {
            "input": "SQL: SELECT Built , Location FROM railway\nFeedback: Replace built with name , Make sure corresponding railway id for given location is present in train table .",
            "output": [
                "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID"
            ]
        },
        {
            "input": "SQL: SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > 18000 GROUP BY T2.cName ORDER BY Count ( * ) Desc\nFeedback: Replace descending with ascending instep 4.",
            "output": [
                "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM captain ORDER BY age Asc\nFeedback: Replace ascending with descending .",
            "output": [
                "SELECT name FROM captain ORDER BY age DESC"
            ]
        },
        {
            "input": "SQL: SELECT Name , Score FROM wine WHERE Appelation = \"White\"\nFeedback: Need to replace appelation with grapes's color .",
            "output": [
                "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT state FROM College\nFeedback: Make sure only for find for corresponding training hours present in tryout table .",
            "output": [
                "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName"
            ]
        },
        {
            "input": "SQL: SELECT date_became_customer FROM Customers WHERE customer_name LIKE \"Tillman Ernser\"\nFeedback: Replace date became customer with channel code , customers with customer contact channels , customer name with Customers's customer name .",
            "output": [
                "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
            ]
        },
        {
            "input": "SQL: SELECT cName FROM College ORDER BY enr Asc LIMIT 1\nFeedback: Make sure to find for each state .",
            "output": [
                "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T1.Name FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID AND T1.Member_ID = T3.Member_ID WHERE T3.Register_Year > 2015\nFeedback: Replace member's name with branch's branch id , register year with open year .",
            "output": [
                "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Products WHERE Price > 240 OR Price < 200\nFeedback: Replace \"greater than\" with \"equals\" and \" 240\" with \" 200\".",
            "output": [
                "SELECT name FROM products WHERE price  <=  200"
            ]
        },
        {
            "input": "SQL: SELECT name FROM swimmer GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace name in swimmer table with id in record table in step 1.",
            "output": [
                "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT state ) FROM College\nFeedback: There should be college name instead of state .",
            "output": [
                "SELECT count(*) FROM College"
            ]
        },
        {
            "input": "SQL: SELECT Product_Name FROM Products WHERE Product_Price < 1000000\nFeedback: Make sure to find average product price instead of product price .",
            "output": [
                "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000"
            ]
        },
        {
            "input": "SQL: SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code ! = \"Clerical Staff\"\nFeedback: Also need to make sure job title code equals Sales Person in step 2.",
            "output": [
                "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
            ]
        },
        {
            "input": "SQL: SELECT Grape , Winery , Year FROM wine WHERE Price > 100 ORDER BY Price Desc\nFeedback: Replace \"descending by Price\" with ascending by year .",
            "output": [
                "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"
            ]
        },
        {
            "input": "SQL: SELECT Name , Headquarter FROM Manufacturers ORDER BY Revenue Asc\nFeedback: It should be descending instead ascending .",
            "output": [
                "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC"
            ]
        },
        {
            "input": "SQL: SELECT dorm_name , Count ( * ) FROM Dorm GROUP BY dorm_name\nFeedback: Need to corresponds rows of Has amenity's amenity id .",
            "output": [
                "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid"
            ]
        },
        {
            "input": "SQL: SELECT product_name , typical_selling_price FROM Products\nFeedback: Replace typical selling price with typical buying price .",
            "output": [
                "SELECT product_name ,  typical_buying_price FROM products"
            ]
        },
        {
            "input": "SQL: SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = \"stop\"\nFeedback: Make sure to add drama workshop groups table in step 1 and in step 2 , replace customer name with store name .",
            "output": [
                "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace stadium table with event table .",
            "output": [
                "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM country AS T1 WHERE T1.Country_ID NOT IN ( SELECT T2.Country_ID FROM roller_coaster AS T2 WHERE T2.Height > 3000 )\nFeedback: There should be length instead of height .",
            "output": [
                "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace customers table with customer orders table .",
            "output": [
                "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Characteristics WHERE characteristic_data_type = \"flax\"\nFeedback: Replace characteristic data type with Products' product name .",
            "output": [
                "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM book_club\nFeedback: Need to find distinct director from movie table .",
            "output": [
                "SELECT COUNT (DISTINCT director) FROM movie"
            ]
        },
        {
            "input": "SQL: SELECT Built , Location FROM railway\nFeedback: Replace built with wheels .",
            "output": [
                "SELECT Wheels ,  LOCATION FROM railway"
            ]
        },
        {
            "input": "SQL: SELECT Type , Count ( * ) FROM culture_company GROUP BY Type\nFeedback: Replace type in culture company with category of book club , need to find number of rows in book club .",
            "output": [
                "SELECT category ,  count(*) FROM book_club GROUP BY category"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student\nFeedback: Replace student table with has amenity table .",
            "output": [
                "SELECT count(DISTINCT dormid) FROM has_amenity"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM event ORDER BY Year Desc LIMIT 1\nFeedback: Need to list all names in descending order of year .",
            "output": [
                "SELECT name FROM event ORDER BY YEAR DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Age < 25\nFeedback: Make sure sex equals F .",
            "output": [
                "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"
            ]
        },
        {
            "input": "SQL: SELECT Starting_Year FROM technician WHERE Team = \"CLE\" OR Team = \"CWS\"\nFeedback: starting year should be used by technician from both teams",
            "output": [
                "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
            ]
        },
        {
            "input": "SQL: SELECT T1.document_status_description FROM Ref_Document_Status AS T1 JOIN Documents AS T2 ON T1.document_status_code = T2.document_status_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = 1\nFeedback: don't use documents mailed in step 1",
            "output": [
                "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.shipping_agent_name FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = 2\nFeedback: don't use documents mailed in step 1",
            "output": [
                "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT city FROM Addresses\nFeedback: only consider the addresses used in people addresses",
            "output": [
                "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
            ]
        },
        {
            "input": "SQL: SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Storm_ID HAVING Count ( * ) > = 1\nFeedback: use number deaths instead of step 1 result",
            "output": [
                "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = \"Tony Award\" INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = \"Drama Desk Award\"\nFeedback: Replace actor's name with musical's award .",
            "output": [
                "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Accounts\nFeedback: count the number of different customer id",
            "output": [
                "SELECT count(DISTINCT customer_id) FROM Accounts"
            ]
        },
        {
            "input": "SQL: SELECT name , dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Asc\nFeedback: order by course id not by the results of step 1",
            "output": [
                "SELECT name ,  dept_name FROM student ORDER BY tot_cred"
            ]
        },
        {
            "input": "SQL: SELECT dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Desc LIMIT 1\nFeedback: only use course table and replace total credits with credits",
            "output": [
                "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Max ( Milliseconds ) , Min ( Milliseconds ) FROM Track\nFeedback: Make sure find result for Genre's name equals pop .",
            "output": [
                "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
            ]
        },
        {
            "input": "SQL: SELECT employee_id , Count ( * ) FROM Circulation_History GROUP BY employee_id\nFeedback: use document id instead of employee id",
            "output": [
                "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id"
            ]
        },
        {
            "input": "SQL: SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc\nFeedback: ordered descending by all home instead of team name .",
            "output": [
                "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"
            ]
        },
        {
            "input": "SQL: SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = \"good\" INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = \"bad\"\nFeedback: In step 2 and 3 replace first name with good or bad customer from customer table .",
            "output": [
                "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'"
            ]
        },
        {
            "input": "SQL: SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = \"Monaco Grand Prix\"\nFeedback: Replace circuits table with results table(in step 1) , position text with fastest Lap Speed , country with name of races for year equals 2008 .",
            "output": [
                "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
            ]
        },
        {
            "input": "SQL: SELECT country FROM circuits ORDER BY country Asc\nFeedback: Substitute country of circuits table with name of races table , and order descending by name .",
            "output": [
                "SELECT DISTINCT name FROM races ORDER BY name DESC"
            ]
        },
        {
            "input": "SQL: SELECT T1.Company FROM entrepreneur AS T1 EXCEPT SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name = \"Rachel Elnaugh\"\nFeedback: Find name of people table who are entrepreneur in step 1 , Replace company with name , name with investor(step 3)",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Milliseconds ) , Avg ( Milliseconds ) FROM Track\nFeedback: Remove last milliseconds part , and find(average length ) for Track's name equals Latin and Track's name equals pop .",
            "output": [
                "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""
            ]
        },
        {
            "input": "SQL: SELECT student_id FROM Student_Course_Registrations\nFeedback: Make sure only student id whose course id is equal to 305 is listed .",
            "output": [
                "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
            ]
        },
        {
            "input": "SQL: SELECT Name , Count ( * ) FROM actor GROUP BY Name\nFeedback: Replace actor table with musical table . corresponding rows to each value of musical id , make sure that musical id present in actor table .",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM People\nFeedback: And make sure they are candidate .",
            "output": [
                "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
            ]
        },
        {
            "input": "SQL: SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT 1\nFeedback: Replace constructor standings id with driver id , driver reference with duration , constructor standings id table with drivers table , 2nd constructor id with lap times in milliseconds .",
            "output": [
                "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Substitue id in browser table with browser id in accelerator compatible browser table in step 1",
            "output": [
                "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT School FROM university WHERE Founded = \"Public\" OR Founded < 1850\nFeedback: Replace founded equals 1850 with founded less than 1850 , ( 2nd)Founded with affiliation , and \"less than\" with \"equals\".",
            "output": [
                "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN 2017 AND 2014\nFeedback: Exchange country of circuits table with name of races table , circuit Reference with year from races table .",
            "output": [
                "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM mountain\nFeedback: Substitute mountain table with climber table",
            "output": [
                "SELECT count(*) FROM climber"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = \"Brazil\"\nFeedback: Replace billing address with track id and make sure whose customer ID present in invoice table .",
            "output": [
                "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""
            ]
        },
        {
            "input": "SQL: SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Rent_Arrears AS T2\nFeedback: Replace rent arrears table with parking fines table .",
            "output": [
                "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = 1000\nFeedback: Need to find max speed greater than 1000.",
            "output": [
                "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"
            ]
        },
        {
            "input": "SQL: SELECT country FROM circuits WHERE lat > 2017 AND circuitRef = \"Spain\"\nFeedback: Replace country with name ,  circuits with races table , latitude with year ,  circuit reference with country .",
            "output": [
                "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
            ]
        },
        {
            "input": "SQL: SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: find weight in people table in step 1 , Replace company of entrepreneur with name of people , make sure they are entrepreneur .",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Character , Name FROM actor\nFeedback: As opposed to character find corresponding name in musical",
            "output": [
                "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Region_code ) FROM region\nFeedback: Replace region code with region id in affected region table instead of region table",
            "output": [
                "SELECT count(DISTINCT region_id) FROM affected_region"
            ]
        },
        {
            "input": "SQL: SELECT Investor FROM entrepreneur ORDER BY Money_Requested Desc\nFeedback: Place weight of people table instead of investor of entrepreneur table .",
            "output": [
                "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"
            ]
        },
        {
            "input": "SQL: SELECT product_description FROM Products_for_Hire WHERE product_name = 102.76\nFeedback: Substitute booked amount with product name from products booked table .",
            "output": [
                "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76"
            ]
        },
        {
            "input": "SQL: SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = \"Hartford\" INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = \"Waterbury\"\nFeedback: Use member in place of shop in step 3.",
            "output": [
                "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'"
            ]
        },
        {
            "input": "SQL: SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T2.time = \"Chinese Grand Prix\" AND T1.country ! = \"Australian Grand Prix\"\nFeedback: In step 2 substitute forename , surname respectively with position text and country and time and country with name .",
            "output": [
                "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
            ]
        },
        {
            "input": "SQL: SELECT name , Location , Product FROM enzyme WHERE name LIKE \"inhibitor\"\nFeedback: Need to find interaction type equals inhibitor instead of name contains inhibitor .",
            "output": [
                "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
            ]
        },
        {
            "input": "SQL: SELECT Enrollment , School FROM university ORDER BY Enrollment Desc LIMIT 1\nFeedback: Replace school with primary conference and largest value of enrollment with smallest value of founded .",
            "output": [
                "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Genre WHERE Name = \"Rock\"\nFeedback: Replace genre with track table , and make sure Genre's name equals Rock .",
            "output": [
                "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM instructor EXCEPT SELECT name FROM instructor\nFeedback: In step 2 find the name of instructor whose id is present in teaches table",
            "output": [
                "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
            ]
        },
        {
            "input": "SQL: SELECT T1.student_details FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )\nFeedback: Make sure student details who are not registered in course .",
            "output": [
                "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
            ]
        },
        {
            "input": "SQL: SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId\nFeedback: Replace qualify id in qualifying table with constructor Standings table's constructor id , and find corresponding rows to each value of race id .",
            "output": [
                "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"
            ]
        },
        {
            "input": "SQL: SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef\nFeedback: Find the number of rows of each distinct value of nationality in constructors table .",
            "output": [
                "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality"
            ]
        },
        {
            "input": "SQL: SELECT country FROM circuits ORDER BY lat Desc LIMIT 1\nFeedback: Replace country , circuits table and latitude with name , races table and date respectively .",
            "output": [
                "SELECT name FROM races ORDER BY date DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID GROUP BY T2.ResID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: step 2 find the number of rows of each value of student id in visits restaurant table .",
            "output": [
                "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Fname , LName FROM Student WHERE Sex = \"F\" AND Age > 18\nFeedback: Make sure major does not equals 600.",
            "output": [
                "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Competition , T1.stadium_id FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.Injury = \"Knee problem\" OR T2.Injury = \"Foot injury\"\nFeedback: Add stadium table in step 1 , replace competition , stadium id with season , name respectively in step 2.",
            "output": [
                "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Carrier FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > 32\nFeedback: In step 2 need to make sure memory in g should be greater than 32 instead of num of stock .",
            "output": [
                "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32"
            ]
        },
        {
            "input": "SQL: SELECT course_id FROM takes WHERE year = 2010 AND semester = \"Spring\"\nFeedback: Make sure semester equals Fall , year equals 2009 and semester equals Spring , year equals 2010",
            "output": [
                "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT role_code FROM Employees WHERE employee_name = \"Koby\"\nFeedback: Need to find Roles's role description instead of role code .",
            "output": [
                "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\""
            ]
        },
        {
            "input": "SQL: SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 2 , need to find investor instead of entrepreneur id .",
            "output": [
                "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM circuits WHERE circuitRef = 2009 AND circuitRef = \"Australian Grand Prix\"\nFeedback: Replace circuits table with results table , circuit reference(first ) with races's name , circuit reference(second ) with races's year .",
            "output": [
                "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"
            ]
        },
        {
            "input": "SQL: SELECT Name , Max_speed FROM storm GROUP BY Name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace name in storm table with storm id of affected region table .",
            "output": [
                "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Party FROM people ORDER BY Age Desc LIMIT 1\nFeedback: It should be smallest in place of largest .",
            "output": [
                "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > 2000 ORDER BY T1.Name Desc\nFeedback: In step 2 need to find by descending order of num of stock and not by name .",
            "output": [
                "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC"
            ]
        },
        {
            "input": "SQL: SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Sponsor_name = \"Birtle\"\nFeedback: Need to replace sponsor name equals Birtle\" with \"Residence equals Birtle\"",
            "output": [
                "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM people EXCEPT SELECT Name FROM people\nFeedback: Make sure people has chosen affirmative side of debate people table in step 2.",
            "output": [
                "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( transaction_amount ) FROM Financial_Transactions\nFeedback: Make sure to find summation of transaction amount .",
            "output": [
                "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
            ]
        },
        {
            "input": "SQL: SELECT name , Client FROM Web_client_accelerator WHERE Connection ! = \"Broadband\"\nFeedback: Make sure to replace client with operating system .",
            "output": [
                "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
            ]
        },
        {
            "input": "SQL: SELECT T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name ORDER BY Sum ( T1.budget ) Desc LIMIT 1\nFeedback: Remove step 2 , count number of row to each value of department name for each table .",
            "output": [
                "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Connection , T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id ORDER BY T2.compatible_since_year Desc\nFeedback: In step 1 Add browser Table and Replace connection with name of browser table .",
            "output": [
                "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )\nFeedback: In step 2 , replace customers cards table with customers table at both places .",
            "output": [
                "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , budget FROM department GROUP BY building\nFeedback: Replace building with department name , should find number of corresponding rows of student table for each department .",
            "output": [
                "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
            ]
        },
        {
            "input": "SQL: SELECT T1.Address FROM Customer AS T1 WHERE T1.Country = \"Brazil\" INTERSECT SELECT T1.Address FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = \"Germany\"\nFeedback: Make sure country equals Germany , Replace billing country equals Germany with for each customer of invoice .",
            "output": [
                "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
            ]
        },
        {
            "input": "SQL: SELECT country FROM circuits WHERE circuitRef = 2017\nFeedback: Need to replace country with name ,  circuits table with races table ,  circuit reference with year .",
            "output": [
                "SELECT name FROM races WHERE YEAR = 2017"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id ORDER BY T2.market_share Desc\nFeedback: It should be browser's name instead of web client accelerator name .",
            "output": [
                "SELECT name FROM browser ORDER BY market_share DESC"
            ]
        },
        {
            "input": "SQL: SELECT Company FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < 120000\nFeedback: Replace company with investor .",
            "output": [
                "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM people ORDER BY Weight Desc LIMIT 1\nFeedback: Make sure people id of that people is present in perpetrator table .",
            "output": [
                "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_id , T1.customer_first_name FROM Customers AS T1 JOIN Customers_Cards AS T2 WHERE T2.card_number ! = \"Credit\"\nFeedback: Need to make sure card type code not equals credit in step 2 instead of card number .",
            "output": [
                "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""
            ]
        },
        {
            "input": "SQL: SELECT ID FROM instructor\nFeedback: Make sure prerequisite did not teach in any student .",
            "output": [
                "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
            ]
        },
        {
            "input": "SQL: SELECT title , credits , dept_name FROM course GROUP BY dept_name HAVING Count ( * ) > 1\nFeedback: Find number of rows of each value of course id in prerequisite table in step 1.",
            "output": [
                "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: In step 2 replace weight with height .",
            "output": [
                "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = 2\nFeedback: Should find number of rows of each value of customer id in customers cards table in step 1.",
            "output": [
                "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id JOIN takes AS T3 ON T2.year = T3.year WHERE T3.year = 2010 AND T3.semester = \"Chandler\"\nFeedback: Replace Chandler with Fall , make sure it is offered in chandler .",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , dept_name FROM instructor GROUP BY dept_name\nFeedback: Need to find summation of students as well as instructor for each department .",
            "output": [
                "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"
            ]
        },
        {
            "input": "SQL: SELECT Membership_card FROM member WHERE Membership_card > 5\nFeedback: Need to make sure more than 5 members have that membership card .",
            "output": [
                "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
            ]
        },
        {
            "input": "SQL: SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > 1\nFeedback: Use student id in advisor table instead of name in instructor table in step 1.",
            "output": [
                "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.address_details FROM Addresses AS T1 JOIN Documents_Mailed AS T2 ON T1.address_id = T2.mailed_to_address_id WHERE T2.document_id = 7\nFeedback: Place document drafts table instead of documents mailed table and replace address details with draft details .",
            "output": [
                "SELECT draft_details FROM Document_Drafts WHERE document_id = 7"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = 2010 INTERSECT SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = 2009\nFeedback: Replace time slot table with takes classes table , There should be year instead of day in both step .",
            "output": [
                "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT T1.cell_mobile_number FROM People AS T1 JOIN Candidates AS T2 ON T1.person_id = T2.candidate_id JOIN Candidate_Assessments AS T3 ON T2.candidate_id = T3.candidate_id WHERE T3.qualification = \"Fail\"\nFeedback: In step 2 it should check for asessment outcome code equals Fail and not qualification .",
            "output": [
                "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM mountain EXCEPT SELECT Name FROM mountain WHERE Prominence = 5885\nFeedback: In step 2 , find name of mountain table where corresponding mountain id is ( also)present in climber table .",
            "output": [
                "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
            ]
        },
        {
            "input": "SQL: SELECT title , title , credits FROM course ORDER BY title Asc\nFeedback: Only find title , credits of course table ordered ascending by title instead of \"title , title , credits\"",
            "output": [
                "SELECT title FROM course ORDER BY title ,  credits"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM musical\nFeedback: Replace musical table with actor table .",
            "output": [
                "SELECT count(*) FROM actor"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year = 2008 ORDER BY T1.name Asc\nFeedback: Also correspond course table , Also find title and Replace 2nd name with title .",
            "output": [
                "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM race\nFeedback: Change race table with track table .",
            "output": [
                "SELECT count(*) FROM track"
            ]
        },
        {
            "input": "SQL: SELECT name FROM student\nFeedback: Make sure student has taken course whose course 's department name equals Statistics department .",
            "output": [
                "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
            ]
        },
        {
            "input": "SQL: SELECT candidate_id FROM Candidates WHERE candidate_details = \"stanley.monahan@example.org\"\nFeedback: Replace candidate details with email address .",
            "output": [
                "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM instructor EXCEPT SELECT name FROM instructor\nFeedback: make sure they are teaching in Spring course id in step 2.",
            "output": [
                "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"
            ]
        },
        {
            "input": "SQL: SELECT Name , Date FROM race\nFeedback: Also need to find corresponding track's name for each race .",
            "output": [
                "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id"
            ]
        },
        {
            "input": "SQL: SELECT name FROM instructor\nFeedback: Make sure instructor taught course whose title equals C Programming .",
            "output": [
                "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = 10\nFeedback: Replace storm id with number city affected , Remove \"greater than or \"\" , make sure it covered at least two regions .",
            "output": [
                "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM actor ORDER BY age Desc\nFeedback: Replace name with character .",
            "output": [
                "SELECT Character FROM actor ORDER BY age DESC"
            ]
        },
        {
            "input": "SQL: SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT 1\nFeedback: Replace enrollment with acc percent .",
            "output": [
                "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT source_system_code , master_customer_id FROM CMI_Cross_References\nFeedback: Make sure to find each value related to cmi cross reference id of parking fines table .",
            "output": [
                "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id"
            ]
        },
        {
            "input": "SQL: SELECT customer_first_name , customer_last_name FROM Customers\nFeedback: Make sure to corresponds with accounts table .",
            "output": [
                "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
            ]
        },
        {
            "input": "SQL: SELECT name FROM instructor ORDER BY salary Asc LIMIT 1\nFeedback: Make sure for that department name equals Statistics .",
            "output": [
                "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = 1 AND T2.milliseconds > 1\nFeedback: Find distinct status 's constructor id whose constructor results 's position equals 1 and q2 greater than 20",
            "output": [
                "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
            ]
        },
        {
            "input": "SQL: SELECT title FROM course WHERE dept_name = \"International Finance\"\nFeedback: Take care that title of International finance course is of prerequisite class .",
            "output": [
                "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
            ]
        },
        {
            "input": "SQL: SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = \"done\" INTERSECT SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = \"USPS\"\nFeedback: Remove both document type code , replace shipping agent name with document status code in step 2 , Add document type code equals Paper in step2.",
            "output": [
                "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\""
            ]
        },
        {
            "input": "SQL: SELECT country FROM circuits WHERE lat > 2000 AND circuitRef = \"Spain\"\nFeedback: Replace country of circuits , latitude and circuit reference with different name of races , year and country of circuits .",
            "output": [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses\nFeedback: Make sure course name equals English and replace addresses table with student course attendance .",
            "output": [
                "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT source_system_code ) FROM CMI_Cross_References WHERE source_system_code = \"Rent\"\nFeedback: Need to remove \"whose source system code equals Rent\" phrase .",
            "output": [
                "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references"
            ]
        },
        {
            "input": "SQL: SELECT year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: find the number of different course id in step 1",
            "output": [
                "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , name FROM enzyme GROUP BY name\nFeedback: Replace enzyme table with medicine table , should corresponds rows to each value of trade name .",
            "output": [
                "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name"
            ]
        },
        {
            "input": "SQL: SELECT T2.semester , T1.year FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year GROUP BY T2.semester ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Need to find takes's semester and year for smallest number of students enrolled in it .",
            "output": [
                "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )\nFeedback: In step 3 find department's budget instead of instructor's department name .",
            "output": [
                "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
            ]
        },
        {
            "input": "SQL: SELECT id , Score , Date FROM game GROUP BY stadium_id HAVING Count ( * ) > = 2\nFeedback: Replace stadium id in game table with injury accident's game id .",
            "output": [
                "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.Team_Name , T2.Founded FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Desc LIMIT 1\nFeedback: Replace first founded in step 2 with acc regular season , and largest value with smallest value .",
            "output": [
                "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers WHERE customer_first_name = \"Art\" AND customer_last_name = \"Turcotte\"\nFeedback: Need to find total number of customers cards for that specific customer .",
            "output": [
                "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM classroom\nFeedback: Find total count of distinct student id in advisor table .",
            "output": [
                "SELECT count(DISTINCT s_id) FROM advisor"
            ]
        },
        {
            "input": "SQL: SELECT course_id FROM Student_Course_Attendance WHERE student_id = 121 OR student_id = 121\nFeedback: Need to make sure student course attendance table's student id equals 121 or student course registrations student id equals 121.",
            "output": [
                "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
            ]
        },
        {
            "input": "SQL: SELECT name FROM medicine GROUP BY id HAVING Count ( * ) > 2\nFeedback: In step 1 replace id with medicine id , medicine with medicine enzyme interaction , in step 2 also find id",
            "output": [
                "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Replace student course attendance table with student course registrations table",
            "output": [
                "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT FirstName , EmployeeId FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = 10\nFeedback: Need to make sure listed employees worked for minimum 10 customers .",
            "output": [
                "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
            ]
        },
        {
            "input": "SQL: SELECT T1.Party_Theme , T1.Location FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID ORDER BY T2.Age Asc\nFeedback: It should be host's name in place of party theme .",
            "output": [
                "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"
            ]
        },
        {
            "input": "SQL: SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < 93000\nFeedback: Find distinct drivers's forename ,  surname whose lap times in milliseconds less than 93000.",
            "output": [
                "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"
            ]
        },
        {
            "input": "SQL: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id JOIN Student_Course_Attendance AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 2 , need to replace student course attendance with student course registrations .",
            "output": [
                "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT account_id , customer_id , account_name , account_name FROM Accounts\nFeedback: Remove second \"account name\". No need to find it two times .",
            "output": [
                "SELECT account_id ,  customer_id ,  account_name FROM Accounts"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM people\nFeedback: Need to change people table with debate table .",
            "output": [
                "SELECT count(*) FROM debate"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM game WHERE Season > 2010\nFeedback: Need to find different injuries caused for season greater than 2010.",
            "output": [
                "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010"
            ]
        },
        {
            "input": "SQL: SELECT Year_Opened FROM track WHERE Seating > 5000 OR Seating > 4000\nFeedback: Replace \"greater than 4000\" with equals 5000 , add seating equals or less than 4000 opened .",
            "output": [
                "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Type_Of_Restaurant WHERE ResTypeID = \"Sandwich\"\nFeedback: Replace type of restaurant table and restaurant type id with restaurant and restaurant type name respectively .",
            "output": [
                "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
            ]
        },
        {
            "input": "SQL: SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > 100000\nFeedback: Need to find distinct driver id , nationality of drivers table whose lap times in millisecond is greater than 100000.",
            "output": [
                "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name GROUP BY T2.name ORDER BY Sum ( T3.tot_cred ) Desc LIMIT 1\nFeedback: Make sure instructor is advising student with largest number of total credits .",
            "output": [
                "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = 2010 OR T2.semester = \"Spring\"\nFeedback: Replace section's section id and \"or\"with takes'course id and and , add\"or takes's year equals 2009 and semester equals fall\"",
            "output": [
                "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Name FROM mountain WHERE Country = \"West Germany\"\nFeedback: Maker sure to check for climber's country for the mountain .",
            "output": [
                "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( budget ) FROM department WHERE dept_name = \"Marketing\"\nFeedback: Find for prerequisite id equals Marketing and prerequisite id equals Finance .",
            "output": [
                "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Time FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = \"Linda\" AND T1.LName = \"Smith\"\nFeedback: Add restaurant table in step 1 , make sure restaurant id equals Subway .",
            "output": [
                "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\""
            ]
        },
        {
            "input": "SQL: SELECT Avg ( UnitPrice ) FROM Track\nFeedback: Make sure to only find for rock tracks .",
            "output": [
                "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
            ]
        },
        {
            "input": "SQL: SELECT title FROM course\nFeedback: Make sure it has two prerequisites .",
            "output": [
                "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Accounts\nFeedback: Replace accounts table with customers cards table .",
            "output": [
                "SELECT count(*) FROM Customers_cards"
            ]
        },
        {
            "input": "SQL: SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Asc\nFeedback: Make sure student registered for course name equals statistics",
            "output": [
                "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
            ]
        },
        {
            "input": "SQL: SELECT T2.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T1.registration_date Desc LIMIT 1\nFeedback: Make sure course id equals 301 and in step 2 , there should be student course registrations instead of student course attendance .",
            "output": [
                "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT 1\nFeedback: In step 2 replace country with name ,  latitude with date ,  milliseconds with date .",
            "output": [
                "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T2.Spent = 600\nFeedback: Need to replace spent with major .",
            "output": [
                "SELECT Fname , Lname FROM Student WHERE Major  =  600"
            ]
        },
        {
            "input": "SQL: SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type HAVING Count ( * ) > = 5\nFeedback: Replace transaction type with card type code of customers cards .",
            "output": [
                "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
            ]
        },
        {
            "input": "SQL: SELECT Location , Location FROM university\nFeedback: Remove one location and make sure to find school for which affiliation equals Public .",
            "output": [
                "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"
            ]
        },
        {
            "input": "SQL: SELECT cmi_cross_ref_id , source_system_code FROM CMI_Cross_References GROUP BY cmi_cross_ref_id HAVING Count ( * ) > = 1\nFeedback: In step 1 , it should be council tax table in place of cmi cross references table .",
            "output": [
                "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.booking_start_date , T1.booking_start_date FROM Bookings AS T1 JOIN Products_for_Hire AS T2 JOIN Products_Booked AS T3 ON T1.booking_id = T3.booking_id AND T3.product_id = T2.product_id WHERE T2.product_name = \"Book collection A\"\nFeedback: One of the product description should be replaced by returned yes or no .",
            "output": [
                "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Chromosome FROM enzyme )\nFeedback: Make sure to replace chromosome of enzyme with enzyme id of medicine enzyme interaction .",
            "output": [
                "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )"
            ]
        },
        {
            "input": "SQL: SELECT qualifyId , constructorId FROM qualifying WHERE number = \"Belgium\" OR number = \"France\"\nFeedback: Replace qualify Id ,  constructor Id ,  both \"number\" and qualifying table with circuit Id , location , country and circuits table respectively .",
            "output": [
                "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = \"Amisulpride\" AND T1.name LIKE \"inhibitor\"\nFeedback: Replace porphyria and medicine 's name contains\" with medicine 's name and medicine enzyme interaction 's interaction type equals\" respectively .",
            "output": [
                "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
            ]
        },
        {
            "input": "SQL: SELECT country FROM circuits WHERE lat BETWEEN 2011 AND 2009\nFeedback: Change country of circuits table with races' name and \"lat equals or\" with \"races' year is\".",
            "output": [
                "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
            ]
        },
        {
            "input": "SQL: SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = \"International Finance\"\nFeedback: Replace department and department name with prerequisite and title , student must have taken prerequiste for course .",
            "output": [
                "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
            ]
        },
        {
            "input": "SQL: SELECT name FROM enzyme WHERE Porphyria LIKE \"ALA\"\nFeedback: Replace porphyria with name .",
            "output": [
                "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
            ]
        },
        {
            "input": "SQL: SELECT T1.course_id , T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id\nFeedback: In step 2 , interchange student course registrations with courses and vice versa .",
            "output": [
                "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
            ]
        },
        {
            "input": "SQL: SELECT name FROM races ORDER BY name Asc\nFeedback: Replace name with forename and races table with drivers table .",
            "output": [
                "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"
            ]
        },
        {
            "input": "SQL: SELECT Nationality FROM host WHERE Age < 45 INTERSECT SELECT Nationality FROM host WHERE Age > 35\nFeedback: Replace less than to greater than in step 1 and greater than to less than(in step 2).",
            "output": [
                "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
            ]
        },
        {
            "input": "SQL: SELECT dept_name , building FROM department ORDER BY budget Asc\nFeedback: Make sure to find ordered descending by budget not ascending by budget .",
            "output": [
                "SELECT dept_name ,  building FROM department ORDER BY budget DESC"
            ]
        },
        {
            "input": "SQL: SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Company = \"Peter Jones\" OR T1.Company = \"Simon Woodroffe\"\nFeedback: There should be investor instead of company .",
            "output": [
                "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = 2009 )\nFeedback: In step 1 use races table instead of circuits table and year instead of circuit reference .",
            "output": [
                "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
            ]
        },
        {
            "input": "SQL: SELECT T2.Season FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T1.name = \"Walter Samuel\"\nFeedback: In step 1 replace stadium with injury accident , in step 2 replace name with player .",
            "output": [
                "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , Count ( * ) FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Affirmative GROUP BY T2.Affirmative\nFeedback: Make sure to find those name of people who were took affirmative side of debate .",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name"
            ]
        },
        {
            "input": "SQL: SELECT document_id FROM Documents WHERE document_type_code = \"done\" EXCEPT SELECT document_id FROM Documents WHERE document_type_code = \"USPS\"\nFeedback: In step 1 replace document type code with document status code also add document type code equals Paper , In step 2 replace document type code with shipping agent name .",
            "output": [
                "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\""
            ]
        },
        {
            "input": "SQL: SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Lewis\"\nFeedback: Replace circuits table , country , circuit Reference and races's name with drivers table , races's name ,  year and drivers' forename respectively .",
            "output": [
                "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
            ]
        },
        {
            "input": "SQL: SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = 2\nFeedback: In step 2 find investor instead of company .",
            "output": [
                "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Email FROM Customer WHERE City = \"NY\"\nFeedback: Also need to find customer id and city and replace city with state .",
            "output": [
                "SELECT * FROM CUSTOMER WHERE State  =  \"NY\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , Count ( * ) FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id GROUP BY T2.technician_id\nFeedback: ( Step 2) Find number of rows of each value of repair assignment's technician id along with corresponding technician's name .",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
            ]
        },
        {
            "input": "SQL: SELECT Milliseconds , TrackId FROM Track ORDER BY Milliseconds Asc LIMIT 1\nFeedback: Also find milliseconds with the largest value of it . Remove track id .",
            "output": [
                "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
            ]
        },
        {
            "input": "SQL: SELECT Company FROM entrepreneur\nFeedback: Need to find people's name whose people id is also present in entrepreneur's people id .",
            "output": [
                "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
            ]
        },
        {
            "input": "SQL: SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total < 20 )\nFeedback: Replace Customer's customer id with Invoice's customer id and total should be equals or less than 20.",
            "output": [
                "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM bank\nFeedback: Make sure to find summation of no of customers .",
            "output": [
                "SELECT sum(no_of_customers) FROM bank"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id AND T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T2.Away_team = \"Thiago Motta\" AND T3.Player = \"Walter Samuel\"\nFeedback: There should be player instead of away team .",
            "output": [
                "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'"
            ]
        },
        {
            "input": "SQL: SELECT candidate_id FROM Candidate_Assessments WHERE qualification = \"Pass\"\nFeedback: Need to replace qualification with asessment outcome code .",
            "output": [
                "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
            ]
        },
        {
            "input": "SQL: SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type\nFeedback: Replace transaction type in financial transactions table with distinct card type code in customers cards , corresponding rows to each value of transaction made .",
            "output": [
                "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
            ]
        },
        {
            "input": "SQL: SELECT T1.sec_id FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )\nFeedback: In step 2 it should find course's course id which are'nt one of the results of step 1.",
            "output": [
                "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = 2\nFeedback: Make sure to replace \"greater than or equals\" with \"less than\".",
            "output": [
                "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT title FROM course WHERE title = \"Mobile Computing\"\nFeedback: Make sure prerequisite for course's title equals Mobile Computing .",
            "output": [
                "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
            ]
        },
        {
            "input": "SQL: SELECT Name , ArtistId FROM Artist GROUP BY ArtistId HAVING Count ( * ) > = 3\nFeedback: In step 1 , replace artist id in artist table in place of artist id in album table .",
            "output": [
                "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
            ]
        },
        {
            "input": "SQL: SELECT T2.name , T1.Trade_Name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = \"Yes\"\nFeedback: In step 2 Replace enzyme with medicine .",
            "output": [
                "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'"
            ]
        },
        {
            "input": "SQL: SELECT Starting_Year FROM technician ORDER BY Age Asc LIMIT 1\nFeedback: Instead of smallest value of age , find for largest value of age .",
            "output": [
                "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT employee_name FROM Employees EXCEPT SELECT employee_name FROM Employees\nFeedback: Make sure corresponding employee id is also present in Circulation History's employee id in step 2.",
            "output": [
                "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id"
            ]
        },
        {
            "input": "SQL: SELECT Region_code , Count ( * ) FROM region GROUP BY Region_code\nFeedback: Replace region code with region name , should find number of corresponding rows of each region id in affected region .",
            "output": [
                "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Artist AS T1 WHERE T1.ArtistId NOT IN ( SELECT T2.ArtistId FROM Album AS T2 )\nFeedback: In step 2 replace artist 's artist with album 's artist .",
            "output": [
                "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId"
            ]
        },
        {
            "input": "SQL: SELECT shipping_agent_code FROM Documents WHERE receipt_number = \"UPS\"\nFeedback: Replace documents table with reference shipping agents table , receipt number with shipping agent name .",
            "output": [
                "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\""
            ]
        },
        {
            "input": "SQL: SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Replace url in races , circuit Id , name , races table with lap times in milliseconds , forename , surname and drivers table respectively .",
            "output": [
                "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Class = 1\nFeedback: Replace class with race id .",
            "output": [
                "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"
            ]
        },
        {
            "input": "SQL: SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = \"Researcher\"\nFeedback: Need to replace sponsor name with residence .",
            "output": [
                "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\""
            ]
        },
        {
            "input": "SQL: SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = \"Schmitt-Lang\" EXCEPT SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = \"Schmidt ,  Kertzmann and Lubowitz\"\nFeedback: Replace whose cmi details equals Schmitt Lang with for customer master index table , In step 1 replace parking fines with rent arrears .",
            "output": [
                "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'"
            ]
        },
        {
            "input": "SQL: SELECT Founded FROM university ORDER BY Enrollment Desc LIMIT 1\nFeedback: There should be founded instead of enrollment . and make sure affiliation is nonpublic .",
            "output": [
                "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.role_description , T2.employee_id , Count ( * ) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code\nFeedback: Also count the number of rows of employees table .",
            "output": [
                "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code"
            ]
        },
        {
            "input": "SQL: SELECT Location FROM perpetrator ORDER BY Injured Desc LIMIT 1\nFeedback: There should be largest value of killed not injured .",
            "output": [
                "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT title FROM course WHERE dept_name = \"Statistics\" AND dept_name ! = \"Psychology\"\nFeedback: Make sure to swap Psychology and Statistics department .",
            "output": [
                "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
            ]
        },
        {
            "input": "SQL: SELECT T2.i_ID FROM instructor AS T1 JOIN advisor AS T2 ON T1.ID = T2.i_ID WHERE T1.dept_name = \"History\"\nFeedback: Find instructor's id for student whose department name equals History , make sure instructor is an advisor .",
            "output": [
                "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
            ]
        },
        {
            "input": "SQL: SELECT Region_name FROM region WHERE Region_code ! = \"Denmark\"\nFeedback: It should be region name in place of region code .",
            "output": [
                "SELECT region_name FROM region WHERE region_name != 'Denmark'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Party_Theme FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID HAVING Count ( * ) > 20\nFeedback: In step 1 replace party host table with host , In step 2 replace party host 's party id with party 's number of hosts , Add host 's name In step 3.",
            "output": [
                "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers WHERE customer_first_name = \"Blanche\" AND customer_last_name = \"Huels\"\nFeedback: Replace customers table with customers cards table and make sure card type code equals credit .",
            "output": [
                "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Advisor ) FROM Student\nFeedback: Replace advisor with student id and Add Student's advisor equals 1121.",
            "output": [
                "SELECT count(*) FROM Student WHERE Advisor =  1121"
            ]
        },
        {
            "input": "SQL: SELECT T2.Height FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Desc\nFeedback: There should be injured instead of killed .",
            "output": [
                "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM university WHERE Location = \"NY\"\nFeedback: Instead \"equals\" make sure it is\"contains\".",
            "output": [
                "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM instructor WHERE dept_name = \"Math\" ORDER BY salary Asc\nFeedback: Make sure instructor who teaches department name equals Math of students , Replace salary with total credits .",
            "output": [
                "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Fname = \"Linda\" AND LName = \"Smith\"\nFeedback: Make sure to find number of rows of visits restaurant for which Restaurant's restaurant id equals Subway .",
            "output": [
                "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\""
            ]
        },
        {
            "input": "SQL: SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code\nFeedback: It should be the number of the corresponding rows to each card type code .",
            "output": [
                "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 GROUP BY T1.customer_id ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: In step 3 replace accounts with customers .",
            "output": [
                "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = \"China\" OR T1.Location = \"Japan\"\nFeedback: Replace location with country .",
            "output": [
                "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM actor EXCEPT SELECT Name FROM actor\nFeedback: In step 1 find musical id of musical table , in step 2 find musical id of actor table .",
            "output": [
                "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM classroom AS T1 JOIN time_slot AS T2 WHERE T2.end_hr > 50 AND T1.building = \"Alumni\"\nFeedback: Find only room number and building , make sure capacity range is 50 to 100.",
            "output": [
                "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
            ]
        },
        {
            "input": "SQL: SELECT T1.Product , T1.Chromosome , T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.Location = \"Cytosol\"\nFeedback: Use porphyria Instead of interaction type .",
            "output": [
                "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM actor WHERE age < = 20\nFeedback: Replace equals 20 with greater than 20.",
            "output": [
                "SELECT Name FROM actor WHERE Age != 20"
            ]
        },
        {
            "input": "SQL: SELECT student_id , Count ( * ) FROM Student_Course_Attendance GROUP BY student_id\nFeedback: Replace student course attendance with student course registrations and should be number of corresponding rows of each student course registrations student id .",
            "output": [
                "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
            ]
        },
        {
            "input": "SQL: SELECT source_system_code , cmi_cross_ref_id FROM CMI_Cross_References ORDER BY source_system_code Asc\nFeedback: Need to find benifit id instead of cmi cross reference id , and also order by benifit id for corresponding cmi cross reference id .",
            "output": [
                "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Make sure to replace transaction type with card type code .",
            "output": [
                "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Documents_Mailed WHERE document_id = 2\nFeedback: Replace documents mailed table with draft copies table .",
            "output": [
                "SELECT count(*) FROM Draft_Copies WHERE document_id = 2"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id WHERE T1.Connection = \"Fasterfox\" AND T1.name = \"CACHEbox\"\nFeedback: Use web client accelerator name instead of connection .",
            "output": [
                "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM classroom WHERE capacity > \"Lamberton\" AND capacity < 50\nFeedback: Make sure it should be capacity less than 50 and building equals Lamberton .",
            "output": [
                "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM musical WHERE Award = \"Bob Fosse\"\nFeedback: Replace award with nominee .",
            "output": [
                "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""
            ]
        },
        {
            "input": "SQL: SELECT id , name FROM Web_client_accelerator GROUP BY id HAVING Count ( * ) > = 2\nFeedback: In step 1 , there should be accelerator id of accelerator compatible browser table in place of id in web client accelerator table .",
            "output": [
                "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T2.Region_name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T1.Number_Deaths < 10\nFeedback: Replace less with greater than or equals .",
            "output": [
                "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10"
            ]
        },
        {
            "input": "SQL: SELECT id , name FROM enzyme GROUP BY id , name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace id , name in enzyme with enzyme id of medicine enzyme interaction for which interaction type equals activator in step 1.",
            "output": [
                "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name FROM instructor WHERE salary > 80000\nFeedback: Make sure department name equals Comp . Sci . department .",
            "output": [
                "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"
            ]
        },
        {
            "input": "SQL: SELECT Time FROM climber WHERE Country = \"Uganda\"\nFeedback: Make sure it is mountain's country .",
            "output": [
                "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Web_client_accelerator WHERE Connection = \"Broadband, Satellite, Wireless, Fiber, DSL\"\nFeedback: Make sure to find without repetition client in web client accelerator table and remove condition .",
            "output": [
                "SELECT count(DISTINCT client) FROM web_client_accelerator"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( UnitPrice ) FROM Track\nFeedback: Make sure it is a track of jazz .",
            "output": [
                "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM instructor\nFeedback: Make sure whose department name equals Comp . Sci .",
            "output": [
                "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
            ]
        },
        {
            "input": "SQL: SELECT Award FROM musical WHERE Name = \"Cleavant Derricks\" OR Name = \"Tony Award\"\nFeedback: Replace award and name with nominee and award , Replace Tony award with Bob Fosse .",
            "output": [
                "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
            ]
        },
        {
            "input": "SQL: SELECT council_tax_id , council_tax_id FROM Parking_Fines WHERE council_tax_id = 9\nFeedback: Remove\"for which council tax id equals 9\" and replace one \"council tax id\" with \"cmi cross ref id\".",
            "output": [
                "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines"
            ]
        },
        {
            "input": "SQL: SELECT T1.Party_Theme FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID WHERE T2.Age > 50\nFeedback: Replace party theme with party id And Make sure to count rows of party table .",
            "output": [
                "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"
            ]
        },
        {
            "input": "SQL: SELECT Duration FROM actor ORDER BY age Asc LIMIT 1\nFeedback: There should be largest value of age instead of smallest value of age .",
            "output": [
                "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc\nFeedback: Replace membership card with time of purchase .",
            "output": [
                "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = 1\nFeedback: Replace constructor results with driver standings , position text with forename , race id with wins , also make sure position equals standing .",
            "output": [
                "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"
            ]
        },
        {
            "input": "SQL: SELECT customer_id , card_id , card_number , other_card_details FROM Customers_Cards\nFeedback: Replace other card details with card type code .",
            "output": [
                "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Affiliation FROM university WHERE Founded < 1850 GROUP BY Affiliation\nFeedback: Replace affiliation with enrollment , find corresponding rows to each value of affiliation . make sure greater than 1850.",
            "output": [
                "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.year = 2003\nFeedback: Also make sure semester equals Fall .",
            "output": [
                "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM stadium\nFeedback: Find number of games whose game id is not one of the result of injury accident table .",
            "output": [
                "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customer_Master_Index\nFeedback: Replace customer master index with rent arrears .",
            "output": [
                "SELECT count(*) FROM rent_arrears"
            ]
        },
        {
            "input": "SQL: SELECT Date FROM perpetrator ORDER BY Killed Desc LIMIT 1\nFeedback: Need to change height instead of killed .",
            "output": [
                "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT name , salary FROM instructor WHERE dept_name = \"History\"\nFeedback: Make sure instructor's id is one of the result of advisor's year .",
            "output": [
                "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Asc\nFeedback: Replace killed with injured in step 2.",
            "output": [
                "SELECT Injured FROM perpetrator ORDER BY Injured ASC"
            ]
        },
        {
            "input": "SQL: SELECT * , Player , Source FROM injury_accident WHERE Injury ! = \"Knee problem\"\nFeedback: Also need to find number of matches .",
            "output": [
                "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.source_system_code FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = \"Schmitt-Lang\" AND T1.cmi_details = \"Gottlieb ,  Becker and Wyman\"\nFeedback: \" and cmi details equals Schmitt Lang \" Remove this .",
            "output": [
                "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'"
            ]
        },
        {
            "input": "SQL: SELECT Company , Investor FROM entrepreneur ORDER BY Money_Requested Desc\nFeedback: Replace company with people's name , make sure they are entrepreneur .",
            "output": [
                "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = 2\nFeedback: Replace name in people table with negative in debate people table in step 1.",
            "output": [
                "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = \"inhibitor\" INTERSECT SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = \"activitor\"\nFeedback: In step 2 , replace porphyria with interaction type and in step 3 replace porphyria with interaction type .",
            "output": [
                "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM medicine\nFeedback: Replace medicine table with enzyme table .",
            "output": [
                "SELECT count(*) FROM enzyme"
            ]
        },
        {
            "input": "SQL: SELECT City FROM Customer WHERE PostalCode = 70174\nFeedback: Replace customer table with employee table .",
            "output": [
                "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\""
            ]
        },
        {
            "input": "SQL: SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Find driver id and constructor reference of status table who has participates in largest country of drivers .",
            "output": [
                "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM actor GROUP BY Name HAVING Count ( * ) > = 3\nFeedback: Replace name with musical id in step 1 and replace actor table with musical table in step 2.",
            "output": [
                "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT student_id FROM Student_Course_Attendance ORDER BY date_of_attendance Asc\nFeedback: Make sure course in the statistics department .",
            "output": [
                "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT name FROM instructor WHERE salary < ( SELECT Max ( salary ) FROM instructor )\nFeedback: Their should be salary instead of name .",
            "output": [
                "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"
            ]
        },
        {
            "input": "SQL: SELECT Date FROM game ORDER BY Date Desc\nFeedback: Order should be descending by home team .",
            "output": [
                "SELECT Date FROM game ORDER BY home_team DESC"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name , gender_mf FROM Customers ORDER BY last_name Asc\nFeedback: Make sure good or bad customer equal to good .",
            "output": [
                "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Web_client_accelerator WHERE id NOT IN ( SELECT Connection FROM Web_client_accelerator WHERE Connection = \"Broadband, Satellite, Wireless, Fiber, DSL\" )\nFeedback: Replace connection of web client accelerator table with browser id of accelerator compatible browser in step 1 , remove last connection part .",
            "output": [
                "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser )"
            ]
        },
        {
            "input": "SQL: SELECT T1.receipt_date FROM Documents AS T1 JOIN Documents_Mailed AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = 7\nFeedback: Use mailing date instead of receipt date .",
            "output": [
                "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = \"Afghanistan\" INTERSECT SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = \"Albania\"\nFeedback: Their should be region name instead of region code in step 2 and step 3.",
            "output": [
                "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( amount_paid ) FROM Payments\nFeedback: Use amount due instead of amount paid .",
            "output": [
                "SELECT avg(amount_due) FROM payments"
            ]
        },
        {
            "input": "SQL: SELECT Venue FROM debate ORDER BY Venue Asc\nFeedback: Need to find ordered ascending by num of audience not by venue .",
            "output": [
                "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC"
            ]
        },
        {
            "input": "SQL: SELECT T1.Player_name FROM player AS T1 JOIN coach AS T2 JOIN player_coach AS T3 ON T1.Player_ID = T3.Player_ID AND T3.Coach_ID = T2.Coach_ID WHERE T2.Rank = 1 AND T1.Rank = \"2nd\"\nFeedback: Remove\" player's rank equals 2nd\".",
            "output": [
                "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1"
            ]
        },
        {
            "input": "SQL: SELECT Name , Carrier FROM phone\nFeedback: Replace name with memory in g .",
            "output": [
                "SELECT Memory_in_G ,  Carrier FROM phone"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > 342 INTERSECT SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > 200\nFeedback: In second step only make sure people are on affirmative side under debate people",
            "output": [
                "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200"
            ]
        },
        {
            "input": "SQL: SELECT student_id FROM Student_Course_Registrations\nFeedback: There should be student course attendance table instead of student course registrations table .",
            "output": [
                "SELECT student_id FROM student_course_attendance"
            ]
        },
        {
            "input": "SQL: SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) < = 20\nFeedback: should find CUSTOMER's last name",
            "output": [
                "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"
            ]
        },
        {
            "input": "SQL: SELECT * FROM Discount_Coupons WHERE coupon_amount > 500 OR coupon_amount < 500\nFeedback: Replace discount coupons table with customers table , make sure coupon amount equals 500 , and good or bad customer equals good or bad .",
            "output": [
                "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Document_Types\nFeedback: Replace reference document types table with documents table and Make sure shipping agent name equals USPS for document id .",
            "output": [
                "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\""
            ]
        },
        {
            "input": "SQL: SELECT year , year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: replace first year with section's semester .",
            "output": [
                "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Killed ) FROM perpetrator\nFeedback: Need to find average injured people not average killed .",
            "output": [
                "SELECT avg(Injured) FROM perpetrator"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM storm\nFeedback: It should be region table instead of storm .",
            "output": [
                "SELECT count(*) FROM region"
            ]
        },
        {
            "input": "SQL: SELECT Name , Duration FROM actor\nFeedback: Replace name with character .",
            "output": [
                "SELECT Character ,  Duration FROM actor"
            ]
        },
        {
            "input": "SQL: SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = \"Clemson\"\nFeedback: Replace all games with enrollment .",
            "output": [
                "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Date , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id ORDER BY T2.Competition Desc\nFeedback: Replace stadium table with injury table , name with player and competition with season",
            "output": [
                "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
            ]
        },
        {
            "input": "SQL: SELECT T2.order_id FROM Orders AS T1 JOIN Order_Items AS T2 ON T2.order_id = T1.order_id JOIN Shipments AS T3 ON T1.order_id = T3.order_id ORDER BY T3.shipment_date Desc LIMIT 1\nFeedback: Require date order placed instead shipment date",
            "output": [
                "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT city FROM airports GROUP BY city ORDER BY Count ( * ) Asc\nFeedback: the number is step 1 should be greater than 2",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"
            ]
        },
        {
            "input": "SQL: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.country ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: should find the number of songs of each artist then find the country of the artist",
            "output": [
                "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.phone_number FROM Customers AS T1 INTERSECT SELECT T2.phone_number FROM Staff AS T2\nFeedback: it does not have to be in both results . should be in any of them instead",
            "output": [
                "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff"
            ]
        },
        {
            "input": "SQL: SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: in step 2 use , use form id instead of party id",
            "output": [
                "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT document_name , Count ( * ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: remove step 1 , number of accesses is already calculated as access count",
            "output": [
                "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Desc LIMIT 1\nFeedback: should add all load amounts of each customer",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc\nFeedback: It should order ascending by date order placed and Orders's order id must find without repetition .",
            "output": [
                "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM teachers WHERE FirstName = \"TARRING\"\nFeedback: Change teachers table with list table , and ensure that teachers's first name equals TARRING and last name equals LEIA .",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.city = \"New York\"\nFeedback: state equals New York will take the place of city equals New York .",
            "output": [
                "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'"
            ]
        },
        {
            "input": "SQL: SELECT Advisor FROM Student WHERE Major = \"Spring\"\nFeedback: major will be replaced by election cycle and that advisor must have record of treasurer votes .",
            "output": [
                "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student\nFeedback: List distinct president vote in voting record table .",
            "output": [
                "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"
            ]
        },
        {
            "input": "SQL: SELECT bname FROM bank\nFeedback: Also Ensure that branch id is present in loan table .",
            "output": [
                "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Major FROM Student\nFeedback: Use treasurer vote of voting record table instead of advisor of student table .",
            "output": [
                "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote"
            ]
        },
        {
            "input": "SQL: SELECT cust_name , credit_score FROM customer\nFeedback: Specify that the customers have taken any loan .",
            "output": [
                "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM bank WHERE city = \"New York City\"\nFeedback: In place of finding number of rows we need to find summation of no of customers .",
            "output": [
                "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'"
            ]
        },
        {
            "input": "SQL: SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2\nFeedback: Find faculty id of faculty who is present in faculty participates in table and advisor of student table .",
            "output": [
                "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"
            ]
        },
        {
            "input": "SQL: SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats = \"Mar\"\nFeedback: Use song table instead of files table in step 1 , change formats with releasedate in step 2.",
            "output": [
                "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""
            ]
        },
        {
            "input": "SQL: SELECT user_name , user_name FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Put user name , password in place of user name , user name and role code instead of user id .",
            "output": [
                "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Address , Count ( * ) FROM Locations GROUP BY Address\nFeedback: we'll need to supplant address in locations table with how to get there in tourist attractions table .",
            "output": [
                "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"
            ]
        },
        {
            "input": "SQL: SELECT Address FROM Locations WHERE Location_Name LIKE \"film\"\nFeedback: address is wrong . It should be replaced with location name .",
            "output": [
                "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM routes\nFeedback: Use airlines table in place of routes table .",
            "output": [
                "SELECT count(*) FROM airlines"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM festival_detail\nFeedback: Need to Summation of num of audience for each festivals .",
            "output": [
                "SELECT sum(Num_of_Audience) FROM festival_detail"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Activity\nFeedback: There should be faculty participates in table to be used , not activity table .",
            "output": [
                "SELECT count(DISTINCT FacID) FROM Faculty_participates_in"
            ]
        },
        {
            "input": "SQL: SELECT T2.country FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = \"China\" GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Use country instead of airport id in step 4.",
            "output": [
                "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = \"bus\" OR T1.Address = \"walk\"\nFeedback: address is wrong . Use how to get there in place of it .",
            "output": [
                "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "SQL: SELECT artist_name , Count ( * ) FROM song GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: Ensure parallel to find songs they have produce .",
            "output": [
                "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: Find number of rows of document table with most common value of document type code and document structure code .",
            "output": [
                "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM list WHERE FirstName = \"MADLOCK\"\nFeedback: Mention list's full name equals MADLOCK RAY and change list table to teachers table .",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\""
            ]
        },
        {
            "input": "SQL: SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT 3\nFeedback: No need to find star rating description twice and replace one with star rating code instead .",
            "output": [
                "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.languages = \"modern\" OR T1.g_name = \"English\"\nFeedback: Exchange languages with genre is and genre name with languages .",
            "output": [
                "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"English\""
            ]
        },
        {
            "input": "SQL: SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = \"Zieme\" AND T1.personal_name = \"Bernie\"\nFeedback: Change date of latest logon with date of completion .",
            "output": [
                "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\""
            ]
        },
        {
            "input": "SQL: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = \"4:%\" OR T1.duration = \"English\"\nFeedback: We 'll switch\"duration equals English\" to languages equal English\"and duration more than or equals to 4.",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"English\""
            ]
        },
        {
            "input": "SQL: SELECT Age , Age FROM Student WHERE Major = 600\nFeedback: It should find largest age and smallest age , not just age of students .",
            "output": [
                "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Age ) FROM Student WHERE Sex = \"Spring\" AND Sex = \"F\"\nFeedback: sex equals Spring is wrong change sex with election cycle , and confirm that they have secretary vote .",
            "output": [
                "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Rank FROM Faculty WHERE Sex = \"M\" GROUP BY Rank\nFeedback: List number of rows for sex equals M and for sex equals F for each rank .",
            "output": [
                "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"
            ]
        },
        {
            "input": "SQL: SELECT f_id FROM song WHERE rating < 8\nFeedback: And have the largest value of resolution from song table .",
            "output": [
                "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)"
            ]
        },
        {
            "input": "SQL: SELECT artist_name FROM files ORDER BY artist_name Asc\nFeedback: There should be song name of song table , the order of ascending should be by resolution .",
            "output": [
                "SELECT song_name FROM song ORDER BY resolution"
            ]
        },
        {
            "input": "SQL: SELECT T2.f_id , T1.preferred_genre , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating Asc\nFeedback: Exchange preferred genre with duration , and ensure that song's song name equals English .",
            "output": [
                "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"English\" ORDER BY rating"
            ]
        },
        {
            "input": "SQL: SELECT Fname FROM Faculty EXCEPT SELECT Fname FROM Faculty\nFeedback: In step 2 Also find activity name equals Canoeing or activity name equals Kayaking for professors .",
            "output": [
                "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "SQL: SELECT T1.network_name , Count ( * ) FROM station AS T1 JOIN route AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id\nFeedback: Need to find network name , services in step 2 along with the corresponding number of rows of each value of station id in route table .",
            "output": [
                "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id"
            ]
        },
        {
            "input": "SQL: SELECT bname FROM bank WHERE city = \"New York\"\nFeedback: Need to find bank name instead of Branch name and in \"State\" equals New York not \"city\".",
            "output": [
                "SELECT bname FROM bank WHERE state  =  'New York'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Course_Authors_and_Tutors\nFeedback: Use courses table instead of course authors and tutors table .",
            "output": [
                "SELECT count(*) FROM COURSES"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 1004\nFeedback: There is no need to find president vote equals 1004 , find for those student who have class president vote in plcae of that .",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE"
            ]
        },
        {
            "input": "SQL: SELECT LName FROM Student WHERE Major > 50\nFeedback: Not greater than 50 but equal to 50.",
            "output": [
                "SELECT LName FROM STUDENT WHERE Major  =  50"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T2.amount ) , T2.branch_ID FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.branch_ID\nFeedback: Find summation of amount in step 2 along with corresponding rows of each value of branch id in loan table .",
            "output": [
                "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"
            ]
        },
        {
            "input": "SQL: SELECT T1.last_name FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Take date complaint raised instead of staff id .",
            "output": [
                "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id\nFeedback: No need to find course description in step 2.",
            "output": [
                "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors"
            ]
        },
        {
            "input": "SQL: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.song_name = \"bangla\"\nFeedback: It should be languages rather than song name .",
            "output": [
                "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\""
            ]
        },
        {
            "input": "SQL: SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName ! = \"OTHA\"\nFeedback: Full name of teacher not equals OTHA MOYER and first name , last name should be of list table .",
            "output": [
                "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
            ]
        },
        {
            "input": "SQL: SELECT T2.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.languages = \"bangla\" GROUP BY T1.artist_name ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: In step 1 and 3 files table is wrong , use artist table instead of it .",
            "output": [
                "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = 18\nFeedback: Here first of all substitute age in place of advisor , and corresponding student id ( must)is present in voting record table .",
            "output": [
                "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
            ]
        },
        {
            "input": "SQL: SELECT T1.Location_Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Reinstate how to get there from tourist attractions with location name in Step 3 , location id in step 2 with how to get there",
            "output": [
                "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT invoice_date FROM Invoices WHERE invoice_number = 10\nFeedback: We Should Change invoice date of invoices with date order placed of orders .",
            "output": [
                "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"
            ]
        },
        {
            "input": "SQL: SELECT Fname , LName FROM Student WHERE Advisor = \"Michael\"\nFeedback: Ensure that student are advised by Michael Goodrich .",
            "output": [
                "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\""
            ]
        },
        {
            "input": "SQL: SELECT T1.id , T1.local_authority FROM station AS T1 JOIN weekly_weather AS T2 ON T1.id = T2.station_id WHERE T2.precipitation > 50\nFeedback: Ensure that precipitation is must be maximum .",
            "output": [
                "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = \"CHRISSY\" AND T2.FirstName = \"NABOZNY\"\nFeedback: Need to find last name instead of 2nd first name .",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\""
            ]
        },
        {
            "input": "SQL: SELECT product_name , Count ( * ) FROM Products GROUP BY product_name ORDER BY Count ( * ) Asc\nFeedback: product name in products table in step 1 is wrong , there should be product id in order items .",
            "output": [
                "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
            ]
        },
        {
            "input": "SQL: SELECT address_line_2 , email_address FROM Customers WHERE email_address = \"hsteuber@example.org\" INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = \"vbogisich@example.org\"\nFeedback: Catch only address line 1 in step1 and address line 2 in step2 , email address must be vbogisich@example . org .",
            "output": [
                "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\""
            ]
        },
        {
            "input": "SQL: SELECT T1.phone_number FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )\nFeedback: Find only for largest value of date complaint raised .",
            "output": [
                "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp4\" OR T2.rating > 720\nFeedback: Use resolution rather than rating .",
            "output": [
                "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM list WHERE FirstName = \"KAWA\"\nFeedback: first name equals KAWA and last name GORDEN From teachers table .",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE country = \"Canada\"\nFeedback: Put routes instead of airports table , Departure country equals United States and Arriving country equals Canada .",
            "output": [
                "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
            ]
        },
        {
            "input": "SQL: SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING Count ( * ) > 10000\nFeedback: In step 1 it should ( only)find each value of access count in documents table .",
            "output": [
                "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Age ) FROM Student WHERE city_code = \"NYC\" AND Major = 600\nFeedback: Remove advisor equals 600 , and confirm that election cycle equals Spring and they have secretary votes .",
            "output": [
                "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"No Response\"\nFeedback: In Step 1 Substitute customer orders table with mailshot customers then order status code with outcome code in Step 2.",
            "output": [
                "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM train\nFeedback: There should be number of different services of station table .",
            "output": [
                "SELECT count(DISTINCT services) FROM station"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800\nFeedback: ( And)It should also satisfy one more condition in step 2 where formats equals mp 3.",
            "output": [
                "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Classroom FROM teachers GROUP BY Classroom\nFeedback: Ensure that number of the corresponding rows to each class room of list Table .",
            "output": [
                "SELECT count(*) ,  classroom FROM list GROUP BY classroom"
            ]
        },
        {
            "input": "SQL: SELECT product_name , Count ( * ) FROM Products GROUP BY product_name\nFeedback: It should be correspond rows of each value of product id in complaints table .",
            "output": [
                "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Roles\nFeedback: Instead of roles table , put users table and user login equals 1.",
            "output": [
                "SELECT count(*) FROM users WHERE user_login  =  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = \"Giuliano\" AND T3.Lname = \"Mark\"\nFeedback: In step 2 \"Lname equals Mark\" is wrong , instead it should find for first name equals Mark .",
            "output": [
                "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
            ]
        },
        {
            "input": "SQL: SELECT party_email FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Take customer id in party services table instead of party phone in parties table .",
            "output": [
                "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = \"Jeramie\"\nFeedback: Require date order placed in orders table in place of shipment date .",
            "output": [
                "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
            ]
        },
        {
            "input": "SQL: SELECT T1.access_count , Avg ( T1.access_count ) FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T2.section_title ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: In step 2 , put document type code instead section title and in step 3 , find only average access count .",
            "output": [
                "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Course_Authors_and_Tutors\nFeedback: Shift student course enrolment in place of course authors and tutors .",
            "output": [
                "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment"
            ]
        },
        {
            "input": "SQL: SELECT activity_name , Count ( * ) FROM Activity GROUP BY activity_name\nFeedback: Search number of the corresponding rows to each value of faculty id .",
            "output": [
                "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT cust_name FROM customer ORDER BY acc_bal Asc\nFeedback: account balance is wrong . It should be replaced with amount and confirm that customer took a loan .",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE country = \"Canada\"\nFeedback: Should find number of rows of routes's destination airport for corresponding airports's airport id where country equals Canada .",
            "output": [
                "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'"
            ]
        },
        {
            "input": "SQL: SELECT T1.email_address FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )\nFeedback: In step 1 , product id should be there and in step 2 , Customers's customer id is largest value of step 1.",
            "output": [
                "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Type FROM school GROUP BY Type HAVING Count ( * ) > = 2\nFeedback: Remove greater than or .",
            "output": [
                "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < 800\nFeedback: In place of \"rating less than 800\" , search for resolution less than 800\" in step 2.",
            "output": [
                "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution > \"English\"\nFeedback: Need to Switch files's artist name to song's song name .",
            "output": [
                "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"English\")"
            ]
        },
        {
            "input": "SQL: SELECT T1.invoice_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.shipment_tracking_number = 3452\nFeedback: Need orders table , date order placed in lieu of invoices table , invoice date in step 1 and step 2 respectively .",
            "output": [
                "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"
            ]
        },
        {
            "input": "SQL: SELECT T1.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 GROUP BY T1.Classroom ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 2 , find number of rows of each value of list's class room in step 1's results .",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc\nFeedback: Verify that country equals US .",
            "output": [
                "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC"
            ]
        },
        {
            "input": "SQL: SELECT T1.date_of_latest_logon , T3.test_result FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id\nFeedback: date of enrolment , date of completion should be used instead of date of latest logon , test result .",
            "output": [
                "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment"
            ]
        },
        {
            "input": "SQL: SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Pass\"\nFeedback: Find number of rows of Student Tests Taken's where test result equals to Pass .",
            "output": [
                "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\""
            ]
        },
        {
            "input": "SQL: SELECT stuid FROM Participates_in\nFeedback: Add activity name equals Canoeing and Kayaking .",
            "output": [
                "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "SQL: SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = \"660 Shea Crescent\"\nFeedback: Whole step 2 is not useful . Instead , look royal family details and information of 'How to Get There' from tourist attractions table .",
            "output": [
                "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID"
            ]
        },
        {
            "input": "SQL: SELECT LastName FROM list WHERE FirstName = \"JEROME\" EXCEPT SELECT LastName FROM list WHERE FirstName = \"COVIN\"\nFeedback: Remove condition , put grade equals 3 in step 1 and teacher's full name equals COVIN JEROME in step 2.",
            "output": [
                "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM festival_detail WHERE Year = 2010 OR Year = 2008\nFeedback: Instead of number of rows find num of audience .",
            "output": [
                "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Individuals AS T2 WHERE T2.individual_first_name = \"6862 Kaitlyn Knolls\"\nFeedback: In step 2 line 1 number building should be used instead of \"individual first name\".",
            "output": [
                "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = \"Rosalind\" )\nFeedback: In step 1 We should find tourist details from visitors which equals Rosalind instead of visit details .",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""
            ]
        },
        {
            "input": "SQL: SELECT Chair_Name FROM festival_detail ORDER BY Year Desc LIMIT 3\nFeedback: chair name is wrong , need to find festival name instead of that .",
            "output": [
                "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT country FROM airports GROUP BY country ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Their should be airlines table instead of airports table in step 1.",
            "output": [
                "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.personal_name = \"Karson\"\nFeedback: date of latest logon is wrong in step 2 , it should be replaced by \"date of completion\".",
            "output": [
                "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\""
            ]
        },
        {
            "input": "SQL: SELECT invoice_number FROM Invoices WHERE invoice_date > = \"1989-09-03\"\nFeedback: invoice date must be greater than or equals 2007 12 25 and less than or equals 1989 09 03.",
            "output": [
                "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE country = \"Greenland\"\nFeedback: Make confirm the city from the airports table are unique .",
            "output": [
                "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'"
            ]
        },
        {
            "input": "SQL: SELECT T2.course_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Use personal name , author id in place of course name , course description in step 3 respectively .",
            "output": [
                "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc\nFeedback: Add people table in step 1 , put people's name whose people id be in employment not first year working in step 2.",
            "output": [
                "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working"
            ]
        },
        {
            "input": "SQL: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = \"UK\" INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = \"English\"\nFeedback: In step 2 it should find for artist's genre is instead of song's genre is , in step 3 replace song's genre is with song's song name .",
            "output": [
                "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"English\""
            ]
        },
        {
            "input": "SQL: SELECT duration , duration , formats FROM files ORDER BY duration Asc\nFeedback: Exchange duration with file size and order ascending by song name which must be pop in genre is .",
            "output": [
                "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name"
            ]
        },
        {
            "input": "SQL: SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 1000\nFeedback: song name of song should be used , not formats and format should be of mp 3.",
            "output": [
                "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE country = \"Italy\"\nFeedback: Should find number of rows of routes's elevation for corresponding airports's country where airport id equals Italy .",
            "output": [
                "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
            ]
        },
        {
            "input": "SQL: SELECT Max ( low_temperature ) , Avg ( low_temperature ) FROM weekly_weather\nFeedback: Take average precipitation instead of average low temperature where network name equals Amersham from station table .",
            "output": [
                "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom\nFeedback: Verify that Each value also equals 4 in grade .",
            "output": [
                "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Faculty WHERE Sex = \"Professor\" AND Sex = \"F\"\nFeedback: Exchange \"Sex equals Professor\" with \"Rank equals Professor\".",
            "output": [
                "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\""
            ]
        },
        {
            "input": "SQL: SELECT T2.course_description , T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc\nFeedback: No need to find course description and course name , find author id , author tutor atb , login name instead of that .",
            "output": [
                "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name"
            ]
        },
        {
            "input": "SQL: SELECT Name , Description FROM Tourist_Attractions WHERE Name = \"film festival\"\nFeedback: Use photos table in lieu of tourist attractions table and name equals filmfestival from tourist attractions table .",
            "output": [
                "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\""
            ]
        },
        {
            "input": "SQL: SELECT organization_name FROM Organizations ORDER BY date_formed Asc LIMIT 1\nFeedback: It should find for largest value of date formed in place of \"smallest value of date formed\".",
            "output": [
                "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT cust_name FROM customer GROUP BY cust_name HAVING Count ( * ) > 1\nFeedback: Remove customer name in customer table and use customer id in loan table in step 1.",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT Room FROM Faculty\nFeedback: room of faculty table is wrong , it should be replaced by activity name of Activity table .",
            "output": [
                "SELECT activity_name FROM Activity"
            ]
        },
        {
            "input": "SQL: SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id ORDER BY T2.date_contact_to Desc LIMIT 1\nFeedback: Ensuring individuals also belongs in Labour party organizations from organizations table .",
            "output": [
                "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT section_code FROM Document_Sections GROUP BY section_code ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: In step 1 find value of access count of documents table , in step 2 find Document Structures's document structure description with smallest value in step 1's results .",
            "output": [
                "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT cust_name , credit_score FROM customer WHERE cust_name LIKE \"a\"\nFeedback: account balance should be used instead of credit score .",
            "output": [
                "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE country = \"John F Kennedy International Airport\"\nFeedback: Place routes table and name instead of airports table and country .",
            "output": [
                "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'"
            ]
        },
        {
            "input": "SQL: SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Pass\"\nFeedback: In step 2 Alter course name equals Pass with test result equals pass from student tests taken table .",
            "output": [
                "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\""
            ]
        },
        {
            "input": "SQL: SELECT price_range FROM Hotels\nFeedback: Include star rating code equals 5.",
            "output": [
                "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM artwork WHERE Type = \"Program Talent Show\"\nFeedback: Find festival detail 's festival name whose corresponding festival id is present in nomination table along with artwork id for type equals Program Talent Show and result equals Nominated .",
            "output": [
                "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\""
            ]
        },
        {
            "input": "SQL: SELECT Year FROM festival_detail WHERE Location = \"United States\" INTERSECT SELECT Year FROM festival_detail WHERE Location = \"United States\"\nFeedback: Make sure location is not equals to United States in step 2.",
            "output": [
                "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = \"Linda\" AND T1.Advisor = 1121\nFeedback: in step 2 find without repetition vice president vote along with president vote .",
            "output": [
                "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses\nFeedback: products table is right , not addresses table .",
            "output": [
                "SELECT count(*) FROM Products"
            ]
        },
        {
            "input": "SQL: SELECT cust_name FROM customer INTERSECT SELECT cust_name FROM customer\nFeedback: In step 2 , change customer name , customer table with loan type , loan table and Be sure loan type equals Mortgages and Auto .",
            "output": [
                "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = \"walk\" OR T1.Location_Name = \"bus\"\nFeedback: Instead of both \"Location Name\" in step 2 it should find for \"How to Get There\".",
            "output": [
                "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Building FROM Faculty WHERE Room = 224\nFeedback: Remove condition , for which room equals 224",
            "output": [
                "SELECT DISTINCT building FROM Faculty"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( credit_score ) FROM customer\nFeedback: credit score in customer table is wrong , put no of customers in bank table .",
            "output": [
                "SELECT avg(no_of_customers) FROM bank"
            ]
        },
        {
            "input": "SQL: SELECT T1.rid , T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = \"United States\"\nFeedback: find route id where source airport id and destination airport whose corresponds country equals United States .",
            "output": [
                "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date > = \"1989-09-03\"\nFeedback: Rather Use \"less than\" not \"greater than or equals\"and include \"or invoice date greater than 2007 12 25\".",
            "output": [
                "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM company WHERE Sales_in_Billion > 200\nFeedback: We should find name from people table as opposed to name of company table .",
            "output": [
                "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200"
            ]
        },
        {
            "input": "SQL: SELECT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > 5000\nFeedback: No need to find credit score , find account balances for customers instead of that .",
            "output": [
                "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT product_category_code ) FROM Products\nFeedback: Substitute complaint type code and complaints table with product category code and products table .",
            "output": [
                "SELECT count(DISTINCT complaint_type_code) FROM complaints"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT T1.rid ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = \"American Airlines\"\nFeedback: Change routes table with airlines table , route id with airport id and country with airlines's name .",
            "output": [
                "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Order\" INTERSECT SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"No Response\"\nFeedback: Also add mailshot customers table in step 1 and Exchange order status code with outcome code in both steps .",
            "output": [
                "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"
            ]
        },
        {
            "input": "SQL: SELECT country , Avg ( y ) FROM airports GROUP BY country\nFeedback: Rather than y , take elevation and it should find it for each country .",
            "output": [
                "SELECT avg(elevation) ,  country FROM airports GROUP BY country"
            ]
        },
        {
            "input": "SQL: SELECT T2.Fname , T2.Lname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = 1\nFeedback: Also find Number of rows of each value of activity id in faculty participates in table .",
            "output": [
                "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID"
            ]
        },
        {
            "input": "SQL: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = \"UK\" INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = \"English\"\nFeedback: In step 3 change country with languages .",
            "output": [
                "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"English\""
            ]
        },
        {
            "input": "SQL: SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = 2\nFeedback: We have to replace product name in products table with product name in products in events table .",
            "output": [
                "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Classroom FROM list WHERE Grade = 5 ORDER BY Grade Asc\nFeedback: No need to order ascending by grade when there is only single value in grade .",
            "output": [
                "SELECT DISTINCT classroom FROM list WHERE grade  =  5"
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Paid\" INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"FedEx\"\nFeedback: Change order status code to shipping method code in step 3.",
            "output": [
                "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'"
            ]
        },
        {
            "input": "SQL: SELECT T1.state FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: summation of bank's no of customers should be used instead of number of rows in step 2",
            "output": [
                "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.order_id FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T1.invoice_date > \"2000-01-01\"\nFeedback: No need to find invoice date , use shipment date instead of invoice date .",
            "output": [
                "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\""
            ]
        },
        {
            "input": "SQL: SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank\nFeedback: Need to find number of rows correspond to faculty id from student table .",
            "output": [
                "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = \"park\" OR T1.Feature_Details = \"shopping\"\nFeedback: There should be feature details equals parking instead of feature details equals park .",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"bus\" OR T1.Address = \"254 Ottilie Junction\"\nFeedback: We need to supplant address equals bus to how to get there equals bus .",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "SQL: SELECT service_name FROM Services EXCEPT SELECT service_name FROM Services\nFeedback: The services need to be utilized at least once in step 2.",
            "output": [
                "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Fname = \"Mark\" AND LName = \"Giuliano\"\nFeedback: find the number of rows in faculty participates in instead of student table and find name in faculty table .",
            "output": [
                "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Order\" GROUP BY T2.customer_id HAVING Count ( * ) > = 2\nFeedback: Change customer orders table with mailshot customers table , and outcome code equals Order .",
            "output": [
                "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T2.course_name = \"Fail\"\nFeedback: student tests taken , date of completion and test result should be used instead courses table , date of latest logon and course name respectively .",
            "output": [
                "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""
            ]
        },
        {
            "input": "SQL: SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Course_Authors_and_Tutors\nFeedback: Need to find result from students table instead of course authors and tutors table in step 2.",
            "output": [
                "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students"
            ]
        },
        {
            "input": "SQL: SELECT Fname , Lname FROM Faculty\nFeedback: Be sure that faculty are instructors .",
            "output": [
                "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\""
            ]
        },
        {
            "input": "SQL: SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = 2\nFeedback: Remove \"greater than or\".",
            "output": [
                "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"
            ]
        },
        {
            "input": "SQL: SELECT T2.student_id , T1.middle_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT 2\nFeedback: find student id and middle name of Students table who enrolled in less than or equal to 2 courses .",
            "output": [
                "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2"
            ]
        },
        {
            "input": "SQL: SELECT f_id FROM song WHERE song_name = \"mp3\"\nFeedback: Use country from files table alternatively to file size .",
            "output": [
                "SELECT f_id FROM files WHERE formats  =  \"mp3\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT LName FROM Student EXCEPT SELECT LName FROM Student WHERE Advisor = 2192\nFeedback: Ensure that student have president vote .",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = \"F\" AND T2.President_Vote = 1004\nFeedback: Omit president vote equals 1004\" and Be sure that students have presidential voting record .",
            "output": [
                "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom\nFeedback: instead of number of rows , find number of different grades",
            "output": [
                "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Faculty WHERE Sex = \"AsstProf\" AND Rank = \"Instructor\"\nFeedback: Individually count the number of rows where sex equals M and F .",
            "output": [
                "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Faculty WHERE Building = \"Professor\"\nFeedback: It should be NEB not Professor .",
            "output": [
                "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT product_id FROM Order_Items WHERE order_id BETWEEN \"1976-01-01\" AND \"1975-01-01\"\nFeedback: Use date order placed in place of order id .",
            "output": [
                "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""
            ]
        },
        {
            "input": "SQL: SELECT T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id\nFeedback: Use course name of courses , not student course enrolment course id and search number of rows for each course id in student course enrolment .",
            "output": [
                "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
            ]
        },
        {
            "input": "SQL: SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.branch_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Use bank's no of customers instead of customer's branch id in step 2.",
            "output": [
                "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT LastName FROM teachers WHERE Classroom = 111\nFeedback: Exchange teachers table with list table .",
            "output": [
                "SELECT lastname FROM list WHERE classroom  =  111"
            ]
        },
        {
            "input": "SQL: SELECT city FROM airports GROUP BY city HAVING Count ( * ) > 3\nFeedback: Be certain the city is in the United States .",
            "output": [
                "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"
            ]
        },
        {
            "input": "SQL: SELECT LastName FROM teachers WHERE FirstName = \"GELL\"\nFeedback: Full name of the list table should be GELL TAMI .",
            "output": [
                "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"game1\"\nFeedback: We should substitute address equals game with name from photos table equals game 1.",
            "output": [
                "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""
            ]
        },
        {
            "input": "SQL: SELECT Sex FROM Student WHERE Sex = \"F\" GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 2 change sex with advisor , Number of rows that correspond of each value of sex .",
            "output": [
                "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT country , Count ( * ) FROM airports GROUP BY country\nFeedback: find name , country from airlines table , ensure each rows correspond airline id of routes table .",
            "output": [
                "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name"
            ]
        },
        {
            "input": "SQL: SELECT document_name , access_count FROM Documents ORDER BY document_name Asc\nFeedback: Change document name , access count , documents table and document name to image name , image url , images table and image name respectively .",
            "output": [
                "SELECT image_name ,  image_url FROM images ORDER BY image_name"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT LName FROM Student WHERE Advisor = 8741\nFeedback: Ensure that those student have president votes .",
            "output": [
                "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\""
            ]
        },
        {
            "input": "SQL: SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < 1000\nFeedback: Find song id instead of formats whose formats is mp 4 and resolution less than 1000.",
            "output": [
                "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000"
            ]
        },
        {
            "input": "SQL: SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT 1\nFeedback: Need to find smallest value of date order placed .",
            "output": [
                "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.hotel_id , T1.star_rating_description , T2.price_range FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc\nFeedback: star rating description and 1st price range are not needed , find star rating code instead of that .",
            "output": [
                "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC"
            ]
        },
        {
            "input": "SQL: SELECT StuID FROM Student WHERE Advisor = \"Professor\"\nFeedback: The students' advisor should be a faculty whose rank equals Professor .",
            "output": [
                "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\""
            ]
        },
        {
            "input": "SQL: SELECT FirstName , LastName FROM list WHERE FirstName = \"OTHA\"\nFeedback: Ensure last name is MOYER and first name and last name both are in corresponding teachers table .",
            "output": [
                "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Artwork_ID , T1.Name FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID HAVING Count ( * ) > = 2\nFeedback: Change artwork table with festival detail table and artwork id , name with festival id , festival name .",
            "output": [
                "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 900\nFeedback: Change rating with resolution , ensure that those artists have release 1 or more than 1 song .",
            "output": [
                "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Grade FROM list GROUP BY Grade\nFeedback: Also find number of class room and total number of distinct students for that grade .",
            "output": [
                "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Major = \"NYC\"\nFeedback: student id should be used instead advisor , election cycle equals spring , student id is registered as class senator vote in voting record .",
            "output": [
                "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM routes\nFeedback: Should only find for routes which are operated by airlines's name equals American airline .",
            "output": [
                "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
            ]
        },
        {
            "input": "SQL: SELECT train_number , time FROM train ORDER BY time Asc\nFeedback: It should satisfy one condition which is destination should be equal to Chennai .",
            "output": [
                "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME"
            ]
        },
        {
            "input": "SQL: SELECT Classroom FROM list WHERE Grade = 4 ORDER BY Classroom Asc\nFeedback: Omit the condition \"ordered ascending by Classroom\".",
            "output": [
                "SELECT DISTINCT classroom FROM list WHERE grade  =  4"
            ]
        },
        {
            "input": "SQL: SELECT Address FROM Locations WHERE Location_Name = \"UK Gallery\"\nFeedback: No need to find address , use other details instead of that .",
            "output": [
                "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\""
            ]
        },
        {
            "input": "SQL: SELECT acc_type , Avg ( no_of_loans ) FROM customer WHERE credit_score < 50 GROUP BY acc_type\nFeedback: Ensure to find average account balance instead of number of loans .",
            "output": [
                "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type"
            ]
        },
        {
            "input": "SQL: SELECT Fname , Lname FROM Faculty GROUP BY FacID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Make sure that faculty has a highest student .",
            "output": [
                "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.airline ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Change airports table with airlines table and code share with icao .",
            "output": [
                "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions\nFeedback: \"Tourist Attractions\" table is wrong , instead it should be \"Photos\" table .",
            "output": [
                "SELECT count(DISTINCT Name) FROM PHOTOS"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Exchange Tourist Attractions's location id with Visits's tourist attraction id in step 2 and address with tourist attraction id .",
            "output": [
                "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1"
            ]
        },
        {
            "input": "SQL: SELECT email_address , phone_number FROM Customers ORDER BY email_address Asc\nFeedback: The order of ascending should be by email address as well as phone number .",
            "output": [
                "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM train WHERE name = \"Express\"\nFeedback: Make sure that name contains Express .",
            "output": [
                "SELECT count(*) FROM train WHERE name LIKE \"%Express%\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Fname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = \"Canoeing\"\nFeedback: In step 2 it should find faculty participates in student id and in step 3 it should apply condition which says corresponding activity name equals to Canoeing or Kayaking .",
            "output": [
                "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "SQL: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 7 EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = \"Bangladesh\"\nFeedback: In step 3 , change all three \"song\" to \"artist\" and in step 4 swap \"step 2\" and \"step 3\".",
            "output": [
                "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7"
            ]
        },
        {
            "input": "SQL: SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer\nFeedback: In step 2 Use account type instead of customer name and ensure that account type equals saving .",
            "output": [
                "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"
            ]
        },
        {
            "input": "SQL: SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc\nFeedback: Need to change destination airport id with source airport id in step 2 and destination airport id with name in step 3.",
            "output": [
                "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 )\nFeedback: In step 1 and 2 exchange tourist attraction id with tourist id , now in step 2 need to replace tourist attractions with visitors .",
            "output": [
                "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
            ]
        },
        {
            "input": "SQL: SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.f_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 3 , it should be song's song name not files's artist name and in step 2 , find releasedate for each song .",
            "output": [
                "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT artist_name FROM song WHERE resolution > 500 GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Be certain to find each value of artist name for each languages in step 2.",
            "output": [
                "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"walk\" OR T1.Address = \"660 Shea Crescent\"\nFeedback: Remove address equals walk and Use how to get there equals walk instead of it .",
            "output": [
                "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "SQL: SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name\nFeedback: It should find number of corresponding rows for each product id in products in events table .",
            "output": [
                "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name"
            ]
        },
        {
            "input": "SQL: SELECT T3.Visit_Date , T3.Visit_Details FROM Tourist_Attractions AS T1 JOIN Shops AS T2 ON T2.Shop_ID = T1.Tourist_Attraction_ID JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T2.Shop_Details = \"Vincent\"\nFeedback: Add Visitors table in step 1 , use tourist details instead of visit details and tourist details instead of shop details .",
            "output": [
                "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""
            ]
        },
        {
            "input": "SQL: SELECT T1.rating , Avg ( T2.rating ) FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T2.languages\nFeedback: no need for step 1. remove genre table",
            "output": [
                "SELECT avg(rating) ,  languages FROM song GROUP BY languages"
            ]
        },
        {
            "input": "SQL: SELECT Attraction_Type_Description , Attraction_Type_Code FROM Ref_Attraction_Types GROUP BY Attraction_Type_Code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 find number of rows of each value of attraction type code in tourist attractions table .",
            "output": [
                "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Sex = \"Fall\" AND Sex = \"M\"\nFeedback: Change second \"Sex\" to election cycle and students must have class senator votes recorded in voting record .",
            "output": [
                "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\""
            ]
        },
        {
            "input": "SQL: SELECT Avg ( rating ) , Avg ( resolution ) FROM song\nFeedback: It should only find for song's languages equals bangla .",
            "output": [
                "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
            ]
        },
        {
            "input": "SQL: SELECT individual_last_name FROM Individuals\nFeedback: Be sure that those individual id has been listed in organization contact individuals .",
            "output": [
                "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Hotel_Star_Ratings\nFeedback: Substitute hotels table with ref hotel star ratings table , make sure only to find for available hotel .",
            "output": [
                "SELECT count(*) FROM HOTELS"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Activity\nFeedback: Change activity table with faculty table .",
            "output": [
                "SELECT count(*) FROM Faculty"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.course_name , T1.login_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id\nFeedback: No need to find course name .",
            "output": [
                "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom\nFeedback: It should correspond each value of rows where grade equals to 0.",
            "output": [
                "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"
            ]
        },
        {
            "input": "SQL: SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = \"Paid\" OR T1.order_status_code = \"Cancelled\"\nFeedback: Ensure to use order shipping charges instead of product id .",
            "output": [
                "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.price_range ) FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.star_rating_description = 5\nFeedback: Also determine that pets allowed yn equals 1 along with star rating description equals 5 in step 2.",
            "output": [
                "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student\nFeedback: voting record table should be used instead of student table .",
            "output": [
                "SELECT count(*) FROM VOTING_RECORD"
            ]
        },
        {
            "input": "SQL: SELECT document_name FROM Documents ORDER BY access_count Asc\nFeedback: Remove access count and use document name instead of it .",
            "output": [
                "SELECT document_name ,  access_count FROM documents ORDER BY document_name"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( credit_score ) FROM customer WHERE state = \"Texas\" OR state = \"Utah\"\nFeedback: Here it should find summation of account balance in place of credit score .",
            "output": [
                "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"
            ]
        },
        {
            "input": "SQL: SELECT name , country , elevation FROM airports WHERE city = \"New York\"\nFeedback: In addition to name , country , elevation , should also find city .",
            "output": [
                "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'"
            ]
        },
        {
            "input": "SQL: SELECT Max ( y ) FROM airports WHERE country = \"Iceland\"\nFeedback: Supplant y with elevation .",
            "output": [
                "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Tourist_Attractions\nFeedback: Ensure to satisfy condition that is how to get there equals bus .",
            "output": [
                "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\""
            ]
        },
        {
            "input": "SQL: SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > 100 GROUP BY state\nFeedback: account balance should be used instead of number of loans .",
            "output": [
                "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM genre\nFeedback: genre table is wrong , use artist table instead of that and ensure that artist's country equals Bangladesh .",
            "output": [
                "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\""
            ]
        },
        {
            "input": "SQL: SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = \"Cathrine\" OR personal_name = \"Cathrine\"\nFeedback: Remove \"or personal name equals Cathrine\" phrase .",
            "output": [
                "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses\nFeedback: Use services table in place of addresses table .",
            "output": [
                "SELECT count(*) FROM services"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE country = \"Italy\"\nFeedback: Swap airports table with routes table , ensure that destination country is Italy , and airlines's name equals American airlines .",
            "output": [
                "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"
            ]
        },
        {
            "input": "SQL: SELECT order_id FROM Order_Items WHERE product_id = 11\nFeedback: Ensure to find order item id of order items table .",
            "output": [
                "SELECT order_item_id FROM order_items WHERE product_id = 11"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.state = \"Utah\"\nFeedback: switch credit score with no of customers .",
            "output": [
                "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'"
            ]
        },
        {
            "input": "SQL: SELECT LastName FROM list WHERE Grade = 5\nFeedback: Take teachers table instead of list table .",
            "output": [
                "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
            ]
        },
        {
            "input": "SQL: SELECT T1.city , T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID\nFeedback: Use bname instaed of customer name and Verify they are in loan table too .",
            "output": [
                "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"
            ]
        },
        {
            "input": "SQL: SELECT T3.date_of_enrolment FROM Subjects AS T1 JOIN Courses AS T2 ON T1.subject_id = T2.subject_id JOIN Student_Course_Enrolment AS T3 ON T2.course_id = T3.course_id WHERE T1.subject_name = \"Spanish\"\nFeedback: course name should be used instead of subject name .",
            "output": [
                "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT FirstName FROM list WHERE Grade = 1\nFeedback: teachers table should be used in place of list table .",
            "output": [
                "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING Count ( * ) > = 2\nFeedback: The word \"greater\" must be replaced by \"less\".",
            "output": [
                "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
            ]
        },
        {
            "input": "SQL: SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = \"EVELINA\"\nFeedback: In step 2 find teachers's first name , last name of step 1's results who teaches list's first name equals EVELINA and last name equals BROMLEY .",
            "output": [
                "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\""
            ]
        },
        {
            "input": "SQL: SELECT T2.price_range , Avg ( T2.price_range ) FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code\nFeedback: Put pets allowed yn in place of attraction type code .",
            "output": [
                "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn"
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers GROUP BY customer_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Discard customer name in customers table , use Mailshot Customers's customer id in step 1 in place of that .",
            "output": [
                "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Address FROM Locations\nFeedback: Here it is needed to find the tourist details of visitors table .",
            "output": [
                "SELECT Tourist_Details FROM VISITORS"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Advisor FROM Student WHERE Major = \"Fall\"\nFeedback: It should find secretary vote of voting record table instead of first name of student table and it should be election cycle in place of advisor .",
            "output": [
                "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\""
            ]
        },
        {
            "input": "SQL: SELECT g_name FROM genre ORDER BY rating Asc\nFeedback: Change rating with genre name and also find rating of genre table .",
            "output": [
                "SELECT g_name ,  rating FROM genre ORDER BY g_name"
            ]
        },
        {
            "input": "SQL: SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.credit_score < 100\nFeedback: Here in step 2 it should also verify that customer has taken loan from that bank .",
            "output": [
                "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100"
            ]
        },
        {
            "input": "SQL: SELECT song_name FROM song WHERE rating < ( SELECT Min ( rating ) FROM song )\nFeedback: Also Ensure that song song name equals to English in step 2.",
            "output": [
                "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'English')"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T2.network_name FROM train AS T1 JOIN station AS T2 JOIN route AS T3 ON T1.id = T3.train_id AND T3.station_id = T2.id WHERE T2.network_name = \"Chiltern\"\nFeedback: Change network name with time and Use local authority equals Chiltern instead of network name equals Chiltern .",
            "output": [
                "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\""
            ]
        },
        {
            "input": "SQL: SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products\nFeedback: In step 2 it should find product price of products table whose product id is present in complaints table .",
            "output": [
                "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM genre\nFeedback: Find number of rows in files table whose duration is greater than 4. 00",
            "output": [
                "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""
            ]
        },
        {
            "input": "SQL: SELECT Shop_Details FROM Shops\nFeedback: Double check to only find for those for which Tourist Attractions's how to get there equals walk .",
            "output": [
                "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Age FROM Student WHERE Major = \"Fall\"\nFeedback: \"Major\" is wrong , use \"Election Cycle\" instead of it , and make sure they have received secretary vote .",
            "output": [
                "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\""
            ]
        },
        {
            "input": "SQL: SELECT Chair_Name , Location FROM festival_detail\nFeedback: Substitute festival name with chair name .",
            "output": [
                "SELECT Festival_Name ,  LOCATION FROM festival_detail"
            ]
        },
        {
            "input": "SQL: SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 use parties in place of forms , and in step 3 find form name instead party email .",
            "output": [
                "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Fname FROM Student WHERE Advisor = 1121 AND Advisor ! = \"PIT\"\nFeedback: Two conditions are to be fulfilled which are student id not equals PIT and Student's student id is present under Voting record's student id with vice president vote .",
            "output": [
                "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\""
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = 2\nFeedback: Change locations table with visits table , Tourist Attractions's location id with Visits's tourist attraction id and address with tourist attraction id .",
            "output": [
                "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT login_name FROM Students\nFeedback: Exchange login name of students table with subject name of subjects table .",
            "output": [
                "SELECT subject_name FROM SUBJECTS"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = \"Mortgages\"\nFeedback: Not only loan type equals Mortgages but also every other loan type in loan table .",
            "output": [
                "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
            ]
        },
        {
            "input": "SQL: SELECT T2.course_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.login_name = \"Computer Science\"\nFeedback: Need to put subjects table instead of course authors and tutors table and subject name instead of login name .",
            "output": [
                "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Visit_Details = \"Marcelle\"\nFeedback: Instead of visits table put visitors table , also mention tourist details equals Vincent and Marcelle , remove visit details equals Marcelle .",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""
            ]
        },
        {
            "input": "SQL: SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID\nFeedback: Make sure to find number of rows of student table for each faculty id in student table .",
            "output": [
                "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 1004\nFeedback: There is no need of\"President Vote equals 1004\" , make sure student id appears in voting record table for president vote .",
            "output": [
                "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM list WHERE FirstName = \"LORIA\" AND LastName = \"ONDERSMA\"\nFeedback: Take teachers table in place of list table .",
            "output": [
                "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\""
            ]
        },
        {
            "input": "SQL: SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name ORDER BY Count ( * ) Desc\nFeedback: In step 1 Change product name in products table with product id in products in events .",
            "output": [
                "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC"
            ]
        },
        {
            "input": "SQL: SELECT f_id FROM song ORDER BY releasedate Desc LIMIT 1\nFeedback: We'll have to use duration from files table as opposed to releasedate .",
            "output": [
                "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT artist_name , country FROM song ORDER BY rating Desc LIMIT 3\nFeedback: Apply artist's country instead of song's country .",
            "output": [
                "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = \"Acknowledgement\"\nFeedback: Supersede functional area description with parent functional area code in step 2.",
            "output": [
                "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM driver WHERE Home_city = \"Hartford\" AND Age < 40 INTERSECT SELECT Name FROM driver WHERE Age > 40\nFeedback: just show which are in step 1 and not in the step 2 instead of both .",
            "output": [
                "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( * ) FROM artist WHERE gender = \"Female\"\nFeedback: Here it should find average rows in song table whose corresponding artist's song id equals female .",
            "output": [
                "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\""
            ]
        },
        {
            "input": "SQL: SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id ORDER BY T2.uk_vat_number Desc LIMIT 1\nFeedback: In step 2 also ensure that organization contact individuals date contact from is smallest for that specific individuals .",
            "output": [
                "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT artist_name FROM song ORDER BY rating Asc LIMIT 1\nFeedback: The correct parameter is files' duration not rating .",
            "output": [
                "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT f_id FROM song WHERE resolution > ( SELECT Avg ( resolution ) FROM song )\nFeedback: And take care that genre is equals to modern only .",
            "output": [
                "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")"
            ]
        },
        {
            "input": "SQL: SELECT Fname FROM Faculty\nFeedback: Ensure to Add Activity's activity name equals Canoeing and Kayaking for faculty .",
            "output": [
                "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'"
            ]
        },
        {
            "input": "SQL: SELECT course_name FROM Courses\nFeedback: Also specify that course id of course table should present only one time in student course enrolment table .",
            "output": [
                "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = \"love\"\nFeedback: \"song name equals love\" is wrong , it should be \"song name contains love\" instead .",
            "output": [
                "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""
            ]
        },
        {
            "input": "SQL: SELECT state , acc_type , credit_score FROM customer WHERE cust_name = 0\nFeedback: substitute number of loans in place of customer name .",
            "output": [
                "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0"
            ]
        },
        {
            "input": "SQL: SELECT T1.Artwork_ID , T1.Name , Count ( * ) FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID\nFeedback: Change artwork with festival detail in step 1 , in step 2 find festival id , festival name from festival detail , find number of rows of each value of festival id .",
            "output": [
                "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT loan_type ) FROM loan\nFeedback: loan type in loan table is wrong , find account type in customer table in place of that .",
            "output": [
                "SELECT count(DISTINCT acc_type) FROM customer"
            ]
        },
        {
            "input": "SQL: SELECT T1.artist_name FROM artist AS T1 EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.rating > 8\nFeedback: Also Need to find song's song name equals English .",
            "output": [
                "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"English\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8"
            ]
        },
        {
            "input": "SQL: SELECT FacID FROM Faculty WHERE Sex = \"M\" AND Sex = \"M\"\nFeedback: Omit \"and sex equals M\".",
            "output": [
                "SELECT FacID FROM Faculty WHERE Sex  =  'M'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM artist WHERE gender = \"Male\"\nFeedback: And also count number of rows in artist table whose gender equals Female .",
            "output": [
                "SELECT count(*) ,  gender FROM artist GROUP BY gender"
            ]
        },
        {
            "input": "SQL: SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = 2\nFeedback: In step 1 use product id instead of product name and products in events instead of products , in step 2 remember to list names in alphabetical order .",
            "output": [
                "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name"
            ]
        },
        {
            "input": "SQL: SELECT train_number , time FROM train WHERE destination = \"Chennai\"\nFeedback: Check that destination should be Guruvayur and origin should be Chennai .",
            "output": [
                "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = \"08/30/2015\"\nFeedback: Their should be registration date in place of first name .",
            "output": [
                "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\""
            ]
        },
        {
            "input": "SQL: SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"advanced database\"\nFeedback: Change personal name with login name .",
            "output": [
                "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\""
            ]
        },
        {
            "input": "SQL: SELECT product_category , Count ( * ) FROM Products GROUP BY product_category\nFeedback: Catch different value of product category with each value of corresponding rows of mailshot id .",
            "output": [
                "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category"
            ]
        },
        {
            "input": "SQL: SELECT FirstName , LastName FROM list WHERE FirstName = \"MARROTTE\" AND LastName = \"KIRK\"\nFeedback: Specify that teachers' first name and last name equals MARROTTE and KIRK .",
            "output": [
                "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\""
            ]
        },
        {
            "input": "SQL: SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid\nFeedback: In step 2 it should find country in results of step 1 along with the number of corresponding rows to each value of source airport .",
            "output": [
                "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM festival_detail\nFeedback: Find the number of rows in artwork table .",
            "output": [
                "SELECT count(*) FROM artwork"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID\nFeedback: In step 2 find company's name along with number of corresponding rows of each value of company id in employment table .",
            "output": [
                "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name"
            ]
        },
        {
            "input": "SQL: SELECT Party FROM driver WHERE Home_city = \"Hartford\" AND Age > 40 INTERSECT SELECT Party FROM driver WHERE Age > 40\nFeedback: No need of step 2 and step 3.",
            "output": [
                "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40"
            ]
        },
        {
            "input": "SQL: SELECT email_address , phone_number FROM Staff EXCEPT SELECT email_address , phone_number FROM Staff\nFeedback: Change staff table with customers table and make sure customer have registered a complaint In step 2.",
            "output": [
                "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"
            ]
        },
        {
            "input": "SQL: SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T2.Name = \"UK Gallery\"\nFeedback: location name should be \"UK Gallery\" not name .",
            "output": [
                "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\""
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T1.credit_score ) FROM customer AS T1 WHERE T1.cust_name NOT IN ( SELECT T2.cust_ID FROM loan AS T2 WHERE T2.loan_type = \"Mortgages\" )\nFeedback: Remove \"for which customer id equals Mortgages\" in step 1 , change account type with branch id in step 2.",
            "output": [
                "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"
            ]
        },
        {
            "input": "SQL: SELECT artist_name FROM artist WHERE gender = \"Male\" AND gender = \"UK\"\nFeedback: Swap country equals UK with gender equals UK .",
            "output": [
                "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""
            ]
        },
        {
            "input": "SQL: SELECT day_of_week , Avg ( low_temperature ) FROM weekly_weather GROUP BY day_of_week\nFeedback: Need to find average high temperature in weekly weather table along with the corresponding rows of each value of day of week .",
            "output": [
                "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week"
            ]
        },
        {
            "input": "SQL: SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Customer_Orders AS T2 )\nFeedback: In step 1 Replace customer orders with mailshot customers .",
            "output": [
                "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM company WHERE Profits_in_Billion > 200 ORDER BY Sales_in_Billion Desc\nFeedback: Also should order descending by profits in billion and put sales in billion instead profits in billion .",
            "output": [
                "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC"
            ]
        },
        {
            "input": "SQL: SELECT Type , Count ( * ) FROM school GROUP BY Type\nFeedback: Be certain that it corresponds rows to each value of school id in school bus .",
            "output": [
                "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type"
            ]
        },
        {
            "input": "SQL: SELECT song_name FROM song\nFeedback: Ensure that Song's song name equals English .",
            "output": [
                "SELECT song_name FROM song WHERE languages  =  \"English\""
            ]
        },
        {
            "input": "SQL: SELECT cust_name FROM customer ORDER BY credit_score Desc LIMIT 1\nFeedback: Take smallest in place of largest .",
            "output": [
                "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Shops AS T3 ON T2.Tourist_Attraction_ID = T3.Shop_ID WHERE T3.Shop_Details = \"Vincent\"\nFeedback: Exchange locations with visits , shops with visitors , address with name , shop details with tourist details .",
            "output": [
                "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\""
            ]
        },
        {
            "input": "SQL: SELECT Location FROM festival_detail GROUP BY Location ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 Need to remove location and use num of audience in place of it .",
            "output": [
                "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM driver EXCEPT SELECT Name FROM driver\nFeedback: In step 2 find name of driver table whose corresponding driver id is also present in school bus's driver id .",
            "output": [
                "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T2.Visit_Date FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"Vivian\" OR T1.Name = \"Vincent\"\nFeedback: In step 2 , Put Whose tourist details from visitors equals Vincent or equals Vivian instead of name .",
            "output": [
                "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""
            ]
        },
        {
            "input": "SQL: SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT 1\nFeedback: smallest value of song name is to be changed by smallest value of resolution .",
            "output": [
                "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name\nFeedback: Take formats in place of artist name and should find number of corresponding rows to each format .",
            "output": [
                "SELECT count(*) ,  formats FROM files GROUP BY formats"
            ]
        },
        {
            "input": "SQL: SELECT T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = \"China\" GROUP BY T1.dst_ap ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: exchange destination airport with name in step 4 and ensure that start from country china .",
            "output": [
                "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Building FROM Faculty WHERE Rank > = \"Professor\"\nFeedback: \"Rank greater than or equals Professor\" is wrong , it should be rank equals Professor and it should be 10 or more professors in it",
            "output": [
                "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )\nFeedback: In step 2 Switch savings with checking . In step 3 Switch savings balance with checking balance .",
            "output": [
                "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
            ]
        },
        {
            "input": "SQL: SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT 3\nFeedback: Replace first max wind speed mph with max humidity , second max wind speed mph with max gust speed mph in step 1.",
            "output": [
                "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend ! = \"Dan\"\nFeedback: The college should be UCLA not the team name .",
            "output": [
                "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"
            ]
        },
        {
            "input": "SQL: SELECT problem_log_id , log_entry_date FROM Problem_Log WHERE problem_log_id = 10\nFeedback: Change problem log id equals 10\" with problem id equals 10\".",
            "output": [
                "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = \"FJA Filming\"\nFeedback: Delete \"whose stores 's store name equals FJA Filming\".",
            "output": [
                "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups"
            ]
        },
        {
            "input": "SQL: SELECT T1.Issue_Date , T2.Music_Festival FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume\nFeedback: Find date of ceremony and result instead of issue date , music festival .",
            "output": [
                "SELECT Date_of_ceremony ,  RESULT FROM music_festival"
            ]
        },
        {
            "input": "SQL: SELECT T1.address , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 3 Also need to find address 2 of address table .",
            "output": [
                "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Date_in_Locaton_To FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = \"Marry CV\"\nFeedback: Use date stored in place of date in location from .",
            "output": [
                "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\""
            ]
        },
        {
            "input": "SQL: SELECT Avg ( other_customer_details ) FROM Customers\nFeedback: Find the average order quantity in order items table for each value of order id .",
            "output": [
                "SELECT avg(order_quantity) FROM order_items"
            ]
        },
        {
            "input": "SQL: SELECT title FROM film WHERE replacement_cost > 200 OR rental_rate < 100\nFeedback: Ensure replacement cost not greater than 200 and length greater than 100 or rating equals PG .",
            "output": [
                "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"
            ]
        },
        {
            "input": "SQL: SELECT City FROM city WHERE Regional_Population > 2010\nFeedback: Substitute regional population with year , Ensure city have corresponding hosting city code in hosting city table .",
            "output": [
                "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"
            ]
        },
        {
            "input": "SQL: SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE 12000 AND MAX_SALARY < = 18000\nFeedback: Instead of ( first)MIN SALARY find difference between max salary and min salary , ( only)ensure max salary between 12000 18000.",
            "output": [
                "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000"
            ]
        },
        {
            "input": "SQL: SELECT Unsure_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT 3\nFeedback: In step 1 Change unsure rate with support rate and oppose rate with support rate .",
            "output": [
                "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE zip_code = 94103 )\nFeedback: In step 2 need to supersede \"greater than\" with \"equals\".",
            "output": [
                "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name , T2.Price FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > = 180 ORDER BY T2.Price Desc\nFeedback: Find price along with name , exchange revenue with price , also find ordered ascending by name .",
            "output": [
                "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC"
            ]
        },
        {
            "input": "SQL: SELECT Document_Type_Code , Document_Type_Description FROM Ref_Document_Types\nFeedback: Find budget type code , budget type description of reference budget codes table .",
            "output": [
                "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"
            ]
        },
        {
            "input": "SQL: SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Interchange airport id with airport id in step 2 and pilot with iata in step 3.",
            "output": [
                "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT customer_name FROM Customers WHERE customer_details BETWEEN \"2010-01-01\" AND \"2009-01-01\"\nFeedback: Instead of customer details , Use date order placed and Remove \"equals or\".",
            "output": [
                "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM bridge ORDER BY length_meters Desc\nFeedback: Change length meters with length feet and Add nationality of architect table equals American .",
            "output": [
                "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet"
            ]
        },
        {
            "input": "SQL: SELECT CName FROM Course WHERE Credits = 1 UNION SELECT CName FROM Course WHERE Days = \"MTW\"\nFeedback: Change 1 with 3 in step1 , ensure credits equals 1 and hours equals 4 in step 2.",
            "output": [
                "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4"
            ]
        },
        {
            "input": "SQL: SELECT problem_id FROM Problems\nFeedback: Ensure corresponding date problem reported is beyond largest value of date problem reported by Rylan Homenick of staff table .",
            "output": [
                "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > 50\nFeedback: Find the date whose average max humidity greater than 50 and average max visibility miles greater than 8.",
            "output": [
                "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student WHERE Sex = \"HKG\" OR city_code = \"CHI\"\nFeedback: sex is to be replaced with city code .",
            "output": [
                "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
            ]
        },
        {
            "input": "SQL: SELECT Name , Headquarter , Founder FROM Manufacturers ORDER BY Revenue Desc\nFeedback: Change founder with revenue .",
            "output": [
                "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC"
            ]
        },
        {
            "input": "SQL: SELECT T1.City_Town FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID JOIN Services AS T3 ON T2.Workshop_Group_ID = T3.Workshop_Group_ID WHERE T3.Product_Name = \"FJA Filming\"\nFeedback: product name is wrong . Use store name in place of it .",
            "output": [
                "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\""
            ]
        },
        {
            "input": "SQL: SELECT Fname , Lname FROM Faculty WHERE Fname = \"Linda\"\nFeedback: Ensure that faculty faculty id present under student advisor for student Linda Smith",
            "output": [
                "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\""
            ]
        },
        {
            "input": "SQL: SELECT * FROM regions\nFeedback: Find the rows of departments table whose department name equals Marketing .",
            "output": [
                "SELECT * FROM  departments WHERE department_name  =  'Marketing'"
            ]
        },
        {
            "input": "SQL: SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Name Asc\nFeedback: It should be seating in place of second name .",
            "output": [
                "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
            ]
        },
        {
            "input": "SQL: SELECT meter_600 , meter_200 FROM swimmer WHERE Nationality = \"Australia\"\nFeedback: Supersede meter 100 with meter 300",
            "output": [
                "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'"
            ]
        },
        {
            "input": "SQL: SELECT document_type_code FROM Documents\nFeedback: Make sure to find unique document type code .",
            "output": [
                "SELECT document_type_code FROM Ref_Document_Types"
            ]
        },
        {
            "input": "SQL: SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Avg ( T1.salary ) FROM employee AS T1 )\nFeedback: Find each value of employee 's employee id whose salary equals or greater than 100000.",
            "output": [
                "SELECT eid FROM Employee WHERE salary  >  100000"
            ]
        },
        {
            "input": "SQL: SELECT city FROM station ORDER BY long Desc\nFeedback: There should be use latitude in place of longitude .",
            "output": [
                "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Winery FROM wine WHERE Score BETWEEN 100 AND 50\nFeedback: Find price between 50 and 100 instead of score equals or between 50 and 100.",
            "output": [
                "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100"
            ]
        },
        {
            "input": "SQL: SELECT T2.FirstName FROM list AS T1 JOIN teachers AS T2 WHERE T1.Classroom = 110\nFeedback: Ensure to find teachers 's first name in step 2.",
            "output": [
                "SELECT firstname FROM teachers WHERE classroom  =  110"
            ]
        },
        {
            "input": "SQL: SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = \"Mortgages\"\nFeedback: In step 2 , Switch account type with corresponding loan's loan type .",
            "output": [
                "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( length_meters ) FROM bridge WHERE name = \"Xian Ren Qiao (Fairy Bridge)\"\nFeedback: Need to find average length feet and remove name equals Xian Ren Qiao ( Fairy bridge )\".",
            "output": [
                "SELECT avg(length_feet) FROM bridge"
            ]
        },
        {
            "input": "SQL: SELECT Votes FROM election ORDER BY Vote_Percent Desc\nFeedback: The descending order should be by votes , not by vote percent .",
            "output": [
                "SELECT Votes FROM election ORDER BY Votes DESC"
            ]
        },
        {
            "input": "SQL: SELECT Boys_or_Girls FROM school GROUP BY School_ID HAVING Count ( * ) > 1\nFeedback: In step 1 swap school id with denomination , boys or girls with denomination in step 2.",
            "output": [
                "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Courses WHERE course_name = \"Fail\"\nFeedback: find the number of rows in student tests taken table whose test result equals Fail .",
            "output": [
                "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.thing_id , T1.service_type_code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = \"Close\" OR T2.Date_and_Date < \"2017-06-19 02:59:21\"\nFeedback: Take type of thing code instead of service type code .",
            "output": [
                "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id WHERE T2.compatible_since_year > 1998\nFeedback: In Step 2 Be certain it's Corresponding web client accelerator name equals CProxy .",
            "output": [
                "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998"
            ]
        },
        {
            "input": "SQL: SELECT name , nationality , id FROM architect ORDER BY gender Asc\nFeedback: Take name instead of gender and Also add gender equals male .",
            "output": [
                "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name"
            ]
        },
        {
            "input": "SQL: SELECT Major FROM Student WHERE Sex = \"M\"\nFeedback: Drop the teachers table and only give me the nuber of rows associated with each Classroom values",
            "output": [
                "SELECT StuID FROM Student WHERE Sex  =  'M'"
            ]
        },
        {
            "input": "SQL: SELECT Min ( Age ) , Max ( Age ) , Min ( Age ) FROM Student\nFeedback: Need to find minimum age , maximum age and the average age .",
            "output": [
                "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"
            ]
        },
        {
            "input": "SQL: SELECT T2.PHONE_NUMBER FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > 8000 AND T1.MAX_SALARY < 12000\nFeedback: Assure to find whose salary between 8000 and 12000.",
            "output": [
                "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"
            ]
        },
        {
            "input": "SQL: SELECT Poll_Source FROM candidate WHERE Oppose_rate = ( SELECT Max ( Oppose_rate ) FROM candidate )\nFeedback: Find the value of oppose rate is not equals 0 in step 1.",
            "output": [
                "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Max ( low_temperature ) , Max ( wind_speed_mph ) FROM weekly_weather\nFeedback: Change \"maximum low temperature to \"least low temperature",
            "output": [
                "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather"
            ]
        },
        {
            "input": "SQL: SELECT Nickname FROM school_details EXCEPT SELECT Nickname FROM school_details WHERE Division = \"Division 1\"\nFeedback: Drop the student and department table and find the department name with the maximum of the summation of the credits in course table",
            "output": [
                "SELECT Nickname FROM school_details WHERE Division != \"Division 1\""
            ]
        },
        {
            "input": "SQL: SELECT Denomination FROM school GROUP BY Denomination ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Use school id , player table in place of denomination , school table respectively in step 1.",
            "output": [
                "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT problem_log_id , problem_id FROM Problem_Log ORDER BY problem_log_id Asc LIMIT 1\nFeedback: Replace \"smallest value of problem log id with \"smallest value of log entry date",
            "output": [
                "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT driverId , driverId FROM pitStops GROUP BY driverId HAVING Count ( * ) > 5\nFeedback: In step 2 , replace one driver id with status ' constructor reference and be sure stop equals 11.",
            "output": [
                "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T3.order_quantity ) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id WHERE T1.date_became_customer < \"2018-03-17 07:13:53\"\nFeedback: There should be order date instead of date became customer .",
            "output": [
                "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT product_category FROM Products\nFeedback: Instead of product category of products table\" , Take premises type of premises table\".",
            "output": [
                "SELECT DISTINCT premises_type FROM premises"
            ]
        },
        {
            "input": "SQL: SELECT T1.Address FROM Restaurant AS T1 JOIN Type_Of_Restaurant AS T2 ON T1.ResID = T2.ResID JOIN Restaurant_Type AS T3 ON T2.ResTypeID = T3.ResTypeID WHERE T3.ResTypeName = \"Subway\"\nFeedback: Replace restaurant type name with restaurant name in step 2.",
            "output": [
                "SELECT Address FROM Restaurant WHERE ResName = \"Subway\""
            ]
        },
        {
            "input": "SQL: SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Min ( Oppose_rate ) FROM candidate\nFeedback: Supplant minimum support rate with maximum support rate and maximum consider rate with minimum consider rate .",
            "output": [
                "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )\nFeedback: Make sure to replace both section with course in step 2.",
            "output": [
                "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
            ]
        },
        {
            "input": "SQL: SELECT Candidate_ID FROM candidate ORDER BY Unsure_rate Asc LIMIT 1\nFeedback: Swap unsure rate with oppose rate .",
            "output": [
                "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted < 2\nFeedback: Find whose invested value is greater than budget value .",
            "output": [
                "SELECT count(*) FROM budget WHERE budgeted  <  invested"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000\nFeedback: Replace balance with summation of savings ' and checking 's balance , mention savings balance less than checking .",
            "output": [
                "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"
            ]
        },
        {
            "input": "SQL: SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Change document name with document code in step 1 , Ensure that documents document code present in document sections document code .",
            "output": [
                "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.service_type_code FROM Organizations AS T1 JOIN Services AS T2 ON T2.organization_id = T1.organization_id JOIN Things AS T3 ON T1.organization_id = T3.organization_id WHERE T3.service_details = \"Denesik and Sons Party\"\nFeedback: Exchange things service details with organizations organization details .",
            "output": [
                "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"\nFeedback: Also add position equals Forward .",
            "output": [
                "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
            ]
        },
        {
            "input": "SQL: SELECT dorm_name , gender FROM Dorm WHERE student_capacity = 100 OR student_capacity < 300\nFeedback: There should be \"greater than\" in place of \"equals\".",
            "output": [
                "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100"
            ]
        },
        {
            "input": "SQL: SELECT T1.student_capacity , T1.gender FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name LIKE \"Donor\"\nFeedback: Instead of amenity name use dorm 's dorm name in step 2.",
            "output": [
                "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
            ]
        },
        {
            "input": "SQL: SELECT state , enr FROM College\nFeedback: Also ensure that tryout decision equals yes .",
            "output": [
                "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
            ]
        },
        {
            "input": "SQL: SELECT pName FROM Player WHERE HS BETWEEN 1200 AND 1500 INTERSECT SELECT pName FROM Player WHERE HS > 500\nFeedback: Find the player name whose training hours between 500 and 1500 for train .",
            "output": [
                "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"
            ]
        },
        {
            "input": "SQL: SELECT * FROM Albums WHERE Year = 0 AND Year = 2010\nFeedback: Eliminate year equals 0\".",
            "output": [
                "SELECT * FROM Albums WHERE YEAR  =  2010"
            ]
        },
        {
            "input": "SQL: SELECT College FROM match_season GROUP BY Season ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: season must be substituted by college .",
            "output": [
                "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT bedType , Avg ( maxOccupancy ) FROM Rooms GROUP BY bedType\nFeedback: Rather than max occupancy , Take base price .",
            "output": [
                "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = \"8\u20130\" )\nFeedback: Eliminate \"for which acc road equals 8\u2013 0\" from step 1.",
            "output": [
                "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > 1\nFeedback: takes classes course course id in place of prerequisite course id in step 2.",
            "output": [
                "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT SALARY , HIRE_DATE FROM employees WHERE LAST_NAME BETWEEN \"2009-07-05\" AND \"2007-11-05\"\nFeedback: Change salary with job id , last name with hire date and Remove \"equals or\".",
            "output": [
                "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted > 3000 OR Year < 2001\nFeedback: Rewrite the condition as budgeted greater than 3000 and year equals or less than 2001\".",
            "output": [
                "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001"
            ]
        },
        {
            "input": "SQL: SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = 1\nFeedback: Find employee id of employees table which is present in destroyed by employee id .",
            "output": [
                "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
            ]
        },
        {
            "input": "SQL: SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"database\" OR T2.course_name = \"database\"\nFeedback: Discard \"whose course name equals database or course name equals database\" phrase from step 2.",
            "output": [
                "SELECT address_line_1 FROM Course_Authors_and_Tutors"
            ]
        },
        {
            "input": "SQL: SELECT Team FROM player ORDER BY Age Asc LIMIT 5\nFeedback: Ensure that ordered descending by age .",
            "output": [
                "SELECT Team FROM player ORDER BY Age DESC LIMIT 5"
            ]
        },
        {
            "input": "SQL: SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > \"1987-06-17\" AND HIRE_DATE > \"1987-09-07\"\nFeedback: Omit \"and hire date greater than 1987 06 17\".",
            "output": [
                "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( balance ) FROM SAVINGS\nFeedback: Supersede savings table with checking table",
            "output": [
                "SELECT avg(balance) FROM checking"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T2.album_id HAVING Sum ( T2.milliseconds ) > 10\nFeedback: In step 2 find number of rows of each value of tracks 's album id .",
            "output": [
                "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10"
            ]
        },
        {
            "input": "SQL: SELECT Name , Name FROM driver\nFeedback: Swap first \"Name\" with school of school table\". Ensure all values are corresponding .",
            "output": [
                "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id"
            ]
        },
        {
            "input": "SQL: SELECT Headquarters FROM company GROUP BY Headquarters HAVING Count ( * ) > = 2\nFeedback: Confirm that main industry equals Banking in step 1.",
            "output": [
                "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Team FROM machine GROUP BY Team\nFeedback: Swap machine table with technician table",
            "output": [
                "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team"
            ]
        },
        {
            "input": "SQL: SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID ORDER BY Count ( * ) Desc\nFeedback: Swap school id with denomination in both steps 1 and 2.",
            "output": [
                "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Age ) FROM artist\nFeedback: Find age of all distinct artist in artist table .",
            "output": [
                "SELECT Age FROM artist"
            ]
        },
        {
            "input": "SQL: SELECT T2.Governor , T1.County_name FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID\nFeedback: Take delegate instead of governor and ensure that delegate belongs to each county .",
            "output": [
                "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District"
            ]
        },
        {
            "input": "SQL: SELECT T1.booking_id , T2.amount_paid FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to find amount of refund , not amount paid .",
            "output": [
                "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT job , Avg ( age ) FROM Person GROUP BY city\nFeedback: Supplant city with job .",
            "output": [
                "SELECT avg(age) ,  job FROM Person GROUP BY job"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )\nFeedback: Show name of scientists table who have assigned to any projects .",
            "output": [
                "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn"
            ]
        },
        {
            "input": "SQL: SELECT Country FROM manager WHERE Age > 46 OR Age > 50\nFeedback: Substitute age greater than 46\" with age less than 46\".",
            "output": [
                "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46"
            ]
        },
        {
            "input": "SQL: SELECT Location_Name FROM Ref_Locations WHERE Location_Name = \"Robin CV\"\nFeedback: Change second location name with \"Corresponding document name of all documents table\".",
            "output": [
                "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\""
            ]
        },
        {
            "input": "SQL: SELECT email , phone FROM customers WHERE first_name = \"Astrid\"\nFeedback: Also indicate that last name equals Gruber .",
            "output": [
                "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( tot_cred ) , dept_name FROM student GROUP BY dept_name\nFeedback: The student table and total credits are wrong . Put course table and credits respectively instead .",
            "output": [
                "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name"
            ]
        },
        {
            "input": "SQL: SELECT T2.amenity_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T1.student_capacity > 300\nFeedback: Use dorm name , not amenity name in step 2.",
            "output": [
                "SELECT dorm_name FROM dorm WHERE student_capacity  >  300"
            ]
        },
        {
            "input": "SQL: SELECT T1.address_details FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name = 10\nFeedback: Rather than customer name , Use customer id in step 2.",
            "output": [
                "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10"
            ]
        },
        {
            "input": "SQL: SELECT T1.title , Sum ( T2.stars ) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director\nFeedback: From step 2, I want title and stars rating of director having minimum stars rating.",
            "output": [
                "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = \"Provisional\"\nFeedback: you should use room count instead of bathroom count.",
            "output": [
                "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 1996 AND T2.Year = 1996\nFeedback: No need to find faculty 's year equals 1996 find campuses equals CSU instead of that .",
            "output": [
                "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"
            ]
        },
        {
            "input": "SQL: SELECT product_name , Sum ( * ) FROM Products GROUP BY product_name\nFeedback: Calculate the total of rows that correspond to each value of product quantity.",
            "output": [
                "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name"
            ]
        },
        {
            "input": "SQL: SELECT T2.student_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.student_id ORDER BY Avg ( T2.monthly_rental ) Desc LIMIT 1\nFeedback: Just find average monthly rental , no need to find for each value of student id .",
            "output": [
                "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = \"Columbus Square\" AND T1.building_short_name = \"Normandie Court\"\nFeedback: Find room count instead of bathroom count and find building short name equals Columbus Square instead of apartment number .",
            "output": [
                "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\""
            ]
        },
        {
            "input": "SQL: SELECT facility_code FROM Apartment_Facilities GROUP BY facility_code HAVING Count ( * ) > 4\nFeedback: You should find the bedroom counts of all apartments in step 1.",
            "output": [
                "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = \"Long Beach State University\" AND T2.Year = 2002\nFeedback: Ensure that you search for faculty's faculty rather than rows count of faculty table.",
            "output": [
                "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\""
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM Customers WHERE email_address = \"Lockmanfurt\"\nFeedback: You should use City's address instead of email address.",
            "output": [
                "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\""
            ]
        },
        {
            "input": "SQL: SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T3.Year = \"San Jose State University\" AND T3.Year = 1996\nFeedback: Find campus fee whose csu fees year equals 1996 and campuses equals San Jose State University .",
            "output": [
                "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996"
            ]
        },
        {
            "input": "SQL: SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1, You have to use customers.",
            "output": [
                "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.title , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars > ( SELECT Avg ( T2.stars ) FROM Rating AS T2 )\nFeedback: i want the date of rating for director james cameron's film from rating table.",
            "output": [
                "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")"
            ]
        },
        {
            "input": "SQL: SELECT T1.date_order_placed , T2.order_id FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id\nFeedback: Replace date order placed with invoice date , also need to find order details .",
            "output": [
                "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( amount_outstanding ) FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\"\nFeedback: I want transacted amount.",
            "output": [
                "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\""
            ]
        },
        {
            "input": "SQL: SELECT Faculty FROM faculty WHERE Year = 2003 GROUP BY Campus ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: For step 2, you need to determine campus, you should use the results of step 1 ordered in descending order of faculty's campus.",
            "output": [
                "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT product FROM product GROUP BY product ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Substitute product with max page size for both steps .",
            "output": [
                "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\"\nFeedback: Make sure Lessons's lesson status code equals Completed for that customer .",
            "output": [
                "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"Los Angeles\" AND T1.Year > 1950 AND T2.Year > 2002\nFeedback: Remove faculty's year part in step 2.",
            "output": [
                "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950"
            ]
        },
        {
            "input": "SQL: SELECT city FROM Addresses WHERE line_1_number_building = \"Janessa\"\nFeedback: Make sure first name equals Janessa and last name equals Sawayn .",
            "output": [
                "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\""
            ]
        },
        {
            "input": "SQL: SELECT account_id FROM Financial_Transactions WHERE transaction_amount > ( SELECT Avg ( transaction_amount ) FROM Financial_Transactions )\nFeedback: I want the id of transaction.",
            "output": [
                "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > 2\nFeedback: In step 1 , there should be customer payments table instead of customers table",
            "output": [
                "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = \"null\"\nFeedback: In step 2 Find name whose rating stars are valued null for particular date .",
            "output": [
                "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM people\nFeedback: You have to ensure that table of body builder contains Id of people.",
            "output": [
                "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
            ]
        },
        {
            "input": "SQL: SELECT order_id , date_order_placed , order_details FROM Orders\nFeedback: You need to use account id, date account opened, other account details, accounts in lieu of order Id, date the order was placed, order details and orders respectively. you should also search the account's name.",
            "output": [
                "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT District_name FROM district ORDER BY City_Population Desc\nFeedback: Here, you only require to search of descending order of city area.",
            "output": [
                "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC"
            ]
        },
        {
            "input": "SQL: SELECT product_id , Count ( * ) FROM Products GROUP BY product_id\nFeedback: Discover the number of each corresponding rows of different order id of order items.",
            "output": [
                "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id"
            ]
        },
        {
            "input": "SQL: SELECT apt_number , Count ( * ) FROM Apartments GROUP BY apt_number\nFeedback: Also need to find room count .",
            "output": [
                "SELECT apt_number ,  room_count FROM Apartments"
            ]
        },
        {
            "input": "SQL: SELECT T2.booking_start_date , T2.booking_end_date FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T1.gender_code = \"Female\"\nFeedback: I want the guests who are having booking for Apartment.",
            "output": [
                "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\""
            ]
        },
        {
            "input": "SQL: SELECT T2.notes_id FROM Teachers AS T1 JOIN Assessment_Notes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.last_name = \"Schuster\"\nFeedback: Supersede notes id with text of notes in step 2.",
            "output": [
                "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\""
            ]
        },
        {
            "input": "SQL: SELECT T3.Year FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus GROUP BY T3.Year ORDER BY Avg ( T2.Degrees ) Desc LIMIT 1\nFeedback: No need to find average in step 2 , change both discipline enrollments table with degrees in step 2 and 3.",
            "output": [
                "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T3.Year FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Undergraduate > 400 INTERSECT SELECT T2.Campus FROM discipline_enrollments AS T2 WHERE T2.Discipline > 1956\nFeedback: Search campus for which enrollments'year equals 1956 , fte ay and totalenrollment ay greater than 200 and 400 respectively .",
            "output": [
                "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( bathroom_count ) FROM Apartments\nFeedback: i want bedroom count instead of bathroom count.",
            "output": [
                "SELECT avg(bedroom_count) FROM Apartments"
            ]
        },
        {
            "input": "SQL: SELECT * FROM Behavior_Incident ORDER BY date_incident_start Asc\nFeedback: You need to use behavior incident table and incident start date in place of notes table and date of notes respectively.",
            "output": [
                "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC"
            ]
        },
        {
            "input": "SQL: SELECT Id FROM Campuses WHERE County = \"Los Angeles\"\nFeedback: You need to use campus in place of ID.",
            "output": [
                "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars LIKE 3 OR T2.stars LIKE 4\nFeedback: For both the scenarios, i want to change 'contains' phrase with 'equals'.",
            "output": [
                "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
            ]
        },
        {
            "input": "SQL: SELECT T3.Campus FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year > = 1935 AND T2.Year < = 1939\nFeedback: Supersede faculty 's year with campuses 's year and csu fees 's year with campuses 's year in step 2",
            "output": [
                "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Clean_Jerk ) FROM body_builder\nFeedback: Substitute snatch in place of clean jerk.",
            "output": [
                "SELECT avg(Snatch) FROM body_builder"
            ]
        },
        {
            "input": "SQL: SELECT building_description FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > 2\nFeedback: In step 1, count total number of Bathroom for all the Buildings of apartments, and in step 2, supplant building description with building address.",
            "output": [
                "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name LIKE \"January\"\nFeedback: Their is no need to do summation , Exchange name with birth date in step 2.",
            "output": [
                "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\""
            ]
        },
        {
            "input": "SQL: SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = 1\nFeedback: Replace apartment bookings with view unit status for both , apartment booking id with facility code .",
            "output": [
                "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1"
            ]
        },
        {
            "input": "SQL: SELECT Accreditation_type , Company_name FROM phone WHERE Accreditation_type LIKE \"Full\"\nFeedback: You need to identify the hardware model's name and replace \"contains\" with \"equals\".",
            "output": [
                "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full'"
            ]
        },
        {
            "input": "SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code HAVING Count ( * ) > 1\nFeedback: make sure that bathroom count should be more than 1 in step 1 and also search the highest value of step 1 in step 2.",
            "output": [
                "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM screen_mode WHERE Hardware_colours NOT IN ( SELECT Hardware_colours FROM screen_mode )\nFeedback: In both the steps need to use wifi and chip model.",
            "output": [
                "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
            ]
        },
        {
            "input": "SQL: SELECT T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T1.name LIKE \"Mike\"\nFeedback: In place of starts, you must use reviewer id.",
            "output": [
                "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Reviewer AS T1 WHERE T1.rID NOT IN ( SELECT T2.director FROM Movie AS T2 WHERE T2.title = \"null\" )\nFeedback: Remove step 2 , make sure reviewer id does not equals null , and at least made one movie .",
            "output": [
                "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"
            ]
        },
        {
            "input": "SQL: SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Nokia Corporation\" AND T1.Type = \"Graphics\"\nFeedback: Use company name as Nokia Corporation in place of company type.",
            "output": [
                "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\""
            ]
        },
        {
            "input": "SQL: SELECT booking_start_date , booking_end_date FROM Apartment_Bookings GROUP BY apt_id HAVING Count ( * ) > 2\nFeedback: in step 1 you should have bedroom count and apartments table.",
            "output": [
                "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
            ]
        },
        {
            "input": "SQL: SELECT T3.invoice_number , T1.date_order_placed FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id JOIN Financial_Transactions AS T3 ON T2.invoice_number = T3.invoice_number GROUP BY T3.invoice_number ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: You should use Invoice number of Invoices and invoice date",
            "output": [
                "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.name , T1.title , T3.ratingDate FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc\nFeedback: Also , find rating stars of rating table and order sequence should be reviewer name , title and rating stars .",
            "output": [
                "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT product_color FROM Products\nFeedback: Need to use size of product and not the color of product.",
            "output": [
                "SELECT DISTINCT product_size FROM Products"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Accounts WHERE account_name = 337\nFeedback: financial transactions table should be use in place of accounts table .",
            "output": [
                "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
            ]
        },
        {
            "input": "SQL: SELECT Clean_Jerk , Total FROM body_builder ORDER BY Total Desc LIMIT 1\nFeedback: Remove 1st total .",
            "output": [
                "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT city , Count ( * ) FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 calculate number of rows of staff table .",
            "output": [
                "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T2.mID HAVING Avg ( T2.stars ) > = 2\nFeedback: rating stars value 2 in rating stars table confirms that there are 2 different rows and also note that rating stars date is different from rating stars table.",
            "output": [
                "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2\nFeedback: Find address id in both step 1 and 2. Find value of Addresses's line 1 corresponding to step 1 and 2 result .",
            "output": [
                "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id"
            ]
        },
        {
            "input": "SQL: SELECT product FROM product EXCEPT SELECT product FROM product WHERE dpi < = 1\nFeedback: Here you have to find mostly used maximum size of page in step 2.",
            "output": [
                "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM people ORDER BY Weight Desc LIMIT 1\nFeedback: It should be body builder's name .",
            "output": [
                "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT apt_number FROM Apartments GROUP BY apt_number ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace apartment number with bedroom count in step 1.",
            "output": [
                "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = 2005 AND T2.Year = 1996\nFeedback: You have to delete csu fees year as 1996 and also make sure that  should be CSU.",
            "output": [
                "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
            ]
        },
        {
            "input": "SQL: SELECT T2.stars , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID\nFeedback: you should be looking for name of reviewer table inplace of rating stars.",
            "output": [
                "SELECT name FROM Reviewer UNION SELECT title FROM Movie"
            ]
        },
        {
            "input": "SQL: SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc\nFeedback: You have to swap the total with snatch.",
            "output": [
                "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers WHERE first_name = \"Ray\" AND last_name = \"Bernhard\"\nFeedback: You should use lessons table instead of customers table and also eliminate last name should be Bernhard",
            "output": [
                "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM faculty WHERE Campus = 2004 AND Year = \"San Francisco State University\"\nFeedback: Supersede faculty with discipline enrollments , campus with year and year with corresponding campus .",
            "output": [
                "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
            ]
        },
        {
            "input": "SQL: SELECT title FROM Movie ORDER BY year Desc LIMIT 1\nFeedback: Ensure movie's year is greater than largest value of year for director equals Steven Spielberg .",
            "output": [
                "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , Headquartered_City FROM district GROUP BY Headquartered_City\nFeedback: Need to count total stores for every city .",
            "output": [
                "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city"
            ]
        },
        {
            "input": "SQL: SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc\nFeedback: you should remove bathroom count and use room count instead.",
            "output": [
                "SELECT apt_number FROM Apartments ORDER BY room_count ASC"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 UNION SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars > = 3\nFeedback: You need to confirm that the movies has received ratings which is equivalent to 3 or more than that by the reviewer.",
            "output": [
                "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT dimensions FROM product GROUP BY dimensions HAVING Count ( * ) > 3\nFeedback: Replace dimensions with product in step 1.",
            "output": [
                "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3"
            ]
        },
        {
            "input": "SQL: SELECT Min ( Height ) FROM people\nFeedback: We need to put snatch in body builder table in lieu of height in people table .",
            "output": [
                "SELECT min(snatch) FROM body_builder"
            ]
        },
        {
            "input": "SQL: SELECT building_full_name FROM Apartment_Buildings WHERE building_short_name LIKE \"court\"\nFeedback: Replace building short name with building full name .",
            "output": [
                "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
            ]
        },
        {
            "input": "SQL: SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T3.Campus ORDER BY Avg ( T2.Degrees ) Desc LIMIT 1\nFeedback: In step 2, you need to determine the value of degrees of campuses from the result of step 1.",
            "output": [
                "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT cell_mobile_phone_number , email_address FROM Customers WHERE amount_outstanding > 2000\nFeedback: You should remove cell mobile phone number and use phone number in its place.",
            "output": [
                "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000"
            ]
        },
        {
            "input": "SQL: SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Campus = 2001 AND T3.Year = \"San Francisco State University\"\nFeedback: Provide the degree by changing year with campus and vice-versa.",
            "output": [
                "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001"
            ]
        },
        {
            "input": "SQL: SELECT Headquartered_City FROM district WHERE District_name = \"Blackville\"\nFeedback: Looking for the name of store mentioned in store table.",
            "output": [
                "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\""
            ]
        },
        {
            "input": "SQL: SELECT incident_type_code , incident_type_description FROM Ref_Incident_Type GROUP BY incident_type_code ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: You need to determine the number of rows of detention id from detention table in step 1 and in step 2, you need to find the smallest value from step 1 for detention type code and description.",
            "output": [
                "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Model_name FROM chip_model AS T1 EXCEPT SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = \"Full\"\nFeedback: You need to use accreditation type in place of type.",
            "output": [
                "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'"
            ]
        },
        {
            "input": "SQL: SELECT incident_type_code , incident_type_description FROM Ref_Incident_Type GROUP BY incident_type_code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Find incident type code of behavior incident table instead of reference incident type table in step 1.",
            "output": [
                "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_short_name = \"Brenden\"\nFeedback: Replace building short name with building manager .",
            "output": [
                "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\""
            ]
        },
        {
            "input": "SQL: SELECT T3.Company_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode AND T1.Model_name = T3.chip_model WHERE T2.Type = \"Text\" AND T1.RAM_MiB > 32\nFeedback: Replace company name with hardware model name of phone table .",
            "output": [
                "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32"
            ]
        },
        {
            "input": "SQL: SELECT Max ( bathroom_count ) , Max ( bathroom_count ) FROM Apartments\nFeedback: Replace first maximum with minimum bathroom count .",
            "output": [
                "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 2 INTERSECT SELECT T3.director FROM Movie AS T3 JOIN Rating AS T2 ON T3.mID = T2.mID WHERE T2.stars = 5\nFeedback: Exchange reviewer table with movie table in step 1 and name , name with title , \" 2\" with \" 5\"in step 2.",
            "output": [
                "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5"
            ]
        },
        {
            "input": "SQL: SELECT product FROM product WHERE dpi < \"A4\" OR dpi < 5\nFeedback: Need to supplant dpi with pages per minute color and dpi less than with max page size equals A 4.",
            "output": [
                "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5"
            ]
        },
        {
            "input": "SQL: SELECT Model_name FROM chip_model WHERE Launch_year = 2002 ORDER BY RAM_MiB Desc LIMIT 1\nFeedback: Use hardware model name from phone table in place of model name from chip model table.",
            "output": [
                "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( screen_mode ) FROM phone WHERE Company_name = \"Nokia Corporation\"\nFeedback: Replace screen mode in phone table with rom mib in chip model table .",
            "output": [
                "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers\nFeedback: Need to replace customers table with accounts table .",
            "output": [
                "SELECT count(*) FROM Accounts"
            ]
        },
        {
            "input": "SQL: SELECT T1.apt_type_code , T1.apt_number FROM Apartments AS T1 JOIN Guests AS T2 JOIN Apartment_Bookings AS T3 ON T1.apt_id = T3.apt_id AND T3.guest_id = T2.guest_id WHERE T2.guest_first_name = \"Kyle\"\nFeedback: I want the apartment buildings table with their building managers.",
            "output": [
                "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Movie\nFeedback: In ratings table, find the number of rows of having rating date 3 or more.",
            "output": [
                "SELECT count(*) FROM Rating WHERE stars  >  3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses\nFeedback: Make sure Staff table is used in place of address table.",
            "output": [
                "SELECT count(*) FROM Staff"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses\nFeedback: You need to place table of vehicles as table of address is not correct.",
            "output": [
                "SELECT count(*) FROM Vehicles"
            ]
        },
        {
            "input": "SQL: SELECT customer_last_name , customer_id , phone_number FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: You must use orders table in place of customers table in step 1.",
            "output": [
                "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID ORDER BY T2.stars Desc LIMIT 1\nFeedback: You need to use \" do not show \" rather than \" only show the first \".",
            "output": [
                "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.County = \"San Jose State University\" AND T3.Year = 2000\nFeedback: Summation of graduate , county and faculty's year should be replaced by degrees , campus and degrees' year .",
            "output": [
                "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
            ]
        },
        {
            "input": "SQL: SELECT used_kb FROM screen_mode WHERE Type = \"Graphics\"\nFeedback: I want to delete the last part and should search for the rows count of chip model.",
            "output": [
                "SELECT * FROM chip_model"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Staff WHERE first_name LIKE \"a\"\nFeedback: You need to use table of staff not the lessons table.",
            "output": [
                "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Apartment_Facilities WHERE facility_code = \"Gym\"\nFeedback: In apartments table, check out the total number of rooms.",
            "output": [
                "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""
            ]
        },
        {
            "input": "SQL: SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.County = \"San Jose State University\" AND T2.Year = 2000\nFeedback: It is require to substitute campus in place of county.",
            "output": [
                "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Ranking ) FROM store\nFeedback: You should change pages per minute color of product table for ranking of store table. ",
            "output": [
                "SELECT avg(pages_per_minute_color) FROM product"
            ]
        },
        {
            "input": "SQL: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY Avg ( bathroom_count ) Desc LIMIT 3\nFeedback: you should use room count instead of bathroom count.",
            "output": [
                "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = \"Text\" EXCEPT SELECT T1.Model_name FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T2.Type = \"Nokia Corporation\"\nFeedback: In step 2 and 3, you need to use the hardware model's name and in step 3, you should use company name in place of its type. Make sure to mention the phrase step 2 in Step 4.",
            "output": [
                "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Hardware_colours , T1.Char_cells FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Company_name = \"LG-P760\"\nFeedback: Replace hardware colours , char cells and company name with chip model , screen mode and hardware model name .",
            "output": [
                "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT name FROM Reviewer\nFeedback: You have to be sure that Gone is reviewed by them along with the Wind Movie.",
            "output": [
                "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT name FROM Reviewer\nFeedback: Replace name of reviewer with director of movie table , make sure director had 1 movie .",
            "output": [
                "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Movie\nFeedback: you need to label reviewer table instead of movie table.",
            "output": [
                "SELECT count(*) FROM Reviewer"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T1.Hardware_colours ) FROM screen_mode AS T1 WHERE T1.Hardware_colours NOT IN ( SELECT T2.chip_model FROM phone AS T2 )\nFeedback: Replace chip model with model name , phone with chip model , hardware colours with ram mib , screen mode with chip model .",
            "output": [
                "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)"
            ]
        },
        {
            "input": "SQL: SELECT T1.country FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id = T2.customer_address_id WHERE T2.first_name = \"Janessa\" AND T1.state_province_county = \"Sawayn\"\nFeedback: In step 1 and 2, I want staff and last name instead of customers and state province county respectively. Also, then search state province county.",
            "output": [
                "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\""
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T2.mID ORDER BY Sum ( T2.stars ) Desc LIMIT 1\nFeedback: From the rating table, I need to count the all the rows with Movie ID.",
            "output": [
                "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT middle_name , last_name FROM Staff\nFeedback: In addition to middle name and last name , also show first name .",
            "output": [
                "SELECT first_name ,  middle_name ,  last_name FROM Staff"
            ]
        },
        {
            "input": "SQL: SELECT District_name FROM district ORDER BY City_Population Desc LIMIT 1\nFeedback: There should be store's store name instead of district name of district table .",
            "output": [
                "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
            ]
        },
        {
            "input": "SQL: SELECT bedroom_count FROM Apartments WHERE apt_type_code = \"Flat\"\nFeedback: Replace bedroom count with apartment number .",
            "output": [
                "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
            ]
        },
        {
            "input": "SQL: SELECT first_name FROM Staff EXCEPT SELECT first_name FROM Staff\nFeedback: Confirm that not even a single lessons is conveyed by the staff given in the list.",
            "output": [
                "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = \"Steven Spielberg\"\nFeedback: in place of name, i want you to look for name.",
            "output": [
                "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Campuses\nFeedback: Looking for the campuses that are having higher than average fee.",
            "output": [
                "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"
            ]
        },
        {
            "input": "SQL: SELECT District_name , City_Population FROM district WHERE City_Area BETWEEN 2000000 AND 200000\nFeedback: The \"City Area equals or\" condition part is wrong . There should be city population is\" instead .",
            "output": [
                "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000"
            ]
        },
        {
            "input": "SQL: SELECT T2.Char_cells , T2.Pixels , T2.Hardware_colours FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T1.Model_name = \"LG-P760\"\nFeedback: Replace model name with hardware model name .",
            "output": [
                "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\""
            ]
        },
        {
            "input": "SQL: SELECT T2.lesson_id FROM Staff AS T1 JOIN Lessons AS T2 ON T1.staff_id = T2.staff_id WHERE T1.first_name = \"Janessa\" AND T1.last_name = \"Sawayn\"\nFeedback: You need to verify that the nickname for \"staff\" should contain the letter \"s\".",
            "output": [
                "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\""
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID GROUP BY T2.rID HAVING Count ( * ) > 3\nFeedback: Replace reviewer id with rating stars .",
            "output": [
                "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.Weight FROM people AS T1 WHERE T1.People_ID NOT IN ( SELECT T2.People_ID FROM body_builder AS T2 )\nFeedback: Exchange weight with birth place .",
            "output": [
                "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id"
            ]
        },
        {
            "input": "SQL: SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = \"Sawayn\" INTERSECT SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = \"Sawayn\"\nFeedback: In step 2 only find Customer's last name , in step 3 only find Staff's last name .",
            "output": [
                "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
            ]
        },
        {
            "input": "SQL: SELECT date_incident_start , date_incident_start FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"\nFeedback: Will have to put date incident end in place of one of the date incident start .",
            "output": [
                "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\""
            ]
        },
        {
            "input": "SQL: SELECT T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T1.name = \"Daniel Lewis\"\nFeedback: reviewer id should be use in place of rating stars .",
            "output": [
                "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM faculty WHERE Year = 1\nFeedback: Replace 1 with 2001 and make sure faculty has least degrees from degree table .",
            "output": [
                "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT customer_first_name , customer_last_name , phone_number FROM Customers\nFeedback: Minimum one account should be there with every single consumers.",
            "output": [
                "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM faculty WHERE Year = \"San Francisco State University\" AND Year = 2004\nFeedback: You need to make sure that the campus is of San Francisco State University only.",
            "output": [
                "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\""
            ]
        },
        {
            "input": "SQL: SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id\nFeedback: Find the number of corresponding rows to order items.",
            "output": [
                "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = \"Sarah Martinez\" AND T1.year > 2000 INTERSECT SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = \"Sarah Martinez\" AND T2.name = \"James Cameron\"\nFeedback: Step 2 , Remove name equals Sarah Martinez\". Step 3 swap \"name\" with movie 's director , Remove name equals Sarah Martinez\".",
            "output": [
                "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"
            ]
        },
        {
            "input": "SQL: SELECT Campus FROM faculty WHERE Year = \"San Francisco\" OR Year = \"San Francisco\"\nFeedback: Make sure that location equivalent with Northridge ,county should be Los Angeles or both location and country equal San Francisco.",
            "output": [
                "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
            ]
        },
        {
            "input": "SQL: SELECT email_address , email_address FROM Customers WHERE first_name = \"Carole\"\nFeedback: You need to use date of birth.",
            "output": [
                "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\""
            ]
        },
        {
            "input": "SQL: SELECT year FROM Movie ORDER BY year Desc LIMIT 4\nFeedback: I want release year of movie in descending order whose rating is 4 or 5.",
            "output": [
                "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year"
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.year < 1980 OR T2.name = \"James Cameron\"\nFeedback: The director's name should be James Cameron.",
            "output": [
                "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Reviewer\nFeedback: You need to ascertain that reviewer id has a star rating of 3 or 4.",
            "output": [
                "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , account_id FROM Accounts GROUP BY account_id\nFeedback: You have to find the equivalent number of rows of each account id of financial transaction table.",
            "output": [
                "SELECT count(*) ,  account_id FROM Financial_transactions"
            ]
        },
        {
            "input": "SQL: SELECT director , Count ( * ) FROM Movie GROUP BY director\nFeedback: Make sure the number of rows is equivalent to each value of movie id of rating table.",
            "output": [
                "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director"
            ]
        },
        {
            "input": "SQL: SELECT order_id , order_details FROM Orders GROUP BY order_id HAVING Count ( * ) > = 2\nFeedback: You have to use order id of invoice table.",
            "output": [
                "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( bathroom_count ) FROM Apartments WHERE apt_type_code = \"Studio\"\nFeedback: Replace bathroom count with room count .",
            "output": [
                "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
            ]
        },
        {
            "input": "SQL: SELECT T1.email_address FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id = T2.student_id ORDER BY T2.monthly_rental Desc\nFeedback: I want student id, address id and date address from of student addresses table.",
            "output": [
                "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = \"Sarah Martinez\"\nFeedback: include reviewer table and use name in place of rating for step 1.",
            "output": [
                "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
            ]
        },
        {
            "input": "SQL: SELECT T2.date_incident_start FROM Students AS T1 JOIN Behavior_Incident AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = \"Fanny\"\nFeedback: In step 1 you need to replace behavior incident with notes of assessment , alter date incident start with date of notes in step 2.",
            "output": [
                "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\""
            ]
        },
        {
            "input": "SQL: SELECT product_name , Count ( * ) FROM Products GROUP BY product_name\nFeedback: Give me the product's name and number of order placed by customer.",
            "output": [
                "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T2.name , T1.title , T1.director FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID\nFeedback: you need to make sure that name of movie's should be equivalent to reviewer's name and also rating stars should be used in place of name in step 2.",
            "output": [
                "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers\nFeedback: Replace customers table with invoices table .",
            "output": [
                "SELECT count(*) FROM Invoices"
            ]
        },
        {
            "input": "SQL: SELECT product FROM product WHERE dpi BETWEEN \"A4\" AND 5\nFeedback: Delete condition , specify that max page size equals \"A 4\" and pages per minute color is less than 5.",
            "output": [
                "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5"
            ]
        },
        {
            "input": "SQL: SELECT Birth_Date , Count ( * ) FROM people GROUP BY Birth_Date\nFeedback: I want birth place and total number of people from that place.",
            "output": [
                "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place"
            ]
        },
        {
            "input": "SQL: SELECT Birth_Place FROM people ORDER BY Height Asc\nFeedback: I want birth date instead of birth place.",
            "output": [
                "SELECT Birth_Date FROM People ORDER BY Height ASC"
            ]
        },
        {
            "input": "SQL: SELECT T2.Accreditation_type , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year > 2002 AND T1.RAM_MiB > 32\nFeedback: Replace accreditation type , \"greater than\" and \"and\" with hardware model name , \"equals\" and \"or\" respectively .",
            "output": [
                "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses\nFeedback: I want table of lessons instead of table of addresses and also ensure that status code of lesson should be equivalent to Cancelled.",
            "output": [
                "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\""
            ]
        },
        {
            "input": "SQL: SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = \"Provisional\"\nFeedback: in step 2, confirm that booking status code is provisional and confirmed.",
            "output": [
                "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
            ]
        },
        {
            "input": "SQL: SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: You need to use the accounts with customer's Id in place of customer table ",
            "output": [
                "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"\nFeedback: Need to find date joined staff instead of date left staff .",
            "output": [
                "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\""
            ]
        },
        {
            "input": "SQL: SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Asc\nFeedback: Ensure to find distinct value of city in step 1.",
            "output": [
                "SELECT city FROM Addresses ORDER BY city"
            ]
        },
        {
            "input": "SQL: SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"\nFeedback: We need to substitute born date in place of date left staff.",
            "output": [
                "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\""
            ]
        },
        {
            "input": "SQL: SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars ! = 2\nFeedback: you should use rating stars which equals null.",
            "output": [
                "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( T2.lesson_time ) FROM Customers AS T1 JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = \"Janessa\" AND T1.last_name = \"Sawayn\"\nFeedback: Replace customers table with staff table .",
            "output": [
                "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\""
            ]
        },
        {
            "input": "SQL: SELECT T2.District_name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T1.Store_Name = \"City Mall\" INTERSECT SELECT T2.District_name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T1.Store_Name = \"Village Store\"\nFeedback: Change store name with type in both step 2 and step 3.",
            "output": [
                "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Campuses WHERE County = \"San Jose State University\"\nFeedback: Use discipline enrollments undergraduate instead of campuses table and campus instead of county .",
            "output": [
                "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT address_type_code FROM Ref_Address_Types\nFeedback: I want the type code of detention from detention table.",
            "output": [
                "SELECT DISTINCT detention_type_code FROM Detention"
            ]
        },
        {
            "input": "SQL: SELECT T1.Store_Name FROM store AS T1 JOIN district AS T2 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID AND T3.District_ID = T2.District_ID WHERE T2.Headquartered_City = \"Khanewal District\"\nFeedback: Need to use district name in place of headquartered city .",
            "output": [
                "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\""
            ]
        },
        {
            "input": "SQL: SELECT Type , Count ( * ) FROM screen_mode GROUP BY Type ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Use chip model in place of screen mode table.",
            "output": [
                "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID ORDER BY T2.stars Asc LIMIT 1\nFeedback: Also correspond movie table in step 1 , Exchange name with title in step 2.",
            "output": [
                "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID"
            ]
        },
        {
            "input": "SQL: SELECT product_name FROM Products EXCEPT SELECT product_name FROM Products\nFeedback: You have to use order item id of order items table in place of product name of products table.",
            "output": [
                "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
            ]
        },
        {
            "input": "SQL: SELECT T2.Graphics_mode , T2.Type FROM chip_model AS T1 JOIN screen_mode AS T2 JOIN phone AS T3 ON T1.Model_name = T3.chip_model AND T3.screen_mode = T2.Graphics_mode WHERE T1.Model_name = \"LG-P760\"\nFeedback: find wifi instead of graphics mode , and replace model name with hardware model name .",
            "output": [
                "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Apartment_Buildings\nFeedback: apartment buildings table is wrong . It has to be apartment bookings table .",
            "output": [
                "SELECT count(*) FROM Apartment_Bookings"
            ]
        },
        {
            "input": "SQL: SELECT Headquartered_City FROM district GROUP BY Headquartered_City ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1, I want store table.",
            "output": [
                "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.name FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.director = \"Avatar\"\nFeedback: Replace name with director , replace director with title .",
            "output": [
                "SELECT director FROM Movie WHERE title  = 'Avatar'"
            ]
        },
        {
            "input": "SQL: SELECT date_became_customer FROM Customers WHERE customer_status_code = \"Good Customer\"\nFeedback: I want birth date.",
            "output": [
                "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'"
            ]
        },
        {
            "input": "SQL: SELECT T1.rID FROM Reviewer AS T1 EXCEPT SELECT T2.rID FROM Rating AS T2 WHERE T2.stars = 4\nFeedback: make sure earch reviewer gave starts not equal 4 at least once",
            "output": [
                "SELECT rID FROM Rating WHERE stars != 4"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Products )\nFeedback: Replace products table with order items table in step 1.",
            "output": [
                "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
            ]
        },
        {
            "input": "SQL: SELECT T2.Height , T2.Weight FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total Desc\nFeedback: Replace total with height .",
            "output": [
                "SELECT Height ,  Weight FROM people ORDER BY Height DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers\nFeedback: You have to count the total number of transactions.",
            "output": [
                "SELECT count(*) FROM Financial_transactions"
            ]
        },
        {
            "input": "SQL: SELECT title , year FROM Movie ORDER BY year Desc LIMIT 1\nFeedback: Need to replace title with Rating's star .",
            "output": [
                "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)"
            ]
        },
        {
            "input": "SQL: SELECT state_province_county FROM Addresses GROUP BY state_province_county HAVING Count ( * ) > = 2\nFeedback: also use staff table In step 1 , Add less than or equals 4 In step 2.",
            "output": [
                "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4"
            ]
        },
        {
            "input": "SQL: SELECT vehicle_id , vehicle_details FROM Vehicles GROUP BY vehicle_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Search for total rows of all the value of vehicle id from lessons table in step 1.",
            "output": [
                "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM faculty WHERE Year = 2002\nFeedback: In rows look for the total number of faculty.",
            "output": [
                "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002"
            ]
        },
        {
            "input": "SQL: SELECT District_name FROM district WHERE City_Area > 10 OR Headquartered_City = \"Attock City\"\nFeedback: Need to find the population of city which should be larger than 100000.",
            "output": [
                "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000"
            ]
        },
        {
            "input": "SQL: SELECT Weight FROM people WHERE Height > 200 OR Height > 140\nFeedback: Replace people table with body builder table and 1st height with snatch .",
            "output": [
                "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200"
            ]
        },
        {
            "input": "SQL: SELECT T2.account_id , T2.date_account_opened , T2.other_account_details FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_first_name = \"Meaghan\"\nFeedback: Also include account name in step 2.",
            "output": [
                "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'"
            ]
        },
        {
            "input": "SQL: SELECT order_id , Sum ( * ) FROM Orders GROUP BY order_id\nFeedback: Should find the corresponding rows of order items for each order id .",
            "output": [
                "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\"\nFeedback: In step 1, Instead of students table use teachers table .",
            "output": [
                "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = \"Provisional\" INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = \"Full\"\nFeedback: step 1 , replace type of screen mode table with accreditation type of phone table .",
            "output": [
                "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Apartments AS T1 WHERE T1.apt_id NOT IN ( SELECT T2.apt_id FROM Apartment_Bookings AS T2 )\nFeedback: In step 1 find apartment id of apartment facilities table instead of apartment bookings table .",
            "output": [
                "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Address_Types\nFeedback: I want the total number of rows of assessment notes table.",
            "output": [
                "SELECT count(*) FROM ASSESSMENT_NOTES"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , order_id FROM Orders GROUP BY order_id\nFeedback: Should find the number of corresponding rows of product id in order items table .",
            "output": [
                "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id"
            ]
        },
        {
            "input": "SQL: SELECT student_id , last_name FROM Students GROUP BY student_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Use behavior incident table instead of students table in step 1 ,",
            "output": [
                "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.price ) FROM Customers AS T1 JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = \"Janessa\" AND T1.last_name = \"Sawayn\"\nFeedback: I want table of staff and make sure that its first and last name should be Janessa Sawayn.",
            "output": [
                "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\""
            ]
        },
        {
            "input": "SQL: SELECT customer_status_code , phone_number , email_address FROM Customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"\nFeedback: You have to use cell mobile phone number.",
            "output": [
                "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\""
            ]
        },
        {
            "input": "SQL: SELECT teacher_id , first_name FROM Teachers GROUP BY teacher_id ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: You need to replace teachers table with assessment notes table in step 1.",
            "output": [
                "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT nickname FROM Staff WHERE first_name = \"Janessa\"\nFeedback: Make sure last name equals Sawayn .",
            "output": [
                "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\""
            ]
        },
        {
            "input": "SQL: SELECT Avg ( monthly_rental ) , Avg ( monthly_rental ) FROM Student_Addresses\nFeedback: You need to use line 1 in addresses rather than average monthly rental.",
            "output": [
                "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Birth_Date ) FROM people\nFeedback: birth date must be replaced by birth place .",
            "output": [
                "SELECT count(DISTINCT Birth_Place) FROM people"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )\nFeedback: There should be customer payments table instead of lessons table .",
            "output": [
                "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )"
            ]
        },
        {
            "input": "SQL: SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = \"San Francisco State University\" AND T2.Year = 1996 AND T2.Year = 2000\nFeedback: In step 2, skip the last part.",
            "output": [
                "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
            ]
        },
        {
            "input": "SQL: SELECT title , title FROM Movie GROUP BY director HAVING Count ( * ) > 1\nFeedback: Replace second title with director , make sure to order by director name then movie title",
            "output": [
                "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title"
            ]
        },
        {
            "input": "SQL: SELECT apt_type_code , Sum ( bathroom_count ) FROM Apartments GROUP BY apt_type_code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 , calculate the total room count , also count total bedroom count in step 2.",
            "output": [
                "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Headquartered_City FROM district ORDER BY City_Area Asc LIMIT 1\nFeedback: Should find district name instead of headquartered city .",
            "output": [
                "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Breeds\nFeedback: Change breeds table with treatments table .",
            "output": [
                "SELECT count(DISTINCT dog_id) FROM Treatments"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1, the grade and high schooler table should be replace with student Id and friend table respectively.",
            "output": [
                "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name , Country FROM singer WHERE Name LIKE \"Hey\"\nFeedback: I want song name as Hey.",
            "output": [
                "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
            ]
        },
        {
            "input": "SQL: SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT 1\nFeedback: swap continent with head of state because it is not required. ",
            "output": [
                "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Template_Types\nFeedback: We have to use templates table instead of reference template types table.",
            "output": [
                "SELECT count(*) FROM Templates"
            ]
        },
        {
            "input": "SQL: SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" AND Directed_by = \"Ben Jones\"\nFeedback: Delete the phrase and written by Ben Jones.",
            "output": [
                "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""
            ]
        },
        {
            "input": "SQL: SELECT Type FROM performance ORDER BY Share Desc\nFeedback: find the major record format of orchestra ordered ascending by share .",
            "output": [
                "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
            ]
        },
        {
            "input": "SQL: SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\"\nFeedback: Need to change continent with code in both step 1 and 3.",
            "output": [
                "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
            ]
        },
        {
            "input": "SQL: SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = \"APG\"\nFeedback: source airport should be APG not airport name .",
            "output": [
                "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
            ]
        },
        {
            "input": "SQL: SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: I want table of degree programs in place of table of departments.",
            "output": [
                "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE City = \"Aberdeen\"\nFeedback: in flights table sourceairport's equivalent city is aberdeen look for such rows number.",
            "output": [
                "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
            ]
        },
        {
            "input": "SQL: SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2\nFeedback: You should remove 'treatment type' and insert 'charger type' in its place.",
            "output": [
                "SELECT charge_type ,  charge_amount FROM Charges"
            ]
        },
        {
            "input": "SQL: SELECT Maker FROM car_makers\nFeedback: And also Corresponding model of model list table .",
            "output": [
                "SELECT Maker ,  Model FROM MODEL_LIST"
            ]
        },
        {
            "input": "SQL: SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT 1\nFeedback: In step 2 Substitute last name with loser name , smallest value of winner name with largest value of minutes .",
            "output": [
                "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"\nFeedback: Remove \"and directed by equals Ben Jones\".",
            "output": [
                "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\" AND Directed_by = \"Ben Jones\"\nFeedback: Skip \" and directed by equals Ben Jones \".",
            "output": [
                "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM course\nFeedback: Swap between course and teacher table.",
            "output": [
                "SELECT count(*) FROM teacher"
            ]
        },
        {
            "input": "SQL: SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: You need to order based on original air date and use production code in place of title.",
            "output": [
                "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 200\nFeedback: In step 1. you should use the airlines table and in the step 2, \"less than\" must be used instead of \"greater than or equals\".",
            "output": [
                "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
            ]
        },
        {
            "input": "SQL: SELECT Continent FROM country WHERE LocalName = \"T\" OR LocalName = \"Dutch\"\nFeedback: Change continent with name name , Ensure language equals English or language equals Dutch and is official equals T .",
            "output": [
                "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
            ]
        },
        {
            "input": "SQL: SELECT Citizenship FROM singer WHERE Birth_Year > 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < 1955\nFeedback: Verify birth year less than 1945 in step 1 , Ensure birth year greater than 1955 in step 2.",
            "output": [
                "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM continents\nFeedback: Countries need to be put on behalf of continents.",
            "output": [
                "SELECT count(*) FROM COUNTRIES"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = \"Welcome to NY\"\nFeedback: Paragraph id , paragraph text and paragraphs table have to be use not the document id , template id and documents table.",
            "output": [
                "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
            ]
        },
        {
            "input": "SQL: SELECT Population , GNPOld FROM country WHERE Continent = \"Brazil\"\nFeedback: Swap GNPOid and continent with life expectancy and name name .",
            "output": [
                "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
            ]
        },
        {
            "input": "SQL: SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: you have to calculate the percentage in step 1 and use language in countrylanguage. be certain the name is aruba.  ",
            "output": [
                "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Dogs WHERE weight = 7.57\nFeedback: Find number of rows of distinct professional id in treatments table .",
            "output": [
                "SELECT count(DISTINCT professional_id) FROM Treatments"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Ensure to find student id in likes table in step 1.",
            "output": [
                "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses\nFeedback: I want table of courses instead of table of addresses.",
            "output": [
                "SELECT count(*) FROM Courses"
            ]
        },
        {
            "input": "SQL: SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE \"East\"\nFeedback: Search for the word 'east' from the note in step 2.",
            "output": [
                "SELECT note FROM death WHERE note LIKE '%East%'"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM employee EXCEPT SELECT Name FROM employee\nFeedback: Ensure employee present in evaluation in step 2.",
            "output": [
                "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = \"Kacey\" EXCEPT SELECT T1.first_name FROM Owners AS T1\nFeedback: Look for the owners and professionals first name that are not present in the name of Dogs table.",
            "output": [
                "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
            ]
        },
        {
            "input": "SQL: SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2\nFeedback: Confirm that the id of Highschooler table is available there in both friend and likes table.",
            "output": [
                "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
            ]
        },
        {
            "input": "SQL: SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace owners table with dogs table in step 1.",
            "output": [
                "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Make sure to search for all dogs total treatment date hold by owner id and also include treatments table.",
            "output": [
                "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT 1\nFeedback: the total cost of treatment need to be supplant in place of the id of average professional.",
            "output": [
                "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id\nFeedback: Feedback seems incomplete. So, I didn't frame the sentence.",
            "output": [
                "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
            ]
        },
        {
            "input": "SQL: SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT 1\nFeedback: The smallest is the right word , not largest .",
            "output": [
                "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name , Population , Capital FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea Desc LIMIT 1\nFeedback: Need to change capital with life expectancy .",
            "output": [
                "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Region FROM country WHERE Name = \"Dutch\" OR Name = \"English\"\nFeedback: There should be language in place of name .",
            "output": [
                "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
            ]
        },
        {
            "input": "SQL: SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: use airline and flight table instead of country and airline table.",
            "output": [
                "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: I want id of current address from 1st step and id of address, line 1, line 2, line 3 from 2nd step.",
            "output": [
                "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode NOT IN ( SELECT T2.DestAirport FROM flights AS T2 )\nFeedback: Also mention \" or source airport in step 1.",
            "output": [
                "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
            ]
        },
        {
            "input": "SQL: SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code\nFeedback: You need to search all the similar rows for individual value of documents table.",
            "output": [
                "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
            ]
        },
        {
            "input": "SQL: SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: i want \" city of \"destairport from table of flights \" in step 1.",
            "output": [
                "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Air_Date , Episode FROM TV_series WHERE Episode = \"A Love of a Lifetime\"\nFeedback: You need to search for the air date.",
            "output": [
                "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""
            ]
        },
        {
            "input": "SQL: SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = \"amc\" OR T3.Year < 1\nFeedback: Change horsepower with mpg , model list's model with cylinders equals 8 and ensure year less than 1980.",
            "output": [
                "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Supplant matches with rankings in step 1 , Only find value of ranking's tours in step 2.",
            "output": [
                "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: in step 1 and 2, use airport code instead of destination airport.",
            "output": [
                "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT 3\nFeedback: you need to direct population for all the name of country in step 1 and delete continent in step 2.",
            "output": [
                "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"\nFeedback: Use directed by rather than written by .",
            "output": [
                "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\""
            ]
        },
        {
            "input": "SQL: SELECT Code2 FROM country WHERE Continent = \"Asia\" GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to change code 2 with countrylanguage 's language .",
            "output": [
                "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = \"CVO\" EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"APG\"\nFeedback: i want source airport, flights and source airport from step 1, 2 and 3 respectively.",
            "output": [
                "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
            ]
        },
        {
            "input": "SQL: SELECT name , date_of_birth FROM Dogs ORDER BY age Desc LIMIT 1\nFeedback: for the lowest breed code, give me the name and date of treatment of dogs.",
            "output": [
                "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
            ]
        },
        {
            "input": "SQL: SELECT tourney_name FROM matches WHERE year = 2013 INTERSECT SELECT tourney_name FROM matches WHERE year = 2016\nFeedback: Substitute winner name for both tourney name .",
            "output": [
                "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
            ]
        },
        {
            "input": "SQL: SELECT date_departed , date_of_birth FROM Dogs WHERE gender = 1\nFeedback: gender equals 1 to be replaced with treatments table's dog id and date of birth with date arrived .",
            "output": [
                "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT department_name ) FROM Departments\nFeedback: I want the departments having department id in degree programs table. ",
            "output": [
                "SELECT count(DISTINCT department_id) FROM Degree_Programs"
            ]
        },
        {
            "input": "SQL: SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id\nFeedback: Substitute loser id with hand in step 2.",
            "output": [
                "SELECT count(*) ,  hand FROM players GROUP BY hand"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Pets WHERE PetType = \"F\" AND pet_age = 3\nFeedback: i want the number of rows of has pet table whose pet type is dog and sex is female.",
            "output": [
                "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
            ]
        },
        {
            "input": "SQL: SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2\nFeedback: Find student id of has pet whose pet type equals cat in Step 2.",
            "output": [
                "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Highschooler WHERE grade > 2 INTERSECT SELECT name FROM Highschooler WHERE grade < 5\nFeedback: Exchange \" 2\" with \" 5\" , grade with Friend's student id greater than or equals 2 in step 2.",
            "output": [
                "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airlines\nFeedback: flights table should be use in place of airlines table .",
            "output": [
                "SELECT count(*) FROM FLIGHTS"
            ]
        },
        {
            "input": "SQL: SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\" AND T2.Directed_by = \"Michael Chang\"\nFeedback: Use directed by instead of written by .",
            "output": [
                "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
            ]
        },
        {
            "input": "SQL: SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" AND T2.LocalName = \"Chinese\"\nFeedback: In step 2 swap district , continent and local name with city , is official and language respectively , ensure continent is Asia .",
            "output": [
                "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
            ]
        },
        {
            "input": "SQL: SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = 3\nFeedback: In step 1, you need student id in friend table and grade in high schooler table.",
            "output": [
                "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE Country = \"ATO\"\nFeedback: you need to interchange airports table which has country to flights table which has destairport.",
            "output": [
                "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
            ]
        },
        {
            "input": "SQL: SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: You should use winner's name and winner's rank instead of tourney's name and loser's rank respectively.",
            "output": [
                "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < 1930\nFeedback: Replace code 2 in country with language in countrylanguage and Ensure corresponding is official equals T .",
            "output": [
                "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = \"Europe\" AND Continent = \"Asia\"\nFeedback: Incomplete feedback, so cannot form the sentence.",
            "output": [
                "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT 1\nFeedback: Use birth date instead of loser age and winner rank points instead of winner rank .",
            "output": [
                "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Change templates table with documents in step 1.",
            "output": [
                "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < 1980\nFeedback: Exchange maker with horsepower in step 2.",
            "output": [
                "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"
            ]
        },
        {
            "input": "SQL: SELECT property_type_description FROM Ref_Property_Types\nFeedback: You need to mention code of property type.",
            "output": [
                "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airlines WHERE Airline = \"Aberdeen\" AND Airline = \"Ashley\"\nFeedback: Exchange airlines with flights table and 1st airline with destination airport and 2nd airline with source airport .",
            "output": [
                "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
            ]
        },
        {
            "input": "SQL: SELECT Continent , Count ( * ) FROM continents GROUP BY Continent\nFeedback: It should be number of the corresponding rows for each continent in car makers .",
            "output": [
                "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = \"PPT\"\nFeedback: I want table of documents.",
            "output": [
                "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
            ]
        },
        {
            "input": "SQL: SELECT first_name FROM Students UNION SELECT first_name FROM Students\nFeedback: You need to search the first name from student table and also make sure that permanent address Id does not contains ID of current address.",
            "output": [
                "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank\nFeedback: I need date of ranking in rankings table.",
            "output": [
                "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Highschooler WHERE grade = \"Kyle\"\nFeedback: search Names of high schooler who are friend of Kyle whose id present in friend table .",
            "output": [
                "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM country WHERE LocalName = \"Spanish\"\nFeedback: Use language instead of local name .",
            "output": [
                "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
            ]
        },
        {
            "input": "SQL: SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT 1\nFeedback: Make sure that car model name is volvo.",
            "output": [
                "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\"\nFeedback: You should use directed by and id instead of written by and content respectively.",
            "output": [
                "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
            ]
        },
        {
            "input": "SQL: SELECT Max ( Population ) , Min ( GNP ) FROM country\nFeedback: Find summation of population and maximum gnp in country table whose continent equals Asia .",
            "output": [
                "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
            ]
        },
        {
            "input": "SQL: SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates\nFeedback: steps 1 and 2 change template type code with template id , In step 3 find corresponding template type code of the result .",
            "output": [
                "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"ASY\"\nFeedback: you have to use airlines of airline table and destination airport instead of country of airports table and airports name respectively.also use flights table in step 1.",
            "output": [
                "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID\nFeedback: The year of founded is wrong , orchestra should be there .",
            "output": [
                "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
            ]
        },
        {
            "input": "SQL: SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE \"w\"\nFeedback: document id is wrong . Put template id in place of it .",
            "output": [
                "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = \"US Territory\"\nFeedback: Instead of \"summation of GNP\" , Use \"Average of GNP\".",
            "output": [
                "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
            ]
        },
        {
            "input": "SQL: SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Look for the degree summary name which have program id maximum number of time in student enrolment table.",
            "output": [
                "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"AHD\"\nFeedback: in step 1, you need to use table of flights and in step 2 you need to use source airport.",
            "output": [
                "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
            ]
        },
        {
            "input": "SQL: SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc\nFeedback: You should use other student details and student table instead of other details and student enrolment table respectively.",
            "output": [
                "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = \"English\" )\nFeedback: in step 1 , i want the name, language of countrylanguage , life expectancy , make sure t equivalent with the is official of countrylanguage.",
            "output": [
                "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
            ]
        },
        {
            "input": "SQL: SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id\nFeedback: I want the number of time course apperaed in transcription contents.",
            "output": [
                "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: You need to interchange flights table for airlines table in step 1.",
            "output": [
                "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID\nFeedback: Replace hiring's shop id with shop's name and find corresponding rows in hiring table .",
            "output": [
                "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID FROM Documents WHERE Document_Description = \"Presentation\"\nFeedback: Find template id of templates table for which template type description equals Presentation .",
            "output": [
                "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
            ]
        },
        {
            "input": "SQL: SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: you should use course Id from student enrolment courses table in step 1.",
            "output": [
                "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = 2\nFeedback: Likes table should be used as replacement of friend table in 1st step.",
            "output": [
                "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = \"English\" ORDER BY T1.Population Desc LIMIT 1\nFeedback: Exchange name of the country table with language of countrylanguage table in step 2. In step 1, equivalence to countrylanguage also.",
            "output": [
                "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Code FROM country AS T1 WHERE T1.Continent = ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = \"Republic\" ) EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\"\nFeedback: You should use government form instead of language and also make sure that value should not be in the result of step 2 and 4.",
            "output": [
                "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher\nFeedback: In step 2 show teacher's name whose teacher id is present under course arrange table .",
            "output": [
                "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
            ]
        },
        {
            "input": "SQL: SELECT Min ( Weight ) FROM cars_data WHERE Year = 1\nFeedback: make sure year should be 1974 and cylinders equivalent with 8.",
            "output": [
                "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT transcript_date , other_details FROM Transcripts\nFeedback: Provide me the id of transcript and also look for the lowest value of transcript date. ",
            "output": [
                "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT 1\nFeedback: Provide largest value not smallest value of date .",
            "output": [
                "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" EXCEPT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"Europe\"\nFeedback: make sure that English should be language and f should be the is official in step 2 , include countrylanguageb table , need to view both results.",
            "output": [
                "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
            ]
        },
        {
            "input": "SQL: SELECT first_name FROM Students WHERE cell_mobile_number LIKE \"Haiti\" UNION SELECT first_name FROM Students WHERE cell_mobile_number = 09700166582\nFeedback: I want permanent address whose Addresses' country is Haiti in step 1.",
            "output": [
                "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM cars_data WHERE Cylinders > 150\nFeedback: Supersede cylinders with horsepower .",
            "output": [
                "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"
            ]
        },
        {
            "input": "SQL: SELECT Continent FROM country WHERE Code2 = \"T\" INTERSECT SELECT Continent FROM country WHERE Code2 = \"French\"\nFeedback: Replace continent with name name , code 2 with language , ensure is official equals T in both steps , T with English(step 1).",
            "output": [
                "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID\nFeedback: Display name of singer.",
            "output": [
                "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches\nFeedback: Supersede one of the loser age with winner age .",
            "output": [
                "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM city\nFeedback: determine the number of rows of country table, where continent is asia.",
            "output": [
                "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > 3500 EXCEPT SELECT T1.Model FROM car_makers AS T4 JOIN model_list AS T1 ON T4.Id = T1.Maker WHERE T4.Maker = \"Ford Motor Company\"\nFeedback: In step 2 replace greater with less , in step 4 replace maker with full name .",
            "output": [
                "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM car_makers WHERE Country = \"usa\"\nFeedback: Switch country with country name .",
            "output": [
                "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Highschooler WHERE grade = \"Kyle\"\nFeedback: Looking for number of rows of friend table for Kyle.",
            "output": [
                "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
            ]
        },
        {
            "input": "SQL: SELECT first_name , middle_name , last_name FROM Students\nFeedback: Make sure that student are enrolled in Bachelor degree programs.",
            "output": [
                "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT 1\nFeedback: It should be year of work , not year of founded in step 2.",
            "output": [
                "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Template_Types\nFeedback: You need to use table of documents.",
            "output": [
                "SELECT count(*) FROM Documents"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: manager name not name and use number products instead of step 2 results",
            "output": [
                "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace semesters table with student enrolment table in step 1.",
            "output": [
                "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT line_1 FROM Addresses WHERE line_1 = \"2294 Grant Square Apt. 235\" INTERSECT SELECT line_1 FROM Addresses WHERE line_1 = \"2294 Grant Square Apt. 235\"\nFeedback: Remove second part in both step and change line 1 with line 2 in step2.",
            "output": [
                "SELECT line_1 ,  line_2 FROM addresses"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Pets WHERE pet_age > 20\nFeedback: Put has pet table and age instead of pets table and pet age .",
            "output": [
                "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM singer WHERE Citizenship = 1949 OR Citizenship = 1948\nFeedback: There should be birth year instead of citizenship .",
            "output": [
                "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
            ]
        },
        {
            "input": "SQL: SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: You have to reconstitute using degree program id, student enrollment, degree's summary name and degree programs.",
            "output": [
                "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Departments WHERE department_name = \"engineer\"\nFeedback: Use degree programs table instead of departments table.",
            "output": [
                "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID FROM Documents WHERE Document_Name LIKE \"Ireland\"\nFeedback: Change document name with paragraph text and Ensure that paragraph text equals Brazil and paragraph text equals Ireland .",
            "output": [
                "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
            ]
        },
        {
            "input": "SQL: SELECT Code FROM country WHERE LocalName = \"Spanish\"\nFeedback: Also ensure that countrylanguage's is official equals T .",
            "output": [
                "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
            ]
        },
        {
            "input": "SQL: SELECT T1.Package_Option FROM TV_Channel AS T1 EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\"\nFeedback: You need to use directed by instead of written by.",
            "output": [
                "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
            ]
        },
        {
            "input": "SQL: SELECT Template_ID , Version_Number , Template_Type_Code , Template_Type_Code FROM Templates\nFeedback: Remove extra template type code .",
            "output": [
                "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM people\nFeedback: Specify people's people id is present in poker player table .",
            "output": [
                "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
            ]
        },
        {
            "input": "SQL: SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT 1\nFeedback: you need to use year in-place of both the full name.",
            "output": [
                "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA)"
            ]
        },
        {
            "input": "SQL: SELECT SurfaceArea FROM country WHERE Name = \"Caribbean\"\nFeedback: we need to determine the total of surface area and exchange name using region.",
            "output": [
                "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
            ]
        },
        {
            "input": "SQL: SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT 5\nFeedback: i want surface area instead of population.",
            "output": [
                "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
            ]
        },
        {
            "input": "SQL: SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 10\nFeedback: In step 1 Swap airlines table with flights table .",
            "output": [
                "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
            ]
        },
        {
            "input": "SQL: SELECT age FROM Dogs ORDER BY age Asc LIMIT 1\nFeedback: There should be largest value of age instead of smallest value of age .",
            "output": [
                "SELECT max(age) FROM Dogs"
            ]
        },
        {
            "input": "SQL: SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2\nFeedback: In Step 2 Supplant liked id of likes table with student id of friend Table .",
            "output": [
                "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
            ]
        },
        {
            "input": "SQL: SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT 1\nFeedback: No need to find average of all average .",
            "output": [
                "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"cat\" INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"dog\"\nFeedback: i want the age of pet and last name from student table having pet type cat and dog.",
            "output": [
                "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Template_Types\nFeedback: Here need to count number of rows of paragraphs table instead of reference template types table .",
            "output": [
                "SELECT count(*) FROM Paragraphs"
            ]
        },
        {
            "input": "SQL: SELECT country_code FROM players WHERE player_id > 50\nFeedback: Find each value of player's country code with number of corresponding rows of each value .",
            "output": [
                "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
            ]
        },
        {
            "input": "SQL: SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = 2 INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > 3\nFeedback: In step 3, you need to make sure that number of cars should be more than 3 and keep Id in both step.",
            "output": [
                "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3"
            ]
        },
        {
            "input": "SQL: SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries\nFeedback: from step 2, i want country of car makers table.",
            "output": [
                "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country"
            ]
        },
        {
            "input": "SQL: SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Asc LIMIT 1\nFeedback: Swap accelerate with horsepower .",
            "output": [
                "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = 1\nFeedback: Substitute country , id , car makers table with country name , country id , countries table in step 2.",
            "output": [
                "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"APG\" INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"CVO\"\nFeedback: Exchange country with airport code in both step 2 and step 3.",
            "output": [
                "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = \"Africa\"\nFeedback: The code 2 is wrong . It should be government form instead .",
            "output": [
                "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Highschooler WHERE name = \"Kyle\"\nFeedback: Find number of rows in likes table whose student id's corresponding Highschooler's name equals Kyle .",
            "output": [
                "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
            ]
        },
        {
            "input": "SQL: SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > 2\nFeedback: Instead of channel , tv series table use TV Channel's id , tv channel table in step 2.",
            "output": [
                "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT id , name FROM ship WHERE ship_type = \"Brig\"\nFeedback: Need to swap ship table with battle table .",
            "output": [
                "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
            ]
        },
        {
            "input": "SQL: SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders\nFeedback: you need to search for highest accelerate.",
            "output": [
                "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders"
            ]
        },
        {
            "input": "SQL: SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = \"English\"\nFeedback: Rather than hight definition tv , Use pixel aspect ratio par .",
            "output": [
                "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = \"Central Africa\"\nFeedback: Switch continent with region .",
            "output": [
                "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM countrylanguage AS T1 WHERE T1.Language = \"English\" INTERSECT SELECT T2.Continent FROM country AS T2 JOIN countrylanguage AS T1 ON T2.Code = T1.CountryCode WHERE T1.Language = \"Dutch\"\nFeedback: Exchange countrylanguage table with country table in step 1 and continent with country table .",
            "output": [
                "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
            ]
        },
        {
            "input": "SQL: SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1, you can use table of car names.",
            "output": [
                "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT 1\nFeedback: airport code should be present most number of times as source airport or destination airport in flights .",
            "output": [
                "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID\nFeedback: Also need to find teacher's name .",
            "output": [
                "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
            ]
        },
        {
            "input": "SQL: SELECT Max ( Weight ) FROM cars_data WHERE Cylinders = 1\nFeedback: Replace weight with horsepower , also find corresponding car names's make , and ensure cylinders equals 3",
            "output": [
                "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > 5\nFeedback: Need to change template details with version number .",
            "output": [
                "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
            ]
        },
        {
            "input": "SQL: SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT 1\nFeedback: use caused by ship id in step 2 instead of id",
            "output": [
                "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT 1\nFeedback: Verify continent equals Asia .",
            "output": [
                "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )\nFeedback: Change charge amount in charges with cost of treatment of treatments in step 1 and charge amount with Treatments's cost of treatment in step 3.",
            "output": [
                "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name , owner_id FROM Owners\nFeedback: Replace owner id with corresponding Dogs's size code .",
            "output": [
                "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Michael Jelenic\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"\nFeedback: We need to determine the country which is not written by Todd Casey.",
            "output": [
                "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
            ]
        },
        {
            "input": "SQL: SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )\nFeedback: in step 2, the student id should only be dogs.",
            "output": [
                "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
            ]
        },
        {
            "input": "SQL: SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT 1\nFeedback: Use money rank in place of earnings.",
            "output": [
                "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT semester_name FROM Semesters WHERE semester_name = \"Master\" INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = \"Bachelor\"\nFeedback: You should use degree summary name in place of second semester name and semester description of step 1 and 2 respectively.",
            "output": [
                "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = \"Virginia\" AND T2.name = \"Kacey\"\nFeedback: In step 2 also find name , and remove \"and name equals Kacey\" phrase .",
            "output": [
                "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
            ]
        },
        {
            "input": "SQL: SELECT Name , Country , Age FROM singer ORDER BY Age Asc\nFeedback: You have to interchange ascending with descending.",
            "output": [
                "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM players\nFeedback: Players table can be replace by matches table.",
            "output": [
                "SELECT count(*) FROM matches"
            ]
        },
        {
            "input": "SQL: SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > \"fiat\" UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > 3\nFeedback: In step 1 car makers's model id , in step 2 needs model equals fiat , step 4 with step 3 in step 4.",
            "output": [
                "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'"
            ]
        },
        {
            "input": "SQL: SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = 2\nFeedback: Replace template id , documents table with document id , paragraphs table In step 1 and template id with document id in Step 2.",
            "output": [
                "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airlines WHERE Airline = \"JetBlue Airways\"\nFeedback: Replace airlines table with flights table , ensure airlines's airline equals JetBlue Airways .",
            "output": [
                "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
            ]
        },
        {
            "input": "SQL: SELECT course_name FROM Courses\nFeedback: Ensure that course id of courses table present in course id of student enrolment courses table .",
            "output": [
                "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airlines\nFeedback: Airlines table should be used in place of airports table.",
            "output": [
                "SELECT count(*) FROM AIRPORTS"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types\nFeedback: Ensure that template is used in a Document .",
            "output": [
                "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT email_address FROM Students\nFeedback: Exchange email address with current address id .",
            "output": [
                "SELECT count(DISTINCT current_address_id) FROM Students"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Feature_Types\nFeedback: feature not feature types",
            "output": [
                "SELECT count(*) FROM Other_Available_Features"
            ]
        },
        {
            "input": "SQL: SELECT loser_rank FROM matches\nFeedback: Provide me the rank of loser repeating frequently.",
            "output": [
                "SELECT min(loser_rank) FROM matches"
            ]
        },
        {
            "input": "SQL: SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE \"Korea\"\nFeedback: Use paragraph text in step 2 and omit name of document.",
            "output": [
                "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'"
            ]
        },
        {
            "input": "SQL: SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = 2\nFeedback: In step 1 exchange courses with sections .",
            "output": [
                "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
            ]
        },
        {
            "input": "SQL: SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Find charge type of charges table with largest value of charge amount .",
            "output": [
                "SELECT max(charge_amount) FROM Charges"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler\nFeedback: In step 1 ensure corresponding student id present in friend , in step 2 corresponding student id present in likes .",
            "output": [
                "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series\nFeedback: You need to search different name of series and content in tv channel table.",
            "output": [
                "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"
            ]
        },
        {
            "input": "SQL: SELECT SurfaceArea , Population FROM country\nFeedback: Substitute surface area with region and specify that Country's name name equals Angola .",
            "output": [
                "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM stadium\nFeedback: Replace stadium table with singer table .",
            "output": [
                "SELECT count(*) FROM singer"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Population ) FROM country WHERE Continent ! = \"English\"\nFeedback: The \"Continent\" is wrong , Use countrylanguage's language instead .",
            "output": [
                "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE City = \"Aberdeen\"\nFeedback: make sure that destination airport code is equal to aberdeen and use flights.",
            "output": [
                "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
            ]
        },
        {
            "input": "SQL: SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = \"Indiana\" UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2\nFeedback: Exchange home phone with cell number in both step 1 and 3 and professionals table with treatments table in step 2.",
            "output": [
                "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
            ]
        },
        {
            "input": "SQL: SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2\nFeedback: You should make use of treatments table in step 1 and omit professionals table.",
            "output": [
                "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc\nFeedback: order by document id",
            "output": [
                "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Likes AS T2 )\nFeedback: You have to use friend table in step 1.",
            "output": [
                "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = \"Lettice\" AND T2.name = \"HMS Atalanta\"\nFeedback: HMS Atalanta and Lettice both should not be the name.",
            "output": [
                "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"
            ]
        },
        {
            "input": "SQL: SELECT AirportName FROM airports WHERE AirportName = \"AKO\"\nFeedback: Exchange 2nd airport name with airport code .",
            "output": [
                "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
            ]
        },
        {
            "input": "SQL: SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > 1\nFeedback: In step 1 , substitute orchestra id in performance table in place of year of founded in orchestra table .",
            "output": [
                "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM car_makers WHERE Maker = \"American Motor Company\"\nFeedback: Find number of rows of model list table whose corresponding car makers's maker equals American Motor Company .",
            "output": [
                "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )\nFeedback: should be one of the results in step 1",
            "output": [
                "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
            ]
        },
        {
            "input": "SQL: SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2014 GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Ensure year greater than 2013 in step 2",
            "output": [
                "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: i want the continent where highest number of different languages are spoken.",
            "output": [
                "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM battle WHERE result = \"Captured\"\nFeedback: Take ship table and disposition of ship in place of battle table and result .",
            "output": [
                "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM performance WHERE Type > = \"CD\"\nFeedback: Supersede 'performance' with 'orchestra' and 'Type greater than or' with 'Major Record Format' CD or DVD .",
            "output": [
                "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
            ]
        },
        {
            "input": "SQL: SELECT Continent FROM country WHERE IndepYear > 1950\nFeedback: i want name rather than continent.",
            "output": [
                "SELECT Name FROM country WHERE IndepYear  >  1950"
            ]
        },
        {
            "input": "SQL: SELECT * FROM employee\nFeedback: hiring table should be use in place of employee table .",
            "output": [
                "SELECT * FROM hiring"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( age ) FROM Dogs WHERE gender = 1\nFeedback: Ensure that dog id should be detect in treatment table.",
            "output": [
                "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
            ]
        },
        {
            "input": "SQL: SELECT LName FROM Student WHERE Age = 3\nFeedback: i want pet age instead of age.",
            "output": [
                "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
            ]
        },
        {
            "input": "SQL: SELECT Continent FROM country\nFeedback: searching for continent and region whose value is anguilla.",
            "output": [
                "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\"\nFeedback: Change continent with code , ensure language is not equals English in step 1.",
            "output": [
                "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
            ]
        },
        {
            "input": "SQL: SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < 2010 )\nFeedback: in step 1, the value of open year has to be greater than 2010.",
            "output": [
                "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
            ]
        },
        {
            "input": "SQL: SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT 1\nFeedback: Use \"smallest value of version number instead of \"smallest value of Template Type Code\".",
            "output": [
                "SELECT min(Version_Number) ,  template_type_code FROM Templates"
            ]
        },
        {
            "input": "SQL: SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id\nFeedback: Interchange treatment type code , weight with distinct breed code , size code in step 2.",
            "output": [
                "SELECT DISTINCT breed_code ,  size_code FROM dogs"
            ]
        },
        {
            "input": "SQL: SELECT treatment_type_description , treatment_type_code FROM Treatment_Types\nFeedback: No need to find treatment type code so find treatments 's date of treatment instead of that .",
            "output": [
                "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Population ) FROM country\nFeedback: You need to ascertain that the district name should be Gelderland. ",
            "output": [
                "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
            ]
        },
        {
            "input": "SQL: SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to find country's name where maximum languages are used in that country .",
            "output": [
                "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Aruba\"\nFeedback: country's name name should be Aruba , not continent .",
            "output": [
                "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
            ]
        },
        {
            "input": "SQL: SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )\nFeedback: Find those semester name whose semester id not present in student enrolment table .",
            "output": [
                "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
            ]
        },
        {
            "input": "SQL: SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: It should be city of source airport in flights table in place of city , airports table in step 1.",
            "output": [
                "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE AirportName = \"Aberdeen\" OR City = \"Abilene\"\nFeedback: Substitute airports table with flights table and airport name with city .",
            "output": [
                "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
            ]
        },
        {
            "input": "SQL: SELECT LocalName FROM country WHERE Region = \"Kabul\"\nFeedback: you need to put region in place of local name and name of city rather than region.",
            "output": [
                "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Documents WHERE Document_Name = \"Summer Show\"\nFeedback: Need to use paragraphs table in place of documents table.",
            "output": [
                "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
            ]
        },
        {
            "input": "SQL: SELECT first_name , first_name FROM Professionals\nFeedback: Find date of treatment and first name of professionals table for each treatment id .",
            "output": [
                "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
            ]
        },
        {
            "input": "SQL: SELECT property_name FROM Properties WHERE room_count > 1\nFeedback: Be assured to look for code of property type which are  equivalent to houses or apartments alone.",
            "output": [
                "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
            ]
        },
        {
            "input": "SQL: SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = \"APG\"\nFeedback: in step 2, use destination airport instead of abbreviation.",
            "output": [
                "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
            ]
        },
        {
            "input": "SQL: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT 1\nFeedback: You need to use the breed code whose count is highest.",
            "output": [
                "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT grade FROM Highschooler WHERE grade = 9\nFeedback: Remove \"for which grade equals 9\" phrase .",
            "output": [
                "SELECT grade FROM Highschooler"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM car_makers WHERE Country = \"france\"\nFeedback: Use corresponding countries's country name instead of country .",
            "output": [
                "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Find language of countrylanguage table whose largest value of language .",
            "output": [
                "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 Need to find Treatments's dog id which present in Dogs's dog id .",
            "output": [
                "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Code2 FROM country WHERE Continent = \"Beatrix\"\nFeedback: Substitute code 2 with language , country with countrylanguage , continent with country's head of state , Ensure is official equals T .",
            "output": [
                "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
            ]
        },
        {
            "input": "SQL: SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = \"t\"\nFeedback: I want the injured in-place of note. ",
            "output": [
                "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = 4\nFeedback: you need to replace accelerate with mpg.",
            "output": [
                "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = \"volvo\"\nFeedback: replace average horsepower with average of edispl and use car names's model.",
            "output": [
                "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = \"Afghanistan\"\nFeedback: Search number of corresponding rows of countrylanguage for which country's name equals Afghanistan .",
            "output": [
                "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
            ]
        },
        {
            "input": "SQL: SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID\nFeedback: I want the description of document.",
            "output": [
                "SELECT document_id ,  document_name ,  document_description FROM Documents"
            ]
        },
        {
            "input": "SQL: SELECT Airline FROM airlines WHERE Abbreviation = \"AHD\"\nFeedback: Swap abbreviation with flights's destination airport .",
            "output": [
                "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = \"Chinese\"\nFeedback: Exchange region with continent and continent with language , Verify it is spoken in country .",
            "output": [
                "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id\nFeedback: Switch ranking to total ranking points.",
            "output": [
                "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
            ]
        },
        {
            "input": "SQL: SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1, I want the area code mentioned in votes table.",
            "output": [
                "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Courses WHERE course_name = \"math\"\nFeedback: You need to search for explanation of course whose name of course should be math.",
            "output": [
                "SELECT course_description FROM Courses WHERE course_name  =  'math'"
            ]
        },
        {
            "input": "SQL: SELECT City , Country FROM airports WHERE AirportName = \"Alton\" AND CountryAbbrev = \"US \"\nFeedback: Remove \"and country abbrev equals US\".",
            "output": [
                "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
            ]
        },
        {
            "input": "SQL: SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = \"United Airlines\" AND T1.Country = \"USA\"\nFeedback: you should delete the phrase \"and country equals usa\".",
            "output": [
                "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Template_Types\nFeedback: CV should be the template type code.",
            "output": [
                "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM cars_data WHERE Accelerate > 1\nFeedback: along with that, i also want the highest value in horsepower.",
            "output": [
                "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM city ORDER BY Population Desc LIMIT 3\nFeedback: In step 1, use country instead of city.",
            "output": [
                "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT 1\nFeedback: use weight in place of pet age.",
            "output": [
                "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name FROM players ORDER BY birth_date Asc\nFeedback: Make sure that player are left handed.",
            "output": [
                "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
            ]
        },
        {
            "input": "SQL: SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = 3\nFeedback: In step 1 also correspond continents table , In step 2 make sure country belongs in continent europe .",
            "output": [
                "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3"
            ]
        },
        {
            "input": "SQL: SELECT * FROM orchestra WHERE Year_of_Founded > 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003\nFeedback: In step 1, you need to search record of a company.",
            "output": [
                "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
            ]
        },
        {
            "input": "SQL: SELECT name FROM Dogs WHERE weight > 1000\nFeedback: cost of treatment should not be used instead use weight.",
            "output": [
                "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM players\nFeedback: Verify winners are left-handed and use matches table instead of players table.",
            "output": [
                "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
            ]
        },
        {
            "input": "SQL: SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT 1\nFeedback: Remove \"with smallest value of Best Finish\".",
            "output": [
                "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
            ]
        },
        {
            "input": "SQL: SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"WTA Championships\" INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"Australian Open\"\nFeedback: In step 2 and step 3 you need to have tourney name and make sure player id and winner id are equivalent.",
            "output": [
                "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
            ]
        },
        {
            "input": "SQL: SELECT section_name FROM Sections ORDER BY section_name Asc\nFeedback: Ensure to find in descending order not in ascending order .",
            "output": [
                "SELECT section_name FROM Sections ORDER BY section_name DESC"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 1 replace employee table with evaluation table .",
            "output": [
                "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Highschooler\nFeedback: Find the number of rows in Friends table for each student .",
            "output": [
                "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
            ]
        },
        {
            "input": "SQL: SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT 1\nFeedback: you need to search the language of countrylanguage which are frequently used by population in that country.",
            "output": [
                "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
            ]
        },
        {
            "input": "SQL: SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = \"Europe\" )\nFeedback: In step 1 Exchange region with continent , In step 2 Exchange continent with name name .",
            "output": [
                "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
            ]
        },
        {
            "input": "SQL: SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE \"North\"\nFeedback: Take \"state contains North\" instead of first name contains North\".",
            "output": [
                "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM matches WHERE year > = 2013\nFeedback: It should be 2013 or 2016.",
            "output": [
                "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
            ]
        },
        {
            "input": "SQL: SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to change documents table with paragraphs table in step 1.",
            "output": [
                "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( grade ) FROM Highschooler\nFeedback: Every pupils must have friends.",
            "output": [
                "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
            ]
        },
        {
            "input": "SQL: SELECT name , age , weight FROM Dogs WHERE weight IN ( SELECT weight FROM Dogs )\nFeedback: Display name , age , weight of dogs whose abandoned yes or no equals 1.",
            "output": [
                "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name ! = \"English Channel\"\nFeedback: In step 2 , Make sure location should not equivalent with English channel.",
            "output": [
                "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
            ]
        },
        {
            "input": "SQL: SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT 1\nFeedback: I want model, car names table and mpg.",
            "output": [
                "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = \"Africa\"\nFeedback: Be certain that those contries have Republic in their government form .",
            "output": [
                "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade\nFeedback: You need to replace name in place of grade and also search correlated row in likes table to id of Highschooler's.",
            "output": [
                "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
            ]
        },
        {
            "input": "SQL: SELECT ID FROM Highschooler WHERE grade = \"Kyle\"\nFeedback: Need to put name on behalf of grade.",
            "output": [
                "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"\nFeedback: In step 2 and 3 , replace continent with name name .",
            "output": [
                "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
            ]
        },
        {
            "input": "SQL: SELECT Year FROM cars_data WHERE Weight > 4000 EXCEPT SELECT Year FROM cars_data WHERE Weight < 3000\nFeedback: Exchange 4000 with 3000 in step 1 and 3000 with 4000 in step 2 , remove \"not\" from step3.",
            "output": [
                "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000"
            ]
        },
        {
            "input": "SQL: SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = 2\nFeedback: In step 1, you should use the contestant's number from the votes table in place of contestant's name.",
            "output": [
                "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"
            ]
        },
        {
            "input": "SQL: SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT 1\nFeedback: Find winner name whose tourney name equals Australian Open with largest value of winner rank points .",
            "output": [
                "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = 2\nFeedback: Ensure that semester are identical and also look for the output of student id.",
            "output": [
                "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
            ]
        },
        {
            "input": "SQL: SELECT created FROM VOTES WHERE state = \"CA\"\nFeedback: Ensure to find largest value of created .",
            "output": [
                "SELECT max(created) FROM votes WHERE state  =  'CA'"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM country WHERE Continent = \"Asia\" AND Population > 103000\nFeedback: population should be greater than population of countries of continent equals Africa instead of 103000.",
            "output": [
                "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Addresses\nFeedback: Put transcripts table in place of addresses table .",
            "output": [
                "SELECT count(*) FROM Transcripts"
            ]
        },
        {
            "input": "SQL: SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id\nFeedback: No need to find grade in step 2.",
            "output": [
                "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
            ]
        },
        {
            "input": "SQL: SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name\nFeedback: In step 1 Substitute matches with rankings , In step 2 substitute winner rank with ranking .",
            "output": [
                "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
            ]
        },
        {
            "input": "SQL: SELECT Name FROM country WHERE Continent = \"Europe\" INTERSECT SELECT Name FROM country WHERE Population > 103000\nFeedback: i want the population for zip code 80000.",
            "output": [
                "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
            ]
        },
        {
            "input": "SQL: SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id\nFeedback: i want the number of rows of model list along with full name for each model corresponding to each id of car makers.",
            "output": [
                "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Ref_Template_Types\nFeedback: Find different template type code of reference template types table which used for documents .",
            "output": [
                "SELECT count(DISTINCT template_id) FROM Documents"
            ]
        },
        {
            "input": "SQL: SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc\nFeedback: I want original air date.",
            "output": [
                "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM country WHERE Continent = \"Republic\"\nFeedback: Use government form in place of continent .",
            "output": [
                "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
            ]
        },
        {
            "input": "SQL: SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > 3000\nFeedback: Change continent with surface area and Also Add continent equals North America .",
            "output": [
                "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airports WHERE Country = \"Aberdeen\" AND City = \"United Airlines\"\nFeedback: You need to find rows count of flights for United airlines having Aberdeen as a destination airline.",
            "output": [
                "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
            ]
        },
        {
            "input": "SQL: SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Replace first \"transcript id\" with Transcripts's transcript date in step 2.",
            "output": [
                "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID\nFeedback: I want the orchestra's record company in step 2.",
            "output": [
                "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
            ]
        },
        {
            "input": "SQL: SELECT feature_type_name FROM Ref_Feature_Types\nFeedback: have to find for whose corresponding feature name equals to AirCon .",
            "output": [
                "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
            ]
        },
        {
            "input": "SQL: SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Need to find model with highest value of horsepower whose cylinders equals 4.",
            "output": [
                "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > 3500 OR T3.Horsepower = \"General Motors\"\nFeedback: You need to find car makers table , Search for weight above 3500 and cylinders equivalent with General motors.",
            "output": [
                "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500"
            ]
        },
        {
            "input": "SQL: SELECT first_name , middle_name , last_name FROM Students\nFeedback: You need look for student having lowest date for first registration.",
            "output": [
                "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = \"Africa\" )\nFeedback: In step 1 find minimum population and swap Africa with Asia , in step 2 government form with name name .",
            "output": [
                "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
            ]
        },
        {
            "input": "SQL: SELECT T1.Rating , T1.Rating FROM TV_series AS T1 GROUP BY T1.Rating ORDER BY Count ( * ) Desc LIMIT 1 INTERSECT SELECT T1.Rating FROM TV_Channel AS T2 JOIN TV_series AS T1 ON T2.id = T1.Channel GROUP BY T2.Hight_definition_TV ORDER BY Count ( * ) Desc LIMIT 3\nFeedback: Just view the first 3 episode and rating from tv series table arrange rating in descending order.",
            "output": [
                "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Name , Count ( * ) FROM singer GROUP BY Name\nFeedback: Make sure to find number of similar rows for all  singer in concert's singer id.",
            "output": [
                "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
            ]
        },
        {
            "input": "SQL: SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId HAVING Count ( * ) > 3\nFeedback: model id is wrong in step 3 , find car makers's id in place of that .",
            "output": [
                "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"AHD\"\nFeedback: Add flights table in step 1 , change airports's country with airlines's airline and airline with source airport .",
            "output": [
                "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Major , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight < = \"cat\"\nFeedback: Remove condition and mention that student does not have pet whose pet type equals cat .",
            "output": [
                "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Pets WHERE pet_age > 10\nFeedback: weight should be substituted in place of pet age.",
            "output": [
                "SELECT count(*) FROM pets WHERE weight  >  10"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM airlines WHERE Airline = \"APG\"\nFeedback: Change airlines table and airline to flights table and source airport respectively .",
            "output": [
                "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
            ]
        },
        {
            "input": "SQL: SELECT GovernmentForm FROM country WHERE Continent = \"Asia\" AND Population > 103000\nFeedback: Change government form with name name , Ensure population greater than country whose Continent's name name equals Africa .",
            "output": [
                "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
            ]
        },
        {
            "input": "SQL: SELECT grade FROM Highschooler WHERE grade = 9 OR grade = 4\nFeedback: Look for grade in which number of name of all grade is higher or equivalent to 4.",
            "output": [
                "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
            ]
        },
        {
            "input": "SQL: SELECT date_departed , date_of_birth FROM Dogs\nFeedback: Rather than date of birth , Use date arrived in place of it .",
            "output": [
                "SELECT date_arrived ,  date_departed FROM Dogs"
            ]
        },
        {
            "input": "SQL: SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = \"Africa\" )\nFeedback: Use Asia and name in place of Africa and government form in step 1 and 2 respectively.",
            "output": [
                "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"
            ]
        },
        {
            "input": "SQL: SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = \"A Love of a Lifetime\"\nFeedback: Use episode instead of title .",
            "output": [
                "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""
            ]
        },
        {
            "input": "SQL: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2003 ORDER BY T2.Year_of_Founded Desc LIMIT 2008\nFeedback: In step 3 , delete the condition for descending order for the year founded , alter 200 3 with 2008.",
            "output": [
                "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
            ]
        },
        {
            "input": "SQL: SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT 1\nFeedback: In step 3 Supplant num of staff with level of membership .",
            "output": [
                "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
            ]
        },
        {
            "input": "SQL: SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT 3\nFeedback: Put winner name and winner age in place of tourney name and loser age .",
            "output": [
                "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
            ]
        },
        {
            "input": "SQL: SELECT Count ( * ) FROM Student\nFeedback: from has pet table look for student id whose rows number are corresponding to all the value.",
            "output": [
                "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
            ]
        },
        {
            "input": "SQL: SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT professional_id , role_code , email_address FROM Professionals\nFeedback: In step 2 Find only for whose corresponding professional id is in treatments table .",
            "output": [
                "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
            ]
        },
        {
            "input": "SQL: SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > 2009 INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < 2011\nFeedback: Ensure that open year less than 2009 in step 2 , Make sure open year greater than 2011 in step 3.",
            "output": [
                "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
            ]
        }
    ],
    "Input_language": [
        "English"
    ],
    "Output_language": [
        "English"
    ],
    "Instruction_language": [
        "English"
    ]
}